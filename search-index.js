antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,37.476]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1",[0,26.505,1,10.112,2,19.234]],["name/1",[3,1.478]],["text/1",[0,5.618,1,1.617,2,2.855,4,1.962,5,3.13,6,3.017,7,2.863,8,2.545,9,2.416,10,2.829,11,3.266,12,3.58,13,3.017,14,3.218,15,2.023,16,3.266,17,5.255,18,3.149,19,5.464,20,7.252,21,2.331,22,4.15,23,5.161,24,5.161,25,2.692,26,2.008,27,4.465,28,1.836,29,3.423,30,5.074,31,2.505,32,2.414,33,3.505,34,1.989,35,4.786,36,3.563,37,1.867,38,2.284,39,5.603,40,2.186,41,3.13,42,3.218,43,3.665,44,3.437,45,2.651,46,1.201,47,4.613,48,1.789,49,4.116,50,2.25,51,1.572,52,3.355,53,4.92,54,3,55,3.505,56,3.501,57,3.58,58,3.58,59,1.867,60,1.408,61,4.465,62,3.017,63,4.011,64,4.756,65,4.756,66,2.539,67,3.875]],["component/1",[0,0.914,1,0.349,2,0.663]],["title/2-1",[1,8.821,46,14.668,68,35.315,69,37.755]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[1,7.822,46,13.007,68,31.316,70,30.434,71,22.276]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[1,7.026,28,11.684,46,11.684,68,28.131,72,20.01,73,18.164]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[1,3.668,28,6.1,38,11.605,46,6.1,68,14.686,74,17.147,75,13.57,76,20.378,77,15.701,78,15.329,79,25.657,80,9.649,81,15.329,82,8.629]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[1,7.026,46,11.684,68,28.131,71,20.01,83,26.411,84,29.361]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[1,6.378,46,10.605,68,25.533,85,24.814,86,25.045,87,24.814,88,24.814]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2-7",[1,6.378,46,10.605,66,22.425,68,25.533,85,24.814,89,18.547,90,18.873]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["title/2",[1,10.112,46,16.815,91,52.682]],["name/2",[91,2.704]],["text/2",[1,1.832,2,1.508,4,1.297,7,1.892,10,2.501,14,2.127,20,1.95,22,3.824,24,2.23,26,1.327,27,1.93,28,2.939,31,1.656,32,4.743,34,0.859,38,2.508,46,2.939,57,2.366,59,2.05,60,2.311,66,2.788,71,3.745,72,2.258,73,3.887,76,5.651,79,3.207,80,1.255,81,3.313,82,1.865,83,3.824,86,3.114,87,3.085,88,3.085,89,3.446,90,2.346,92,8.069,93,3.438,94,1.424,95,3.044,96,4.592,97,3.774,98,1.502,99,1.559,100,2.763,101,2.763,102,2.23,103,1.892,104,2.486,105,2.042,106,3.788,107,3.276,108,2.486,109,2.097,110,1.316,111,4.111,112,4.842,113,2.23,114,1.251,115,2.23,116,1.994,117,2.486,118,1.425,119,1.645,120,1.193,121,1.364,122,2.412,123,2.346,124,1.95,125,1.376,126,2.458,127,1.418,128,2.097,129,1.824,130,2.651,131,1.808,132,1.713,133,2.316,134,2.316,135,1.595,136,2.914,137,2.651,138,3.143,139,2.486,140,3.139,141,2.097,142,1.667,143,1.824,144,2.486,145,2.017,146,2.486,147,1.322,148,2.914,149,1.487,150,2.651,151,1.316,152,2.933,153,2.366,154,2.193,155,2.017,156,2.127,157,2.366,158,2.271,159,1.794,160,2.651,161,2.017,162,2.193,163,1.752,164,1.406,165,1.971,166,2.522,167,1.892,168,1.752,169,1.586,170,2.159,171,2.716,172,1.893,173,2.561,174,2.561,175,1.156,176,2.496,177,1.359,178,2.914,179,2.651,180,2.159,181,1.808,182,6.145,183,2.914,184,1.444,185,1.635,186,2.213,187,1.738,188,1.322,189,1.458,190,1.091,191,2.914,192,1.55,193,1.874,194,2.422,195,3.143,196,1.624,197,1.994,198,1.892,199,1.752,200,1.689,201,1.264,202,2.159,203,1.856,204,2.561,205,2.097,206,1.542,207,2.069]],["component/2",[91,3.931]],["title/3-1",[208,42.531,209,45.282]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[146,61.717,210,57.497]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[211,82.798]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[212,82.798]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[213,82.798]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[214,82.798]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[215,82.798]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[216,82.798]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[40,35.861,209,45.282]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3-10",[208,42.531,217,48.945]],["name/3-10",[]],["text/3-10",[]],["component/3-10",[]],["title/3-11",[218,76.733]],["name/3-11",[]],["text/3-11",[]],["component/3-11",[]],["title/3-12",[219,23.05,220,52.682,221,56.173]],["name/3-12",[]],["text/3-12",[]],["component/3-12",[]],["title/3-13",[1,10.112,46,16.815,222,38.009]],["name/3-13",[]],["text/3-13",[]],["component/3-13",[]],["title/3",[1,7.822,46,13.007,169,25.996,208,28.083,218,41.978]],["name/3",[223,1.997,224,1.684]],["text/3",[0,0.487,1,1.425,4,0.263,5,4.294,8,0.428,9,0.909,10,0.566,15,0.521,18,0.166,19,0.801,21,1.016,26,0.517,28,0.573,32,0.323,34,2.38,37,0.89,38,1.314,40,0.812,42,0.431,43,0.491,46,2.228,48,0.24,59,1.244,60,0.523,72,0.276,73,0.89,78,0.404,79,1.679,82,1.132,83,1.294,86,0.73,87,0.376,88,0.723,89,2.191,90,1.937,94,0.482,98,0.585,99,0.316,106,0.309,110,0.267,114,0.487,118,0.289,120,0.465,121,0.531,122,0.565,123,2.229,126,1.068,127,1.43,128,0.425,131,0.367,132,0.347,133,0.543,135,0.896,140,0.299,141,0.425,145,0.409,146,6.45,147,0.515,149,0.835,151,0.513,156,0.431,163,0.355,164,0.79,165,1.988,166,0.308,169,0.891,170,1.213,171,0.918,172,0.991,175,0.65,182,0.395,185,0.637,186,0.519,188,1.333,189,0.296,190,3.257,199,0.355,201,0.71,206,0.6,208,3.432,209,5.258,210,0.47,211,2.786,212,3.143,213,3.477,214,2.404,215,1.994,216,1.076,217,2.481,218,4.285,219,2.537,220,5.332,221,1.913,222,2.257,224,1.032,225,0.932,226,0.744,227,0.373,228,0.409,229,1.407,230,0.519,231,0.48,232,0.437,233,1.329,234,0.48,235,0.452,236,0.93,237,0.28,238,0.491,239,0.56,240,1.328,241,0.744,242,0.797,243,1.866,244,1.211,245,2.771,246,1.365,247,6.719,248,1.637,249,1.135,250,0.543,251,0.37,252,1.076,253,0.675,254,0.251,255,1.135,256,0.591,257,0.591,258,0.537,259,0.591,260,3.378,261,3.867,262,2.404,263,0.965,264,0.479,265,0.591,266,0.565,267,1.329,268,0.737,269,0.827,270,0.625,271,2.786,272,3.304,273,0.404,274,4.362,275,0.56,276,1.145,277,2.76,278,0.56,279,1.219,280,0.263,281,0.737,282,1.908,283,0.355,284,0.591,285,0.345,286,0.419,287,1.197,288,0.491,289,0.537,290,2.915,291,1.659,292,0.419,293,1.211,294,0.717,295,0.936,296,0.48,297,0.504,298,0.376,299,1.553,300,0.519,301,0.504,302,0.682,303,1.637,304,0.355,305,0.565,306,1.15,307,0.504,308,1.396,309,0.929,310,2.335,311,0.404,312,0.504,313,0.56,314,1.637,315,0.537,316,1.032,317,1.352,318,1.178,319,1.135,320,0.352,321,0.591,322,0.591,323,0.404,324,0.591,325,0.591,326,0.591,327,0.591,328,0.591,329,1.316,330,0.881,331,1.135,332,1.769,333,1.489,334,0.591,335,0.54,336,1.558,337,0.46,338,0.591,339,1.135,340,0.591,341,1,342,0.258,343,1.637,344,0.525,345,0.358,346,1.327,347,0.334,348,0.46,349,0.452,350,0.629,351,1.489,352,0.677,353,1.076,354,1.316,355,0.347,356,0.301,357,2.673,358,0.795,359,0.391,360,1.12,361,2.986,362,0.977,363,0.997,364,1.135,365,1.032,366,1.707,367,1.637,368,1.135,369,1.135,370,1.135,371,1.135,372,1.135,373,0.754,374,0.591,375,0.806,376,0.968,377,0.591,378,0.491,379,0.491,380,0.47,381,0.591,382,0.46,383,0.591,384,0.591,385,0.591,386,0.445,387,1.135,388,0.523,389,0.452,390,0.48,391,0.409,392,0.404,393,0.34,394,0.56,395,0.723,396,0.47,397,1.164,398,0.373,399,0.591,400,0.591,401,0.56,402,0.591,403,0.591,404,0.591,405,0.591,406,0.591,407,0.591,408,0.591,409,1.135,410,0.591,411,0.591,412,0.529,413,0.46,414,0.56,415,0.737,416,1.135,417,1.388,418,0.519,419,2.685,420,0.445,421,0.641,422,0.48,423,0.316,424,0.591,425,0.74,426,0.591,427,0.48,428,0.537,429,1.076,430,1.076,431,0.504,432,0.331,433,0.504,434,0.591,435,1.825,436,2.126,437,0.637,438,1.826,439,1.095,440,0.667,441,2.103,442,0.869,443,0.395,444,0.387,445,2.523,446,1.135,447,1.178,448,0.56,449,0.352,450,1.583,451,0.591,452,1.195,453,0.591,454,0.591,455,0.591,456,3.009,457,1.637,458,1.637,459,1.637,460,1.637,461,0.591,462,1.535,463,1.084,464,0.591,465,0.591,466,0.591,467,0.591,468,0.591,469,0.591,470,0.591,471,0.591,472,0.591,473,0.591,474,0.591,475,0.591,476,0.591,477,3.513,478,3.997,479,3.1,480,3.997,481,0.591,482,3.41,483,3.177,484,0.591,485,0.591,486,0.591,487,0.591,488,0.591,489,0.591,490,0.591,491,0.591,492,0.591,493,0.591,494,0.591,495,0.591,496,0.591,497,0.591,498,0.591,499,0.591,500,0.591,501,0.591,502,0.409,503,0.537,504,0.274,505,1.158,506,0.869,507,0.438,508,0.591,509,0.591,510,0.445,511,1.101,512,0.425,513,0.387,514,0.611,515,0.384,516,0.325,517,0.395,518,0.338,519,0.419,520,0.519,521,0.395,522,0.47,523,0.537,524,0.56,525,0.591,526,0.591,527,0.848,528,0.316,529,0.314,530,0.283,531,0.591,532,0.519,533,0.364,534,0.409,535,0.591,536,0.361,537,0.452,538,0.414,539,0.637,540,0.637,541,0.637,542,0.637,543,0.637,544,0.504,545,2.103,546,0.519,547,0.491,548,0.591,549,0.537,550,0.56,551,0.38,552,0.431,553,0.409,554,0.395,555,0.504,556,0.504,557,0.445,558,0.519,559,0.316,560,0.3,561,0.384,562,0.358,563,0.38,564,0.431,565,0.519,566,0.591,567,0.491,568,0.419,569,0.352,570,0.367,571,0.32,572,0.56,573,0.331,574,0.56,575,0.571,576,0.614,577,0.591,578,0.445,579,0.591,580,0.329,581,1.135,582,0.336,583,0.757,584,1.032,585,0.591,586,0.414,587,3.315,588,0.316,589,0.358,590,0.519,591,0.296,592,1.073,593,0.591,594,2.335,595,2.938,596,1.135,597,0.591,598,0.591,599,0.591,600,0.47,601,0.395,602,0.34,603,4.362,604,0.48,605,0.537,606,2.103,607,0.591,608,1.794,609,2.097,610,1.794,611,2.243,612,1.135,613,0.48,614,1.489,615,0.591,616,0.438,617,0.591,618,0.591,619,0.591,620,0.537,621,0.591,622,0.591,623,1,624,1.135,625,1.639,626,0.921,627,1.076,628,2.938,629,2.635,630,0.591,631,0.591,632,0.591,633,2.938,634,1.637,635,0.949,636,0.591,637,0.591,638,0.591,639,1.135,640,1.032,641,1.135,642,1.034,643,1.135,644,0.591,645,1.135,646,0.431,647,0.591,648,0.425,649,0.591,650,1.135,651,0.591,652,1.637,653,1.637,654,1.008,655,0.862,656,0.591,657,1.135,658,0.907,659,1.135,660,0.943,661,1.135,662,0.614,663,1.135,664,1.135,665,1.135,666,0.591,667,1.135,668,0.301,669,0.591,670,0.591,671,1.135,672,0.591,673,0.391,674,0.38,675,0.391,676,0.431,677,0.519,678,0.591,679,0.409,680,0.519,681,1.135,682,1.135,683,0.591,684,0.519,685,0.373,686,0.902,687,0.56,688,0.594,689,0.452,690,0.376,691,0.293,692,0.278,693,0.537,694,0.704,695,0.591,696,0.591,697,0.34,698,0.687,699,0.343,700,0.409,701,0.334]],["component/3",[1,0.349,46,0.58,169,1.159]],["title/4-1",[702,60.125,703,44.169]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[94,14.156,142,35.318,308,34.007]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[0,31.05,690,46.091]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[168,43.484,704,43.484]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4",[1,8.821,46,14.668,168,32.379,705,51.081]],["name/4",[706,3.419]],["text/4",[0,3.327,1,1.828,8,2.381,14,2.951,34,2.287,37,1.712,44,3.152,46,3.04,72,2.941,73,1.712,82,1.558,90,4.243,94,1.446,121,4.445,126,2.053,142,4.434,149,2.064,156,2.951,157,3.283,163,3.791,165,5.924,168,4.66,171,2.269,172,3.03,175,3.475,184,2.005,200,3.656,202,2.996,206,3.337,208,2.378,209,2.531,247,5.147,260,4.409,261,5.798,263,2.894,272,2.583,277,3.044,287,3.66,288,7.277,295,2.313,306,2.86,308,2.227,310,3.363,316,3.679,317,4.055,320,2.413,330,2.643,346,2.117,357,3.679,393,2.329,437,2.269,527,1.63,591,2.024,690,4.939,705,5.98,707,5.98,708,7.905,709,3.45,710,2.283,711,3.914,712,2.835,713,3.679,714,7.752,715,2.91,716,2.269,717,2.951,718,6.802,719,4.044,720,4.362,721,4.044,722,2.106,723,4.362,724,2.996,725,6.802,726,4.362,727,4.362,728,2.554,729,1.793,730,4.362,731,3.835,732,2.283,733,3.044,734,2.651,735,2.554,736,3.679,737,3.45]],["component/4",[1,0.349,46,0.58,168,1.28]],["title/5-1",[9,13.958,68,25.533,198,25.284,738,33.227,739,33.227,740,14.183,741,17.016]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[68,35.315,172,21.057,219,20.107,742,30.409]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[9,17.119,60,15.254,68,31.316,254,20.29,740,17.395]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[1,5.384,9,11.782,46,8.952,68,21.554,125,15.524,287,15.524,300,15.027,354,13.048,740,11.973]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[9,12.778,60,11.386,68,23.375,95,11.821,125,16.836,388,16.427,740,12.984,743,21.77]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5-6",[68,21.554,114,14.111,735,20.759,744,32.876,745,29.906,746,23.657,747,53.471,748,21.773]],["name/5-6",[]],["text/5-6",[]],["component/5-6",[]],["title/5-7",[9,8.028,19,10.953,34,11.427,68,14.686,151,10.121,309,9.895,722,11.666,740,8.158,749,11.264,750,22.941,751,22.401,752,22.401,753,11.727]],["name/5-7",[]],["text/5-7",[]],["component/5-7",[]],["title/5-8",[68,31.316,250,22.845,701,26.966,754,24.514]],["name/5-8",[]],["text/5-8",[]],["component/5-8",[]],["title/5-9",[68,28.131,85,27.338,701,24.223,754,14.685,755,37.708,756,46.277]],["name/5-9",[]],["text/5-9",[]],["component/5-9",[]],["title/5-10",[26,24.525,68,35.315,120,22.06,445,26.457]],["name/5-10",[]],["text/5-10",[]],["component/5-10",[]],["title/5-11",[26,28.116,68,40.484,757,42.755]],["name/5-11",[]],["text/5-11",[]],["component/5-11",[]],["title/5-12",[68,28.131,123,20.792,175,17.029,182,28.717,186,19.613,758,34.837]],["name/5-12",[]],["text/5-12",[]],["component/5-12",[]],["title/5-13",[9,13.958,68,25.533,232,15.002,243,15.798,318,18.089,740,14.183,759,23.78]],["name/5-13",[]],["text/5-13",[]],["component/5-13",[]],["title/5-14",[9,12.778,68,23.375,95,11.821,232,13.734,740,12.984,759,21.77,760,20.128,761,20.001]],["name/5-14",[]],["text/5-14",[]],["component/5-14",[]],["title/5-15",[9,17.119,68,31.316,318,22.185,512,34.371,740,17.395]],["name/5-15",[]],["text/5-15",[]],["component/5-15",[]],["title/5",[9,22.131,91,52.682,740,22.488]],["name/5",[762,3.419]],["text/5",[1,1.184,2,1.235,9,3.783,10,0.56,15,1.336,21,0.56,25,0.99,26,2.203,28,1.318,32,3.053,34,1.169,37,0.686,40,0.803,41,2.067,46,1.84,48,0.657,49,0.99,50,1.486,52,0.551,54,1.296,59,1.233,60,3.237,61,1.073,71,0.756,72,0.756,75,0.982,80,0.698,82,0.624,87,1.855,89,0.772,92,8.264,94,0.909,95,2.962,97,1.263,98,0.835,106,1.524,113,1.241,114,1.25,116,1.109,118,0.792,120,1.982,123,1.411,125,3.19,126,1.478,127,1.93,132,2.331,133,1.896,134,1.288,139,1.383,144,2.484,147,0.735,151,1.316,154,1.22,158,1.263,161,1.122,164,1.405,167,1.052,169,2.634,171,0.909,172,1.138,175,1.156,176,2.043,182,1.949,186,0.741,190,2.324,192,1.549,194,1.347,198,1.89,200,0.94,219,1.48,222,0.998,227,1.023,232,0.624,237,0.769,243,1.181,244,0.668,245,0.719,251,1.015,253,2.785,254,0.688,264,1.673,269,0.819,270,1.604,272,1.624,276,0.632,279,2.008,280,0.721,287,0.765,291,1.644,302,1.212,318,1.352,335,0.772,344,1.347,354,1.921,373,0.747,388,2.57,397,1.819,398,1.023,412,0.756,427,1.316,436,0.94,440,0.953,445,1.947,462,1.183,463,0.835,504,0.753,512,1.166,514,0.872,517,1.085,527,0.653,529,1.549,530,0.775,533,0.998,537,2.229,557,2.984,560,0.823,567,1.347,580,0.904,583,0.75,591,1.457,611,1.097,655,1.533,668,1.486,692,0.762,699,0.94,701,1.644,704,1.75,722,1.516,724,1.201,728,1.023,735,1.839,740,3.691,741,1.732,742,2.238,743,1.778,745,1.474,746,1.166,747,1.621,748,3.694,749,0.815,750,0.96,751,2.912,752,2.912,754,3.414,757,3.862,758,2.364,759,1.778,760,2.238,763,1.073,764,1.097,765,1.474,766,1.533,767,2.077,768,1.613,769,1.241,770,3.14,771,2.955,772,1.122,773,1.792,774,2.968,775,1.949,776,2.314,777,1.288,778,0.617,779,2.229,780,0.927,781,1.201,782,1.288,783,0.898,784,0.823,785,1.263,786,1.621,787,2.314,788,1.748,789,1.533,790,1.872,791,0.893,792,1.621,793,2.599,794,6.209,795,1.22,796,1.748,797,1.474,798,1.537,799,1.537,800,0.608,801,1.748,802,1.748,803,1.748,804,1.748,805,3.142,806,1.724,807,1.316,808,1.424,809,2.599,810,1.855,811,0.94,812,1.316,813,1.263,814,2.649,815,1.537,816,2.503,817,1.052,818,1.474,819,1.748,820,1.839,821,2.043,822,1.22,823,1.122,824,1.033,825,1.122,826,1.623,827,1.748,828,2.745,829,0.753,830,1.621,831,1.474,832,1.537,833,3.035,834,0.867,835,2.314,836,0.898,837,0.921,838,1.136,839,1.437,840,4.013,841,1.474,842,3.76,843,1.748,844,0.849,845,1.474,846,1.042,847,1.122,848,1.474,849,1.288,850,3.219,851,1.063,852,1.166,853,1.621,854,0.967,855,1.073,856,0.775,857,2.157,858,0.67,859,2.192,860,1.183,861,1.501,862,1.151,863,2.331,864,2.298,865,1.7,866,1.347,867,0.815,868,1.201,869,0.946,870,1.033,871,1.073,872,1.109,873,1.621,874,1.748,875,1.748,876,1.748,877,1.122,878,1.748,879,1.748,880,0.893,881,0.668]],["component/5",[9,0.763,91,1.817,740,0.776]],["title/6",[9,22.131,56,26.413,882,58.558]],["name/6",[3,1.478]],["text/6",[9,3.613,56,4.311,82,3.883,514,5.423,780,5.765,781,7.467,882,11.218,883,9.559]],["component/6",[56,1.246,884,2.365]],["title/7-1",[243,25.048,767,26.505,885,47.267]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[9,19.305,583,24.917,658,29.844,880,29.664]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[886,55.63]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[56,37.346]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[880,48.084]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7",[583,33.463,887,72.341]],["name/7",[583,0.856,888,1.393]],["text/7",[1,1.612,2,1.774,4,3.339,9,2.041,10,0.893,18,1.234,20,2.93,33,2.054,34,1.68,37,1.853,40,1.281,46,2.219,48,1.776,49,1.578,50,1.319,51,0.921,54,1.15,56,4.07,60,1.398,61,2.899,70,1.646,72,2.656,75,2.652,82,0.995,92,2.271,93,1.835,94,0.592,118,1.264,123,1.252,125,1.22,129,1.618,132,2.574,169,1.406,172,1.711,181,1.604,190,1.639,193,1.662,208,1.519,209,1.618,219,0.965,243,3.305,244,1.065,245,2.525,253,1.065,263,1.186,264,1.09,266,1.287,269,1.306,276,3.176,283,3.424,290,1.748,330,1.083,334,1.346,346,1.353,386,3.295,388,1.191,390,2.098,417,3.118,425,1.978,437,3.195,438,2.18,504,3.785,505,1.423,515,1.678,527,3.024,528,2.342,529,2.329,530,1.236,532,3.847,580,1.441,583,1.195,601,2.93,608,2.205,623,1.578,655,1.36,685,1.632,697,2.521,701,2.472,704,3.424,709,3.735,732,2.472,741,1.129,742,1.459,746,1.86,760,1.459,767,3.22,784,1.312,793,1.694,811,2.538,826,2.441,834,1.383,880,5.719,885,4.36,886,5.818,887,2.584,889,1.768,890,4.734,891,2.205,892,6.401,893,2.451,894,2.787,895,3.478,896,2.014,897,2.787,898,1.509,899,2.815,900,2.148,901,2.351,902,2.584,903,1.886,904,5.848,905,3.031,906,2.787,907,1.398,908,4.152,909,2.673,910,1.578,911,2.787,912,2.451,913,2.787,914,2.787,915,2.787,916,2.787,917,1.886,918,2.148,919,2.787,920,3.847,921,2.787,922,2.451,923,2.787,924,2.787,925,2.787,926,2.351,927,3.671,928,2.584,929,2.271,930,5.181,931,1.978,932,4.722,933,4.197,934,2.842,935,1.748,936,2.148,937,1.53,938,1.914,939,1.353,940,2.054,941,3.983,942,2.787,943,2.678,944,2.787,945,1.86,946,1.914,947,1.632,948,2.054,949,2.787,950,4.722,951,2.787,952,1.468,953,2.787,954,1.478,955,1.406,956,1.519,957,2.014,958,2.93,959,2.054,960,2.271,961,2.695,962,1.591,963,1.415,964,1.332,965,2.787,966,2.451,967,1.281,968,1.646]],["component/7",[56,1.246,884,2.365]],["title/8-1",[37,26.141,169,33.607,750,36.569]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[89,29.406,900,51.324,969,33.607]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[169,33.607,320,36.84,970,58.558]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[169,33.607,237,29.282,287,29.158]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8-5",[40,30.611,94,14.156,854,36.84]],["name/8-5",[]],["text/8-5",[]],["component/8-5",[]],["title/8-6",[120,25.29,341,37.703,971,36.569]],["name/8-6",[]],["text/8-6",[]],["component/8-6",[]],["title/8-7",[32,29.488,40,26.702,94,12.348,419,31.445]],["name/8-7",[]],["text/8-7",[]],["component/8-7",[]],["title/8-8",[89,29.406,94,14.156,927,33.805]],["name/8-8",[]],["text/8-8",[]],["component/8-8",[]],["title/8-9",[89,29.406,927,33.805,972,56.173]],["name/8-9",[]],["text/8-9",[]],["component/8-9",[]],["title/8-10",[40,43.283]],["name/8-10",[]],["text/8-10",[]],["component/8-10",[]],["title/8-11",[9,19.305,245,23.881,419,31.445,880,29.664]],["name/8-11",[]],["text/8-11",[]],["component/8-11",[]],["title/8",[9,22.131,40,30.611,880,34.007]],["name/8",[40,1.571]],["text/8",[0,0.602,1,0.418,2,1.351,4,0.624,9,3.789,11,1.039,12,1.139,15,0.644,18,0.395,21,1.742,32,1.926,34,2.472,40,3.508,46,1.372,50,2.212,72,1.641,77,1.791,82,2.564,88,1.628,89,4.224,90,1.705,94,1.709,100,1.33,101,1.33,114,0.602,120,3.052,121,0.657,122,1.273,123,1.705,127,0.683,129,0.878,131,0.871,135,1.399,149,0.716,152,1.548,163,1.536,166,1.832,169,3.622,172,1.375,175,1.014,177,1.641,181,1.586,186,1.168,190,2.649,200,0.813,201,0.608,219,2.484,225,0.622,232,0.54,237,1.668,242,0.683,244,0.578,245,2.741,260,2.34,264,0.592,266,0.699,272,1.776,276,2.758,282,1.923,285,1.492,290,1.729,291,0.792,293,0.808,295,1.461,306,1.967,308,1.938,317,0.902,320,1.524,330,1.474,332,1.697,341,5.273,342,0.613,344,1.182,346,0.734,350,0.777,354,1.014,362,0.837,366,1.139,373,0.646,375,1.814,376,1.197,397,1.99,412,0.654,419,5.041,420,2.648,432,0.787,437,1.433,440,0.825,445,1.728,463,0.723,511,0.734,518,0.802,527,1.03,529,0.746,530,1.683,537,1.956,538,0.983,551,0.902,562,0.85,567,1.166,569,0.837,571,0.759,580,1.424,583,1.628,589,1.548,591,0.702,601,0.939,602,0.808,609,0.802,626,1.139,654,0.863,658,0.777,662,1.383,675,0.929,685,0.886,688,0.734,704,2.115,732,2.448,749,0.705,750,1.513,766,1.345,782,1.115,784,0.712,809,0.92,834,1.367,839,0.692,849,2.797,851,0.92,854,2.099,880,4.105,888,1.923,893,7.947,900,2.124,907,0.759,909,0.856,927,5.083,935,1.729,939,0.734,969,0.763,970,2.423,971,2.984,972,2.324,973,0.604,974,0.92,975,1.659,976,5.863,977,1.769,978,7.793,979,6.142,980,1.403,981,6.656,982,1.56,983,1.513,984,1.513,985,5.773,986,1.276,987,1.056,988,0.787,989,0.819,990,9.471,991,1.403,992,7.076,993,6.656,994,1.403,995,1.233,996,1.024,997,1.056,998,1.33,999,1.403,1000,1.403,1001,1.513,1002,1.33,1003,2.756,1004,1.986,1005,2.756,1006,1.403,1007,3.201,1008,1.991,1009,1.513,1010,1.233,1011,1.403,1012,1.233,1013,0.843,1014,0.939,1015,2.245,1016,1.139,1017,3.519,1018,5.434,1019,0.929,1020,1.024,1021,2.084,1022,1.233,1023,0.996,1024,0.902,1025,1.403,1026,1.166,1027,1.513,1028,0.886,1029,1.513,1030,0.813,1031,1.33,1032,2.026,1033,1.039,1034,4.336,1035,1.513,1036,2.756,1037,1.024,1038,2.756,1039,2.738,1040,3.519,1041,2.555,1042,2.756,1043,0.96,1044,1.359,1045,1.513,1046,0.797,1047,1.513,1048,4.677,1049,1.513,1050,1.33,1051,1.513,1052,1.513,1053,1.403,1054,1.513,1055,1.403,1056,1.33,1057,1.513,1058,0.939,1059,0.683,1060,1.139,1061,1.513,1062,0.949,1063,1.403,1064,1.513,1065,1.513,1066,1.403,1067,1.139,1068,1.471,1069,0.939,1070,1.197,1071,1.056,1072,0.911,1073,0.911,1074,1.115,1075,0.768,1076,2.756,1077,1.33,1078,1.115,1079,1.33,1080,1.233,1081,2.532,1082,4.677,1083,1.513,1084,1.33,1085,1.513,1086,2.423,1087,1.513,1088,2.756]],["component/8",[56,1.246,884,2.365]],["title/9-1",[9,22.131,880,34.007,1089,52.682]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[89,29.406,397,28.338,927,33.805]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[48,21.85,50,27.485,89,25.652,927,29.488]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[19,30.192,89,29.406,927,33.805]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9-5",[19,26.337,89,25.652,397,24.719,927,29.488]],["name/9-5",[]],["text/9-5",[]],["component/9-5",[]],["title/9-6",[19,26.337,50,27.485,89,25.652,927,29.488]],["name/9-6",[]],["text/9-6",[]],["component/9-6",[]],["title/9-7",[50,31.509,94,14.156,175,24.508]],["name/9-7",[]],["text/9-7",[]],["component/9-7",[]],["title/9",[89,34.449,927,39.602]],["name/9",[89,0.882,927,1.014]],["text/9",[1,0.398,2,0.758,9,1.952,15,1.116,18,0.685,19,2.663,26,1.107,37,1.03,40,1.206,48,0.987,50,4.534,82,0.937,88,1.55,89,5.422,94,1.809,110,1.099,114,1.044,122,1.211,149,1.241,151,1.099,172,0.951,175,2.873,177,1.134,186,3.606,190,4.482,219,2.033,227,2.625,237,1.153,244,3.475,246,4.183,260,3.363,263,1.908,264,2.297,266,1.211,276,3.464,304,4.352,306,1.103,308,3.549,330,3.724,332,1.173,341,3.325,344,1.923,354,0.965,363,1.972,397,2.499,419,1.42,435,2.29,438,2.071,439,2.165,527,0.98,529,2.212,569,2.48,573,3.055,586,1.705,589,2.519,591,1.217,642,2.625,658,1.347,675,2.754,722,2.165,732,2.347,741,1.063,766,2.866,767,1.044,780,1.391,806,2.462,826,1.356,873,2.432,880,3.549,888,5.449,893,2.306,900,4.526,905,1.684,927,6.463,934,2.699,978,2.432,981,2.432,985,8.602,990,9.277,992,6.444,993,6.444,996,3.034,997,1.83,1031,2.306,1034,2.432,1039,4.069,1040,6.444,1041,2.432,1043,1.664,1044,1.294,1046,1.382,1062,3.684,1066,2.432,1070,5.497,1073,1.579,1089,4.646,1090,1.862,1091,2.623,1092,1.933,1093,1.775,1094,2.021,1095,2.623,1096,2.623,1097,4.484,1098,6.95,1099,4.269,1100,3.034,1101,3.182,1102,3.305,1103,3.547,1104,1.509,1105,2.623,1106,2.021,1107,2.623,1108,1.975,1109,1.83,1110,2.623,1111,2.623,1112,2.623,1113,2.623,1114,2.623,1115,2.623,1116,2.623]],["component/9",[56,1.246,884,2.365]],["title/10-1",[70,46.091,1093,52.795]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[927,39.602,1117,40.327]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[998,68.6,999,72.341]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10",[750,36.569,1118,51.324,1119,56.173]],["name/10",[1093,2.313]],["text/10",[4,2.786,9,3.122,18,2.454,34,2.955,40,3.103,50,4.445,82,2.411,89,2.981,105,6.105,141,4.505,232,2.411,264,4.226,283,3.763,285,3.655,292,4.445,334,3.26,362,3.735,533,3.853,715,4.505,750,3.707,766,3.295,767,4.3,775,4.19,777,4.976,806,5.932,854,3.735,880,6.269,905,4.334,927,6.232,957,6.789,969,3.407,970,5.937,973,3.752,976,8.26,998,5.937,1000,6.26,1031,5.937,1093,4.569,1104,3.885,1120,5.341,1121,6.26,1122,4.236,1123,6.26,1124,10.804,1125,5.341,1126,6.752,1127,5.083,1128,6.752,1129,5.502]],["component/10",[56,1.246,884,2.365]],["title/11-1",[359,40.897,880,34.007,1130,40.089]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11",[359,40.897,927,33.805,1130,40.089]],["name/11",[1131,3.419]],["text/11",[1,0.868,2,1.651,10,1.833,18,1.494,34,1.564,40,2.628,70,3.378,82,4.712,89,2.525,95,3.331,110,3.496,114,2.276,131,3.291,132,4.549,151,2.395,190,1.985,209,3.319,225,3.431,232,2.042,244,2.186,264,2.237,266,2.641,276,3.016,309,2.342,342,2.316,344,2.453,350,2.938,359,3.511,386,3.99,393,3.053,395,3.378,397,3.551,417,2.903,438,3.854,504,4.244,527,3.683,562,3.212,575,2.666,601,3.549,701,5.671,766,6.061,767,3.321,834,2.837,836,2.938,880,4.261,881,2.186,896,4.133,927,4.236,937,3.14,958,6.115,961,3.264,969,2.886,976,5.028,982,3.237,1062,3.587,1130,6.521,1132,6.115,1133,5.718,1134,8.345,1135,4.523,1136,3.14,1137,5.718,1138,4.823]],["component/11",[56,1.246,884,2.365]],["title/12",[850,58.734,1139,58.734]],["name/12",[1139,2.574]],["text/12",[]],["component/12",[56,1.246,884,2.365]],["title/13-1",[397,33.197,1140,72.341]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[89,25.652,330,22.573,774,28.66,969,29.316]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13",[34,21.338,774,38.489]],["name/13",[774,1.687]],["text/13",[4,1.559,10,1.211,34,2.081,36,2.45,41,5.009,51,2.007,52,2.745,82,2.718,89,3.36,94,2.368,98,2.901,102,6.185,105,2.455,110,1.583,127,1.705,186,1.601,190,4.826,229,2.345,243,2.283,244,2.32,245,2.495,246,3.654,263,1.608,264,2.375,270,3.1,280,2.505,320,3.358,330,2.359,332,2.716,354,1.39,359,3.728,386,2.637,437,3.157,527,2.844,560,2.858,668,5.069,688,1.834,774,6.597,778,2.143,895,2.139,927,5.438,969,3.84,971,3.333,973,4.449,1030,2.031,1069,3.767,1074,2.784,1093,4.108,1138,5.12,1141,3.778,1142,3.503,1143,3.079,1144,7.101,1145,3.263,1146,4.236,1147,5.629,1148,4.236,1149,5.629,1150,3.358,1151,2.416,1152,3.778,1153,2.543,1154,5.338,1155,3.969,1156,2.658,1157,3.996,1158,3.178,1159,3.808,1160,4.802,1161,4.57,1162,4.236,1163,4.947,1164,4.678,1165,3.503]],["component/13",[56,1.246,884,2.365]],["title/14-1",[909,37.703,1166,39.344,1167,66.6]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[886,55.63]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[948,49.08,1168,58.558,1169,49.08]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14",[697,50.274]],["name/14",[697,1.825]],["text/14",[1,2.103,2,2.735,9,3.901,34,1.868,36,3.823,40,4.353,46,2.964,56,2.709,59,2.681,60,2.804,71,4.095,91,7.492,92,7.718,132,3.724,172,4.469,222,3.899,334,3.299,515,5.701,662,3.427,740,3.964,886,6.423,943,4.129,948,6.98,989,5.885,1170,7.537,1171,5.545,1172,6.334,1173,6.831,1174,5.567,1175,6.007,1176,5.143]],["component/14",[349,3.527]],["title/15-1",[18,24.603]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[697,50.274]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[56,37.346]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15",[9,25.926,888,54.446]],["name/15",[3,1.478]],["text/15",[1,1.633,2,2.384,9,3.247,10,1.806,18,2.553,32,4.96,34,1.541,40,2.59,46,2.085,48,2.119,56,4.542,60,1.668,72,2.437,82,2.012,94,1.198,129,3.27,132,5.327,151,3.458,172,2.042,175,2.074,201,2.266,232,2.012,244,3.155,292,3.709,330,3.208,334,2.721,417,2.86,527,2.106,654,3.216,690,3.329,697,3.008,701,2.949,732,5.115,740,1.903,741,2.283,766,4.029,811,3.029,839,2.578,854,6.335,867,2.627,888,3.932,890,7.53,895,3.19,903,5.587,904,4.072,905,3.617,908,4.954,909,3.19,920,4.592,930,4.753,933,4.792,945,3.759,952,2.969,957,4.072,961,4.712,989,3.05,1080,6.727,1166,3.329,1171,3.299,1177,4.242,1178,4.153,1179,5.225,1180,3.662,1181,4.342,1182,4.753,1183,4.592,1184,4.753,1185,3.216,1186,5.225,1187,3.243,1188,4.457,1189,5.225,1190,3.029,1191,3.19,1192,4.954]],["component/15",[349,3.527]],["title/16-1",[6,49.501,854,43.157]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[0,37.476]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16",[18,24.603]],["name/16",[18,0.893]],["text/16",[0,4.317,1,2.12,2,3.68,9,3.604,18,3.146,46,2.739,56,3.316,123,3.756,264,3.27,334,4.037,551,4.985,740,3.662,768,4.295,880,6.148,905,5.367,943,4.729,1093,5.657,1193,6.812,1194,4.124,1195,7.051,1196,4.985,1197,5.933]],["component/16",[349,3.527]],["title/17-1",[56,30.942,261,47.91]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17",[1,10.112,2,19.234,56,26.413]],["name/17",[1,0.303,2,0.577]],["text/17",[1,2.012,2,3.76,9,2.943,28,1.568,34,1.698,48,2.335,56,5.254,59,3.476,60,3.523,74,4.407,95,2.722,142,3.293,143,6.532,147,2.611,219,2.149,334,4.276,397,3.768,514,3.097,583,2.663,668,4.19,688,5.011,740,2.99,749,4.129,754,2.81,780,3.293,952,3.271,958,6.406,1058,3.853,1130,3.737,1171,6.59,1187,3.573,1194,3.063,1198,4.254,1199,6.627,1200,5.556,1201,3.361,1202,5.757,1203,4.911,1204,4.911]],["component/17",[349,3.527]],["title/18-1",[56,30.942,261,47.91]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18",[1,10.112,46,16.815,56,26.413]],["name/18",[1,0.303,46,0.504]],["text/18",[1,2.114,34,2.133,46,3.515,48,2.933,56,5.454,105,6.734,168,5.775,169,6.257,334,5.003,514,3.89,580,4.03,769,7.354,780,4.135,800,3.606,886,4.606,952,4.108,1171,4.565,1187,4.487,1205,7.985]],["component/18",[349,3.527]],["title/19-1",[1,11.846,2,22.532]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[1,11.846,46,19.699]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[690,55.63]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19",[56,37.346]],["name/19",[3,1.478]],["text/19",[1,2.045,2,3.342,9,2.364,19,2.096,28,1.167,46,3.016,48,3.262,56,5.418,59,2.793,60,3.114,74,3.281,95,2.187,105,4.624,142,2.451,143,5.653,147,2.992,168,3.965,169,4.915,201,1.859,207,3.043,219,1.6,237,2.032,243,1.739,264,1.808,269,2.166,334,4.703,393,2.468,397,3.027,580,2.389,583,1.983,668,3.366,688,4.21,697,2.468,709,3.657,740,2.402,749,3.317,754,2.258,769,5.05,800,2.476,854,2.557,880,2.36,886,2.731,905,2.968,930,3.899,933,2.683,945,3.084,958,5.382,961,2.638,1058,2.869,1130,2.783,1166,2.731,1171,6.157,1187,4.991,1192,4.065,1194,2.28,1198,3.418,1199,5.568,1200,4.463,1201,2.502,1202,4.286,1203,3.657,1204,3.657,1205,5.483,1206,3.899,1207,3.407]],["component/19",[349,3.527]],["title/20-1",[56,30.942,261,47.91]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20",[56,30.942,690,46.091]],["name/20",[690,2.02]],["text/20",[1,1.895,2,3.026,34,2.866,46,2.646,48,3.941,56,4.155,334,5.059,514,5.227,690,6.19,780,5.557,952,5.52,1187,6.03]],["component/20",[349,3.527]],["title/21-1",[18,24.603]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[697,50.274]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21-3",[56,37.346]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["title/21",[9,25.926,888,54.446]],["name/21",[3,1.478]],["text/21",[1,1.633,2,2.384,9,3.247,10,1.806,18,2.553,32,4.96,34,1.541,40,2.59,46,2.085,48,2.119,56,4.542,60,1.668,72,2.437,82,2.012,94,1.198,129,3.27,132,5.327,151,3.458,172,2.042,175,2.074,201,2.266,232,2.012,244,3.155,292,3.709,330,3.208,334,2.721,417,2.86,527,2.106,654,3.216,690,3.329,697,3.008,701,2.949,732,5.115,740,1.903,741,2.283,766,4.029,811,3.029,839,2.578,854,6.335,867,2.627,888,3.932,890,7.53,895,3.19,903,5.587,904,4.072,905,3.617,908,4.954,909,3.19,920,4.592,930,4.753,933,4.792,945,3.759,952,2.969,957,4.072,961,4.712,989,3.05,1080,6.727,1166,3.329,1171,3.299,1177,4.242,1178,4.153,1179,5.225,1180,3.662,1181,4.342,1182,4.753,1183,4.592,1184,4.753,1185,3.216,1186,5.225,1187,3.243,1188,4.457,1189,5.225,1190,3.029,1191,3.19,1192,4.954]],["component/21",[18,0.821,56,1.246]],["title/22",[1208,59.747]],["name/22",[3,1.478]],["text/22",[1,2.052,2,3.904,10,3.784,18,1.417,20,4.981,21,2.573,28,2.413,32,5.361,34,2.889,40,2.493,52,2.528,56,2.151,59,2.129,60,1.606,89,2.395,95,3.466,111,5.94,125,2.375,132,2.957,143,4.659,168,4.474,182,3.366,225,3.3,228,3.482,245,2.23,332,2.426,334,2.619,346,3.896,504,3.457,516,4.099,528,2.691,575,2.529,749,3.742,768,2.786,778,2.834,800,2.794,837,2.857,844,3.896,909,3.07,961,3.095,1099,4.027,1166,3.204,1171,3.175,1209,3.331,1210,3.92,1211,4.419,1212,3.121,1213,4.18,1214,4.29,1215,2.876,1216,3.07,1217,3.046,1218,4.315,1219,6.043,1220,3.997]],["component/22",[1,0.349,2,0.663,18,0.6]],["title/23-1",[70,46.091,1099,39.143]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[1,11.846,95,23.985]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23-3",[1,11.846,1221,43.484]],["name/23-3",[]],["text/23-3",[]],["component/23-3",[]],["title/23-4",[1,10.112,28,16.815,89,29.406]],["name/23-4",[]],["text/23-4",[]],["component/23-4",[]],["title/23-5",[1,11.846,516,39.838]],["name/23-5",[]],["text/23-5",[]],["component/23-5",[]],["title/23-6",[1,11.846,94,16.583]],["name/23-6",[]],["text/23-6",[]],["component/23-6",[]],["title/23-7",[1,10.112,46,16.815,1222,43.841]],["name/23-7",[]],["text/23-7",[]],["component/23-7",[]],["title/23-8",[1,11.846,52,24.575]],["name/23-8",[]],["text/23-8",[]],["component/23-8",[]],["title/23-9",[1,8.821,52,18.299,185,30.217,778,20.509]],["name/23-9",[]],["text/23-9",[]],["component/23-9",[]],["title/23-10",[1,11.846,1223,68.6]],["name/23-10",[]],["text/23-10",[]],["component/23-10",[]],["title/23-11",[1,11.846,844,37.871]],["name/23-11",[]],["text/23-11",[]],["component/23-11",[]],["title/23-12",[1,11.846,1224,61.717]],["name/23-12",[]],["text/23-12",[]],["component/23-12",[]],["title/23-13",[1,11.846,1225,65.805]],["name/23-13",[]],["text/23-13",[]],["component/23-13",[]],["title/23-14",[1,10.112,62,42.255,1226,52.682]],["name/23-14",[]],["text/23-14",[]],["component/23-14",[]],["title/23-15",[0,31.05,1099,39.143]],["name/23-15",[]],["text/23-15",[]],["component/23-15",[]],["title/23-16",[1,11.846,53,52.795]],["name/23-16",[]],["text/23-16",[]],["component/23-16",[]],["title/23-17",[1,7.822,52,16.227,53,34.861,185,26.795,778,18.187]],["name/23-17",[]],["text/23-17",[]],["component/23-17",[]],["title/23-18",[1,11.846,1227,72.341]],["name/23-18",[]],["text/23-18",[]],["component/23-18",[]],["title/23-19",[1,11.846,17,56.384]],["name/23-19",[]],["text/23-19",[]],["component/23-19",[]],["title/23-20",[1,7.822,17,37.231,52,16.227,185,26.795,778,18.187]],["name/23-20",[]],["text/23-20",[]],["component/23-20",[]],["title/23-21",[1,10.112,23,47.267,24,47.267]],["name/23-21",[]],["text/23-21",[]],["component/23-21",[]],["title/23-22",[1,7.026,23,32.844,24,32.844,52,14.576,185,24.07,778,16.337]],["name/23-22",[]],["text/23-22",[]],["component/23-22",[]],["title/23-23",[1,11.846,27,47.91]],["name/23-23",[]],["text/23-23",[]],["component/23-23",[]],["title/23-24",[1,7.822,27,31.635,52,16.227,185,26.795,778,18.187]],["name/23-24",[]],["text/23-24",[]],["component/23-24",[]],["title/23-25",[1,11.846,30,54.446]],["name/23-25",[]],["text/23-25",[]],["component/23-25",[]],["title/23-26",[1,10.112,30,46.476,516,34.007]],["name/23-26",[]],["text/23-26",[]],["component/23-26",[]],["title/23-27",[1,11.846,1228,57.497]],["name/23-27",[]],["text/23-27",[]],["component/23-27",[]],["title/23-28",[1,7.822,52,16.227,185,26.795,778,18.187,1228,37.965]],["name/23-28",[]],["text/23-28",[]],["component/23-28",[]],["title/23-29",[1,10.112,187,36.84,1229,49.08]],["name/23-29",[]],["text/23-29",[]],["component/23-29",[]],["title/23-30",[1,7.026,52,14.576,185,24.07,187,25.598,778,16.337,1229,34.104]],["name/23-30",[]],["text/23-30",[]],["component/23-30",[]],["title/23-31",[1,11.846,47,49.501]],["name/23-31",[]],["text/23-31",[]],["component/23-31",[]],["title/23-32",[1,7.822,47,32.686,52,16.227,185,26.795,778,18.187]],["name/23-32",[]],["text/23-32",[]],["component/23-32",[]],["title/23-33",[1,8.821,52,18.299,114,23.12,808,47.338]],["name/23-33",[]],["text/23-33",[]],["component/23-33",[]],["title/23-34",[1,10.112,52,20.977,61,40.897]],["name/23-34",[]],["text/23-34",[]],["component/23-34",[]],["title/23-35",[1,7.026,52,22.429,61,28.417,185,24.07,778,16.337]],["name/23-35",[]],["text/23-35",[]],["component/23-35",[]],["title/23-36",[1,11.846,62,49.501]],["name/23-36",[]],["text/23-36",[]],["component/23-36",[]],["title/23-37",[1,7.822,52,16.227,62,32.686,185,26.795,778,18.187]],["name/23-37",[]],["text/23-37",[]],["component/23-37",[]],["title/23-38",[1,10.112,812,50.136,890,51.324]],["name/23-38",[]],["text/23-38",[]],["component/23-38",[]],["title/23-39",[1230,61.199]],["name/23-39",[]],["text/23-39",[]],["component/23-39",[]],["title/23-40",[1231,79.426]],["name/23-40",[]],["text/23-40",[]],["component/23-40",[]],["title/23",[1099,47.245]],["name/23",[1099,1.715]],["text/23",[0,2.199,1,2.076,2,1.718,10,3.416,13,1.198,14,1.806,16,0.691,17,3.658,19,0.456,20,2.825,21,1.459,23,1.895,24,1.895,26,1.684,27,3.108,28,1.601,29,0.889,30,3.176,33,1.392,34,1.923,35,1.243,36,2.838,37,0.395,38,0.483,39,2.057,40,1.227,41,1.243,46,1.149,47,2.888,48,1.004,49,1.511,50,1.887,51,0.624,52,3.687,53,3.425,54,1.878,55,1.967,57,0.757,59,1.787,60,1.762,61,2.066,62,4.25,66,1.008,67,0.82,70,1.577,71,0.435,73,0.741,80,0.402,82,1.808,86,0.6,89,0.834,90,2.673,94,1.779,95,1.699,97,0.727,98,0.481,111,0.995,114,1.062,118,0.456,119,0.526,125,0.44,127,0.454,129,1.096,133,0.837,135,0.51,140,0.471,142,1.001,149,0.476,150,0.848,151,1.41,163,0.561,164,0.45,166,0.486,167,0.605,170,1.834,172,1.22,185,4.77,186,0.8,187,1.861,188,1.123,189,0.467,190,2.325,192,0.496,201,5.011,205,0.671,209,0.584,219,0.654,232,0.359,237,2.787,239,0.46,242,0.454,244,0.722,245,0.413,251,0.584,253,1.74,254,0.744,264,0.739,269,1.251,270,2.324,280,0.415,281,0.605,282,0.702,287,0.44,290,1.185,295,0.533,298,1.577,305,0.464,330,2.147,332,0.45,341,1.905,344,0.431,348,0.727,354,0.695,358,0.654,363,0.442,393,0.537,395,0.594,425,0.421,432,2.874,444,0.611,449,1.045,504,0.433,505,0.514,511,0.917,514,0.942,515,0.605,516,3.038,530,0.446,537,1.34,560,1.584,583,1.145,586,3.867,658,0.97,688,0.488,690,0.594,692,0.823,697,1.008,701,0.526,710,0.526,712,0.654,728,0.589,729,0.413,741,0.407,749,0.88,753,0.488,754,0.599,767,0.752,776,0.544,778,3.356,784,0.889,789,0.491,800,0.657,806,0.552,808,1.539,812,1.422,822,0.702,825,0.646,828,0.646,839,0.46,844,1.296,854,0.556,869,1.022,880,0.964,881,1.286,890,1.455,900,0.775,909,0.569,933,0.584,937,0.552,946,0.691,952,1.406,969,1.347,973,0.754,1021,0.552,1030,0.541,1032,0.537,1067,0.757,1072,0.605,1075,0.51,1093,1.806,1099,6.25,1150,1.861,1151,2.523,1185,0.574,1194,0.496,1199,0.646,1207,0.741,1209,0.618,1215,1.785,1221,1.876,1222,1.243,1223,2.347,1224,2.662,1225,1.593,1226,2.112,1227,2.475,1228,2.94,1229,1.967,1230,4.12,1231,2.251,1232,0.605,1233,0.727,1234,0.741,1235,1.593,1236,1.006,1237,5.561,1238,3.839,1239,0.933,1240,0.757,1241,0.933,1242,1.593,1243,6.272,1244,1.494,1245,1.422,1246,0.933,1247,1.006,1248,0.757,1249,0.884,1250,0.775,1251,0.654,1252,1.227,1253,0.82,1254,0.796,1255,0.741,1256,0.662,1257,0.884,1258,1.006,1259,1.006,1260,0.933,1261,0.933,1262,0.741,1263,0.702,1264,0.933,1265,0.848,1266,0.933,1267,0.796,1268,0.691,1269,0.796,1270,0.654,1271,0.714,1272,1.278,1273,0.502,1274,1.006,1275,1.888,1276,1.006,1277,1.888,1278,2.669,1279,1.888,1280,1.751,1281,1.888,1282,1.751,1283,1.888,1284,1.751,1285,0.933,1286,2.251,1287,1.888,1288,1.751,1289,0.714,1290,0.796,1291,0.82,1292,0.796,1293,0.884,1294,0.775,1295,0.884,1296,0.741,1297,1.751,1298,1.34,1299,1.66,1300,0.848,1301,0.82,1302,0.884,1303,0.523,1304,1.212,1305,0.933,1306,0.82,1307,0.933,1308,1.006,1309,1.006,1310,1.006,1311,1.006,1312,1.006,1313,0.933,1314,1.006,1315,0.933,1316,1.006,1317,0.565,1318,1.006,1319,1.006,1320,0.631,1321,0.646]],["component/23",[1,0.349,2,0.663,18,0.6]],["title/24-1",[881,29.819,1218,41.938]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[1,10.112,51,22.015,94,14.156]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24-3",[52,18.299,94,12.348,778,20.509,1156,25.435]],["name/24-3",[]],["text/24-3",[]],["component/24-3",[]],["title/24-4",[52,18.299,260,25.018,310,23.366,778,20.509]],["name/24-4",[]],["text/24-4",[]],["component/24-4",[]],["title/24-5",[52,18.299,260,25.018,778,20.509,1322,45.955]],["name/24-5",[]],["text/24-5",[]],["component/24-5",[]],["title/24-6",[143,45.282,1218,41.938]],["name/24-6",[]],["text/24-6",[]],["component/24-6",[]],["title/24-7",[1323,66.834]],["name/24-7",[]],["text/24-7",[]],["component/24-7",[]],["title/24-8",[1218,35.799,1324,38.992,1325,45.067]],["name/24-8",[]],["text/24-8",[]],["component/24-8",[]],["title/24-9",[4,27.479,28,16.815,1218,35.799]],["name/24-9",[]],["text/24-9",[]],["component/24-9",[]],["title/24-10",[1326,65.805,1327,57.497]],["name/24-10",[]],["text/24-10",[]],["component/24-10",[]],["title/24-11",[1323,66.834]],["name/24-11",[]],["text/24-11",[]],["component/24-11",[]],["title/24-12",[1328,70.89]],["name/24-12",[]],["text/24-12",[]],["component/24-12",[]],["title/24-13",[243,29.344,397,33.197]],["name/24-13",[]],["text/24-13",[]],["component/24-13",[]],["title/24-14",[1329,82.798]],["name/24-14",[]],["text/24-14",[]],["component/24-14",[]],["title/24",[1218,50.618]],["name/24",[1218,1.838]],["text/24",[0,0.353,1,0.941,2,0.485,4,1.25,10,0.971,15,0.714,21,0.766,25,0.951,28,2.276,29,0.418,34,2.73,36,0.678,37,1.416,38,0.807,40,1.659,48,1.738,49,0.503,51,0.293,54,0.986,59,1.189,60,1.225,70,0.524,72,0.726,73,1.416,75,0.499,80,0.671,82,1.289,83,2.06,85,0.524,89,0.392,90,1.073,94,1.762,95,2.911,97,1.213,98,0.802,99,0.44,103,0.534,106,1.159,107,0.557,110,0.703,114,0.951,118,2.652,119,0.465,122,0.41,125,0.389,133,1.6,135,0.852,140,0.416,147,1.943,151,0.703,166,1.998,167,0.534,168,0.495,172,0.322,175,0.879,176,0.802,177,1.31,181,0.511,184,1.659,186,0.712,189,1.108,190,3.828,196,0.868,199,0.495,219,1.048,222,0.507,232,0.317,236,0.468,237,0.39,239,1.093,241,0.54,242,0.401,243,3.191,244,1.158,245,0.365,250,0.745,253,1.935,263,0.714,264,1.981,266,0.775,272,1.571,273,0.563,276,1.304,279,0.919,280,0.366,283,1.688,287,0.389,291,0.465,300,0.712,302,2.847,305,0.41,306,1.004,309,0.978,310,0.357,317,0.529,318,0.382,320,1.675,330,0.652,334,0.429,335,0.392,337,2.189,342,0.36,344,0.381,345,0.499,347,0.465,351,2.015,354,1.522,373,1.02,388,1.02,393,0.474,397,2.328,415,1.011,417,0.451,425,0.372,432,0.873,436,0.477,438,0.41,443,0.551,445,1.088,447,0.592,449,0.929,477,0.723,503,0.749,504,0.382,505,1.546,511,0.431,513,0.54,515,0.534,527,1.727,528,1.185,530,0.745,538,1.552,551,0.529,553,0.57,554,0.551,559,0.44,561,1.011,562,1.701,563,1.424,571,0.445,575,0.783,583,0.381,588,0.44,589,0.499,609,1.606,635,0.477,655,0.819,688,1.47,694,0.511,698,0.499,699,1.284,703,0.503,724,1.153,728,2.113,729,0.982,732,0.465,733,0.62,734,1.841,739,0.702,742,0.465,743,0.503,753,0.815,760,2.418,761,1.575,766,0.433,767,1.646,768,0.456,773,0.507,777,0.654,780,0.89,783,0.863,800,1.054,809,0.54,811,1.628,821,0.424,825,0.57,826,0.459,829,1.029,835,0.654,839,0.406,840,0.592,846,0.529,880,1.546,881,1.766,889,0.563,900,0.684,907,0.445,910,0.951,927,2.345,933,1.386,937,0.487,938,1.153,939,0.431,946,0.61,952,0.885,959,0.654,961,0.507,962,0.958,967,0.408,974,0.54,988,0.462,1004,0.465,1012,0.723,1013,0.495,1019,0.545,1032,0.896,1043,0.563,1044,0.828,1046,0.468,1059,1.078,1060,0.668,1068,0.896,1073,1.438,1075,0.451,1089,0.702,1090,0.63,1117,3.676,1120,0.702,1122,0.557,1136,0.487,1145,0.477,1155,2.824,1156,2.99,1158,0.465,1185,2.361,1201,0.481,1215,1.606,1216,2.043,1218,6.705,1232,0.534,1244,0.702,1323,4.4,1326,1.416,1327,2.659,1328,4.404,1329,2.663,1330,0.888,1331,0.57,1332,7.935,1333,5.141,1334,0.642,1335,0.781,1336,0.723,1337,0.702,1338,0.723,1339,0.702,1340,4.695,1341,2.987,1342,0.749,1343,0.823,1344,1.078,1345,3.597,1346,1.065,1347,3.897,1348,1.841,1349,1.328,1350,2.389,1351,1.294,1352,0.654,1353,0.642,1354,1.001,1355,1.021,1356,1.294,1357,0.781,1358,1.302,1359,0.781,1360,0.61,1361,0.654,1362,0.974,1363,1.572,1364,3.173,1365,0.992,1366,1.557,1367,0.654,1368,0.823,1369,0.684,1370,1.416,1371,0.723,1372,0.684,1373,0.888,1374,1.726,1375,1.679,1376,1.042,1377,1.476,1378,1.264,1379,2.215,1380,1.476,1381,0.62,1382,0.888,1383,0.749,1384,2.215,1385,1.841,1386,1.946,1387,0.823,1388,0.749,1389,0.642,1390,0.684,1391,1.557,1392,0.61,1393,0.487,1394,4.311,1395,0.702,1396,0.888,1397,1.192,1398,2.317,1399,0.758,1400,0.702,1401,0.888,1402,0.563,1403,3.609,1404,0.451,1405,0.888,1406,2.389,1407,2.389,1408,1.679,1409,1.679,1410,1.679,1411,2.015,1412,4.137,1413,1.679,1414,0.888,1415,0.888,1416,0.888,1417,0.909,1418,1.529,1419,0.888,1420,0.922,1421,0.888,1422,0.888,1423,0.888,1424,0.888,1425,0.888,1426,0.749,1427,0.749,1428,0.63,1429,0.749,1430,0.888,1431,0.702,1432,0.749,1433,0.888,1434,0.57,1435,0.668,1436,1.294,1437,3.594,1438,0.723,1439,1.328,1440,1.946,1441,0.529,1442,1.213,1443,4.284,1444,2.663,1445,1.328,1446,0.551,1447,1.136,1448,0.534,1449,0.534,1450,0.781,1451,1.328,1452,0.654,1453,0.888,1454,0.888,1455,0.888,1456,1.213,1457,0.888,1458,0.888,1459,2.468,1460,0.781,1461,0.62,1462,2.215,1463,0.943,1464,0.474,1465,0.723,1466,0.54,1467,0.61,1468,0.888,1469,1.078,1470,1.368,1471,0.529,1472,0.823,1473,0.54,1474,1.368,1475,0.557,1476,0.888,1477,0.61,1478,0.503,1479,0.781,1480,0.557,1481,2.389,1482,1.679,1483,1.679,1484,0.601,1485,0.684,1486,0.823,1487,0.888,1488,0.563,1489,0.888,1490,0.702,1491,0.823,1492,0.702,1493,0.584,1494,0.888,1495,0.888,1496,0.888,1497,2.389,1498,1.12,1499,0.668,1500,0.577,1501,0.888,1502,0.63,1503,0.823,1504,2.1,1505,0.823,1506,0.888,1507,0.62,1508,0.684,1509,0.654,1510,0.823,1511,0.888,1512,0.888,1513,0.684,1514,0.888,1515,0.62,1516,0.781,1517,0.781]],["component/24",[1,0.349,2,0.663,18,0.6]],["title/25-1",[94,16.583,1151,31.05]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[188,28.006,674,39.709,1518,42.255]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[1,7.822,52,16.227,185,26.795,778,18.187,1519,51.517]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25-4",[52,16.227,94,10.95,439,24.875,778,18.187,1151,20.502]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["title/25-5",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["title/25-6",[28,14.668,52,18.299,1520,41.232,1521,44.771]],["name/25-6",[]],["text/25-6",[]],["component/25-6",[]],["title/25",[20,41.328,52,20.977,778,23.512]],["name/25",[20,0.875,52,0.444,778,0.498]],["text/25",[0,0.777,1,1.866,2,0.564,4,1.429,10,1.11,14,1.32,21,2.077,28,2.205,34,2.593,36,3.685,37,1.834,38,0.937,46,1.18,48,0.734,49,1.105,52,3.952,54,1.928,56,0.774,59,0.766,60,2.3,71,0.844,73,1.834,82,1.237,85,2.047,94,2.497,99,1.719,133,0.865,142,1.035,149,2.211,172,2.051,175,0.718,176,0.933,177,1.498,185,3.731,188,2.725,190,1.964,201,1.393,225,0.802,237,2.849,239,2.589,244,0.746,245,0.802,253,0.746,260,3.345,261,2.128,268,1.175,272,1.316,276,1.689,293,1.85,300,1.468,302,1.337,304,1.931,308,1.769,310,0.785,318,0.84,320,1.916,329,2.011,330,1.816,332,0.873,345,1.096,354,0.718,393,1.85,397,1.474,417,0.99,423,0.968,504,0.84,517,1.211,518,1.837,527,0.729,533,1.114,561,1.175,570,1.123,586,1.268,589,1.096,590,2.823,591,0.905,658,4.255,668,2.211,674,2.066,703,1.105,722,2.256,729,2.326,741,0.79,754,0.619,773,3.23,778,3.996,781,1.34,783,1.002,789,0.952,800,2.255,809,1.186,817,2.085,858,0.748,872,1.238,881,2.477,905,1.253,907,0.979,909,1.105,947,1.142,954,1.035,973,0.779,977,1.253,987,1.362,1089,2.741,1099,2.839,1148,5.006,1150,2.585,1151,3.091,1153,2.371,1156,3.823,1200,2.173,1207,1.438,1215,1.837,1252,3.678,1255,1.438,1273,0.973,1355,3.44,1376,1.211,1397,1.385,1417,1.056,1427,1.646,1480,2.173,1484,2.344,1490,2.741,1518,4.551,1522,1.646,1523,1.284,1524,1.302,1525,1.544,1526,5.168,1527,4.5,1528,1.544,1529,1.809,1530,1.716,1531,1.809,1532,1.809,1533,1.951,1534,1.646,1535,1.951,1536,1.544,1537,1.951,1538,1.809,1539,1.34,1540,1.088,1541,1.362,1542,1.646,1543,1.716,1544,2.553,1545,1.951,1546,1.951,1547,1.951,1548,3.465,1549,3.465,1550,3.465,1551,3.465,1552,3.465,1553,3.465,1554,3.212,1555,3.212,1556,3.465,1557,3.465,1558,3.465,1559,3.465,1560,3.465,1561,3.465,1562,3.465,1563,3.465,1564,3.465,1565,3.465,1566,3.465,1567,5.659,1568,6.48,1569,1.951,1570,1.951,1571,1.015,1572,1.211,1573,1.951,1574,1.809,1575,1.142,1576,1.951,1577,3.465,1578,1.951,1579,1.951,1580,1.34,1581,1.951,1582,1.59,1583,1.41,1584,1.59,1585,1.951]],["component/25",[1,0.349,2,0.663,18,0.6]],["title/26-1",[168,32.379,346,28.199,1586,66.779]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26-2",[346,37.871,438,36.029]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["title/26-3",[346,37.871,439,37.673]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["title/26-4",[346,37.871,435,39.838]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["title/26-5",[168,32.379,346,28.199,1586,45.955,1587,47.338]],["name/26-5",[]],["text/26-5",[]],["component/26-5",[]],["title/26-6",[346,37.871,438,36.029]],["name/26-6",[]],["text/26-6",[]],["component/26-6",[]],["title/26-7",[346,37.871,439,37.673]],["name/26-7",[]],["text/26-7",[]],["component/26-7",[]],["title/26-8",[346,37.871,435,39.838]],["name/26-8",[]],["text/26-8",[]],["component/26-8",[]],["title/26-9",[168,32.379,346,28.199,1587,68.789]],["name/26-9",[]],["text/26-9",[]],["component/26-9",[]],["title/26-10",[690,46.091,1588,55.373]],["name/26-10",[]],["text/26-10",[]],["component/26-10",[]],["title/26",[1,8.821,2,16.778,168,32.379,1219,43.734]],["name/26",[168,0.786,227,0.826,1101,1.001]],["text/26",[1,1.904,2,3.229,10,0.662,18,0.952,21,1.168,34,2.563,37,1.431,45,2.031,48,2.218,50,2.313,52,2.688,54,1.504,82,1.746,90,2.197,93,1.36,94,1.579,95,1.12,110,0.866,122,0.954,127,0.932,131,2.097,151,1.527,159,2.08,163,2.031,164,0.924,166,2.361,168,5.417,172,0.749,175,1.799,177,2.114,180,1.419,184,0.95,185,1.075,190,2.047,197,1.311,199,1.152,202,3.358,225,0.849,229,1.282,231,1.555,237,2.15,240,2.863,242,0.932,244,1.869,245,0.849,253,0.79,260,0.89,263,0.879,264,0.808,272,0.785,276,1.317,280,0.852,285,1.973,293,1.946,302,1.887,305,1.683,306,2.48,308,1.055,310,1.466,317,1.232,320,3.722,332,0.924,342,0.837,346,1.769,373,3.173,378,2.809,386,2.543,397,2.509,421,1.081,435,2.497,437,1.896,504,1.569,511,1.003,514,1.031,518,1.096,519,3.219,527,1.362,530,0.916,547,1.592,550,1.817,560,0.973,561,1.244,589,2.047,590,1.684,690,5.041,722,1.76,728,1.21,732,1.081,741,0.837,753,1.003,767,0.822,778,2.375,780,1.096,806,1.134,826,1.068,841,1.743,880,1.055,895,1.17,899,2.915,909,1.17,920,6.536,934,1.244,936,1.592,957,1.493,969,1.839,991,1.916,1004,2.559,1013,1.152,1028,1.21,1044,1.019,1059,1.645,1067,2.744,1072,1.244,1099,2.453,1100,3.99,1122,1.296,1194,1.019,1219,5.591,1221,2.031,1230,3.832,1231,3.074,1249,3.204,1255,1.523,1303,1.075,1317,1.16,1320,3.699,1349,1.634,1361,2.686,1393,1.134,1449,1.244,1478,1.17,1508,1.592,1523,1.36,1540,1.152,1554,1.916,1555,1.916,1586,8.351,1587,9.252,1588,2.587,1589,2.066,1590,2.066,1591,1.326,1592,6.729,1593,1.555,1594,2.066,1595,1.743,1596,1.634,1597,1.555,1598,1.493,1599,2.543,1600,1.152,1601,4.534,1602,2.066,1603,1.592,1604,2.066,1605,3.379,1606,2.066,1607,2.066,1608,2.066,1609,2.066,1610,2.066,1611,2.066,1612,2.066,1613,2.066,1614,2.066,1615,2.066,1616,2.066,1617,2.066,1618,2.066,1619,2.066,1620,2.066,1621,2.066,1622,2.066,1623,2.066,1624,2.066,1625,2.066,1626,2.066,1627,2.066,1628,2.066,1629,2.066,1630,2.066,1631,2.066,1632,2.066,1633,2.066,1634,2.066,1635,2.066,1636,2.066,1637,2.066,1638,4.89,1639,3.645,1640,3.645,1641,3.074,1642,4.89,1643,3.645,1644,2.066,1645,2.066,1646,2.066,1647,5.675,1648,3.809,1649,2.066,1650,2.066,1651,2.066,1652,1.343,1653,2.066,1654,2.066,1655,1.743,1656,1.378,1657,3.204,1658,3.645,1659,3.645,1660,2.066,1661,3.645,1662,2.066,1663,2.066,1664,2.066,1665,2.066]],["component/26",[1,0.349,2,0.663,18,0.6]],["title/27-1",[1256,61.989]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[1666,61.989]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[21,21.347,791,34.007,939,32.327]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27",[21,25.007,791,39.838]],["name/27",[21,0.64,791,1.02]],["text/27",[1,0.398,2,0.413,10,2.725,15,0.609,21,4.264,34,2.485,36,1.807,37,1.421,40,0.658,45,0.797,48,0.538,49,1.482,51,0.866,60,1.072,69,0.93,78,0.908,80,3.395,94,0.304,95,2.511,111,0.754,114,0.569,132,0.78,135,0.726,137,2.209,147,0.602,151,2.186,164,1.171,172,0.519,175,0.526,184,1.664,189,0.664,190,4.364,196,0.739,201,0.575,203,0.845,207,0.942,219,0.495,225,0.588,227,0.838,232,1.293,236,0.754,237,1.151,242,2.021,243,0.985,244,1.384,246,1.576,253,1.384,254,0.563,263,0.609,264,0.56,266,0.661,272,0.543,273,0.908,276,0.946,279,0.55,282,2.527,293,1.398,300,0.606,309,1.072,320,0.791,330,0.556,342,1.061,344,0.614,347,1.371,350,0.735,354,0.526,356,1.713,359,0.879,363,1.151,392,0.908,397,1.114,417,0.726,423,1.299,425,0.599,435,1.337,437,1.362,438,1.672,439,1.748,449,0.791,505,2.665,514,1.306,527,0.535,529,0.706,534,1.681,551,1.561,554,0.888,560,0.673,562,0.804,563,1.561,569,0.791,588,1.299,589,1.471,591,0.664,602,1.933,609,0.759,635,0.769,642,1.533,668,1.713,692,0.624,701,1.895,716,0.744,729,0.588,741,1.061,754,2.346,759,0.81,760,0.749,761,1.883,764,2.809,766,1.278,784,0.673,791,5.664,800,0.498,810,0.845,821,2.803,829,3.517,847,0.918,856,2.314,867,3.637,869,0.774,881,1.711,886,0.845,907,0.718,909,0.81,933,0.83,939,4.534,954,0.759,956,0.78,958,0.888,962,0.816,967,2.058,969,0.722,971,1.988,973,2.343,977,0.918,988,1.362,1024,2.159,1030,0.769,1032,1.398,1046,3.657,1059,2.355,1073,0.861,1075,0.726,1100,0.968,1101,1.015,1109,0.998,1145,0.769,1155,1.649,1156,1.585,1157,0.942,1158,3.07,1159,1.643,1166,0.845,1180,1.702,1198,3.335,1216,1.482,1255,1.054,1256,4.57,1272,0.968,1289,1.015,1291,1.166,1317,2.034,1341,0.73,1345,3.895,1355,0.87,1389,1.034,1393,0.786,1404,1.838,1418,2.942,1441,0.853,1449,0.861,1461,0.998,1464,0.764,1473,3.172,1478,0.81,1498,0.954,1521,1.102,1526,2.845,1527,0.897,1542,1.207,1571,0.744,1666,4.236,1667,3.35,1668,1.431,1669,0.968,1670,3.621,1671,5.244,1672,1.431,1673,2.302,1674,2.302,1675,1.431,1676,3.621,1677,4.152,1678,1.431,1679,1.431,1680,2.619,1681,1.431,1682,1.431,1683,2.864,1684,1.431,1685,1.326,1686,1.431,1687,1.326,1688,1.326,1689,1.681,1690,2.302,1691,1.592,1692,1.892,1693,2.302,1694,1.431,1695,3.3,1696,0.968,1697,1.431,1698,0.93,1699,3.371,1700,3.649,1701,1.326,1702,3.777,1703,2.018,1704,1.034,1705,1.431,1706,1.431,1707,1.034,1708,3.03,1709,1.431,1710,1.431,1711,1.431,1712,2.271,1713,2.865,1714,0.897,1715,3.621,1716,1.431,1717,0.942,1718,0.983,1719,1.431,1720,2.619,1721,1.431,1722,1.858,1723,1.326,1724,1.326,1725,1.166,1726,2.619,1727,0.998,1728,1.431,1729,1.207,1730,1.258,1731,0.983,1732,1.431,1733,1.102,1734,1.431,1735,1.431,1736,2.619,1737,1.054,1738,1.326,1739,1.431,1740,1.772,1741,0.968,1742,0.853,1743,1.166,1744,1.431,1745,1.207,1746,0.968,1747,1.258,1748,1.326,1749,1.661,1750,1.326,1751,1.431,1752,0.908,1753,1.015,1754,1.207,1755,1.431,1756,1.431,1757,0.918,1758,0.774,1759,1.077,1760,0.754]],["component/27",[1,0.349,2,0.663,18,0.6]],["title/28-1",[21,21.347,754,21.134,973,26.598]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28-2",[306,24.43,576,29.147,1441,34.638,1464,31.015]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["title/28-3",[28,19.505,89,22.747,658,26.465,754,16.348]],["name/28-3",[]],["text/28-3",[]],["component/28-3",[]],["title/28-4",[21,16.512,754,16.348,898,27.885,973,20.574,1761,34.371]],["name/28-4",[]],["text/28-4",[]],["component/28-4",[]],["title/28-5",[21,21.347,155,42.755,754,21.134]],["name/28-5",[]],["text/28-5",[]],["component/28-5",[]],["title/28",[21,25.007,754,24.758]],["name/28",[21,0.64,754,0.634]],["text/28",[1,0.56,4,0.864,10,0.672,18,0.294,19,0.95,21,3.875,22,2.821,28,2.616,34,1.629,36,0.846,37,1.708,38,0.54,46,0.284,48,0.788,59,0.822,60,0.333,72,1.273,80,3.767,82,1.955,89,2.822,90,0.505,94,0.239,95,1.52,99,0.557,120,0.427,122,0.519,125,0.492,127,0.507,128,0.75,132,0.613,135,1.063,140,0.526,144,0.889,147,0.881,161,1.345,164,0.503,166,1.012,171,0.585,172,0.759,175,1.083,176,0.537,177,1.273,179,0.948,181,0.647,184,0.517,186,0.476,187,0.622,190,4.215,196,1.521,197,0.713,199,1.168,201,0.452,203,0.664,206,1.444,207,0.74,219,1.895,225,0.462,232,0.401,237,0.494,239,0.514,242,0.946,243,1.637,250,0.498,263,0.478,264,1.151,266,0.519,268,0.676,270,0.574,272,1.118,273,0.713,276,0.757,279,3,280,0.464,295,2.622,300,0.476,302,0.434,304,0.626,306,2.079,308,0.574,309,0.858,310,0.452,330,0.437,341,2.464,342,1.192,344,0.899,345,0.631,356,0.991,362,2.735,363,0.921,391,1.345,392,0.713,421,0.588,425,0.878,432,1.09,435,0.574,437,1.09,438,0.968,439,1.012,449,0.622,450,0.784,456,2.054,504,0.902,505,1.07,511,1.429,514,1.045,516,1.07,527,1.1,538,0.73,553,0.721,559,1.039,560,3.009,568,0.74,573,2.571,575,1.372,576,4.312,578,0.784,582,0.592,588,2.452,589,0.631,658,1.895,668,4.626,685,0.658,716,1.531,728,0.658,729,1.517,732,1.931,741,1.495,753,0.546,754,3.103,761,1.09,776,0.608,783,0.577,784,0.529,789,2.412,791,0.574,793,0.683,805,2.976,809,0.683,810,0.664,813,0.812,829,3.701,834,1.039,836,0.577,855,0.69,867,2.777,869,0.608,872,0.713,877,0.721,881,0.43,898,2.676,907,0.564,909,1.186,933,0.652,934,0.676,939,0.546,947,1.227,961,0.641,967,0.963,971,3.27,973,5.006,975,0.676,1032,2.639,1044,1.82,1046,0.592,1059,1.964,1069,5.181,1072,0.676,1073,1.261,1075,0.57,1108,0.846,1117,0.581,1144,0.916,1145,0.604,1155,3.551,1156,2.397,1157,0.74,1158,2.588,1159,5.071,1160,0.889,1161,3.721,1162,1.462,1163,0.916,1164,2.268,1198,3.07,1199,0.721,1209,0.69,1215,0.596,1232,0.676,1250,0.866,1272,0.76,1289,0.798,1299,0.988,1304,0.721,1317,2.444,1321,0.721,1341,1.07,1345,3.138,1369,2.268,1389,0.812,1399,0.507,1404,2.209,1418,1.564,1420,0.617,1436,0.866,1441,0.67,1464,1.119,1469,1.345,1471,0.67,1473,2.645,1475,0.705,1478,0.636,1480,0.705,1493,0.74,1527,3.736,1571,0.585,1669,0.76,1673,4.814,1689,0.721,1693,1.842,1703,0.866,1733,2.268,1752,0.713,1757,1.345,1759,2.215,1760,0.592,1761,2.903,1762,1.739,1763,0.828,1764,1.124,1765,2.482,1766,3.421,1767,0.988,1768,0.846,1769,4.347,1770,0.948,1771,0.812,1772,0.889,1773,0.866,1774,1.042,1775,0.889,1776,0.988,1777,0.76,1778,2.328,1779,0.948,1780,0.916,1781,0.784,1782,1.707,1783,1.042,1784,0.988,1785,0.988,1786,1.042,1787,3.421,1788,1.124,1789,2.095,1790,2.095,1791,1.842,1792,2.588,1793,1.124,1794,1.042,1795,1.042,1796,0.626,1797,0.948,1798,1.842,1799,1.487,1800,0.988,1801,1.398,1802,1.124,1803,0.784,1804,1.042,1805,1.042,1806,1.042,1807,0.784,1808,0.988,1809,0.916,1810,0.866,1811,1.937,1812,1.124,1813,0.713,1814,1.042,1815,1.124,1816,0.73,1817,0.988,1818,1.842,1819,0.705,1820,1.124,1821,0.889,1822,1.842,1823,1.124,1824,1.124,1825,0.988,1826,1.124,1827,1.124,1828,1.042,1829,1.124,1830,1.124,1831,1.124,1832,0.988,1833,1.216,1834,1.124,1835,1.042,1836,1.042,1837,1.042,1838,1.042,1839,1.042,1840,1.042,1841,1.895,1842,0.798,1843,0.772,1844,1.124,1845,1.124,1846,0.889]],["component/28",[1,0.349,2,0.663,18,0.6]],["title/29-1",[94,16.583,973,31.159]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[1,10.112,51,22.015,94,14.156]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29-4",[21,21.347,754,21.134,1153,27.899]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["title/29-5",[1,10.112,51,22.015,94,14.156]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["title/29-6",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["title/29-7",[21,21.347,341,37.703,1221,37.119]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["title/29-8",[1,10.112,51,22.015,94,14.156]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["title/29-9",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/29-9",[]],["text/29-9",[]],["component/29-9",[]],["title/29-10",[86,46.518,341,44.169]],["name/29-10",[]],["text/29-10",[]],["component/29-10",[]],["title/29-11",[28,16.815,89,29.406,341,37.703]],["name/29-11",[]],["text/29-11",[]],["component/29-11",[]],["title/29-12",[973,31.159,1847,51.359]],["name/29-12",[]],["text/29-12",[]],["component/29-12",[]],["title/29-13",[1848,87.314]],["name/29-13",[]],["text/29-13",[]],["component/29-13",[]],["title/29-14",[1849,82.798]],["name/29-14",[]],["text/29-14",[]],["component/29-14",[]],["title/29-15",[881,29.819,1850,63.574]],["name/29-15",[]],["text/29-15",[]],["component/29-15",[]],["title/29",[94,20.016]],["name/29",[94,0.727]],["text/29",[1,1.076,2,1.328,4,1.897,6,0.766,10,1.843,15,0.953,19,0.547,21,2.922,26,0.945,28,2.452,29,1.841,34,2.704,36,2.102,37,1.229,38,1.504,40,1.029,41,0.795,52,1.232,54,0.498,59,2.044,60,1.158,69,0.784,72,0.522,73,1.804,80,1.251,82,2.387,86,1.867,89,2.03,90,1.006,94,1.889,95,1.202,106,0.586,107,0.757,114,1.246,118,0.547,119,0.632,120,0.458,122,0.557,124,0.749,125,0.98,129,0.701,135,0.613,142,0.64,143,0.701,147,0.508,149,0.571,151,0.938,155,0.775,164,1.002,166,0.583,167,0.727,175,1.152,177,1.691,181,0.695,184,0.555,188,1.317,190,3.978,196,0.624,199,0.673,201,0.9,219,2.313,225,0.92,229,0.749,231,0.909,237,2.938,239,1.024,240,0.707,242,0.545,243,2.802,244,1.197,246,2.354,250,0.535,253,0.856,263,0.514,264,0.472,268,0.727,270,0.616,272,1.746,276,1.413,279,1.504,280,1.614,291,0.632,295,0.64,300,0.949,302,1.509,305,0.557,306,0.508,309,0.494,318,0.52,320,0.668,323,0.766,330,0.469,334,0.583,335,0.533,341,6.627,342,1.584,344,0.96,354,1.152,355,0.658,362,1.238,363,2.289,388,1.964,392,0.766,397,0.953,423,1.111,437,0.628,444,4.062,449,1.732,479,0.805,505,1.143,511,0.586,513,0.734,518,0.64,527,1.462,533,0.689,536,0.683,551,0.72,555,0.955,559,0.599,560,0.568,568,1.474,573,1.629,575,1.823,576,2.885,588,0.599,602,2.454,654,0.689,658,0.62,668,2.175,674,1.867,684,0.983,690,0.713,692,0.526,693,1.018,697,1.195,699,0.649,715,0.805,716,2.034,717,0.817,729,1.608,732,1.172,741,0.907,742,0.632,754,2.248,761,1.164,766,0.589,767,0.891,776,0.653,778,0.426,780,0.64,783,1.609,789,1.093,790,0.72,795,0.842,800,1.361,821,1.496,826,0.624,829,3.353,855,0.741,867,1.823,870,1.85,872,0.766,877,0.775,881,3.303,898,0.653,907,1.571,912,1.061,935,0.757,945,1.494,946,0.829,954,0.64,961,0.689,967,1.797,971,1.719,973,5.043,975,0.727,1023,0.795,1028,0.707,1030,0.649,1044,1.104,1059,0.545,1068,1.195,1069,1.943,1075,1.136,1132,0.749,1136,0.663,1145,0.649,1146,2.729,1147,1.119,1149,1.119,1150,0.668,1151,0.48,1153,2.614,1154,1.061,1155,2.842,1156,2.518,1157,0.795,1158,0.632,1159,2.453,1160,0.955,1161,2.357,1162,0.842,1163,0.983,1164,0.93,1166,1.323,1198,1.075,1201,0.653,1204,0.955,1211,0.983,1221,1.248,1251,0.784,1263,0.842,1273,1.117,1296,0.889,1301,0.983,1317,1.258,1321,0.775,1325,1.515,1341,0.616,1392,1.538,1404,1.136,1417,3.113,1418,0.512,1431,0.955,1435,0.909,1436,0.93,1449,0.727,1461,0.842,1463,0.678,1467,0.829,1471,0.72,1473,3.165,1477,0.829,1478,1.267,1518,0.766,1526,0.658,1527,0.757,1667,0.775,1691,0.734,1718,2.686,1753,0.857,1759,1.685,1760,0.636,1762,0.713,1765,1.888,1799,1.589,1803,0.842,1813,0.766,1819,0.757,1836,4.263,1837,2.903,1838,2.076,1839,2.076,1840,2.076,1841,2.362,1843,0.829,1847,0.795,1848,3.626,1849,1.969,1850,4.686,1851,1.018,1852,1.22,1853,1.375,1854,1.969,1855,1.207,1856,1.119,1857,0.93,1858,0.817,1859,0.857,1860,1.119,1861,1.969,1862,2.239,1863,1.207,1864,0.889,1865,1.207,1866,0.829,1867,0.909,1868,1.018,1869,1.207,1870,0.658,1871,1.207,1872,1.207,1873,1.207,1874,1.207,1875,1.061,1876,1.207,1877,1.207,1878,1.207,1879,1.018,1880,2.753,1881,1.987,1882,1.207,1883,1.207,1884,1.207,1885,1.207,1886,1.061,1887,1.018,1888,1.888,1889,0.983,1890,0.955,1891,0.829,1892,1.119,1893,1.421,1894,1.207,1895,1.207,1896,1.119,1897,0.909,1898,0.983,1899,1.061,1900,0.872,1901,1.207,1902,1.207,1903,0.842,1904,0.872,1905,1.207,1906,1.207,1907,1.207,1908,2.076,1909,0.784,1910,1.207]],["component/29",[1,0.349,2,0.663,18,0.6]],["title/30",[21,30.183]],["name/30",[3,1.478]],["text/30",[1,1.927,2,3.423,10,2.817,18,1.605,21,4.236,32,5.209,34,2.807,36,2.48,49,3.478,56,3.485,60,1.819,94,1.868,95,3.902,111,3.236,190,2.132,201,2.471,225,4.604,228,5.642,243,2.31,332,2.748,334,2.966,344,2.635,440,3.349,504,2.645,528,3.047,575,2.864,754,1.949,768,3.156,783,3.156,791,3.137,867,4.097,886,6.062,909,3.478,960,5.006,961,3.506,969,3.1,973,2.453,1166,3.629,1171,3.597,1180,3.992,1212,3.535,1221,4.898,1269,4.859,1270,3.992,1271,7.949,1273,3.064,1911,3.772,1912,4.527,1913,5.696]],["component/30",[1,0.349,2,0.663,18,0.6]],["title/31-1",[1666,61.989]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[94,16.583,1666,51.359]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31-3",[1914,79.426]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["title/31-4",[1915,94.169]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["title/31-5",[1671,76.733]],["name/31-5",[]],["text/31-5",[]],["component/31-5",[]],["title/31-6",[21,16.512,166,24.875,219,17.83,1667,33.072,1916,47.767]],["name/31-6",[]],["text/31-6",[]],["component/31-6",[]],["title/31-7",[21,21.347,419,36.048,1526,36.305]],["name/31-7",[]],["text/31-7",[]],["component/31-7",[]],["title/31-8",[1917,82.798]],["name/31-8",[]],["text/31-8",[]],["component/31-8",[]],["title/31-9",[1,10.112,51,22.015,94,14.156]],["name/31-9",[]],["text/31-9",[]],["component/31-9",[]],["title/31-10",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/31-10",[]],["text/31-10",[]],["component/31-10",[]],["title/31-11",[1918,87.314]],["name/31-11",[]],["text/31-11",[]],["component/31-11",[]],["title/31-12",[1,10.112,51,22.015,94,14.156]],["name/31-12",[]],["text/31-12",[]],["component/31-12",[]],["title/31-13",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/31-13",[]],["text/31-13",[]],["component/31-13",[]],["title/31-14",[1919,79.426]],["name/31-14",[]],["text/31-14",[]],["component/31-14",[]],["title/31-15",[1,10.112,51,22.015,94,14.156]],["name/31-15",[]],["text/31-15",[]],["component/31-15",[]],["title/31-16",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/31-16",[]],["text/31-16",[]],["component/31-16",[]],["title/31-17",[21,21.347,432,34.64,1526,36.305]],["name/31-17",[]],["text/31-17",[]],["component/31-17",[]],["title/31-18",[419,42.23,955,39.37]],["name/31-18",[]],["text/31-18",[]],["component/31-18",[]],["title/31-19",[686,57.497,1841,40.08]],["name/31-19",[]],["text/31-19",[]],["component/31-19",[]],["title/31-20",[22,44.528,1777,52.795]],["name/31-20",[]],["text/31-20",[]],["component/31-20",[]],["title/31-21",[1920,79.426]],["name/31-21",[]],["text/31-21",[]],["component/31-21",[]],["title/31-22",[1921,87.314]],["name/31-22",[]],["text/31-22",[]],["component/31-22",[]],["title/31-23",[1,10.112,51,22.015,94,14.156]],["name/31-23",[]],["text/31-23",[]],["component/31-23",[]],["title/31-24",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/31-24",[]],["text/31-24",[]],["component/31-24",[]],["title/31-25",[1922,74.491]],["name/31-25",[]],["text/31-25",[]],["component/31-25",[]],["title/31-26",[1,10.112,51,22.015,94,14.156]],["name/31-26",[]],["text/31-26",[]],["component/31-26",[]],["title/31-27",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/31-27",[]],["text/31-27",[]],["component/31-27",[]],["title/31-28",[94,10.95,419,27.885,686,37.965,955,25.996,1841,26.465]],["name/31-28",[]],["text/31-28",[]],["component/31-28",[]],["title/31-29",[1,10.112,51,22.015,94,14.156]],["name/31-29",[]],["text/31-29",[]],["component/31-29",[]],["title/31-30",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/31-30",[]],["text/31-30",[]],["component/31-30",[]],["title/31-31",[1923,72.57]],["name/31-31",[]],["text/31-31",[]],["component/31-31",[]],["title/31",[49,53.311]],["name/31",[49,1.935]],["text/31",[0,0.935,1,0.877,2,0.477,4,1.467,6,1.047,10,1.732,13,0.285,15,1.393,17,0.919,18,0.332,19,0.395,21,3.77,22,3.298,26,0.189,28,1.151,34,2.274,36,1.079,37,0.648,38,0.215,40,1.634,41,1.547,44,0.919,46,0.321,48,0.621,49,0.254,51,0.288,52,0.74,54,0.36,59,0.499,60,0.97,61,0.535,69,0.291,72,1.289,73,1.285,80,0.938,82,1.17,85,0.265,89,0.198,94,2.068,95,0.507,98,0.214,99,0.432,103,0.27,104,0.355,106,0.617,110,0.188,111,0.236,114,0.657,118,0.748,120,0.483,122,1.234,123,0.201,124,0.541,125,0.557,127,0.393,128,0.299,129,0.26,132,0.244,133,0.199,135,0.838,139,0.355,140,0.21,147,1.254,149,0.412,151,0.533,159,1.526,161,0.288,164,0.899,166,1.134,167,0.27,172,0.598,175,1.097,176,0.96,177,1.156,178,0.416,184,1.08,185,0.661,187,0.482,188,0.189,189,0.208,190,4.36,192,0.221,193,0.267,196,0.657,199,0.25,200,0.468,201,0.664,206,0.22,207,0.574,219,0.813,225,0.826,227,0.263,229,1.659,232,2.464,237,1.033,239,0.399,242,1.604,243,1.957,244,0.898,245,0.184,247,0.244,250,1.042,251,0.506,253,1.742,254,0.177,260,0.193,263,1.513,264,0.645,266,1.085,267,0.957,268,3.008,269,0.773,272,0.483,273,1.275,276,0.459,279,1.923,280,0.525,291,0.235,293,0.465,295,0.674,300,0.539,302,2.299,305,0.402,306,1.254,309,1.221,310,0.511,318,0.375,323,1.491,332,0.201,335,1.037,341,0.493,342,0.668,344,0.545,345,0.252,347,1.051,350,0.653,354,1.407,355,0.475,356,1.41,360,0.285,362,0.482,363,0.883,373,0.372,388,0.705,392,0.285,397,1.137,412,0.377,419,2.207,420,1.64,421,0.235,425,0.533,432,1.849,436,0.468,438,0.402,439,0.217,449,0.482,456,0.608,504,0.193,505,0.649,511,0.218,514,0.224,516,0.843,517,0.541,518,0.462,519,0.295,527,0.751,530,0.732,536,0.254,538,0.291,551,0.52,553,0.288,555,0.689,559,0.222,560,0.211,562,0.49,563,0.52,564,0.303,573,0.661,575,0.937,576,0.638,580,0.232,582,0.459,583,0.192,589,0.49,591,0.404,592,1.428,602,1.072,609,2.027,626,0.338,635,0.241,648,0.582,668,2.262,679,0.56,684,0.365,686,2.62,688,0.423,692,2.085,699,0.468,710,0.235,716,1.849,729,1.873,732,0.666,733,0.887,734,0.273,735,0.51,741,0.668,753,0.218,754,1.039,759,0.493,760,0.235,761,0.453,763,0.535,764,0.547,766,0.425,767,0.178,776,0.243,778,0.582,782,0.33,783,0.23,789,0.98,791,2.552,795,0.313,805,1.209,810,0.751,811,0.241,813,0.324,817,0.27,821,1.949,826,0.657,829,3.58,831,0.378,835,0.33,836,0.448,837,0.236,838,0.291,839,0.919,840,0.582,849,0.642,855,0.275,856,0.891,858,0.172,859,0.608,861,0.417,871,2.183,877,0.56,881,2.342,885,0.318,891,0.355,898,0.243,904,0.324,907,0.225,909,0.254,910,0.493,917,0.303,927,0.442,931,0.318,933,0.26,938,0.308,939,1.855,947,0.263,955,2.181,961,0.256,967,2.392,973,1.91,974,0.273,975,0.27,988,0.233,994,0.416,1007,0.378,1008,0.324,1013,0.25,1016,0.338,1023,0.295,1024,2.12,1028,0.51,1030,0.683,1032,0.239,1033,0.308,1043,0.285,1044,0.814,1046,3.045,1059,0.574,1062,0.547,1067,0.338,1068,0.239,1074,0.33,1075,1.02,1099,0.225,1122,0.798,1135,0.689,1136,0.246,1145,0.241,1146,0.313,1150,0.482,1153,0.188,1155,3.596,1156,2.366,1158,0.235,1166,0.515,1171,0.263,1174,0.365,1180,0.291,1187,0.502,1194,0.221,1197,0.318,1198,0.611,1199,0.288,1200,0.281,1201,0.243,1206,0.378,1216,1.33,1217,0.49,1218,1.437,1222,0.574,1223,1.118,1232,0.765,1233,0.324,1237,0.355,1243,1.272,1244,0.355,1251,0.566,1255,0.33,1256,4.541,1272,0.86,1273,0.224,1286,0.378,1303,0.233,1304,0.288,1305,0.416,1306,0.365,1317,2.291,1320,0.281,1321,0.288,1324,0.51,1341,0.649,1345,0.67,1354,0.267,1356,0.672,1362,1.364,1363,0.295,1365,0.265,1367,0.33,1369,0.346,1374,0.324,1389,0.63,1397,0.318,1398,0.56,1399,0.907,1402,0.285,1404,1.513,1417,1.773,1418,3.299,1420,2.374,1435,0.338,1436,0.346,1441,0.52,1449,0.993,1452,0.33,1462,0.416,1463,0.49,1464,0.239,1465,0.365,1467,0.308,1469,0.816,1471,0.984,1475,0.798,1477,0.873,1478,0.254,1488,0.807,1493,0.574,1500,0.291,1508,0.346,1509,0.937,1521,0.672,1524,0.582,1526,2.837,1540,0.486,1541,0.887,1571,0.661,1575,0.51,1583,0.324,1584,1.036,1591,0.56,1593,0.338,1656,0.582,1666,1.086,1667,2.775,1669,1.359,1671,1.344,1688,0.416,1689,0.288,1690,0.766,1695,1.48,1696,0.59,1700,1.637,1701,0.416,1702,0.735,1704,0.324,1712,0.547,1713,4.395,1717,0.574,1722,0.619,1727,0.887,1731,0.599,1737,0.33,1740,3.084,1742,1.778,1745,1.072,1752,1.047,1757,0.56,1758,1.447,1760,0.236,1761,0.299,1762,0.265,1763,0.33,1768,0.656,1769,0.394,1775,0.355,1776,3.126,1777,2.017,1781,0.313,1796,1.662,1799,0.619,1803,0.313,1809,0.365,1811,0.295,1813,0.553,1819,0.798,1833,0.506,1841,2.221,1847,0.295,1851,0.378,1852,0.244,1861,0.394,1870,0.899,1881,0.285,1887,0.378,1909,0.291,1914,0.735,1916,0.808,1917,2.35,1918,1.53,1919,3.44,1920,1.392,1921,0.808,1922,1.858,1923,1.811,1924,0.689,1925,0.365,1926,0.346,1927,0.394,1928,0.448,1929,0.318,1930,0.318,1931,0.275,1932,0.957,1933,0.448,1934,0.416,1935,0.416,1936,0.324,1937,0.378,1938,1.65,1939,0.448,1940,0.703,1941,0.355,1942,0.808,1943,0.416,1944,0.56,1945,0.71,1946,0.416,1947,0.416,1948,0.448,1949,0.324,1950,0.378,1951,1.176,1952,0.324,1953,0.689,1954,0.808,1955,0.51,1956,0.308,1957,0.63,1958,0.873,1959,0.308,1960,0.808,1961,2.029,1962,0.56,1963,0.448,1964,0.394,1965,0.416,1966,0.394,1967,0.416,1968,1.53,1969,0.735,1970,1.271,1971,0.448,1972,0.872,1973,0.338,1974,0.365,1975,0.448,1976,0.872,1977,0.808,1978,0.872,1979,0.872,1980,0.448,1981,0.416,1982,0.365,1983,0.448,1984,2.891,1985,0.448,1986,0.448,1987,0.448,1988,0.448,1989,0.873,1990,0.608,1991,1.179,1992,1.491,1993,0.735,1994,0.789,1995,0.448,1996,0.394,1997,0.98,1998,0.448,1999,0.872,2000,0.872,2001,1.006,2002,0.872,2003,0.448,2004,0.872,2005,2.349,2006,0.448,2007,1.171,2008,1.072,2009,1.036,2010,1.272,2011,0.957,2012,1.271,2013,0.672,2014,0.98,2015,1.271,2016,1.271,2017,1.271,2018,1.769,2019,0.448,2020,0.281,2021,0.365,2022,0.394,2023,1.272,2024,0.33,2025,0.416,2026,0.448,2027,0.872,2028,0.872,2029,0.448,2030,0.448,2031,0.656,2032,0.365,2033,0.295,2034,0.416,2035,0.448,2036,0.303,2037,0.378,2038,0.378,2039,0.226,2040,0.324,2041,0.448,2042,0.365,2043,0.656,2044,0.448,2045,0.448,2046,0.807,2047,0.448,2048,0.448,2049,0.448,2050,0.416,2051,0.365,2052,0.873,2053,0.448,2054,0.324,2055,0.448,2056,0.448,2057,0.872,2058,0.416,2059,0.735,2060,0.448,2061,0.448,2062,0.448,2063,0.394,2064,0.394,2065,0.448,2066,1.53,2067,0.448,2068,0.448,2069,0.448,2070,0.808,2071,0.448,2072,0.735,2073,0.448,2074,0.378,2075,0.378,2076,0.448,2077,0.574,2078,0.448,2079,0.448,2080,0.872,2081,0.448,2082,0.872,2083,0.416,2084,0.448,2085,0.448,2086,0.735,2087,0.365,2088,0.318,2089,0.33,2090,0.448,2091,0.416,2092,0.394,2093,0.365,2094,0.416,2095,0.448,2096,0.394,2097,0.416,2098,0.355,2099,0.318,2100,0.355,2101,0.98,2102,0.448,2103,1.271,2104,0.872,2105,0.872,2106,0.872,2107,0.448,2108,0.448,2109,0.448,2110,0.448,2111,0.448,2112,0.448,2113,0.448,2114,0.448,2115,0.378,2116,0.448,2117,1.271,2118,0.448,2119,0.338,2120,0.378,2121,0.378,2122,0.448,2123,0.365,2124,0.448,2125,1.271,2126,0.378,2127,0.448,2128,0.448,2129,1.072,2130,0.872,2131,0.448,2132,0.416,2133,0.448,2134,0.416,2135,0.365,2136,0.378,2137,0.338,2138,0.394,2139,0.394]],["component/31",[1,0.349,2,0.663,18,0.6]],["title/32-1",[25,44.169,1940,43.157]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[25,44.169,80,31.159]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32-3",[34,18.215,60,19.72,114,26.505]],["name/32-3",[]],["text/32-3",[]],["component/32-3",[]],["title/32-4",[94,20.016]],["name/32-4",[]],["text/32-4",[]],["component/32-4",[]],["title/32",[25,44.169,26,32.937]],["name/32",[25,1.13,26,0.843]],["text/32",[0,0.677,1,0.465,4,0.702,10,0.983,19,1.39,23,5.089,24,2.969,25,7.302,26,1.294,28,1.491,34,2.226,36,1.237,37,0.668,40,1.923,48,1.153,52,2.258,54,0.702,59,1.203,60,0.504,73,2.318,80,2.358,82,2.109,90,1.879,94,1.399,95,1.286,106,0.826,114,1.665,120,1.588,123,2.298,125,1.831,128,1.135,140,0.797,147,0.716,166,0.822,171,0.885,175,1.128,177,1.326,184,1.409,185,2.176,186,1.299,188,1.759,190,4.398,192,0.84,201,1.682,219,1.061,235,2.176,237,1.839,239,0.779,244,1.172,250,2.268,253,1.172,263,0.724,264,0.666,266,1.416,270,0.869,272,2.242,273,1.08,279,1.609,280,1.726,305,0.786,318,1.32,342,1.242,345,0.956,354,0.626,356,0.805,362,3.266,363,0.748,373,1.31,412,0.736,421,0.891,435,0.869,439,0.822,444,1.864,513,1.034,516,0.869,527,1.912,530,1.359,533,0.971,573,0.885,575,1.95,582,3.468,588,0.844,654,1.75,668,0.805,708,2.919,716,2.176,729,1.26,732,0.891,741,0.689,742,0.891,744,1.578,754,1.327,760,3.091,761,0.885,778,2.531,784,0.801,789,1.496,805,1.024,807,1.281,811,0.915,829,1.32,834,0.844,836,0.874,846,1.015,867,0.793,881,2.516,885,1.208,907,0.854,939,0.826,954,0.902,967,1.409,973,2.043,987,1.188,988,0.885,1030,1.648,1032,1.637,1033,1.169,1059,0.768,1068,0.909,1150,0.941,1151,1.22,1155,2.998,1156,1.831,1158,1.605,1161,1.281,1162,1.188,1187,1.764,1215,2.218,1218,3.174,1251,1.106,1268,1.169,1273,0.849,1303,0.885,1320,1.068,1341,0.869,1356,1.311,1367,1.254,1399,0.768,1404,3.639,1417,3.881,1418,1.299,1446,1.056,1488,1.08,1500,1.106,1502,2.176,1717,1.12,1813,1.08,1852,2.789,1881,1.08,1891,1.169,1924,1.346,1940,6.455,2007,3.631,2010,3.942,2011,2.308,2013,2.363,2140,5.284,2141,1.702,2142,3.409,2143,1.435,2144,3.678,2145,1.496,2146,2.695,2147,1.23,2148,1.387,2149,1.702,2150,1.23,2151,1.702,2152,1.702,2153,7.685,2154,1.702,2155,4.183,2156,5.623,2157,3.066,2158,1.578,2159,2.842,2160,1.435,2161,1.702,2162,1.702,2163,1.702,2164,1.702,2165,6.583,2166,3.066,2167,4.852,2168,3.678,2169,2.842,2170,2.695,2171,1.578,2172,0.963,2173,1.578,2174,1.281,2175,1.702,2176,1.702,2177,1.702,2178,1.702,2179,1.702,2180,1.702,2181,1.281,2182,6.648,2183,1.578,2184,1.208,2185,1.496,2186,2.842,2187,3.066,2188,3.066,2189,1.702,2190,1.281,2191,1.702,2192,1.702,2193,3.879,2194,2.139,2195,1.702,2196,1.702,2197,1.496,2198,1.281,2199,1.702,2200,1.702,2201,2.754,2202,3.879,2203,2.586,2204,5.115,2205,1.702,2206,1.496,2207,2.842,2208,2.425,2209,1.578,2210,1.702,2211,1.702,2212,1.702,2213,1.702]],["component/32",[1,0.349,2,0.663,18,0.6]],["title/33-1",[25,37.703,28,16.815,1940,36.84]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[28,16.815,181,38.326,1940,36.84]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[23,47.267,28,16.815,1940,36.84]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33-4",[28,14.668,708,40.541,1940,46.697]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["title/33-5",[1,8.821,28,14.668,46,14.668,1940,32.136]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["title/33-6",[28,16.815,1940,36.84,2214,56.173]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["title/33-7",[52,24.575,94,16.583]],["name/33-7",[]],["text/33-7",[]],["component/33-7",[]],["title/33",[28,19.699,1940,43.157]],["name/33",[28,0.504,1940,1.105]],["text/33",[1,1.267,4,0.737,10,1.395,13,1.133,19,1.972,20,1.987,23,7.087,25,1.812,26,2.239,28,2.637,34,2.731,36,1.292,37,1.257,40,0.821,46,1.714,50,1.515,52,2.324,54,1.321,59,1.708,60,0.529,71,1.384,72,0.772,73,1.257,82,2.424,84,2.031,85,1.891,87,2.57,94,1.936,98,1.53,99,0.886,114,0.711,118,0.81,122,1.478,123,1.955,124,1.108,125,1.402,126,1.507,129,1.036,142,2.307,149,0.845,151,1.823,175,0.657,177,1.384,181,1.028,185,1.665,186,0.757,189,0.829,190,1.51,192,0.881,199,0.995,201,0.718,219,1.506,225,0.734,237,1.407,239,0.817,244,1.223,250,1.42,253,1.223,264,2.074,266,1.478,269,0.837,272,0.678,280,0.737,285,0.967,302,0.689,305,0.825,310,1.75,318,0.769,334,0.862,335,0.788,342,1.762,345,1.003,347,0.935,354,2.715,362,3.377,373,1.368,388,0.763,393,0.953,394,1.57,395,1.055,425,1.341,445,0.813,449,1.771,510,1.246,511,0.867,519,1.176,527,1.196,530,1.42,560,0.841,561,1.075,580,1.655,588,1.588,646,1.208,674,2.594,685,1.046,687,2.815,688,2.112,708,4.737,716,0.929,729,1.788,741,1.297,745,1.506,746,1.191,753,0.867,778,2.396,789,2.123,807,1.344,821,0.853,829,1.379,834,0.886,845,1.506,847,1.146,856,0.792,881,3.19,885,1.267,898,0.967,899,1.909,905,1.146,934,1.927,938,1.227,975,1.075,1030,0.96,1033,2.199,1043,2.76,1044,1.579,1046,0.941,1058,1.108,1074,1.316,1117,2.249,1122,1.12,1151,1.731,1155,2.78,1156,0.782,1185,1.019,1187,2.504,1194,0.881,1196,1.909,1197,1.267,1215,3.237,1216,1.011,1217,2.978,1218,4.703,1235,1.506,1262,1.316,1294,3.353,1300,2.7,1324,1.046,1327,1.316,1335,1.57,1336,1.455,1339,1.413,1362,1.036,1378,1.344,1381,1.246,1397,1.267,1399,0.806,1417,2.87,1418,1.357,1442,1.291,1473,1.086,1475,1.12,1478,1.812,1524,1.191,1574,1.656,1575,1.046,1591,1.146,1595,1.506,1713,2.389,1717,1.176,1742,1.065,1772,3.442,1774,4.034,1801,1.191,1867,2.41,1870,1.745,1891,4.663,1909,3.446,1924,1.413,1940,6.805,1944,1.146,1989,1.227,1992,1.133,1994,1.987,2007,3.764,2010,2.467,2011,1.344,2013,1.376,2023,1.376,2039,0.901,2156,1.176,2160,4.473,2181,1.344,2190,1.344,2202,4.917,2203,1.506,2206,1.57,2208,1.413,2214,5.726,2215,1.946,2216,8.199,2217,2.359,2218,1.208,2219,2.359,2220,1.656,2221,2.313,2222,1.656,2223,1.786,2224,1.786,2225,3.67,2226,1.786,2227,4.034,2228,5.969,2229,1.786,2230,1.376,2231,1.786,2232,1.786,2233,1.786,2234,1.227,2235,2.41,2236,1.786,2237,1.57,2238,1.108,2239,1.344,2240,1.656,2241,1.786,2242,1.786,2243,1.786,2244,1.506,2245,1.786,2246,3.201,2247,1.798,2248,1.246,2249,1.786,2250,3.206,2251,3.201,2252,1.455,2253,1.656,2254,1.786,2255,1.786,2256,1.786,2257,1.267,2258,1.455,2259,1.455,2260,1.656,2261,1.786,2262,1.656,2263,1.786,2264,1.786]],["component/33",[1,0.349,2,0.663,18,0.6]],["title/34",[25,53.311]],["name/34",[3,1.478]],["text/34",[1,1.512,2,2.877,10,2.356,18,1.921,25,7.683,26,4.205,28,2.515,34,2.724,56,2.916,80,3.978,99,3.647,111,3.873,114,2.926,133,3.26,188,3.092,225,4.094,228,4.72,332,3.289,334,3.55,345,4.129,356,4.712,449,4.067,504,3.166,528,3.647,575,3.428,768,3.777,805,4.425,954,5.282,961,4.196,973,2.936,1059,3.318,1122,4.612,1166,4.343,1171,4.304,1212,4.231,1213,5.666,1215,3.899,1940,6.698,2156,4.84,2159,6.817,2215,4.469]],["component/34",[1,0.349,2,0.663,18,0.6]],["title/35-1",[28,19.699,1526,42.531]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[28,19.699,73,30.624]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35-3",[1,8.821,28,14.668,46,14.668,73,22.803]],["name/35-3",[]],["text/35-3",[]],["component/35-3",[]],["title/35-4",[1,10.112,51,22.015,94,14.156]],["name/35-4",[]],["text/35-4",[]],["component/35-4",[]],["title/35-5",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/35-5",[]],["text/35-5",[]],["component/35-5",[]],["title/35-6",[28,16.815,73,26.141,929,54.268]],["name/35-6",[]],["text/35-6",[]],["component/35-6",[]],["title/35-7",[2265,76.733]],["name/35-7",[]],["text/35-7",[]],["component/35-7",[]],["title/35-8",[1,10.112,51,22.015,94,14.156]],["name/35-8",[]],["text/35-8",[]],["component/35-8",[]],["title/35-9",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/35-9",[]],["text/35-9",[]],["component/35-9",[]],["title/35-10",[2266,79.426]],["name/35-10",[]],["text/35-10",[]],["component/35-10",[]],["title/35-11",[1,10.112,51,22.015,94,14.156]],["name/35-11",[]],["text/35-11",[]],["component/35-11",[]],["title/35-12",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/35-12",[]],["text/35-12",[]],["component/35-12",[]],["title/35-13",[2267,79.426]],["name/35-13",[]],["text/35-13",[]],["component/35-13",[]],["title/35-14",[1,10.112,51,22.015,94,14.156]],["name/35-14",[]],["text/35-14",[]],["component/35-14",[]],["title/35-15",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/35-15",[]],["text/35-15",[]],["component/35-15",[]],["title/35-16",[28,16.815,73,26.141,1196,39.709]],["name/35-16",[]],["text/35-16",[]],["component/35-16",[]],["title/35-17",[28,16.815,38,31.991,2238,41.328]],["name/35-17",[]],["text/35-17",[]],["component/35-17",[]],["title/35-18",[1,10.112,51,22.015,94,14.156]],["name/35-18",[]],["text/35-18",[]],["component/35-18",[]],["title/35-19",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/35-19",[]],["text/35-19",[]],["component/35-19",[]],["title/35-20",[28,13.007,45,28.713,73,20.221,244,19.689,335,22.747]],["name/35-20",[]],["text/35-20",[]],["component/35-20",[]],["title/35-21",[28,16.815,73,26.141,2172,37.703]],["name/35-21",[]],["text/35-21",[]],["component/35-21",[]],["title/35-22",[232,23.786,1218,35.799,2268,51.324]],["name/35-22",[]],["text/35-22",[]],["component/35-22",[]],["title/35-23",[1,10.112,51,22.015,94,14.156]],["name/35-23",[]],["text/35-23",[]],["component/35-23",[]],["title/35-24",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/35-24",[]],["text/35-24",[]],["component/35-24",[]],["title/35-25",[28,14.668,966,51.081,1218,31.227,1298,41.232]],["name/35-25",[]],["text/35-25",[]],["component/35-25",[]],["title/35-26",[28,19.699,432,40.58]],["name/35-26",[]],["text/35-26",[]],["component/35-26",[]],["title/35",[28,19.505,73,20.221,190,17.88,1526,28.083]],["name/35",[28,0.514,73,0.428,1526,0.594]],["text/35",[0,0.246,1,1.241,2,0.178,3,0.267,4,1.593,9,0.205,10,1.824,11,0.424,14,1.493,15,1.484,18,0.161,21,0.198,26,0.502,27,0.73,28,3.105,29,1.039,34,2.834,35,1.13,36,0.891,37,1.905,38,3.076,40,2.088,46,0.88,48,0.447,51,0.204,52,1.098,53,0.804,54,0.708,59,0.674,60,1.437,66,0.33,70,0.365,72,0.954,73,3.922,76,0.521,80,0.247,81,0.392,82,1.103,84,0.392,89,2.143,94,2.14,95,0.678,97,0.446,98,0.568,99,0.306,105,1.115,106,1.071,107,0.388,109,0.412,111,0.325,114,0.246,118,1.207,120,0.652,122,0.792,123,0.278,125,0.52,127,0.279,129,0.69,135,0.314,142,2.234,147,0.722,149,0.292,151,0.719,159,0.979,164,1.727,166,0.298,172,0.224,175,0.632,177,1.508,181,0.356,184,0.546,185,0.893,186,0.504,187,0.657,188,3.247,190,4.361,193,0.368,196,0.319,199,0.344,200,0.639,201,0.69,219,0.594,225,0.254,229,1.065,236,1.162,237,0.755,239,0.544,240,0.696,242,0.996,243,0.447,244,0.843,247,0.337,250,0.527,253,1.018,254,1.374,260,0.266,263,2.19,264,0.671,268,0.715,272,0.235,279,1.342,280,0.708,283,0.344,285,0.334,291,0.323,302,2.554,304,0.662,306,0.722,308,0.315,309,0.253,310,0.248,318,1.502,320,0.949,323,0.392,329,0.69,330,1.355,332,0.276,334,0.574,335,0.758,336,0.424,337,0.446,341,0.35,342,1.079,344,0.736,345,0.347,347,0.898,350,0.317,352,0.342,354,0.98,356,0.292,363,0.272,373,0.733,386,0.431,388,0.508,389,0.843,390,0.465,391,0.397,393,0.33,395,0.365,397,0.263,412,0.267,419,0.334,425,0.498,431,0.489,432,1.607,438,0.285,439,0.298,443,0.383,447,0.412,449,0.342,477,0.968,483,0.455,505,0.315,511,1.293,512,0.793,514,0.308,515,0.372,516,0.315,518,0.328,527,1.574,528,0.306,530,0.527,533,0.353,538,0.402,553,0.397,554,0.383,560,0.559,570,0.356,571,1.107,573,0.893,575,1.241,582,0.325,583,0.265,588,0.589,589,0.347,590,0.968,591,0.287,592,0.722,602,1.422,604,0.465,609,0.63,668,0.562,674,2.894,685,0.696,688,0.3,692,1.161,699,0.332,700,0.763,702,1.7,703,0.673,710,0.622,711,0.356,717,0.418,729,0.907,734,0.722,738,0.489,741,1.079,750,0.339,753,0.833,754,0.196,761,0.618,767,0.246,773,0.353,776,0.334,778,0.606,783,0.882,784,0.559,789,0.837,791,0.315,793,0.722,800,0.927,806,0.339,809,0.376,817,0.715,824,1.014,826,0.614,829,2.09,834,0.306,839,0.544,854,0.657,858,0.846,861,0.82,865,0.334,867,0.288,869,1.888,880,1.577,881,2.174,891,0.489,896,0.446,898,0.334,899,1.316,900,0.476,910,1.249,931,0.438,933,0.359,937,0.652,939,1.071,946,0.424,947,0.362,952,0.904,954,0.91,958,0.383,969,0.312,971,0.339,973,1.393,974,0.376,982,0.673,987,0.431,988,0.321,1004,0.323,1008,0.446,1021,0.339,1030,2.075,1032,0.634,1033,0.424,1043,0.392,1046,0.904,1059,1.202,1062,1.938,1067,0.465,1068,0.33,1073,0.372,1075,0.603,1089,0.489,1090,0.438,1099,0.596,1104,0.356,1109,0.431,1135,0.489,1143,0.503,1146,0.829,1151,0.683,1153,0.498,1155,3.516,1156,2.987,1166,0.365,1184,0.521,1185,1.259,1193,0.503,1196,0.708,1198,0.297,1200,0.388,1201,1.194,1209,0.379,1215,0.328,1216,0.673,1217,1.735,1218,4.235,1221,0.344,1222,1.13,1228,0.876,1230,0.402,1234,0.876,1240,0.465,1243,1.323,1244,0.489,1252,1.115,1268,0.424,1273,0.593,1290,0.489,1300,0.521,1301,0.503,1304,0.397,1317,2.169,1321,1.102,1323,1.218,1324,0.362,1325,0.418,1328,1.292,1331,0.397,1332,2.17,1333,0.465,1334,0.859,1335,0.543,1336,0.503,1337,0.489,1338,0.503,1340,1.591,1341,0.607,1343,0.573,1344,0.397,1345,0.904,1346,0.392,1347,1.447,1348,0.376,1349,0.489,1351,0.476,1355,0.376,1358,0.935,1365,2.06,1374,0.446,1377,0.543,1378,0.894,1397,0.438,1398,1.102,1399,0.279,1404,1.12,1417,2.28,1418,2.892,1420,1.211,1435,0.465,1437,0.438,1442,0.446,1445,0.489,1446,0.383,1451,0.489,1456,0.859,1466,1.043,1467,0.816,1474,0.503,1477,0.424,1478,0.35,1485,0.916,1488,0.754,1490,0.489,1498,0.412,1518,2.672,1526,0.648,1527,1.384,1528,0.489,1529,1.102,1531,1.102,1532,0.573,1538,0.573,1539,2.652,1540,0.344,1541,0.431,1571,0.321,1580,0.424,1586,0.94,1587,0.968,1591,0.397,1600,0.662,1603,2.38,1647,0.521,1648,0.673,1669,0.418,1691,0.376,1713,0.652,1742,1.588,1748,0.573,1760,0.325,1771,0.446,1773,0.476,1796,0.344,1810,0.476,1816,0.402,1841,0.61,1853,0.379,1864,0.455,1881,1.4,1889,2.842,1890,3.839,1891,0.424,1893,0.392,1897,0.465,1924,0.489,1926,0.476,1929,0.843,1930,0.438,1931,1.635,1957,0.446,1974,0.503,1984,2.45,1992,0.392,1993,1.002,1994,0.383,1996,0.543,2001,0.489,2007,2.74,2008,1.861,2009,1.798,2011,0.894,2013,1.7,2031,0.465,2033,0.407,2034,0.573,2036,0.418,2042,0.503,2059,0.521,2088,1.89,2096,0.543,2115,0.521,2121,1.447,2123,0.968,2167,0.418,2172,0.35,2203,1.447,2217,0.455,2235,1.292,2238,0.737,2250,0.876,2265,3.955,2266,3.552,2267,1.861,2269,2.341,2270,3.703,2271,1.716,2272,0.314,2273,0.407,2274,0.618,2275,0.618,2276,0.618,2277,4.292,2278,2.434,2279,0.521,2280,0.618,2281,1.591,2282,1.102,2283,0.618,2284,0.618,2285,1.798,2286,0.465,2287,0.618,2288,2.046,2289,0.489,2290,0.503,2291,0.573,2292,0.438,2293,1.716,2294,0.618,2295,0.618,2296,0.618,2297,0.618,2298,0.573,2299,1.188,2300,0.618,2301,0.618,2302,0.618,2303,0.618,2304,0.618,2305,0.804,2306,0.618,2307,0.543,2308,0.618,2309,0.618,2310,0.618,2311,0.618,2312,0.438,2313,0.618,2314,0.618,2315,0.618,2316,2.046,2317,3.905,2318,1.94,2319,2.046,2320,2.046,2321,0.618,2322,1.861,2323,0.618,2324,1.188,2325,0.618,2326,1.102,2327,0.543,2328,0.573,2329,0.446,2330,2.341,2331,0.489,2332,0.543,2333,0.618,2334,1.716,2335,1.188,2336,1.716,2337,0.618,2338,1.188,2339,0.618,2340,1.323,2341,1.716,2342,0.618,2343,0.573,2344,0.412,2345,0.618,2346,0.618,2347,0.618,2348,0.618,2349,0.521,2350,0.573,2351,0.618,2352,0.618,2353,0.543,2354,0.573,2355,0.618,2356,0.618,2357,0.521,2358,0.618,2359,0.618,2360,1.102,2361,0.521,2362,0.543,2363,0.618,2364,1.002,2365,1.102,2366,0.573,2367,0.618,2368,0.618,2369,0.618,2370,0.503,2371,2.046,2372,0.618,2373,0.618,2374,0.573,2375,0.876,2376,0.476,2377,0.618,2378,0.894,2379,1.102,2380,0.618,2381,1.188,2382,0.94,2383,0.968,2384,0.618,2385,0.618,2386,0.618,2387,0.618,2388,0.489,2389,0.618,2390,0.618,2391,0.438,2392,0.618,2393,0.573,2394,0.618,2395,0.618,2396,0.573,2397,0.618]],["component/35",[1,0.349,2,0.663,18,0.6]],["title/36-1",[28,16.815,791,34.007,973,26.598]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36-2",[28,14.668,791,29.664,973,23.201,1273,28.981]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["title/36",[28,19.699,791,39.838]],["name/36",[28,0.504,791,1.02]],["text/36",[1,0.807,2,1.536,10,2.536,19,1.456,21,2.181,28,3.431,34,1.454,36,2.147,37,1.261,38,1.543,48,2,60,0.951,80,2.124,89,2.348,95,3.074,99,1.594,103,3.201,122,1.483,125,2.328,172,1.164,176,3.252,181,1.849,190,3.631,206,1.576,225,1.32,237,2.338,242,1.45,250,1.424,264,1.257,269,1.505,276,1.161,279,1.236,305,1.483,308,2.715,342,1.301,344,1.378,346,2.581,350,1.65,354,1.182,355,1.751,356,2.516,373,1.372,397,1.367,421,2.784,425,1.346,437,1.671,514,1.602,560,1.512,571,1.612,575,1.498,576,2.668,588,1.594,609,3.609,658,4.503,685,1.881,692,3.449,711,1.849,753,1.559,754,2.159,759,1.819,760,1.681,764,2.015,766,1.568,783,1.65,789,4.61,791,2.715,821,2.541,829,2.29,834,1.594,846,3.171,867,1.498,869,1.739,881,2.033,907,1.612,933,3.086,939,1.559,954,2.82,971,1.764,973,4.769,975,1.934,996,2.174,1004,1.681,1059,1.45,1069,1.993,1150,2.942,1155,3.992,1156,2.328,1159,2.015,1160,2.541,1161,2.418,1163,2.618,1164,2.476,1185,1.833,1198,2.555,1199,2.062,1317,2.987,1345,1.692,1399,1.45,1404,1.631,1418,1.361,1448,1.934,1464,2.839,1473,1.953,1488,2.038,1523,2.115,1526,1.751,1527,2.015,1572,3.3,1648,3.852,1667,2.062,1677,2.978,1689,2.062,1696,2.174,1698,2.088,1708,2.174,1753,2.28,1760,1.692,1762,1.898,1780,2.618,1799,2.28,1807,2.242,1842,2.28,1891,2.206,2167,2.174,2184,2.28,2194,3.711,2398,2.321,2399,2.28,2400,2.824,2401,3.212,2402,4.931,2403,3.212,2404,2.824,2405,2.418,2406,2.978,2407,2.978,2408,2.978,2409,3.212,2410,4.931,2411,3.212,2412,3.212,2413,3.212,2414,4.931,2415,3.212,2416,2.978,2417,4.676,2418,3.212,2419,3.212,2420,2.978]],["component/36",[1,0.349,2,0.663,18,0.6]],["title/37-1",[28,16.815,754,21.134,1153,27.899]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[1,10.112,51,22.015,94,14.156]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37",[28,19.699,754,24.758]],["name/37",[28,0.504,754,0.634]],["text/37",[1,1.083,2,1.339,18,1.58,19,1.237,28,3.13,34,1.654,36,3.741,48,1.744,52,0.859,60,2.112,80,3.702,82,0.974,94,1.847,95,1.425,110,1.143,111,1.437,120,1.761,125,1.194,127,1.231,151,1.143,164,2.074,175,2.225,188,1.147,190,4.616,225,1.121,232,0.974,243,2.682,244,2.311,263,1.161,264,1.814,268,2.791,276,2.185,279,2.743,282,1.904,293,2.475,309,1.117,330,1.06,344,1.17,360,1.731,363,1.199,373,1.165,417,1.385,437,1.419,527,1.02,530,1.21,536,1.544,554,1.693,560,1.284,562,2.604,586,1.773,588,1.353,602,1.456,668,3.781,675,2.847,688,2.935,716,3.709,729,2.931,741,1.105,754,3.529,760,4.183,778,0.963,780,2.459,783,2.382,829,5.072,909,1.544,967,3.994,1044,1.346,1099,1.369,1104,3.48,1136,2.546,1153,2.533,1155,4.632,1156,3.805,1185,1.557,1272,1.846,1317,1.532,1345,3.186,1392,1.874,1399,2.093,1404,4.056,1418,1.156,1449,1.642,1463,1.532,1467,1.874,1469,1.751,1485,2.102,1500,1.773,1746,1.846,1811,1.796,1819,2.909,1893,4.525,1903,1.904,1955,1.597,1984,1.731,2194,3.236,2234,1.874,2370,2.223,2376,2.102,2421,2.529,2422,6.509,2423,2.301,2424,2.529,2425,4.783,2426,2.529,2427,3.491,2428,2.054,2429,2.728,2430,7.991,2431,4.637,2432,6.047,2433,6.047,2434,6.047,2435,2.728,2436,2.728,2437,2.728,2438,2.529,2439,2.728,2440,5.577,2441,2.301,2442,2.728,2443,2.728,2444,7.131,2445,2.728,2446,2.223,2447,2.728,2448,2.529]],["component/37",[1,0.349,2,0.663,18,0.6]],["title/38-1",[28,19.699,1437,55.373]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[10,18.621,881,22.204,1437,41.232,1718,39.904]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[283,43.484,1437,55.373]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38-4",[28,16.815,1218,35.799,1332,54.268]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["title/38-5",[28,16.815,1218,35.799,1347,56.173]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["title/38-6",[94,16.583,1437,55.373]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["title/38-7",[1,10.112,51,22.015,94,14.156]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["title/38-8",[52,14.576,94,9.836,176,22.116,668,21.894,778,16.337,1151,18.417]],["name/38-8",[]],["text/38-8",[]],["component/38-8",[]],["title/38-9",[52,14.576,94,9.836,778,16.337,1151,18.417,1417,25.048,2449,39.032]],["name/38-9",[]],["text/38-9",[]],["component/38-9",[]],["title/38",[28,19.699,90,35.054]],["name/38",[28,0.504,90,0.897]],["text/38",[1,0.669,2,0.278,4,1.59,7,0.58,10,1.572,14,0.652,15,0.771,19,0.822,28,3.217,29,3.371,34,2.109,36,1.037,37,1.729,43,0.742,45,0.537,48,0.682,50,0.858,51,0.318,54,0.397,59,0.712,60,1.588,72,1.905,73,1.925,78,0.611,82,0.648,89,1.433,90,2.931,93,0.634,94,1.457,98,0.866,99,0.478,104,0.762,106,0.88,114,1.022,118,0.437,122,0.445,123,0.815,124,0.598,125,0.422,128,0.643,129,0.559,131,0.554,137,0.812,147,0.405,149,0.456,151,1.076,164,1.452,165,0.604,172,0.349,175,3.172,176,2.344,177,0.416,186,0.408,188,3.011,189,0.447,190,4.299,196,0.937,197,0.611,206,0.473,219,0.889,225,0.745,229,1.125,232,1.915,237,0.423,239,0.829,240,2.579,243,1.845,244,3.568,250,0.804,253,2.21,260,0.415,264,1.005,266,0.445,270,1.312,272,0.688,276,0.655,279,0.697,280,0.397,283,1.01,290,0.604,292,1.691,295,0.961,302,0.7,304,2.148,305,0.837,306,1.852,309,0.743,318,0.781,320,0.533,330,0.998,335,0.425,344,0.413,347,0.504,352,1.003,362,1.003,363,0.423,373,0.775,386,0.672,388,0.775,389,0.684,397,1.093,417,0.92,418,0.785,421,1.345,423,0.478,425,0.759,433,0.762,436,0.518,438,0.445,443,0.598,444,0.585,447,0.643,511,0.467,512,2.165,513,0.585,527,1.646,533,1.035,556,0.762,559,0.478,560,0.854,562,1.018,563,0.574,571,0.91,575,0.449,576,1.628,584,0.812,588,1.274,589,0.541,602,1.371,609,0.511,658,0.495,668,1.535,688,2.138,692,1.415,697,0.968,698,0.541,699,0.518,703,1.837,711,0.554,715,0.643,716,0.943,717,1.738,729,0.396,732,0.949,738,1.434,741,0.39,753,1.575,759,0.545,760,1.345,811,0.975,814,0.812,821,0.866,829,1.897,836,1.32,839,0.829,846,1.081,858,0.369,860,0.652,867,3.595,869,0.521,872,0.611,880,0.926,881,3.369,895,1.454,896,0.696,898,0.521,902,0.893,904,0.696,905,0.618,907,1.289,909,1.454,910,0.545,917,0.652,926,0.812,931,0.684,939,0.88,947,0.564,952,0.507,959,0.71,961,0.55,967,0.443,971,2.693,973,1.026,975,1.091,989,0.521,997,1.265,1004,0.504,1019,0.591,1020,0.652,1021,0.529,1028,1.061,1032,1.732,1044,0.475,1046,0.507,1068,1.371,1072,0.58,1073,1.091,1075,0.92,1081,0.643,1117,1.677,1150,0.533,1153,0.759,1155,3.261,1156,3.001,1158,2.017,1166,1.071,1178,0.71,1185,0.55,1194,0.475,1198,0.463,1218,2.883,1230,1.178,1232,0.58,1234,0.71,1242,0.812,1273,0.48,1303,0.501,1317,1.443,1321,0.618,1341,2.505,1345,0.955,1355,0.585,1363,0.634,1369,1.397,1370,1.529,1376,1.125,1393,0.529,1394,0.71,1399,0.818,1404,0.489,1417,2.086,1418,3.268,1437,9.042,1438,0.785,1439,4.574,1449,1.091,1456,1.31,1461,1.793,1470,0.785,1473,1.102,1478,0.545,1480,1.137,1484,0.652,1485,0.742,1488,0.611,1493,0.634,1498,2.165,1499,0.725,1502,1.287,1504,0.847,1505,3.009,1513,1.397,1515,2.689,1517,0.847,1525,0.762,1530,0.847,1571,0.501,1588,0.684,1593,2.443,1599,1.265,1600,1.01,1652,0.626,1712,0.604,1718,1.764,1759,0.725,1760,0.507,1763,0.71,1768,0.725,1813,0.611,1819,0.604,1870,0.525,1881,0.611,1893,3.112,1935,0.893,1953,0.762,1964,0.847,1984,1.63,2039,0.486,2138,0.847,2174,0.725,2184,0.684,2194,1.793,2201,0.634,2268,0.742,2272,0.489,2273,0.634,2353,0.847,2361,0.812,2375,0.71,2438,0.893,2449,3.715,2450,0.847,2451,0.696,2452,0.725,2453,0.812,2454,0.611,2455,0.963,2456,0.963,2457,0.684,2458,0.847,2459,0.963,2460,0.963,2461,0.963,2462,1.813,2463,0.963,2464,0.963,2465,0.963,2466,0.963,2467,1.434,2468,0.963,2469,7.96,2470,1.529,2471,0.963,2472,2.032,2473,0.812,2474,0.963,2475,0.963,2476,5.719,2477,4.905,2478,1.681,2479,0.963,2480,1.813,2481,0.963,2482,0.785,2483,0.963,2484,2.382,2485,0.785,2486,0.963,2487,0.963,2488,0.963,2489,0.963,2490,0.963,2491,0.893,2492,0.963,2493,1.813,2494,1.813,2495,0.963,2496,2.382,2497,2.382,2498,3.245,2499,1.813,2500,1.813,2501,1.813,2502,1.287,2503,1.813,2504,3.245,2505,1.813,2506,1.813,2507,1.813,2508,0.963,2509,0.963,2510,0.963,2511,0.963,2512,1.813,2513,0.963,2514,0.963,2515,0.893,2516,0.785,2517,0.963,2518,0.785,2519,0.963,2520,0.893,2521,0.963,2522,4.405,2523,0.963,2524,0.963,2525,0.847,2526,0.71,2527,1.813,2528,1.813,2529,0.963,2530,0.963]],["component/38",[1,0.349,2,0.663,18,0.6]],["title/39",[28,23.776]],["name/39",[3,1.478]],["text/39",[1,1.88,2,3.408,10,3.061,18,1.806,28,3.534,32,5.553,34,2.612,56,2.742,60,2.047,73,2.713,90,4.291,95,3.807,111,5.031,190,3.797,225,3.926,228,4.438,243,2.6,332,3.092,334,3.338,347,3.619,504,4.112,528,3.429,575,3.223,754,2.194,768,3.551,783,3.551,791,3.53,858,2.651,867,4.452,961,3.945,1171,4.047,1212,3.978,1213,5.327,1273,3.449,1526,3.768,1911,4.245,1912,5.095]],["component/39",[1,0.349,2,0.663,18,0.6]],["title/40-1",[318,33.599,1200,48.945]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40-2",[48,25.048,95,20.474,318,28.681]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["title/40",[95,23.985,2531,72.341]],["name/40",[95,0.614,2531,1.851]],["text/40",[1,0.979,10,2.068,15,2.126,21,1.602,28,1.262,34,1.367,36,2.017,37,1.17,48,1.879,59,1.17,60,0.883,72,1.289,95,4.016,98,1.425,114,1.186,118,1.351,128,3.334,163,1.661,164,1.333,175,2.374,181,1.715,186,3.2,188,2.101,189,3.503,190,3.355,193,1.777,198,1.794,200,1.602,219,2.613,228,1.914,232,1.065,242,1.345,243,3.422,244,1.139,250,2.216,263,2.126,279,3.235,304,1.661,306,2.713,309,3.959,318,5.031,329,5.61,330,1.158,342,1.208,397,3.212,438,2.307,439,3.115,511,1.447,527,2.411,547,2.297,562,1.674,573,2.599,575,2.33,586,1.937,602,1.591,609,5.774,655,1.455,679,1.914,685,1.745,729,2.652,754,0.946,760,3.952,767,3.347,784,1.403,793,5.531,821,3.083,829,1.284,835,2.197,867,1.39,881,2.466,895,1.687,907,3.237,954,1.581,988,1.55,1044,1.47,1062,4.047,1068,2.668,1075,2.536,1158,2.615,1185,1.701,1198,2.4,1200,7.329,1214,2.358,1232,1.794,1268,2.047,1345,3.977,1349,2.358,1371,2.429,1374,2.154,1418,2.118,1420,4.145,1447,3.381,1463,1.674,1741,4.365,1752,1.891,1758,1.613,1762,1.761,1768,2.244,1833,1.73,1870,1.625,1893,1.891,1929,2.116,1958,2.047,1961,1.701,1990,2.08,2194,5.269,2201,1.962,2532,3.851,2533,5.257,2534,2.621,2535,4.633,2536,2.981,2537,4.997,2538,2.981,2539,2.358,2540,2.981,2541,2.981,2542,2.981,2543,2.981,2544,2.981,2545,2.981,2546,2.981,2547,2.981,2548,2.981,2549,2.981,2550,2.981,2551,2.981,2552,2.764]],["component/40",[1,0.349,2,0.663,18,0.6]],["title/41-1",[356,31.509,754,21.134,1046,35.086]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["title/41-2",[668,31.509,829,28.681,2553,52.682]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["title/41",[80,31.159,1046,41.103]],["name/41",[80,0.797,1046,1.052]],["text/41",[1,1.222,2,1.188,7,2.476,10,2.58,21,3.191,28,1.64,32,2.088,34,2.501,37,1.615,48,2.443,54,3.322,60,3.133,80,4.834,95,3.061,99,2.041,106,1.997,120,1.562,121,1.786,122,1.9,127,1.857,131,4.633,147,1.73,149,1.946,151,2.721,190,1.428,204,3.352,225,1.691,237,1.809,243,2.443,253,1.572,263,2.764,264,3.895,280,1.697,309,2.661,345,2.311,356,1.946,359,2.526,397,1.75,432,4.187,504,2.798,511,1.997,527,1.537,538,2.673,563,2.453,589,2.311,668,3.073,753,1.997,754,2.061,800,3.183,829,1.772,839,1.882,846,2.453,867,1.918,881,2.483,939,3.908,961,2.348,1014,2.553,1019,2.526,1020,2.784,1032,3.468,1046,6.796,1059,1.857,1068,2.196,1122,4.075,1156,3.525,1166,2.43,1178,3.032,1185,2.348,1187,2.367,1418,3.412,1448,2.476,1464,2.196,1471,3.873,1478,2.329,1490,3.254,1544,3.032,1572,2.553,1669,4.396,1696,2.784,1752,4.122,1811,4.276,1859,2.92,1951,3.803,1967,6.023,2036,2.784,2092,3.617,2248,2.871,2553,5.139,2554,3.814,2555,4.114,2556,7.464,2557,4.114,2558,4.114,2559,4.114,2560,2.453,2561,4.114,2562,3.617,2563,3.47,2564,3.352,2565,4.114,2566,4.114,2567,4.114]],["component/41",[1,0.349,2,0.663,18,0.6]],["title/42-1",[21,30.183]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["title/42-2",[28,23.776]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["title/42-3",[800,32.775]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["title/42",[95,23.985,1166,46.091]],["name/42",[3,1.478]],["text/42",[1,0.869,2,0.572,4,0.817,6,1.257,10,0.635,13,1.257,18,0.518,19,0.898,21,2.321,28,3.293,29,0.933,34,2.61,36,2.642,45,1.104,59,1.378,60,0.587,62,2.228,69,1.288,73,3.075,79,1.217,80,0.791,82,1.254,83,1.131,89,0.875,95,3.732,99,0.983,118,1.592,123,0.89,125,1.538,127,0.894,142,1.051,149,0.937,151,0.83,166,0.957,175,1.292,176,0.947,177,2.045,187,1.096,188,1.477,189,0.919,190,0.688,193,1.181,196,2.445,199,2.636,201,0.797,204,1.614,206,0.972,219,0.686,228,1.272,229,1.23,232,1.254,237,0.871,239,0.906,242,0.894,243,2.462,244,2.502,250,2.097,253,2.767,267,3.561,272,1.334,280,0.817,285,1.072,304,1.104,306,3.045,308,1.012,309,0.811,318,1.512,330,2.814,335,0.875,342,0.803,356,0.937,358,1.288,362,1.096,388,0.846,397,0.843,412,0.857,420,1.383,421,1.037,423,0.983,432,1.827,440,1.08,510,1.383,511,0.962,518,1.051,527,2.446,528,0.983,560,0.933,562,1.113,564,1.341,569,1.943,571,0.994,575,1.637,576,3.633,588,0.983,602,2.525,609,4.428,655,0.967,658,1.018,692,1.531,711,1.14,722,0.957,728,2.056,742,1.037,754,1.114,759,1.988,760,3.426,761,1.827,767,3.659,773,1.131,789,0.967,791,2.415,795,1.383,800,1.992,821,1.678,825,1.272,829,0.853,835,1.46,839,0.906,846,2.82,856,0.879,867,0.924,881,3.363,895,1.122,907,3.633,934,2.114,935,1.243,937,1.088,939,1.705,946,1.361,947,1.16,954,1.051,957,1.432,961,1.131,967,0.911,973,3.129,975,1.193,1043,1.257,1075,1.006,1132,1.23,1150,1.096,1156,1.538,1166,1.17,1180,2.282,1185,2.699,1194,0.977,1198,4.011,1209,2.904,1270,1.288,1294,1.527,1303,1.031,1341,1.012,1345,3.449,1346,1.257,1389,5.662,1400,1.567,1418,2.005,1435,1.492,1441,2.094,1473,2.135,1475,2.203,1488,1.257,1490,2.778,1526,1.914,1571,1.827,1597,1.492,1648,1.988,1691,2.135,1695,1.46,1696,5.302,1698,1.288,1699,1.492,1713,1.088,1718,3.93,1758,2.56,1760,1.85,1768,1.492,1799,2.492,1807,1.383,1852,1.08,1868,2.962,1870,1.08,1881,1.257,1893,1.257,1899,1.742,1936,2.538,1957,1.432,1961,1.131,1994,2.179,2194,5.053,2201,1.304,2218,1.341,2234,4.496,2272,1.006,2292,1.406,2305,1.341,2370,1.614,2532,1.527,2533,3.854,2568,1.671,2569,1.742,2570,1.837,2571,1.527,2572,1.837,2573,4.663,2574,5.334,2575,1.981,2576,1.837,2577,1.46,2578,1.742,2579,1.981,2580,3.989,2581,1.981,2582,1.981,2583,1.981,2584,1.527,2585,1.567,2586,3.512,2587,1.981]],["component/42",[1,0.349,2,0.663,18,0.6]],["title/43-1",[10,21.347,318,28.681,2588,45.067]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[2589,82.798]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[2590,87.314]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43-4",[2591,87.314]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["title/43-5",[10,16.512,166,24.875,318,22.185,881,19.689,2588,34.861]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["title/43-6",[94,20.016]],["name/43-6",[]],["text/43-6",[]],["component/43-6",[]],["title/43",[95,23.985,2588,52.795]],["name/43",[95,0.614,2588,1.351]],["text/43",[1,1.104,2,1.552,10,3.046,18,1.059,21,2.058,28,1.357,34,2.342,37,0.916,45,1.3,48,0.877,51,1.34,52,1.693,59,1.591,60,0.691,72,1.752,80,0.932,82,1.447,94,2.291,95,3.928,110,1.698,111,1.229,122,1.077,125,1.021,164,1.043,166,1.126,172,0.845,175,3.869,176,1.115,177,1.009,184,3.341,190,4.651,196,2.095,219,0.807,238,1.797,239,1.067,242,1.053,243,0.877,244,2.778,246,1.404,264,0.912,269,1.093,272,0.886,276,1.942,285,1.262,290,3.371,295,1.237,302,2.074,305,1.077,309,2.201,310,1.63,318,2.765,329,3.119,335,1.789,342,0.945,358,1.516,360,1.48,362,1.29,363,1.026,392,1.48,445,1.062,450,1.628,505,1.191,514,1.164,518,1.237,527,2.008,529,1.151,583,1,609,4.541,688,1.967,703,2.294,715,1.556,753,1.132,767,0.928,776,1.262,778,1.431,789,1.138,800,0.812,821,1.937,829,1.745,846,1.391,867,1.889,881,2.778,931,1.655,939,1.967,971,1.281,974,1.418,988,1.213,1033,1.602,1059,1.053,1109,1.628,1136,1.281,1145,1.254,1146,1.628,1148,1.628,1151,0.928,1153,2.251,1155,4.788,1156,3.49,1158,2.121,1198,3.829,1200,1.463,1304,1.497,1341,1.191,1345,1.229,1363,1.535,1392,1.602,1402,1.48,1404,1.184,1417,2.909,1418,3.081,1420,2.225,1463,2.276,1466,2.463,1473,2.463,1480,1.463,1498,1.556,1599,1.628,1689,1.497,1695,1.719,1742,2.416,1833,1.354,1847,1.535,1853,1.432,2087,1.901,2467,1.845,2482,3.302,2532,4.947,2588,5.795,2589,7.53,2590,3.758,2591,4.982,2592,2.332,2593,1.655,2594,8.336,2595,5.374,2596,6.42,2597,2.929,2598,2.332,2599,2.332,2600,4.053,2601,4.053,2602,2.332,2603,3.758,2604,5.374,2605,2.332,2606,2.332,2607,2.332,2608,2.332,2609,4.053,2610,2.332,2611,2.332,2612,4.053,2613,2.163,2614,1.967,2615,2.332,2616,2.332,2617,2.332,2618,2.332,2619,2.332,2620,2.332,2621,2.332,2622,2.332]],["component/43",[1,0.349,2,0.663,18,0.6]],["title/44-1",[21,25.007,1951,45.679]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[21,21.347,791,34.007,1951,38.992]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44-3",[304,43.484,559,38.703]],["name/44-3",[]],["text/44-3",[]],["component/44-3",[]],["title/44-4",[21,21.347,754,21.134,1951,38.992]],["name/44-4",[]],["text/44-4",[]],["component/44-4",[]],["title/44-5",[668,36.912,2623,65.805]],["name/44-5",[]],["text/44-5",[]],["component/44-5",[]],["title/44-6",[28,19.699,1951,45.679]],["name/44-6",[]],["text/44-6",[]],["component/44-6",[]],["title/44-7",[28,16.815,791,34.007,1951,38.992]],["name/44-7",[]],["text/44-7",[]],["component/44-7",[]],["title/44-8",[28,16.815,754,21.134,1951,38.992]],["name/44-8",[]],["text/44-8",[]],["component/44-8",[]],["title/44-9",[800,27.155,1951,45.679]],["name/44-9",[]],["text/44-9",[]],["component/44-9",[]],["title/44-10",[791,34.007,800,23.18,1951,38.992]],["name/44-10",[]],["text/44-10",[]],["component/44-10",[]],["title/44-11",[304,43.484,559,38.703]],["name/44-11",[]],["text/44-11",[]],["component/44-11",[]],["title/44-12",[754,21.134,800,23.18,1951,38.992]],["name/44-12",[]],["text/44-12",[]],["component/44-12",[]],["title/44-13",[668,36.912,2624,56.384]],["name/44-13",[]],["text/44-13",[]],["component/44-13",[]],["title/44-14",[181,38.326,829,28.681,2624,48.131]],["name/44-14",[]],["text/44-14",[]],["component/44-14",[]],["title/44-15",[95,15.837,243,19.376,729,21.177,829,22.185,2624,37.231]],["name/44-15",[]],["text/44-15",[]],["component/44-15",[]],["title/44-16",[95,14.226,243,17.405,729,19.023,760,24.223,829,19.929,2624,33.444]],["name/44-16",[]],["text/44-16",[]],["component/44-16",[]],["title/44-17",[729,21.177,829,22.185,967,23.679,2624,37.231,2625,43.451]],["name/44-17",[]],["text/44-17",[]],["component/44-17",[]],["title/44-18",[2553,74.491]],["name/44-18",[]],["text/44-18",[]],["component/44-18",[]],["title/44-19",[754,21.134,973,26.598,1046,35.086]],["name/44-19",[]],["text/44-19",[]],["component/44-19",[]],["title/44-20",[754,21.134,1046,35.086,2626,66.6]],["name/44-20",[]],["text/44-20",[]],["component/44-20",[]],["title/44",[95,23.985,2627,61.717]],["name/44",[95,0.614,2627,1.58]],["text/44",[1,0.256,2,0.877,3,0.504,4,0.894,10,0.974,15,0.496,19,1.556,21,3.253,26,0.256,28,2.237,34,1.73,36,2.722,37,0.661,40,0.278,41,2.259,45,0.65,48,1.799,54,0.481,59,1.992,72,2.195,77,1.408,80,4.053,82,1.225,83,0.961,89,0.267,90,0.272,94,0.882,95,3.246,99,0.836,110,0.254,111,0.319,118,0.275,121,0.941,122,1.001,125,2.567,128,1.124,143,0.676,147,0.255,149,0.797,151,1.272,152,0.946,154,2.12,159,0.346,161,0.389,162,1.176,172,0.422,175,0.223,176,0.557,177,0.262,184,0.774,186,1.287,188,1.277,189,0.281,190,4.643,196,0.871,201,0.469,206,0.572,219,1.188,232,1.709,239,0.533,242,1.181,243,1.142,244,1,246,0.365,250,0.747,253,1.585,263,0.496,264,1.751,266,1.585,268,1.014,272,0.23,273,0.739,276,1.098,279,0.648,280,0.481,286,0.399,291,1.59,295,1.149,300,0.494,302,0.836,304,0.65,305,1.001,309,0.888,310,0.244,318,1.308,330,1.18,332,0.271,342,0.682,344,0.5,350,0.865,354,0.223,356,1.025,362,0.645,363,0.266,373,0.926,388,0.926,393,0.323,395,0.688,397,1.114,421,0.317,438,0.778,439,0.813,440,0.918,505,0.595,511,0.294,513,0.368,514,1.081,527,1.897,528,0.3,529,0.299,559,2.518,564,0.789,573,0.606,575,0.543,576,1.313,582,1.142,591,1.592,602,0.323,609,2.016,654,0.665,658,0.311,668,3.689,679,1.391,685,0.682,688,0.294,699,0.325,703,1.227,716,2.784,728,0.355,729,1.076,733,0.423,734,1.024,741,0.472,748,0.372,754,3.35,760,0.61,761,3.05,766,0.296,767,1.651,776,0.631,780,0.618,789,1.277,791,3.982,800,2.48,809,1.317,821,1.452,822,0.813,825,0.748,829,3.069,836,0.865,839,0.771,858,0.447,861,0.289,867,0.785,881,2.331,898,0.328,907,0.304,918,0.467,933,0.351,937,1.668,939,0.566,967,2.199,969,0.306,971,0.925,973,1.37,975,0.701,1019,1.331,1020,0.789,1032,1.157,1044,0.299,1046,4.727,1059,2.159,1068,0.323,1069,0.723,1073,0.365,1104,0.348,1117,0.602,1122,0.38,1132,0.376,1136,0.332,1145,0.325,1153,1.738,1155,4.36,1156,2.567,1158,1.37,1185,0.346,1209,0.372,1215,0.321,1217,0.946,1252,0.757,1256,3.342,1303,0.315,1317,0.655,1321,0.389,1324,1.269,1341,1.551,1345,0.614,1346,0.384,1355,0.368,1363,0.399,1371,0.493,1393,0.332,1402,0.384,1404,3.522,1417,0.631,1418,2.028,1448,0.365,1449,1.014,1452,1.241,1464,1.832,1466,0.368,1473,0.708,1480,0.731,1488,1.927,1493,0.767,1498,1.746,1526,1.87,1527,0.731,1583,0.438,1591,0.748,1647,0.983,1669,4.28,1692,0.842,1695,0.859,1703,0.467,1712,0.731,1713,0.925,1714,1.057,1733,1.67,1742,2.473,1743,0.493,1752,1.927,1761,0.404,1762,0.995,1773,0.467,1799,0.827,1807,0.423,1811,1.723,1819,0.38,1853,0.372,1868,0.511,1870,0.635,1881,0.384,1891,2.849,1924,0.922,1931,0.372,1949,1.566,1951,6.695,1962,0.748,1973,0.456,1981,3.524,2007,0.43,2039,0.306,2083,0.561,2190,1.268,2194,1.512,2215,1.846,2258,0.493,2272,0.592,2277,0.479,2290,0.493,2318,0.532,2331,3.007,2422,1.446,2446,0.493,2553,4.234,2588,2.055,2623,2.207,2624,4.726,2625,5.515,2627,3.281,2628,1.165,2629,1.373,2630,1.421,2631,1.165,2632,1.905,2633,0.606,2634,1.025,2635,0.561,2636,0.606,2637,1.165,2638,1.165,2639,1.025,2640,0.606,2641,1.025,2642,1.025,2643,2.167,2644,2.167,2645,1.165,2646,2.167,2647,0.983,2648,1.025,2649,0.877,2650,1.081,2651,0.532,2652,0.606,2653,1.481,2654,0.606,2655,2.167,2656,1.165,2657,1.165,2658,1.165,2659,0.606,2660,1.165,2661,1.165,2662,0.606,2663,1.165,2664,2.167,2665,0.606,2666,0.606,2667,0.438,2668,0.561,2669,0.606,2670,0.606,2671,0.456,2672,0.606,2673,1.165,2674,0.606,2675,0.606,2676,0.606,2677,0.606,2678,0.606,2679,0.606,2680,1.165,2681,0.606,2682,0.606,2683,0.446,2684,0.606,2685,0.606,2686,0.606,2687,0.606,2688,0.423,2689,0.606,2690,0.606,2691,0.532,2692,1.165,2693,0.561,2694,1.165,2695,1.685,2696,1.512,2697,2.07,2698,1.597,2699,0.606,2700,1.165,2701,0.606,2702,0.606,2703,0.606,2704,0.606,2705,0.606,2706,0.606,2707,0.456,2708,0.606,2709,0.423,2710,1.025,2711,1.165,2712,0.606,2713,1.165,2714,1.165,2715,0.606,2716,0.606,2717,2.301,2718,2.167,2719,1.165,2720,0.606,2721,0.606,2722,0.606,2723,0.606,2724,0.606,2725,1.165,2726,0.606,2727,0.606,2728,0.606,2729,2.301,2730,1.165,2731,0.606,2732,0.606,2733,1.025,2734,0.606,2735,0.606]],["component/44",[1,0.349,2,0.663,18,0.6]],["title/45-1",[21,18.621,54,23.97,754,18.435,967,26.702]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[28,14.668,54,23.97,754,18.435,967,26.702]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45-3",[54,23.97,754,18.435,800,20.22,967,26.702]],["name/45-3",[]],["text/45-3",[]],["component/45-3",[]],["title/45",[54,23.97,668,27.485,754,18.435,967,26.702]],["name/45",[54,0.45,668,0.516,754,0.346,967,0.501]],["text/45",[1,0.232,2,0.441,10,1.226,13,0.969,21,1.965,25,0.864,28,2.538,34,0.418,37,2.406,48,2.885,52,2.416,54,0.63,60,1.132,71,0.66,72,2.9,80,2.185,82,1.366,89,0.674,90,1.718,94,1.163,95,3.151,99,0.757,110,0.64,114,0.608,120,1.788,122,1.283,125,1.217,127,1.726,132,2.085,144,1.208,145,0.98,147,1.608,151,1.602,166,1.342,175,0.562,176,0.73,177,0.66,184,0.702,189,0.708,196,1.436,225,1.572,232,1.682,243,4.633,245,1.572,253,2.343,264,1.087,268,0.919,270,0.78,272,2.328,276,1.702,279,1.069,280,2.257,302,2.786,305,2.526,309,3.142,310,1.118,330,1.486,334,1.846,336,2.627,342,0.619,344,3.096,354,0.562,363,0.671,373,0.652,388,0.652,392,1.763,397,1.627,417,1.41,425,1.164,444,3.726,445,1.265,449,0.845,511,0.741,513,1.689,528,1.897,551,0.91,560,1.308,563,0.91,571,1.394,582,2.481,588,1.378,600,1.125,609,5.533,635,2.055,654,2.182,668,5.461,688,1.349,692,0.666,700,3.512,716,1.989,729,1.142,754,2.434,760,4.593,761,1.989,776,3.318,789,1.356,800,2.133,817,1.673,821,0.73,829,3.304,846,2.808,863,1.515,864,1.494,867,1.295,872,1.763,881,2.091,936,1.177,937,0.838,962,0.871,967,5.353,973,2.185,1044,1.371,1059,0.689,1090,1.084,1153,2.568,1156,1.217,1157,1.005,1158,2.002,1159,1.743,1198,2.262,1201,0.826,1215,0.81,1216,0.864,1324,2.239,1341,1.953,1363,1.005,1371,3.838,1417,4.152,1420,2.1,1449,6.81,1463,2.645,1488,0.969,1498,1.019,1508,1.177,1540,1.549,1571,0.794,1575,2.239,1583,2.764,1648,0.864,1695,4.517,1712,2.399,1742,3.655,1753,1.084,1758,2.549,1762,0.902,1763,4.031,1816,0.992,1833,0.886,1864,1.125,1893,0.969,1904,1.103,1940,0.845,1954,3.546,1989,1.909,2140,1.125,2167,2.588,2168,2.443,2183,1.416,2194,3.287,2201,3.1,2215,2.325,2289,2.198,2331,4.849,2405,2.879,2422,1.854,2451,1.103,2574,4.995,2584,1.177,2623,1.288,2625,1.288,2698,2.048,2736,4.141,2737,2.344,2738,3.362,2739,3.824,2740,2.577,2741,1.527,2742,1.177,2743,1.342,2744,1.416,2745,1.527,2746,1.527,2747,1.527,2748,2.779,2749,1.208,2750,1.208,2751,1.416,2752,1.527,2753,1.244,2754,1.416,2755,2.344]],["component/45",[1,0.349,2,0.663,18,0.6]],["title/46",[72,33.736,1742,46.518]],["name/46",[72,0.863,1742,1.191]],["text/46",[1,0.872,2,1.658,4,0.674,8,0.572,10,1.297,15,1.258,21,0.947,26,1.708,28,0.413,34,2.559,36,2.317,37,0.642,40,0.751,41,1.076,54,1.22,60,0.484,72,5.435,75,0.918,80,1.616,82,2.989,85,0.966,94,0.347,95,3.171,106,1.435,107,1.025,114,1.176,120,2.435,121,0.71,125,0.716,128,1.972,142,0.867,147,1.702,151,2.686,159,3.66,162,5.558,163,0.911,164,1.81,172,2.081,175,0.601,177,1.278,184,1.359,186,0.693,188,0.687,190,3.031,192,0.806,196,2.092,199,1.648,201,1.628,219,1.023,232,3.609,239,0.748,241,0.994,243,0.615,244,1.547,246,1.779,250,0.725,253,1.547,254,0.644,264,1.583,268,0.984,276,0.591,280,1.22,300,1.253,302,0.631,305,2.651,306,2.087,308,0.835,330,1.572,335,0.722,336,2.78,342,1.639,346,0.793,356,1.915,375,1.076,397,0.695,417,2.054,425,1.238,427,1.23,483,2.179,505,0.835,511,0.793,514,1.475,528,0.811,530,0.725,533,0.933,551,0.975,560,0.77,562,1.66,588,1.466,591,1.372,602,1.578,635,0.879,654,4.545,668,1.399,674,0.975,688,1.964,699,1.589,700,1.049,701,0.856,716,2.581,724,1.123,733,4.475,734,1.797,737,1.293,753,0.793,754,2.035,760,0.856,761,0.85,773,1.687,780,0.867,783,1.519,800,0.569,810,0.966,829,2.761,836,2.949,847,1.049,861,1.413,867,0.762,869,0.885,881,1.13,939,2.787,945,1.091,947,0.957,967,1.359,986,1.379,1044,0.806,1046,3.957,1059,0.738,1068,0.873,1072,1.779,1074,1.205,1075,0.83,1153,2.686,1166,0.966,1180,1.921,1185,1.687,1187,2.329,1217,3.93,1234,1.205,1245,1.23,1251,1.921,1256,1.076,1298,1.16,1349,1.293,1399,0.738,1418,1.715,1441,0.975,1464,1.578,1466,0.994,1471,2.413,1475,1.025,1488,3.148,1522,1.379,1524,1.091,1591,1.898,1597,1.23,1683,1.293,1700,1.332,1713,2.725,1727,1.141,1742,7.566,1752,1.876,1757,1.049,1758,0.885,1760,0.861,1777,1.106,1813,1.876,1833,0.949,1870,0.891,1890,1.293,1931,6.334,1932,3.046,1940,0.904,1945,1.332,1961,0.933,2007,1.16,2021,1.332,2031,1.23,2043,1.23,2064,1.437,2156,1.076,2181,1.23,2184,2.098,2215,4.841,2234,3.943,2235,3.046,2244,1.379,2272,0.83,2331,6.621,2332,2.599,2357,2.493,2525,1.437,2560,0.975,2683,1.205,2688,1.141,2707,1.23,2756,1.123,2757,2.956,2758,2.956,2759,1.437,2760,1.635,2761,1.635,2762,2.136,2763,1.635,2764,2.956,2765,2.956,2766,1.635,2767,2.956,2768,1.635,2769,1.635,2770,1.635,2771,1.635,2772,1.635,2773,2.956,2774,1.635,2775,1.635,2776,1.635,2777,1.635,2778,1.635,2779,1.635,2780,1.635,2781,1.635,2782,1.516,2783,1.379,2784,1.379,2785,1.635,2786,3.752,2787,1.635,2788,1.635,2789,1.635,2790,1.635,2791,1.205,2792,1.106,2793,1.635,2794,1.23,2795,1.635,2796,1.635,2797,2.599,2798,1.635,2799,1.635,2800,1.516,2801,1.635,2802,1.635]],["component/46",[1,0.349,2,0.663,18,0.6]],["title/47-1",[1,6.378,46,10.605,52,13.23,778,14.829,823,26.966,1758,22.736,2803,31.621]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47",[823,50.087,1758,42.23]],["name/47",[823,2.195]],["text/47",[1,1.672,2,2.781,10,3.086,34,1.914,50,3.31,52,3.033,60,3.26,166,3.378,188,4.049,192,5.431,201,2.814,236,3.686,244,2.674,245,2.876,254,4.898,300,2.965,419,3.787,421,3.662,504,3.013,505,3.573,529,3.452,536,3.961,569,3.87,655,3.414,749,3.262,778,3.399,816,6.944,823,7.614,982,3.961,1099,3.51,1145,3.761,1362,4.061,1365,5.688,1571,3.639,1580,4.806,1758,5.959,1858,4.734,2259,5.701,2803,7.249,2804,8.121,2805,6.997,2806,6.997]],["component/47",[1,0.349,2,0.663,18,0.6]],["title/48",[749,43.902]],["name/48",[3,1.478]],["text/48",[1,1.843,2,3.506,10,3.206,28,2.526,34,2.024,52,2.33,54,3.053,60,2.962,62,7.19,94,1.573,95,3.075,154,5.163,158,5.347,225,3.041,330,2.875,332,3.31,528,3.67,560,3.483,575,3.449,749,4.664,767,2.945,768,3.801,778,2.612,816,5.857,823,6.422,844,5.501,846,4.411,858,2.837,1004,3.873,1199,4.75,1212,4.258,1213,7.709,1395,5.853,1435,5.57,1758,5.414,2272,5.752,2803,5.57,2807,5.853]],["component/48",[1,0.349,2,0.663,18,0.6]],["title/49-1",[318,33.599,2588,52.795]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[291,40.838,1951,45.679]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49",[95,23.985,2272,39.602]],["name/49",[95,0.614,2272,1.014]],["text/49",[1,0.728,2,2.113,10,3.757,15,2.04,21,2.844,28,2.507,34,2.427,59,1.882,60,1.42,62,5.63,73,1.882,80,2.922,95,4.134,106,4.819,107,4.59,129,2.783,181,2.759,186,2.032,227,2.807,243,2.752,250,2.126,253,1.833,263,3.113,264,1.876,270,5.754,276,1.733,279,1.845,291,5.197,300,2.032,305,2.214,318,3.151,330,1.863,354,1.765,388,2.048,425,2.009,435,3.736,438,3.379,439,3.533,514,2.392,530,2.126,583,3.138,609,2.543,616,3.294,688,2.327,703,2.715,711,2.759,743,2.715,754,1.522,761,3.806,766,2.34,780,2.543,791,2.448,818,4.044,821,2.292,839,2.194,846,2.859,881,1.833,899,2.859,907,2.406,933,2.783,1073,2.886,1117,2.478,1198,3.515,1200,3.008,1289,3.403,1303,2.494,1760,2.526,1833,2.783,1852,3.989,1961,4.176,2272,5.039,2482,3.907,2588,7.625,2589,6.434,2594,4.044,2651,4.216,2808,8.873,2809,4.795,2810,4.216]],["component/49",[1,0.349,2,0.663,18,0.6]],["title/50-1",[2811,82.798]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50-2",[1,10.112,51,22.015,94,14.156]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["title/50-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["title/50-4",[1224,74.491]],["name/50-4",[]],["text/50-4",[]],["component/50-4",[]],["title/50-5",[1,7.822,51,17.029,94,10.95,140,24.134,415,31.01]],["name/50-5",[]],["text/50-5",[]],["component/50-5",[]],["title/50-6",[1,8.821,51,19.204,94,12.348,415,34.97]],["name/50-6",[]],["text/50-6",[]],["component/50-6",[]],["title/50-7",[52,14.576,94,9.836,140,21.679,415,27.856,778,16.337,1151,18.417]],["name/50-7",[]],["text/50-7",[]],["component/50-7",[]],["title/50-8",[52,16.227,94,10.95,415,31.01,778,18.187,1151,20.502]],["name/50-8",[]],["text/50-8",[]],["component/50-8",[]],["title/50",[844,45.71]],["name/50",[844,1.659]],["text/50",[1,1.135,2,0.705,4,0.547,10,1.088,21,0.425,28,0.617,34,1.153,36,2.674,45,1.361,48,0.499,51,0.807,52,1.554,72,0.573,80,1.356,94,2.443,95,3.329,98,0.634,99,0.658,114,1.964,118,1.107,121,0.576,133,2.188,151,0.555,158,3.047,166,2.036,175,2.254,190,4.918,192,1.205,198,0.798,227,1.43,232,0.474,243,1.277,250,1.083,253,1.297,264,0.955,272,2.84,273,0.841,276,1.524,279,0.51,280,0.547,293,1.812,302,2.557,305,1.128,309,1.727,310,0.533,330,0.515,344,0.569,352,1.351,354,1.249,360,1.549,373,0.566,391,0.851,415,2.538,425,1.023,527,1.844,529,1.205,568,0.873,583,0.569,594,0.977,635,1.825,688,0.644,691,1.56,692,1.838,694,0.763,729,0.545,749,1.582,760,0.694,761,0.69,763,0.814,764,0.832,778,1.742,783,0.681,800,0.461,822,0.925,826,0.685,828,2.179,844,4.803,858,0.936,859,0.925,869,0.718,881,1.886,910,0.751,952,0.698,964,1.167,969,0.669,971,2.315,979,1.568,1019,0.814,1020,0.897,1032,2.251,1068,0.708,1075,1.239,1099,2.475,1136,0.728,1146,2.369,1150,0.733,1153,2.963,1155,3.573,1156,2.681,1181,1.022,1194,0.654,1207,0.977,1224,6.714,1252,2.206,1256,0.873,1260,1.229,1261,1.229,1262,0.977,1263,0.925,1264,1.229,1265,1.118,1266,1.229,1303,0.69,1346,0.841,1356,1.022,1404,3.109,1417,0.718,1418,2.998,1469,1.568,1471,1.456,1473,0.806,1475,0.832,1478,0.751,1480,0.832,1575,0.776,1692,0.958,1698,0.862,1708,1.652,1713,1.864,1803,1.704,1852,0.723,1881,0.841,1891,0.911,1909,0.862,1959,0.911,2008,5.166,2009,3.436,2014,1.022,2074,1.118,2201,0.873,2272,0.673,2470,1.118,2683,4.514,2688,0.925,2696,2.943,2811,2.985,2812,1.326,2813,2.501,2814,4.694,2815,10.553,2816,3.91,2817,1.765,2818,1.229,2819,0.832,2820,4.934,2821,1.049,2822,4.934,2823,4.893,2824,1.326,2825,1.326,2826,3.394,2827,3.394,2828,3.394,2829,1.326,2830,2.442,2831,1.326,2832,3.394,2833,3.394,2834,2.442,2835,1.326,2836,1.8,2837,2.442,2838,3.557,2839,2.442,2840,2.264,2841,2.442,2842,2.442,2843,2.442,2844,1.326,2845,1.326,2846,1.326,2847,2.442,2848,2.442,2849,2.442,2850,2.442,2851,7.585,2852,3.91,2853,6.959,2854,4.217,2855,4.217,2856,5.565,2857,7.846,2858,1.326,2859,1.326,2860,1.326,2861,1.326,2862,1.326,2863,4.217,2864,6.624,2865,4.217,2866,4.217,2867,1.326,2868,2.147,2869,2.766,2870,4.934,2871,4.934,2872,3.394,2873,2.442,2874,5.565,2875,3.394,2876,1.326,2877,1.99,2878,2.442,2879,1.326,2880,1.326]],["component/50",[1,0.349,2,0.663,18,0.6]],["title/51-1",[28,16.815,816,38.992,2807,52.682]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["title/51-2",[844,45.71]],["name/51-2",[]],["text/51-2",[]],["component/51-2",[]],["title/51",[28,16.815,749,31.049,858,25.537]],["name/51",[858,1.311]],["text/51",[1,0.462,10,1.63,15,2.163,28,2.968,29,2.394,34,2.327,60,2.265,75,1.709,80,1.215,95,0.936,99,1.51,114,2.606,118,1.38,147,1.28,149,1.44,151,1.275,192,1.501,226,1.85,232,3.284,279,1.171,286,2.003,293,1.625,295,1.614,300,2.155,305,3.532,309,2.082,329,1.766,330,1.976,342,2.06,345,1.709,360,4.853,363,3.363,373,2.172,417,2.581,425,4.285,438,1.405,445,1.386,521,3.155,527,2.447,530,1.35,575,3.566,576,3.285,588,1.51,688,1.477,692,1.327,711,1.751,729,2.692,741,3.099,749,3.566,750,1.671,761,1.583,784,1.433,789,1.485,800,1.059,811,1.636,816,5.714,820,1.782,823,1.954,829,1.311,832,2.676,833,2.16,836,1.563,837,1.603,839,2.326,844,4.737,858,3.923,859,3.548,860,5.757,861,3.129,869,1.647,933,1.766,955,5.162,967,1.399,1059,2.295,1071,2.124,1099,2.551,1182,2.567,1198,1.462,1216,4.331,1221,1.696,1268,2.09,1341,3.906,1385,2.345,1418,2.775,1420,1.671,1441,1.815,1571,3.979,1575,2.977,1683,2.407,1689,1.954,1692,2.199,1712,3.19,1713,1.671,1746,4.431,1758,3.544,1816,3.304,1843,2.09,1857,2.345,1909,3.304,1956,4.498,2046,1.931,2099,2.16,2137,2.291,2147,3.675,2272,2.581,2502,5.429,2749,6.051,2750,2.407,2792,2.059,2807,6.051,2813,3.747,2814,2.567,2819,1.909,2838,2.567,2868,4.471,2881,2.676,2882,4.143,2883,2.822,2884,4.143,2885,5.085,2886,3.043,2887,4.714,2888,5.085,2889,3.043,2890,3.043,2891,3.043,2892,4.022,2893,4.714,2894,3.043,2895,2.822,2896,1.889,2897,2.822,2898,2.243,2899,2.48,2900,2.059,2901,2.291,2902,1.978,2903,3.043,2904,2.822]],["component/51",[1,0.349,2,0.663,18,0.6]],["title/52-1",[1847,51.359,2905,56.384]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["title/52-2",[1,10.112,51,22.015,94,14.156]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["title/52-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["title/52-4",[2906,87.314]],["name/52-4",[]],["text/52-4",[]],["component/52-4",[]],["title/52-5",[45,43.484,1847,51.359]],["name/52-5",[]],["text/52-5",[]],["component/52-5",[]],["title/52-6",[1,10.112,51,22.015,94,14.156]],["name/52-6",[]],["text/52-6",[]],["component/52-6",[]],["title/52-7",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/52-7",[]],["text/52-7",[]],["component/52-7",[]],["title/52-8",[71,40.719]],["name/52-8",[]],["text/52-8",[]],["component/52-8",[]],["title/52-9",[243,29.344,2905,56.384]],["name/52-9",[]],["text/52-9",[]],["component/52-9",[]],["title/52-10",[2332,68.6,2905,56.384]],["name/52-10",[]],["text/52-10",[]],["component/52-10",[]],["title/52-11",[10,21.347,1132,41.328,2905,48.131]],["name/52-11",[]],["text/52-11",[]],["component/52-11",[]],["title/52-12",[1,10.112,51,22.015,94,14.156]],["name/52-12",[]],["text/52-12",[]],["component/52-12",[]],["title/52-13",[52,14.576,94,9.836,778,16.337,898,25.048,1151,18.417,1417,25.048]],["name/52-13",[]],["text/52-13",[]],["component/52-13",[]],["title/52-14",[52,14.576,94,9.836,444,28.131,778,16.337,1151,18.417,1417,25.048]],["name/52-14",[]],["text/52-14",[]],["component/52-14",[]],["title/52-15",[1226,74.491]],["name/52-15",[]],["text/52-15",[]],["component/52-15",[]],["title/52-16",[94,20.016]],["name/52-16",[]],["text/52-16",[]],["component/52-16",[]],["title/52-17",[1230,61.199]],["name/52-17",[]],["text/52-17",[]],["component/52-17",[]],["title/52-18",[1231,79.426]],["name/52-18",[]],["text/52-18",[]],["component/52-18",[]],["title/52-19",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/52-19",[]],["text/52-19",[]],["component/52-19",[]],["title/52-20",[94,16.583,1072,46.963]],["name/52-20",[]],["text/52-20",[]],["component/52-20",[]],["title/52-21",[63,79.426]],["name/52-21",[]],["text/52-21",[]],["component/52-21",[]],["title/52-22",[291,49.291]],["name/52-22",[]],["text/52-22",[]],["component/52-22",[]],["title/52-23",[1,10.112,51,22.015,94,14.156]],["name/52-23",[]],["text/52-23",[]],["component/52-23",[]],["title/52-24",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/52-24",[]],["text/52-24",[]],["component/52-24",[]],["title/52-25",[36,31.492,62,49.501]],["name/52-25",[]],["text/52-25",[]],["component/52-25",[]],["title/52-26",[21,30.183]],["name/52-26",[]],["text/52-26",[]],["component/52-26",[]],["title/52-27",[1,11.846,46,19.699]],["name/52-27",[]],["text/52-27",[]],["component/52-27",[]],["title/52-28",[1,10.112,46,16.815,140,31.2]],["name/52-28",[]],["text/52-28",[]],["component/52-28",[]],["title/52-29",[28,23.776]],["name/52-29",[]],["text/52-29",[]],["component/52-29",[]],["title/52-30",[28,19.699,858,29.916]],["name/52-30",[]],["text/52-30",[]],["component/52-30",[]],["title/52-31",[28,16.815,29,31.353,858,25.537]],["name/52-31",[]],["text/52-31",[]],["component/52-31",[]],["title/52-32",[28,16.815,824,39.344,858,25.537]],["name/52-32",[]],["text/52-32",[]],["component/52-32",[]],["title/52-33",[25,53.311]],["name/52-33",[]],["text/52-33",[]],["component/52-33",[]],["title/52-34",[1358,51.334]],["name/52-34",[]],["text/52-34",[]],["component/52-34",[]],["title/52-35",[1215,49.938]],["name/52-35",[]],["text/52-35",[]],["component/52-35",[]],["title/52-36",[800,32.775]],["name/52-36",[]],["text/52-36",[]],["component/52-36",[]],["title/52-37",[800,27.155,945,52.054]],["name/52-37",[]],["text/52-37",[]],["component/52-37",[]],["title/52-38",[1,11.846,46,19.699]],["name/52-38",[]],["text/52-38",[]],["component/52-38",[]],["title/52-39",[1,10.112,46,16.815,140,31.2]],["name/52-39",[]],["text/52-39",[]],["component/52-39",[]],["title/52-40",[29,36.73,800,27.155]],["name/52-40",[]],["text/52-40",[]],["component/52-40",[]],["title/52-41",[1,11.846,46,19.699]],["name/52-41",[]],["text/52-41",[]],["component/52-41",[]],["title/52-42",[1,10.112,46,16.815,140,31.2]],["name/52-42",[]],["text/52-42",[]],["component/52-42",[]],["title/52-43",[800,23.18,2907,50.136,2908,44.434]],["name/52-43",[]],["text/52-43",[]],["component/52-43",[]],["title/52-44",[1,11.846,46,19.699]],["name/52-44",[]],["text/52-44",[]],["component/52-44",[]],["title/52-45",[1,10.112,46,16.815,140,31.2]],["name/52-45",[]],["text/52-45",[]],["component/52-45",[]],["title/52-46",[748,47.91,800,27.155]],["name/52-46",[]],["text/52-46",[]],["component/52-46",[]],["title/52-47",[95,20.474,754,21.134,1819,41.78]],["name/52-47",[]],["text/52-47",[]],["component/52-47",[]],["title/52",[62,49.501,432,40.58]],["name/52",[62,2.169]],["text/52",[0,0.809,1,1.228,2,2.17,3,0.471,4,1.621,10,1.94,15,2.055,18,0.531,19,0.494,20,0.35,21,2.409,25,2.573,26,0.46,28,2.223,29,1.159,32,0.286,34,1.821,36,0.821,37,0.221,40,0.259,46,1.287,48,1.597,51,0.187,52,1.02,54,2.104,56,0.224,59,1.542,60,0.959,62,7.39,63,3.314,71,0.244,72,0.682,73,0.619,80,3.855,81,0.358,82,0.563,85,0.643,86,2.531,89,0.481,90,0.254,94,2.052,95,2.444,98,0.27,99,0.782,106,0.766,107,0.99,109,0.376,110,0.236,111,0.297,114,1.809,115,0.4,116,1.562,118,0.256,122,0.503,123,0.709,124,0.979,125,1.253,133,0.699,134,0.416,140,0.264,144,0.861,147,0.855,149,0.962,151,1.199,158,0.787,164,1.28,166,0.982,167,0.34,171,0.293,172,0.737,175,2.06,176,0.754,177,0.682,184,2.344,186,1.799,189,1.97,190,3.812,192,0.778,200,1.093,201,1.151,202,1.083,206,0.998,207,0.371,209,0.632,219,2.369,225,1.177,226,0.343,229,0.35,232,0.389,236,0.297,237,1.258,239,1.31,242,0.255,243,1.71,244,1.737,246,3.069,251,1.429,253,0.603,263,1.378,264,0.963,266,0.939,269,0.51,272,2.731,276,2.187,279,0.607,280,0.839,285,0.305,291,0.57,295,0.299,300,0.669,302,0.95,305,1.137,306,0.237,310,0.227,317,0.336,329,0.327,330,1.112,335,1.735,341,1.151,342,0.229,345,1.819,347,0.295,350,0.29,354,0.748,356,0.267,359,0.346,363,0.479,373,1.051,386,0.394,388,1.051,393,0.842,395,0.333,397,0.463,417,0.286,419,1.946,423,0.28,425,0.852,432,0.566,436,2.878,510,0.394,511,0.528,514,0.543,517,0.35,518,0.299,519,0.371,527,1.07,528,0.782,529,1.214,530,1.091,533,1.161,536,0.616,551,0.336,560,0.266,561,0.655,562,0.317,563,1.213,564,0.382,568,0.371,580,0.292,582,0.574,583,1.056,588,0.28,591,0.505,601,2.01,602,0.301,609,0.577,610,3.108,623,0.319,635,1.741,655,2.072,658,0.29,692,0.246,700,0.362,701,0.295,703,0.616,704,0.314,716,2.364,722,0.272,724,0.388,729,0.232,748,0.669,749,0.263,750,1.779,753,0.987,754,1.442,759,0.319,760,0.826,761,2.785,763,0.669,766,0.77,767,1.289,771,0.616,774,1.003,776,0.305,778,1.011,780,0.577,789,2.613,790,0.336,791,2.734,800,2.719,806,1.117,809,0.343,821,0.27,824,0.932,829,1.957,834,1.221,836,1.47,844,0.274,846,0.941,850,0.82,855,0.669,856,0.25,858,1.507,867,2.251,870,0.333,877,0.362,880,0.288,881,1.502,895,3.661,898,1.101,899,0.941,907,0.546,910,0.616,918,1.567,931,0.4,934,0.34,937,0.31,939,1.572,945,1.642,952,0.831,954,0.299,962,0.621,963,0.801,964,0.27,973,2.139,974,0.343,979,0.362,988,0.82,989,0.305,1008,1.47,1032,0.301,1043,0.691,1059,1.292,1062,0.354,1068,0.301,1075,0.801,1099,0.283,1117,0.292,1130,0.34,1132,0.35,1138,0.476,1148,0.76,1150,0.602,1151,0.98,1153,0.456,1155,3.276,1156,2.451,1157,0.371,1178,0.416,1187,1.17,1194,1.412,1198,1.556,1213,0.435,1215,1.518,1216,0.893,1226,4.788,1232,0.34,1234,1.814,1243,0.839,1256,1.038,1298,0.4,1303,0.293,1317,2.385,1324,0.637,1325,0.382,1338,0.46,1355,0.343,1358,1.959,1399,0.712,1402,0.358,1404,1.453,1417,1.549,1418,1.043,1420,0.31,1428,1.12,1446,0.35,1479,0.496,1484,0.737,1493,0.371,1521,0.435,1526,1.109,1540,0.607,1541,0.394,1571,2.512,1575,0.33,1599,0.76,1600,0.314,1727,1.101,1731,1.083,1758,1.332,1760,0.297,1810,0.435,1818,0.496,1819,3.03,1841,1.045,1843,1.083,1847,1.038,1852,0.593,1858,0.382,1870,0.308,1909,0.367,1922,0.446,1931,0.346,1936,0.408,1940,1.583,1951,0.637,1959,0.388,1973,0.425,1982,0.46,1984,2.694,2010,4.827,2018,0.425,2031,1.531,2033,0.371,2088,0.773,2129,0.918,2156,1.038,2167,0.737,2215,0.662,2234,0.388,2272,0.553,2273,0.371,2305,0.382,2391,0.4,2425,0.446,2535,0.523,2574,0.887,2588,0.382,2597,0.787,2603,1.009,2688,1.101,2693,0.523,2738,0.496,2794,0.425,2810,0.496,2902,0.708,2905,7.828,2907,0.425,2908,0.376,2909,0.416,2910,1.716,2911,0.564,2912,1.463,2913,0.564,2914,1.886,2915,2.461,2916,1.089,2917,1.089,2918,0.564,2919,1.089,2920,2.654,2921,0.46,2922,0.564,2923,0.564,2924,1.886,2925,1.463,2926,0.496,2927,2.034,2928,1.089,2929,0.476,2930,0.408,2931,0.46,2932,0.564,2933,0.564,2934,0.523,2935,0.564,2936,3.239,2937,0.564,2938,0.564,2939,0.564,2940,0.564,2941,0.564,2942,0.564,2943,0.564,2944,0.564,2945,0.564,2946,0.523,2947,0.564,2948,0.564,2949,0.564,2950,0.564,2951,2.461,2952,0.564,2953,0.564,2954,0.564,2955,0.564,2956,0.46,2957,0.564,2958,0.564,2959,0.564,2960,1.009,2961,0.476,2962,0.496,2963,0.564,2964,0.425,2965,0.564,2966,0.564,2967,0.564,2968,0.564,2969,0.564,2970,0.564,2971,0.564,2972,0.564,2973,0.564,2974,0.564,2975,0.564,2976,0.564,2977,0.564,2978,0.46,2979,0.564,2980,0.564,2981,0.564,2982,1.089,2983,1.089,2984,1.089,2985,1.089,2986,1.089,2987,0.887,2988,0.564,2989,0.564,2990,0.564,2991,1.089,2992,0.564,2993,0.564,2994,1.089,2995,0.564,2996,0.564,2997,0.564,2998,1.33,2999,1.089,3000,0.523,3001,0.446,3002,0.564,3003,0.564,3004,0.564,3005,0.523,3006,0.564,3007,0.496,3008,0.4,3009,0.564,3010,1.577,3011,1.089,3012,0.564,3013,0.564,3014,0.564,3015,1.089,3016,0.564,3017,1.089,3018,0.564,3019,0.564,3020,0.523,3021,0.435,3022,0.564,3023,0.861,3024,0.564,3025,0.435,3026,0.564,3027,1.089,3028,0.564,3029,0.564,3030,0.564,3031,0.564]],["component/52",[1,0.349,2,0.663,18,0.6]],["title/53-1",[754,21.134,800,23.18,1153,27.899]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["title/53-2",[1,10.112,51,22.015,94,14.156]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["title/53-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/53-3",[]],["text/53-3",[]],["component/53-3",[]],["title/53",[94,20.016]],["name/53",[94,0.727]],["text/53",[1,0.53,34,1.558,36,2.3,45,1.947,52,1.1,80,3.324,82,1.248,94,1.769,95,1.074,106,1.696,151,1.463,164,2.549,175,2.097,184,1.606,190,4.306,232,2.035,243,3.448,250,1.549,263,1.486,264,1.367,272,2.74,276,3.008,279,2.192,280,2.977,302,1.348,305,1.613,309,1.431,330,2.803,335,1.542,341,3.225,344,1.498,350,1.795,363,1.536,397,1.486,412,1.511,505,1.784,527,2.129,544,2.763,573,1.817,575,2.656,602,1.865,668,3.938,688,2.765,729,1.436,741,1.415,754,3.989,760,4.357,761,1.817,766,1.705,767,1.39,778,1.233,783,1.795,791,1.784,800,4.678,829,4.466,836,1.795,855,2.145,867,2.656,869,3.084,907,1.753,927,1.773,939,2.765,967,1.606,988,4.329,997,5.035,1059,1.577,1068,1.865,1146,3.976,1153,4.119,1155,3.79,1156,4.014,1185,1.994,1199,2.243,1303,1.817,1321,2.243,1341,1.784,1345,1.84,1392,2.399,1399,1.577,1417,1.891,1418,2.415,1426,2.946,1446,2.168,1478,1.978,1480,2.191,1571,1.817,1699,2.63,1758,1.891,1773,2.692,1853,2.145,1854,5.009,1856,3.239,2697,7.252,2698,6.134,2931,2.846,3007,5.009,3025,2.692,3032,2.946,3033,10.115,3034,5.283,3035,3.493,3036,3.239,3037,3.239]],["component/53",[1,0.349,2,0.663,18,0.6]],["title/54-1",[800,27.155,1667,50.087]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["title/54-2",[800,27.155,1526,42.531]],["name/54-2",[]],["text/54-2",[]],["component/54-2",[]],["title/54-3",[3038,76.733]],["name/54-3",[]],["text/54-3",[]],["component/54-3",[]],["title/54-4",[1,10.112,51,22.015,94,14.156]],["name/54-4",[]],["text/54-4",[]],["component/54-4",[]],["title/54-5",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/54-5",[]],["text/54-5",[]],["component/54-5",[]],["title/54-6",[3039,79.426]],["name/54-6",[]],["text/54-6",[]],["component/54-6",[]],["title/54-7",[1,10.112,51,22.015,94,14.156]],["name/54-7",[]],["text/54-7",[]],["component/54-7",[]],["title/54-8",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/54-8",[]],["text/54-8",[]],["component/54-8",[]],["title/54",[881,35.991]],["name/54",[881,1.307]],["text/54",[1,1.76,4,1.279,10,2.481,34,2.117,36,1.252,37,1.217,40,2.373,44,2.241,45,2.878,46,2.17,49,1.755,52,1.627,60,0.918,80,1.238,82,1.107,94,2.555,95,0.953,99,1.538,106,2.507,107,1.945,110,1.299,120,1.177,164,2.31,185,2.686,190,4.342,225,2.123,232,1.107,237,2.918,239,1.418,243,1.166,247,1.69,253,1.185,254,1.221,263,1.319,268,3.108,272,1.177,279,1.193,300,1.314,302,2.561,332,1.387,335,2.28,350,1.593,354,1.141,388,1.325,397,1.319,412,1.341,421,1.623,432,1.613,449,2.856,592,1.885,602,1.655,655,2.52,679,1.99,692,1.352,741,2.092,754,2.456,778,1.823,783,1.593,791,5.264,800,4.66,821,2.468,825,1.99,829,2.858,837,1.633,856,2.943,881,2.958,909,1.755,939,1.505,948,2.285,988,3.451,1024,1.849,1037,2.098,1059,2.995,1068,2.757,1075,1.574,1146,2.164,1153,2.163,1155,3.524,1156,2.261,1222,4.368,1243,5.114,1255,2.285,1272,2.098,1273,1.547,1317,2.9,1399,1.399,1404,1.574,1417,1.678,1418,2.189,1526,5.365,1571,1.613,1667,4.968,1689,1.99,1713,1.702,1717,2.041,1727,2.164,1731,2.13,1740,2.098,1758,1.678,1984,3.276,2001,2.453,2007,3.665,2009,2.526,2010,3.979,2011,2.334,2013,2.389,2086,2.615,2101,2.389,2121,5.597,2123,4.208,2688,3.604,2907,2.334,2908,2.069,3021,2.389,3038,6.306,3039,6.527,3040,2.241,3041,3.101,3042,3.101,3043,3.101,3044,3.101,3045,5.164,3046,3.101,3047,3.101,3048,2.875,3049,3.101,3050,3.101]],["component/54",[1,0.349,2,0.663,18,0.6]],["title/55",[800,32.775]],["name/55",[3,1.478]],["text/55",[1,1.918,2,3.402,10,2.785,11,4.153,18,1.58,32,5.163,34,2.782,56,3.446,60,1.79,94,1.847,95,3.884,109,4.034,111,4.578,190,3.016,201,2.432,225,4.571,228,5.579,232,3.104,243,2.274,332,2.705,334,2.92,362,3.345,440,3.296,504,2.604,528,3,575,2.819,754,1.919,768,3.106,783,3.106,791,3.088,800,4.708,867,4.051,881,2.311,886,6.009,909,3.423,960,4.927,961,3.451,969,3.051,1166,3.572,1171,3.54,1180,3.93,1208,3.836,1212,3.48,1269,4.783,1271,7.219,1273,3.016,1911,3.713,1912,4.456,1913,5.607]],["component/55",[1,0.349,2,0.663,18,0.6]],["title/56-1",[800,29.382,1526,31.669,1667,37.295]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[350,47.803,800,23.18]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56-3",[800,23.18,2907,50.136,2908,44.434]],["name/56-3",[]],["text/56-3",[]],["component/56-3",[]],["title/56-4",[748,47.91,800,27.155]],["name/56-4",[]],["text/56-4",[]],["component/56-4",[]],["title/56-5",[29,36.73,800,27.155]],["name/56-5",[]],["text/56-5",[]],["component/56-5",[]],["title/56-6",[29,31.353,159,38.009,3051,61.751]],["name/56-6",[]],["text/56-6",[]],["component/56-6",[]],["title/56-7",[2156,61.989]],["name/56-7",[]],["text/56-7",[]],["component/56-7",[]],["title/56-8",[80,31.159,861,37.286]],["name/56-8",[]],["text/56-8",[]],["component/56-8",[]],["title/56",[791,39.838,800,27.155]],["name/56",[791,1.02,800,0.695]],["text/56",[0,0.342,1,0.685,2,0.471,4,0.672,6,1.034,10,1.127,11,0.591,15,0.366,21,0.276,28,0.744,29,4.259,34,2.431,36,1.419,37,1.157,40,0.395,45,0.908,46,0.217,47,1.473,48,1.109,50,1.098,51,0.539,57,0.647,58,1.227,59,1.38,71,1.275,72,0.372,77,1.059,78,0.546,80,1.802,81,0.546,82,0.582,85,0.508,94,0.183,95,2.569,98,0.779,106,0.417,109,0.574,110,2.545,112,1.511,114,0.648,115,0.61,118,0.39,121,1.752,122,0.752,125,1.016,133,0.381,135,0.437,140,0.403,141,0.574,142,0.456,149,0.407,159,0.93,161,0.552,164,1.319,175,1.085,176,0.779,177,0.372,181,0.938,184,0.749,190,4.13,194,0.663,198,0.518,203,0.508,206,5.004,219,1.02,225,0.354,227,0.504,235,0.61,237,1.775,239,0.393,241,0.523,242,1.33,243,3.143,244,1.127,250,1.559,251,0.946,253,0.887,254,0.339,263,0.693,264,1.765,266,1.361,270,1.185,272,1.335,276,0.311,279,1.134,280,1.665,295,0.456,300,0.691,302,0.629,306,1.24,309,0.352,318,1.269,330,1.145,332,0.729,335,1.553,341,0.487,342,2.169,344,0.699,347,0.853,350,1.514,354,0.854,356,0.407,373,1.259,388,0.696,390,0.647,393,0.87,397,0.366,412,1.275,417,0.437,423,1.744,435,0.439,437,0.847,438,1.624,439,1.423,440,0.469,449,0.901,462,0.582,504,0.37,505,0.439,511,0.417,512,0.574,513,0.99,514,0.813,527,1.314,529,1.454,534,0.552,536,0.487,546,0.701,560,0.767,561,0.518,562,0.483,573,0.447,575,1.374,576,2.686,580,0.445,582,0.858,583,0.369,584,0.725,591,0.399,602,0.87,642,0.954,648,0.574,654,0.93,655,1.716,668,0.771,688,1.127,692,0.375,699,0.462,701,0.853,710,2.113,716,0.847,722,0.415,729,0.354,734,0.523,741,0.348,743,1.669,746,1.967,748,4.115,754,2.82,759,0.922,760,1.841,761,0.447,763,0.528,766,0.42,767,0.342,773,0.491,776,0.466,784,0.767,789,2.416,790,3.623,791,1.796,793,0.523,800,4.62,805,1.397,810,0.508,811,0.462,820,1.359,821,0.779,824,2.077,825,0.552,829,2.467,834,1.152,836,0.442,841,0.725,847,0.552,856,1.559,861,1.681,867,0.401,872,1.034,880,0.439,881,1.725,885,0.61,886,0.508,889,0.546,933,1.347,934,0.518,937,0.472,939,3.752,945,1.087,946,0.591,947,0.504,954,0.456,956,0.469,967,1.616,969,0.434,974,3.255,988,3.328,989,0.466,1004,0.45,1019,0.528,1020,0.582,1021,0.472,1030,0.462,1033,0.591,1037,0.582,1044,0.424,1046,0.858,1059,1.587,1069,3.555,1075,0.437,1100,0.582,1125,0.68,1132,0.534,1136,0.472,1150,0.476,1153,0.973,1155,2.609,1156,1.016,1171,0.504,1194,0.424,1196,0.513,1200,0.54,1212,1.336,1217,2.534,1221,2.25,1240,0.647,1255,0.634,1271,0.61,1272,0.582,1303,1.207,1324,0.954,1344,1.046,1354,0.513,1374,0.622,1394,1.201,1399,1.822,1402,0.546,1404,0.437,1411,0.725,1418,3.276,1446,0.534,1449,0.518,1465,0.701,1471,0.513,1480,0.54,1488,0.546,1493,1.073,1498,0.574,1526,2.2,1571,0.847,1667,1.892,1669,0.582,1696,1.103,1698,2.285,1714,0.54,1717,0.566,1718,0.591,1722,1.156,1727,0.6,1740,1.103,1742,0.513,1749,1.034,1758,0.466,1763,1.201,1777,0.582,1796,0.908,1797,0.725,1803,0.6,1819,0.54,1833,0.499,1842,1.156,1852,0.888,1870,0.888,1932,0.647,1961,0.491,1962,0.552,1966,0.756,1977,0.797,2039,3.229,2043,0.647,2100,0.68,2156,2.315,2172,0.487,2215,0.523,2238,0.534,2288,0.797,2378,0.647,2422,0.574,2472,0.68,2560,2.097,2597,0.622,2671,1.227,2688,1.137,2697,0.68,2698,3.325,2751,0.797,2794,0.647,2882,1.328,2907,2.219,2908,1.967,2946,1.511,2964,1.227,2987,0.701,3008,1.648,3021,1.789,3023,4.235,3025,0.663,3033,3.092,3036,0.797,3040,2.541,3051,1.511,3052,0.86,3053,0.86,3054,0.86,3055,3.404,3056,1.629,3057,1.629,3058,2.153,3059,0.86,3060,0.86,3061,1.511,3062,0.86,3063,0.86,3064,0.86,3065,0.86,3066,0.86,3067,0.86,3068,0.6,3069,2.948,3070,0.86,3071,0.86,3072,0.86,3073,0.86,3074,2.948,3075,0.86,3076,0.86,3077,0.86,3078,0.86,3079,0.86,3080,2.153,3081,0.86,3082,0.86,3083,0.86,3084,0.86,3085,0.86,3086,0.797,3087,0.86,3088,0.86,3089,2.322,3090,2.733,3091,1.629,3092,0.86,3093,1.629,3094,0.86,3095,0.86,3096,0.86,3097,2.322,3098,0.86,3099,0.86,3100,0.86,3101,0.86,3102,0.86,3103,0.86,3104,0.86,3105,0.86,3106,0.86,3107,1.629,3108,2.948,3109,2.041,3110,0.86,3111,0.756,3112,3.289,3113,0.663,3114,0.86,3115,0.756,3116,0.86,3117,1.328,3118,1.433,3119,1.629,3120,0.86,3121,0.86,3122,0.86,3123,0.86,3124,0.86,3125,0.86,3126,0.86,3127,0.86,3128,2.322,3129,0.756,3130,0.86,3131,0.86,3132,0.86,3133,0.797,3134,0.86,3135,0.86,3136,0.86,3137,0.797,3138,0.797,3139,0.86,3140,0.725,3141,0.86,3142,0.86,3143,0.86,3144,0.86,3145,0.86,3146,0.86,3147,1.629,3148,0.634,3149,0.797,3150,1.289,3151,0.756,3152,0.86,3153,0.86,3154,0.86,3155,0.86]],["component/56",[1,0.349,2,0.663,18,0.6]],["title/57-1",[283,37.119,754,21.134,800,23.18]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["title/57-2",[176,27.764,184,26.702,754,18.435,800,20.22]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["title/57-3",[309,23.793,754,18.435,800,20.22,1418,24.622]],["name/57-3",[]],["text/57-3",[]],["component/57-3",[]],["title/57-4",[54,21.256,164,23.045,279,19.819,309,21.099,1418,21.834]],["name/57-4",[]],["text/57-4",[]],["component/57-4",[]],["title/57-5",[54,21.256,279,19.819,309,21.099,335,22.747,1418,21.834]],["name/57-5",[]],["text/57-5",[]],["component/57-5",[]],["title/57-6",[309,27.276,1418,28.226,3156,61.751]],["name/57-6",[]],["text/57-6",[]],["component/57-6",[]],["title/57",[754,24.758,800,27.155]],["name/57",[754,0.634,800,0.695]],["text/57",[1,0.79,2,0.503,12,1.31,18,0.455,21,0.558,28,0.79,29,0.819,34,1.64,36,0.702,37,1.672,38,0.836,48,1.602,54,2.146,59,0.683,73,0.683,80,2.902,94,0.665,95,1.844,99,0.863,107,1.092,110,1.31,113,1.235,118,0.789,120,0.661,123,0.782,128,1.161,142,0.923,151,0.729,163,0.97,164,2.987,166,0.84,176,0.832,177,0.752,184,1.438,190,4.397,206,0.854,207,2.059,219,1.083,225,0.715,242,0.785,243,3.506,244,1.195,253,0.665,263,0.74,264,0.681,266,1.967,268,2.564,272,0.661,276,2.413,279,3.168,280,1.291,282,2.183,283,0.97,293,0.929,309,2.456,318,0.749,329,2.472,330,2.33,332,0.778,335,2.297,341,0.985,344,1.342,359,1.069,362,0.963,363,0.765,373,0.743,393,0.929,395,1.028,397,2.213,437,1.627,438,0.804,439,0.84,505,0.889,511,0.845,516,0.889,527,1.592,528,0.863,530,0.772,536,2.412,560,0.819,571,0.873,575,1.458,576,0.873,582,1.648,583,0.746,586,1.131,602,0.929,668,3.159,675,1.069,692,0.759,715,1.161,716,3.119,729,2.465,741,1.726,742,1.637,746,1.161,754,3.408,760,1.637,766,0.849,791,1.597,800,4.525,829,4.625,867,1.458,869,0.942,881,0.665,904,1.258,907,1.569,910,0.985,939,3.997,940,1.282,948,3.139,952,0.917,967,1.958,971,1.717,988,2.705,1008,2.26,1044,0.858,1059,0.785,1068,1.67,1073,1.047,1075,0.883,1104,2.452,1117,0.899,1136,0.955,1145,0.935,1153,0.729,1155,4.245,1156,5.14,1158,0.911,1209,1.069,1221,2.899,1233,1.258,1317,1.757,1341,0.889,1345,5.206,1362,1.01,1363,1.146,1365,1.028,1369,1.341,1372,5.146,1399,0.785,1402,1.984,1418,4.188,1420,0.955,1449,1.047,1460,2.75,1467,1.195,1469,1.117,1500,1.131,1593,1.31,1693,1.53,1743,1.418,1746,1.178,1762,1.848,1791,1.53,1846,1.377,1893,2.703,1930,1.235,2115,1.468,2235,3.916,2370,1.418,2425,4.115,2426,1.613,2427,2.355,2428,2.355,2451,1.258,2516,3.471,2534,5.273,2570,1.613,2584,3.283,2688,1.214,2697,1.377,2698,7.086,3007,1.53,3033,6.389,3034,1.613,3157,4.26,3158,5.202,3159,1.74,3160,1.74,3161,1.613,3162,1.74,3163,1.74,3164,1.613,3165,1.53,3166,4.26,3167,3.128,3168,3.128,3169,1.74,3170,6.677,3171,3.128,3172,1.74,3173,1.74,3174,3.128,3175,1.74,3176,1.74,3177,1.613,3178,2.9,3179,1.53,3180,1.74,3181,1.74,3182,1.74]],["component/57",[1,0.349,2,0.663,18,0.6]],["title/58",[232,27.865,800,27.155]],["name/58",[232,0.713,800,0.695]],["text/58",[1,1.5,2,2.419,10,2.685,15,2.445,34,2.291,36,2.32,48,2.161,60,2.48,71,2.485,78,3.646,80,3.345,94,1.221,95,3.338,99,2.851,118,2.605,131,4.82,151,2.407,172,2.083,177,2.485,199,3.203,219,1.989,225,3.443,232,2.991,236,3.028,243,4.084,272,2.182,276,2.077,350,4.303,358,3.735,421,3.008,425,2.407,435,2.934,438,2.654,439,2.775,505,2.934,554,3.566,601,3.566,668,2.719,692,2.506,741,2.328,748,3.529,749,2.679,771,3.253,776,3.111,791,2.934,800,4.756,811,3.089,826,2.97,829,3.607,837,3.028,867,2.679,881,2.196,907,2.883,909,3.253,946,3.947,982,3.253,1068,3.068,1150,3.179,1153,2.407,1187,3.307,1194,2.835,1211,4.683,1221,3.203,1376,3.566,1526,3.133,1540,3.203,1652,3.735,1930,4.079,1951,3.365,2698,4.235,2907,4.326,2908,3.834,3183,5.328,3184,5.747]],["component/58",[1,0.349,2,0.663,18,0.6]],["title/59",[8,27.309,280,32.191]],["name/59",[3,1.478]],["text/59",[1,1.337,2,2.543,8,4.319,90,3.956,103,5.3,225,3.62,243,3.312,280,3.633,1219,8.442,1220,8.264,3185,8.805,3186,9.458,3187,9.138,3188,9.458,3189,8.442,3190,8.104,3191,8.264,3192,9.458,3193,9.86,3194,9.138,3195,6.363]],["component/59",[1,0.349,2,0.663,18,0.6]],["title/60-1",[8,27.309,3186,65.805]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["title/60-2",[71,40.719]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["title/60-3",[31,49.611]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["title/60-4",[691,35.861,3196,38.279]],["name/60-4",[]],["text/60-4",[]],["component/60-4",[]],["title/60-5",[3197,55.133]],["name/60-5",[]],["text/60-5",[]],["component/60-5",[]],["title/60-6",[8,27.309,3187,63.574]],["name/60-6",[]],["text/60-6",[]],["component/60-6",[]],["title/60-7",[306,28.006,1361,49.08,1796,37.119]],["name/60-7",[]],["text/60-7",[]],["component/60-7",[]],["title/60-8",[71,40.719]],["name/60-8",[]],["text/60-8",[]],["component/60-8",[]],["title/60-9",[31,49.611]],["name/60-9",[]],["text/60-9",[]],["component/60-9",[]],["title/60-10",[691,35.861,3196,38.279]],["name/60-10",[]],["text/60-10",[]],["component/60-10",[]],["title/60-11",[3197,55.133]],["name/60-11",[]],["text/60-11",[]],["component/60-11",[]],["title/60-12",[8,27.309,3188,65.805]],["name/60-12",[]],["text/60-12",[]],["component/60-12",[]],["title/60-13",[71,40.719]],["name/60-13",[]],["text/60-13",[]],["component/60-13",[]],["title/60-14",[31,49.611]],["name/60-14",[]],["text/60-14",[]],["component/60-14",[]],["title/60-15",[691,35.861,3196,38.279]],["name/60-15",[]],["text/60-15",[]],["component/60-15",[]],["title/60-16",[3197,55.133]],["name/60-16",[]],["text/60-16",[]],["component/60-16",[]],["title/60-17",[8,27.309,1219,58.734]],["name/60-17",[]],["text/60-17",[]],["component/60-17",[]],["title/60-18",[71,40.719]],["name/60-18",[]],["text/60-18",[]],["component/60-18",[]],["title/60-19",[31,49.611]],["name/60-19",[]],["text/60-19",[]],["component/60-19",[]],["title/60-20",[691,35.861,3196,38.279]],["name/60-20",[]],["text/60-20",[]],["component/60-20",[]],["title/60-21",[3197,55.133]],["name/60-21",[]],["text/60-21",[]],["component/60-21",[]],["title/60-22",[8,27.309,1220,57.497]],["name/60-22",[]],["text/60-22",[]],["component/60-22",[]],["title/60-23",[71,40.719]],["name/60-23",[]],["text/60-23",[]],["component/60-23",[]],["title/60-24",[31,49.611]],["name/60-24",[]],["text/60-24",[]],["component/60-24",[]],["title/60-25",[691,35.861,3196,38.279]],["name/60-25",[]],["text/60-25",[]],["component/60-25",[]],["title/60-26",[3197,55.133]],["name/60-26",[]],["text/60-26",[]],["component/60-26",[]],["title/60-27",[8,27.309,3189,58.734]],["name/60-27",[]],["text/60-27",[]],["component/60-27",[]],["title/60-28",[31,49.611]],["name/60-28",[]],["text/60-28",[]],["component/60-28",[]],["title/60-29",[691,35.861,3196,38.279]],["name/60-29",[]],["text/60-29",[]],["component/60-29",[]],["title/60-30",[8,27.309,3190,56.384]],["name/60-30",[]],["text/60-30",[]],["component/60-30",[]],["title/60-31",[31,49.611]],["name/60-31",[]],["text/60-31",[]],["component/60-31",[]],["title/60-32",[691,35.861,3196,38.279]],["name/60-32",[]],["text/60-32",[]],["component/60-32",[]],["title/60-33",[8,27.309,3191,57.497]],["name/60-33",[]],["text/60-33",[]],["component/60-33",[]],["title/60-34",[31,49.611]],["name/60-34",[]],["text/60-34",[]],["component/60-34",[]],["title/60-35",[691,35.861,3196,38.279]],["name/60-35",[]],["text/60-35",[]],["component/60-35",[]],["title/60-36",[8,27.309,3192,65.805]],["name/60-36",[]],["text/60-36",[]],["component/60-36",[]],["title/60-37",[31,49.611]],["name/60-37",[]],["text/60-37",[]],["component/60-37",[]],["title/60-38",[691,35.861,3196,38.279]],["name/60-38",[]],["text/60-38",[]],["component/60-38",[]],["title/60-39",[8,27.309,3193,68.6]],["name/60-39",[]],["text/60-39",[]],["component/60-39",[]],["title/60-40",[31,49.611]],["name/60-40",[]],["text/60-40",[]],["component/60-40",[]],["title/60-41",[691,35.861,3196,38.279]],["name/60-41",[]],["text/60-41",[]],["component/60-41",[]],["title/60-42",[8,27.309,3194,63.574]],["name/60-42",[]],["text/60-42",[]],["component/60-42",[]],["title/60-43",[31,49.611]],["name/60-43",[]],["text/60-43",[]],["component/60-43",[]],["title/60-44",[691,35.861,3196,38.279]],["name/60-44",[]],["text/60-44",[]],["component/60-44",[]],["title/60",[8,27.309,103,46.963]],["name/60",[8,0.699,103,1.202]],["text/60",[0,0.416,1,1.153,2,1.3,4,0.151,8,1.64,9,0.121,10,1.114,14,0.247,15,0.303,18,0.273,19,1.575,20,1.034,21,1.04,23,1.183,25,2.652,26,0.944,28,2.01,29,1.3,30,0.255,31,1.319,32,0.362,34,1.81,36,1.402,37,0.768,38,0.175,40,0.9,41,0.24,42,1.695,44,0.264,46,1.038,47,0.231,48,1.221,49,0.404,50,0.337,51,0.345,52,1.922,54,2.679,55,0.269,56,0.145,57,0.537,58,0.275,59,0.535,60,0.891,62,1.057,66,0.195,67,0.297,71,1.194,72,0.721,73,0.983,75,0.587,78,0.231,80,1.871,81,0.231,82,0.255,85,0.216,89,0.315,90,0.32,94,1.505,95,1.697,98,0.341,99,0.354,103,0.22,106,1.216,110,1.26,114,0.542,118,0.474,120,0.271,121,0.158,122,0.329,123,0.88,124,0.442,125,0.16,127,0.322,129,0.967,130,0.308,131,0.784,133,0.604,135,0.185,140,0.49,143,0.967,147,0.3,149,0.645,151,0.82,159,0.407,162,0.729,163,0.582,164,0.61,166,0.344,167,0.629,168,0.759,171,2.139,172,0.604,175,1.107,176,0.174,177,0.967,184,0.48,185,0.19,186,3.218,187,0.202,188,1.161,189,1.281,190,0.247,193,0.218,196,0.189,201,0.42,202,0.936,203,0.216,206,1.355,208,0.199,217,0.229,219,1.123,222,0.407,225,0.56,226,0.635,229,0.442,232,0.894,234,0.275,236,0.376,237,0.733,239,1.146,240,1.146,242,0.165,243,1.546,244,0.855,245,0.15,250,0.463,253,2.482,254,0.281,260,0.157,263,0.58,264,1.27,266,0.483,269,0.171,272,0.849,273,0.231,279,0.274,280,0.688,283,0.203,286,0.24,291,1.025,292,0.24,293,0.195,295,0.554,300,0.443,302,1.877,304,0.203,305,0.329,306,1.643,308,0.186,309,0.292,310,0.548,318,0.157,320,1.083,323,0.865,330,1.169,332,0.467,334,0.176,335,0.602,341,1.418,342,0.552,344,0.156,345,0.205,346,0.95,350,0.187,354,0.72,356,0.494,359,1.023,360,0.231,361,0.22,363,0.313,373,0.156,388,0.304,391,0.671,395,0.216,397,0.709,398,0.214,412,0.452,415,0.429,417,0.362,419,0.197,421,0.373,423,0.676,425,1.456,432,0.19,435,1.41,439,0.176,440,0.199,442,0.259,444,0.433,445,1.019,447,0.697,449,0.394,456,0.497,504,0.587,505,0.534,512,0.697,513,0.433,514,1.116,516,3.184,517,0.442,519,0.469,522,0.77,527,0.509,528,0.181,530,0.316,536,0.771,537,0.742,551,0.218,554,0.442,559,1.492,560,0.172,563,0.812,564,0.247,569,0.922,571,0.684,573,0.19,574,0.321,575,0.635,576,0.358,582,0.551,588,0.354,589,0.205,591,0.331,601,0.649,602,0.195,609,0.378,611,0.229,620,0.308,625,0.264,654,0.407,655,1.907,660,0.281,668,2.538,673,0.224,674,0.623,688,0.95,690,0.421,691,1.89,692,0.594,699,0.196,701,1.025,703,0.404,704,0.203,708,0.497,709,0.289,710,2.152,711,0.21,716,0.709,717,1.128,722,0.176,729,0.685,732,0.547,733,0.255,740,0.353,741,0.675,742,0.373,750,0.391,753,0.346,754,1.8,759,0.207,761,0.544,766,1.091,767,0.284,768,0.187,778,1.146,783,0.187,784,1.053,789,0.178,791,0.534,800,1.13,811,0.196,813,0.264,814,0.308,815,0.321,816,0.612,821,0.651,823,0.234,824,0.216,825,0.671,829,2.952,834,0.354,835,0.269,836,0.366,839,1.69,844,0.346,846,0.218,855,0.837,858,1.498,860,0.922,861,1.069,863,1.64,864,1.617,865,1.06,867,0.332,869,0.197,871,0.642,881,1.572,882,0.321,888,0.255,889,0.452,891,0.289,892,0.289,898,1.211,899,0.218,907,0.836,917,0.247,918,0.281,931,0.259,933,0.414,934,0.22,936,0.805,938,0.251,939,0.661,946,0.718,952,0.192,954,0.378,955,0.688,956,0.199,959,0.269,961,0.208,962,0.208,967,0.766,969,0.527,973,2.437,975,0.429,982,0.207,988,0.867,996,0.247,1008,0.755,1013,1.247,1014,0.649,1019,1.023,1025,0.338,1028,0.798,1030,0.562,1037,0.707,1043,1.057,1044,0.822,1046,2.27,1059,0.322,1068,0.558,1075,0.692,1099,0.684,1104,0.41,1106,0.281,1117,0.189,1122,0.656,1130,2.352,1132,0.226,1148,0.497,1151,0.779,1153,1.049,1156,0.857,1159,0.447,1180,0.237,1181,0.281,1185,0.208,1187,0.21,1193,0.297,1194,0.352,1196,0.218,1198,0.342,1199,0.234,1201,0.386,1208,0.452,1209,0.438,1212,0.41,1215,1.843,1217,0.4,1218,1.052,1219,0.787,1220,0.269,1221,0.203,1222,1.097,1224,0.564,1225,0.881,1226,0.289,1230,0.237,1232,0.429,1237,0.564,1250,1.93,1251,0.237,1252,0.237,1253,0.297,1263,0.255,1270,0.463,1272,1.513,1273,0.182,1289,0.259,1301,0.297,1303,0.19,1304,0.234,1307,0.338,1321,0.234,1323,0.259,1324,0.417,1325,0.707,1326,0.308,1327,0.269,1328,0.537,1329,0.627,1332,0.297,1341,0.364,1347,0.308,1351,0.281,1355,0.433,1358,1.64,1360,0.936,1361,0.525,1362,0.212,1365,0.216,1367,0.269,1377,0.321,1385,0.549,1386,0.297,1389,0.264,1390,0.281,1392,0.251,1393,3.35,1402,0.231,1417,0.566,1418,0.578,1428,0.259,1436,0.281,1439,1.318,1449,2.352,1461,0.255,1463,0.4,1464,0.195,1465,1.11,1466,0.433,1469,0.234,1471,0.425,1478,0.592,1488,0.452,1491,0.338,1492,1.318,1493,0.469,1507,0.255,1516,0.627,1517,0.627,1518,0.231,1523,0.688,1524,0.243,1528,0.564,1536,1.318,1572,0.442,1583,1.204,1584,0.297,1586,1.549,1587,2.041,1588,0.259,1600,0.929,1603,0.281,1648,0.592,1666,0.24,1669,0.482,1671,0.297,1698,0.679,1700,0.297,1702,0.601,1704,0.264,1708,0.247,1712,0.855,1713,0.391,1740,0.247,1741,0.247,1742,0.218,1749,0.231,1752,0.231,1753,0.259,1757,0.234,1758,0.386,1761,0.476,1768,0.275,1772,0.564,1773,0.549,1777,0.247,1796,0.582,1798,0.321,1799,0.259,1801,0.476,1807,0.255,1811,0.24,1813,0.231,1816,0.886,1818,0.321,1819,0.229,1822,0.321,1832,0.321,1841,0.7,1847,1.289,1852,0.199,1853,0.837,1858,0.482,1866,0.251,1870,0.199,1880,0.321,1881,0.231,1887,0.308,1888,0.601,1891,0.251,1893,0.231,1896,0.338,1909,0.463,1911,0.224,1914,0.601,1919,0.308,1923,0.549,1926,0.281,1931,0.224,1932,0.275,1934,0.338,1940,1.664,1941,0.289,1947,0.338,1949,0.264,1951,0.976,1956,1.345,1957,0.264,1958,0.251,1959,0.251,1961,0.208,1990,0.497,1994,0.226,2010,1.05,2021,0.297,2024,0.525,2031,0.275,2036,0.247,2039,0.184,2052,0.49,2054,0.515,2086,0.308,2119,0.275,2120,0.601,2123,0.297,2137,0.537,2140,1.004,2144,0.321,2145,0.321,2168,0.321,2170,0.321,2171,0.338,2172,0.771,2174,0.275,2181,0.537,2182,0.661,2184,1.183,2185,0.627,2194,0.255,2214,0.308,2215,0.635,2216,0.308,2217,0.525,2225,0.308,2227,0.338,2228,0.321,2230,0.281,2238,0.226,2258,0.297,2259,0.297,2260,0.661,2265,0.581,2266,0.308,2272,1.135,2278,0.729,2291,0.338,2292,0.506,2305,0.707,2322,0.308,2331,0.289,2340,0.281,2349,0.308,2361,0.601,2371,0.338,2388,0.289,2391,0.506,2399,0.259,2408,0.661,2417,0.627,2422,0.243,2425,0.827,2440,0.497,2453,0.308,2472,2.749,2473,1.406,2526,0.525,2534,0.321,2553,0.827,2556,0.661,2563,0.308,2584,0.281,2588,0.247,2593,0.259,2594,0.308,2597,0.264,2624,0.755,2642,0.321,2649,0.537,2683,0.525,2696,0.255,2698,0.269,2707,0.275,2737,0.308,2742,0.281,2744,0.338,2749,0.827,2750,0.564,2753,0.297,2755,0.308,2762,0.264,2784,0.308,2791,0.269,2803,0.537,2807,0.564,2811,0.321,2814,0.308,2816,0.338,2819,0.855,2882,0.297,2893,0.338,2901,0.275,2904,0.338,2905,1.616,2914,0.338,2924,0.338,2925,0.338,2926,0.321,2934,0.338,2964,0.275,2998,1.149,3008,0.259,3020,0.338,3032,0.601,3040,0.264,3048,0.338,3112,0.297,3115,0.321,3148,0.269,3150,0.289,3187,0.297,3189,0.537,3190,0.264,3191,0.525,3194,0.581,3195,0.515,3196,1.097,3197,0.976,3198,0.365,3199,0.365,3200,0.365,3201,0.365,3202,0.919,3203,0.365,3204,0.713,3205,0.365,3206,0.713,3207,0.365,3208,0.365,3209,0.365,3210,0.365,3211,0.365,3212,0.365,3213,0.338,3214,0.365,3215,0.365,3216,0.365,3217,0.365,3218,0.365,3219,0.365,3220,0.365,3221,0.661,3222,0.338,3223,0.365,3224,1.545,3225,1.474,3226,1.545,3227,0.661,3228,0.969,3229,0.661,3230,0.365,3231,0.365,3232,0.365,3233,0.365,3234,0.365,3235,0.338,3236,0.713,3237,1.721,3238,0.289,3239,0.321,3240,0.365,3241,0.365,3242,0.365,3243,0.365,3244,0.365,3245,0.308,3246,0.365,3247,0.365,3248,0.365,3249,0.365,3250,0.338,3251,0.365,3252,0.713,3253,0.365,3254,0.365,3255,0.365,3256,0.365,3257,0.365,3258,0.713,3259,0.365,3260,0.365,3261,0.338,3262,0.365,3263,0.365,3264,0.365,3265,0.365,3266,0.365,3267,0.365,3268,0.365,3269,0.365,3270,0.365,3271,0.365,3272,0.365,3273,0.365,3274,0.365,3275,0.365,3276,0.365,3277,0.365,3278,0.321,3279,0.365,3280,0.365,3281,1.667,3282,0.365,3283,1.263,3284,0.713,3285,0.969,3286,0.338,3287,1.045,3288,0.713,3289,0.365,3290,0.452,3291,0.365,3292,0.365,3293,0.713,3294,0.713,3295,0.365,3296,0.713,3297,0.365,3298,0.365,3299,0.365,3300,0.338,3301,0.365,3302,0.713,3303,0.365,3304,0.713,3305,0.365,3306,1.667,3307,0.365,3308,1.045,3309,0.713,3310,0.365,3311,0.365,3312,0.365,3313,0.365,3314,0.365,3315,0.365,3316,0.338,3317,0.365,3318,0.713,3319,1.149,3320,0.365,3321,0.365,3322,0.365,3323,0.661,3324,0.365,3325,0.338,3326,0.365,3327,0.365,3328,0.365,3329,0.365,3330,0.365,3331,0.338,3332,0.365,3333,0.713,3334,0.365,3335,0.365,3336,0.365,3337,0.365,3338,0.365,3339,0.365,3340,0.365,3341,0.713,3342,0.482,3343,0.365,3344,0.365,3345,0.365,3346,0.365,3347,0.365,3348,0.365,3349,0.365,3350,0.661,3351,0.365,3352,0.365,3353,0.365,3354,0.365,3355,0.365,3356,0.713,3357,0.969,3358,0.338,3359,0.365,3360,0.713,3361,0.338,3362,0.365,3363,1.769,3364,0.365,3365,0.713,3366,1.465,3367,0.365,3368,0.713,3369,0.365,3370,0.365,3371,0.365,3372,0.713,3373,0.365,3374,0.365,3375,0.365,3376,0.365,3377,0.365,3378,0.365,3379,0.713,3380,0.308,3381,0.321,3382,0.365,3383,0.365,3384,0.365,3385,0.713,3386,0.969,3387,1.263,3388,0.365,3389,0.365,3390,1.263,3391,0.365,3392,0.365,3393,0.713,3394,0.365,3395,0.713,3396,0.365,3397,0.365,3398,0.365,3399,0.275,3400,0.365,3401,0.713,3402,0.321,3403,0.365,3404,0.365,3405,0.365,3406,0.338,3407,0.365,3408,0.365,3409,0.338,3410,0.338,3411,0.308,3412,0.365,3413,0.365,3414,0.365,3415,0.365,3416,0.365,3417,0.365,3418,0.365,3419,0.365,3420,0.365,3421,0.308,3422,0.365,3423,0.338,3424,0.365,3425,0.365,3426,0.365,3427,0.338,3428,0.297,3429,0.338,3430,0.365,3431,0.661,3432,0.365,3433,0.338,3434,0.713,3435,0.338,3436,0.365,3437,0.661,3438,0.365,3439,0.365,3440,0.713,3441,0.365,3442,0.365,3443,0.365,3444,0.365,3445,0.365,3446,0.365,3447,0.713,3448,0.338,3449,0.365,3450,0.713,3451,0.365,3452,0.365,3453,0.365,3454,0.365,3455,0.365,3456,0.365,3457,0.251,3458,0.365,3459,0.365,3460,0.365,3461,0.365,3462,0.365,3463,0.338,3464,0.713,3465,0.365,3466,0.365,3467,0.713,3468,0.365,3469,0.365,3470,0.713,3471,1.045,3472,0.365,3473,0.713,3474,0.365,3475,0.365,3476,0.321,3477,0.365,3478,0.289,3479,0.365,3480,0.365,3481,0.365,3482,1.284,3483,0.365,3484,0.365,3485,0.365,3486,0.365,3487,0.365,3488,0.365,3489,0.365,3490,0.365,3491,0.365,3492,0.365,3493,0.365,3494,0.365,3495,0.365,3496,0.365,3497,0.365,3498,0.289,3499,0.338,3500,0.365,3501,0.365,3502,0.365,3503,0.338,3504,0.365,3505,0.365,3506,0.365,3507,0.365,3508,0.365,3509,0.365,3510,0.365,3511,0.365,3512,0.713,3513,0.365,3514,0.365,3515,0.365,3516,0.247,3517,0.365,3518,0.365,3519,0.365,3520,0.365,3521,0.365,3522,0.365,3523,0.365,3524,0.365,3525,0.365,3526,1.465,3527,0.365,3528,0.365,3529,0.365,3530,0.365,3531,0.365,3532,0.365,3533,0.601,3534,0.365,3535,0.365,3536,0.365,3537,0.338,3538,0.365,3539,1.045,3540,0.365,3541,0.365,3542,0.365,3543,0.365,3544,0.365,3545,0.365,3546,0.338,3547,0.365,3548,0.365,3549,0.338,3550,0.713,3551,0.365,3552,0.365,3553,0.365,3554,0.365,3555,0.365,3556,0.365,3557,0.365,3558,0.365,3559,0.713,3560,0.365,3561,0.713,3562,0.365,3563,0.365,3564,0.365,3565,0.365,3566,0.365,3567,0.365,3568,0.365,3569,0.365,3570,0.365,3571,0.365,3572,0.661,3573,0.713,3574,0.365,3575,0.365,3576,0.365,3577,0.297,3578,0.365,3579,0.365,3580,0.365,3581,0.338,3582,0.338,3583,0.365,3584,0.713,3585,0.661,3586,0.713,3587,0.365,3588,0.365,3589,0.365,3590,0.365,3591,0.365,3592,0.365,3593,0.827,3594,0.365,3595,0.365,3596,0.365,3597,0.365,3598,0.713,3599,0.338,3600,0.713,3601,0.365,3602,0.308,3603,0.365,3604,0.365,3605,0.365,3606,0.264,3607,0.365,3608,0.365,3609,0.365,3610,0.365,3611,0.281,3612,0.297,3613,0.365,3614,0.365,3615,0.365,3616,0.321,3617,0.365,3618,0.365,3619,0.365,3620,0.713,3621,0.338,3622,0.365,3623,0.365,3624,0.365,3625,0.365,3626,0.713,3627,0.713,3628,0.365,3629,0.713,3630,0.713,3631,0.365,3632,0.365,3633,0.713,3634,0.365,3635,0.365,3636,0.365,3637,0.365,3638,0.297,3639,0.297,3640,0.365,3641,0.365,3642,0.365,3643,0.365,3644,0.365,3645,0.365,3646,0.365,3647,0.365,3648,0.365,3649,0.365,3650,0.365,3651,0.365,3652,0.365,3653,0.365,3654,0.365,3655,0.365,3656,0.365,3657,0.289,3658,0.338,3659,0.365,3660,0.365,3661,0.321,3662,0.365,3663,0.365,3664,0.365,3665,0.365,3666,0.365,3667,0.338,3668,0.365,3669,0.365,3670,0.365,3671,0.338,3672,0.365,3673,0.365,3674,0.365,3675,0.365,3676,0.321,3677,0.365,3678,0.365,3679,0.365,3680,0.338,3681,0.338,3682,0.365,3683,0.365,3684,0.365,3685,0.365,3686,0.365,3687,0.365,3688,0.365,3689,0.365,3690,0.365,3691,0.365,3692,0.365,3693,0.338,3694,0.365,3695,0.365,3696,0.365,3697,0.365,3698,0.365,3699,0.321,3700,0.321,3701,0.627,3702,0.365,3703,0.365,3704,0.365,3705,0.275,3706,0.661,3707,0.365,3708,0.365,3709,0.365,3710,0.338,3711,0.365,3712,0.365,3713,0.321,3714,0.365,3715,0.365,3716,0.321,3717,0.275,3718,0.259,3719,0.365,3720,0.365,3721,0.365,3722,0.321,3723,0.321,3724,0.365,3725,0.713,3726,0.713,3727,0.308,3728,0.365,3729,0.365,3730,0.365,3731,0.365,3732,0.365,3733,0.365,3734,0.365,3735,0.321,3736,0.321,3737,0.338,3738,0.365,3739,0.365,3740,0.338,3741,0.338,3742,0.365,3743,0.365,3744,0.321,3745,0.365,3746,0.627,3747,0.365,3748,0.338,3749,0.365,3750,0.308,3751,0.365,3752,0.365,3753,0.365,3754,0.365,3755,0.281,3756,0.308,3757,0.338,3758,0.365,3759,0.365,3760,0.365,3761,0.365,3762,0.365,3763,0.338,3764,0.365,3765,0.321,3766,0.338]],["component/60",[1,0.349,2,0.663,18,0.6]],["title/61-1",[8,27.309,3186,65.805]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[8,27.309,3767,78.021]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61-3",[31,49.611]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["title/61-4",[691,35.861,3196,38.279]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["title/61-5",[3197,55.133]],["name/61-5",[]],["text/61-5",[]],["component/61-5",[]],["title/61-6",[8,27.309,3187,63.574]],["name/61-6",[]],["text/61-6",[]],["component/61-6",[]],["title/61-7",[8,27.309,3768,78.021]],["name/61-7",[]],["text/61-7",[]],["component/61-7",[]],["title/61-8",[31,49.611]],["name/61-8",[]],["text/61-8",[]],["component/61-8",[]],["title/61-9",[691,35.861,3196,38.279]],["name/61-9",[]],["text/61-9",[]],["component/61-9",[]],["title/61-10",[3197,55.133]],["name/61-10",[]],["text/61-10",[]],["component/61-10",[]],["title/61-11",[8,27.309,3769,78.021]],["name/61-11",[]],["text/61-11",[]],["component/61-11",[]],["title/61-12",[691,35.861,3196,38.279]],["name/61-12",[]],["text/61-12",[]],["component/61-12",[]],["title/61-13",[3197,55.133]],["name/61-13",[]],["text/61-13",[]],["component/61-13",[]],["title/61-14",[8,27.309,3770,78.021]],["name/61-14",[]],["text/61-14",[]],["component/61-14",[]],["title/61-15",[31,49.611]],["name/61-15",[]],["text/61-15",[]],["component/61-15",[]],["title/61-16",[691,35.861,3196,38.279]],["name/61-16",[]],["text/61-16",[]],["component/61-16",[]],["title/61-17",[168,43.484,237,34.303]],["name/61-17",[]],["text/61-17",[]],["component/61-17",[]],["title/61-18",[3197,55.133]],["name/61-18",[]],["text/61-18",[]],["component/61-18",[]],["title/61-19",[8,27.309,3188,65.805]],["name/61-19",[]],["text/61-19",[]],["component/61-19",[]],["title/61-20",[8,27.309,3771,78.021]],["name/61-20",[]],["text/61-20",[]],["component/61-20",[]],["title/61-21",[31,49.611]],["name/61-21",[]],["text/61-21",[]],["component/61-21",[]],["title/61-22",[691,35.861,3196,38.279]],["name/61-22",[]],["text/61-22",[]],["component/61-22",[]],["title/61-23",[3197,55.133]],["name/61-23",[]],["text/61-23",[]],["component/61-23",[]],["title/61-24",[8,27.309,3772,78.021]],["name/61-24",[]],["text/61-24",[]],["component/61-24",[]],["title/61-25",[31,49.611]],["name/61-25",[]],["text/61-25",[]],["component/61-25",[]],["title/61-26",[691,35.861,3196,38.279]],["name/61-26",[]],["text/61-26",[]],["component/61-26",[]],["title/61-27",[3197,55.133]],["name/61-27",[]],["text/61-27",[]],["component/61-27",[]],["title/61-28",[8,27.309,3773,78.021]],["name/61-28",[]],["text/61-28",[]],["component/61-28",[]],["title/61-29",[31,49.611]],["name/61-29",[]],["text/61-29",[]],["component/61-29",[]],["title/61-30",[691,35.861,3196,38.279]],["name/61-30",[]],["text/61-30",[]],["component/61-30",[]],["title/61-31",[3197,55.133]],["name/61-31",[]],["text/61-31",[]],["component/61-31",[]],["title/61-32",[8,27.309,1219,58.734]],["name/61-32",[]],["text/61-32",[]],["component/61-32",[]],["title/61-33",[8,27.309,3774,78.021]],["name/61-33",[]],["text/61-33",[]],["component/61-33",[]],["title/61-34",[31,49.611]],["name/61-34",[]],["text/61-34",[]],["component/61-34",[]],["title/61-35",[691,35.861,3196,38.279]],["name/61-35",[]],["text/61-35",[]],["component/61-35",[]],["title/61-36",[3197,55.133]],["name/61-36",[]],["text/61-36",[]],["component/61-36",[]],["title/61-37",[8,27.309,3775,78.021]],["name/61-37",[]],["text/61-37",[]],["component/61-37",[]],["title/61-38",[691,35.861,3196,38.279]],["name/61-38",[]],["text/61-38",[]],["component/61-38",[]],["title/61-39",[3197,55.133]],["name/61-39",[]],["text/61-39",[]],["component/61-39",[]],["title/61-40",[8,27.309,3776,78.021]],["name/61-40",[]],["text/61-40",[]],["component/61-40",[]],["title/61-41",[31,49.611]],["name/61-41",[]],["text/61-41",[]],["component/61-41",[]],["title/61-42",[691,35.861,3196,38.279]],["name/61-42",[]],["text/61-42",[]],["component/61-42",[]],["title/61-43",[3197,55.133]],["name/61-43",[]],["text/61-43",[]],["component/61-43",[]],["title/61-44",[8,27.309,3777,78.021]],["name/61-44",[]],["text/61-44",[]],["component/61-44",[]],["title/61-45",[31,49.611]],["name/61-45",[]],["text/61-45",[]],["component/61-45",[]],["title/61-46",[691,35.861,3196,38.279]],["name/61-46",[]],["text/61-46",[]],["component/61-46",[]],["title/61-47",[3197,55.133]],["name/61-47",[]],["text/61-47",[]],["component/61-47",[]],["title/61-48",[8,27.309,3778,78.021]],["name/61-48",[]],["text/61-48",[]],["component/61-48",[]],["title/61-49",[71,40.719]],["name/61-49",[]],["text/61-49",[]],["component/61-49",[]],["title/61-50",[31,49.611]],["name/61-50",[]],["text/61-50",[]],["component/61-50",[]],["title/61-51",[691,35.861,3196,38.279]],["name/61-51",[]],["text/61-51",[]],["component/61-51",[]],["title/61-52",[3197,55.133]],["name/61-52",[]],["text/61-52",[]],["component/61-52",[]],["title/61-53",[8,27.309,3779,78.021]],["name/61-53",[]],["text/61-53",[]],["component/61-53",[]],["title/61-54",[691,35.861,3196,38.279]],["name/61-54",[]],["text/61-54",[]],["component/61-54",[]],["title/61-55",[3197,55.133]],["name/61-55",[]],["text/61-55",[]],["component/61-55",[]],["title/61-56",[8,27.309,1220,57.497]],["name/61-56",[]],["text/61-56",[]],["component/61-56",[]],["title/61-57",[8,27.309,3780,78.021]],["name/61-57",[]],["text/61-57",[]],["component/61-57",[]],["title/61-58",[31,49.611]],["name/61-58",[]],["text/61-58",[]],["component/61-58",[]],["title/61-59",[691,35.861,3196,38.279]],["name/61-59",[]],["text/61-59",[]],["component/61-59",[]],["title/61-60",[3197,55.133]],["name/61-60",[]],["text/61-60",[]],["component/61-60",[]],["title/61-61",[8,27.309,3781,78.021]],["name/61-61",[]],["text/61-61",[]],["component/61-61",[]],["title/61-62",[691,35.861,3196,38.279]],["name/61-62",[]],["text/61-62",[]],["component/61-62",[]],["title/61-63",[3197,55.133]],["name/61-63",[]],["text/61-63",[]],["component/61-63",[]],["title/61-64",[8,27.309,3782,78.021]],["name/61-64",[]],["text/61-64",[]],["component/61-64",[]],["title/61-65",[691,35.861,3196,38.279]],["name/61-65",[]],["text/61-65",[]],["component/61-65",[]],["title/61-66",[3197,55.133]],["name/61-66",[]],["text/61-66",[]],["component/61-66",[]],["title/61-67",[8,27.309,3783,78.021]],["name/61-67",[]],["text/61-67",[]],["component/61-67",[]],["title/61-68",[691,35.861,3196,38.279]],["name/61-68",[]],["text/61-68",[]],["component/61-68",[]],["title/61-69",[3197,55.133]],["name/61-69",[]],["text/61-69",[]],["component/61-69",[]],["title/61-70",[8,27.309,3784,78.021]],["name/61-70",[]],["text/61-70",[]],["component/61-70",[]],["title/61-71",[691,35.861,3196,38.279]],["name/61-71",[]],["text/61-71",[]],["component/61-71",[]],["title/61-72",[3197,55.133]],["name/61-72",[]],["text/61-72",[]],["component/61-72",[]],["title/61-73",[8,27.309,3785,78.021]],["name/61-73",[]],["text/61-73",[]],["component/61-73",[]],["title/61-74",[31,49.611]],["name/61-74",[]],["text/61-74",[]],["component/61-74",[]],["title/61-75",[691,35.861,3196,38.279]],["name/61-75",[]],["text/61-75",[]],["component/61-75",[]],["title/61-76",[3197,55.133]],["name/61-76",[]],["text/61-76",[]],["component/61-76",[]],["title/61-77",[8,27.309,3786,78.021]],["name/61-77",[]],["text/61-77",[]],["component/61-77",[]],["title/61-78",[71,40.719]],["name/61-78",[]],["text/61-78",[]],["component/61-78",[]],["title/61-79",[31,49.611]],["name/61-79",[]],["text/61-79",[]],["component/61-79",[]],["title/61-80",[691,35.861,3196,38.279]],["name/61-80",[]],["text/61-80",[]],["component/61-80",[]],["title/61-81",[3197,55.133]],["name/61-81",[]],["text/61-81",[]],["component/61-81",[]],["title/61-82",[8,27.309,3787,72.341]],["name/61-82",[]],["text/61-82",[]],["component/61-82",[]],["title/61-83",[31,49.611]],["name/61-83",[]],["text/61-83",[]],["component/61-83",[]],["title/61-84",[691,35.861,3196,38.279]],["name/61-84",[]],["text/61-84",[]],["component/61-84",[]],["title/61-85",[8,27.309,3189,58.734]],["name/61-85",[]],["text/61-85",[]],["component/61-85",[]],["title/61-86",[8,27.309,3788,78.021]],["name/61-86",[]],["text/61-86",[]],["component/61-86",[]],["title/61-87",[31,49.611]],["name/61-87",[]],["text/61-87",[]],["component/61-87",[]],["title/61-88",[691,35.861,3196,38.279]],["name/61-88",[]],["text/61-88",[]],["component/61-88",[]],["title/61-89",[8,27.309,3789,78.021]],["name/61-89",[]],["text/61-89",[]],["component/61-89",[]],["title/61-90",[691,35.861,3196,38.279]],["name/61-90",[]],["text/61-90",[]],["component/61-90",[]],["title/61-91",[8,27.309,3790,68.6]],["name/61-91",[]],["text/61-91",[]],["component/61-91",[]],["title/61-92",[71,40.719]],["name/61-92",[]],["text/61-92",[]],["component/61-92",[]],["title/61-93",[31,49.611]],["name/61-93",[]],["text/61-93",[]],["component/61-93",[]],["title/61-94",[691,35.861,3196,38.279]],["name/61-94",[]],["text/61-94",[]],["component/61-94",[]],["title/61-95",[8,27.309,3791,72.341]],["name/61-95",[]],["text/61-95",[]],["component/61-95",[]],["title/61-96",[691,35.861,3196,38.279]],["name/61-96",[]],["text/61-96",[]],["component/61-96",[]],["title/61-97",[8,27.309,3792,78.021]],["name/61-97",[]],["text/61-97",[]],["component/61-97",[]],["title/61-98",[31,49.611]],["name/61-98",[]],["text/61-98",[]],["component/61-98",[]],["title/61-99",[691,35.861,3196,38.279]],["name/61-99",[]],["text/61-99",[]],["component/61-99",[]],["title/61-100",[8,27.309,3793,78.021]],["name/61-100",[]],["text/61-100",[]],["component/61-100",[]],["title/61-101",[8,27.309,3794,72.341]],["name/61-101",[]],["text/61-101",[]],["component/61-101",[]],["title/61-102",[8,27.309,3795,78.021]],["name/61-102",[]],["text/61-102",[]],["component/61-102",[]],["title/61-103",[8,27.309,3796,78.021]],["name/61-103",[]],["text/61-103",[]],["component/61-103",[]],["title/61-104",[8,27.309,3797,72.341]],["name/61-104",[]],["text/61-104",[]],["component/61-104",[]],["title/61-105",[8,27.309,3798,72.341]],["name/61-105",[]],["text/61-105",[]],["component/61-105",[]],["title/61-106",[8,27.309,3799,72.341]],["name/61-106",[]],["text/61-106",[]],["component/61-106",[]],["title/61-107",[8,27.309,3800,72.341]],["name/61-107",[]],["text/61-107",[]],["component/61-107",[]],["title/61-108",[8,27.309,3801,72.341]],["name/61-108",[]],["text/61-108",[]],["component/61-108",[]],["title/61-109",[8,27.309,3802,72.341]],["name/61-109",[]],["text/61-109",[]],["component/61-109",[]],["title/61-110",[8,27.309,3190,56.384]],["name/61-110",[]],["text/61-110",[]],["component/61-110",[]],["title/61-111",[8,27.309,3803,72.341]],["name/61-111",[]],["text/61-111",[]],["component/61-111",[]],["title/61-112",[8,27.309,3804,68.6]],["name/61-112",[]],["text/61-112",[]],["component/61-112",[]],["title/61-113",[8,27.309,3805,68.6]],["name/61-113",[]],["text/61-113",[]],["component/61-113",[]],["title/61-114",[8,27.309,3806,72.341]],["name/61-114",[]],["text/61-114",[]],["component/61-114",[]],["title/61-115",[8,27.309,3807,78.021]],["name/61-115",[]],["text/61-115",[]],["component/61-115",[]],["title/61-116",[8,27.309,3808,72.341]],["name/61-116",[]],["text/61-116",[]],["component/61-116",[]],["title/61-117",[8,27.309,3809,72.341]],["name/61-117",[]],["text/61-117",[]],["component/61-117",[]],["title/61-118",[8,27.309,3810,78.021]],["name/61-118",[]],["text/61-118",[]],["component/61-118",[]],["title/61-119",[8,27.309,3811,78.021]],["name/61-119",[]],["text/61-119",[]],["component/61-119",[]],["title/61-120",[8,27.309,3191,57.497]],["name/61-120",[]],["text/61-120",[]],["component/61-120",[]],["title/61-121",[8,27.309,3812,78.021]],["name/61-121",[]],["text/61-121",[]],["component/61-121",[]],["title/61-122",[8,27.309,3813,72.341]],["name/61-122",[]],["text/61-122",[]],["component/61-122",[]],["title/61-123",[8,27.309,3814,72.341]],["name/61-123",[]],["text/61-123",[]],["component/61-123",[]],["title/61-124",[8,27.309,3815,78.021]],["name/61-124",[]],["text/61-124",[]],["component/61-124",[]],["title/61-125",[8,27.309,3816,78.021]],["name/61-125",[]],["text/61-125",[]],["component/61-125",[]],["title/61-126",[8,27.309,3192,65.805]],["name/61-126",[]],["text/61-126",[]],["component/61-126",[]],["title/61-127",[8,27.309,3817,72.341]],["name/61-127",[]],["text/61-127",[]],["component/61-127",[]],["title/61-128",[8,27.309,3818,72.341]],["name/61-128",[]],["text/61-128",[]],["component/61-128",[]],["title/61-129",[8,27.309,3193,68.6]],["name/61-129",[]],["text/61-129",[]],["component/61-129",[]],["title/61-130",[8,27.309,3819,78.021]],["name/61-130",[]],["text/61-130",[]],["component/61-130",[]],["title/61-131",[8,27.309,3820,78.021]],["name/61-131",[]],["text/61-131",[]],["component/61-131",[]],["title/61-132",[8,27.309,3194,63.574]],["name/61-132",[]],["text/61-132",[]],["component/61-132",[]],["title/61-133",[8,27.309,3821,78.021]],["name/61-133",[]],["text/61-133",[]],["component/61-133",[]],["title/61-134",[8,27.309,3822,78.021]],["name/61-134",[]],["text/61-134",[]],["component/61-134",[]],["title/61-135",[8,27.309,3823,78.021]],["name/61-135",[]],["text/61-135",[]],["component/61-135",[]],["title/61-136",[8,27.309,3824,78.021]],["name/61-136",[]],["text/61-136",[]],["component/61-136",[]],["title/61",[8,27.309,3195,56.384]],["name/61",[8,0.699,3195,1.443]],["text/61",[1,1.068,2,0.772,3,0.245,4,0.233,5,0.19,6,0.183,7,0.341,8,2.857,10,0.723,18,0.895,19,0.717,20,0.517,21,1.364,22,0.164,25,0.759,28,1.993,29,1.696,31,0.833,34,2.12,36,0.732,37,0.526,38,0.138,41,0.19,42,0.195,45,0.608,46,1.186,48,0.504,49,0.163,50,0.634,51,0.095,52,1.65,54,0.931,55,0.212,56,0.114,59,0.428,60,0.604,62,0.359,66,0.445,71,0.245,72,2.265,73,0.428,74,0.205,75,2.639,78,0.359,80,1.637,81,0.183,83,0.765,88,0.17,89,0.127,90,1.375,93,0.19,94,0.837,95,1.107,97,0.208,98,0.867,99,0.143,103,0.173,106,1.297,109,0.192,110,1.846,114,0.629,118,0.378,120,0.215,122,0.261,123,0.711,125,1.17,127,0.493,129,0.778,131,0.326,133,1.001,135,1.74,140,0.741,141,0.378,142,0.153,147,0.857,149,0.634,151,0.457,154,0.201,159,0.323,162,0.582,163,0.608,164,0.812,166,0.527,167,0.173,168,0.608,171,0.294,172,1.242,175,0.75,176,1.463,177,0.882,180,0.198,181,0.326,184,0.616,185,0.15,186,0.956,188,0.857,189,0.263,192,0.895,196,1.054,197,0.359,199,0.315,200,0.155,201,0.228,202,0.198,203,0.492,205,0.378,206,1.681,207,0.549,219,0.781,229,0.179,232,0.881,235,0.205,237,1.085,239,0.132,240,1.68,242,0.255,243,1.221,244,0.693,245,0.118,246,0.341,247,0.862,253,1.097,254,0.803,263,0.571,264,0.525,266,0.504,268,0.173,270,0.147,272,1.162,276,0.485,279,0.608,280,1.756,282,0.762,285,0.156,287,0.126,291,0.95,293,0.445,295,0.153,300,1.132,301,0.228,302,1.031,305,0.261,306,1.515,309,0.447,310,0.73,317,0.172,318,0.244,320,0.159,323,1.003,330,0.792,333,0.243,334,0.139,335,0.368,336,0.198,341,0.895,342,0.543,344,0.243,345,0.162,346,0.14,348,0.208,350,0.428,352,0.159,354,0.908,355,0.595,356,0.268,358,0.187,359,1.88,363,0.249,388,0.123,389,0.205,391,1.842,393,0.583,397,0.123,412,0.125,415,0.173,417,2.312,419,0.156,423,1.119,425,1.36,431,0.228,432,0.568,438,0.385,444,0.344,445,1.561,447,0.192,449,0.461,479,0.378,483,0.212,504,0.681,505,0.685,510,0.201,511,0.275,513,0.344,514,1.882,515,0.173,516,1.041,517,0.677,518,0.153,519,0.19,521,0.517,522,0.212,527,0.408,528,0.143,533,0.164,536,1.278,553,0.363,554,0.517,559,0.9,562,0.613,563,0.943,564,0.195,569,1.693,570,0.166,571,0.91,573,0.15,575,0.264,576,0.793,582,0.439,588,0.281,589,0.162,591,0.263,594,0.212,602,0.302,609,0.579,623,0.618,654,0.164,655,3.852,658,0.148,668,1.448,673,0.177,674,0.337,675,0.177,685,0.331,688,0.53,690,0.645,691,3.233,692,0.984,694,0.166,697,0.154,698,0.162,700,0.701,701,0.828,703,0.163,704,0.161,709,2.113,710,4.827,712,0.187,716,1.061,717,0.195,722,0.273,728,0.169,729,0.233,732,0.702,733,0.201,734,0.175,735,0.169,742,0.828,745,0.243,748,1.386,753,0.275,754,1.197,761,0.823,766,0.885,767,0.225,773,0.476,776,0.451,778,0.72,780,0.579,782,0.212,783,0.148,784,0.854,789,0.141,790,0.651,791,0.426,800,1.684,806,0.868,810,0.334,811,0.721,816,0.331,821,0.522,824,0.17,825,0.185,826,0.149,829,1.236,834,0.143,836,0.428,837,0.298,839,1.875,840,0.192,842,0.253,846,0.337,855,0.512,858,1.174,860,0.739,861,0.641,863,0.157,864,0.155,865,0.156,867,0.737,868,0.572,869,0.726,871,0.512,872,0.183,880,0.289,881,0.943,889,0.851,895,0.472,898,0.982,907,1.023,909,0.163,910,0.163,917,0.195,920,0.461,935,0.355,936,1.398,937,0.158,938,0.389,939,1.198,945,0.728,946,0.198,947,0.169,952,0.152,954,0.3,955,0.677,961,0.323,962,0.164,963,0.146,967,0.26,968,0.17,973,2.421,974,0.344,986,0.243,988,0.15,995,0.235,997,0.201,1004,0.436,1008,0.208,1013,0.608,1014,0.677,1017,0.267,1021,0.158,1024,0.651,1028,0.169,1032,0.583,1043,0.529,1044,1.113,1046,2.159,1058,0.179,1059,0.493,1062,0.181,1067,0.426,1068,0.154,1072,0.173,1073,0.502,1075,0.921,1099,0.284,1104,0.326,1108,0.217,1109,0.201,1117,0.149,1120,0.659,1122,0.181,1127,0.426,1130,0.657,1132,0.179,1145,0.155,1148,0.936,1151,0.534,1153,0.562,1155,0.131,1156,1.256,1158,0.296,1171,0.488,1177,0.217,1188,0.228,1194,0.279,1195,0.243,1196,0.172,1198,0.76,1199,0.185,1201,0.156,1206,0.243,1207,0.212,1208,0.359,1215,1.308,1216,0.163,1217,0.318,1218,1.213,1219,0.822,1220,0.212,1221,0.161,1222,2.137,1225,0.477,1226,1.435,1230,0.187,1232,0.173,1233,0.602,1237,0.228,1245,0.426,1250,0.841,1263,0.395,1270,0.542,1271,0.205,1272,0.907,1273,0.669,1298,0.205,1303,0.294,1306,0.235,1320,0.355,1321,0.363,1323,0.402,1325,1.67,1327,0.614,1328,0.217,1332,2.177,1341,0.426,1344,0.363,1345,0.439,1346,0.183,1352,0.212,1354,0.337,1355,0.507,1358,1.564,1361,0.212,1362,0.778,1363,0.19,1364,0.253,1365,0.17,1371,0.461,1374,0.208,1376,0.179,1381,0.395,1383,1.334,1384,0.267,1385,0.222,1386,0.235,1393,2.732,1398,1.165,1399,0.376,1400,0.448,1417,1.446,1418,0.956,1428,0.402,1431,0.228,1432,0.477,1434,0.185,1437,0.952,1449,5.207,1464,0.154,1465,0.235,1466,0.344,1469,0.701,1471,1.216,1472,0.267,1473,0.815,1474,0.235,1475,0.523,1477,0.572,1478,1.512,1485,0.222,1492,1.435,1493,0.19,1498,0.192,1500,0.368,1518,0.693,1520,0.205,1523,0.883,1525,0.228,1527,0.355,1528,0.228,1534,0.243,1536,0.228,1539,0.389,1540,0.315,1571,0.434,1575,0.169,1580,0.198,1586,0.228,1597,0.426,1598,0.409,1599,0.201,1600,0.747,1601,0.267,1603,0.222,1641,0.243,1648,0.759,1656,0.192,1666,0.19,1667,0.185,1669,0.907,1689,0.185,1691,0.175,1696,0.195,1698,0.368,1699,0.217,1703,0.222,1704,0.208,1707,0.208,1712,0.841,1713,1.12,1731,0.198,1740,0.907,1741,0.195,1745,0.243,1749,0.359,1750,0.267,1752,0.359,1753,0.402,1757,0.861,1760,0.152,1761,0.895,1762,0.334,1763,0.212,1768,0.217,1771,0.208,1772,0.228,1773,0.222,1777,0.195,1795,0.267,1796,0.465,1801,0.895,1806,0.267,1807,0.201,1811,0.19,1813,0.359,1816,0.709,1817,0.498,1819,0.523,1822,0.253,1832,0.253,1833,0.634,1835,0.267,1841,0.689,1849,0.498,1850,0.235,1852,0.595,1853,0.512,1857,0.222,1858,1.527,1859,0.775,1864,0.212,1866,0.198,1870,0.308,1881,0.359,1886,0.253,1888,0.243,1893,0.183,1897,0.217,1898,0.235,1903,0.201,1909,0.187,1911,0.177,1914,0.243,1919,0.703,1922,0.228,1925,0.235,1929,0.205,1931,1.114,1940,0.313,1941,0.659,1943,0.267,1946,0.267,1949,0.208,1951,0.331,1955,0.331,1956,0.389,1958,0.572,1959,0.198,1961,1.956,1962,0.363,1965,0.267,1966,0.253,1968,0.267,1969,0.703,1992,0.183,2007,0.205,2010,0.436,2014,0.222,2020,0.355,2023,0.841,2024,2.526,2036,0.739,2037,0.243,2039,0.145,2042,0.235,2052,0.389,2054,0.208,2059,0.243,2066,0.267,2101,0.222,2120,0.243,2137,0.426,2140,0.212,2143,0.243,2145,0.253,2146,0.498,2156,0.883,2167,0.195,2172,0.759,2173,0.773,2174,1.535,2184,0.402,2194,0.201,2201,0.719,2214,0.243,2217,0.212,2230,0.222,2235,0.217,2238,0.179,2239,0.217,2250,0.212,2257,0.205,2259,0.461,2265,0.235,2266,0.243,2268,0.222,2269,0.498,2270,0.498,2272,0.803,2277,0.659,2278,0.395,2279,0.243,2289,0.448,2292,0.592,2305,0.195,2307,0.498,2312,0.402,2331,0.448,2343,0.267,2361,0.243,2374,0.525,2379,0.267,2391,1.122,2400,0.253,2410,0.267,2414,0.267,2421,0.267,2422,0.192,2423,0.243,2425,1.613,2440,0.201,2449,0.477,2452,0.217,2457,0.592,2472,6.299,2473,0.243,2478,0.267,2482,0.235,2484,0.525,2485,0.235,2520,0.267,2526,0.417,2553,0.228,2560,0.651,2574,0.461,2577,0.417,2584,0.222,2588,0.195,2594,0.243,2597,0.602,2623,0.477,2625,0.243,2649,0.217,2688,0.201,2698,0.212,2707,0.217,2729,0.253,2742,0.222,2749,1.613,2750,0.659,2753,0.461,2755,0.243,2791,0.614,2797,0.253,2807,2.421,2810,0.253,2818,0.267,2819,0.685,2884,0.235,2887,0.267,2892,0.228,2898,0.212,2901,0.217,2902,0.187,2907,0.426,2908,0.378,2909,0.212,2910,0.243,2956,0.235,2964,0.217,2998,0.243,3021,0.222,3023,0.228,3025,0.642,3038,0.89,3039,0.243,3040,0.208,3112,0.235,3117,0.235,3118,0.498,3129,0.253,3178,0.267,3187,0.235,3189,0.217,3190,0.409,3191,0.417,3194,0.235,3195,0.602,3196,2.57,3197,3.42,3202,2.169,3224,3.945,3225,3.317,3226,3.01,3227,0.267,3228,0.525,3235,0.267,3237,0.253,3238,0.228,3239,0.253,3245,0.243,3261,0.267,3283,2.092,3285,1.891,3286,0.525,3290,0.183,3316,0.267,3319,0.477,3342,0.564,3357,2.092,3358,0.267,3363,0.659,3366,0.498,3386,0.267,3387,0.267,3390,1.012,3399,0.426,3402,0.498,3411,0.703,3421,0.921,3423,0.267,3428,0.235,3429,0.525,3437,0.267,3478,0.228,3482,1.739,3526,0.253,3581,0.525,3582,0.267,3599,0.525,3606,0.208,3611,0.436,3616,0.498,3661,0.733,3667,0.267,3671,0.267,3680,0.525,3681,0.525,3693,0.267,3705,0.217,3706,0.773,3716,0.253,3718,0.402,3723,1.391,3727,1.334,3740,0.267,3744,0.253,3746,0.253,3790,0.253,3794,0.267,3797,0.267,3798,0.267,3799,0.525,3800,0.525,3801,0.267,3803,0.525,3804,0.253,3805,0.253,3806,0.267,3808,0.267,3809,0.267,3813,0.267,3814,0.267,3817,0.267,3825,0.477,3826,0.566,3827,0.288,3828,0.288,3829,0.288,3830,0.288,3831,0.288,3832,0.288,3833,0.288,3834,0.267,3835,0.288,3836,0.288,3837,0.288,3838,0.288,3839,0.288,3840,0.288,3841,0.288,3842,0.288,3843,0.288,3844,0.288,3845,0.288,3846,0.288,3847,0.288,3848,0.288,3849,0.288,3850,0.288,3851,0.288,3852,0.288,3853,0.288,3854,0.288,3855,0.288,3856,0.566,3857,0.288,3858,0.267,3859,0.288,3860,0.566,3861,0.288,3862,0.267,3863,0.288,3864,0.288,3865,0.288,3866,0.288,3867,0.288,3868,0.288,3869,0.566,3870,0.288,3871,0.288,3872,0.267,3873,0.566,3874,0.288,3875,0.288,3876,0.288,3877,0.288,3878,0.288,3879,0.267,3880,0.288,3881,0.288,3882,0.566,3883,0.288,3884,0.288,3885,0.288,3886,0.288,3887,0.566,3888,0.288,3889,0.288,3890,0.566,3891,0.288,3892,0.288,3893,0.288,3894,0.288,3895,0.288,3896,0.288,3897,0.288,3898,0.267,3899,0.288,3900,0.288,3901,0.288,3902,0.921,3903,0.288,3904,0.288,3905,0.267,3906,0.288,3907,0.566,3908,0.288,3909,0.288,3910,0.243,3911,0.288,3912,0.228,3913,0.288,3914,0.288,3915,0.288,3916,0.288,3917,0.566,3918,0.288,3919,0.288,3920,0.288,3921,0.288,3922,0.288,3923,0.288,3924,0.96,3925,0.288,3926,1.891,3927,0.288,3928,0.288,3929,0.288,3930,0.288,3931,0.288,3932,0.288,3933,0.288,3934,0.288,3935,0.288,3936,0.288,3937,0.288,3938,0.288,3939,0.288,3940,0.288,3941,0.288,3942,0.288,3943,0.566,3944,0.288,3945,0.288,3946,0.566,3947,0.525,3948,0.288,3949,0.288,3950,0.288,3951,0.566,3952,0.288,3953,0.288,3954,0.288,3955,0.288,3956,0.566,3957,0.267,3958,0.288,3959,0.288,3960,0.288,3961,0.566,3962,0.288,3963,0.288,3964,0.288,3965,0.288,3966,0.288,3967,0.288,3968,0.288,3969,0.288,3970,0.288,3971,0.288,3972,0.288,3973,0.288,3974,0.288,3975,0.288,3976,0.288,3977,0.288,3978,0.566,3979,0.288,3980,0.288,3981,0.288,3982,0.288,3983,0.288,3984,0.288,3985,0.267,3986,0.288,3987,0.288,3988,0.288,3989,0.288,3990,0.288,3991,0.288,3992,0.566,3993,0.288,3994,0.288,3995,0.288,3996,0.288,3997,0.288,3998,0.288,3999,0.288,4000,0.525,4001,0.288,4002,0.566,4003,0.288,4004,0.288,4005,0.566,4006,0.288,4007,0.288,4008,0.288,4009,0.566,4010,0.461,4011,0.566,4012,0.288,4013,0.566,4014,0.288,4015,0.733,4016,0.267,4017,0.288,4018,0.566,4019,0.288,4020,0.566,4021,0.288,4022,0.288,4023,0.288,4024,0.288,4025,0.288,4026,0.566,4027,0.288,4028,0.566,4029,0.525,4030,0.288,4031,0.96,4032,0.288,4033,0.288,4034,0.566,4035,1.341,4036,0.288,4037,0.288,4038,0.267,4039,0.566,4040,0.288,4041,0.288,4042,0.288,4043,0.288,4044,0.566,4045,0.288,4046,0.733,4047,0.288,4048,0.288,4049,0.288,4050,0.288,4051,0.235,4052,0.288,4053,0.288,4054,0.288,4055,0.288,4056,0.288,4057,0.288,4058,0.288,4059,0.566,4060,0.288,4061,0.288,4062,0.566,4063,0.288,4064,0.253,4065,0.288,4066,0.288,4067,0.566,4068,0.288,4069,0.288,4070,0.288,4071,0.288,4072,0.566,4073,0.288,4074,0.566,4075,0.288,4076,0.288,4077,0.477,4078,0.566,4079,0.288,4080,0.566,4081,0.288,4082,0.288,4083,0.288,4084,0.288,4085,0.566,4086,0.288,4087,0.267,4088,0.288,4089,0.267,4090,0.288,4091,0.288,4092,0.288,4093,0.288,4094,0.288,4095,0.566,4096,1.243,4097,0.288,4098,0.566,4099,0.288,4100,0.288,4101,0.288,4102,0.288,4103,0.288,4104,0.288,4105,0.288,4106,0.288,4107,0.288,4108,0.288,4109,0.288,4110,0.288,4111,0.288,4112,0.288,4113,0.566,4114,0.288,4115,0.525,4116,0.288,4117,0.267,4118,0.288,4119,0.288,4120,0.566,4121,0.288,4122,0.288,4123,0.288,4124,0.288,4125,0.566,4126,0.566,4127,0.525,4128,0.288,4129,0.566,4130,0.288,4131,0.498,4132,0.288,4133,0.288,4134,0.288,4135,0.267,4136,0.288,4137,0.288,4138,0.566,4139,0.288,4140,1.793,4141,0.288,4142,0.288,4143,0.267,4144,0.288,4145,0.288,4146,0.566,4147,0.288,4148,0.288,4149,0.243,4150,0.288,4151,0.288,4152,0.288,4153,0.288,4154,0.288,4155,0.288,4156,0.288,4157,0.267,4158,0.288,4159,0.566,4160,0.288,4161,0.267,4162,0.288,4163,0.288,4164,0.253,4165,0.288,4166,0.566,4167,0.288,4168,0.253,4169,0.288,4170,0.566,4171,0.288,4172,0.288,4173,0.288,4174,0.566,4175,0.288,4176,0.426,4177,0.267,4178,0.267,4179,0.288,4180,0.288,4181,0.243,4182,0.288,4183,0.288,4184,0.253,4185,0.833,4186,0.253,4187,0.267,4188,0.288,4189,0.288,4190,0.288,4191,0.288,4192,0.288,4193,1.341,4194,0.288,4195,0.288,4196,0.267,4197,0.288,4198,0.288,4199,0.288,4200,0.566,4201,0.525,4202,0.288,4203,0.288,4204,0.288,4205,0.288,4206,0.288,4207,0.288,4208,0.288,4209,1.092,4210,0.288,4211,0.288,4212,0.566,4213,0.288,4214,0.288,4215,0.498,4216,0.288,4217,0.288,4218,0.288,4219,0.288,4220,0.288,4221,0.288,4222,0.267,4223,0.288,4224,0.566,4225,0.288,4226,0.288,4227,0.288,4228,0.288,4229,0.288,4230,0.267,4231,0.288,4232,0.288,4233,0.288,4234,0.288,4235,0.288,4236,0.498,4237,0.288,4238,0.288,4239,0.409,4240,0.498,4241,0.288,4242,0.288,4243,0.253,4244,0.235,4245,0.288,4246,0.253,4247,0.288,4248,0.288,4249,0.267,4250,0.288,4251,0.288,4252,0.288,4253,0.477,4254,0.566,4255,0.288,4256,0.288,4257,0.288,4258,0.288,4259,0.288,4260,0.288,4261,0.288,4262,0.267,4263,0.288,4264,0.222,4265,0.288,4266,0.267,4267,0.235,4268,0.228,4269,0.288,4270,0.288,4271,0.426,4272,0.288,4273,0.288,4274,0.288,4275,0.288,4276,0.288,4277,0.288,4278,0.566,4279,0.288,4280,0.208,4281,0.253,4282,0.288,4283,0.288,4284,0.267,4285,0.288,4286,0.288,4287,0.288,4288,0.288,4289,0.288,4290,0.477,4291,0.288,4292,0.267,4293,0.288,4294,0.288,4295,0.288,4296,0.288,4297,0.288,4298,0.288,4299,0.498,4300,0.288,4301,0.288,4302,0.288,4303,0.288,4304,0.288,4305,0.267,4306,0.288,4307,0.288,4308,0.288,4309,0.288,4310,0.288,4311,0.288,4312,0.288,4313,0.288,4314,0.253,4315,0.288,4316,0.288,4317,0.288,4318,0.288,4319,0.267,4320,0.243,4321,0.288,4322,0.288,4323,0.288,4324,0.288,4325,0.288,4326,0.288,4327,0.417,4328,0.288,4329,0.288,4330,0.288,4331,0.288]],["component/61",[1,0.349,2,0.663,18,0.6]],["title/62",[1911,57.826]],["name/62",[1911,2.099]],["text/62",[1,0.354,10,0.748,13,1.48,21,2.745,26,0.985,28,2.4,34,2.18,37,1.591,44,1.686,48,0.877,51,1.776,52,0.735,73,0.916,82,1.447,94,0.496,118,1.057,122,1.077,125,1.021,132,1.271,140,1.093,142,2.149,151,1.698,167,1.404,176,3.474,177,1.009,181,1.342,184,1.072,190,4.835,219,2.516,239,1.854,242,1.053,243,1.524,253,1.549,263,0.992,279,0.897,280,0.962,309,3.892,310,0.938,335,1.03,344,1,350,1.198,386,2.828,397,2.732,412,2.324,417,1.184,443,1.447,444,2.463,514,2.022,527,0.872,530,1.797,591,2.493,635,3.451,655,1.138,668,1.917,688,1.132,692,1.017,716,1.213,732,1.221,754,0.74,778,0.823,789,1.138,793,1.418,807,6.827,811,1.254,829,2.765,856,2.847,889,1.48,939,1.132,947,1.366,954,1.237,967,1.072,969,2.045,971,4.377,988,2.108,1013,1.3,1062,2.542,1148,1.628,1155,4.13,1156,1.774,1158,3.36,1166,5.059,1194,1.151,1198,4.748,1209,2.489,1215,6.059,1217,3.018,1345,1.229,1389,1.686,1404,4.046,1420,2.951,1438,1.901,1466,1.418,1515,2.828,1539,1.602,1575,3.759,1666,4.226,1724,5.953,1754,1.967,1866,1.602,1870,1.271,1904,5.761,1911,7.016,1941,3.206,2039,2.045,2160,5.415,2222,3.758,2502,4.556,2707,1.756,3342,1.578,3448,2.163,3756,1.967,4332,6.74,4333,5.645,4334,2.163,4335,2.332,4336,4.053,4337,2.332,4338,2.051,4339,2.332,4340,2.332,4341,2.332,4342,2.332,4343,3.051,4344,4.053,4345,7.972,4346,3.758,4347,4.053,4348,4.053,4349,7.972,4350,4.053,4351,9.068,4352,4.053,4353,4.053,4354,4.053,4355,4.053,4356,4.053,4357,5.953,4358,4.053]],["component/62",[1,0.349,2,0.663,18,0.6]],["title/63-1",[813,56.384,1846,61.717]],["name/63-1",[]],["text/63-1",[]],["component/63-1",[]],["title/63-2",[28,19.699,80,31.159]],["name/63-2",[]],["text/63-2",[]],["component/63-2",[]],["title/63-3",[444,47.427,654,44.528]],["name/63-3",[]],["text/63-3",[]],["component/63-3",[]],["title/63-4",[49,44.169,1215,41.374]],["name/63-4",[]],["text/63-4",[]],["component/63-4",[]],["title/63-5",[26,32.937,1215,41.374]],["name/63-5",[]],["text/63-5",[]],["component/63-5",[]],["title/63-6",[73,22.803,341,32.889,1215,44.768]],["name/63-6",[]],["text/63-6",[]],["component/63-6",[]],["title/63-7",[4051,76.733]],["name/63-7",[]],["text/63-7",[]],["component/63-7",[]],["title/63-8",[4359,79.426]],["name/63-8",[]],["text/63-8",[]],["component/63-8",[]],["title/63-9",[4360,76.733]],["name/63-9",[]],["text/63-9",[]],["component/63-9",[]],["title/63-10",[323,59.747]],["name/63-10",[]],["text/63-10",[]],["component/63-10",[]],["title/63-11",[94,16.583,1215,41.374]],["name/63-11",[]],["text/63-11",[]],["component/63-11",[]],["title/63-12",[1,10.112,51,22.015,94,14.156]],["name/63-12",[]],["text/63-12",[]],["component/63-12",[]],["title/63-13",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/63-13",[]],["text/63-13",[]],["component/63-13",[]],["title/63-14",[1,10.112,51,22.015,94,14.156]],["name/63-14",[]],["text/63-14",[]],["component/63-14",[]],["title/63-15",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/63-15",[]],["text/63-15",[]],["component/63-15",[]],["title/63",[881,35.991]],["name/63",[881,1.307]],["text/63",[1,1.131,4,1.146,7,0.919,10,2.06,13,0.509,15,1.414,16,0.551,18,0.399,22,0.871,26,2.831,28,2.656,34,2.748,35,1.005,36,1.901,37,1.681,38,1.334,40,0.702,44,0.58,48,1.611,49,0.455,51,0.505,52,0.687,54,0.331,59,0.315,60,1.268,66,0.429,69,0.522,71,0.347,72,0.943,73,2.924,80,1.527,82,1.682,86,0.479,94,1.757,95,0.247,99,1.082,102,0.57,103,0.483,106,0.741,109,0.536,111,0.423,114,1.322,118,0.364,120,0.828,122,0.705,125,0.955,127,0.689,128,1.018,131,0.462,135,1.94,140,0.376,142,2.706,147,1.168,151,0.336,155,0.515,159,1.585,164,3,166,1.053,172,1.204,175,0.803,176,2.047,177,0.347,184,1.527,186,0.925,188,0.642,190,3.198,192,0.396,196,1.436,199,0.851,201,0.877,219,0.528,229,0.498,232,0.287,237,1.461,239,0.367,242,0.985,243,2.057,244,1.95,245,0.33,250,1.695,253,1.461,254,0.601,263,1.627,264,1.087,266,1.007,270,0.41,272,2.44,276,0.552,279,3.694,280,0.331,283,0.851,302,2.588,305,0.371,306,0.338,309,2.632,310,1.723,318,0.346,323,3.237,330,0.848,335,0.963,336,0.551,341,2.425,342,1.125,344,0.344,345,0.451,350,0.784,354,0.562,356,0.38,363,0.353,373,0.932,388,0.652,393,0.429,395,0.902,397,0.342,417,0.775,423,1.378,425,1.392,435,0.41,438,1.007,439,1.053,444,4.076,449,1.207,479,0.536,504,0.346,511,0.741,514,0.401,518,0.426,527,1.601,528,0.398,530,0.677,533,0.458,536,0.455,538,0.522,544,0.635,553,0.515,559,0.757,560,1.308,562,0.857,563,0.91,568,1.005,570,0.878,573,1.728,576,1.918,582,1.464,589,0.857,591,0.708,602,1.165,635,0.432,654,3.668,668,3.524,674,1.656,675,1.34,679,1.783,699,0.432,702,1.176,710,0.42,711,0.462,715,1.018,716,0.794,722,0.737,729,2.248,732,0.42,733,0.56,737,0.635,741,0.618,753,1.059,754,1.844,767,0.607,777,1.125,778,0.283,780,0.809,783,0.412,784,1.564,789,1.065,790,0.479,793,1.326,811,2.531,813,2.763,820,0.47,821,0.384,824,0.474,826,0.415,829,3.559,836,0.412,838,0.522,839,0.367,845,0.677,858,2.35,861,0.384,867,0.374,869,1.799,880,0.41,881,1.95,889,0.509,898,0.435,927,0.408,937,0.838,945,0.536,952,1.751,954,0.809,962,0.458,967,1.003,988,1.135,997,0.56,1012,0.654,1023,1.005,1030,0.82,1032,0.815,1058,0.498,1075,0.408,1104,0.462,1122,0.958,1129,0.654,1132,0.498,1150,0.844,1151,0.32,1153,0.914,1155,1.513,1156,1.875,1158,0.42,1185,0.458,1194,0.753,1198,1.048,1199,0.515,1214,0.635,1215,6.88,1216,0.455,1217,2.645,1218,3.123,1232,0.919,1252,0.522,1256,0.528,1265,0.677,1270,0.522,1273,0.761,1298,0.57,1302,0.706,1304,0.515,1317,1.56,1323,1.083,1324,0.47,1327,0.592,1328,0.604,1337,0.635,1341,2.187,1345,0.423,1360,0.551,1369,0.619,1370,1.287,1376,0.498,1404,0.775,1417,1.181,1418,0.925,1420,1.525,1435,0.604,1436,0.619,1441,0.91,1446,0.498,1461,0.56,1466,0.488,1467,0.551,1473,0.488,1477,1.048,1480,0.504,1484,0.543,1507,0.56,1518,1.763,1525,0.635,1539,0.551,1540,0.447,1583,0.58,1591,0.515,1603,1.176,1652,0.522,1666,0.528,1691,0.488,1692,0.58,1696,2.587,1698,0.992,1714,0.504,1718,0.551,1742,0.91,1753,0.57,1758,0.826,1762,1.289,1796,0.447,1803,0.56,1813,0.509,1819,0.958,1841,0.784,1843,0.551,1846,3.024,1852,0.438,1859,0.57,1867,0.604,1870,1.811,1881,0.509,1889,1.778,1890,0.635,1891,0.551,1897,0.604,1909,0.522,1911,4.118,1936,0.58,1941,0.635,1955,0.894,1957,0.58,1958,1.498,1959,0.551,1962,0.515,1984,1.384,1992,0.968,2024,0.592,2039,0.405,2040,0.58,2077,0.528,2088,1.083,2119,0.604,2185,0.706,2215,0.928,2221,0.58,2234,1.908,2239,0.604,2250,1.608,2272,0.408,2278,1.065,2279,0.677,2305,0.543,2327,0.706,2330,1.342,2344,1.018,2364,1.287,2375,0.592,2388,0.635,2422,0.536,2427,0.604,2440,1.522,2577,0.592,2647,0.677,2756,0.551,2759,0.706,2836,0.592,2905,0.58,2930,0.58,2956,0.654,3001,1.726,3032,0.677,3381,5.108,3585,0.744,4031,3.361,4051,2.708,4333,1.342,4334,3.081,4346,2.023,4357,0.744,4359,2.343,4360,2.708,4361,0.744,4362,0.803,4363,0.803,4364,0.803,4365,0.706,4366,0.744,4367,0.744,4368,0.744,4369,0.803,4370,1.415,4371,0.803,4372,1.526,4373,0.803,4374,0.744,4375,0.803,4376,0.803,4377,1.526,4378,0.803,4379,0.803,4380,0.803,4381,0.803,4382,2.576,4383,1.526,4384,1.526,4385,0.803,4386,0.635,4387,0.803,4388,0.803,4389,0.677,4390,1.415,4391,1.415,4392,0.744,4393,1.415,4394,1.415,4395,0.744,4396,0.635,4397,0.744,4398,0.744,4399,0.744,4400,0.744,4401,1.415,4402,0.744,4403,0.744,4404,0.744,4405,0.744,4406,0.744,4407,0.744,4408,0.654,4409,0.604,4410,0.635,4411,0.706,4412,0.803,4413,3.081,4414,0.803,4415,2.023,4416,1.526,4417,0.803,4418,0.803,4419,1.526,4420,0.635,4421,0.803,4422,0.803,4423,0.803,4424,0.803,4425,0.803,4426,0.803,4427,0.744,4428,0.744,4429,0.803,4430,0.744,4431,0.803]],["component/63",[1,0.349,2,0.663,18,0.6]],["title/64",[1215,49.938]],["name/64",[3,1.478]],["text/64",[1,1.938,2,3.687,10,3.248,18,1.971,26,3.185,32,5.144,34,3.13,49,4.27,54,3.112,56,2.992,111,3.974,225,4.705,228,6.506,245,3.101,332,3.374,334,3.642,344,3.235,504,3.249,528,3.742,575,3.517,768,3.875,867,3.517,881,3.873,961,4.305,1156,3.303,1171,4.416,1212,4.341,1215,6.77,1216,4.27,1217,4.237,1271,5.354,1273,3.763,1441,4.498,1911,6.223,1912,5.559]],["component/64",[1,0.349,2,0.663,18,0.6]],["title/65-1",[26,32.937,1215,41.374]],["name/65-1",[]],["text/65-1",[]],["component/65-1",[]],["title/65-2",[1,10.112,51,22.015,94,14.156]],["name/65-2",[]],["text/65-2",[]],["component/65-2",[]],["title/65-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/65-3",[]],["text/65-3",[]],["component/65-3",[]],["title/65-4",[73,22.803,341,32.889,1215,44.768]],["name/65-4",[]],["text/65-4",[]],["component/65-4",[]],["title/65-5",[4051,76.733]],["name/65-5",[]],["text/65-5",[]],["component/65-5",[]],["title/65-6",[4359,79.426]],["name/65-6",[]],["text/65-6",[]],["component/65-6",[]],["title/65-7",[4360,76.733]],["name/65-7",[]],["text/65-7",[]],["component/65-7",[]],["title/65-8",[323,59.747]],["name/65-8",[]],["text/65-8",[]],["component/65-8",[]],["title/65",[49,53.311]],["name/65",[49,1.935]],["text/65",[1,1.269,4,1.217,10,2.549,13,1.034,15,1.718,16,1.12,18,0.77,26,2.702,28,1.616,34,3.086,35,1.941,36,1.63,37,2.249,38,2.378,48,1.518,49,0.923,51,0.539,52,0.513,54,0.673,60,1.697,66,0.87,71,0.705,72,1.275,73,3.872,80,1.612,82,2.046,86,0.972,90,0.732,94,1.69,99,2.003,102,1.157,106,0.791,107,1.023,109,1.087,111,0.859,114,1.971,118,0.739,120,1.12,122,0.753,125,1.291,128,1.087,135,3.249,142,4.432,147,2.082,159,2.304,164,3.738,166,0.787,175,1.486,184,0.749,186,0.691,190,3.424,192,0.804,196,2.087,201,0.656,219,1.021,229,1.83,232,0.582,237,1.775,242,0.736,243,1.862,244,1.127,250,1.308,253,1.892,254,1.161,263,1.718,264,0.638,266,1.362,272,1.88,279,4.34,280,1.217,283,0.908,302,3.069,305,0.753,306,1.24,309,2.347,318,0.702,323,5.045,330,0.633,335,0.72,336,1.12,341,2.286,342,1.636,344,0.699,354,0.6,356,0.771,388,0.696,395,1.742,423,2.003,425,1.691,435,0.832,438,0.753,439,0.787,449,0.902,504,0.702,505,0.832,510,1.137,511,1.96,527,0.609,538,1.059,544,1.289,553,1.046,560,0.767,563,0.972,568,1.073,573,1.534,576,2.026,589,0.915,591,0.756,602,2.155,668,0.771,674,0.972,699,0.876,702,1.256,710,0.853,716,1.534,722,0.787,729,2.035,737,1.289,741,1.194,753,1.96,754,0.517,767,1.173,777,2.173,778,0.575,783,0.837,784,2.697,813,2.131,820,0.954,821,0.779,826,0.842,839,0.746,858,1.131,869,3.101,880,0.832,881,2.67,952,2.609,954,0.864,967,0.749,988,0.848,1023,1.941,1030,0.876,1058,1.011,1059,0.736,1129,1.328,1146,1.137,1153,0.683,1155,1.343,1156,1.291,1198,1.416,1214,1.289,1215,6.591,1218,4.492,1232,0.981,1265,1.375,1273,0.813,1317,0.915,1323,2.093,1328,1.227,1376,1.011,1417,0.882,1418,0.691,1461,1.137,1473,0.991,1477,2.025,1518,2.562,1539,1.12,1603,2.272,1652,1.059,1691,0.991,1692,1.178,1696,4.331,1718,1.12,1742,1.758,1796,0.908,1819,1.023,1841,1.515,1843,1.12,1846,2.332,1867,1.227,1870,1.607,1889,1.328,1890,1.289,1911,3.93,1936,1.178,1957,1.178,1958,1.12,1962,1.046,1992,1.871,2088,2.093,2119,1.227,2238,1.011,2239,1.227,2250,2.975,2278,1.137,2279,1.375,2330,2.593,2340,3.816,2364,2.487,2383,2.403,2440,1.137,2759,1.433,2836,1.201,2905,1.178,3001,1.289,3381,7.348,4031,5.628,4051,5.691,4359,3.405,4360,5.215,4382,3.743,4389,1.375,4390,2.734,4391,2.734,4392,1.511,4393,2.734,4394,1.511,4395,1.511,4396,1.289,4397,1.511,4398,1.511,4399,1.511,4400,1.511,4401,2.734,4402,2.734,4403,1.511,4404,1.511,4405,1.511,4406,1.511,4407,1.511,4408,1.328,4409,1.227,4410,1.289,4411,1.433,4413,1.511,4415,1.511,4420,1.289,4427,1.511,4428,2.734,4430,1.511,4432,1.63,4433,1.63,4434,1.63,4435,1.63,4436,1.63]],["component/65",[1,0.349,2,0.663,18,0.6]],["title/66-1",[21,21.347,516,34.007,1221,37.119]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[516,39.838,698,43.821]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66-3",[162,54.446,575,36.374]],["name/66-3",[]],["text/66-3",[]],["component/66-3",[]],["title/66-4",[162,46.476,356,31.509,516,34.007]],["name/66-4",[]],["text/66-4",[]],["component/66-4",[]],["title/66-5",[162,54.446,559,38.703]],["name/66-5",[]],["text/66-5",[]],["component/66-5",[]],["title/66-6",[21,21.347,559,33.037,939,32.327]],["name/66-6",[]],["text/66-6",[]],["component/66-6",[]],["title/66-7",[28,16.815,559,33.037,789,32.5]],["name/66-7",[]],["text/66-7",[]],["component/66-7",[]],["title/66-8",[559,33.037,576,33.413,973,26.598]],["name/66-8",[]],["text/66-8",[]],["component/66-8",[]],["title/66-9",[25,44.169,559,38.703]],["name/66-9",[]],["text/66-9",[]],["component/66-9",[]],["title/66",[21,21.347,28,16.815,190,23.115]],["name/66",[21,0.64,28,0.504]],["text/66",[0,0.425,1,0.427,2,0.447,4,0.228,10,2.431,11,0.38,15,0.85,18,0.279,19,0.251,21,3.17,25,4.813,28,2.943,34,2.597,36,1.428,37,1.25,40,0.254,41,0.364,42,0.374,45,0.308,48,0.208,49,0.604,51,0.512,59,0.419,69,0.359,71,0.239,72,0.462,73,1.25,80,1.67,82,0.381,85,0.327,89,1.562,90,0.248,94,0.677,95,1.964,99,0.274,106,0.751,110,1.994,114,0.962,118,0.251,122,0.922,123,0.248,124,0.343,125,0.242,135,0.542,140,0.259,141,1.033,147,0.449,149,0.505,151,0.447,155,0.994,161,0.355,162,5.078,164,0.478,166,1.359,171,0.288,172,0.387,175,0.89,176,0.51,177,0.239,189,0.257,190,3.029,192,0.764,197,0.351,199,0.308,200,0.297,201,0.973,217,0.347,219,0.536,227,0.324,236,1.052,237,0.469,242,1.091,243,1.573,244,1.218,250,1.854,253,1.819,263,0.454,264,1.513,266,0.255,272,0.758,276,1.278,279,0.768,280,0.639,295,0.293,300,1.192,302,0.597,305,0.493,306,0.651,309,1.305,310,0.429,318,0.238,320,0.306,329,0.321,330,0.94,332,0.893,334,0.267,335,0.471,336,1.063,341,0.876,342,0.98,344,1.037,347,0.81,350,0.284,354,0.735,355,0.844,356,2.927,359,0.34,362,0.306,363,2.627,373,0.236,391,0.355,392,0.982,395,0.327,397,1.197,417,0.542,423,1.2,425,0.447,431,1.224,437,0.288,438,0.493,439,0.516,443,0.343,444,0.336,456,0.386,504,0.86,511,0.518,514,0.276,516,5.124,519,0.364,527,1.052,528,0.274,529,0.273,530,0.473,538,0.694,551,0.33,559,4.159,560,1.665,561,0.333,562,0.6,567,0.426,568,0.364,569,1.762,575,5.066,576,3.394,582,5.287,583,0.237,588,0.991,589,0.311,591,0.495,602,1.701,609,1.282,642,0.324,654,0.609,668,1.144,688,1.366,690,0.327,698,0.311,701,0.559,711,0.614,712,0.359,716,1.258,728,0.906,729,1.957,732,0.289,741,0.627,749,0.498,753,0.268,754,1.676,760,3.541,761,0.805,764,0.347,775,0.343,783,0.284,784,1.5,789,0.755,790,0.637,791,0.282,793,0.649,800,0.192,811,0.297,817,1.918,821,0.954,826,0.552,829,3.611,831,0.9,835,0.407,836,1.026,837,0.291,838,0.359,839,0.253,861,0.954,867,0.498,881,1.075,885,0.392,895,0.604,907,0.536,917,0.374,937,0.586,938,0.38,939,2.9,954,1.059,967,0.254,969,0.539,971,0.586,973,3.757,975,2.129,979,0.355,982,0.876,987,0.386,988,1.258,996,0.374,997,0.386,1004,0.289,1014,0.343,1028,0.324,1030,0.297,1044,4.357,1046,3.259,1059,0.482,1062,0.347,1068,0.57,1069,0.663,1071,0.386,1073,0.643,1099,0.277,1106,0.426,1136,0.304,1145,0.297,1150,0.306,1153,2.908,1155,1.101,1156,1.693,1158,1.045,1159,1.253,1162,0.386,1180,0.694,1185,1.14,1194,0.764,1196,0.33,1198,0.513,1200,0.347,1201,0.838,1209,0.656,1211,0.87,1221,1.113,1230,0.359,1232,0.333,1233,1.119,1234,0.787,1250,7.111,1251,0.359,1268,0.38,1269,0.845,1272,0.722,1298,0.758,1304,0.994,1324,0.324,1336,0.87,1341,1.235,1345,2.038,1346,0.351,1351,0.426,1355,0.336,1367,0.787,1376,0.343,1385,0.426,1398,0.355,1399,0.25,1404,1.227,1418,1.772,1441,0.33,1442,2.033,1463,0.6,1466,0.941,1469,0.685,1471,1.191,1473,0.336,1475,0.67,1478,1.369,1484,0.374,1488,0.351,1507,0.386,1526,0.582,1540,0.308,1571,0.805,1591,0.355,1593,0.416,1597,0.416,1600,0.595,1648,1.131,1695,1.472,1696,0.722,1699,0.416,1702,0.9,1707,2.302,1708,0.722,1712,0.971,1717,0.364,1718,0.38,1742,0.33,1749,0.351,1752,0.677,1758,0.578,1762,0.914,1766,0.513,1770,0.466,1792,0.939,1796,1.348,1798,0.486,1799,1.417,1801,0.369,1803,4.592,1819,0.67,1821,0.437,1833,0.321,1841,0.284,1843,0.38,1850,0.451,1851,0.466,1852,0.582,1861,0.486,1870,0.301,1900,0.4,1909,2.298,1929,0.392,1940,3.64,1941,0.437,1945,1.261,1949,0.4,1958,3.453,2039,0.279,2142,1.261,2147,3.022,2148,3.649,2172,0.313,2184,0.758,2198,1.165,2201,0.364,2225,0.9,2230,0.426,2292,0.392,2305,0.722,2328,0.513,2344,0.712,2370,0.451,2375,0.407,2378,1.165,2391,0.758,2420,0.513,2427,0.804,2451,0.772,2502,0.392,2532,0.823,2560,0.33,2574,0.87,2624,0.772,2630,0.9,2667,2.302,2668,0.513,2736,0.939,2737,0.466,2743,0.486,2756,0.38,2792,0.374,2800,0.513,3183,0.513,3319,1.306,3361,0.513,3363,1.224,3410,0.513,3411,9.122,3499,1.435,3533,0.466,3572,0.513,3602,0.466,3611,0.823,3612,0.451,3736,1.361,3756,0.466,3957,0.513,4230,0.99,4338,0.486,4437,0.553,4438,0.553,4439,0.553,4440,0.513,4441,0.804,4442,0.426,4443,0.553,4444,0.553,4445,1.068,4446,0.553,4447,1.435,4448,0.553,4449,0.553,4450,1.068,4451,1.435,4452,0.553,4453,0.486,4454,0.553,4455,1.548,4456,0.553,4457,0.553,4458,0.553,4459,0.553,4460,0.553,4461,0.553,4462,0.939,4463,1.068,4464,0.451,4465,0.451,4466,0.553,4467,0.553,4468,0.553,4469,0.553,4470,0.553,4471,0.553,4472,0.513,4473,0.553,4474,0.553,4475,0.553,4476,0.553,4477,0.553,4478,1.068,4479,0.553,4480,0.553,4481,0.553,4482,0.553,4483,0.553,4484,0.553,4485,0.553,4486,1.068,4487,0.553,4488,0.553,4489,0.513,4490,0.553,4491,0.553,4492,0.553,4493,0.553,4494,0.99,4495,0.553,4496,1.068,4497,0.466,4498,0.553,4499,0.513,4500,0.553,4501,0.553,4502,0.553,4503,0.553,4504,0.553,4505,0.553,4506,0.553,4507,0.553,4508,0.553,4509,0.553,4510,0.553,4511,0.553,4512,0.553,4513,0.553,4514,0.553,4515,0.553,4516,0.553,4517,0.553,4518,0.513,4519,0.553,4520,0.553,4521,0.553,4522,0.513,4523,0.513,4524,0.513,4525,0.553,4526,0.553,4527,0.553,4528,1.548,4529,0.553,4530,0.486,4531,0.486,4532,0.553,4533,0.486,4534,0.553,4535,0.553,4536,0.553,4537,0.553,4538,0.553,4539,0.553,4540,0.553,4541,1.548,4542,1.548,4543,1.548,4544,0.553,4545,0.553,4546,0.553,4547,0.553,4548,0.553,4549,0.553,4550,0.553,4551,0.553,4552,0.553,4553,0.553,4554,0.553,4555,0.553,4556,0.553,4557,0.553,4558,0.553,4559,0.553,4560,0.553,4561,0.466,4562,0.553,4563,0.553,4564,0.553,4565,0.466,4566,0.553,4567,0.553,4568,0.553,4569,0.553,4570,0.553,4571,0.553,4572,0.553,4573,0.553,4574,0.553,4575,0.553,4576,0.553,4577,0.553,4578,0.553,4579,0.553,4580,0.553,4581,0.553,4582,0.553,4583,0.553,4584,0.553,4585,0.553,4586,0.553,4587,0.553,4588,0.553]],["component/66",[1,0.349,2,0.663,18,0.6]],["title/67",[516,48.084]],["name/67",[3,1.478]],["text/67",[1,1.947,2,3.553,10,3.943,18,1.997,21,2.45,28,1.93,56,3.031,60,2.263,111,6.481,149,3.616,190,2.653,225,4.736,228,6.563,332,3.419,334,4.937,417,3.879,504,3.291,516,6.737,528,3.791,575,3.563,768,3.926,961,4.362,1099,3.835,1171,4.475,1212,4.398,1215,6.11,1742,4.557,1912,5.632,4589,10.224]],["component/67",[1,0.349,2,0.663,18,0.6]],["title/68",[1215,49.938]],["name/68",[438,0.922,1215,1.059]],["text/68",[1,0.323,10,2.197,15,0.905,21,3.617,26,0.898,28,2.75,34,3.035,36,2.019,48,1.406,54,0.878,59,0.835,80,2.404,82,1.335,95,0.654,114,4.416,118,0.964,122,1.726,125,1.637,151,1.566,155,1.365,162,4.201,166,1.027,172,0.771,175,0.783,177,2.965,190,1.298,192,1.049,197,1.349,201,0.855,219,1.731,225,0.874,232,1.335,242,0.96,250,1.658,253,2.301,276,0.769,279,1.924,280,0.878,283,1.185,309,0.871,330,1.453,332,0.951,334,1.027,342,0.862,347,2.618,354,0.783,356,1.769,363,0.935,388,0.909,391,1.365,395,2.209,397,1.591,421,1.113,440,1.159,444,4.168,516,5.666,527,1.397,529,1.049,530,0.943,575,2.806,576,2.51,582,1.12,583,0.912,588,1.055,602,2.671,646,3.385,654,5.197,668,1.006,711,1.224,716,3.131,729,3.56,732,1.113,735,2.189,741,1.515,759,2.117,760,1.113,773,1.214,783,1.093,784,1.001,791,3.501,793,1.293,807,1.601,809,1.293,817,1.28,821,1.016,826,1.099,829,2.952,836,2.57,838,1.382,847,1.365,856,0.943,881,0.813,907,1.067,931,2.653,939,1.032,954,2.653,967,1.718,969,1.073,973,0.849,1012,1.733,1044,1.049,1059,1.687,1067,1.601,1075,1.08,1092,1.567,1094,1.639,1099,1.067,1136,1.168,1153,3.414,1155,1.703,1156,0.931,1194,2.468,1201,1.151,1215,5.776,1250,8.827,1256,2.461,1341,1.086,1345,3.612,1370,1.794,1418,2.12,1434,3.864,1469,1.365,1493,1.4,1509,1.567,1524,3.337,1600,1.185,1667,6.095,1700,4.076,1707,4.955,1771,1.537,1796,4.543,1803,1.484,1813,1.349,1833,1.234,1841,1.093,1870,1.159,1926,1.639,1929,1.509,1940,5.037,1944,1.365,1952,4.35,2033,1.4,2099,1.509,2138,1.87,2147,1.537,2160,1.794,2193,1.972,2197,1.87,2201,2.461,2216,1.794,2221,1.537,2399,1.509,2560,1.268,2647,1.794,2709,1.484,2756,4.135,2792,2.53,2836,1.567,3068,1.484,3612,1.733,3765,1.87,4343,1.601,4447,1.972,4499,3.466,4590,4.398,4591,2.127,4592,2.127,4593,2.127,4594,2.127,4595,2.127,4596,2.127,4597,5.002,4598,2.127,4599,2.127,4600,2.127,4601,2.127,4602,3.739,4603,3.739,4604,6.019,4605,1.733,4606,1.972,4607,1.972,4608,2.127,4609,2.127,4610,2.127,4611,2.127]],["component/68",[1,0.349,2,0.663,18,0.6]],["title/69-1",[21,18.621,754,18.435,1325,39.312,1853,35.675]],["name/69-1",[]],["text/69-1",[]],["component/69-1",[]],["title/69-2",[1,10.112,51,22.015,94,14.156]],["name/69-2",[]],["text/69-2",[]],["component/69-2",[]],["title/69-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/69-3",[]],["text/69-3",[]],["component/69-3",[]],["title/69",[21,25.007,232,27.865]],["name/69",[21,0.64,232,0.713]],["text/69",[1,1.245,10,2.628,21,3.951,22,3.185,34,2.657,48,2.099,60,2.427,80,2.229,94,2.276,95,1.716,125,3.589,143,3.239,151,2.338,164,3.667,190,3.717,196,2.884,232,1.993,250,2.475,272,2.119,276,2.017,291,2.921,302,2.154,309,2.286,347,2.921,433,4.414,440,3.042,505,2.85,527,2.086,575,2.602,592,3.392,729,2.294,754,3.62,766,4,795,3.894,821,2.667,829,4.184,836,2.867,867,2.602,881,2.133,907,2.8,997,3.894,1073,3.359,1153,2.338,1155,2.541,1156,4.254,1166,3.297,1325,5.547,1417,3.021,1418,4.118,1449,4.934,1466,3.392,1752,3.541,1811,3.674,1813,3.541,1853,5.967,1858,5.547,1860,9.929,1989,3.833,1992,3.541,2383,6.68,2821,4.414,4612,5.581,4613,7.601,4614,5.581,4615,5.581,4616,5.581,4617,5.581,4618,5.581,4619,8.198]],["component/69",[1,0.349,2,0.663,18,0.6]],["title/70-1",[828,37.295,955,29.316,2046,36.859,4620,42.813]],["name/70-1",[]],["text/70-1",[]],["component/70-1",[]],["title/70-2",[1,7.822,2,14.878,143,29.9,425,21.581,955,25.996]],["name/70-2",[]],["text/70-2",[]],["component/70-2",[]],["title/70-3",[28,19.699,4621,65.805]],["name/70-3",[]],["text/70-3",[]],["component/70-3",[]],["title/70-4",[1,10.112,51,22.015,94,14.156]],["name/70-4",[]],["text/70-4",[]],["component/70-4",[]],["title/70-5",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/70-5",[]],["text/70-5",[]],["component/70-5",[]],["title/70",[28,19.699,232,27.865]],["name/70",[28,0.504,232,0.713]],["text/70",[1,1.554,2,1.258,10,2.178,28,3.26,29,2.697,34,2.093,36,2.312,37,1.71,46,1.932,51,2.247,52,0.799,60,2.474,66,1.354,79,1.558,80,3.571,82,0.906,94,1.901,102,1.8,143,1.472,151,1.825,164,1.135,175,1.604,184,2.003,187,1.403,188,1.067,190,4.178,192,1.251,201,1.02,226,4.652,232,1.556,236,1.336,239,1.161,240,1.485,244,1.665,250,1.932,254,1.716,264,0.992,266,2.012,270,1.295,272,0.963,276,1.575,279,3.937,280,1.047,287,1.111,300,2.428,302,0.979,306,2.858,310,1.02,330,0.986,335,1.924,336,1.742,342,1.028,344,1.088,354,2.108,373,1.084,412,1.884,417,1.288,425,1.825,432,1.319,437,1.319,479,1.693,517,1.574,530,1.125,534,1.629,536,1.436,538,2.832,552,1.717,564,1.717,565,2.067,573,1.319,575,2.032,580,1.311,583,1.088,588,1.258,602,2.326,679,1.629,685,2.551,688,1.231,692,2.497,698,1.425,716,1.319,741,1.765,742,1.328,754,1.818,776,1.373,811,2.342,829,1.877,840,1.693,847,1.629,856,1.125,858,3.619,867,1.183,871,1.558,881,0.97,917,1.717,948,1.87,954,1.345,955,4.512,988,1.319,996,1.717,1014,2.704,1019,1.558,1032,1.354,1059,1.145,1146,1.77,1155,1.155,1158,1.328,1171,1.485,1185,1.448,1196,2.598,1234,1.87,1245,1.91,1251,1.649,1294,1.955,1303,1.319,1325,1.717,1346,1.61,1355,1.542,1360,1.742,1390,1.955,1398,1.629,1399,1.145,1402,2.765,1417,1.373,1418,2.428,1435,1.91,1474,2.067,1475,1.591,1478,2.467,1480,1.591,1713,3.145,1722,3.093,1723,4.04,1762,1.499,1781,1.77,1870,1.383,1956,5.257,1957,1.833,1984,1.61,2039,1.28,2046,1.61,2088,1.8,2091,2.352,2092,2.231,2098,3.447,2184,1.8,2272,4.539,2273,1.67,2614,2.14,2683,3.211,2717,2.231,2743,2.231,2869,4.667,2931,2.067,3150,2.007,3245,3.675,3482,5.238,4620,1.87,4621,8.32,4622,2.537,4623,2.537,4624,2.537,4625,2.537,4626,2.352,4627,2.537,4628,2.231,4629,2.352,4630,2.537,4631,2.537,4632,2.537,4633,2.537,4634,2.231,4635,2.537,4636,4.358,4637,2.537,4638,2.537,4639,2.537,4640,2.067]],["component/70",[1,0.349,2,0.663,18,0.6]],["title/71-1",[1358,51.334]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["title/71-2",[219,27.003,1358,42.531]],["name/71-2",[]],["text/71-2",[]],["component/71-2",[]],["title/71-3",[1,10.112,51,22.015,94,14.156]],["name/71-3",[]],["text/71-3",[]],["component/71-3",[]],["title/71-4",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/71-4",[]],["text/71-4",[]],["component/71-4",[]],["title/71-5",[28,16.815,73,26.141,1358,36.305]],["name/71-5",[]],["text/71-5",[]],["component/71-5",[]],["title/71-6",[28,16.815,1358,36.305,2172,37.703]],["name/71-6",[]],["text/71-6",[]],["component/71-6",[]],["title/71-7",[1,10.112,51,22.015,94,14.156]],["name/71-7",[]],["text/71-7",[]],["component/71-7",[]],["title/71-8",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/71-8",[]],["text/71-8",[]],["component/71-8",[]],["title/71-9",[28,13.007,59,20.221,423,25.556,973,20.574,1358,28.083]],["name/71-9",[]],["text/71-9",[]],["component/71-9",[]],["title/71-10",[323,59.747]],["name/71-10",[]],["text/71-10",[]],["component/71-10",[]],["title/71-11",[1,10.112,51,22.015,94,14.156]],["name/71-11",[]],["text/71-11",[]],["component/71-11",[]],["title/71-12",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/71-12",[]],["text/71-12",[]],["component/71-12",[]],["title/71",[28,19.699,1358,42.531]],["name/71",[28,0.504,1358,1.089]],["text/71",[1,0.881,2,0.231,4,0.898,7,0.482,10,2.31,15,0.648,19,0.363,21,1.86,22,1.583,26,0.338,28,3.109,29,0.377,34,2.439,36,0.615,37,1.498,48,0.301,51,0.504,52,1.045,54,0.629,59,1.679,60,0.821,69,0.521,70,0.473,72,0.659,73,3.441,75,0.45,80,0.87,81,0.508,82,1.679,89,1.224,90,1.49,94,1.927,99,0.397,103,0.917,106,2.076,107,0.503,109,0.535,110,0.638,111,0.422,114,2.436,120,0.578,121,0.348,122,0.703,123,0.36,125,0.953,129,1.925,131,0.461,132,0.437,133,0.355,147,0.916,151,0.336,159,0.457,163,0.849,164,1.484,166,1.051,172,0.29,175,1.574,176,0.728,177,0.942,181,0.461,184,0.368,188,0.641,190,4.074,198,0.482,202,0.55,203,1.286,205,0.535,219,2.118,222,0.457,232,1.82,236,0.422,239,1.746,240,0.892,242,0.362,243,2.054,244,1.459,245,0.626,250,1.896,253,2.339,263,0.927,264,0.313,266,1.281,268,0.482,269,0.375,272,0.578,273,0.508,276,1.199,279,2.101,280,0.331,283,0.447,293,1.163,295,1.155,300,0.923,302,2.108,305,1.006,306,0.641,309,1.359,310,1.115,318,0.656,323,5.119,330,1.077,332,0.681,334,0.736,335,0.354,336,0.55,341,1.233,352,0.843,354,1.875,355,0.437,356,0.721,373,0.651,386,0.559,393,0.428,397,0.648,398,0.469,420,1.52,423,1.08,425,0.638,432,0.417,435,0.409,437,0.417,438,0.37,439,0.736,443,0.497,447,0.535,449,1.205,505,0.778,511,0.739,512,1.016,518,1.155,520,0.653,527,1.24,528,0.397,529,0.751,530,0.355,538,0.99,551,0.478,562,0.856,568,1.433,570,0.461,571,1.092,575,0.71,576,2.556,582,1.147,583,0.344,589,0.45,591,0.372,602,2.038,604,2.497,655,0.391,658,0.412,668,2.584,685,0.469,686,0.59,688,0.739,692,1.865,697,0.428,699,0.819,700,0.978,715,0.535,717,0.542,722,0.387,724,0.55,728,0.469,729,1.364,733,0.559,734,0.487,753,0.739,754,1.053,755,1.774,761,0.792,764,0.956,767,0.319,776,0.434,780,0.425,782,0.59,783,0.412,784,1.305,805,0.917,806,0.44,809,0.926,811,0.819,817,0.482,821,1.585,828,0.514,829,1.644,839,0.367,854,0.843,867,1.015,869,0.434,881,2.087,898,2.315,901,0.676,937,0.44,938,0.55,939,0.389,954,1.471,962,0.457,967,0.7,969,0.404,973,4.688,974,0.487,977,0.978,986,0.676,988,0.792,1004,0.419,1019,0.492,1020,0.542,1028,0.469,1044,0.395,1046,1.147,1059,1.251,1062,0.956,1068,0.428,1069,1.721,1074,0.59,1075,0.407,1099,0.402,1106,0.617,1108,0.603,1117,0.414,1122,0.503,1132,0.945,1136,0.44,1146,1.063,1150,0.443,1153,0.336,1155,2.642,1156,2.231,1185,0.457,1193,0.653,1194,0.395,1198,0.385,1209,1.337,1216,1.233,1217,0.45,1218,1.783,1232,1.669,1253,0.653,1272,0.542,1273,1.086,1317,1.223,1323,1.081,1324,1.275,1337,0.634,1344,0.514,1345,0.422,1355,0.926,1358,6.5,1394,0.59,1397,0.569,1398,0.514,1404,1.105,1417,2.956,1418,1.618,1436,1.174,1439,3.383,1441,0.478,1452,0.59,1461,0.559,1463,0.45,1471,0.478,1473,0.487,1475,0.503,1477,0.55,1478,0.862,1479,0.704,1480,0.956,1486,0.743,1523,0.527,1526,0.83,1541,0.559,1571,0.417,1591,0.514,1655,0.676,1692,0.579,1696,1.474,1712,0.503,1713,1.523,1718,0.55,1742,0.908,1746,0.542,1757,1.398,1759,0.603,1762,0.473,1799,1.081,1801,0.535,1807,0.559,1841,2.805,1847,2.512,1850,1.774,1852,2.563,1867,0.603,1875,1.915,1880,0.704,1881,0.966,1886,3.356,1893,0.508,1899,0.704,1932,1.147,1949,1.101,1959,0.55,1961,0.457,1984,0.966,1992,0.508,1994,0.497,2018,1.639,2033,0.527,2039,0.404,2042,1.241,2063,0.704,2064,0.704,2099,0.569,2119,0.603,2150,0.579,2172,1.878,2221,1.574,2225,0.676,2238,1.721,2248,0.559,2376,0.617,2388,1.205,2422,1.453,2457,0.569,2515,1.412,2563,0.676,2569,1.339,2573,0.653,2580,0.676,2648,0.704,2649,1.147,2653,1.339,2883,0.743,2900,0.542,2901,0.603,2902,0.521,2910,0.676,2930,0.579,2998,5.413,3008,2.354,3068,0.559,3323,0.743,3350,1.412,3380,0.676,3526,4.48,3606,0.579,3638,2.703,3705,0.603,3722,2.438,4201,2.019,4262,0.743,4267,1.774,4332,0.743,4343,0.603,4374,0.743,4386,1.205,4396,0.634,4408,0.653,4441,0.603,4465,0.653,4634,0.704,4641,0.801,4642,0.801,4643,0.801,4644,2.773,4645,0.801,4646,0.801,4647,0.801,4648,2.354,4649,2.178,4650,0.801,4651,1.523,4652,2.178,4653,3.817,4654,0.801,4655,0.801,4656,0.801,4657,0.801,4658,0.801,4659,0.801,4660,0.801,4661,1.523,4662,0.801,4663,2.019,4664,0.801,4665,0.801,4666,1.523,4667,0.801,4668,0.801,4669,0.801,4670,0.801,4671,0.653,4672,0.801,4673,0.801,4674,0.743,4675,0.801,4676,0.801,4677,0.801,4678,0.801,4679,1.412,4680,2.178,4681,0.801,4682,2.178,4683,0.801,4684,0.743,4685,0.801,4686,0.801,4687,0.801,4688,0.801,4689,0.801,4690,0.801,4691,0.801,4692,0.801,4693,0.801,4694,0.801,4695,0.801,4696,0.801,4697,2.178,4698,0.801,4699,2.773,4700,2.019,4701,0.801,4702,0.801,4703,0.801,4704,0.743,4705,1.241,4706,0.634,4707,1.205,4708,0.603,4709,0.801,4710,0.634,4711,1.285,4712,0.801,4713,0.617,4714,0.801,4715,0.801,4716,0.801,4717,0.801,4718,1.523]],["component/71",[1,0.349,2,0.663,18,0.6]],["title/72",[143,54.654]],["name/72",[3,1.478]],["text/72",[1,1.986,2,3.561,10,3.952,18,1.785,21,3.036,28,3.113,56,2.709,60,2.804,95,2.1,111,6.722,143,6.814,147,2.873,149,3.232,190,2.371,219,2.364,225,4.469,228,6.08,232,4.193,266,3.155,332,3.056,334,3.299,386,4.767,504,2.942,528,3.389,575,3.185,768,3.509,955,3.447,961,3.899,973,2.728,1171,4,1212,3.931,1358,5.927,1398,4.386,1841,3.509,2312,4.848,2898,5.034]],["component/72",[1,0.349,2,0.663,18,0.6]],["title/73-1",[219,20.107,753,28.199,973,33.715]],["name/73-1",[]],["text/73-1",[]],["component/73-1",[]],["title/73",[753,28.199,898,31.445,973,33.715]],["name/73",[753,0.529,898,0.59,973,0.813]],["text/73",[10,1.1,21,3.563,28,2.712,34,0.938,36,1.385,37,1.347,60,1.016,80,3.288,89,4.305,125,2.458,129,1.991,151,1.437,161,2.203,175,3.342,181,1.975,184,1.577,188,1.443,190,4.286,219,3.847,243,1.29,264,1.342,276,1.24,279,1.32,280,1.416,282,2.394,330,1.333,342,1.39,344,1.472,347,1.796,373,1.466,392,2.177,393,1.832,527,2.098,560,3.355,575,1.6,576,1.721,658,1.763,668,1.623,710,1.796,735,2.009,753,2.725,754,3.408,789,1.674,817,2.065,829,3.069,847,2.203,855,2.107,881,1.311,898,3.857,907,1.721,918,6.999,933,1.991,934,2.065,954,3.779,963,1.742,964,1.64,967,3.275,973,5.113,975,3.38,997,2.394,1032,1.832,1044,1.693,1117,1.774,1119,2.894,1142,3.181,1150,1.898,1155,3.75,1156,3.12,1159,3.522,1162,2.394,1181,2.644,1209,3.448,1317,3.153,1345,1.808,1404,1.742,1420,1.884,1467,2.357,1473,5.005,1478,4.034,1484,2.322,1527,3.522,1669,2.322,1699,2.583,1759,5.364,1760,1.808,1778,2.714,1780,2.796,1807,3.918,1808,3.017,1809,2.796,1814,5.206,1825,4.937,1847,2.259,1870,3.061,2552,3.181,2597,6.563,3611,2.644,4236,3.017,4290,2.894,4634,3.017,4719,3.431,4720,3.431,4721,2.894,4722,8.234,4723,9.751,4724,3.431,4725,3.431,4726,7.126,4727,3.431,4728,3.431,4729,3.181,4730,3.431,4731,2.894,4732,3.431,4733,3.431,4734,3.431,4735,3.181]],["component/73",[1,0.349,2,0.663,18,0.6]],["title/74-1",[973,26.598,1153,27.899,2584,51.324]],["name/74-1",[]],["text/74-1",[]],["component/74-1",[]],["title/74",[973,31.159,1492,61.717]],["name/74",[973,0.797,1492,1.58]],["text/74",[1,0.842,2,1.602,4,1.395,21,2.261,34,0.925,52,1.747,59,2.177,77,2.197,82,1.208,94,0.719,99,2.752,175,1.244,190,4.611,219,1.17,239,3.227,243,2.653,244,1.292,253,2.12,263,2.36,266,1.561,272,1.284,276,2.005,279,1.301,280,1.395,286,2.226,300,1.433,304,3.092,330,1.314,335,1.493,342,1.37,352,1.87,354,1.244,356,1.6,393,1.805,527,2.073,560,1.592,580,1.748,668,3.861,685,1.98,716,2.885,729,2.28,732,1.77,746,4.706,754,1.76,776,3.003,829,1.456,881,2.696,898,1.83,918,2.606,945,2.256,954,1.793,973,5.191,1069,6.626,1153,3.419,1155,4.658,1156,5.304,1157,3.652,1159,2.121,1198,1.624,1201,1.83,1221,1.884,1248,2.545,1317,4.584,1341,1.726,1344,2.171,1365,3.277,1418,1.433,1428,2.4,1473,2.055,1492,8.447,1718,4.845,1757,2.171,1841,1.737,1875,2.973,1893,6.489,1984,2.145,1991,3.135,2033,2.226,2285,2.755,2425,8.09,2452,2.545,2453,2.852,2584,7.462,2597,5.898,2710,6.202,2892,2.675,3165,2.973,3722,4.877,4320,2.852,4409,2.545,4663,3.135,4735,3.135,4736,3.381,4737,3.381,4738,8.162,4739,7.054,4740,8.162,4741,3.135,4742,3.381,4743,3.381,4744,3.381,4745,3.381,4746,3.381,4747,3.381,4748,3.381,4749,3.381]],["component/74",[1,0.349,2,0.663,18,0.6]],["title/75-1",[304,37.119,697,35.555,973,26.598]],["name/75-1",[]],["text/75-1",[]],["component/75-1",[]],["title/75-2",[784,31.353,973,26.598,2184,47.267]],["name/75-2",[]],["text/75-2",[]],["component/75-2",[]],["title/75",[973,37.608]],["name/75",[973,1.365]],["text/75",[1,1.199,2,1.908,4,0.829,6,1.275,7,1.209,10,1.852,18,0.929,21,2.117,28,2.956,34,2.423,37,1.395,45,1.12,48,2.174,51,0.664,59,0.788,80,2.916,83,1.146,85,1.187,89,3.487,94,0.427,95,1.47,98,1.699,111,1.058,120,0.763,122,0.928,125,1.556,126,0.946,132,1.938,135,1.804,140,0.941,147,1.495,151,0.841,155,1.29,164,0.899,175,0.739,177,0.869,184,3.036,186,0.851,190,3.706,192,0.991,203,1.187,219,1.655,227,1.176,232,1.27,236,1.058,244,1.359,246,2.14,253,1.828,263,0.855,264,1.391,270,1.815,272,0.763,276,0.726,279,1.368,280,1.467,285,1.087,286,2.34,295,1.885,300,0.851,302,0.775,304,1.12,306,2.011,309,0.823,330,0.781,334,0.97,344,0.862,350,1.032,354,1.308,356,0.95,359,2.936,360,1.275,363,0.883,397,1.513,423,0.996,435,1.026,438,0.928,439,0.97,443,2.206,456,1.402,504,0.865,505,1.026,512,1.34,514,1.002,518,1.065,528,0.996,560,3.11,571,1.784,575,2.694,576,3.663,583,0.862,591,0.932,604,2.676,609,1.885,642,1.176,658,1.032,668,4.543,675,2.183,692,0.876,697,1.898,700,1.29,715,1.34,741,0.814,746,1.34,754,2.317,761,2.487,784,1.674,789,2.82,811,1.08,813,1.452,829,4.135,834,0.996,839,0.919,846,1.198,855,1.234,867,4.13,870,2.825,877,1.29,881,0.768,895,1.137,898,1.087,909,1.137,910,1.137,939,1.726,940,1.48,947,1.176,962,1.146,969,1.014,971,2.626,973,4.977,975,2.878,1030,1.08,1032,1.072,1037,1.359,1046,1.058,1059,0.907,1069,4.099,1073,1.209,1108,1.512,1127,1.512,1155,2.632,1156,1.556,1157,2.34,1158,1.051,1159,3,1160,1.589,1161,1.512,1162,1.402,1163,1.637,1164,1.548,1166,2.1,1171,1.176,1185,1.146,1194,1.754,1198,0.965,1199,1.29,1209,4.056,1210,2.569,1211,1.637,1216,1.137,1221,1.12,1232,1.209,1239,1.863,1298,1.426,1317,1.128,1341,1.815,1345,3.045,1404,1.02,1418,0.851,1441,1.198,1448,1.209,1449,1.209,1464,2.553,1469,1.29,1473,4.439,1480,1.26,1521,1.548,1527,2.23,1540,1.12,1571,1.045,1575,1.176,1689,3.07,1703,1.548,1704,1.452,1707,1.452,1725,1.637,1733,1.548,1742,1.198,1759,1.512,1762,1.187,1768,1.512,1778,1.589,1779,1.694,1780,1.637,1799,1.426,1807,1.402,1816,1.305,1817,1.766,1833,1.166,1841,1.032,1846,1.589,1858,1.359,1866,1.38,1870,1.095,1891,1.38,1898,1.637,1926,1.548,1990,1.402,1992,1.275,1993,1.694,2036,1.359,2167,1.359,2257,1.426,2402,1.863,2404,1.766,2406,3.296,2407,1.863,2422,1.34,2451,1.452,2629,1.637,3427,1.863,4290,1.694,4441,1.512,4442,1.548,4531,1.766,4729,1.863,4750,2.009,4751,2.009,4752,2.009,4753,2.009,4754,5.225,4755,1.863,4756,1.863,4757,2.009,4758,1.863,4759,2.009,4760,1.863,4761,1.863,4762,2.009,4763,1.766,4764,2.009,4765,2.009,4766,3.555,4767,2.009,4768,2.009,4769,2.009]],["component/75",[1,0.349,2,0.663,18,0.6]],["title/76",[1753,55.373,1864,57.497]],["name/76",[1753,1.417,1864,1.472]],["text/76",[10,2.302,21,3.142,28,2.475,34,1.28,48,2.701,90,5.387,103,2.816,122,4.036,123,3.926,161,3.004,177,2.023,201,1.882,232,2.565,242,3.241,243,3.287,244,2.745,250,2.075,253,2.745,263,1.991,264,1.83,280,1.93,306,4.693,318,3.763,330,1.818,342,1.895,347,2.449,356,2.214,393,2.498,479,3.122,536,4.065,562,2.628,582,2.465,602,2.498,658,2.404,679,3.004,729,2.952,741,1.895,753,2.271,761,2.434,783,2.404,821,2.236,829,3.763,839,2.141,856,2.075,877,3.004,967,4.017,973,4.641,1044,5.506,1046,3.783,1075,2.375,1159,5.482,1185,2.67,1201,3.887,1341,2.389,1344,4.61,1389,3.381,1438,3.812,1463,2.628,1471,2.79,1475,2.935,1502,5.097,1523,3.08,1571,2.434,1669,3.166,1714,2.935,1752,2.969,1758,2.532,1800,4.114,1819,2.935,1841,2.404,1864,8.563,1924,3.701,1929,3.321,1990,3.265,2286,3.522,2378,3.522,2740,8.103,2902,3.041,4770,4.338,4771,4.679,4772,4.679,4773,4.114,4774,3.946,4775,4.679,4776,8.739]],["component/76",[1,0.349,2,0.663,18,0.6]],["title/77-1",[21,21.347,80,26.598,1527,41.78]],["name/77-1",[]],["text/77-1",[]],["component/77-1",[]],["title/77-2",[28,14.668,89,25.652,754,18.435,1527,36.445]],["name/77-2",[]],["text/77-2",[]],["component/77-2",[]],["title/77",[187,36.84,973,26.598,1527,41.78]],["name/77",[187,0.78,973,0.563,1527,0.885]],["text/77",[1,0.704,4,0.503,10,1.013,15,0.962,18,0.319,21,3.067,22,3.306,28,2.416,34,1.584,37,0.887,48,0.85,54,0.503,59,0.479,69,1.469,73,0.479,77,0.793,78,0.774,80,2.095,81,0.774,82,0.807,89,3.147,95,1.425,97,0.881,98,0.583,106,1.097,107,0.765,110,1.652,111,0.643,114,0.9,122,0.563,125,1.727,141,2.108,147,0.513,149,0.577,164,0.546,166,0.589,175,2.131,177,0.527,181,0.702,186,0.517,187,0.675,190,4.564,219,0.422,225,0.501,232,0.436,242,1.426,243,2.819,244,1.507,246,4.714,250,1.003,251,0.708,253,0.466,263,1.678,264,0.477,266,0.563,268,3.486,270,2.014,272,1.498,279,1.216,280,1.627,295,2.782,302,0.873,304,0.68,306,0.513,309,1.615,310,1.586,329,3.045,330,2.441,335,0.539,342,1.877,344,0.523,350,1.623,354,0.449,358,0.793,359,0.749,360,2.005,363,1.734,389,0.866,397,1.344,425,0.511,437,1.176,438,1.044,439,1.092,443,0.757,449,0.675,479,1.508,511,0.592,527,1.181,529,1.115,533,0.696,536,0.69,553,0.783,554,0.757,559,0.605,560,4.411,564,0.825,576,2.325,582,1.191,589,0.685,602,0.651,635,0.656,658,1.623,668,4.696,673,0.749,675,0.749,679,0.783,685,0.714,692,1.378,722,1.526,729,1.621,746,0.814,754,2.673,760,0.638,776,0.66,780,1.199,783,0.627,817,0.734,829,2.706,839,0.558,881,1.208,898,0.66,907,0.612,918,3.039,940,0.899,952,2.078,958,0.757,971,5.253,973,4.15,975,1.361,1032,0.651,1044,0.602,1046,0.643,1059,1.02,1069,2.876,1071,0.851,1145,0.656,1150,0.675,1155,4.067,1156,2.945,1157,2.596,1158,3.289,1159,3.634,1161,2.379,1162,2.205,1164,0.94,1166,0.721,1194,0.602,1198,1.086,1209,1.388,1217,2.215,1248,0.918,1251,0.793,1289,0.866,1303,0.634,1317,3.253,1320,0.765,1341,4.784,1345,1.191,1360,0.838,1362,0.708,1369,1.742,1376,0.757,1393,0.67,1399,0.55,1404,2.352,1418,0.517,1420,1.241,1441,0.727,1451,0.965,1464,1.207,1466,0.741,1473,2.817,1480,1.418,1484,0.825,1527,7.499,1541,0.851,1571,0.634,1572,0.757,1575,1.85,1652,3.012,1669,0.825,1712,0.765,1725,0.994,1752,2.005,1765,1.029,1770,1.029,1775,0.965,1778,1.788,1779,3.326,1780,1.842,1781,4.384,1782,1.842,1784,1.072,1785,1.072,1791,2.778,1792,7.406,1794,2.93,1807,0.851,1819,0.765,1842,0.866,1852,0.665,1859,0.866,1867,1.702,1957,0.881,2349,1.029,2451,0.881,2502,2.243,2516,0.994,2597,1.634,2717,1.072,2931,0.994,3872,1.131,4131,1.072,4215,5.914,4343,0.918,4365,1.072,4710,0.965,4754,1.788,4756,1.131,4758,1.131,4777,1.22,4778,3.657,4779,3.16,4780,3.657,4781,3.944,4782,5.792,4783,7.495,4784,6.283,4785,3.16,4786,3.16,4787,2.261,4788,1.22,4789,2.778,4790,1.22,4791,1.22,4792,1.22,4793,1.22,4794,2.261,4795,2.261,4796,2.261,4797,1.072,4798,1.072,4799,1.131,4800,1.22,4801,1.22,4802,1.131,4803,1.22,4804,2.261,4805,1.22,4806,1.22,4807,1.22,4808,1.22,4809,1.22,4810,1.22,4811,1.22,4812,1.22]],["component/77",[1,0.349,2,0.663,18,0.6]],["title/78",[73,26.141,576,33.413,973,26.598]],["name/78",[73,0.554,576,0.708,973,0.563]],["text/78",[1,0.693,2,0.773,4,2.461,10,1.912,21,2.533,28,2.719,34,1.927,37,2.341,38,1.286,48,1.007,70,1.582,73,3.797,80,3.157,89,3.49,95,1.403,106,1.3,110,1.122,111,1.411,125,1.998,155,1.719,159,1.528,161,1.719,175,2.195,177,1.158,184,1.231,190,4.528,197,1.699,205,1.786,219,0.927,227,1.568,240,2.672,246,1.612,268,1.612,270,3.597,273,1.699,276,0.968,286,1.763,304,1.492,306,1.919,309,1.097,329,1.554,330,1.04,341,2.584,344,1.957,350,2.344,423,1.328,435,1.367,436,1.439,437,1.393,438,1.236,439,1.293,443,1.662,512,3.045,514,1.336,529,1.321,559,2.264,560,4.922,575,1.248,576,4.854,658,1.376,668,4.577,679,1.719,685,1.568,688,1.3,692,1.167,716,1.393,729,1.101,742,1.402,746,1.786,754,2.235,761,1.393,766,1.307,789,3.857,829,3.034,834,1.328,855,1.644,867,1.248,909,1.516,939,1.3,940,1.973,947,1.568,971,3.275,973,5.178,975,1.612,1014,1.662,1023,1.763,1046,1.411,1069,2.832,1101,1.9,1102,1.973,1103,2.118,1155,2.078,1156,1.998,1157,3.004,1158,1.402,1159,2.863,1160,2.118,1161,2.016,1162,1.869,1164,5.429,1198,2.865,1217,1.504,1257,2.354,1341,2.33,1404,1.359,1441,1.596,1464,2.436,1473,4.805,1480,1.68,1485,2.063,1518,4.47,1527,4.959,1571,1.393,1691,1.628,1725,2.182,1733,2.063,1741,1.812,1752,2.895,1778,2.118,1779,2.258,1781,1.869,1782,4.86,1783,2.483,1784,2.354,1785,4.013,1809,2.182,1813,1.699,1816,1.74,1841,2.344,1888,2.258,1898,2.182,1949,1.935,2036,1.812,2167,1.812,2181,2.016,2234,1.839,2248,1.869,2257,1.9,2404,2.354,2422,3.045,3086,2.483,4176,2.016,4215,2.354,4760,2.483,4761,2.483,4778,2.483,4780,2.483,4799,2.483,4802,2.483,4813,2.678,4814,2.483,4815,2.678,4816,2.678,4817,2.678,4818,2.678,4819,2.678,4820,2.678,4821,2.678,4822,2.678,4823,2.678,4824,2.678,4825,2.678,4826,2.483,4827,2.678,4828,2.678,4829,2.678,4830,2.678,4831,2.678,4832,2.678]],["component/78",[1,0.349,2,0.663,18,0.6]],["title/79-1",[754,21.134,858,25.537,1955,38.992]],["name/79-1",[]],["text/79-1",[]],["component/79-1",[]],["title/79-2",[28,14.668,675,35.675,754,18.435,1955,34.013]],["name/79-2",[]],["text/79-2",[]],["component/79-2",[]],["title/79-3",[28,13.007,125,22.555,176,24.62,754,16.348,858,19.754]],["name/79-3",[]],["text/79-3",[]],["component/79-3",[]],["title/79-4",[80,31.159,861,37.286]],["name/79-4",[]],["text/79-4",[]],["component/79-4",[]],["title/79-5",[232,16.528,269,21.679,754,14.685,861,22.116,1819,29.031,2234,31.786]],["name/79-5",[]],["text/79-5",[]],["component/79-5",[]],["title/79-6",[1,10.112,51,22.015,94,14.156]],["name/79-6",[]],["text/79-6",[]],["component/79-6",[]],["title/79-7",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/79-7",[]],["text/79-7",[]],["component/79-7",[]],["title/79-8",[28,14.668,754,18.435,858,22.276,861,27.764]],["name/79-8",[]],["text/79-8",[]],["component/79-8",[]],["title/79-9",[1,10.112,51,22.015,94,14.156]],["name/79-9",[]],["text/79-9",[]],["component/79-9",[]],["title/79-10",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/79-10",[]],["text/79-10",[]],["component/79-10",[]],["title/79-11",[863,36.305,864,35.799,865,36.048]],["name/79-11",[]],["text/79-11",[]],["component/79-11",[]],["title/79-12",[863,31.669,864,31.227,865,31.445,4833,49]],["name/79-12",[]],["text/79-12",[]],["component/79-12",[]],["title/79-13",[94,10.95,863,28.083,864,27.692,865,27.885,1648,29.165]],["name/79-13",[]],["text/79-13",[]],["component/79-13",[]],["title/79-14",[1,10.112,51,22.015,94,14.156]],["name/79-14",[]],["text/79-14",[]],["component/79-14",[]],["title/79-15",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/79-15",[]],["text/79-15",[]],["component/79-15",[]],["title/79-16",[10,14.833,94,9.836,863,25.227,864,24.875,865,25.048,1648,26.198]],["name/79-16",[]],["text/79-16",[]],["component/79-16",[]],["title/79-17",[1,10.112,51,22.015,94,14.156]],["name/79-17",[]],["text/79-17",[]],["component/79-17",[]],["title/79-18",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/79-18",[]],["text/79-18",[]],["component/79-18",[]],["title/79-19",[232,20.749,863,31.669,864,31.227,1648,32.889]],["name/79-19",[]],["text/79-19",[]],["component/79-19",[]],["title/79-20",[232,15.002,582,22.129,863,22.898,864,22.578,1648,23.78,4834,34.227,4835,38.947]],["name/79-20",[]],["text/79-20",[]],["component/79-20",[]],["title/79-21",[232,16.528,863,25.227,864,24.875,865,25.048,1648,26.198,4834,37.708]],["name/79-21",[]],["text/79-21",[]],["component/79-21",[]],["title/79-22",[232,18.399,863,28.083,864,27.692,865,27.885,1648,29.165]],["name/79-22",[]],["text/79-22",[]],["component/79-22",[]],["title/79-23",[863,36.305,864,35.799,1132,41.328]],["name/79-23",[]],["text/79-23",[]],["component/79-23",[]],["title/79-24",[863,31.669,864,31.227,1761,38.76,4836,47.338]],["name/79-24",[]],["text/79-24",[]],["component/79-24",[]],["title/79-25",[1,10.112,51,22.015,94,14.156]],["name/79-25",[]],["text/79-25",[]],["component/79-25",[]],["title/79-26",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/79-26",[]],["text/79-26",[]],["component/79-26",[]],["title/79-27",[94,14.156,397,28.338,858,25.537]],["name/79-27",[]],["text/79-27",[]],["component/79-27",[]],["title/79-28",[28,16.815,858,25.537,1043,42.255]],["name/79-28",[]],["text/79-28",[]],["component/79-28",[]],["title/79-29",[28,16.815,754,21.134,1951,38.992]],["name/79-29",[]],["text/79-29",[]],["component/79-29",[]],["title/79-30",[95,23.985,749,36.374]],["name/79-30",[]],["text/79-30",[]],["component/79-30",[]],["title/79-31",[26,32.937,1217,43.821]],["name/79-31",[]],["text/79-31",[]],["component/79-31",[]],["title/79",[28,19.699,858,29.916]],["name/79",[3,1.478]],["text/79",[0,0.152,1,0.354,2,0.316,4,0.718,7,0.449,8,0.134,10,1.721,13,0.243,15,0.868,18,0.195,19,0.338,20,0.237,26,0.734,28,3.175,29,1.097,34,1.987,35,0.252,36,1.879,37,1.415,40,0.799,44,0.276,48,1.268,49,0.216,51,0.471,52,0.448,54,0.842,56,0.152,59,1.023,60,0.324,69,0.248,72,0.615,73,0.15,75,0.215,78,0.473,80,3.253,82,0.39,84,0.243,85,0.226,89,0.329,93,0.491,94,2.055,95,1.245,103,0.23,106,0.186,108,0.302,110,0.16,114,0.435,118,0.338,120,0.145,121,0.324,122,0.177,124,0.237,125,0.623,127,0.921,129,0.222,131,0.819,132,0.208,133,0.331,135,0.555,140,0.35,141,0.255,142,0.203,147,0.314,149,0.181,151,0.313,159,0.218,161,0.914,163,0.793,164,0.913,166,1.125,171,0.199,172,0.516,175,0.857,176,2.485,177,0.323,184,0.938,186,0.162,189,0.177,190,4.505,198,0.449,199,0.793,200,0.205,201,0.154,203,0.226,206,0.188,209,0.222,219,1.248,225,1.071,229,2.092,232,3.848,234,0.288,236,0.393,237,0.48,239,0.175,240,1.195,242,1.729,243,1.176,244,0.665,250,0.771,253,1.098,263,0.606,264,1.223,266,0.505,267,0.288,269,4.503,272,2.436,276,0.842,279,1.716,280,1.185,286,0.252,291,0.572,293,0.583,295,0.922,300,0.865,302,2.197,305,0.345,306,0.46,309,0.448,310,0.3,318,0.321,320,0.604,329,0.222,330,0.676,332,0.637,334,0.185,335,0.169,342,0.302,344,0.746,345,0.215,347,0.391,352,0.211,354,0.64,355,0.407,358,0.248,360,0.473,362,0.211,363,0.328,373,1.227,388,0.319,389,1.449,391,0.245,395,0.226,397,0.465,398,0.64,421,0.391,423,0.19,425,0.458,436,0.205,438,0.657,444,0.454,445,0.34,447,0.498,449,0.413,450,0.521,504,0.165,505,1.042,511,0.991,513,0.865,514,1.018,516,0.195,518,0.203,522,1.504,527,1.26,528,0.19,529,0.189,530,0.17,533,0.218,534,0.245,536,0.216,544,0.302,547,0.295,552,0.259,559,0.19,560,0.67,562,0.419,563,0.445,569,0.211,572,0.656,575,1.985,576,0.192,580,0.198,582,1.373,589,0.614,591,0.177,592,1.746,594,0.282,609,0.396,635,0.587,658,0.196,668,1.479,673,0.235,674,1.389,675,1.92,688,0.991,691,0.176,692,0.476,699,0.401,700,0.914,703,0.216,711,0.22,716,1.494,728,0.224,729,1.18,732,0.2,734,0.232,735,0.437,741,1.365,742,0.572,743,0.422,749,0.811,753,0.186,754,3.102,763,0.458,766,0.695,767,0.152,773,0.218,776,0.591,778,0.135,781,0.263,783,0.383,784,0.514,789,0.364,810,0.226,811,1.252,817,0.449,821,0.975,822,0.267,824,1.376,829,2.312,833,0.776,834,0.37,836,0.383,839,0.175,852,0.255,854,0.787,858,3.826,860,0.259,861,2.72,863,5.178,864,5.337,865,3.809,867,1.985,868,0.978,869,0.77,871,2.07,877,0.245,881,1.288,895,0.216,898,0.207,899,0.445,907,1.169,909,0.216,910,0.422,931,0.53,936,0.575,937,0.21,939,0.362,947,0.437,952,0.75,957,0.276,958,0.237,959,0.55,963,0.194,967,0.654,971,0.6,973,0.153,1004,0.2,1014,0.237,1015,0.608,1019,0.458,1020,0.505,1023,0.252,1032,0.928,1037,0.259,1044,0.189,1046,2.739,1059,0.642,1062,1.091,1068,0.398,1071,0.267,1073,0.857,1074,0.282,1075,0.555,1081,0.498,1099,0.192,1104,1.175,1109,0.267,1122,1.801,1129,0.608,1132,0.678,1136,0.6,1145,0.205,1150,0.211,1153,1.203,1155,3.205,1156,2.559,1158,1.219,1166,0.646,1171,0.224,1194,0.539,1196,0.228,1198,0.358,1208,0.243,1215,0.922,1217,1.309,1221,0.213,1228,0.805,1232,0.449,1262,0.282,1271,0.271,1272,0.739,1273,0.71,1291,0.89,1298,0.271,1303,0.199,1317,1.756,1321,1.116,1345,0.201,1355,0.232,1356,0.295,1360,0.263,1361,0.282,1363,0.252,1365,0.226,1367,0.282,1368,0.354,1383,0.322,1385,0.295,1387,0.354,1391,0.354,1392,0.263,1393,0.21,1395,0.864,1399,0.337,1402,0.473,1404,1.711,1417,0.941,1418,2.412,1441,0.228,1449,0.23,1452,0.282,1464,0.398,1467,0.978,1469,0.479,1471,2.01,1475,0.468,1478,0.422,1484,0.505,1488,0.903,1499,0.288,1515,0.267,1518,0.693,1524,0.498,1525,0.302,1541,0.267,1544,0.282,1571,0.74,1583,0.276,1598,0.276,1600,0.213,1648,3.132,1655,0.322,1656,0.498,1669,0.505,1683,0.864,1689,0.479,1691,0.232,1699,1.072,1712,1.462,1713,0.6,1714,0.468,1729,0.322,1730,0.336,1742,0.849,1743,0.311,1746,0.259,1749,0.473,1752,0.693,1760,0.393,1761,2.405,1762,0.646,1777,0.259,1781,0.993,1787,0.354,1796,1.138,1801,0.255,1807,0.993,1808,0.656,1811,0.252,1813,0.903,1816,0.248,1819,0.24,1821,0.864,1833,0.222,1847,1.344,1852,0.208,1853,0.235,1859,0.53,1881,0.243,1897,0.288,1903,0.267,1911,0.235,1929,0.271,1930,0.776,1931,0.235,1932,0.823,1940,0.211,1944,0.245,1945,0.311,1951,0.224,1955,2.37,1958,0.263,1961,1.784,1984,1.983,1992,0.243,2001,0.59,2007,1.01,2014,1.34,2022,0.336,2036,0.505,2039,0.551,2063,0.961,2099,0.53,2123,0.311,2148,0.608,2167,0.259,2172,0.422,2190,0.288,2194,0.993,2217,0.282,2234,1.195,2238,0.237,2240,0.354,2262,0.354,2272,0.194,2278,0.763,2289,0.59,2292,0.271,2344,0.255,2378,2.353,2391,0.271,2422,0.498,2440,2.674,2446,0.89,2448,0.354,2450,0.336,2451,0.276,2457,0.271,2458,0.336,2472,0.302,2502,0.53,2516,1.16,2518,0.311,2539,0.302,2560,0.228,2568,0.322,2573,0.311,2588,0.259,2593,0.271,2614,0.922,2624,1.029,2671,0.562,2683,0.805,2707,0.288,2709,0.267,2753,2.746,2754,0.354,2756,0.263,2783,0.922,2794,0.288,2814,1.965,2821,1.376,2851,1.613,2852,0.692,2853,0.575,2884,0.311,2898,0.282,2929,0.322,2964,0.562,3001,0.302,3055,1.201,3151,0.656,3179,0.336,3380,0.322,3421,0.322,3533,1.201,3639,0.89,3705,0.288,3737,1.013,3755,1.097,3902,0.322,4140,0.336,4176,0.288,4196,0.692,4236,0.336,4244,0.311,4264,2.597,4280,0.276,4299,0.336,4409,0.562,4441,0.288,4464,0.311,4620,0.282,4628,0.336,4648,0.271,4797,0.656,4833,0.922,4834,0.608,4835,0.692,4836,2.34,4837,0.382,4838,0.322,4839,0.382,4840,0.382,4841,0.382,4842,0.382,4843,0.746,4844,0.382,4845,1.093,4846,1.093,4847,0.382,4848,1.093,4849,1.529,4850,0.382,4851,0.382,4852,0.382,4853,0.382,4854,0.746,4855,1.423,4856,0.746,4857,0.382,4858,0.382,4859,0.336,4860,0.354,4861,0.302,4862,0.382,4863,0.382,4864,0.382,4865,0.746,4866,1.721,4867,0.382,4868,0.382,4869,1.529,4870,0.382,4871,0.382,4872,0.382,4873,0.382,4874,0.382,4875,1.423,4876,0.382,4877,0.746,4878,0.382,4879,0.382,4880,0.382,4881,0.382,4882,0.382,4883,0.746,4884,0.746,4885,0.382,4886,0.259,4887,0.382,4888,0.382,4889,0.692,4890,0.382,4891,1.013,4892,0.746,4893,0.382,4894,0.382,4895,0.336,4896,0.382,4897,0.336,4898,0.382,4899,0.692,4900,0.354,4901,1.32,4902,0.656,4903,0.656,4904,0.692,4905,1.252,4906,0.692,4907,0.354,4908,0.746,4909,0.382,4910,0.382,4911,0.746,4912,0.746,4913,0.692,4914,0.746,4915,0.746,4916,0.746,4917,0.746,4918,0.382,4919,0.656,4920,0.382,4921,0.382,4922,0.382,4923,1.529,4924,0.692,4925,0.746,4926,0.382,4927,1.013,4928,0.382,4929,1.093,4930,0.382,4931,0.382,4932,0.382,4933,0.382,4934,0.354,4935,0.382,4936,0.382,4937,0.382,4938,0.382,4939,0.382,4940,0.746,4941,0.382,4942,0.382,4943,0.382,4944,0.382,4945,0.382,4946,0.382,4947,0.382,4948,0.382,4949,0.382,4950,0.382,4951,0.382,4952,1.097,4953,0.382,4954,0.746,4955,0.382,4956,0.382,4957,1.013,4958,1.32,4959,0.382,4960,0.354,4961,0.336,4962,0.354,4963,0.354,4964,0.354,4965,0.382,4966,0.354,4967,0.354,4968,0.354,4969,0.354,4970,0.354,4971,0.354,4972,0.354,4973,0.354,4974,0.746,4975,0.382,4976,0.382,4977,1.739,4978,0.692,4979,1.423,4980,0.382,4981,0.382,4982,0.382,4983,0.382,4984,0.382,4985,0.382,4986,0.382,4987,0.382,4988,0.382,4989,0.382,4990,0.354,4991,0.382,4992,0.382,4993,0.354,4994,0.382]],["component/79",[1,0.349,2,0.663,18,0.6]],["title/80-1",[94,20.016]],["name/80-1",[]],["text/80-1",[]],["component/80-1",[]],["title/80-2",[94,14.156,858,25.537,2272,33.805]],["name/80-2",[]],["text/80-2",[]],["component/80-2",[]],["title/80-3",[1,10.112,51,22.015,94,14.156]],["name/80-3",[]],["text/80-3",[]],["component/80-3",[]],["title/80-4",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/80-4",[]],["text/80-4",[]],["component/80-4",[]],["title/80-5",[1,10.112,51,22.015,94,14.156]],["name/80-5",[]],["text/80-5",[]],["component/80-5",[]],["title/80-6",[52,16.227,94,10.95,98,24.62,778,18.187,1151,20.502]],["name/80-6",[]],["text/80-6",[]],["component/80-6",[]],["title/80-7",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-7",[]],["text/80-7",[]],["component/80-7",[]],["title/80-8",[1,10.112,51,22.015,94,14.156]],["name/80-8",[]],["text/80-8",[]],["component/80-8",[]],["title/80-9",[52,16.227,94,10.95,98,24.62,778,18.187,1151,20.502]],["name/80-9",[]],["text/80-9",[]],["component/80-9",[]],["title/80-10",[29,27.35,94,12.348,858,22.276,2020,36.445]],["name/80-10",[]],["text/80-10",[]],["component/80-10",[]],["title/80-11",[1,10.112,51,22.015,94,14.156]],["name/80-11",[]],["text/80-11",[]],["component/80-11",[]],["title/80-12",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/80-12",[]],["text/80-12",[]],["component/80-12",[]],["title/80-13",[1,10.112,51,22.015,94,14.156]],["name/80-13",[]],["text/80-13",[]],["component/80-13",[]],["title/80-14",[52,16.227,94,10.95,98,24.62,778,18.187,1151,20.502]],["name/80-14",[]],["text/80-14",[]],["component/80-14",[]],["title/80-15",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-15",[]],["text/80-15",[]],["component/80-15",[]],["title/80-16",[1,10.112,51,22.015,94,14.156]],["name/80-16",[]],["text/80-16",[]],["component/80-16",[]],["title/80-17",[52,16.227,94,10.95,98,24.62,778,18.187,1151,20.502]],["name/80-17",[]],["text/80-17",[]],["component/80-17",[]],["title/80-18",[673,47.91,861,37.286]],["name/80-18",[]],["text/80-18",[]],["component/80-18",[]],["title/80-19",[445,35.531,2272,39.602]],["name/80-19",[]],["text/80-19",[]],["component/80-19",[]],["title/80-20",[423,33.037,445,30.33,2272,33.805]],["name/80-20",[]],["text/80-20",[]],["component/80-20",[]],["title/80-21",[94,16.583,445,35.531]],["name/80-21",[]],["text/80-21",[]],["component/80-21",[]],["title/80-22",[423,38.703,445,35.531]],["name/80-22",[]],["text/80-22",[]],["component/80-22",[]],["title/80-23",[1,7.822,51,17.029,94,10.95,858,19.754,2272,26.149]],["name/80-23",[]],["text/80-23",[]],["component/80-23",[]],["title/80-24",[52,14.576,94,9.836,778,16.337,858,17.745,1151,18.417,2272,23.489]],["name/80-24",[]],["text/80-24",[]],["component/80-24",[]],["title/80-25",[1,7.026,29,21.786,51,15.297,94,9.836,858,17.745,2020,29.031]],["name/80-25",[]],["text/80-25",[]],["component/80-25",[]],["title/80-26",[29,19.774,52,13.23,94,8.928,778,14.829,858,16.106,1151,16.717,2020,26.351]],["name/80-26",[]],["text/80-26",[]],["component/80-26",[]],["title/80-27",[445,35.531,2052,53.59]],["name/80-27",[]],["text/80-27",[]],["component/80-27",[]],["title/80-28",[1,7.822,51,17.029,94,10.95,858,19.754,2272,26.149]],["name/80-28",[]],["text/80-28",[]],["component/80-28",[]],["title/80-29",[52,14.576,94,9.836,778,16.337,858,17.745,1151,18.417,2272,23.489]],["name/80-29",[]],["text/80-29",[]],["component/80-29",[]],["title/80-30",[1,7.026,29,21.786,51,15.297,94,9.836,858,17.745,2020,29.031]],["name/80-30",[]],["text/80-30",[]],["component/80-30",[]],["title/80-31",[29,19.774,52,13.23,94,8.928,778,14.829,858,16.106,1151,16.717,2020,26.351]],["name/80-31",[]],["text/80-31",[]],["component/80-31",[]],["title/80-32",[445,35.531,4995,65.805]],["name/80-32",[]],["text/80-32",[]],["component/80-32",[]],["title/80-33",[445,35.531,4996,72.341]],["name/80-33",[]],["text/80-33",[]],["component/80-33",[]],["title/80-34",[445,30.33,4176,50.136,4995,56.173]],["name/80-34",[]],["text/80-34",[]],["component/80-34",[]],["title/80-35",[73,30.624,445,35.531]],["name/80-35",[]],["text/80-35",[]],["component/80-35",[]],["title/80-36",[1,10.112,51,22.015,94,14.156]],["name/80-36",[]],["text/80-36",[]],["component/80-36",[]],["title/80-37",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/80-37",[]],["text/80-37",[]],["component/80-37",[]],["title/80-38",[73,22.803,445,26.457,869,31.445,1198,27.906]],["name/80-38",[]],["text/80-38",[]],["component/80-38",[]],["title/80-39",[232,27.865,2898,57.497]],["name/80-39",[]],["text/80-39",[]],["component/80-39",[]],["title/80-40",[1,7.822,51,17.029,94,10.95,858,19.754,2272,26.149]],["name/80-40",[]],["text/80-40",[]],["component/80-40",[]],["title/80-41",[52,14.576,94,9.836,778,16.337,858,17.745,1151,18.417,2272,23.489]],["name/80-41",[]],["text/80-41",[]],["component/80-41",[]],["title/80-42",[1,7.026,29,21.786,51,15.297,94,9.836,858,17.745,2020,29.031]],["name/80-42",[]],["text/80-42",[]],["component/80-42",[]],["title/80-43",[29,19.774,52,13.23,94,8.928,778,14.829,858,16.106,1151,16.717,2020,26.351]],["name/80-43",[]],["text/80-43",[]],["component/80-43",[]],["title/80-44",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-44",[]],["text/80-44",[]],["component/80-44",[]],["title/80-45",[232,27.865,4997,68.6]],["name/80-45",[]],["text/80-45",[]],["component/80-45",[]],["title/80-46",[1,10.112,51,22.015,94,14.156]],["name/80-46",[]],["text/80-46",[]],["component/80-46",[]],["title/80-47",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/80-47",[]],["text/80-47",[]],["component/80-47",[]],["title/80-48",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-48",[]],["text/80-48",[]],["component/80-48",[]],["title/80-49",[94,16.583,1713,42.84]],["name/80-49",[]],["text/80-49",[]],["component/80-49",[]],["title/80-50",[858,25.537,1713,36.569,2272,33.805]],["name/80-50",[]],["text/80-50",[]],["component/80-50",[]],["title/80-51",[1,10.112,51,22.015,94,14.156]],["name/80-51",[]],["text/80-51",[]],["component/80-51",[]],["title/80-52",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/80-52",[]],["text/80-52",[]],["component/80-52",[]],["title/80-53",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-53",[]],["text/80-53",[]],["component/80-53",[]],["title/80-54",[29,27.35,858,22.276,1713,31.899,2020,36.445]],["name/80-54",[]],["text/80-54",[]],["component/80-54",[]],["title/80-55",[1,10.112,51,22.015,94,14.156]],["name/80-55",[]],["text/80-55",[]],["component/80-55",[]],["title/80-56",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/80-56",[]],["text/80-56",[]],["component/80-56",[]],["title/80-57",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-57",[]],["text/80-57",[]],["component/80-57",[]],["title/80-58",[4,21.256,29,24.253,118,23.355,2020,32.319,2272,26.149]],["name/80-58",[]],["text/80-58",[]],["component/80-58",[]],["title/80-59",[187,36.84,232,23.786,287,29.158]],["name/80-59",[]],["text/80-59",[]],["component/80-59",[]],["title/80-60",[226,40.484,955,33.607,1956,45.745]],["name/80-60",[]],["text/80-60",[]],["component/80-60",[]],["title/80-61",[28,19.699,1816,50.704]],["name/80-61",[]],["text/80-61",[]],["component/80-61",[]],["title/80-62",[1852,42.531,2819,48.945]],["name/80-62",[]],["text/80-62",[]],["component/80-62",[]],["title/80-63",[140,27.216,188,24.43,2819,52.96]],["name/80-63",[]],["text/80-63",[]],["component/80-63",[]],["title/80-64",[188,28.006,2819,58.376]],["name/80-64",[]],["text/80-64",[]],["component/80-64",[]],["title/80-65",[51,25.79,1816,50.704]],["name/80-65",[]],["text/80-65",[]],["component/80-65",[]],["title/80-66",[28,16.815,89,29.406,335,29.406]],["name/80-66",[]],["text/80-66",[]],["component/80-66",[]],["title/80-67",[1,7.822,51,17.029,94,10.95,858,19.754,2272,26.149]],["name/80-67",[]],["text/80-67",[]],["component/80-67",[]],["title/80-68",[52,14.576,94,9.836,778,16.337,858,17.745,1151,18.417,2272,23.489]],["name/80-68",[]],["text/80-68",[]],["component/80-68",[]],["title/80-69",[1,7.026,29,21.786,51,15.297,94,9.836,858,17.745,2020,29.031]],["name/80-69",[]],["text/80-69",[]],["component/80-69",[]],["title/80-70",[29,19.774,52,13.23,94,8.928,778,14.829,858,16.106,1151,16.717,2020,26.351]],["name/80-70",[]],["text/80-70",[]],["component/80-70",[]],["title/80-71",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/80-71",[]],["text/80-71",[]],["component/80-71",[]],["title/80",[28,16.815,29,31.353,858,25.537]],["name/80",[29,1.609]],["text/80",[0,0.151,1,0.562,2,0.628,4,1.232,7,0.446,8,0.197,10,1.603,11,0.132,12,0.145,13,0.471,15,0.864,18,0.099,19,0.415,21,0.122,24,0.137,26,0.081,27,0.118,28,2.811,29,4.405,32,0.098,34,2.233,36,0.819,37,1.269,38,0.356,40,0.724,41,0.488,45,0.413,46,0.549,48,1.123,49,0.109,50,0.745,51,0.414,52,0.289,54,0.448,56,0.076,59,0.679,60,1.161,66,1.311,69,0.125,71,0.396,72,0.878,73,1.582,74,0.137,75,0.213,76,0.162,78,0.122,79,0.118,80,2.135,81,0.122,82,0.447,85,0.438,86,0.227,87,0.114,89,1.145,94,2.147,95,0.484,98,0.182,103,0.229,106,0.608,107,0.121,109,0.836,111,0.101,114,1.137,118,0.986,120,0.413,121,0.683,122,0.423,123,0.488,125,0.689,127,0.254,129,0.532,131,0.219,133,0.085,135,0.955,139,0.301,140,0.347,142,0.664,143,0.112,145,0.123,147,0.727,149,0.18,151,0.384,154,0.393,159,0.423,161,0.244,164,1.278,166,0.442,167,0.229,172,1.714,175,0.747,176,0.752,177,0.681,181,0.111,184,0.795,186,0.161,187,0.41,188,0.791,189,0.657,190,4.704,192,0.452,196,0.291,200,0.103,201,0.569,205,0.128,206,1.137,219,0.599,225,0.773,226,1.493,227,0.222,229,0.777,232,2.306,236,0.66,237,0.248,239,0.339,240,1.438,241,0.117,242,0.849,243,0.708,244,0.991,245,0.447,250,0.482,251,0.112,253,1.282,254,0.076,260,0.539,263,1.045,264,1.217,266,0.423,270,0.098,272,1.448,273,0.122,276,1.032,279,1.336,280,0.776,282,0.134,285,0.104,286,0.25,287,1.251,291,0.101,292,0.127,293,1.161,295,0.486,300,1.041,302,1.789,305,0.175,306,0.527,308,0.194,309,0.949,310,0.757,318,0.164,320,0.21,329,0.221,330,0.219,334,0.183,335,0.764,342,0.44,344,0.807,345,0.108,347,0.656,348,0.662,350,0.558,352,0.601,354,0.636,355,0.307,356,0.18,363,0.551,373,0.672,382,0.407,388,0.24,389,0.4,392,0.581,393,0.103,395,0.114,397,0.082,398,0.829,417,0.193,420,0.134,421,0.199,423,1.722,425,1.454,427,0.145,432,0.386,435,0.194,436,0.204,437,0.293,438,0.26,439,0.272,440,0.307,443,0.236,444,0.342,445,4.101,452,0.13,504,0.319,505,0.804,511,0.913,512,0.128,513,0.957,514,0.625,516,0.098,518,0.102,519,0.127,521,0.236,527,1.116,529,0.366,530,0.25,533,0.321,534,0.123,547,0.148,552,0.13,553,0.588,554,0.349,559,0.095,561,0.229,562,0.971,563,0.336,564,0.257,565,0.31,569,0.106,575,0.734,576,0.191,578,0.393,582,0.2,588,0.279,589,0.417,591,0.504,592,2.986,609,0.102,635,0.103,642,0.113,646,0.257,648,0.128,654,0.217,660,0.148,668,0.593,673,0.233,674,0.227,676,0.13,685,0.113,688,1.056,689,0.27,691,0.088,692,1.848,698,0.108,699,0.399,700,0.123,702,0.148,703,0.215,710,0.101,711,0.111,715,0.128,716,1.486,722,0.272,724,0.132,729,1.522,732,0.479,733,0.134,735,0.33,738,0.152,741,0.881,742,0.101,753,0.608,754,1.102,755,0.157,761,0.565,763,0.118,767,0.365,773,0.217,776,0.936,778,0.262,783,0.195,784,1.635,789,0.362,790,0.227,791,0.098,793,0.231,797,0.162,800,0.067,805,0.754,806,0.106,809,0.342,810,0.333,811,0.399,813,0.407,816,0.222,817,0.339,820,0.33,821,0.269,822,0.265,824,0.333,826,0.291,828,0.697,829,3.164,834,0.095,836,0.558,838,0.125,839,0.573,840,0.495,846,0.227,848,0.162,854,0.21,856,0.329,858,4.362,860,1.845,861,0.182,865,0.206,866,0.148,867,0.734,869,0.588,871,0.118,877,0.123,881,1.236,891,0.152,899,0.442,905,0.123,907,0.71,909,0.215,910,0.215,933,0.532,934,0.229,935,0.121,936,0.148,937,0.106,939,0.687,946,0.132,947,0.113,948,0.142,952,0.101,954,0.201,955,4.031,957,0.139,958,0.119,962,0.11,964,0.092,967,0.724,971,0.407,973,0.366,997,0.134,1004,0.295,1008,0.275,1011,0.352,1012,0.157,1019,0.869,1020,0.958,1021,0.106,1023,0.371,1024,0.442,1030,0.303,1032,0.923,1043,1.894,1044,0.366,1046,0.483,1059,0.565,1068,0.203,1072,0.116,1073,0.339,1074,0.415,1075,0.286,1081,0.253,1104,0.427,1106,0.148,1109,0.134,1120,0.152,1122,0.681,1132,0.119,1136,0.777,1145,0.303,1150,0.21,1151,0.077,1153,0.788,1155,3.738,1156,2.798,1158,0.199,1171,0.113,1180,0.125,1185,0.11,1187,0.625,1194,0.187,1198,0.904,1209,0.118,1212,0.111,1214,0.301,1215,0.664,1216,0.42,1221,0.413,1228,0.142,1233,0.139,1245,0.943,1248,0.286,1251,0.366,1255,0.142,1272,0.502,1299,0.169,1303,0.736,1304,0.361,1317,2.956,1320,0.121,1321,0.588,1324,0.222,1325,0.13,1326,0.162,1331,0.361,1334,0.139,1341,0.194,1345,0.746,1346,0.122,1351,0.706,1352,0.142,1354,0.115,1362,0.327,1363,0.603,1365,0.74,1374,0.407,1376,0.349,1390,0.293,1392,0.132,1393,0.309,1395,0.152,1398,0.244,1399,0.413,1400,0.152,1402,0.471,1404,2.045,1417,2.238,1418,1.964,1420,0.106,1428,0.4,1432,0.475,1442,0.139,1445,0.445,1449,0.116,1461,0.393,1464,0.489,1466,0.117,1467,0.132,1471,0.442,1475,0.681,1477,0.629,1478,1.312,1480,0.465,1490,0.152,1493,0.127,1507,0.518,1513,0.293,1518,0.122,1520,0.137,1521,0.434,1526,0.207,1536,3.271,1541,0.134,1544,0.142,1571,0.899,1572,0.119,1583,0.139,1600,0.212,1603,0.148,1648,0.709,1656,0.253,1666,0.127,1689,0.909,1691,0.231,1698,0.125,1699,0.286,1704,0.139,1708,0.13,1712,0.353,1713,4.258,1717,0.127,1722,0.27,1727,0.134,1730,0.169,1737,0.142,1738,0.688,1740,0.502,1741,0.13,1742,0.336,1746,0.13,1757,0.361,1760,0.101,1761,1.73,1762,0.114,1773,0.293,1777,0.381,1781,0.393,1796,0.107,1801,0.253,1803,0.265,1804,0.178,1805,0.178,1811,0.25,1813,0.122,1816,3.193,1821,0.445,1833,0.532,1841,1.043,1843,0.261,1847,0.25,1852,0.307,1857,0.148,1858,0.13,1867,0.145,1870,0.105,1881,0.122,1890,0.152,1891,0.132,1893,0.581,1897,0.558,1904,0.139,1909,0.482,1925,0.31,1931,0.118,1932,0.69,1936,0.275,1944,0.244,1955,0.113,1956,1.962,1958,0.509,1960,0.178,1961,0.11,1984,3.339,1989,0.132,1992,0.241,1994,0.119,2014,2.202,2018,0.286,2020,3.082,2022,0.169,2023,0.434,2024,0.675,2032,0.157,2033,0.25,2039,0.284,2040,0.407,2046,0.795,2051,0.157,2052,4.297,2058,0.522,2075,0.162,2077,0.25,2086,0.162,2088,0.4,2099,0.137,2137,0.145,2142,0.31,2147,0.139,2148,0.157,2190,0.145,2201,0.825,2215,0.231,2217,0.142,2237,0.495,2238,0.119,2247,0.417,2252,0.459,2268,0.434,2272,2.584,2273,0.25,2278,0.134,2286,0.145,2290,0.157,2298,0.352,2305,0.381,2312,0.65,2340,0.148,2344,0.128,2357,0.162,2362,0.334,2382,0.152,2383,0.157,2391,1.544,2398,0.139,2422,0.611,2428,0.145,2440,1.098,2446,2.113,2451,0.139,2452,0.145,2457,0.137,2470,0.162,2491,0.522,2525,0.169,2526,0.142,2560,0.442,2564,0.31,2572,0.178,2573,0.157,2577,0.142,2585,0.301,2641,0.169,2683,0.547,2697,0.301,2749,2.26,2750,1.833,2755,0.773,2756,0.132,2762,0.139,2783,0.162,2784,0.162,2792,1.17,2804,0.32,2817,0.275,2819,2.104,2836,0.142,2869,0.885,2882,0.157,2884,0.157,2898,1.81,2901,0.145,2926,0.334,2930,0.139,3001,0.152,3113,0.572,3117,0.157,3164,0.178,3202,1.244,3237,0.334,3238,0.445,3239,0.334,3290,1.47,3300,0.352,3342,0.13,3433,2.649,3476,0.169,3478,1.833,3482,1.091,3606,0.139,3621,0.352,3661,0.334,3699,0.169,3700,0.169,3713,0.805,3716,1.912,3723,0.169,3744,0.169,3746,1.101,3755,0.965,3924,0.805,3926,0.849,3947,0.178,4135,0.352,4168,0.169,4176,1.065,4181,0.162,4184,0.334,4240,0.169,4243,0.955,4244,0.157,4246,0.652,4253,1.328,4271,0.145,4290,0.32,4361,0.178,4368,0.522,4396,0.152,4409,0.145,4441,0.145,4497,0.32,4518,0.178,4533,0.169,4620,0.142,4629,1.46,4648,0.137,4679,0.178,4705,0.157,4755,0.178,4770,0.178,4798,0.169,4833,0.916,4834,0.31,4838,0.32,4861,0.445,4866,4.294,4869,1.654,4895,0.169,4919,2.28,4961,0.169,4993,0.178,4995,2.187,4996,1.007,4997,1.244,4998,3.834,4999,0.192,5000,0.192,5001,0.178,5002,0.352,5003,0.38,5004,0.157,5005,0.742,5006,0.192,5007,0.192,5008,0.352,5009,0.192,5010,0.352,5011,0.192,5012,1.007,5013,0.192,5014,3.813,5015,1.415,5016,0.38,5017,1.312,5018,0.563,5019,0.522,5020,0.563,5021,0.38,5022,0.192,5023,0.38,5024,0.192,5025,0.38,5026,0.192,5027,0.192,5028,0.192,5029,0.192,5030,0.192,5031,0.192,5032,0.192,5033,2.03,5034,3.588,5035,0.38,5036,0.916,5037,0.563,5038,0.742,5039,0.192,5040,0.192,5041,0.192,5042,0.38,5043,0.192,5044,0.192,5045,0.192,5046,0.563,5047,0.192,5048,0.38,5049,0.192,5050,0.518,5051,0.192,5052,0.192,5053,0.352,5054,0.192,5055,0.849,5056,0.192,5057,0.192,5058,0.192,5059,0.38,5060,0.38,5061,0.192,5062,0.38,5063,0.192,5064,0.742,5065,0.38,5066,0.192,5067,0.742,5068,0.192,5069,0.192,5070,0.38,5071,0.192,5072,0.178,5073,0.192,5074,0.742,5075,0.192,5076,0.192,5077,0.742,5078,0.192,5079,0.31,5080,0.192,5081,0.192,5082,0.38,5083,0.38,5084,0.38,5085,0.38,5086,0.38,5087,0.38,5088,0.192,5089,0.192,5090,0.192,5091,0.178,5092,0.192,5093,0.178,5094,0.192,5095,0.352,5096,0.192,5097,0.192,5098,0.192,5099,0.192,5100,0.192,5101,0.192,5102,0.178,5103,0.38,5104,0.38,5105,0.192,5106,0.38,5107,0.192,5108,0.192,5109,0.192,5110,0.192,5111,0.192,5112,0.192,5113,0.192,5114,0.178,5115,0.192,5116,0.152,5117,0.192,5118,0.192,5119,0.38,5120,0.38,5121,0.38,5122,0.38,5123,0.563,5124,0.38,5125,0.192,5126,0.352,5127,0.169,5128,0.178,5129,0.38,5130,0.178,5131,0.38,5132,0.192,5133,0.178,5134,0.192,5135,1.415,5136,0.192,5137,0.192,5138,0.192,5139,0.38,5140,0.38,5141,0.192,5142,0.192,5143,0.192,5144,0.38,5145,0.192,5146,0.352,5147,0.38,5148,0.38,5149,0.38,5150,0.38,5151,0.38,5152,0.352,5153,0.38,5154,0.192,5155,0.192,5156,0.38,5157,0.38,5158,0.38,5159,0.38,5160,0.38,5161,0.38,5162,0.38,5163,0.38,5164,0.38,5165,0.192,5166,0.192,5167,0.192,5168,0.192,5169,0.157,5170,0.192,5171,0.192,5172,0.192,5173,0.192,5174,0.178,5175,0.178,5176,0.192,5177,0.192,5178,0.192,5179,0.192,5180,0.192,5181,0.192,5182,0.192,5183,0.38,5184,0.192,5185,0.38,5186,0.192,5187,0.192,5188,0.192,5189,0.192,5190,0.192,5191,0.38,5192,0.563,5193,0.192,5194,0.742,5195,0.916,5196,0.849,5197,0.916,5198,0.192,5199,0.192,5200,0.229,5201,0.192,5202,0.192,5203,0.192,5204,0.192,5205,0.192,5206,0.192,5207,0.192,5208,0.563,5209,0.178,5210,0.192,5211,0.169,5212,0.169,5213,0.178,5214,0.192,5215,0.522,5216,0.563,5217,0.38,5218,0.742,5219,0.742,5220,1.086,5221,0.192,5222,0.192,5223,0.162,5224,0.38,5225,0.38,5226,0.192,5227,0.38,5228,0.192,5229,0.192,5230,0.192,5231,0.38,5232,0.192,5233,0.563,5234,0.563,5235,0.192,5236,0.192,5237,0.192,5238,0.192,5239,0.192,5240,0.192,5241,0.38,5242,0.192,5243,0.192,5244,0.169,5245,0.157,5246,0.148,5247,0.192,5248,0.38,5249,0.192,5250,1.086,5251,0.916,5252,0.916,5253,0.563,5254,0.38,5255,0.38,5256,0.38,5257,0.38,5258,0.192,5259,0.38,5260,0.192,5261,0.192,5262,0.38,5263,0.192,5264,0.38,5265,0.192]],["component/80",[1,0.349,2,0.663,18,0.6]],["title/81-1",[94,20.016]],["name/81-1",[]],["text/81-1",[]],["component/81-1",[]],["title/81-2",[1,10.112,51,22.015,94,14.156]],["name/81-2",[]],["text/81-2",[]],["component/81-2",[]],["title/81-3",[52,18.299,94,12.348,778,20.509,1151,23.12]],["name/81-3",[]],["text/81-3",[]],["component/81-3",[]],["title/81-4",[1,10.112,51,22.015,94,14.156]],["name/81-4",[]],["text/81-4",[]],["component/81-4",[]],["title/81-5",[52,16.227,94,10.95,98,24.62,778,18.187,1151,20.502]],["name/81-5",[]],["text/81-5",[]],["component/81-5",[]],["title/81-6",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/81-6",[]],["text/81-6",[]],["component/81-6",[]],["title/81-7",[673,47.91,861,37.286]],["name/81-7",[]],["text/81-7",[]],["component/81-7",[]],["title/81-8",[29,36.73,674,46.518]],["name/81-8",[]],["text/81-8",[]],["component/81-8",[]],["title/81-9",[94,20.016]],["name/81-9",[]],["text/81-9",[]],["component/81-9",[]],["title/81-10",[1,10.112,51,22.015,94,14.156]],["name/81-10",[]],["text/81-10",[]],["component/81-10",[]],["title/81-11",[52,16.227,94,10.95,98,24.62,778,18.187,1151,20.502]],["name/81-11",[]],["text/81-11",[]],["component/81-11",[]],["title/81-12",[52,14.576,94,9.836,260,19.929,310,18.613,778,16.337,1151,18.417]],["name/81-12",[]],["text/81-12",[]],["component/81-12",[]],["title/81",[28,16.815,824,39.344,858,25.537]],["name/81",[824,2.02]],["text/81",[0,1.375,1,1.149,2,0.719,7,0.815,10,1.606,19,0.614,27,0.831,28,3.042,29,4.508,32,0.687,34,2.619,36,1.73,37,2.216,45,0.754,46,1.694,48,1.885,49,0.766,52,0.426,53,2.338,54,1.426,59,0.531,60,0.737,73,0.531,80,0.994,86,0.807,89,2.493,90,0.608,94,2.228,95,1.736,98,1.19,99,0.672,109,0.903,110,1.043,119,0.709,122,0.625,124,0.84,125,1.513,129,2.005,135,0.687,147,0.569,159,0.773,164,0.606,175,0.498,176,0.647,177,1.076,181,1.432,186,0.574,190,4.628,199,1.387,200,0.728,206,0.664,219,0.469,226,0.823,227,0.793,232,1.531,236,0.713,243,2.846,244,0.951,250,0.6,253,1.915,254,0.533,260,1.488,263,2.403,264,1.352,266,0.625,272,1.903,276,0.489,279,1.329,280,1.027,292,0.891,300,1.055,302,0.961,305,0.625,306,0.569,309,1.756,310,2.497,329,0.786,330,1.343,335,0.598,342,1.008,344,0.581,345,0.76,347,0.709,350,0.695,354,0.916,363,1.519,412,2.167,423,1.235,432,0.704,440,0.738,445,1.134,447,0.903,504,0.583,505,1.271,514,0.675,527,1.602,534,0.869,554,0.84,571,0.679,576,0.679,582,0.713,609,0.718,611,0.849,658,0.695,674,5.71,689,0.961,692,1.506,716,1.295,729,1.762,734,0.823,741,1.4,753,0.657,754,0.79,760,2.956,781,0.93,784,0.637,789,2.445,800,0.471,809,0.823,824,5.893,829,2.674,840,0.903,856,0.6,858,4.62,861,0.647,881,0.517,955,3.613,957,0.978,967,1.588,996,0.916,1030,0.728,1032,0.723,1046,1.311,1075,0.687,1081,0.903,1122,0.849,1153,1.043,1155,3.766,1156,2.472,1171,0.793,1216,0.766,1218,1.857,1221,0.754,1257,1.19,1271,0.961,1317,3.171,1321,0.869,1333,1.874,1341,2.189,1348,1.513,1355,0.823,1374,0.978,1383,1.142,1399,2.802,1404,1.754,1417,2.712,1418,1.464,1463,0.76,1478,1.409,1526,1.357,1648,3.197,1656,1.661,1712,0.849,1713,2.354,1760,0.713,1761,4.777,1816,2.245,1853,0.831,1891,2.373,1925,1.103,1955,0.793,1984,3.582,2014,2.663,2101,1.918,2172,2.427,2272,0.687,2312,0.961,2391,0.961,2446,2.028,2470,1.142,2560,0.807,2564,1.103,2667,4.487,2783,1.142,2898,3.159,3476,2.189,3606,0.978,3638,1.103,3879,1.255,4140,1.19,4184,3.038,4409,1.019,4497,1.142,4522,2.308,4797,1.19,4838,2.099,4866,4.226,4869,3.769,4919,3.769,5004,6.165,5008,1.255,5010,1.255,5017,3.975,5019,2.308,5152,1.255,5223,1.142,5266,4.965,5267,1.354,5268,1.354,5269,1.255,5270,1.354,5271,1.354,5272,1.354,5273,3.204,5274,2.489,5275,3.455,5276,1.354,5277,2.489,5278,2.489,5279,1.354,5280,1.354,5281,1.354,5282,1.142,5283,1.071,5284,5.011,5285,1.354,5286,1.354,5287,1.354,5288,4.287,5289,1.354,5290,1.255,5291,1.255,5292,1.354,5293,1.354,5294,1.354,5295,3.455,5296,3.455,5297,1.354,5298,1.354,5299,1.354,5300,1.354]],["component/81",[1,0.349,2,0.663,18,0.6]],["title/82",[1,10.112,2,19.234,1170,42.755]],["name/82",[3,1.478]],["text/82",[]],["component/82",[1,0.349,2,0.663,1170,1.475]],["title/83",[34,18.215,342,26.979,1434,42.755]],["name/83",[1434,2.195]],["text/83",[19,2.268,21,2.422,25,6.932,26,2.112,28,2.299,34,2.066,48,1.881,77,3.251,82,1.786,84,3.174,89,2.209,133,2.218,154,3.491,172,1.813,175,2.78,177,3.267,184,2.299,186,2.12,190,4.504,197,3.174,244,2.888,272,2.869,279,1.924,285,2.707,305,2.31,306,2.103,309,3.095,334,2.415,342,3.061,344,2.145,438,3.489,516,3.858,518,2.653,519,3.293,527,1.869,559,2.481,561,3.011,591,2.321,674,2.982,675,3.072,694,2.879,722,2.415,746,5.041,754,2.398,789,2.441,805,4.548,834,3.748,839,2.288,881,1.912,935,3.138,940,5.568,973,3.018,1059,2.257,1155,3.441,1159,3.138,1162,3.491,1404,4.622,1418,2.12,1441,2.982,1448,3.011,1524,3.337,1591,3.211,1600,2.788,1708,3.385,1765,4.219,1782,7.419,1940,4.18,1974,4.076,2140,5.568,2156,6.679,2221,3.615,3602,4.219,4489,4.638,4708,3.766,4754,3.957,4798,4.398,5301,5.002,5302,5.002,5303,4.638,5304,5.002,5305,4.638,5306,5.002,5307,5.002,5308,4.638,5309,4.638,5310,5.002,5311,4.638,5312,5.002,5313,5.002]],["component/83",[1,0.349,2,0.663,1170,1.475]],["title/84",[161,50.087,881,29.819]],["name/84",[161,2.195]],["text/84",[1,1.409,2,1.916,25,6.563,28,1.675,34,2.928,35,4.368,37,2.605,38,4.459,46,1.675,50,3.139,59,2.605,60,1.965,73,3.643,118,3.008,122,3.064,129,7.081,142,4.922,171,3.451,193,3.956,219,2.297,239,3.036,241,4.034,263,3.949,279,2.553,280,2.738,300,2.812,342,2.688,347,3.473,354,3.416,551,6.912,674,5.534,699,5.754,834,5.751,854,3.671,881,2.536,935,5.823,973,2.65,1109,4.631,1215,4.922,1349,5.249,1524,4.427,1540,3.698,1731,4.558,1843,4.558,1930,4.71,1994,4.118,2140,4.89,2143,7.829,2144,5.835,2146,5.835]],["component/84",[1,0.349,2,0.663,1170,1.475]],["title/85",[25,44.169,881,29.819]],["name/85",[881,1.307]],["text/85",[1,1.296,2,1.053,10,1.891,19,1.653,21,1.169,25,5.308,26,3.604,28,2.156,34,2.335,36,2.382,37,2.316,40,1.676,52,2.689,60,1.08,75,2.049,82,2.107,89,1.61,94,1.993,95,1.121,106,2.864,120,1.385,167,2.195,175,1.342,177,2.551,184,1.676,188,1.534,189,1.692,190,4.765,227,3.455,229,2.263,237,2.594,244,1.394,263,1.552,264,1.427,279,1.403,306,1.534,309,1.494,335,1.61,354,2.171,362,2.018,423,1.809,435,3.013,438,2.725,439,2.849,444,2.217,530,2.617,559,1.809,560,1.717,576,2.96,635,1.961,642,3.455,668,1.726,754,1.157,809,2.217,829,2.541,834,2.927,839,2.7,856,1.617,937,2.003,971,4.08,973,2.356,975,2.195,1037,2.468,1043,3.744,1099,1.83,1153,1.528,1155,4.809,1156,1.597,1157,2.401,1158,3.089,1159,2.288,1162,4.118,1194,1.799,1388,3.076,1404,4.334,1417,4.621,1418,1.546,1461,2.545,1575,2.135,1799,2.589,1828,3.382,1852,3.217,1909,2.37,1940,3.264,2140,6.292,2143,6.267,2148,2.972,2167,2.468,2186,3.382,2209,3.382,2237,3.207,2344,3.937,2502,2.589,2710,5.188,4708,6.427,4754,4.668,4826,5.471,4833,3.076,5303,3.382,5305,7.916,5314,3.207,5315,3.207,5316,3.647,5317,5.901,5318,3.647,5319,3.647,5320,3.647,5321,3.647,5322,3.647,5323,3.647,5324,3.647,5325,3.647,5326,3.647,5327,3.647,5328,3.647,5329,3.647,5330,5.471]],["component/85",[1,0.349,2,0.663,1170,1.475]],["title/86-1",[1208,59.747]],["name/86-1",[]],["text/86-1",[]],["component/86-1",[]],["title/86",[1,10.112,2,19.234,25,37.703]],["name/86",[3,1.478]],["text/86",[25,7.164,26,3.104,28,2.852,34,3.312,56,2.916,72,3.179,80,2.936,82,2.626,94,1.563,114,3.964,149,3.478,172,2.665,264,2.876,280,3.033,283,4.098,285,3.979,306,3.092,342,4.035,362,4.067,373,4.255,425,3.08,516,3.754,527,2.748,588,3.647,697,3.925,746,4.905,789,3.588,805,4.425,867,3.428,886,4.343,938,5.05,940,5.418,954,3.899,973,2.936,1209,4.515,1215,3.899,1273,3.668,1434,4.72,1463,5.594,1484,4.975,1852,4.008,1940,5.51,2140,5.418,3593,5.816,3705,5.534,4708,5.534]],["component/86",[1,0.349,2,0.663,1170,1.475]],["title/87",[25,44.169,516,39.838]],["name/87",[516,1.746]],["text/87",[25,5.091,34,1.735,114,3.579,124,3.937,175,2.335,177,2.744,190,4.786,362,5.779,438,4.153,516,4.592,646,4.294,698,3.564,789,3.096,805,5.413,839,2.903,971,6.588,975,6.288,1059,2.864,1155,2.89,1156,2.778,1158,3.321,1404,4.565,1418,2.689,1463,3.564,1540,3.536,1674,5.579,1781,6.276,1852,3.459,1859,6.383,2198,4.776,2221,7.55,3363,8.264,3366,5.579,3602,5.352,4453,5.579,4590,5.579,5308,5.883,5309,5.883,5311,5.883,5330,5.883,5331,6.345,5332,6.345,5333,6.345,5334,8.993,5335,5.883,5336,8.993,5337,6.345,5338,6.345,5339,6.345,5340,6.345,5341,6.345,5342,6.345]],["component/87",[1,0.349,2,0.663,1170,1.475]],["title/88",[34,18.215,342,26.979,1434,42.755]],["name/88",[1434,2.195]],["text/88",[2,1.21,28,2.332,34,1.145,48,1.575,82,1.496,94,1.731,95,2.025,114,2.622,163,2.334,175,1.541,190,4.798,196,2.165,219,1.45,232,2.909,263,1.782,269,4.327,285,2.267,286,2.757,302,3.144,306,1.761,309,1.715,332,1.873,354,1.541,362,2.317,373,1.789,398,3.857,435,4.716,438,5.152,439,4.459,527,2.462,592,2.546,642,4.769,694,2.41,703,3.73,722,2.022,753,2.033,773,2.39,821,2.001,829,1.804,834,4.581,863,2.283,864,4.378,865,4.409,871,6.851,881,3.113,934,2.521,1059,1.89,1155,4.856,1156,3.566,1317,2.352,1404,2.126,1418,3.914,1683,5.212,1761,4.396,1781,4.598,1796,2.334,1961,4.648,1984,2.657,2039,2.113,2046,2.657,2399,2.972,2614,5.557,2900,2.834,3421,5.557,3718,2.972,4411,7.161,4836,6.637,4952,3.228,4957,7.552,4958,6.109,4962,7.552,4963,6.109,4966,3.883,4967,3.883,4968,3.883,4969,3.883,4970,3.883,4971,6.109,4972,3.883,4973,3.883,5343,4.188,5344,4.188,5345,4.188]],["component/88",[1,0.349,2,0.663,1170,1.475]],["title/89-1",[28,11.684,858,17.745,863,25.227,864,24.875,865,25.048,1153,19.385]],["name/89-1",[]],["text/89-1",[]],["component/89-1",[]],["title/89-2",[48,15.798,186,17.802,232,15.002,269,19.678,863,22.898,864,22.578,865,22.736]],["name/89-2",[]],["text/89-2",[]],["component/89-2",[]],["title/89",[863,28.083,864,27.692,865,27.885,868,35.386,881,19.689]],["name/89",[881,1.307]],["text/89",[10,2.012,15,1.221,28,1.861,34,1.717,36,1.954,40,2.885,48,1.82,50,1.358,52,1.525,82,1.729,94,2.019,124,1.781,133,3.268,141,1.915,142,2.567,163,1.6,175,1.056,184,1.319,186,2.051,188,1.207,190,4.633,196,1.483,199,1.6,201,1.154,219,0.993,225,1.18,232,4.329,236,1.512,237,1.262,239,1.313,242,1.295,244,1.097,250,1.273,253,1.097,263,2.671,269,5.41,272,1.09,279,1.104,280,1.184,285,1.553,302,1.868,305,1.325,308,1.465,310,1.154,323,3.982,342,1.961,344,2.076,352,1.588,354,2.712,363,1.262,373,2.068,395,1.695,421,1.502,505,2.471,527,1.809,530,2.146,551,3.742,575,2.257,592,2.942,601,5.538,699,1.543,728,1.68,739,2.27,741,1.163,806,1.576,817,1.728,821,1.372,829,3.174,834,2.401,858,1.1,861,1.372,863,3.421,864,3.374,865,2.62,867,2.926,868,6.13,871,2.972,881,1.85,909,1.625,935,1.8,939,1.393,952,1.512,967,1.319,969,2.442,1043,1.821,1059,1.295,1148,2.003,1153,2.028,1155,2.858,1156,1.257,1198,1.379,1217,1.612,1218,2.602,1228,2.115,1273,1.432,1289,2.037,1303,1.493,1317,1.612,1324,1.68,1339,2.27,1354,1.711,1393,1.576,1404,1.457,1417,1.553,1418,3.488,1471,1.711,1518,1.821,1536,2.27,1540,1.6,1648,3.553,1712,3.036,1714,1.8,1889,3.944,1984,1.821,2001,2.27,2007,3.435,2011,2.161,2032,2.339,2033,1.889,2037,2.421,2174,2.161,2203,2.421,2238,1.781,2278,2.003,2322,2.421,2326,2.661,2327,2.523,2440,4.38,2539,2.27,3331,2.661,3402,2.523,4264,2.212,4319,2.661,4462,2.523,4849,2.523,4866,2.421,4889,7.631,4891,2.661,4899,2.661,4900,2.661,4901,4.488,4902,2.523,4903,2.523,4904,2.661,4905,2.523,4913,2.661,4964,2.661,5346,4.84,5347,2.87,5348,2.87,5349,2.661,5350,4.84,5351,7.37,5352,7.37,5353,2.87,5354,2.87,5355,2.87,5356,2.87]],["component/89",[1,0.349,2,0.663,1170,1.475]],["title/90-1",[1208,59.747]],["name/90-1",[]],["text/90-1",[]],["component/90-1",[]],["title/90",[1,7.822,2,14.878,863,28.083,864,27.692,865,27.885]],["name/90",[3,1.478]],["text/90",[2,1.982,7,2.655,28,3.398,32,2.239,34,1.207,37,1.732,45,2.459,51,1.458,56,2.721,60,1.306,81,2.799,94,1.459,95,1.356,127,3.097,133,1.956,135,2.239,151,3.528,155,2.832,171,2.294,176,3.279,232,4.411,245,1.813,263,3.583,270,2.253,280,1.82,291,2.309,295,3.639,302,3.25,306,1.855,352,2.44,425,2.874,436,2.371,505,2.253,516,2.253,527,1.649,554,2.738,563,5.021,564,4.643,583,1.892,588,2.188,654,2.518,685,2.583,691,2.028,735,4.017,741,1.787,773,3.916,783,3.525,790,2.63,806,2.422,810,2.606,834,2.188,854,3.796,858,3.229,861,5.208,863,3.741,864,3.688,865,5.142,868,4.713,871,2.709,886,2.606,935,2.767,939,3.331,969,2.226,973,2.74,1024,2.63,1046,3.615,1059,3.097,1075,3.483,1198,3.296,1292,3.49,1293,3.879,1303,3.569,1324,2.583,1452,3.251,1471,2.63,1475,5.283,1648,5.379,1714,2.767,1752,2.799,1796,3.824,1961,4.806,1990,3.078,2033,2.904,2039,2.226,2219,3.251,2929,3.721,2987,3.595,3133,4.09,4386,3.49,4721,3.721,5146,4.09,5357,4.411]],["component/90",[1,0.349,2,0.663,1170,1.475]],["title/91",[863,28.083,864,27.692,871,31.635,1471,30.716,1648,29.165]],["name/91",[871,2.099]],["text/91",[2,1.304,4,1.863,9,1.5,15,1.921,28,1.14,34,1.911,36,1.822,48,1.698,52,1.422,59,2.742,60,1.337,81,2.864,94,0.96,114,2.78,190,4.517,232,4.439,237,1.985,239,2.065,266,2.085,269,4.506,272,1.714,285,3.781,302,1.743,306,1.898,335,1.993,347,3.657,355,2.461,362,2.497,373,1.929,398,2.643,421,2.363,435,3.567,438,3.226,439,3.373,505,2.305,530,3.098,538,2.934,560,2.125,573,2.348,583,1.936,591,2.095,592,5.195,646,4.727,716,2.348,722,2.18,735,2.643,738,3.571,740,1.524,773,3.987,776,2.444,829,1.944,834,3.466,858,1.731,863,3.808,864,4.593,865,5.955,869,2.444,871,2.772,934,2.718,947,2.643,971,2.479,1004,2.363,1013,2.516,1024,2.692,1037,3.055,1059,3.153,1072,2.718,1155,3.182,1156,1.977,1188,3.571,1194,2.227,1346,2.864,1351,3.479,1397,3.204,1404,2.292,1509,3.327,1648,4.838,1749,2.864,1771,3.263,1940,2.497,1944,4.485,2033,2.972,2039,2.278,2257,3.204,2440,4.875,2791,3.327,3611,3.479,4264,3.479,4836,3.679,4923,3.969,4924,4.186,5358,4.515,5359,4.515,5360,4.515,5361,4.515,5362,4.515,5363,6.986,5364,4.515,5365,4.515,5366,4.515,5367,4.515,5368,4.515,5369,3.969,5370,4.515,5371,3.679,5372,3.969]],["component/91",[1,0.349,2,0.663,1170,1.475]],["title/92",[397,33.197,1198,37.477]],["name/92",[3,1.478]],["text/92",[1,0.948,2,1.803,21,2.001,28,1.576,34,3.261,37,2.45,59,2.45,60,1.848,93,4.109,98,2.983,120,3.376,147,2.625,184,2.869,188,2.625,199,3.479,219,3.077,232,2.229,250,2.768,260,4.459,272,3.932,279,2.401,286,4.109,302,2.409,397,4.405,449,4.917,780,3.31,800,2.173,872,3.961,881,4.312,927,3.168,1100,4.224,1156,4.533,1198,4.27,1200,5.577,1201,3.379,1252,4.057,1304,4.007,1342,5.265,1388,7.498,1473,3.795,1507,4.356,1571,3.247,1591,4.007,1597,6.692,1713,3.428,1718,4.288,1763,4.6,1841,3.207,1847,5.852,1893,3.961,3278,7.816,4410,4.938,5373,12.394,5374,5.489,5375,6.242,5376,8.89,5377,8.89]],["component/92",[56,0.911,397,0.978,1198,1.104]],["title/93",[31,41.103,754,24.758]],["name/93",[31,1.052,754,0.634]],["text/93",[1,0.408,4,1.11,10,0.862,21,0.862,28,0.679,31,5.328,34,1.253,36,1.086,48,2.658,51,0.889,52,0.847,59,2.349,60,0.796,80,2.39,82,0.961,94,2.061,95,2.98,108,2.128,114,1.071,120,1.74,121,1.168,127,1.214,147,1.927,166,2.212,175,2.917,177,1.163,186,1.14,188,1.131,190,4.702,219,2.071,227,2.682,243,1.723,245,1.106,253,1.751,260,1.158,264,1.052,269,1.26,272,1.021,273,1.707,309,2.451,318,1.158,330,1.045,342,1.09,356,1.273,362,2.534,363,1.183,373,1.149,435,2.339,438,2.764,439,2.89,440,1.466,513,1.635,527,2.641,573,1.399,582,1.417,583,1.154,588,1.334,609,1.427,642,2.682,668,3.343,703,4,754,3.831,785,1.944,793,1.635,800,0.936,817,1.619,821,2.86,829,4.355,839,1.231,846,2.732,872,1.707,881,2.287,952,1.417,971,3.88,973,1.074,975,1.619,1014,2.843,1019,1.652,1020,1.82,1044,2.952,1100,3.1,1122,1.688,1132,4.918,1148,1.877,1153,1.919,1155,4.415,1156,3.47,1158,4.515,1194,1.327,1200,3.754,1304,1.727,1317,2.573,1345,1.417,1404,1.365,1417,1.456,1418,2.995,1420,2.516,1463,1.511,1464,2.446,1467,1.848,1695,1.982,1696,4.05,1698,1.748,1753,1.909,1758,1.456,1763,1.982,1801,3.057,1893,1.707,1951,1.575,1984,2.907,2088,1.909,2172,3.388,2502,1.909,2627,2.128,2729,4.028,3701,6.213,3736,6.213,4472,2.494,4605,2.192,4628,4.028,5133,6.552,5378,5.984,5379,2.69,5380,2.69,5381,7.926,5382,2.69,5383,2.69,5384,2.69,5385,2.69,5386,2.69,5387,2.69,5388,2.69,5389,2.69,5390,5.984,5391,2.69,5392,2.69,5393,2.69,5394,2.69,5395,2.69,5396,2.69,5397,2.69,5398,4.582,5399,4.582,5400,2.69,5401,2.69,5402,1.795,5403,2.69,5404,2.69]],["component/93",[56,0.718,95,0.557,143,1.051,754,0.575]],["title/94",[1208,59.747]],["name/94",[3,1.478]],["text/94",[10,2.699,19,3.818,34,3.304,59,3.305,60,2.493,80,4.825,82,3.008,95,3.928,125,3.687,166,4.066,238,6.49,302,3.25,306,3.541,345,4.73,444,5.119,551,5.021,568,5.543,668,5.716,703,4.767,754,2.672,852,5.618,867,3.926,881,3.218,967,3.871,1073,5.069,1180,5.473,1796,4.693,2042,6.862,3177,7.808,5246,6.49,5405,6.862]],["component/94",[56,0.718,95,0.557,143,1.051,754,0.575]],["title/95",[967,35.861,1449,46.963]],["name/95",[967,0.918,1449,1.202]],["text/95",[28,1.969,37,3.061,54,3.217,72,3.372,94,1.657,189,3.618,219,2.699,239,3.567,251,6.013,260,5.011,272,3.934,279,3,290,4.892,330,4.026,563,6.178,564,5.276,754,2.474,872,4.947,881,2.98,927,3.958,967,3.584,968,4.606,1150,4.313,1156,5.095,1200,6.5,1201,4.22,1320,4.892,1449,4.693,1763,5.746,1893,4.947,2099,5.534,2736,6.856,2737,8.739,3278,6.856,4721,6.577,5406,10.361,5407,9.815,5408,6.856]],["component/95",[56,0.718,95,0.557,143,1.051,754,0.575]],["title/96",[668,36.912,1200,48.945]],["name/96",[3,1.478]],["text/96",[1,1.365,10,2.383,21,3.217,22,2.794,32,4.562,34,2.745,48,1.842,51,1.619,69,3.182,94,1.041,99,2.429,120,1.859,166,2.364,190,3.483,196,2.531,200,3.996,219,1.695,239,2.24,253,1.871,266,2.261,272,3.811,280,2.02,283,2.729,295,2.597,302,2.87,309,3.681,310,3.615,345,2.75,363,3.269,373,2.092,518,2.597,527,1.83,668,6.437,699,2.632,703,4.209,729,3.056,754,2.359,760,3.892,793,2.976,809,2.976,817,2.947,821,2.34,829,2.109,852,3.267,958,3.038,967,2.251,997,3.417,1073,2.947,1109,3.417,1132,4.614,1155,2.23,1158,4.704,1159,5.638,1180,3.182,1200,7.406,1348,2.976,1388,4.13,1420,2.689,1464,2.614,1516,4.305,1704,3.539,1767,6.537,1775,5.881,2453,4.13,2696,3.417,2930,3.539,3032,6.271,3701,4.305,4161,4.54,5409,4.896,5410,4.896,5411,4.896,5412,4.896,5413,4.896,5414,4.896,5415,10.036,5416,4.896,5417,4.896,5418,4.896]],["component/96",[56,0.911,668,1.087,1200,1.441]],["title/97-1",[142,41.374,2250,57.497]],["name/97-1",[]],["text/97-1",[]],["component/97-1",[]],["title/97-2",[1151,26.505,1648,37.703,2457,47.267]],["name/97-2",[]],["text/97-2",[]],["component/97-2",[]],["title/97",[74,55.373,143,45.282]],["name/97",[3,1.478]],["text/97",[1,1.235,3,3.516,4,3.983,10,0.774,19,1.095,28,2.616,34,3.106,37,0.948,46,0.61,52,0.761,72,1.806,73,3.937,80,0.965,82,0.863,94,1.173,110,1.012,114,3.236,115,1.714,128,1.611,135,3.337,142,2.927,143,1.402,147,2.765,159,1.378,163,1.346,176,4.167,181,1.39,184,1.11,196,2.852,201,1.68,219,1.446,232,0.863,239,1.105,243,2.076,250,1.071,251,1.402,253,0.923,260,1.799,263,1.777,272,0.917,276,0.873,300,1.024,302,2.13,304,1.346,309,2.26,318,1.04,345,4.172,354,2.419,355,1.317,363,1.836,393,1.289,397,3.924,398,1.414,419,1.307,442,3.917,449,2.31,510,2.915,511,2.027,514,1.205,519,1.59,527,2.063,534,1.55,551,2.49,560,1.137,561,1.454,562,1.357,570,1.39,571,2.769,573,2.172,591,1.121,609,1.281,668,1.976,688,1.172,691,1.11,692,1.821,701,1.264,703,2.365,733,1.685,753,2.027,784,1.137,800,0.841,828,1.55,836,1.241,839,1.105,858,1.602,861,1.154,881,2.109,899,6.177,937,2.293,939,2.679,958,1.499,973,2.204,1023,1.59,1030,1.298,1033,2.869,1068,1.289,1075,2.12,1117,1.248,1150,1.336,1151,1.662,1157,2.749,1171,1.414,1198,2.006,1199,1.55,1200,1.515,1215,1.281,1217,1.357,1252,1.57,1303,1.256,1341,1.233,1358,1.317,1394,1.78,1398,2.681,1429,2.037,1431,5.201,1445,1.91,1451,1.91,1466,1.468,1475,1.515,1518,2.65,1527,1.515,1539,1.659,1540,1.346,1647,3.523,1648,4.205,1691,3.355,1707,1.745,1717,1.59,1758,1.307,1821,3.304,1841,1.241,1897,1.818,1903,1.685,1931,2.565,1959,1.659,1989,1.659,2046,1.532,2201,4.889,2265,1.968,2272,2.801,2277,1.91,2281,6.887,2282,3.873,2286,1.818,2289,5.201,2405,1.818,2451,1.745,2457,2.964,2792,1.634,2902,1.57,2921,4.497,3117,1.968,3342,7.01,3611,5.724,4164,2.124,4343,1.818,4370,2.239,5419,4.177,5420,4.177,5421,3.873,5422,2.415,5423,2.415,5424,7.514,5425,2.239,5426,2.239,5427,2.239,5428,2.239,5429,2.239,5430,7.428,5431,5.117,5432,2.239,5433,2.415,5434,2.415,5435,2.239,5436,2.415,5437,2.239,5438,2.415,5439,2.415,5440,2.415,5441,1.861,5442,2.415,5443,2.415,5444,2.415]],["component/97",[56,0.911,74,1.63,143,1.333]],["title/98",[28,14.668,53,39.312,117,45.955,1652,37.755]],["name/98",[1652,2.222]],["text/98",[28,3.018,34,3.04,52,2.244,53,8.088,60,2.11,89,3.146,94,1.515,117,9.454,164,3.187,200,3.83,219,2.466,239,4.461,264,2.787,268,4.289,272,2.706,280,2.94,302,2.75,310,2.866,354,2.622,397,4.149,423,3.535,483,5.251,575,3.322,673,4.376,767,2.836,789,5.424,824,4.21,839,3.26,856,4.324,865,3.857,880,3.638,982,4.034,987,4.973,1184,6.01,1217,5.477,1254,5.637,1392,4.894,1652,6.337,1797,6.01,1881,4.521,1891,4.894,2382,5.637,5004,5.806,5445,7.126,5446,7.126,5447,7.126,5448,6.607]],["component/98",[0,0.914,18,0.6,53,1.555]],["title/99",[52,24.575,5449,78.021]],["name/99",[3,1.478]],["text/99",[0,3.124,1,1.888,10,2.516,19,3.559,28,3.139,34,2.846,36,3.169,46,1.982,52,3.678,53,9.179,54,3.239,60,2.324,95,2.413,106,3.81,107,4.925,117,6.21,151,3.288,177,3.394,201,3.157,302,3.03,390,5.91,432,4.083,505,4.008,518,4.163,571,3.938,865,4.249,1030,4.22,1099,3.938,1252,6.764,1268,5.392,1290,6.21,1652,5.102,2039,3.961,5450,7.85]],["component/99",[0,0.914,18,0.6,53,1.555]],["title/100",[28,14.668,53,39.312,571,29.147,865,31.445]],["name/100",[571,1.715]],["text/100",[0,2.511,1,1.581,14,4.27,28,3.023,34,1.726,52,2.822,53,6.062,54,2.604,60,1.868,73,2.477,80,2.52,82,3.72,89,2.786,94,1.904,95,3.824,118,2.861,175,2.322,190,4.44,232,2.254,253,2.412,280,2.604,571,4.495,703,3.572,858,4.347,865,5.638,877,4.051,1046,3.324,1075,3.203,1155,4.08,1174,5.142,1253,5.142,1254,8.239,1304,4.051,1399,2.848,1404,3.203,1417,4.849,1418,2.674,1526,3.44,1752,4.004,1762,3.728,2272,3.203,5004,5.142,5451,11.338,5452,6.31,5453,5.851,5454,6.31,5455,6.31,5456,6.31,5457,6.31,5458,6.31,5459,6.31]],["component/100",[0,0.914,18,0.6,53,1.555]],["title/101",[17,68.055]],["name/101",[3,1.478]],["text/101",[1,1.282,4,2.075,15,2.76,17,8.611,18,1.695,21,3.819,26,1.268,34,2.498,36,2.03,37,1.179,40,2.312,45,1.674,46,0.758,48,1.892,52,1.584,54,1.239,56,1.995,61,1.845,71,1.299,72,1.299,80,1.2,82,1.073,94,1.795,95,1.546,106,1.458,118,1.362,122,2.322,123,1.35,126,2.368,127,1.356,133,1.332,149,1.421,151,1.258,171,1.562,172,1.089,175,1.851,176,1.436,177,1.299,184,1.381,185,1.562,190,3.67,193,1.791,196,1.553,200,1.615,201,1.208,229,1.864,237,2.211,243,2.853,244,1.922,254,1.981,260,1.294,263,2.14,264,1.967,272,2.463,279,1.156,280,1.239,287,3.322,302,1.941,306,1.263,318,1.294,323,3.191,352,1.662,363,1.321,397,2.76,419,3.511,425,1.258,432,3.374,436,1.615,440,1.638,449,1.662,505,1.534,518,1.593,527,1.123,583,1.288,591,1.394,602,1.604,626,2.261,627,2.641,692,1.31,699,1.615,722,1.451,728,1.759,729,2.067,753,1.458,754,2.059,759,1.701,764,1.885,767,1.196,778,1.776,780,1.593,791,4.665,795,2.096,806,1.649,814,2.534,829,1.294,877,1.928,881,1.148,885,2.132,907,1.507,935,1.885,955,4.262,973,1.2,1014,1.864,1030,1.615,1060,2.261,1068,1.604,1099,2.523,1122,1.885,1151,1.196,1153,1.258,1201,1.626,1218,4.078,1222,1.977,1252,1.952,1254,3.978,1256,4.994,1268,2.063,1303,1.562,1344,1.928,1447,2.033,1450,2.641,1452,2.214,1526,3.536,1583,2.171,1800,2.641,1810,2.315,1842,2.132,1867,2.261,1923,3.876,1990,2.096,1992,3.191,1994,1.864,1997,2.315,2059,2.534,2129,4.242,2132,2.785,2135,2.448,2136,2.534,2167,2.033,2208,2.376,2305,2.033,2452,2.261,2639,2.641,3117,2.448,3700,2.641,4222,2.785,4271,2.261,5245,4.098,5460,8.446,5461,2.785,5462,5.029,5463,2.641,5464,3.004,5465,3.004,5466,2.785,5467,3.004,5468,2.785,5469,2.315,5470,2.063,5471,3.004,5472,3.004,5473,3.004,5474,3.004,5475,3.004,5476,2.785,5477,3.004,5478,3.004,5479,5.029,5480,5.029,5481,3.004,5482,3.004,5483,3.004]],["component/101",[0,0.914,17,1.66,18,0.6]],["title/102",[94,16.583,5402,52.054]],["name/102",[592,1.214,5402,1.332]],["text/102",[1,1.21,17,8.116,34,3.071,42,3.636,46,2.013,52,2.994,94,2.235,126,2.53,127,2.425,133,2.383,149,2.542,172,2.89,185,2.795,190,4.341,229,3.334,236,2.831,237,2.363,239,2.458,241,3.266,254,3.743,260,2.314,272,2.04,279,3.067,302,3.668,344,2.305,354,1.977,361,5.721,373,2.295,419,2.908,483,5.875,516,2.744,554,3.334,562,4.478,635,2.888,676,3.636,686,3.96,729,2.209,764,3.371,778,2.814,780,2.85,854,2.972,929,4.378,955,2.712,1222,5.248,1270,5.181,1320,3.371,1321,3.45,1362,3.119,1507,3.75,1692,3.883,1841,2.76,1903,3.75,1923,4.141,2023,4.141,2139,4.725,2235,4.045,2956,4.378,3498,4.251,4710,4.251,5463,7.009,5466,8.812,5484,5.373,5485,7.972,5486,4.141,5487,5.373,5488,4.982,5489,4.982,5490,7.972,5491,5.373,5492,5.373,5493,5.373,5494,5.373,5495,5.373,5496,5.373,5497,3.883,5498,5.373,5499,5.373,5500,5.373]],["component/102",[0,0.914,17,1.66,18,0.6]],["title/103-1",[52,24.575,701,40.838]],["name/103-1",[]],["text/103-1",[]],["component/103-1",[]],["title/103-2",[52,20.977,701,34.86,1273,33.223]],["name/103-2",[]],["text/103-2",[]],["component/103-2",[]],["title/103",[23,55.373,24,55.373]],["name/103",[3,1.478]],["text/103",[0,2.94,15,2.066,21,1.556,23,5.243,24,7.092,25,6.411,26,4.78,28,1.226,34,2.94,37,1.906,40,2.232,52,1.529,59,1.906,71,2.099,82,1.734,90,4.49,114,1.932,122,2.242,149,2.297,175,1.787,185,2.525,190,4.313,199,2.706,201,2.971,219,3.721,225,1.996,237,2.135,244,1.856,253,1.856,264,1.899,279,1.868,373,2.074,444,4.49,518,2.575,528,2.409,536,2.749,573,2.525,610,5.843,635,2.61,685,2.843,701,2.541,767,1.932,773,2.771,816,2.843,829,2.091,881,1.856,910,2.749,934,2.923,967,2.232,973,2.95,1030,2.61,1043,3.081,1075,2.464,1151,1.932,1155,3.364,1156,2.126,1159,3.046,1195,4.095,1215,3.917,1273,2.422,1289,3.446,1404,4.538,1451,3.841,1500,3.155,1583,3.509,1605,4.502,1772,7.073,1801,3.239,2011,3.655,2013,3.742,2140,8.675,2156,4.863,2170,4.269,2206,4.269,2207,4.502,2208,3.841,2273,3.196,2956,7.286,3188,4.095,4333,4.269,4605,3.956,5501,4.855,5502,4.855,5503,4.855,5504,4.855,5505,4.855,5506,4.855,5507,4.855]],["component/103",[0,0.721,18,0.473,23,1.285,24,1.285]],["title/104-1",[28,13.007,89,22.747,95,15.837,790,30.716,824,30.434]],["name/104-1",[]],["text/104-1",[]],["component/104-1",[]],["title/104-2",[28,13.007,89,22.747,95,15.837,790,30.716,3750,43.451]],["name/104-2",[]],["text/104-2",[]],["component/104-2",[]],["title/104",[27,40.897,28,16.815,790,39.709]],["name/104",[790,2.038]],["text/104",[0,0.628,1,0.952,7,0.95,10,2.009,13,1.002,27,4.799,28,2.749,29,1.851,34,2.663,37,3.227,40,1.807,45,0.88,48,0.594,51,0.947,60,1.164,66,0.843,70,0.933,72,0.683,73,1.124,82,1.023,89,3.937,94,1.747,95,2.403,122,1.816,123,0.709,135,1.996,151,0.661,164,1.281,171,0.821,172,2.483,175,1.447,176,0.755,177,0.683,180,1.084,184,0.726,189,0.733,190,4.684,192,0.779,199,0.88,201,0.635,203,0.933,219,0.546,229,0.98,237,0.694,239,0.722,240,0.924,242,0.713,244,0.603,250,2.484,254,0.622,263,1.673,264,0.618,269,1.842,279,2.635,280,0.651,300,1.667,302,3.016,308,0.806,309,0.647,310,0.635,323,1.002,329,1.663,330,1.113,335,0.697,336,1.084,337,1.141,344,1.229,350,0.811,354,1.778,358,1.026,391,1.014,395,0.933,397,0.672,412,0.683,425,2.626,437,0.821,449,0.873,504,0.68,505,2.008,511,0.766,563,0.941,570,2.263,575,0.736,589,0.887,602,0.843,688,0.766,692,0.688,700,1.839,701,0.826,735,0.924,741,0.64,748,0.97,754,1.248,782,1.164,784,1.349,789,0.77,790,5.806,806,0.867,811,1.54,817,0.95,824,3.703,828,1.014,839,0.722,855,1.759,858,2.148,869,0.855,880,0.806,881,0.603,889,1.002,898,0.855,907,0.792,933,0.916,935,1.797,945,1.053,952,1.509,1032,2.099,1043,1.002,1059,0.713,1068,2.099,1075,0.801,1090,5.224,1099,0.792,1119,1.332,1120,2.266,1151,0.628,1153,1.2,1155,3.91,1156,2.116,1158,2.058,1185,0.901,1196,0.941,1242,4.076,1262,1.164,1268,1.084,1355,0.96,1361,1.164,1362,1.663,1365,2.323,1376,0.98,1399,2.181,1404,1.454,1418,2.374,1442,1.141,1493,1.039,1536,2.266,1544,1.164,1698,1.026,1713,2.159,1737,1.164,1741,3.27,1760,0.832,1771,1.141,1772,2.266,1781,1.999,1811,1.039,1852,0.861,1853,0.97,1955,0.924,2018,1.189,2020,1.797,2023,1.217,2025,2.656,2033,1.039,2040,1.141,2043,1.189,2184,2.791,2217,2.111,2239,2.157,2252,2.334,2257,4.448,2258,1.287,2272,1.996,2273,1.039,2290,1.287,2400,1.388,2423,1.332,2440,1.999,2653,1.388,2671,1.189,2707,1.189,2749,1.249,2792,1.068,2813,1.164,2819,1.797,2869,3.938,2902,1.026,3478,1.249,3482,2.208,3735,1.388,3750,1.332,4064,1.388,4077,2.416,4168,1.388,4181,1.332,4774,1.332,4859,2.519,5004,1.287,5055,1.464,5079,1.287,5093,1.464,5266,3.457,5453,2.656,5508,6.022,5509,6.268,5510,6.022,5511,1.388,5512,4.833,5513,1.579,5514,1.579,5515,1.579,5516,1.579,5517,2.519,5518,1.579,5519,1.579,5520,1.579,5521,1.579,5522,1.579,5523,8.798,5524,5.194,5525,1.999,5526,1.579,5527,3.457,5528,1.464,5529,1.579,5530,4.249,5531,1.579,5532,1.579,5533,8.221,5534,1.579,5535,1.579,5536,1.579,5537,2.519,5538,1.579,5539,1.579,5540,2.865,5541,2.656,5542,1.579,5543,2.865,5544,2.865,5545,2.865,5546,2.416,5547,1.579,5548,1.579,5549,1.579,5550,1.579,5551,1.579,5552,1.579,5553,1.579,5554,1.579,5555,1.579,5556,1.579,5557,1.579,5558,1.579,5559,1.579,5560,1.579,5561,1.579,5562,1.332,5563,2.865,5564,1.579]],["component/104",[0,0.914,18,0.6,27,1.411]],["title/105",[0,31.05,27,47.91]],["name/105",[3,1.478]],["text/105",[0,4.999,1,1.745,4,2.082,10,2.438,18,1.318,27,7.714,28,3.232,29,2.375,34,3.143,36,2.037,37,3.593,45,2.812,46,2.311,50,2.387,56,2.001,59,1.981,73,3.593,74,3.581,89,2.228,94,1.072,95,2.338,130,4.256,131,2.904,145,3.239,177,2.182,201,2.029,250,2.237,276,1.823,280,2.082,300,2.138,302,1.948,330,1.961,341,2.856,354,1.857,425,2.114,432,4.761,449,2.791,505,2.576,511,2.449,514,2.517,518,2.676,527,1.886,528,2.503,530,2.237,536,4.306,563,3.008,583,3.262,732,2.641,789,3.711,790,3.008,834,2.503,880,2.576,881,3.498,933,2.928,973,2.015,982,2.856,1019,3.098,1030,4.088,1059,2.277,1070,3.991,1071,3.521,1080,4.111,1099,2.531,1136,2.77,1170,3.239,1199,3.239,1252,3.279,1268,3.466,1294,3.888,1355,3.067,1365,2.981,1399,2.277,1466,3.067,1518,3.201,1900,3.646,2167,3.414,2278,3.521,4861,3.991,5524,4.678,5565,4.678,5566,3.888]],["component/105",[0,0.914,18,0.6,27,1.411]],["title/106",[28,14.668,95,17.859,166,28.052,1117,30.028]],["name/106",[95,0.614,1117,1.032]],["text/106",[0,2.313,1,0.882,10,1.147,16,2.459,27,3.569,28,2.849,34,2.54,37,2.281,40,1.645,51,1.921,54,1.477,61,2.198,90,1.608,95,3.058,114,1.425,118,2.635,122,1.653,147,1.505,151,1.5,159,2.043,166,1.728,177,1.548,190,4.199,201,1.44,225,2.389,232,1.278,240,4.295,244,3.801,245,1.471,251,2.078,253,1.368,264,1.4,279,1.377,280,1.477,302,3.584,304,3.239,306,2.444,309,3.005,329,2.078,330,1.391,388,1.529,392,2.271,504,1.542,518,1.898,533,4.819,591,1.661,603,3.147,609,3.082,711,2.06,717,2.422,729,1.471,732,1.874,760,1.874,761,3.023,784,2.736,790,3.465,811,1.924,854,1.98,855,2.198,881,1.368,933,2.078,968,3.433,973,1.43,974,3.533,997,2.498,1032,1.911,1037,2.422,1043,2.271,1044,1.766,1046,1.886,1090,2.541,1094,2.759,1117,3.792,1145,1.924,1155,2.647,1156,2.544,1158,1.874,1198,1.72,1218,4.991,1270,2.326,1302,3.147,1303,1.862,1304,2.298,1327,2.638,1360,3.992,1386,2.917,1393,1.966,1394,6.223,1399,1.616,1418,1.517,1420,4.637,1437,7.059,1459,2.917,1463,2.011,1498,2.388,1648,2.027,1704,2.587,1761,2.388,1859,2.541,2194,5.12,2208,2.832,2257,2.541,2286,2.695,2396,3.319,2449,4.902,2532,4.479,2560,2.134,2634,3.147,3478,5.803,3912,2.832,4077,3.019,5126,5.389,5537,7.425,5546,7.122,5567,3.58,5568,3.019,5569,3.147,5570,5.812,5571,7.337,5572,3.58,5573,3.58,5574,3.58,5575,3.58,5576,3.58,5577,3.58,5578,3.58,5579,3.58,5580,3.58,5581,3.58,5582,3.58,5583,3.319]],["component/106",[0,0.914,18,0.6,27,1.411]],["title/107-1",[27,35.675,28,14.668,94,12.348,1155,26.457]],["name/107-1",[]],["text/107-1",[]],["component/107-1",[]],["title/107-2",[958,36.051,1090,41.232,1155,26.457,5530,51.081]],["name/107-2",[]],["text/107-2",[]],["component/107-2",[]],["title/107",[27,40.897,28,16.815,789,32.5]],["name/107",[789,1.668]],["text/107",[0,0.73,1,0.675,4,2.231,10,1.992,13,1.164,27,6.477,28,3.275,29,0.863,34,2.314,36,0.74,37,3.322,40,2.043,48,0.69,49,1.038,59,0.72,72,1.922,73,0.72,82,1.171,94,0.945,95,2.933,121,0.796,123,0.824,125,1.435,129,1.064,131,1.055,135,3.804,147,0.771,151,0.768,163,1.022,164,1.466,172,1.188,175,0.675,176,2.97,186,0.777,190,4.554,196,0.948,219,1.135,232,1.588,243,0.69,244,2.067,245,0.754,250,0.813,263,0.78,266,0.847,269,1.536,270,0.936,272,0.696,279,2.656,280,0.757,286,1.207,295,1.738,300,0.777,302,3.092,308,0.936,309,0.751,329,2.58,330,1.274,342,0.743,346,0.89,347,2.327,354,2.287,412,0.793,417,0.931,423,0.91,425,1.862,438,0.847,479,2.187,505,2.27,511,0.89,527,0.685,560,0.863,575,0.855,602,0.979,608,1.451,646,1.241,648,1.224,673,3.817,688,0.89,700,1.177,729,0.754,741,0.743,742,0.96,754,0.582,782,2.416,789,4.655,790,1.093,806,1.007,810,1.083,811,0.986,824,2.626,825,1.177,839,0.839,855,1.126,858,3.071,867,0.855,869,0.993,880,0.936,881,1.253,889,1.164,898,0.993,931,1.302,933,1.064,954,1.738,973,0.732,974,5.799,1024,1.093,1043,2.08,1059,0.828,1060,1.381,1090,6.29,1104,1.055,1127,1.381,1135,1.451,1155,4.704,1156,1.946,1158,1.716,1196,1.955,1198,1.575,1217,3.491,1232,1.104,1271,1.302,1346,1.164,1355,1.993,1393,1.007,1399,2.006,1400,1.451,1402,1.164,1404,0.931,1418,1.884,1442,1.325,1475,1.15,1493,1.207,1526,3.388,1571,0.954,1652,1.192,1691,1.115,1704,1.325,1713,1.8,1714,1.15,1737,1.351,1741,1.241,1742,1.955,1743,2.671,1759,3.346,1781,2.288,1843,2.252,1931,1.126,1932,1.381,1959,1.26,2020,2.057,2024,1.351,2036,3.008,2040,1.325,2126,1.547,2218,1.241,2257,4.899,2268,1.413,2272,1.664,2440,1.28,3037,1.7,3478,1.451,3498,1.451,3750,1.547,4046,1.612,4077,2.765,4264,2.526,5012,1.7,5273,1.7,5283,1.451,5441,1.413,5470,1.26,5530,4.755,5537,2.882,5541,1.7,5546,1.547,5584,7.043,5585,8.549,5586,7.427,5587,6.216,5588,4.445,5589,3.278,5590,1.612,5591,3.278,5592,4.445,5593,1.834,5594,1.834,5595,1.834,5596,1.834,5597,1.834,5598,1.834,5599,1.834,5600,1.834,5601,1.834,5602,1.834,5603,1.834,5604,1.834,5605,1.834,5606,1.834,5607,1.834,5608,1.834,5609,1.834,5610,1.834,5611,1.834,5612,1.834,5613,1.834,5614,1.834,5615,1.834,5616,1.834,5617,1.834,5618,1.834,5619,1.834,5620,1.834,5621,1.834,5622,1.834]],["component/107",[0,0.914,18,0.6,27,1.411]],["title/108-1",[36,31.492,397,33.197]],["name/108-1",[]],["text/108-1",[]],["component/108-1",[]],["title/108-2",[5546,79.426]],["name/108-2",[]],["text/108-2",[]],["component/108-2",[]],["title/108-3",[36,31.492,974,47.427]],["name/108-3",[]],["text/108-3",[]],["component/108-3",[]],["title/108-4",[5590,82.798]],["name/108-4",[]],["text/108-4",[]],["component/108-4",[]],["title/108-5",[5584,82.798]],["name/108-5",[]],["text/108-5",[]],["component/108-5",[]],["title/108-6",[5586,87.314]],["name/108-6",[]],["text/108-6",[]],["component/108-6",[]],["title/108-7",[36,31.492,790,46.518]],["name/108-7",[]],["text/108-7",[]],["component/108-7",[]],["title/108-8",[5511,82.798]],["name/108-8",[]],["text/108-8",[]],["component/108-8",[]],["title/108-9",[5517,82.798]],["name/108-9",[]],["text/108-9",[]],["component/108-9",[]],["title/108-10",[5508,82.798]],["name/108-10",[]],["text/108-10",[]],["component/108-10",[]],["title/108-11",[94,14.156,260,28.681,310,26.787]],["name/108-11",[]],["text/108-11",[]],["component/108-11",[]],["title/108",[94,16.583,5402,52.054]],["name/108",[94,0.424,5402,1.332]],["text/108",[0,2.406,1,1.319,10,2.286,15,1.161,19,1.237,27,6.659,28,2.194,34,3.221,36,1.101,37,1.071,46,0.689,48,1.744,50,1.291,52,1.905,94,2.162,95,1.425,106,1.324,107,1.711,118,1.237,133,1.21,140,1.278,151,1.143,170,1.874,184,1.254,185,2.412,186,1.965,189,2.151,190,2.099,196,1.41,219,2.093,225,1.121,232,1.656,237,1.199,239,1.248,240,2.715,260,3.071,269,2.833,270,4.437,272,1.761,276,0.986,279,1.784,280,1.126,282,1.904,295,1.447,300,1.156,302,3.577,306,1.147,309,3.273,310,4.809,329,4.139,354,3.198,363,1.199,393,1.456,412,1.18,479,1.82,511,1.324,514,1.361,527,1.02,569,2.565,571,1.369,582,1.437,588,1.353,589,1.532,635,1.466,673,6.659,692,1.189,694,1.57,729,1.121,778,2.135,789,2.951,790,3.605,824,3.572,858,2.734,871,1.675,974,4.335,1044,1.346,1073,2.791,1075,1.385,1090,4.292,1094,2.102,1104,1.57,1136,2.546,1143,2.223,1151,3.458,1158,3.733,1217,4.005,1273,2.313,1280,2.529,1323,1.936,1364,2.399,1393,1.498,1394,3.417,1420,4.771,1446,1.693,1459,4.927,1463,1.532,1712,1.711,1740,4.092,1760,2.443,1931,2.847,1944,1.751,1955,1.597,2218,4.092,2252,3.778,2272,2.354,2322,2.301,2382,3.668,2452,2.054,2467,2.158,2560,1.627,3482,3.573,3498,6.321,3735,2.399,5266,2.399,5508,4.077,5510,4.077,5511,4.077,5517,2.399,5523,4.299,5566,2.102,5583,2.529,5584,2.399,5585,4.299,5590,4.077,5623,6.047,5624,2.728,5625,2.728,5626,2.728,5627,2.728,5628,4.637,5629,2.728,5630,2.728,5631,2.728,5632,2.728,5633,2.728,5634,2.728,5635,4.637,5636,2.728,5637,2.728,5638,2.728,5639,2.223,5640,2.728,5641,2.728,5642,2.728,5643,4.637,5644,4.299,5645,2.728]],["component/108",[0,0.914,18,0.6,27,1.411]],["title/109-1",[1666,61.989]],["name/109-1",[]],["text/109-1",[]],["component/109-1",[]],["title/109",[21,30.183]],["name/109",[21,1.096]],["text/109",[10,2.573,21,3.063,34,1.483,48,2.04,50,2.566,80,4.218,95,2.468,125,2.375,131,3.121,151,2.272,189,2.517,190,4.925,225,2.23,253,2.073,291,2.839,421,2.839,514,2.706,527,2.027,560,4.972,588,2.691,609,4.257,701,2.839,716,2.821,724,3.725,791,2.769,829,2.336,855,3.331,867,3.742,907,2.721,939,5.473,971,2.978,1046,5.034,1075,2.753,1136,4.408,1156,3.514,1196,3.234,1208,3.441,1355,3.297,1393,2.978,1456,3.92,1464,4.285,1471,3.234,1488,3.441,1666,6.291,1671,4.419,1683,4.29,1695,3.997,1708,3.67,1733,8.14,2036,3.67,2632,4.769,2651,4.769,5646,4.769,5647,5.029,5648,5.424,5649,5.424,5650,5.424,5651,5.424,5652,5.424,5653,7.443,5654,5.424,5655,4.575,5656,5.424,5657,5.424,5658,6.77,5659,5.424,5660,5.424,5661,5.424]],["component/109",[0,0.914,18,0.6,30,1.603]],["title/110-1",[28,19.699,1437,55.373]],["name/110-1",[]],["text/110-1",[]],["component/110-1",[]],["title/110",[28,23.776]],["name/110",[28,0.863]],["text/110",[28,3.08,34,1.628,42,4.029,80,2.378,147,3.614,164,2.663,177,2.574,189,2.762,190,4.899,225,2.447,232,3.069,253,2.275,276,2.152,292,3.919,438,5.098,514,4.287,560,4.045,575,2.776,694,5.803,813,4.303,867,4.006,881,3.284,907,2.987,1030,3.2,1059,2.687,1155,2.711,1156,2.607,1158,3.116,1355,3.619,1429,5.021,1437,8.658,1439,8.733,1464,3.178,1488,3.777,1741,4.029,2476,5.52,2671,4.482,2733,10.294,5655,5.021,5662,5.954,5663,5.954,5664,8.593,5665,8.593,5666,8.593,5667,8.593,5668,8.593,5669,5.954,5670,5.52]],["component/110",[0,0.914,18,0.6,30,1.603]],["title/111",[30,65.715]],["name/111",[3,1.478]],["text/111",[0,3.664,1,1.398,2,1.895,4,2.707,8,4.253,10,2.951,21,2.103,28,1.656,30,8.478,34,2.91,51,2.169,56,2.602,72,2.837,84,4.162,95,2.017,98,5.084,99,3.254,104,5.19,105,4.264,129,3.808,194,7.096,225,2.697,243,2.467,250,2.909,292,4.319,305,4.252,306,2.759,527,3.441,549,5.533,575,3.059,688,3.184,800,2.283,810,3.876,829,2.825,872,4.162,881,2.507,904,4.741,946,4.506,1013,3.657,1028,3.841,1032,3.502,1248,4.939,1297,6.083,1303,3.412,1355,5.597,1366,6.083,1523,4.319,1821,5.19,1992,4.162,2742,5.056,5528,6.083,5565,6.083,5646,5.768,5671,9.208,5672,6.561,5673,8.096,5674,6.561,5675,6.561]],["component/111",[0,0.914,18,0.6,30,1.603]],["title/112-1",[3040,68.055]],["name/112-1",[]],["text/112-1",[]],["component/112-1",[]],["title/112-2",[3021,72.57]],["name/112-2",[]],["text/112-2",[]],["component/112-2",[]],["title/112",[800,32.775]],["name/112",[800,1.19]],["text/112",[10,1.3,15,1.726,19,1.839,34,1.757,42,2.745,50,1.919,59,1.592,80,2.566,110,1.699,140,1.9,184,1.864,189,1.882,190,4.885,206,1.99,225,1.667,243,3,244,1.55,270,3.28,318,3.435,335,1.791,342,1.643,397,3.394,514,2.023,527,1.516,530,1.799,560,4.655,575,1.891,583,1.74,688,1.969,791,2.071,800,3.661,811,2.18,824,2.396,829,3.435,867,2.995,907,2.035,967,4.17,971,2.227,1071,2.83,1075,2.059,1136,2.227,1156,5.152,1158,4.749,1341,2.071,1345,2.137,1355,2.466,1372,4.951,1393,2.227,1418,3.381,1464,2.165,1488,2.573,1600,3.581,1722,4.559,1781,2.83,1929,5.661,2172,5.136,2378,3.053,2422,2.706,2697,3.208,2733,3.566,3021,6.992,3023,6.31,3040,7.146,3533,3.421,3639,5.235,4181,3.421,4814,3.761,5469,3.126,5646,5.649,5653,8.412,5655,6.728,5670,3.761,5676,6.424,5677,6.424,5678,6.424,5679,6.424,5680,4.056,5681,7.977,5682,3.761,5683,4.056,5684,4.056,5685,4.056,5686,4.056,5687,4.056,5688,4.056,5689,4.056,5690,3.761,5691,6.424,5692,4.056,5693,4.056,5694,4.056,5695,4.056]],["component/112",[0,0.914,18,0.6,30,1.603]],["title/113",[35,30.463,52,14.576,94,9.836,863,25.227,864,24.875,865,25.048]],["name/113",[52,0.444,592,0.857,868,0.969]],["text/113",[40,3.467,94,2.601,163,4.204,190,4.85,232,4.37,269,5.732,373,3.222,388,3.222,397,3.21,592,4.585,767,3.002,829,3.249,863,5.525,864,5.448,865,5.486,868,5.181,1155,4.615,1156,3.303,1317,4.237,1417,4.083,1418,3.197,1984,4.786,2001,5.967,2014,5.813,2364,8.548,2366,6.994,4849,6.633,4902,6.633,4903,6.633,4905,6.633,4906,6.994,4907,6.994,5696,7.543]],["component/113",[0,0.914,18,0.6,35,1.512]],["title/114-1",[34,18.215,784,31.353,2902,43.282]],["name/114-1",[]],["text/114-1",[]],["component/114-1",[]],["title/114-2",[1358,51.334]],["name/114-2",[]],["text/114-2",[]],["component/114-2",[]],["title/114-3",[1215,49.938]],["name/114-3",[]],["text/114-3",[]],["component/114-3",[]],["title/114-4",[863,36.305,864,35.799,865,36.048]],["name/114-4",[]],["text/114-4",[]],["component/114-4",[]],["title/114",[0,31.05,35,51.359]],["name/114",[3,1.478]],["text/114",[1,0.97,2,1.163,3,5.308,8,1.41,10,1.291,28,3.099,34,2.172,35,2.651,37,2.508,45,2.245,46,1.017,59,1.581,60,1.193,73,3.547,74,2.859,94,0.856,118,1.826,145,2.586,147,2.687,184,2.936,196,2.082,206,1.976,219,3.128,239,3.633,243,1.515,245,1.656,250,1.786,272,4.329,280,1.662,286,6.487,302,4.4,310,3.194,330,1.565,342,1.632,397,1.714,435,2.057,511,1.955,516,2.057,527,1.505,528,1.998,530,1.786,536,3.617,551,3.809,668,1.906,685,2.358,692,1.756,754,1.278,779,2.859,784,1.896,800,1.402,829,1.735,858,2.45,863,4.328,864,4.268,881,2.442,952,6.006,973,1.609,1030,2.165,1157,4.206,1198,1.935,1199,2.586,1208,2.556,1209,3.923,1215,4.793,1228,4.708,1273,2.009,1346,2.556,1358,2.196,1398,2.586,1445,3.186,1450,3.542,1518,2.556,1648,2.28,1691,5.99,1758,2.18,1841,2.069,1989,2.767,1994,2.499,2077,2.651,2201,2.651,2267,3.397,2272,4.03,2278,2.811,2405,5.977,2753,6.47,3005,3.735,3290,2.556,3705,3.032,4264,6.119,4409,3.032,4861,3.186,5421,3.735,5697,5.924,5698,4.028,5699,6.389,5700,4.028,5701,4.028,5702,4.028,5703,6.389,5704,3.735]],["component/114",[0,0.914,18,0.6,35,1.512]],["title/115",[28,14.668,52,18.299,73,22.803,94,12.348]],["name/115",[52,0.629,592,1.214]],["text/115",[15,3.108,28,2.504,35,4.809,38,3.509,40,5.175,73,2.868,94,2.108,190,4.935,236,3.849,602,3.9,829,3.146,869,3.954,880,3.73,1155,5.128,1156,3.198,1317,4.103,1417,5.368,1418,4.203,1847,4.809,1881,4.635,1984,4.635,2007,7.039,2008,6.162,2009,5.953,2011,5.5,2013,5.63,2088,5.185,2267,6.162,2270,6.423,2277,7.845,2316,6.774,2317,6.774,2318,6.423,2319,6.774,2320,6.774,2365,6.774,5705,7.306,5706,7.306,5707,7.306]],["component/115",[0,0.914,18,0.6,35,1.512]],["title/116",[94,16.583,5402,52.054]],["name/116",[592,1.214,5402,1.332]],["text/116",[0,1.916,1,1.626,4,1.987,19,2.183,26,2.033,28,2.246,34,3.391,35,3.17,36,3.591,50,2.278,52,3.134,60,1.426,73,4.607,82,1.72,94,1.023,120,1.828,133,4.412,142,5.276,170,3.307,177,2.082,185,3.818,201,1.937,219,2.541,232,1.72,237,2.117,239,2.203,269,2.256,270,3.748,272,3.378,276,1.74,302,3.433,310,1.937,318,2.074,352,2.663,354,3.273,393,2.571,444,2.927,445,3.343,516,2.459,518,2.553,530,2.135,592,2.927,635,3.946,778,2.591,834,3.641,858,1.846,869,2.606,898,2.606,952,4.686,954,2.553,955,2.43,977,3.091,1059,3.313,1075,2.444,1148,5.122,1151,1.916,1215,4.717,1217,4.996,1228,7.894,1282,4.464,1402,3.055,1575,5.208,1696,3.258,2052,3.307,2272,2.444,2277,3.809,2354,4.464,3001,3.809,4360,3.923,5102,4.464,5708,4.815,5709,4.815,5710,4.815,5711,7.34,5712,4.815,5713,8.896,5714,4.815,5715,4.815,5716,4.815,5717,4.234,5718,4.815,5719,4.464]],["component/116",[0,0.914,18,0.6,35,1.512]],["title/117-1",[94,14.156,975,40.089,3457,45.745]],["name/117-1",[]],["text/117-1",[]],["component/117-1",[]],["title/117-2",[94,14.156,689,47.267,3457,45.745]],["name/117-2",[]],["text/117-2",[]],["component/117-2",[]],["title/117-3",[22,33.156,48,21.85,95,17.859,3457,39.904]],["name/117-3",[]],["text/117-3",[]],["component/117-3",[]],["title/117-4",[166,37.673,1449,46.963]],["name/117-4",[]],["text/117-4",[]],["component/117-4",[]],["title/117-5",[50,31.509,187,36.84,3457,45.745]],["name/117-5",[]],["text/117-5",[]],["component/117-5",[]],["title/117-6",[206,32.676,800,23.18,2691,58.558]],["name/117-6",[]],["text/117-6",[]],["component/117-6",[]],["title/117-7",[50,36.912,2819,48.945]],["name/117-7",[]],["text/117-7",[]],["component/117-7",[]],["title/117-8",[863,36.305,864,35.799,865,36.048]],["name/117-8",[]],["text/117-8",[]],["component/117-8",[]],["title/117-9",[25,44.169,26,32.937]],["name/117-9",[]],["text/117-9",[]],["component/117-9",[]],["title/117-10",[28,19.699,1940,43.157]],["name/117-10",[]],["text/117-10",[]],["component/117-10",[]],["title/117-11",[94,16.583,1434,50.087]],["name/117-11",[]],["text/117-11",[]],["component/117-11",[]],["title/117-12",[89,25.652,95,17.859,302,22.423,703,32.889]],["name/117-12",[]],["text/117-12",[]],["component/117-12",[]],["title/117-13",[28,11.684,48,17.405,187,25.598,517,28.717,858,17.745,1229,34.104]],["name/117-13",[]],["text/117-13",[]],["component/117-13",[]],["title/117-14",[955,33.607,1847,43.841,3457,45.745]],["name/117-14",[]],["text/117-14",[]],["component/117-14",[]],["title/117-15",[5720,94.169]],["name/117-15",[]],["text/117-15",[]],["component/117-15",[]],["title/117-16",[5721,94.169]],["name/117-16",[]],["text/117-16",[]],["component/117-16",[]],["title/117-17",[5722,94.169]],["name/117-17",[]],["text/117-17",[]],["component/117-17",[]],["title/117-18",[5723,94.169]],["name/117-18",[]],["text/117-18",[]],["component/117-18",[]],["title/117-19",[5724,94.169]],["name/117-19",[]],["text/117-19",[]],["component/117-19",[]],["title/117",[94,20.016]],["name/117",[94,0.727]],["text/117",[0,0.849,1,0.843,4,1.547,10,1.607,15,3.789,18,0.299,19,0.52,21,0.367,22,3.168,25,1.208,26,0.901,28,2.726,34,2.601,36,0.861,46,0.947,48,3.263,50,1.416,54,2.069,59,0.45,60,0.632,72,0.923,73,1.175,79,0.704,80,0.458,82,2.454,89,1.322,90,0.515,94,1.375,95,2.591,106,1.453,107,1.339,110,0.894,120,0.435,125,0.502,127,0.517,133,0.508,142,2.343,151,0.48,155,0.736,164,0.513,166,2.913,171,0.596,175,1.102,176,0.548,177,0.496,182,1.324,184,1.376,186,0.486,187,3.337,188,3.043,190,4.506,201,0.461,206,1.469,219,2.504,225,0.471,232,1.339,236,0.604,239,0.976,243,0.431,244,0.438,245,0.471,250,0.508,253,0.438,254,2.186,263,0.488,264,0.448,269,1,272,1.137,276,2.18,279,1.7,280,1.235,285,1.155,290,0.719,293,1.139,300,0.904,302,2.652,305,0.529,310,1.777,318,1.289,342,1.213,344,0.492,347,0.6,356,0.542,363,0.504,366,0.863,373,2.371,388,0.49,389,0.813,391,0.736,395,0.677,415,0.69,419,1.155,423,1.86,425,0.48,435,0.585,438,1.731,443,0.711,444,1.297,445,2.284,479,0.765,513,0.697,514,0.572,517,1.858,518,1.132,527,1.874,565,0.934,570,0.66,575,0.995,580,0.592,583,0.915,609,2.943,635,0.616,648,1.424,688,0.556,689,0.813,702,0.883,703,3.142,729,1.816,754,0.364,760,0.6,768,0.589,780,0.608,789,1.041,790,0.683,793,1.297,800,0.743,821,0.548,829,0.919,833,0.813,839,0.524,858,3.327,863,3.026,864,2.983,865,2.029,867,0.534,868,1.466,869,0.62,871,1.31,877,1.37,881,2.306,937,0.629,946,0.787,947,1.249,954,0.608,955,1.892,963,0.582,964,0.548,967,0.981,971,2.059,974,0.697,987,3.5,988,1.11,996,0.776,1013,0.639,1021,1.172,1028,0.671,1030,0.616,1071,0.8,1143,0.934,1153,0.48,1155,3.839,1156,1.641,1158,1.117,1172,1.978,1187,1.228,1198,1.025,1200,1.339,1204,0.907,1217,1.198,1229,3.696,1251,1.387,1256,1.405,1273,0.572,1300,1.8,1325,0.776,1352,0.845,1404,2.243,1417,4.098,1418,3.339,1420,0.629,1428,0.813,1434,1.37,1446,0.711,1449,1.802,1518,1.899,1526,1.163,1575,0.671,1696,0.776,1761,0.765,1796,1.189,1847,5.187,1870,0.625,1881,1.354,1911,0.704,1917,1.008,1922,0.907,1940,3.8,1964,1.008,2077,0.754,2097,1.063,2156,1.405,2216,5.458,2221,1.542,2228,1.008,2238,0.711,2244,0.967,2250,1.572,2269,1.008,2340,1.644,2378,1.606,2382,0.907,2422,1.424,2532,0.883,2688,1.489,2691,1.876,2819,1.339,2869,1.739,3021,2.307,3038,0.934,3039,0.967,3457,8.52,3482,1.644,3639,1.739,3717,0.863,3718,1.514,4176,0.863,4264,0.883,4836,0.934,4859,1.008,4923,2.632,4927,1.978,4934,1.063,4998,1.063,5314,1.876,5690,1.063,5719,1.063,5725,1.146,5726,1.146,5727,1.146,5728,1.146,5729,1.146,5730,1.146,5731,1.146,5732,1.063,5733,1.146,5734,1.146,5735,1.146,5736,1.063,5737,1.146,5738,1.146,5739,1.146,5740,1.146,5741,1.146,5742,1.146,5743,1.146,5744,1.146,5745,2.134,5746,1.146,5747,1.146,5748,1.146,5749,1.146,5750,1.146,5751,1.146,5752,1.146,5753,1.978,5754,1.146,5755,1.146,5756,1.146,5757,1.146,5758,1.978,5759,1.008,5760,5.015,5761,1.146,5762,1.146,5763,1.146,5764,1.146,5765,1.146,5766,1.146,5767,1.146,5768,1.146,5769,1.146,5770,1.146,5771,1.146,5772,1.146,5773,1.146,5774,1.146,5775,1.146,5776,1.146,5777,1.146,5778,1.146,5779,1.063,5780,1.146,5781,1.146,5782,2.134,5783,2.134,5784,2.134,5785,2.134,5786,1.146,5787,3.749,5788,1.146,5789,1.146,5790,2.134,5791,2.134,5792,1.146,5793,1.146,5794,2.134,5795,2.134,5796,3.749,5797,1.146,5798,2.134,5799,1.146,5800,1.146]],["component/117",[0,0.914,18,0.6,39,1.77]],["title/118",[0,31.05,517,48.416]],["name/118",[517,2.122]],["text/118",[0,5.266,34,2.815,133,4.564,140,4.821,239,4.709,276,3.719,302,3.972,310,4.139,517,6.387,987,7.182,1013,5.736,5736,9.543,5801,10.292]],["component/118",[0,0.914,18,0.6,39,1.77]],["title/119-1",[37,36.963]],["name/119-1",[]],["text/119-1",[]],["component/119-1",[]],["title/119-2",[5405,76.733]],["name/119-2",[]],["text/119-2",[]],["component/119-2",[]],["title/119",[1208,59.747]],["name/119",[3,1.478]],["text/119",[0,4.17,1,1.826,2,3.026,10,2.894,28,2.28,34,2.866,36,3.644,37,3.544,39,6.958,46,2.28,50,3.018,52,2.01,54,4.323,60,1.889,61,5.544,72,2.759,73,3.544,79,3.918,82,3.224,106,4.382,107,5.664,133,2.829,142,4.788,154,6.3,187,4.994,236,3.361,254,2.513,276,2.306,281,3.84,305,2.946,318,2.747,335,2.817,560,3.003,580,3.298,689,4.528,881,2.438,987,6.3,1081,4.257,1092,4.702,1220,6.654,1229,6.654,1518,4.048,1599,4.452,2038,5.381,2039,3.219,2250,4.702,2257,4.528,2560,3.804,2756,4.382,3457,7.826,4420,5.047,5802,5.381]],["component/119",[0,0.914,18,0.6,39,1.77]],["title/120",[36,23.45,54,23.97,187,32.136,3457,39.904]],["name/120",[36,0.569,187,0.78,3457,0.969]],["text/120",[25,5.675,26,4.232,36,4.907,54,5.015,187,5.545,276,3.623,305,4.629,3457,6.886,5758,9.295,5779,9.295,5803,10.025,5804,10.025,5805,10.025,5806,10.025,5807,10.025,5808,10.025]],["component/120",[0,0.914,18,0.6,39,1.77]],["title/121",[47,59.747]],["name/121",[3,1.478]],["text/121",[0,4.178,1,1.754,2,2.499,10,2.273,29,2.168,34,2.366,36,2.863,40,3.26,41,3.031,47,6.167,48,1.732,50,2.178,51,2.345,52,1.45,60,1.363,72,1.991,84,2.921,86,2.745,87,2.72,95,1.415,98,2.2,104,3.642,123,2.069,131,2.65,132,2.51,151,1.929,175,1.694,177,3.067,180,3.163,181,2.65,192,2.271,194,3.548,198,2.772,199,2.566,201,1.852,232,1.644,243,1.732,263,1.959,264,2.775,266,2.126,283,2.566,306,1.936,318,1.983,346,2.235,392,2.921,397,3.018,412,3.067,440,2.51,505,2.351,518,2.442,520,3.752,522,3.393,576,2.31,583,3.711,586,2.992,654,4.048,784,2.168,811,2.475,815,6.237,847,2.956,872,2.921,917,3.116,959,3.393,988,2.395,1024,4.229,1032,2.458,1067,3.466,1075,2.337,1099,2.31,1169,3.393,1178,5.227,1196,2.745,1210,3.328,1252,2.992,1273,2.297,1359,4.048,1376,2.857,1386,3.752,1393,2.528,1464,2.458,1544,3.393,1727,6.038,1900,3.328,2075,8.854,2174,3.466,2399,3.268,2457,3.268,2902,2.992,3109,10.988,3705,5.34,4707,3.642,4860,4.269,5002,4.269,5269,4.269,5525,4.95,5704,4.269,5809,4.604,5810,4.048,5811,4.604,5812,3.883,5813,4.604,5814,4.269,5815,4.604,5816,4.604,5817,4.604,5818,4.604]],["component/121",[0,0.914,18,0.6,47,1.458]],["title/122-1",[94,16.583,5402,52.054]],["name/122-1",[]],["text/122-1",[]],["component/122-1",[]],["title/122-2",[21,21.347,47,42.255,1667,42.755]],["name/122-2",[]],["text/122-2",[]],["component/122-2",[]],["title/122-3",[856,41.758]],["name/122-3",[]],["text/122-3",[]],["component/122-3",[]],["title/122-4",[5819,87.314]],["name/122-4",[]],["text/122-4",[]],["component/122-4",[]],["title/122-5",[47,42.255,800,23.18,1667,42.755]],["name/122-5",[]],["text/122-5",[]],["component/122-5",[]],["title/122-6",[800,32.775]],["name/122-6",[]],["text/122-6",[]],["component/122-6",[]],["title/122-7",[3858,87.314]],["name/122-7",[]],["text/122-7",[]],["component/122-7",[]],["title/122-8",[748,47.91,800,27.155]],["name/122-8",[]],["text/122-8",[]],["component/122-8",[]],["title/122-9",[5820,94.169]],["name/122-9",[]],["text/122-9",[]],["component/122-9",[]],["title/122-10",[5821,94.169]],["name/122-10",[]],["text/122-10",[]],["component/122-10",[]],["title/122-11",[5822,94.169]],["name/122-11",[]],["text/122-11",[]],["component/122-11",[]],["title/122-12",[28,16.815,47,42.255,1667,42.755]],["name/122-12",[]],["text/122-12",[]],["component/122-12",[]],["title/122-13",[789,45.954]],["name/122-13",[]],["text/122-13",[]],["component/122-13",[]],["title/122-14",[1951,55.133]],["name/122-14",[]],["text/122-14",[]],["component/122-14",[]],["title/122-15",[791,34.007,1811,43.841,1951,38.992]],["name/122-15",[]],["text/122-15",[]],["component/122-15",[]],["title/122-16",[47,36.859,754,18.435,939,28.199,1951,34.013]],["name/122-16",[]],["text/122-16",[]],["component/122-16",[]],["title/122",[47,49.501,1667,50.087]],["name/122",[47,1.267,1667,1.282]],["text/122",[0,1.633,1,0.526,2,0.564,4,0.43,10,0.883,11,0.716,12,0.784,13,0.661,19,0.472,21,2.865,28,1.311,29,3.051,34,2.389,36,0.421,47,4.113,48,0.392,50,0.493,51,1.146,52,1.472,54,0.805,59,0.409,68,0.633,73,0.409,80,0.416,82,0.984,83,0.595,84,1.239,89,0.862,94,0.221,95,2.547,114,0.777,121,1.781,123,0.877,125,0.855,140,0.488,151,1.452,155,0.669,163,1.088,164,0.873,170,0.716,175,0.383,176,0.498,184,0.479,185,1.015,186,0.442,188,0.438,190,4.783,201,0.785,206,2.547,225,0.428,237,0.458,239,0.477,243,1.758,251,1.133,253,1.325,254,0.769,269,0.488,270,0.997,272,0.396,276,0.705,279,0.401,280,1.136,291,0.545,293,0.556,295,0.553,302,1.063,309,1.128,329,0.605,330,0.758,335,0.46,342,0.791,347,1.022,352,1.523,358,2.252,362,3.368,363,0.458,373,0.445,382,0.753,388,0.445,395,1.153,423,2.575,425,1.154,437,1.803,449,1.08,511,0.948,514,1.374,527,1.295,530,0.462,536,0.59,546,0.849,559,1.366,575,3.345,582,1.826,588,0.968,609,0.553,642,0.61,658,2.107,675,2.128,679,1.768,688,1.337,692,0.851,701,0.545,703,0.59,711,0.6,729,0.428,732,1.022,735,0.61,748,1.691,753,0.506,754,0.331,759,1.559,760,0.545,763,0.64,777,0.768,778,0.689,783,0.535,784,2.2,789,1.691,791,2.387,800,3.178,810,2.047,821,1.96,824,4.042,825,2.633,826,0.539,829,2.622,856,3.673,860,0.705,867,0.91,871,1.691,881,1.325,889,1.239,907,1.382,910,1.105,935,0.654,939,5.282,963,0.991,967,0.897,971,3.344,988,2.431,1004,0.545,1016,0.784,1024,1.164,1032,1.47,1037,1.321,1044,0.963,1062,0.654,1063,2.554,1072,0.627,1145,0.56,1153,1.154,1155,4.07,1156,3.997,1158,1.022,1196,0.621,1238,2.323,1273,0.52,1284,0.966,1301,0.849,1334,0.753,1346,0.661,1362,0.605,1372,4.995,1395,0.824,1399,0.47,1404,3.473,1418,3.946,1420,0.572,1464,0.556,1466,0.633,1471,0.621,1510,0.966,1513,1.504,1526,0.568,1598,0.753,1599,0.727,1667,3.001,1687,0.966,1689,1.253,1698,0.677,1712,1.225,1722,0.739,1741,0.705,1762,0.616,1819,1.728,1893,1.239,1904,0.753,1925,0.849,1951,4.85,1962,1.253,1969,0.879,1974,0.849,1982,1.591,1990,1.922,2039,1.39,2043,0.784,2100,1.544,2147,0.753,2156,0.686,2172,0.59,2174,0.784,2220,0.966,2417,0.916,2457,2.911,2485,1.591,2502,0.739,2532,0.803,2627,0.824,2630,1.646,2634,0.916,2635,0.966,2786,0.966,3025,0.803,3040,0.753,3109,4.11,3111,4.977,3112,7.283,3138,0.966,3140,1.646,3765,0.916,4343,0.784,4530,0.916,4978,1.81,4997,0.916,5050,0.727,5697,0.966,5819,1.81,5823,1.042,5824,1.042,5825,1.952,5826,1.042,5827,3.466,5828,1.952,5829,1.042,5830,2.754,5831,0.966,5832,1.042,5833,1.042,5834,1.952,5835,1.042,5836,1.042,5837,1.042,5838,1.042,5839,0.916,5840,1.042,5841,1.952,5842,5.661,5843,4.102,5844,1.042,5845,1.81,5846,1.042,5847,1.042,5848,1.042,5849,1.042,5850,1.042,5851,0.966,5852,3.466,5853,1.952,5854,1.042,5855,2.754,5856,2.754,5857,2.754,5858,2.754,5859,2.754,5860,1.952,5861,1.952,5862,2.754,5863,2.754,5864,1.042,5865,1.042,5866,1.042,5867,1.042,5868,1.042,5869,1.042,5870,1.042,5871,1.042,5872,1.042,5873,1.952,5874,1.042,5875,1.042,5876,1.042,5877,1.042,5878,1.042,5879,1.042,5880,1.042,5881,1.042,5882,1.042,5883,4.102,5884,2.754,5885,0.879,5886,1.042,5887,1.042,5888,1.042,5889,1.042,5890,5.191,5891,1.042,5892,5.191,5893,1.952,5894,1.952,5895,1.042,5896,1.042,5897,1.042,5898,2.754,5899,1.042,5900,1.042,5901,1.042,5902,1.042,5903,1.042,5904,1.042,5905,1.042,5906,0.966,5907,1.042,5908,1.042,5909,2.754,5910,2.754,5911,1.042,5912,1.042,5913,1.042,5914,1.952,5915,1.042,5916,1.042,5917,1.042,5918,1.042,5919,1.042,5920,1.042,5921,1.042,5922,1.042,5923,1.952,5924,1.952,5925,1.042,5926,1.042]],["component/122",[0,0.914,18,0.6,47,1.458]],["title/123",[57,58.734,58,58.734]],["name/123",[57,1.503,58,1.503]],["text/123",[0,4.317,1,1.647,19,4.917,37,3.282,40,3.843,52,3.416,55,7.993,58,6.294,60,3.212,82,2.986,114,3.327,189,5.586,237,3.676,245,3.437,251,4.852,276,3.021,300,3.543,306,3.516,354,3.076,425,3.502,560,3.936,571,4.194,591,3.879,808,6.812,834,4.147,880,4.269,1204,6.613,1240,6.294,1285,7.752,1448,5.032,1749,5.304,1760,4.404,5927,8.36]],["component/123",[0,0.721,18,0.473,52,0.57,55,1.334]],["title/124",[52,20.977,114,26.505,808,54.268]],["name/124",[3,1.478]],["text/124",[0,4.158,1,1.366,2,1.832,19,4.077,34,2.46,37,2.49,48,2.386,52,3.291,55,4.676,57,6.77,58,4.776,60,3.553,72,3.889,78,4.026,80,2.534,82,3.212,95,3.688,98,3.032,151,2.658,177,2.744,189,2.944,209,3.682,219,2.196,226,3.857,232,3.212,245,2.608,263,2.7,264,2.482,280,2.618,306,2.668,334,3.064,342,2.57,358,4.123,392,4.026,435,3.24,527,2.371,537,4.503,668,3.002,732,3.321,754,2.013,778,3.175,806,4.938,834,3.147,856,2.814,861,3.032,934,3.819,947,3.715,954,3.365,1109,4.428,1150,3.51,1194,3.13,1204,7.114,1235,5.352,1251,4.123,1268,4.358,1327,4.676,1337,5.019,1360,4.358,1380,5.579,1541,4.428,1749,4.026,5812,5.352,5928,6.345]],["component/124",[0,0.721,18,0.473,52,0.57,55,1.334]],["title/125",[147,32.809,2647,65.805]],["name/125",[147,1.438]],["text/125",[58,7.748,114,4.915,122,4.753,172,3.73,209,7.168,266,4.753,881,4.72,1518,6.53,1600,5.736,2278,7.182,4409,7.748,4620,7.585]],["component/125",[0,0.721,18,0.473,52,0.57,55,1.334]],["title/126",[21,21.347,22,38.009,779,47.267]],["name/126",[21,0.64,22,1.14]],["text/126",[4,2.557,7,2.871,10,2.835,19,2.163,21,4.005,22,4.651,28,1.565,34,2.917,36,1.139,37,2.433,44,2.039,48,1.794,51,0.933,52,2.967,54,1.164,60,1.835,61,3.806,71,1.22,73,1.872,80,3.532,94,1.014,95,0.867,96,2.48,106,1.369,110,1.182,111,4.66,122,1.303,125,1.235,126,1.328,133,1.251,147,1.186,161,1.811,175,1.038,177,1.22,189,2.213,196,1.458,203,1.667,206,1.384,207,1.857,242,1.273,243,1.794,244,1.078,250,1.251,253,1.078,263,2.03,264,1.104,266,1.303,276,1.019,279,2.804,287,4.335,293,1.506,295,1.496,300,1.196,302,1.089,305,1.303,306,2.006,354,3.466,360,1.79,373,1.205,375,1.857,388,1.205,419,3.355,425,1.182,432,2.481,436,2.564,449,1.56,517,1.751,518,1.496,527,1.783,530,1.251,559,2.366,561,1.698,575,1.315,576,1.415,583,1.21,589,1.584,602,1.506,668,1.335,688,1.369,699,1.516,710,1.477,716,1.467,742,1.477,754,1.514,767,2.901,776,1.527,779,2.002,780,2.53,789,1.377,791,1.44,811,1.516,836,1.449,839,1.291,869,4.411,881,1.078,955,1.424,964,2.28,1007,5.228,1013,2.659,1028,1.652,1032,3.309,1068,1.506,1187,1.623,1232,2.871,1321,1.811,1346,1.79,1360,1.938,1363,1.857,1378,2.124,1399,1.273,1402,1.79,1448,3.731,1452,2.079,1464,1.506,1466,1.715,1469,1.811,1493,1.857,1526,2.6,1571,1.467,1689,1.811,1776,2.48,1833,1.637,1852,1.538,1853,3.806,1920,2.379,1961,1.61,2036,1.909,2158,2.616,2172,2.701,2217,2.079,2234,1.938,2258,2.299,2378,2.124,2424,2.616,2629,2.299,2784,2.379,2908,3.183,3399,5.487,4177,2.616,4240,2.48,4706,2.232,5245,3.887,5717,4.194,5929,5.747,5930,6.198,5931,7.556,5932,2.616,5933,10.427,5934,2.616,5935,8.734,5936,4.77,5937,2.48,5938,2.821,5939,4.77,5940,6.408,5941,2.821,5942,2.616,5943,2.821,5944,2.821,5945,2.821,5946,2.821,5947,2.616]],["component/126",[0,0.721,18,0.473,52,0.57,61,1.112]],["title/127",[0,31.05,94,16.583]],["name/127",[592,2.078]],["text/127",[1,0.828,21,1.062,34,2.773,36,1.337,37,2.73,40,3.706,52,3.193,60,0.981,61,3.35,70,1.957,94,1.16,95,1.019,111,3.664,133,3.084,166,4.63,185,2.838,190,4.718,200,1.781,237,1.457,239,1.516,243,1.246,253,1.266,266,1.53,276,1.197,278,2.913,302,2.684,306,2.294,342,1.342,359,2.035,393,1.769,425,2.285,436,1.781,521,2.056,527,2.039,611,2.079,668,1.568,673,2.035,686,2.442,701,1.734,729,3.664,764,2.079,767,1.319,778,3.147,780,1.757,838,3.546,869,2.953,955,1.672,963,1.682,964,3.853,975,1.994,1014,4.316,1148,2.312,1155,4.617,1156,2.389,1218,4.334,1256,3.591,1286,2.795,1337,2.621,1390,2.553,1404,1.682,1417,5.487,1418,3.778,1469,3.502,1571,2.838,1591,2.127,1841,1.702,1853,3.35,1870,1.806,1898,4.446,1920,2.795,1923,4.204,1989,2.276,2018,4.107,2129,4.602,2134,3.072,2135,5.667,2136,4.602,2139,2.913,2172,1.876,2208,4.316,2234,2.276,2349,2.795,2639,2.913,4178,3.072,4299,2.913,5468,3.072,5476,3.072,5488,3.072,5489,3.072,5931,5.059,5932,6.448,5933,5.059,5935,8.891,5937,2.913,5940,4.797,5942,3.072,5947,3.072,5948,2.621,5949,3.313,5950,3.313,5951,3.313,5952,3.313,5953,3.313,5954,3.313,5955,3.313,5956,3.313,5957,3.313,5958,3.313,5959,3.313,5960,3.313,5961,3.313,5962,3.313,5963,3.313,5964,3.313,5965,5.059,5966,3.313,5967,3.313,5968,3.313,5969,2.181,5970,3.313,5971,3.313,5972,3.313,5973,8.062,5974,3.313,5975,3.313,5976,3.313,5977,5.456,5978,3.313,5979,3.313]],["component/127",[0,0.721,18,0.473,52,0.57,61,1.112]],["title/128",[52,24.575,61,47.91]],["name/128",[3,1.478]],["text/128",[0,3.321,1,1.645,18,2.18,21,3.693,22,3.264,34,2.963,36,2.308,45,4.651,46,2.107,50,2.705,52,4.156,56,2.268,61,7.974,106,2.776,122,2.641,133,2.536,149,2.705,177,2.473,185,4.341,201,2.3,302,2.207,418,4.66,432,5.635,436,3.074,440,3.117,449,3.163,505,2.92,518,3.032,527,2.137,530,2.536,589,3.212,698,3.212,741,2.316,767,2.276,778,2.019,779,4.058,806,3.14,880,2.92,881,3.766,895,3.237,907,2.869,1030,3.074,1032,3.053,1099,2.869,1193,4.66,1207,4.214,1222,3.764,1252,3.716,1255,4.214,1268,3.928,1286,7.039,1526,4.549,1843,3.928,1853,3.511,1923,4.407,1957,4.133,2135,4.66,2136,4.823,5245,4.66,5929,5.302,5980,5.718,5981,5.718,5982,5.718,5983,5.718,5984,5.718,5985,5.302]],["component/128",[0,0.721,18,0.473,52,0.57,61,1.112]],["title/129",[21,18.621,118,26.337,287,25.435,856,25.762]],["name/129",[21,0.64,5986,1.997]],["text/129",[0,2.035,10,1.639,14,3.46,21,4.235,22,2.918,34,3.159,37,2.007,41,6.753,59,2.007,80,2.042,94,1.633,95,2.361,177,2.211,199,2.849,200,2.748,219,1.769,240,2.993,243,1.923,244,2.936,279,2.955,280,2.109,287,2.238,302,1.973,419,4.994,431,4.044,436,4.129,511,2.482,513,3.108,553,3.282,569,2.828,575,2.383,591,2.372,679,3.282,716,3.995,741,3.112,753,3.728,759,2.894,777,3.768,784,2.407,791,5.615,811,2.748,826,2.643,829,2.202,856,3.406,872,3.244,877,3.282,939,2.482,955,2.58,963,2.595,1032,2.729,1071,3.568,1218,4.959,1256,3.365,1273,4.603,1303,2.659,1327,3.768,1363,3.365,1399,4.164,1418,3.255,1526,4.187,1530,4.495,1713,4.218,1722,5.451,1729,4.312,1760,2.693,1959,3.512,1989,3.512,1992,3.244,2018,7.722,2020,3.207,2021,4.166,2135,4.166,2257,3.628,3516,3.46,4127,4.74,4143,4.74,5937,4.495,5965,4.74,5985,8.555,5987,5.113]],["component/129",[0,0.721,18,0.473,52,0.57,61,1.112]],["title/130",[0,31.05,94,16.583]],["name/130",[592,2.078]],["text/130",[0,2.611,21,2.103,28,1.656,34,1.794,62,4.162,82,2.343,94,1.394,110,2.748,118,2.974,127,2.961,151,2.748,166,3.168,167,3.949,177,2.837,201,3.703,243,2.467,264,2.566,266,3.03,302,2.532,309,2.687,310,2.639,354,2.414,415,7.313,437,3.412,440,3.576,462,4.439,517,4.071,527,3.441,582,3.456,739,5.19,741,2.658,742,3.434,753,3.184,760,4.82,800,2.283,954,4.883,972,5.533,1019,4.029,1020,4.439,1059,2.961,1156,2.872,1321,4.212,1341,3.35,1402,4.162,1508,5.056,1575,3.841,2905,7.689,4990,6.083,5988,6.561,5989,6.561,5990,6.561,5991,9.208,5992,11.535,5993,11.535,5994,10.639,5995,6.561,5996,6.561,5997,6.561,5998,6.561,5999,6.561]],["component/130",[0,0.914,18,0.6,62,1.458]],["title/131",[62,59.747]],["name/131",[3,1.478]],["text/131",[0,3.911,1,1.641,10,3.15,21,3.15,28,2.099,34,2.274,48,2.14,52,3.095,54,2.348,60,1.685,62,7.619,63,7.014,66,4.439,86,3.393,94,1.209,95,1.749,111,2.998,130,4.799,172,2.063,185,5.111,222,3.248,236,2.998,237,3.656,245,2.339,253,2.175,263,2.421,264,2.226,344,2.441,347,2.978,389,4.038,412,2.46,425,2.384,432,2.96,533,3.248,655,2.777,688,2.762,701,2.978,743,3.221,754,3.118,778,2.936,800,3.42,849,4.193,867,2.653,881,3.756,1032,3.038,1194,2.807,1246,5.276,1288,5.276,1498,3.796,1599,3.971,1666,3.746,1727,3.971,1731,3.908,2597,4.112,2624,4.112,2630,4.799,2905,4.112,2912,5.276,2920,5.276,2962,7.311,3040,4.112,3190,4.112,5810,5.003,6000,4.284,6001,5.69,6002,5.69,6003,5.69,6004,5.69,6005,5.69,6006,5.69,6007,5.69,6008,5.69,6009,5.69,6010,5.69,6011,5.69]],["component/131",[0,0.914,18,0.6,62,1.458]],["title/132",[1,10.112,46,16.815,94,14.156]],["name/132",[94,0.727]],["text/132",[]],["component/132",[1,0.349,18,0.6,46,0.58]],["title/133",[1,8.821,46,14.668,51,19.204,623,32.889]],["name/133",[51,0.66,623,1.13]],["text/133",[]],["component/133",[1,0.349,18,0.6,46,0.58]],["title/134",[1208,59.747]],["name/134",[3,1.478]],["text/134",[1,2.109,2,3.008,5,5.897,8,2.209,9,2.977,10,2.023,14,6.062,46,3.405,54,2.604,66,4.783,83,5.113,86,5.341,87,5.292,88,6.153,89,3.956,90,4.025,111,3.324,143,3.662,147,2.654,169,4.521,201,3.603,222,5.113,225,2.594,228,4.051,242,2.848,281,3.798,311,4.004,332,2.823,528,3.13,569,3.491,575,2.942,690,5.292,741,2.556,768,3.242,854,5.761,1028,3.695,1212,3.631,1213,4.863,1760,3.324,2978,5.142,6012,6.31,6013,6.31,6014,6.31,6015,6.31,6016,3.762,6017,5.548]],["component/134",[1,0.349,18,0.6,46,0.58]],["title/135",[8,27.309,280,32.191]],["name/135",[8,0.699,280,0.824]],["text/135",[1,1.771,5,3.457,8,4.526,37,2.061,42,3.554,46,2.945,54,3.234,86,3.131,87,3.102,88,3.102,90,5.431,93,3.457,103,6.258,114,3.731,151,2.2,163,2.927,164,2.349,170,6.44,171,2.731,172,1.904,206,2.577,222,2.997,230,4.279,231,3.953,232,1.876,233,7.058,234,3.953,235,3.727,236,2.767,237,2.309,238,4.047,239,2.403,240,3.075,243,1.975,253,2.007,276,1.898,280,3.234,312,6.199,332,2.349,355,2.863,421,2.749,439,2.536,558,8.471,575,2.448,691,2.414,710,2.749,713,6.61,776,2.843,810,3.102,826,2.714,840,3.504,899,3.131,939,2.549,1006,9.639,1216,2.973,1273,2.62,1303,2.731,1321,3.371,1362,3.048,1399,4.231,1442,3.795,1598,3.795,1893,3.332,2230,4.047,2248,3.665,2457,3.727,2868,4.617,3195,6.776,3380,4.429,3825,4.429,4239,3.795,5282,4.429,6018,5.252,6019,5.252,6020,4.617]],["component/135",[1,0.349,18,0.6,46,0.58]],["title/136",[1,8.821,46,14.668,51,19.204,963,29.488]],["name/136",[51,0.66,963,1.014]],["text/136",[]],["component/136",[1,0.349,18,0.6,46,0.58]],["title/137-1",[8,27.309,5282,65.805]],["name/137-1",[]],["text/137-1",[]],["component/137-1",[]],["title/137-2",[29,36.73,674,46.518]],["name/137-2",[]],["text/137-2",[]],["component/137-2",[]],["title/137-3",[691,30.611,1130,40.089,3196,32.676]],["name/137-3",[]],["text/137-3",[]],["component/137-3",[]],["title/137-4",[208,36.305,209,38.653,306,28.006]],["name/137-4",[]],["text/137-4",[]],["component/137-4",[]],["title/137-5",[206,38.279,237,34.303]],["name/137-5",[]],["text/137-5",[]],["component/137-5",[]],["title/137-6",[8,27.309,713,65.805]],["name/137-6",[]],["text/137-6",[]],["component/137-6",[]],["title/137-7",[142,41.374,206,38.279]],["name/137-7",[]],["text/137-7",[]],["component/137-7",[]],["title/137-8",[71,28.798,175,24.508,1130,40.089]],["name/137-8",[]],["text/137-8",[]],["component/137-8",[]],["title/137-9",[8,27.309,312,61.717]],["name/137-9",[]],["text/137-9",[]],["component/137-9",[]],["title/137-10",[163,28.713,506,36.563,1251,33.48,1420,28.287,6021,34.861]],["name/137-10",[]],["text/137-10",[]],["component/137-10",[]],["title/137-11",[31,35.086,844,32.327,6022,66.6]],["name/137-11",[]],["text/137-11",[]],["component/137-11",[]],["title/137-12",[168,37.119,320,36.84,4952,51.324]],["name/137-12",[]],["text/137-12",[]],["component/137-12",[]],["title/137-13",[1130,56.684]],["name/137-13",[]],["text/137-13",[]],["component/137-13",[]],["title/137-14",[8,27.309,233,58.734]],["name/137-14",[]],["text/137-14",[]],["component/137-14",[]],["title/137-15",[31,35.086,71,28.798,175,24.508]],["name/137-15",[]],["text/137-15",[]],["component/137-15",[]],["title/137-16",[28,19.699,2454,49.501]],["name/137-16",[]],["text/137-16",[]],["component/137-16",[]],["title/137-17",[412,28.798,2930,48.131,4327,49.08]],["name/137-17",[]],["text/137-17",[]],["component/137-17",[]],["title/137-18",[126,31.353,287,29.158,1013,37.119]],["name/137-18",[]],["text/137-18",[]],["component/137-18",[]],["title/137-19",[32,29.488,240,34.013,673,35.675,6023,58.096]],["name/137-19",[]],["text/137-19",[]],["component/137-19",[]],["title/137-20",[26,28.116,31,35.086,2238,41.328]],["name/137-20",[]],["text/137-20",[]],["component/137-20",[]],["title/137-21",[691,35.861,3196,38.279]],["name/137-21",[]],["text/137-21",[]],["component/137-21",[]],["title/137-22",[206,38.279,854,43.157]],["name/137-22",[]],["text/137-22",[]],["component/137-22",[]],["title/137-23",[1,8.821,46,14.668,170,39.904,230,47.338]],["name/137-23",[]],["text/137-23",[]],["component/137-23",[]],["title/137-24",[8,27.309,6020,68.6]],["name/137-24",[]],["text/137-24",[]],["component/137-24",[]],["title/137-25",[8,23.311,175,24.508,1940,36.84]],["name/137-25",[]],["text/137-25",[]],["component/137-25",[]],["title/137-26",[71,33.736,175,28.711]],["name/137-26",[]],["text/137-26",[]],["component/137-26",[]],["title/137-27",[38,37.477,6024,52.795]],["name/137-27",[]],["text/137-27",[]],["component/137-27",[]],["title/137-28",[188,32.809,6025,63.574]],["name/137-28",[]],["text/137-28",[]],["component/137-28",[]],["title/137",[8,27.309,103,46.963]],["name/137",[8,0.494,103,0.849,6026,1.308]],["text/137",[0,0.435,1,1.415,2,0.829,4,1.184,5,2.372,7,1.228,8,2.688,10,1.72,11,0.75,15,1.221,20,0.678,21,1.155,26,2.467,28,2.481,29,2.955,31,1.075,32,1.035,33,1.503,34,2.016,36,0.441,38,4.183,42,1.38,43,0.842,45,0.609,46,2.398,48,0.411,51,0.674,54,1.756,59,1.414,60,0.604,66,1.089,71,3.042,72,0.472,73,2.619,79,0.671,81,0.693,82,0.728,83,0.623,84,1.294,86,1.711,87,2.514,88,2.129,89,0.482,90,3.311,94,0.434,95,0.882,98,2.313,99,0.542,110,1.202,111,0.575,113,0.775,114,1.694,115,0.775,119,1.068,120,2.798,121,0.474,122,0.504,123,2.82,125,0.478,126,1.351,129,0.634,131,1.174,133,2.38,135,1.035,140,0.512,142,0.579,146,0.864,147,1.207,149,1.358,151,1.202,154,0.762,155,0.701,163,0.609,164,0.488,166,1.386,167,0.657,168,1.137,170,1.971,171,3.833,175,2.15,183,1.013,186,0.463,187,0.604,188,2.639,189,0.507,190,0.708,194,0.842,197,1.294,200,0.587,201,1.449,203,1.695,205,1.915,206,3.079,208,1.565,209,2.47,217,0.685,222,0.623,225,0.449,227,0.639,231,0.822,232,0.728,233,0.822,234,1.536,235,0.775,236,1.512,237,1.262,238,0.842,239,1.649,240,0.639,243,0.411,245,1.481,250,0.484,251,1.184,253,1.097,254,1.13,260,1.552,262,1.793,264,2.099,269,0.956,272,0.775,276,0.737,279,0.785,280,0.842,287,3.711,290,0.685,291,1.502,294,1.194,295,0.579,300,0.463,302,0.787,306,1.515,308,0.558,310,0.82,312,0.864,318,2.516,320,1.588,329,0.634,330,0.793,334,0.527,335,0.482,345,1.146,347,0.572,352,1.588,354,0.402,360,0.693,363,0.48,375,0.719,388,0.871,393,0.583,412,2.093,415,1.728,417,1.035,422,1.536,423,2.111,425,0.854,432,0.568,436,0.587,438,0.504,442,0.775,443,0.678,445,0.929,502,0.701,504,0.47,505,1.465,506,0.775,510,0.762,517,1.266,519,0.719,538,0.71,555,0.864,558,1.662,560,0.514,580,0.564,583,2.076,588,1.012,591,0.507,620,3.039,623,0.618,635,0.587,654,1.164,662,0.548,673,1.253,674,2.148,688,0.53,691,0.938,692,0.889,699,0.587,701,0.572,704,0.609,707,1.793,708,0.762,710,2.534,711,0.628,712,0.71,713,0.921,717,1.38,721,2.661,722,0.527,739,2.85,741,1.724,749,0.951,750,1.12,753,0.53,761,0.568,763,0.671,766,2.851,767,1.926,768,0.561,775,0.678,784,0.514,800,0.999,810,0.645,811,0.587,816,0.639,820,2.834,821,1.372,822,0.762,823,1.842,824,0.645,826,0.564,837,1.075,840,0.729,841,0.921,844,2.349,854,0.604,858,1.632,867,0.951,870,1.205,880,1.042,881,0.417,889,0.693,898,0.591,929,0.89,938,2.923,956,1.964,961,0.623,963,0.554,964,0.522,969,0.551,979,0.701,982,0.618,987,0.762,988,0.568,995,0.89,1013,1.6,1015,2.339,1016,0.822,1022,0.89,1028,0.639,1030,1.096,1059,0.493,1075,0.554,1092,1.503,1104,0.628,1117,0.564,1127,0.822,1130,2.169,1143,2.339,1150,0.604,1151,0.435,1155,0.497,1168,1.793,1180,0.71,1187,1.174,1196,1.216,1197,1.448,1198,0.525,1201,1.104,1216,1.625,1241,1.013,1248,0.822,1251,0.71,1263,0.762,1270,1.865,1271,0.775,1273,0.545,1292,0.864,1303,0.568,1324,1.194,1334,0.789,1346,0.693,1352,0.805,1353,0.789,1358,0.595,1359,0.96,1374,2.074,1379,1.013,1380,1.793,1381,0.762,1398,1.309,1399,0.493,1420,0.6,1434,0.701,1441,0.651,1442,1.474,1466,0.664,1478,0.618,1480,0.685,1500,0.71,1523,0.719,1572,0.678,1580,1.401,1713,0.6,1753,1.448,1760,0.575,1777,1.942,1858,0.739,1868,0.921,1904,0.789,1912,0.805,1940,1.128,1949,0.789,2020,0.685,2046,0.693,2054,0.789,2093,0.89,2150,0.789,2156,1.889,2172,0.618,2230,0.842,2238,2.236,2247,0.613,2272,1.829,2454,1.821,2526,0.805,2578,0.96,2642,0.96,2742,0.842,2762,0.789,2792,1.38,2906,1.013,2929,1.72,2930,0.789,2961,0.921,3068,1.423,3150,0.864,3179,1.793,3186,0.921,3190,0.789,3196,0.536,3238,0.864,3342,0.739,3546,1.013,3577,0.89,3593,0.864,3606,2.074,3616,0.96,3713,0.96,4000,1.013,4010,0.89,4284,1.013,4292,1.013,4327,0.805,4442,1.572,4464,0.89,4606,1.013,4607,1.013,4700,1.013,4705,0.89,4861,1.614,4886,0.739,4952,1.572,5116,2.85,5128,1.013,5174,1.013,5470,0.75,5486,0.842,5673,0.96,5814,1.013,5969,1.889,6020,1.793,6021,0.739,6024,4.515,6025,3.468,6027,1.891,6028,1.092,6029,2.661,6030,2.04,6031,1.013,6032,1.092,6033,1.092,6034,2.87,6035,1.092,6036,1.092,6037,0.729,6038,1.092,6039,1.092,6040,1.092,6041,1.092,6042,0.805,6043,1.536,6044,1.092,6045,0.96,6046,0.89,6047,1.092,6048,1.092,6049,0.96,6050,1.092,6051,1.092,6052,1.013,6053,1.092,6054,0.96,6055,1.092,6056,0.96,6057,1.092,6058,1.092,6059,0.96,6060,1.092,6061,1.092,6062,1.092,6063,1.013,6064,1.793,6065,0.96,6066,1.092,6067,3.021,6068,0.719,6069,1.092,6070,0.96,6071,1.092,6072,1.092,6073,0.921,6074,1.092,6075,1.013,6076,1.092]],["component/137",[1,0.349,18,0.6,46,0.58]],["title/138-1",[8,27.309,5282,65.805]],["name/138-1",[]],["text/138-1",[]],["component/138-1",[]],["title/138-2",[8,27.309,6077,78.021]],["name/138-2",[]],["text/138-2",[]],["component/138-2",[]],["title/138-3",[8,27.309,6078,78.021]],["name/138-3",[]],["text/138-3",[]],["component/138-3",[]],["title/138-4",[8,27.309,6079,78.021]],["name/138-4",[]],["text/138-4",[]],["component/138-4",[]],["title/138-5",[8,27.309,6080,78.021]],["name/138-5",[]],["text/138-5",[]],["component/138-5",[]],["title/138-6",[8,27.309,6081,78.021]],["name/138-6",[]],["text/138-6",[]],["component/138-6",[]],["title/138-7",[8,27.309,6082,78.021]],["name/138-7",[]],["text/138-7",[]],["component/138-7",[]],["title/138-8",[8,27.309,6083,78.021]],["name/138-8",[]],["text/138-8",[]],["component/138-8",[]],["title/138-9",[8,27.309,312,61.717]],["name/138-9",[]],["text/138-9",[]],["component/138-9",[]],["title/138-10",[8,27.309,6084,78.021]],["name/138-10",[]],["text/138-10",[]],["component/138-10",[]],["title/138-11",[8,27.309,6085,78.021]],["name/138-11",[]],["text/138-11",[]],["component/138-11",[]],["title/138-12",[8,27.309,6086,78.021]],["name/138-12",[]],["text/138-12",[]],["component/138-12",[]],["title/138-13",[8,27.309,6087,78.021]],["name/138-13",[]],["text/138-13",[]],["component/138-13",[]],["title/138-14",[8,27.309,6088,78.021]],["name/138-14",[]],["text/138-14",[]],["component/138-14",[]],["title/138-15",[8,27.309,6089,72.341]],["name/138-15",[]],["text/138-15",[]],["component/138-15",[]],["title/138-16",[8,27.309,6090,78.021]],["name/138-16",[]],["text/138-16",[]],["component/138-16",[]],["title/138-17",[8,27.309,6091,78.021]],["name/138-17",[]],["text/138-17",[]],["component/138-17",[]],["title/138-18",[8,27.309,6092,72.341]],["name/138-18",[]],["text/138-18",[]],["component/138-18",[]],["title/138-19",[691,35.861,3196,38.279]],["name/138-19",[]],["text/138-19",[]],["component/138-19",[]],["title/138-20",[8,27.309,233,58.734]],["name/138-20",[]],["text/138-20",[]],["component/138-20",[]],["title/138-21",[8,27.309,6093,78.021]],["name/138-21",[]],["text/138-21",[]],["component/138-21",[]],["title/138-22",[691,35.861,3196,38.279]],["name/138-22",[]],["text/138-22",[]],["component/138-22",[]],["title/138-23",[8,27.309,414,68.6]],["name/138-23",[]],["text/138-23",[]],["component/138-23",[]],["title/138-24",[31,35.086,71,28.798,175,24.508]],["name/138-24",[]],["text/138-24",[]],["component/138-24",[]],["title/138-25",[691,35.861,3196,38.279]],["name/138-25",[]],["text/138-25",[]],["component/138-25",[]],["title/138",[8,27.309,3195,56.384]],["name/138",[8,0.494,3195,1.019,6026,1.308]],["text/138",[0,0.951,1,1.611,3,3.494,4,0.986,5,2.19,8,1.448,10,0.415,15,0.551,19,0.587,26,1.404,28,2.118,29,1.566,32,1.213,34,0.653,38,0.622,42,0.876,46,2.604,51,0.79,54,1.372,60,1.225,66,0.691,72,0.56,73,2.562,75,0.727,80,1.652,81,0.821,90,2.459,94,1.387,95,1.023,106,0.628,114,0.515,118,1.508,121,0.562,123,0.582,126,2.282,131,0.745,147,1.399,149,1.13,152,1.342,156,1.617,159,0.739,168,0.722,171,2.521,172,1.984,175,2.219,184,0.595,186,1.754,188,3.528,190,0.449,193,3.263,196,0.669,203,0.765,205,0.864,206,2.685,219,0.827,232,1.731,237,0.569,241,2.022,244,1.581,245,1.701,251,0.751,253,0.495,254,1.63,260,2.357,263,1.017,266,1.536,269,2.824,272,0.492,276,2.52,279,1.28,283,0.722,287,4.645,290,0.812,291,3.416,293,0.691,294,5.077,298,1.411,300,2.555,301,1.89,302,1.284,305,0.598,308,0.661,309,1.985,310,2.967,320,0.716,330,2.127,335,1.055,342,0.524,344,1.427,354,1.784,363,0.569,412,2.822,417,1.213,422,0.975,423,2.405,425,1.393,428,1.092,432,1.243,436,0.696,439,1.154,445,1.884,506,0.919,529,0.639,553,1.534,559,2.053,576,2.076,591,0.601,605,2.015,623,0.733,635,0.696,655,1.166,658,2.49,673,1.467,674,1.424,685,0.758,690,0.765,691,4.996,692,3.377,701,1.25,708,0.903,710,3.156,722,1.998,735,2.422,740,1.397,741,2.442,742,0.678,748,1.467,753,0.628,754,1.055,763,0.795,766,1.623,767,0.951,769,0.919,773,1.363,784,1.566,800,2.271,836,1.709,837,0.682,839,2.986,844,1.615,858,1.275,861,1.142,870,1.411,889,2.625,899,0.772,917,1.617,952,0.682,955,3.293,956,2.642,962,1.898,964,0.619,967,0.595,968,1.411,973,0.954,988,1.243,1010,3.372,1013,1.854,1022,1.055,1028,0.758,1039,0.758,1059,0.584,1062,2.087,1094,0.998,1104,1.375,1130,6.386,1153,0.542,1181,1.841,1205,0.998,1207,1.761,1216,0.733,1273,0.646,1324,2.838,1344,1.534,1352,1.761,1354,1.424,1358,1.302,1360,1.641,1362,1.93,1398,1.534,1399,1.078,1418,1.012,1431,1.024,1471,2.467,1500,1.553,1502,1.696,1507,1.667,1542,1.092,1572,1.482,1652,1.553,1713,3.31,1731,1.641,1801,0.864,1833,1.387,1841,0.665,1858,0.876,1866,1.641,1903,4.554,1961,0.739,1962,1.534,2024,2.451,2039,0.653,2046,2.625,2077,0.852,2089,0.954,2147,0.936,2215,0.787,2238,1.482,2305,0.876,2399,0.919,2707,1.798,2762,2.404,2819,0.812,2921,1.947,3196,3.202,3238,1.024,3606,4.357,3718,1.696,3825,1.092,4029,2.215,4096,1.2,4266,2.215,4327,0.954,4389,2.015,4705,1.055,4952,0.998,5050,0.903,5424,1.055,5426,1.2,5486,0.998,6000,0.975,6021,0.876,6024,0.876,6031,1.2,6042,1.761,6046,1.055,6056,2.101,6089,2.215,6092,1.2,6094,2.389,6095,2.215,6096,0.919,6097,4.138,6098,2.887,6099,1.295,6100,2.404,6101,1.2,6102,2.389,6103,2.215,6104,0.975,6105,2.389,6106,1.295,6107,1.295,6108,2.215,6109,2.389,6110,1.295,6111,1.295,6112,1.092,6113,1.295,6114,1.295]],["component/138",[1,0.349,18,0.6,46,0.58]],["title/139-1",[287,34.159,6068,51.359]],["name/139-1",[]],["text/139-1",[]],["component/139-1",[]],["title/139-2",[192,32.855,287,29.158,6068,43.841]],["name/139-2",[]],["text/139-2",[]],["component/139-2",[]],["title/139-3",[287,29.158,6068,43.841,6115,61.751]],["name/139-3",[]],["text/139-3",[]],["component/139-3",[]],["title/139-4",[95,23.985,287,34.159]],["name/139-4",[]],["text/139-4",[]],["component/139-4",[]],["title/139-5",[287,34.159,6067,55.373]],["name/139-5",[]],["text/139-5",[]],["component/139-5",[]],["title/139-6",[119,34.86,287,29.158,306,28.006]],["name/139-6",[]],["text/139-6",[]],["component/139-6",[]],["title/139",[95,20.474,287,29.158,6068,43.841]],["name/139",[95,0.434,287,0.617,6068,0.928]],["text/139",[1,1.212,4,0.712,7,1.039,10,1.185,15,0.735,18,2.197,19,1.919,21,1.185,22,0.522,26,0.386,28,2.172,34,1.011,37,0.678,38,1.178,46,2.264,48,0.922,51,1.222,54,0.377,59,0.359,66,1.973,71,0.395,73,3.3,80,0.69,81,0.58,82,1.847,84,2.345,85,0.54,87,1.02,90,0.776,94,0.66,95,1.452,98,1.766,102,3.352,107,0.574,110,0.383,111,0.482,113,0.649,114,1.685,118,0.415,119,5.283,120,1.793,121,1.838,125,3.494,126,1.462,135,0.464,140,0.428,147,1.554,149,0.433,152,2.076,164,0.409,165,2.319,166,0.442,171,0.476,172,0.331,175,1.143,177,0.395,186,2.677,188,2.656,189,0.424,190,3.652,192,2.942,200,0.928,201,1.487,203,0.54,206,0.449,231,0.688,242,0.779,243,0.649,244,1.187,247,2.015,250,0.405,251,0.531,254,2.349,260,0.394,264,0.358,266,0.422,269,5.94,272,2.942,276,0.33,279,0.352,281,3.802,285,0.935,287,5.791,290,1.539,293,0.488,294,7.459,295,0.485,300,2.366,302,1.823,306,1.78,309,1.004,310,1.249,318,2.034,330,0.355,334,1.785,342,0.37,345,1.744,351,0.771,354,0.635,373,2.209,375,3.926,376,4.091,382,3.737,398,1.436,412,1.061,413,2.671,438,0.422,445,1.683,511,0.444,513,0.556,517,0.567,521,0.567,527,0.342,530,2.094,551,0.545,552,0.619,573,2.202,578,4.162,594,4.395,635,0.492,658,0.47,692,1.612,699,0.492,717,0.619,722,0.442,729,0.71,732,0.479,734,0.556,740,2.014,741,2.416,753,0.838,761,0.476,767,0.687,771,0.518,784,1.74,805,0.55,810,0.54,822,0.638,826,1.911,839,0.418,850,4.49,859,0.638,870,2.184,872,0.58,877,1.108,937,0.502,954,0.485,956,2.015,963,3.027,967,2.903,1004,0.479,1013,1.367,1014,2.931,1028,0.535,1059,2.131,1068,0.488,1081,2.466,1139,2.783,1144,3.012,1217,2.652,1245,0.688,1267,0.723,1296,0.674,1298,0.649,1324,0.535,1334,0.661,1356,0.705,1357,0.804,1381,1.205,1393,0.502,1399,0.413,1484,0.619,1656,2.072,1708,1.168,1757,1.575,1842,2.623,1909,0.594,1926,0.705,1931,0.562,1949,0.661,1953,0.723,1955,2.478,1959,0.628,1989,0.628,2033,0.602,2039,0.871,2054,0.661,2077,1.137,2099,0.649,2150,0.661,2218,0.619,2376,0.705,2573,0.745,2902,0.594,3068,0.638,3190,0.661,3191,2.289,3593,0.723,3606,0.661,4366,0.848,4367,0.848,4396,0.723,4408,1.407,4886,4.036,5283,0.723,5470,0.628,5486,0.705,5969,4.374,6024,0.619,6037,2.466,6067,4.715,6068,5.664,6098,2.954,6115,2.88,6116,0.804,6117,1.518,6118,0.914,6119,0.914,6120,1.601,6121,0.848,6122,0.914,6123,2.069,6124,3.262,6125,3.427,6126,3.983,6127,2.724,6128,2.579,6129,2.783,6130,3.25,6131,3.25,6132,0.914,6133,3.57,6134,1.272,6135,0.914,6136,2.731,6137,0.914]],["component/139",[1,0.349,18,0.6,46,0.58]],["title/140-1",[121,33.875,142,41.374]],["name/140-1",[]],["text/140-1",[]],["component/140-1",[]],["title/140-2",[28,16.815,73,26.141,955,33.607]],["name/140-2",[]],["text/140-2",[]],["component/140-2",[]],["title/140-3",[1,7.026,46,11.684,126,21.786,291,24.223,955,23.352,1062,29.031]],["name/140-3",[]],["text/140-3",[]],["component/140-3",[]],["title/140",[6068,61.989]],["name/140",[6068,2.25]],["text/140",[1,1.588,3,2.073,6,1.279,10,1.143,13,2.262,15,0.858,28,2.34,29,2.257,34,1.311,37,0.791,38,0.968,46,2.578,48,0.758,51,1.585,54,1.978,66,1.076,73,2.872,82,1.713,90,1.602,94,0.428,110,1.494,120,0.765,121,4.175,122,1.647,125,1.561,126,2.727,127,0.91,128,1.345,135,1.81,140,0.944,142,4.196,147,0.848,149,0.954,151,1.494,159,5.488,163,1.987,164,1.595,171,1.048,175,1.312,176,0.963,177,1.542,184,2.204,188,2.016,189,0.935,190,0.7,192,0.994,199,1.123,200,1.084,201,1.929,206,0.989,219,0.698,222,1.15,229,1.251,232,0.72,239,0.922,243,1.341,244,1.363,247,2.614,250,0.894,260,4.853,266,0.931,269,2.246,272,2.514,273,1.279,280,0.832,281,3.487,283,1.123,287,3.885,288,1.553,290,2.237,291,4.644,292,1.327,294,3.876,300,4.208,305,1.647,306,0.848,311,4.201,317,1.202,318,2.065,330,1.386,337,1.457,342,1.445,344,0.865,350,2.463,352,1.115,354,0.742,355,3.989,389,1.431,417,2.434,421,1.055,423,1,560,1.679,575,0.94,576,1.789,591,0.935,646,1.364,655,0.984,692,1.555,699,1.084,707,1.772,708,1.407,711,1.16,719,3.306,722,0.973,734,1.225,737,1.595,741,0.817,753,0.978,761,1.048,767,0.802,768,1.036,776,1.091,783,1.832,784,1.679,811,2.577,826,1.843,834,1,860,1.364,866,2.748,869,1.091,880,1.029,889,3.042,898,2.595,937,1.107,955,5.686,963,2.941,964,4.026,977,1.294,982,1.141,1014,2.213,1028,1.18,1062,6.228,1081,1.345,1208,1.279,1232,2.146,1303,1.048,1324,1.18,1345,1.062,1348,1.225,1358,1.099,1381,1.407,1418,3.101,1448,1.213,1478,1.141,1524,1.345,1540,1.123,1582,2.906,1597,3.61,1600,1.123,1731,1.385,1760,1.062,1777,1.364,1801,1.345,1810,1.553,1870,1.099,1887,1.7,1929,1.431,1931,2.945,1961,1.15,1962,1.294,2376,1.553,2457,1.431,2458,1.772,2533,1.643,2794,4.361,2900,1.364,2930,1.457,3008,1.431,3191,1.486,3516,2.413,3791,1.869,3902,1.7,4015,1.772,4565,1.7,4684,1.869,4710,3.793,5969,2.347,6065,1.772,6068,8.025,6112,1.7,6128,1.407,6130,1.772,6131,1.772,6138,2.016,6139,1.869,6140,2.016,6141,2.016,6142,1.869,6143,2.016,6144,3.793,6145,2.016,6146,2.016,6147,1.553,6148,2.016,6149,2.016,6150,2.016,6151,2.016,6152,1.595,6153,2.016,6154,2.016,6155,2.016,6156,2.016]],["component/140",[1,0.349,18,0.6,46,0.58]],["title/141-1",[1208,59.747]],["name/141-1",[]],["text/141-1",[]],["component/141-1",[]],["title/141-2",[232,27.865,698,43.821]],["name/141-2",[]],["text/141-2",[]],["component/141-2",[]],["title/141-3",[239,35.695,423,38.703]],["name/141-3",[]],["text/141-3",[]],["component/141-3",[]],["title/141-4",[126,36.73,616,53.59]],["name/141-4",[]],["text/141-4",[]],["component/141-4",[]],["title/141-5",[701,49.291]],["name/141-5",[]],["text/141-5",[]],["component/141-5",[]],["title/141-6",[94,20.016]],["name/141-6",[]],["text/141-6",[]],["component/141-6",[]],["title/141-7",[210,69.398]],["name/141-7",[]],["text/141-7",[]],["component/141-7",[]],["title/141",[126,44.332]],["name/141",[126,1.609]],["text/141",[1,1.601,2,0.53,9,0.609,10,1.051,13,1.164,15,1.395,19,1.486,21,1.051,26,1.384,28,1.365,32,1.664,34,2.05,38,1.575,46,2.548,59,1.287,60,1.84,69,1.192,70,1.083,71,2.688,73,0.72,82,1.588,87,4.999,88,1.083,94,2.284,95,0.564,114,0.73,118,1.486,119,4.429,123,1.997,125,0.803,126,6.154,132,1,135,0.931,140,0.859,163,1.022,172,1.611,175,0.675,176,0.876,188,4.344,190,2.157,192,0.905,196,0.948,201,1.788,210,4.581,219,2.389,222,1.871,232,1.171,236,0.966,237,0.806,239,2.034,242,0.828,244,0.701,245,1.348,247,4.086,254,2.13,260,3.644,266,0.847,269,2.912,272,2.054,276,0.663,277,1.28,279,0.705,281,4.155,283,1.022,285,0.993,287,5.454,290,1.15,294,4.954,300,1.389,302,2.664,305,2.053,308,1.674,310,2.175,317,1.955,318,0.79,330,0.713,332,1.466,335,1.447,344,2.961,345,1.03,348,1.325,350,1.684,354,1.99,359,1.126,361,3.255,363,1.441,397,0.78,398,1.074,412,1.418,423,2.205,435,2.761,437,0.954,438,1.514,439,1.583,445,0.835,448,1.612,449,1.014,452,2.218,511,0.89,521,1.138,527,0.685,528,0.91,530,1.454,559,0.91,571,1.645,573,0.954,580,0.948,609,0.972,616,6.553,658,0.942,676,1.241,689,1.302,697,2.373,698,4.21,703,1.856,711,1.055,712,1.192,722,0.885,729,2.555,753,0.89,766,0.895,767,0.73,768,1.684,776,0.993,780,1.738,809,1.115,836,0.942,837,0.966,851,1.993,852,2.187,855,1.126,881,0.701,907,0.92,956,1,962,3.086,977,1.177,988,1.705,996,1.241,1013,1.022,1014,3.857,1032,0.979,1059,0.828,1060,1.381,1072,1.104,1145,0.986,1153,0.768,1194,0.905,1217,1.03,1291,1.494,1317,1.03,1320,1.15,1322,3.516,1365,2.626,1428,1.302,1434,1.177,1515,1.28,1520,1.302,1534,1.547,1588,1.302,1689,1.177,1714,1.15,1760,0.966,1833,1.064,1841,0.942,1853,1.126,1866,1.26,1911,2.013,2039,0.925,2098,1.451,2398,1.325,2467,1.451,2762,2.369,4327,1.351,5130,1.7,5200,3.255,5469,4.168,5969,5.273,6000,1.381,6016,1.093,6059,1.612,6128,3.102,6157,1.7,6158,1.834,6159,1.612,6160,1.834,6161,1.834,6162,1.7,6163,1.834,6164,1.834,6165,3.278,6166,1.834,6167,1.451,6168,1.7,6169,1.834,6170,1.7,6171,2.882,6172,3.04,6173,1.547,6174,1.7,6175,1.547,6176,1.7,6177,1.164]],["component/141",[1,0.349,18,0.6,46,0.58]],["title/142-1",[232,20.749,412,25.121,655,28.35,861,27.764]],["name/142-1",[]],["text/142-1",[]],["component/142-1",[]],["title/142-2",[861,37.286,1513,60.125]],["name/142-2",[]],["text/142-2",[]],["component/142-2",[]],["title/142-3",[21,21.347,80,26.598,861,31.828]],["name/142-3",[]],["text/142-3",[]],["component/142-3",[]],["title/142-4",[80,26.598,800,23.18,861,31.828]],["name/142-4",[]],["text/142-4",[]],["component/142-4",[]],["title/142-5",[298,46.091,861,37.286]],["name/142-5",[]],["text/142-5",[]],["component/142-5",[]],["title/142-6",[861,37.286,6068,51.359]],["name/142-6",[]],["text/142-6",[]],["component/142-6",[]],["title/142-7",[861,37.286,962,44.528]],["name/142-7",[]],["text/142-7",[]],["component/142-7",[]],["title/142-8",[126,36.73,861,37.286]],["name/142-8",[]],["text/142-8",[]],["component/142-8",[]],["title/142-9",[861,45.003]],["name/142-9",[]],["text/142-9",[]],["component/142-9",[]],["title/142",[861,37.286,969,39.37]],["name/142",[861,0.954,969,1.008]],["text/142",[1,1.641,2,0.258,3,1.569,5,2.005,9,4.254,19,0.405,21,2.1,28,2.241,32,1.22,46,2.75,48,1.914,54,0.369,60,1.375,73,1.997,75,0.502,80,0.357,81,1.072,85,0.998,94,1.082,95,1.564,106,0.434,110,0.374,114,0.957,118,1.381,119,0.885,123,2.47,125,1.334,126,4.008,127,0.403,133,0.749,147,0.711,151,0.708,152,1.711,159,0.965,164,0.756,175,0.329,186,0.379,188,3.003,190,0.834,192,0.441,201,2.211,203,0.998,206,2.497,219,1.607,232,1.296,241,0.543,244,0.342,245,0.695,247,0.921,250,0.396,251,0.519,253,0.646,254,1.2,260,1.563,261,1.038,263,1.296,264,0.35,266,1.11,269,2.576,271,0.786,272,1.157,279,0.65,283,1.698,287,3.727,292,0.588,294,4.014,298,3.679,305,0.413,306,0.376,309,0.984,310,0.967,318,1.035,330,0.347,335,1.061,342,0.685,354,0.329,355,0.921,356,1.968,361,0.538,363,0.393,412,3.31,417,0.454,425,0.708,442,0.634,445,2.115,450,0.624,452,1.144,456,0.624,502,0.574,527,0.632,533,1.739,536,2.629,552,0.605,559,2.304,563,1.433,571,1.528,573,2.86,578,0.624,588,0.443,591,0.415,613,0.673,655,3.198,673,1.038,676,0.605,692,0.737,704,5.763,710,0.468,722,1.752,733,1.179,735,0.523,748,1.038,754,1.32,759,3.525,760,0.885,763,0.549,766,0.825,768,0.459,773,2.65,784,0.796,791,1.556,800,2.664,821,0.427,836,1.565,856,2.257,858,1.595,861,6.427,865,0.484,870,1.42,895,3.113,898,0.915,939,0.82,955,1.537,962,1.739,963,0.454,969,3.142,973,0.96,1013,0.942,1014,1.491,1022,0.728,1024,0.533,1028,0.523,1044,0.441,1046,1.605,1117,0.462,1153,1.007,1187,0.514,1198,0.812,1216,1.361,1217,2.858,1270,0.581,1273,1.52,1324,0.523,1325,1.144,1344,0.574,1354,1.008,1358,0.921,1381,0.624,1399,0.763,1418,5.413,1442,0.646,1446,1.049,1449,0.538,1463,1.711,1470,2.482,1471,2.164,1500,1.098,1507,1.677,1520,0.634,1521,0.689,1523,0.588,1540,0.498,1572,0.555,1600,1.698,1648,1.361,1652,0.581,1713,0.928,1737,0.659,1740,3.143,1745,0.754,1746,1.144,1752,1.525,1758,1.301,1801,0.596,1870,0.487,1881,0.567,1931,1.476,1940,0.935,1951,3.837,1955,0.523,2043,0.673,2215,0.543,2218,0.605,2239,0.673,2329,0.646,2388,0.707,2649,4.688,2709,0.624,2792,0.605,2882,1.377,2902,0.581,3113,0.689,3156,0.829,3250,0.829,3325,0.829,3406,0.829,3409,0.829,3431,0.829,3435,0.829,3463,0.829,3503,0.829,3516,1.144,3549,0.829,3611,0.689,3757,0.829,3902,0.754,3905,0.829,4087,0.829,4089,0.829,4239,0.646,4280,0.646,4773,6.029,5050,1.179,5079,0.728,5223,0.754,5283,0.707,5405,0.728,5448,0.829,5463,0.786,5469,2.797,5486,1.302,6016,0.533,6068,1.112,6098,2.903,6178,0.894,6179,0.894,6180,0.894,6181,0.894,6182,0.894,6183,0.894,6184,0.894,6185,0.894,6186,0.894,6187,0.829,6188,0.894,6189,0.894,6190,0.786,6191,0.894,6192,0.829,6193,0.894,6194,0.894,6195,0.894,6196,0.894,6197,0.894,6198,0.894,6199,0.894,6200,0.894,6201,0.894,6202,0.894,6203,0.894,6204,0.894,6205,0.829,6206,0.894,6207,0.894,6208,0.894,6209,0.894,6210,0.894,6211,0.894,6212,0.894,6213,0.894,6214,0.894,6215,0.894,6216,0.894,6217,0.894,6218,0.894,6219,0.894,6220,0.894,6221,0.894,6222,0.894,6223,0.894,6224,0.894,6225,0.894,6226,0.894,6227,0.894,6228,1.69,6229,3.365,6230,1.486,6231,0.894,6232,0.894,6233,0.894,6234,0.894,6235,0.894,6236,0.894,6237,0.894,6238,0.894,6239,0.894,6240,0.894,6241,0.894,6242,0.894,6243,0.894,6244,1.69,6245,0.894,6246,0.894,6247,0.894,6248,0.894,6249,0.894,6250,0.894,6251,0.894]],["component/142",[1,0.349,18,0.6,46,0.58]],["title/143-1",[28,14.668,445,26.457,858,22.276,2819,36.445]],["name/143-1",[]],["text/143-1",[]],["component/143-1",[]],["title/143-2",[397,40.068]],["name/143-2",[]],["text/143-2",[]],["component/143-2",[]],["title/143-3",[1,10.112,2,19.234,34,18.215]],["name/143-3",[]],["text/143-3",[]],["component/143-3",[]],["title/143-4",[34,18.215,51,22.015,963,33.805]],["name/143-4",[]],["text/143-4",[]],["component/143-4",[]],["title/143-5",[1,8.821,34,15.889,46,14.668,1222,38.243]],["name/143-5",[]],["text/143-5",[]],["component/143-5",[]],["title/143-6",[1,5.384,2,10.24,80,14.161,90,15.931,1220,26.13,1267,28.048,1727,24.744,1859,25.165,2077,23.341]],["name/143-6",[]],["text/143-6",[]],["component/143-6",[]],["title/143",[28,19.699,858,29.916]],["name/143",[28,0.504,858,0.766]],["text/143",[1,1.706,2,2.644,8,0.585,10,1.322,18,0.788,28,2.836,34,2.585,36,1.218,37,2.29,40,1.387,46,2.312,48,0.629,50,0.791,51,1.669,56,0.663,59,0.656,60,0.495,72,1.783,73,2.29,80,0.668,82,1.803,90,2.268,94,1.24,98,0.799,110,0.701,114,0.666,122,0.772,129,1.751,135,0.849,140,0.783,145,1.074,147,1.269,155,1.074,166,1.457,171,2.145,172,2.359,175,0.615,176,0.799,177,1.783,181,0.962,184,2.681,188,1.269,190,3.99,200,0.899,201,0.673,225,1.24,237,1.327,244,1.576,245,2.398,247,0.912,250,0.742,253,1.153,254,1.624,263,2.148,264,1.18,272,1.566,276,2.914,279,2.729,280,1.701,287,2.21,309,1.236,333,1.411,335,0.738,342,0.677,346,1.465,347,0.875,355,0.912,356,1.951,360,1.915,362,1.669,398,1.767,412,1.783,419,0.905,425,0.701,435,0.854,439,0.807,445,4.427,504,1.3,505,3.623,512,1.116,513,1.017,514,2.057,518,2.187,527,1.887,529,1.489,530,0.742,536,1.708,560,0.787,571,0.839,576,2.927,578,1.167,582,1.59,588,0.83,591,2.342,655,1.473,685,0.979,691,0.769,697,0.893,701,0.875,704,1.682,724,1.149,735,3.415,736,1.411,766,0.816,783,0.859,784,0.787,800,0.582,810,0.988,829,2.803,838,1.087,839,0.765,851,2.507,858,4.308,860,2.042,861,0.799,867,1.407,869,1.633,872,1.061,880,2.106,881,0.639,895,0.947,933,0.971,939,0.812,955,1.523,963,2.093,967,1.387,969,0.844,971,1.657,977,1.074,1004,0.875,1024,3.01,1039,0.979,1059,0.755,1072,1.007,1073,3.039,1092,1.232,1136,0.918,1145,2.714,1156,1.321,1158,0.875,1194,0.825,1198,2.425,1220,3.039,1221,0.932,1222,3.84,1230,1.087,1234,2.224,1252,1.087,1254,2.387,1267,2.387,1271,1.187,1292,1.323,1352,1.232,1365,0.988,1399,2.278,1418,1.748,1463,0.939,1464,0.893,1466,1.017,1480,1.049,1523,1.101,1540,0.932,1593,1.259,1708,1.132,1727,1.167,1746,1.132,1749,1.061,1760,0.881,1816,1.087,1870,1.645,1903,1.167,1942,1.551,1949,1.209,1950,1.411,1958,1.149,1961,1.722,1962,1.074,2024,1.232,2039,0.844,2052,2.073,2077,1.101,2126,1.411,2172,0.947,2428,1.259,2440,1.167,2502,1.187,2683,1.232,2709,1.167,2742,1.289,2750,3.262,2791,2.224,2819,6.395,2853,1.289,3111,2.653,3112,1.363,3148,2.224,3717,1.259,3787,1.551,3825,1.411,4626,2.798,5114,1.551,5196,2.798,5215,4.681,5283,2.387,5314,1.47,5525,1.167,5753,2.798,6016,0.997,6042,1.232,6100,1.209,6116,1.47,6252,3.018,6253,1.672,6254,1.672,6255,1.672,6256,1.672,6257,1.672,6258,4.14,6259,1.672,6260,1.672,6261,1.672,6262,4.124,6263,2.798,6264,1.672,6265,1.672,6266,1.672,6267,1.551,6268,5.834,6269,1.672,6270,1.672,6271,1.672,6272,1.672,6273,1.672,6274,1.672,6275,1.672,6276,3.018,6277,1.672,6278,1.672,6279,1.672,6280,1.672,6281,1.672,6282,1.672,6283,1.672,6284,1.672,6285,1.672,6286,1.672,6287,1.672,6288,1.672,6289,1.672,6290,1.672,6291,1.672,6292,1.672,6293,1.672,6294,1.672,6295,1.672]],["component/143",[1,0.349,18,0.6,46,0.58]],["title/144-1",[1345,41.103,6296,78.021]],["name/144-1",[]],["text/144-1",[]],["component/144-1",[]],["title/144-2",[28,16.815,250,29.533,2454,42.255]],["name/144-2",[]],["text/144-2",[]],["component/144-2",[]],["title/144-3",[28,19.699,2454,49.501]],["name/144-3",[]],["text/144-3",[]],["component/144-3",[]],["title/144-4",[28,19.699,2454,49.501]],["name/144-4",[]],["text/144-4",[]],["component/144-4",[]],["title/144-5",[]],["name/144-5",[]],["text/144-5",[]],["component/144-5",[]],["title/144-6",[28,16.815,73,26.141,576,33.413]],["name/144-6",[]],["text/144-6",[]],["component/144-6",[]],["title/144-7",[4707,74.491]],["name/144-7",[]],["text/144-7",[]],["component/144-7",[]],["title/144-8",[2454,59.747]],["name/144-8",[]],["text/144-8",[]],["component/144-8",[]],["title/144-9",[337,68.055]],["name/144-9",[]],["text/144-9",[]],["component/144-9",[]],["title/144-10",[28,14.668,73,22.803,576,29.147,743,32.889]],["name/144-10",[]],["text/144-10",[]],["component/144-10",[]],["title/144-11",[2454,59.747]],["name/144-11",[]],["text/144-11",[]],["component/144-11",[]],["title/144-12",[658,40.08,958,48.416]],["name/144-12",[]],["text/144-12",[]],["component/144-12",[]],["title/144-13",[576,33.413,743,37.703,2454,42.255]],["name/144-13",[]],["text/144-13",[]],["component/144-13",[]],["title/144-14",[654,38.009,2454,42.255,2762,48.131]],["name/144-14",[]],["text/144-14",[]],["component/144-14",[]],["title/144-15",[126,36.73,958,48.416]],["name/144-15",[]],["text/144-15",[]],["component/144-15",[]],["title/144-16",[]],["name/144-16",[]],["text/144-16",[]],["component/144-16",[]],["title/144-17",[28,19.699,2454,49.501]],["name/144-17",[]],["text/144-17",[]],["component/144-17",[]],["title/144-18",[1,10.112,46,16.815,254,26.231]],["name/144-18",[]],["text/144-18",[]],["component/144-18",[]],["title/144-19",[51,25.79,4462,68.6]],["name/144-19",[]],["text/144-19",[]],["component/144-19",[]],["title/144-20",[28,13.007,346,37.499,530,22.845,2454,32.686]],["name/144-20",[]],["text/144-20",[]],["component/144-20",[]],["title/144-21",[120,29.626,121,33.875]],["name/144-21",[]],["text/144-21",[]],["component/144-21",[]],["title/144-22",[188,28.006,839,30.47,2454,42.255]],["name/144-22",[]],["text/144-22",[]],["component/144-22",[]],["title/144-23",[28,16.815,73,26.141,337,48.131]],["name/144-23",[]],["text/144-23",[]],["component/144-23",[]],["title/144-24",[6297,87.314]],["name/144-24",[]],["text/144-24",[]],["component/144-24",[]],["title/144-25",[722,32.158,2454,42.255,6298,61.751]],["name/144-25",[]],["text/144-25",[]],["component/144-25",[]],["title/144-26",[34,15.889,51,19.204,588,28.819,623,32.889]],["name/144-26",[]],["text/144-26",[]],["component/144-26",[]],["title/144-27",[1,7.822,46,13.007,71,22.276,2454,32.686,6299,47.767]],["name/144-27",[]],["text/144-27",[]],["component/144-27",[]],["title/144",[28,19.699,2454,49.501]],["name/144",[28,0.504,2454,1.267]],["text/144",[1,0.84,4,0.308,10,0.835,15,1.33,18,0.195,26,0.315,28,3.256,29,0.961,34,2.179,37,0.801,38,0.98,40,0.938,46,1.397,48,0.768,50,0.353,51,0.47,54,0.587,66,2.161,69,0.485,71,1.559,72,0.323,73,4.215,75,0.419,77,1.694,81,0.903,82,2.291,83,1.165,84,0.473,85,2.13,90,2.626,98,0.68,99,0.37,103,0.449,108,0.59,114,1.927,118,0.338,119,1.636,120,0.54,121,0.324,122,0.344,123,0.917,126,0.351,127,0.337,129,0.433,131,0.429,133,0.331,135,0.722,136,0.692,140,0.349,147,1.875,159,0.426,161,0.914,163,2.256,166,0.36,172,2.119,175,2.632,176,1.494,177,1.352,180,0.512,184,0.654,186,0.316,188,1.516,190,3.393,192,3.93,196,0.736,197,0.903,198,1.228,201,0.572,203,0.841,205,0.498,206,0.366,217,0.468,219,2.124,232,1.446,237,0.328,242,0.337,244,1.851,245,1.285,247,0.407,250,1.599,251,0.433,253,1.195,254,1.026,260,0.321,263,0.868,264,0.557,266,1.665,267,1.071,268,0.449,269,0.667,276,1.612,279,0.287,280,0.308,285,1.411,287,1.368,292,0.491,294,1.83,300,1.716,302,0.549,305,1.443,306,3.1,308,1.042,310,0.821,318,1.346,335,0.901,337,4.224,342,1.056,344,0.32,347,0.39,350,0.383,355,0.776,356,1.479,362,0.413,363,1.585,373,1.905,388,0.872,398,0.437,412,0.615,417,1.83,423,0.37,425,0.312,445,0.648,450,0.993,503,1.721,504,0.321,505,0.381,513,0.453,516,0.381,518,1.382,527,1.347,530,1.386,534,0.479,547,0.575,553,0.914,555,0.59,562,0.419,564,1.763,571,1.809,573,1.355,576,3.902,583,0.32,588,0.37,591,1.673,604,0.562,625,0.539,635,0.401,654,0.812,655,1.759,658,5.175,662,0.374,674,1.554,675,0.874,684,1.16,688,0.691,691,0.343,692,0.89,694,0.429,697,0.398,699,0.401,700,0.479,701,0.39,709,0.59,710,0.745,711,1.799,716,2.877,717,0.963,722,1.955,732,1.364,734,1.584,735,0.437,737,0.59,741,0.302,749,0.348,753,0.691,761,1.355,764,0.468,767,0.297,773,1.165,782,0.55,783,0.383,784,2.447,793,0.453,797,0.629,806,0.781,810,1.846,811,1.097,817,0.449,818,0.629,821,0.68,829,3.581,830,0.692,834,0.37,836,0.731,838,1.326,839,1.192,846,0.445,854,0.413,856,0.331,861,0.356,867,0.951,869,0.404,870,3.453,880,0.381,881,0.996,892,0.59,895,1.769,898,0.404,905,0.914,910,1.155,926,0.629,927,0.379,937,0.41,938,0.512,939,0.362,952,0.75,954,0.396,955,2.043,956,0.407,958,0.883,959,1.049,961,0.812,964,0.356,969,0.376,972,0.629,975,0.857,985,0.512,995,0.608,1004,2.534,1016,0.562,1019,0.458,1021,0.41,1023,0.937,1024,1.864,1028,0.437,1046,0.393,1059,1.411,1073,1.228,1075,0.379,1117,0.386,1150,0.413,1153,0.312,1165,0.692,1166,0.441,1185,0.426,1187,0.819,1196,0.445,1216,0.422,1222,0.937,1240,1.071,1248,0.562,1249,0.656,1267,1.126,1304,1.31,1324,0.833,1331,0.479,1353,3.499,1354,0.445,1374,0.539,1378,0.562,1389,0.539,1392,0.512,1393,0.781,1399,0.337,1418,0.865,1432,0.629,1441,0.445,1461,0.521,1464,0.398,1467,0.512,1478,0.806,1480,0.893,1485,2.008,1509,0.55,1515,1.424,1523,0.491,1542,0.629,1571,0.74,1591,0.479,1595,0.629,1596,0.59,1600,1.452,1714,0.468,1722,1.448,1760,1.075,1803,0.993,1813,0.473,1833,0.826,1843,0.978,1866,1.402,1870,1.421,1912,0.55,1937,0.629,1940,0.413,1953,0.59,1959,1.402,1974,1.16,1982,1.16,2033,0.491,2039,2.623,2046,0.473,2089,0.55,2156,3.847,2172,0.806,2197,1.794,2215,4.347,2244,0.629,2248,0.521,2357,0.629,2362,0.656,2375,3.286,2376,0.575,2391,1.01,2451,1.028,2452,0.562,2454,8.433,2518,0.608,2533,1.663,2667,0.539,2671,0.562,2762,1.883,2782,0.692,2902,0.485,2908,0.498,2909,0.55,3196,0.366,3639,0.608,3705,0.562,3718,0.529,3741,0.692,3766,0.692,4046,0.656,4187,0.692,4410,1.126,4441,0.562,4533,2.291,4705,0.608,4707,4.112,4713,2.409,4741,0.692,4961,0.656,5095,0.692,5246,1.097,5441,2.008,5486,0.575,6049,0.656,6073,0.629,6108,0.692,6173,0.629,6263,1.32,6299,0.692,6300,0.746,6301,0.746,6302,1.423,6303,0.746,6304,0.746,6305,0.746,6306,1.126,6307,1.663,6308,2.041,6309,0.746,6310,2.041,6311,0.746,6312,0.746,6313,1.423,6314,0.746,6315,1.126,6316,1.423,6317,1.423,6318,0.746,6319,0.746,6320,0.746,6321,0.746,6322,0.746,6323,0.746,6324,1.423,6325,0.746,6326,1.423,6327,0.746,6328,0.746,6329,0.746,6330,0.746,6331,0.746,6332,0.746,6333,3.126,6334,0.746,6335,0.746,6336,0.746,6337,0.746,6338,0.746,6339,0.746,6340,0.746,6341,0.746,6342,0.746,6343,2.041,6344,0.746,6345,0.746,6346,1.423,6347,0.746,6348,0.746,6349,0.59,6350,0.746,6351,0.746,6352,0.746,6353,0.746,6354,0.746,6355,1.423,6356,0.746,6357,2.041,6358,0.746,6359,0.746,6360,0.746,6361,0.746,6362,0.746,6363,0.746,6364,0.746,6365,0.746,6366,0.746,6367,0.746,6368,0.746,6369,1.423,6370,0.746,6371,0.746,6372,0.746,6373,0.746,6374,0.746,6375,0.746,6376,0.746,6377,0.692,6378,0.746]],["component/144",[1,0.349,18,0.6,46,0.58]],["title/145",[6016,56.147]],["name/145",[3,1.478]],["text/145",[1,2.077,18,1.588,26,2.566,28,2.202,38,4.19,46,3.454,54,2.508,56,2.411,94,1.854,95,1.869,111,5.374,119,3.182,125,3.819,126,2.862,166,2.935,187,4.825,188,3.668,222,6.736,225,4.194,228,5.6,276,2.197,287,2.661,291,4.566,298,5.153,308,3.104,415,3.659,440,3.314,528,3.015,534,7.577,749,4.066,750,3.338,768,3.123,784,2.862,899,3.624,1212,3.498,1270,3.95,1461,4.242,2454,5.534,4886,4.113,6016,3.624,6024,5.902,6068,6.715,6144,4.808,6379,6.9]],["component/145",[1,0.349,18,0.6,46,0.58]],["title/146-1",[3,33.736,1117,40.327]],["name/146-1",[]],["text/146-1",[]],["component/146-1",[]],["title/146-2",[1,10.112,2,19.234,701,34.86]],["name/146-2",[]],["text/146-2",[]],["component/146-2",[]],["title/146-3",[95,20.474,188,28.006,856,29.533]],["name/146-3",[]],["text/146-3",[]],["component/146-3",[]],["title/146-4",[28,14.668,188,24.43,335,25.652,571,29.147]],["name/146-4",[]],["text/146-4",[]],["component/146-4",[]],["title/146-5",[187,43.157,1229,57.497]],["name/146-5",[]],["text/146-5",[]],["component/146-5",[]],["title/146-6",[188,32.809,4886,52.795]],["name/146-6",[]],["text/146-6",[]],["component/146-6",[]],["title/146-7",[21,21.347,821,31.828,982,37.703]],["name/146-7",[]],["text/146-7",[]],["component/146-7",[]],["title/146-8",[188,32.809,219,27.003]],["name/146-8",[]],["text/146-8",[]],["component/146-8",[]],["title/146-9",[123,35.054,821,37.286]],["name/146-9",[]],["text/146-9",[]],["component/146-9",[]],["title/146-10",[51,25.79,963,39.602]],["name/146-10",[]],["text/146-10",[]],["component/146-10",[]],["title/146",[187,43.157,188,32.809]],["name/146",[187,1.105,188,0.84]],["text/146",[0,0.361,1,1.329,2,0.495,3,3.621,4,1.004,7,1.465,10,1.176,15,1.562,18,2.133,19,0.776,21,2.014,26,0.383,28,2.597,29,0.806,34,2.041,36,0.366,37,0.356,45,0.505,46,2.255,48,0.644,49,0.969,51,0.804,52,0.767,60,1.087,66,0.484,71,0.74,73,2.825,80,0.684,82,0.612,84,1.087,87,0.536,88,0.536,89,0.756,90,0.769,94,1.586,95,0.948,98,2.009,99,0.45,102,3.94,110,2.153,111,0.478,114,1.461,118,0.411,119,0.896,120,1.394,121,1.057,125,1.607,126,2.42,140,1.14,142,0.481,147,0.72,149,0.429,151,0.38,152,1.732,165,2.638,172,0.329,175,2.182,176,0.433,177,0.392,184,0.417,186,1.031,187,0.501,188,5.546,189,0.421,190,3.995,197,0.575,201,0.365,203,1.012,205,0.605,219,2.583,222,0.517,225,1.267,232,0.324,236,2.924,237,1.07,239,0.415,243,0.644,244,0.346,247,3.026,250,0.402,253,0.346,254,1.446,260,2.391,261,1.495,263,0.386,264,0.67,266,0.791,267,0.682,269,2.778,272,3.324,276,1.326,279,0.659,280,0.707,281,2.531,287,4.676,293,1.299,294,3.678,300,1.031,302,2.778,306,0.381,307,0.717,308,3.208,309,0.701,310,1.691,315,0.765,318,1.811,330,0.665,332,1.881,334,1.772,335,1.857,342,0.367,352,0.501,354,1.351,355,0.494,363,2.441,366,0.682,375,3.904,376,1.355,380,1.262,382,1.238,392,0.575,393,0.484,412,0.392,413,3.714,423,0.45,425,0.38,432,0.891,437,0.472,445,1.404,447,0.605,450,2.561,482,0.717,502,0.582,504,0.737,511,0.44,527,0.339,536,0.513,554,0.563,573,2.887,578,3.587,580,0.885,582,0.478,594,3.099,692,1.833,694,0.522,698,0.509,702,0.699,703,0.513,711,0.985,717,0.613,722,0.827,740,1.041,741,2.249,753,0.831,759,0.513,764,1.074,767,1.461,775,0.563,778,0.859,780,0.481,784,1.728,800,0.316,817,0.546,833,0.643,839,0.415,850,1.289,851,0.551,855,0.557,856,0.402,858,0.933,864,0.921,870,4.084,895,0.513,898,1.669,907,0.455,910,0.513,922,1.506,934,0.546,955,2.594,956,0.934,963,1.235,967,3.308,973,1.231,982,0.513,989,0.491,1013,0.505,1014,4.785,1028,0.531,1043,0.575,1059,0.409,1081,2.057,1084,0.797,1101,1.215,1103,0.717,1108,0.682,1117,3.066,1130,0.546,1136,1.693,1139,0.682,1145,0.487,1153,1.966,1155,1.404,1156,0.75,1177,0.682,1194,0.447,1196,1.021,1216,0.513,1229,0.668,1268,0.623,1303,0.472,1324,0.531,1325,0.613,1348,1.041,1354,2.188,1355,0.551,1358,2.558,1362,0.526,1399,0.409,1404,0.46,1417,0.491,1418,0.384,1456,0.655,1463,0.509,1508,0.699,1509,0.668,1737,1.262,1762,0.536,1842,3.648,1853,1.052,1854,0.797,1857,2.376,1870,0.494,1879,0.765,1903,1.195,1911,0.557,1937,0.765,1955,0.531,2077,0.597,2120,1.444,2172,2.078,2181,0.682,2219,1.262,2238,3.189,2259,0.739,2667,0.655,3190,1.238,3457,2.118,3748,2.257,4115,0.841,4267,0.739,4420,0.717,4886,2.086,5116,0.717,5470,0.623,5497,2.653,5732,0.841,5969,1.602,6037,0.605,6067,1.727,6098,0.633,6123,0.765,6124,0.699,6125,3.403,6126,0.765,6127,2.272,6128,2.561,6129,2.321,6130,0.797,6131,0.797,6133,0.765,6134,1.262,6136,2.14,6152,0.717,6187,1.588,6190,0.797,6230,0.797,6380,0.907,6381,0.907,6382,0.907,6383,0.907,6384,0.841,6385,0.907,6386,3.083,6387,0.797,6388,1.588,6389,1.588,6390,0.765,6391,3.546,6392,3.899,6393,1.588,6394,3.403,6395,1.588,6396,0.841,6397,0.841,6398,0.907,6399,0.841,6400,0.765,6401,1.588,6402,0.841,6403,0.717,6404,0.907,6405,0.907,6406,0.907,6407,0.907,6408,0.907,6409,0.907,6410,0.907,6411,0.907,6412,2.053,6413,0.907,6414,0.907,6415,1.588,6416,0.841,6417,0.841,6418,0.841,6419,0.841,6420,0.841,6421,0.841]],["component/146",[1,0.349,18,0.6,46,0.58]],["title/147-1",[32,39.602,298,46.091]],["name/147-1",[]],["text/147-1",[]],["component/147-1",[]],["title/147-2",[298,46.091,6016,46.518]],["name/147-2",[]],["text/147-2",[]],["component/147-2",[]],["title/147-3",[297,61.717,298,46.091]],["name/147-3",[]],["text/147-3",[]],["component/147-3",[]],["title/147-4",[94,16.583,298,46.091]],["name/147-4",[]],["text/147-4",[]],["component/147-4",[]],["title/147-5",[192,38.489,298,46.091]],["name/147-5",[]],["text/147-5",[]],["component/147-5",[]],["title/147-6",[298,46.091,6258,55.373]],["name/147-6",[]],["text/147-6",[]],["component/147-6",[]],["title/147-7",[298,46.091,4010,63.574]],["name/147-7",[]],["text/147-7",[]],["component/147-7",[]],["title/147-8",[298,46.091,870,46.091]],["name/147-8",[]],["text/147-8",[]],["component/147-8",[]],["title/147",[1,10.112,46,16.815,298,39.344]],["name/147",[298,2.02]],["text/147",[0,0.761,1,1.518,10,0.613,15,1.448,21,3.494,26,0.807,28,0.483,32,0.971,34,2.657,46,2.59,48,1.729,51,1.125,71,0.827,73,2.189,82,0.683,86,1.14,88,1.13,90,3.184,94,2.23,98,3.67,102,4.538,108,1.513,120,0.726,133,1.509,147,0.804,153,1.44,163,1.897,165,4.818,172,1.234,175,0.704,177,0.827,186,0.811,188,3.803,190,3.371,192,3.496,200,1.829,201,2.243,206,0.938,219,0.662,242,1.536,243,0.719,244,1.757,245,0.786,247,4.186,251,1.11,253,0.731,260,3.307,261,3.425,263,2.721,264,0.748,272,2.428,276,1.662,277,1.335,280,1.404,287,1.49,293,2.455,297,7.153,298,7.587,302,2.468,308,0.977,309,2.619,310,1.849,320,5.002,323,2.159,329,1.975,330,2.484,335,1.503,344,0.82,347,1.001,352,1.058,354,2.052,356,0.905,362,1.058,363,0.841,366,5.334,373,1.964,375,1.259,388,0.817,398,1.12,413,5.55,423,0.949,425,3.217,436,1.028,527,0.715,537,1.357,554,1.187,559,1.688,560,3.336,571,0.96,573,1.77,591,2.134,655,2.244,660,2.623,674,2.029,692,0.834,697,1.021,703,1.927,722,1.643,729,1.399,735,1.12,741,1.379,761,0.995,763,2.09,767,1.83,779,1.357,800,0.666,821,2.665,839,0.875,870,2.716,881,1.301,910,1.083,927,0.971,956,3.486,962,1.092,967,2.114,971,1.05,975,1.151,982,5.119,1099,0.96,1104,1.101,1145,1.028,1153,0.801,1155,2.094,1156,2.013,1194,0.944,1198,0.919,1292,1.513,1322,2.692,1354,3.325,1358,1.043,1404,0.971,1418,0.811,1707,1.382,1841,0.983,1951,1.993,1962,1.228,2046,1.213,2234,1.314,2273,1.259,2376,1.474,2593,1.357,2627,2.692,3189,1.44,4010,3.747,4713,1.474,4721,1.613,5407,5.977,5408,2.993,5568,5.977,6017,1.682,6042,1.409,6152,1.513,6258,3.264,6403,1.513,6412,2.871,6422,1.913,6423,1.913,6424,1.773,6425,1.773,6426,1.913,6427,1.913,6428,1.913,6429,1.913,6430,3.156,6431,3.404,6432,4.598,6433,1.913,6434,1.913,6435,1.913,6436,1.913,6437,1.913,6438,1.913,6439,1.913,6440,1.913,6441,1.913,6442,1.913,6443,3.404,6444,1.913,6445,3.404,6446,1.913,6447,1.913,6448,1.913,6449,1.913,6450,1.913,6451,1.913,6452,1.913]],["component/147",[1,0.349,18,0.6,46,0.58]],["title/148",[6379,74.491]],["name/148",[6379,2.704]],["text/148",[1,1.773,7,2.047,34,1.937,46,2.949,71,1.471,82,1.991,87,2.009,90,1.528,103,2.047,121,1.477,126,3.334,127,1.535,142,1.804,172,2.02,175,4.196,184,1.563,186,1.441,190,4.387,197,2.158,201,1.368,206,1.669,244,1.3,247,7.202,254,2.195,260,3.05,261,2.088,263,2.372,272,4.743,287,4.992,306,3.801,308,1.737,310,2.242,330,2.166,342,1.378,354,1.252,361,3.355,373,2.381,412,1.471,435,4.616,437,1.769,438,4.174,439,4.365,452,7.242,462,2.301,527,1.271,591,1.578,625,5.118,629,5.219,673,3.423,676,5.542,692,2.43,710,1.78,729,2.291,767,1.353,780,1.804,817,2.047,1046,1.792,1136,1.867,1317,3.131,1348,3.388,1447,4.793,1460,2.99,1520,2.414,1600,1.896,1961,1.941,2892,2.69,3191,2.506,6152,2.69,6167,5.602,6379,5.602,6453,3.153,6454,3.401,6455,9.507,6456,5.574,6457,7.594,6458,7.594,6459,7.594,6460,5.574,6461,5.574,6462,8.191]],["component/148",[1,0.349,18,0.6,46,0.58]],["title/149-1",[119,40.838,287,34.159]],["name/149-1",[]],["text/149-1",[]],["component/149-1",[]],["title/149-2",[6463,78.021,6464,68.6]],["name/149-2",[]],["text/149-2",[]],["component/149-2",[]],["title/149-3",[269,31.2,294,38.992,568,43.841]],["name/149-3",[]],["text/149-3",[]],["component/149-3",[]],["title/149",[269,36.55,294,45.679]],["name/149",[269,0.935,294,1.169]],["text/149",[1,0.904,4,1.102,7,1.608,10,2.941,13,1.695,15,1.938,16,1.835,21,0.856,26,1.128,28,2.546,34,1.246,38,1.283,46,1.503,48,1.005,54,1.102,60,0.791,73,3.373,82,3.069,94,0.968,95,1.83,99,1.325,103,4.234,106,1.297,118,1.211,119,3.116,121,1.16,125,3.08,126,4.55,159,2.599,164,1.195,184,1.228,186,1.132,187,1.478,188,4.24,189,1.239,192,3.47,194,2.059,201,2.395,225,2.447,227,1.564,228,1.715,232,0.954,244,1.741,254,1.052,269,5.988,272,1.014,276,0.965,279,1.028,280,1.102,281,1.608,287,5.636,290,1.676,294,7.635,300,2.523,304,1.489,306,1.123,318,3.029,330,1.038,332,1.195,335,1.18,352,2.519,373,1.141,388,1.141,412,2.574,417,1.356,432,2.369,435,2.326,436,3.2,439,1.29,450,1.864,504,1.15,552,3.082,559,1.325,560,1.258,568,1.759,626,2.011,692,2.596,729,2.447,732,1.398,741,1.082,761,1.389,767,1.063,768,1.372,821,1.277,833,1.896,836,2.34,851,1.624,856,2.02,867,2.123,872,1.695,937,2.501,962,1.525,982,1.512,988,2.369,1014,4.365,1068,2.432,1081,3.039,1177,2.011,1216,1.512,1217,5.428,1245,2.011,1273,1.333,1324,1.564,1362,1.55,1381,1.864,1390,2.059,1427,2.253,1515,1.864,1544,1.969,1704,1.931,1757,1.715,1771,3.292,1931,1.64,1955,2.667,2150,1.931,2218,1.808,2268,2.059,2305,1.808,2709,1.864,3068,1.864,4176,3.429,4886,3.082,5969,3.919,6000,2.011,6046,2.177,6067,3.233,6068,2.998,6098,6.402,6120,4.223,6123,2.253,6126,2.253,6128,4.155,6133,2.253,6464,7.556,6465,5.954,6466,4.555,6467,3.292,6468,2.671,6469,4.555,6470,2.671]],["component/149",[1,0.349,18,0.6,46,0.58]],["title/150-1",[22,38.009,59,26.141,415,40.089]],["name/150-1",[]],["text/150-1",[]],["component/150-1",[]],["title/150-2",[254,30.729,432,40.58]],["name/150-2",[]],["text/150-2",[]],["component/150-2",[]],["title/150-3",[415,46.963,582,41.103]],["name/150-3",[]],["text/150-3",[]],["component/150-3",[]],["title/150-4",[133,34.597,415,46.963]],["name/150-4",[]],["text/150-4",[]],["component/150-4",[]],["title/150-5",[1,11.846,46,19.699]],["name/150-5",[]],["text/150-5",[]],["component/150-5",[]],["title/150-6",[412,40.719]],["name/150-6",[]],["text/150-6",[]],["component/150-6",[]],["title/150",[415,56.684]],["name/150",[415,2.058]],["text/150",[1,1.795,2,0.895,4,1.279,10,1.655,14,2.098,15,1.319,19,2.341,21,3.54,22,1.77,34,1.815,46,3.121,51,1.025,52,1.627,59,2.027,60,2.545,61,1.904,71,2.233,80,1.238,85,1.832,87,1.832,90,2.32,94,1.827,118,1.406,121,2.242,122,3.064,127,1.399,133,1.375,175,1.9,177,1.341,189,2.396,190,2.303,201,3.113,204,2.526,242,1.399,244,1.974,245,1.275,253,1.185,254,3.656,260,1.335,263,2.197,279,2.553,287,4.309,309,1.27,310,2.669,329,1.799,335,3.417,342,1.256,354,1.141,356,1.467,363,2.27,373,2.206,395,1.832,412,5.013,415,8.171,425,2.163,439,1.497,505,1.583,527,1.159,536,2.923,552,2.098,562,1.741,582,6.108,589,1.741,609,1.644,610,2.453,655,1.513,692,2.251,729,1.275,732,1.623,754,2.945,767,1.234,773,1.77,778,1.823,780,1.644,800,2.31,809,1.885,856,1.375,907,2.591,969,3.349,1021,1.702,1059,1.399,1074,2.285,1146,2.164,1148,2.164,1153,1.299,1185,1.77,1345,1.633,1398,1.99,1420,1.702,1428,2.201,1447,3.494,1471,1.849,1478,1.755,1523,4.368,1841,1.593,1958,2.13,2289,2.453,2428,2.334,2539,2.453,2560,1.849,2613,2.875,3190,2.241,3192,2.615,3593,2.453,5435,6.153,6152,4.085,6471,2.875,6472,2.875,6473,3.101,6474,2.726,6475,6.636,6476,3.101,6477,2.875,6478,3.101,6479,3.101,6480,3.101,6481,3.101,6482,3.101,6483,3.101,6484,3.101]],["component/150",[1,0.349,18,0.6,46,0.58]],["title/151-1",[1208,59.747]],["name/151-1",[]],["text/151-1",[]],["component/151-1",[]],["title/151-2",[1,8.821,38,27.906,46,14.668,6024,39.312]],["name/151-2",[]],["text/151-2",[]],["component/151-2",[]],["title/151-3",[302,36.347]],["name/151-3",[]],["text/151-3",[]],["component/151-3",[]],["title/151-4",[38,37.477,166,37.673]],["name/151-4",[]],["text/151-4",[]],["component/151-4",[]],["title/151-5",[6024,45.067,6485,61.751,6486,61.751]],["name/151-5",[]],["text/151-5",[]],["component/151-5",[]],["title/151-6",[94,14.156,188,28.006,6025,54.268]],["name/151-6",[]],["text/151-6",[]],["component/151-6",[]],["title/151-7",[34,15.889,188,24.43,342,23.534,6025,47.338]],["name/151-7",[]],["text/151-7",[]],["component/151-7",[]],["title/151-8",[1013,43.484,1572,48.416]],["name/151-8",[]],["text/151-8",[]],["component/151-8",[]],["title/151-9",[1944,50.087,6134,57.497]],["name/151-9",[]],["text/151-9",[]],["component/151-9",[]],["title/151-10",[59,26.141,114,26.505,6134,49.08]],["name/151-10",[]],["text/151-10",[]],["component/151-10",[]],["title/151-11",[59,26.141,1354,39.709,6134,49.08]],["name/151-11",[]],["text/151-11",[]],["component/151-11",[]],["title/151-12",[121,28.916,318,28.681,743,37.703]],["name/151-12",[]],["text/151-12",[]],["component/151-12",[]],["title/151-13",[251,33.718,354,21.378,862,38.243,6487,53.866]],["name/151-13",[]],["text/151-13",[]],["component/151-13",[]],["title/151-14",[784,31.353,1600,37.119,6258,47.267]],["name/151-14",[]],["text/151-14",[]],["component/151-14",[]],["title/151-15",[844,45.71]],["name/151-15",[]],["text/151-15",[]],["component/151-15",[]],["title/151-16",[287,34.159,6067,55.373]],["name/151-16",[]],["text/151-16",[]],["component/151-16",[]],["title/151-17",[38,24.746,287,22.555,966,45.297,6024,34.861,6067,36.563]],["name/151-17",[]],["text/151-17",[]],["component/151-17",[]],["title/151-18",[4,27.479,287,29.158,6067,47.267]],["name/151-18",[]],["text/151-18",[]],["component/151-18",[]],["title/151-19",[15,33.197,1269,61.717]],["name/151-19",[]],["text/151-19",[]],["component/151-19",[]],["title/151-20",[34,15.889,94,12.348,287,25.435,6067,41.232]],["name/151-20",[]],["text/151-20",[]],["component/151-20",[]],["title/151",[38,37.477,6024,52.795]],["name/151",[38,0.959,6024,1.351]],["text/151",[1,1.007,3,0.574,4,2.173,7,1.771,10,0.943,15,2.822,19,0.866,20,0.824,26,0.807,28,2.523,29,0.327,34,2.505,37,0.96,38,5.038,43,1.024,45,0.387,46,1.675,48,0.719,54,1.009,59,1.658,66,0.371,70,0.785,71,2.137,72,0.3,73,2.779,75,0.39,77,0.451,81,1.212,82,1.99,87,1.445,88,0.785,89,1.08,90,0.312,93,0.874,94,1.549,97,0.502,99,0.344,103,0.418,113,0.493,114,2.818,115,0.493,118,1.541,119,2.003,120,2.226,121,0.577,122,0.321,123,0.597,125,0.582,126,1.385,127,0.6,133,1.085,135,1.242,137,0.585,140,0.895,147,1.609,148,0.644,149,1.392,151,1.424,154,0.484,158,0.502,164,0.594,166,1.181,169,0.35,172,0.482,175,0.703,176,0.332,177,0.826,180,0.477,184,0.319,186,1.247,188,3.065,189,0.322,190,0.461,196,0.988,197,0.44,200,1.581,201,2.118,203,1.129,205,0.463,207,0.874,232,0.682,235,0.493,239,0.608,242,0.862,243,1.858,244,2.013,245,0.546,250,0.308,251,1.707,253,2.013,260,0.823,263,1.041,264,0.747,266,0.321,269,0.325,272,0.504,274,0.61,276,0.69,279,0.941,280,0.286,283,0.387,287,5.267,290,3.496,293,2.255,294,1.991,295,0.368,300,1.037,302,1.477,305,0.882,306,1.029,308,2.846,309,0.782,310,1.987,317,1.139,318,4.693,330,0.516,334,0.922,335,0.844,342,0.991,344,0.819,345,1.652,350,0.682,352,2.117,354,2.257,355,0.724,356,0.328,358,0.451,359,0.816,363,1.682,373,1.257,388,0.297,390,0.523,398,0.406,417,0.352,419,1.034,420,0.484,421,2.003,423,1.687,425,0.291,438,0.321,442,0.943,462,0.47,505,0.354,518,0.368,521,0.431,527,1.099,528,0.659,530,0.308,533,2.184,551,0.414,553,0.446,559,0.344,560,0.899,562,0.39,563,0.792,571,0.348,573,0.691,575,0.891,576,0.348,580,0.687,583,0.57,591,0.616,602,0.371,613,1,642,0.406,654,0.396,688,0.927,690,0.785,692,2.154,698,0.39,699,1.027,701,0.363,704,0.387,715,0.463,717,0.899,734,0.808,739,3.634,741,0.774,743,1.385,749,0.324,753,1.65,761,0.994,766,0.339,767,0.76,768,0.357,781,0.477,783,0.357,784,2.48,789,0.339,790,0.414,797,0.585,805,0.8,811,0.373,822,0.927,826,0.687,828,0.853,833,0.493,834,0.948,835,0.512,836,0.357,840,1.963,844,0.645,858,0.266,862,1.61,869,0.719,870,1.129,889,0.44,909,0.393,917,0.47,937,1.049,939,0.337,954,1.297,955,4.623,956,0.724,973,1.835,974,0.422,977,0.446,982,0.393,1013,4.377,1019,0.426,1020,0.47,1021,0.381,1028,1.119,1044,0.342,1050,0.61,1059,1.328,1062,0.435,1068,0.371,1071,0.484,1092,1.408,1104,1.099,1130,0.418,1139,1.438,1140,0.644,1168,2.151,1185,0.396,1216,1.665,1217,1.073,1233,0.502,1240,0.523,1248,0.523,1251,0.451,1263,0.484,1267,1.935,1269,0.549,1273,0.663,1289,0.943,1293,0.61,1303,0.994,1324,1.432,1334,0.502,1339,0.549,1346,1.212,1351,0.535,1352,0.979,1353,0.502,1354,3.14,1358,2.694,1362,0.403,1365,1.129,1381,1.333,1398,0.853,1441,0.414,1447,1.293,1449,0.418,1452,0.512,1467,1.312,1477,1.312,1478,0.752,1515,0.484,1543,0.61,1544,0.512,1572,1.825,1591,0.446,1597,1,1600,4.652,1691,0.808,1698,0.863,1717,0.457,1731,0.477,1742,0.792,1747,0.61,1749,0.44,1757,0.446,1809,1.082,1833,1.109,1857,0.535,1870,0.378,1909,0.451,1944,2.183,1950,0.585,1958,0.477,1959,0.477,1993,0.585,2033,0.457,2036,0.899,2039,1.931,2040,0.502,2054,0.96,2070,0.644,2093,1.557,2096,2.151,2099,0.493,2137,0.523,2150,0.502,2169,0.644,2217,0.512,2239,0.523,2257,0.493,2272,0.97,2375,0.512,2399,0.493,2416,0.644,2450,1.168,2577,0.512,2629,0.566,2671,1,2792,1.293,2817,0.502,2821,0.549,2836,0.512,2900,0.899,3055,0.585,3068,0.484,3129,1.168,3290,0.44,3606,3.052,3718,0.493,4015,0.61,4117,1.232,4164,0.61,4271,0.523,4280,0.96,4365,0.61,4408,0.566,4420,1.051,4605,1.993,4648,0.493,4671,1.082,4674,0.644,4713,2.949,4834,0.566,4861,0.549,5001,0.644,5175,0.644,5283,0.549,5371,1.082,5470,0.477,5673,1.168,5934,0.644,5969,5.494,6000,0.523,6024,8.014,6025,2.771,6065,2.151,6067,6.743,6068,0.874,6073,0.585,6098,0.927,6134,4.52,6258,1.356,6387,1.168,6396,0.644,6402,0.644,6485,3.916,6486,3.916,6487,1.232,6488,1.911,6489,1.911,6490,0.694,6491,0.644,6492,1.328,6493,1.771,6494,0.694,6495,1.328,6496,0.694,6497,1.328,6498,0.694,6499,0.694,6500,0.694,6501,0.644,6502,0.694,6503,0.694,6504,0.694,6505,0.694,6506,0.694,6507,0.694,6508,0.694,6509,0.694,6510,0.694,6511,0.644,6512,0.694,6513,0.694,6514,0.694,6515,0.694,6516,0.694,6517,0.694,6518,0.694,6519,0.694,6520,0.694,6521,0.694,6522,0.694,6523,0.694,6524,0.644,6525,1.328,6526,0.694,6527,0.694,6528,0.644,6529,0.694,6530,1.328,6531,0.694,6532,0.694]],["component/151",[1,0.349,18,0.6,46,0.58]],["title/152",[169,47.519]],["name/152",[3,1.478]],["text/152",[1,1.874,46,3.115,169,6.555,190,3.892,208,6.113,224,9.458,225,4.61,228,5.653,330,3.421,332,3.939,419,6.07,528,4.368,534,7.199,575,4.105,767,3.504,768,4.523,1072,5.3,1171,6.565,1212,5.067,1213,6.786]],["component/152",[1,0.349,18,0.6,46,0.58]],["title/153",[690,55.63]],["name/153",[3,1.478]],["text/153",[1,2.059,46,3.424,59,4.746,222,6.901,690,5.871,708,6.936,741,4.026,895,5.626,1273,6.032,1540,5.539]],["component/153",[1,0.349,18,0.6,46,0.58]],["title/154-1",[168,37.119,232,23.786,2077,43.841]],["name/154-1",[]],["text/154-1",[]],["component/154-1",[]],["title/154-2",[168,43.484,232,27.865]],["name/154-2",[]],["text/154-2",[]],["component/154-2",[]],["title/154-3",[4561,79.426]],["name/154-3",[]],["text/154-3",[]],["component/154-3",[]],["title/154-4",[280,38.854]],["name/154-4",[]],["text/154-4",[]],["component/154-4",[]],["title/154",[1,11.73,46,19.505,1273,25.7]],["name/154",[1,0.255,46,0.424,1273,0.443]],["text/154",[1,1.732,2,1.067,7,2.223,21,1.184,28,2.957,34,2.05,37,2.34,46,2.88,48,1.389,60,1.094,73,4.938,74,2.622,110,1.547,114,2.372,120,1.403,125,1.617,126,3.528,142,1.959,165,2.317,175,2.194,184,1.698,186,1.566,206,1.812,219,2.063,236,1.946,237,3.295,243,1.389,244,1.412,245,2.45,247,2.014,254,2.348,260,2.567,261,2.268,276,1.335,279,1.421,281,5.68,287,3.766,295,1.959,302,1.426,305,1.706,308,1.886,309,1.513,310,3.014,318,4.913,320,2.043,330,3.667,335,1.631,342,1.496,354,1.359,361,2.223,418,3.01,445,2.715,452,2.5,456,2.578,477,3.01,510,2.578,511,1.793,527,1.381,569,2.043,571,1.853,573,5.521,576,1.853,602,1.972,690,7.075,692,2.599,698,4.21,714,3.425,722,1.784,729,1.518,740,1.247,750,5.182,772,2.371,776,1.999,800,1.286,839,1.69,851,2.245,855,3.661,858,1.416,861,1.765,881,1.412,899,2.202,985,2.537,996,2.5,1039,2.163,1044,1.822,1218,3.204,1323,2.622,1328,2.781,1354,2.202,1358,2.014,1499,2.781,1520,2.622,1762,2.182,2272,3.804,2278,6.002,2819,2.317,3912,2.922,4524,3.425,5091,3.425,5497,2.67,6096,2.622,6533,3.694,6534,5.961,6535,3.694,6536,3.694,6537,3.694,6538,3.694,6539,3.694,6540,3.694,6541,3.694,6542,3.425,6543,3.694]],["component/154",[1,0.349,18,0.6,46,0.58]],["title/155-1",[168,37.119,232,23.786,2077,43.841]],["name/155-1",[]],["text/155-1",[]],["component/155-1",[]],["title/155-2",[168,43.484,232,27.865]],["name/155-2",[]],["text/155-2",[]],["component/155-2",[]],["title/155-3",[4561,79.426]],["name/155-3",[]],["text/155-3",[]],["component/155-3",[]],["title/155-4",[280,38.854]],["name/155-4",[]],["text/155-4",[]],["component/155-4",[]],["title/155",[86,39.709,87,39.344,88,39.344]],["name/155",[86,0.841,87,0.833,88,0.833]],["text/155",[1,2.013,10,1.576,15,2.092,28,1.883,37,1.93,46,3.347,59,2.928,73,1.93,119,2.574,120,2.832,123,4.049,124,3.051,125,2.153,126,5.09,163,2.741,164,2.2,188,3.136,190,1.707,222,4.257,232,1.756,253,1.879,260,3.881,281,7.331,287,5.176,288,3.789,290,5.653,300,2.084,302,1.898,308,2.511,311,7.502,318,4.331,330,1.911,335,2.171,412,2.126,417,2.496,445,2.239,449,2.72,511,2.387,559,2.439,569,2.72,690,2.905,692,2.144,698,5.061,740,1.66,767,1.957,776,2.662,800,1.711,839,2.25,933,2.854,985,3.377,1108,3.702,1303,3.879,1358,2.68,1362,2.854,1376,3.051,1600,2.741,1955,4.367,2023,3.789,2039,2.481,2150,3.554,2578,4.323,3912,3.89,4710,3.89,6042,3.624,6230,7.923,6542,4.559,6544,4.917,6545,4.917,6546,4.917,6547,4.917,6548,4.917]],["component/155",[1,0.349,18,0.6,46,0.58]],["title/156-1",[29,36.73,800,27.155]],["name/156-1",[]],["text/156-1",[]],["component/156-1",[]],["title/156-2",[1,10.112,2,19.234,14,45.067]],["name/156-2",[]],["text/156-2",[]],["component/156-2",[]],["title/156",[121,33.875,743,44.169]],["name/156",[121,0.867,743,1.13]],["text/156",[1,1.456,2,0.687,15,1.013,26,1.005,28,1.378,29,3.466,46,2.422,47,2.617,50,1.951,59,2.142,60,0.705,66,2.202,71,1.029,80,0.951,82,0.85,90,1.853,94,0.506,95,3.863,110,0.997,118,3.656,121,3.758,122,1.905,126,1.942,129,1.382,135,1.208,147,1.001,175,2.008,176,1.138,177,1.029,189,4.249,197,3.463,201,0.957,226,1.447,232,0.85,242,2.463,250,1.056,253,0.91,254,1.625,276,1.972,279,0.916,280,0.982,287,3.223,293,3.93,300,1.009,310,2.195,318,1.025,332,1.065,342,0.964,350,2.119,354,2.396,388,1.017,395,1.406,412,3.183,423,3.229,462,1.611,505,1.215,546,1.94,560,1.121,569,1.317,613,6.071,642,1.394,648,1.588,655,3.935,692,4.346,716,2.145,732,1.246,743,4.566,754,1.309,763,1.462,790,4.389,800,2.266,805,2.483,810,1.406,811,2.217,822,1.661,828,1.528,834,2.046,856,4.421,859,2.878,862,2.715,937,1.307,939,3.915,955,3.285,962,2.354,973,1.647,974,4.902,1008,1.72,1032,1.271,1059,2.463,1093,4.405,1177,4.901,1221,1.327,1233,1.72,1252,2.681,1303,1.238,1324,1.394,1334,1.72,1344,1.528,1354,1.419,1367,1.754,1393,1.307,1399,2.938,1402,1.51,1469,1.528,1528,4.317,1656,2.752,1729,2.008,1731,1.635,1737,1.754,1746,3.693,1796,1.327,2043,4.109,2046,1.51,2077,1.567,2101,1.834,2150,1.72,2156,4.846,2312,1.689,2473,2.008,2571,1.834,2577,1.754,2593,1.689,2794,1.792,2898,1.754,2909,1.754,2964,4.901,3140,7.724,3150,6.379,4157,2.207,4186,8.433,4267,3.361,4280,1.72,4320,2.008,4648,5.724,5050,1.661,5079,5.305,5839,6.473,6549,2.38,6550,2.38,6551,5.061,6552,2.38,6553,2.38,6554,2.38,6555,2.207,6556,2.207,6557,2.38,6558,2.38,6559,3.824,6560,2.38,6561,2.38,6562,2.38,6563,2.38,6564,2.38,6565,8.065,6566,2.38,6567,2.38,6568,2.093,6569,2.38,6570,2.38]],["component/156",[1,0.349,18,0.6,46,0.58]],["title/157",[147,39.6]],["name/157",[3,1.478]],["text/157",[1,1.192,28,2.948,38,3.771,46,1.982,60,2.324,82,2.804,94,1.669,95,3.2,121,5.069,143,6.776,147,5.228,190,2.725,245,3.227,247,4.279,332,3.512,397,4.428,511,3.81,743,6.61,784,3.696,895,4.444,955,5.892,958,4.871,1019,4.821,1028,4.596,1135,6.21,1212,4.518,1320,4.925,1344,5.04,1398,5.04,1466,4.772,1540,4.375,2038,6.621,2398,5.673,4713,6.05,6571,7.85]],["component/157",[1,0.349,18,0.6,46,0.58]],["title/158-1",[828,37.295,955,29.316,2046,36.859,4620,42.813]],["name/158-1",[]],["text/158-1",[]],["component/158-1",[]],["title/158-2",[1,7.822,46,13.007,143,29.9,425,21.581,955,25.996]],["name/158-2",[]],["text/158-2",[]],["component/158-2",[]],["title/158",[28,19.699,955,39.37]],["name/158",[28,0.356,143,0.819,232,0.504]],["text/158",[1,1.32,2,1.34,4,1.915,10,2.287,28,2.809,29,4.093,34,2.378,36,4.253,37,1.822,46,1.802,51,3.227,60,2.113,66,2.478,79,5.994,80,1.854,94,0.987,110,2.99,151,1.944,184,2.133,226,4.338,232,1.658,236,2.445,240,2.717,244,2.728,264,1.816,266,2.143,276,1.677,279,3.755,306,4.105,330,2.773,335,3.151,346,2.253,360,2.945,425,3.642,456,3.239,504,1.999,505,2.37,511,2.253,527,1.735,530,2.058,534,2.98,538,3.016,583,1.991,588,3.54,679,2.98,692,4.85,742,2.429,767,1.847,771,4.04,811,2.495,837,2.445,839,2.123,850,3.494,858,4.586,955,5.614,956,4.74,963,3.623,964,2.218,988,2.414,996,3.141,1021,2.548,1150,2.567,1185,2.649,1196,2.767,1245,3.494,1251,4.638,1294,3.577,1362,2.694,1474,3.782,1713,4.774,1852,2.53,1956,4.902,1957,3.354,2046,5.517,2098,3.671,2931,3.782,4620,6.408,5200,2.794,6037,3.097,6124,3.577,6377,4.303,6572,4.303,6573,7.137,6574,3.671]],["component/158",[1,0.349,18,0.6,46,0.58]],["title/159-1",[51,17.029,123,23.147,963,26.149,1026,39.701,1463,28.935]],["name/159-1",[]],["text/159-1",[]],["component/159-1",[]],["title/159-2",[51,17.029,445,23.461,623,29.165,963,26.149,1463,28.935]],["name/159-2",[]],["text/159-2",[]],["component/159-2",[]],["title/159",[51,17.029,120,19.562,121,22.368,623,29.165,963,26.149]],["name/159",[51,0.466,120,0.536,121,0.612]],["text/159",[1,0.912,9,1.996,10,1.195,34,2.915,46,1.517,51,3.135,60,1.104,82,2.146,110,1.562,119,5.803,120,3.284,121,1.619,123,4.554,133,1.654,151,1.562,152,2.095,171,1.94,186,1.581,188,3.172,190,4.85,196,1.928,225,1.533,280,1.539,287,5.357,302,3.338,309,1.527,361,3.616,378,2.874,379,2.874,412,1.613,435,3.068,438,2.774,439,2.901,445,5.351,502,2.394,527,2.245,609,3.186,623,3.401,625,2.695,694,3.457,697,1.991,711,2.146,742,1.952,750,3.299,772,4.843,785,4.342,829,1.606,838,4.902,956,2.033,962,3.429,963,3.049,968,2.203,969,1.882,1026,6.665,1044,2.964,1075,1.893,1117,4.471,1317,2.095,1456,2.695,1463,2.095,1575,3.517,1712,3.769,5246,2.874,5372,3.279,5969,6.671,6096,2.647,6098,4.192,6128,4.192,6167,2.95,6175,5.067,6390,5.067,6391,7.295,6400,5.067,6574,7.502,6575,3.73,6576,3.458,6577,5.282,6578,5.282,6579,5.282,6580,3.73,6581,3.73,6582,3.73,6583,3.73,6584,3.73,6585,3.73]],["component/159",[1,0.349,18,0.6,46,0.58]],["title/160",[120,25.29,121,28.916,502,42.755]],["name/160",[120,0.536,121,0.612,502,0.905]],["text/160",[1,1.734,6,4.07,10,2.905,34,3.295,45,3.575,46,2.884,60,1.899,72,2.774,73,2.518,82,2.291,94,1.927,120,2.436,121,2.785,123,4.072,126,3.02,133,2.845,135,3.256,140,3.005,151,2.687,190,3.146,200,3.448,239,2.935,245,2.637,260,4.526,261,3.939,263,2.73,269,3.005,272,2.436,281,3.862,287,2.809,294,3.756,302,3.498,308,4.628,310,2.58,311,4.07,354,2.361,397,2.73,412,2.774,423,4.496,445,5.487,502,6.747,527,2.398,616,4.406,724,4.406,741,2.599,742,4.744,780,3.402,839,2.935,851,3.9,956,3.497,1104,3.692,1448,3.862,1760,3.38,1797,5.411,1853,3.939,6129,4.829,6586,5.948]],["component/160",[1,0.349,18,0.6,46,0.58]],["title/161-1",[1,5.839,34,10.517,46,9.709,281,23.147,412,16.628,502,24.686,611,24.124,1153,16.109]],["name/161-1",[]],["text/161-1",[]],["component/161-1",[]],["title/161-2",[967,35.861,1842,55.373]],["name/161-2",[]],["text/161-2",[]],["component/161-2",[]],["title/161-3",[741,31.606,967,35.861]],["name/161-3",[]],["text/161-3",[]],["component/161-3",[]],["title/161",[1,7.822,2,14.878,60,15.254,83,29.402,412,22.276]],["name/161",[120,0.536,121,0.612,412,0.61]],["text/161",[1,1.379,2,0.756,9,0.87,10,1.434,21,3.069,34,3.357,46,2.887,48,2.205,51,0.865,60,3.738,78,1.66,82,2.094,83,1.494,95,0.805,98,1.251,106,1.27,110,1.096,119,5.738,120,3.935,123,1.176,147,1.101,149,1.238,152,3.293,164,1.171,165,1.642,175,0.963,186,1.109,188,3.574,189,1.214,190,2.035,219,0.906,232,1.598,236,1.379,247,1.427,254,2.733,263,1.114,272,2.226,276,0.946,277,1.826,280,2.419,281,3.529,298,1.546,302,1.727,306,1.882,309,1.072,310,3.851,311,1.66,335,1.156,342,1.06,354,2.158,361,1.575,363,4.556,373,1.912,375,5.594,380,3.298,382,3.234,397,1.904,398,1.532,412,2.535,413,1.891,437,1.361,440,1.427,443,1.624,445,5.796,482,2.07,502,3.764,506,4.161,507,3.074,514,2.233,527,2.191,556,2.07,557,3.123,559,2.22,578,3.123,580,1.353,583,1.122,591,1.214,611,1.642,655,1.277,658,1.344,662,4.264,688,1.27,698,2.514,701,1.37,741,2.811,753,1.27,759,2.534,784,1.232,785,3.234,806,1.437,837,1.379,839,1.197,851,4.218,856,1.161,861,1.251,870,1.546,895,3.928,956,1.427,963,1.328,968,1.546,1016,3.369,1039,2.62,1075,1.328,1104,1.506,1117,1.353,1145,1.407,1153,4.34,1222,1.723,1320,1.642,1418,1.109,1448,1.575,1456,3.234,1833,1.519,1866,1.798,1961,1.494,2039,1.321,2649,1.97,3113,2.017,5470,1.798,5497,1.891,6021,1.771,6127,3.298,6129,5.224,6412,3.775,6587,2.617,6588,2.617,6589,3.935,6590,2.301,6591,2.617,6592,2.617,6593,2.617,6594,2.301,6595,2.617,6596,2.427,6597,2.427,6598,2.617,6599,2.617]],["component/161",[1,0.349,18,0.6,46,0.58]],["title/162-1",[1,10.112,46,16.815,445,30.33]],["name/162-1",[]],["text/162-1",[]],["component/162-1",[]],["title/162-2",[1,8.821,46,14.668,123,26.102,742,30.409]],["name/162-2",[]],["text/162-2",[]],["component/162-2",[]],["title/162-3",[119,40.838,1955,45.679]],["name/162-3",[]],["text/162-3",[]],["component/162-3",[]],["title/162-4",[140,31.2,742,34.86,772,42.755]],["name/162-4",[]],["text/162-4",[]],["component/162-4",[]],["title/162",[1,8.821,46,14.668,120,22.06,121,25.224]],["name/162",[120,0.536,121,0.612,281,0.849]],["text/162",[1,1.276,2,0.741,9,1.462,15,1.872,20,1.592,21,1.851,26,1.857,28,2.122,34,2.711,37,1.727,46,1.945,48,2.172,51,1.909,59,1.007,60,2.489,72,1.109,73,1.007,82,1.571,94,0.545,98,1.226,110,1.074,118,1.994,119,6.055,120,3.602,121,1.114,123,4.262,125,1.123,126,2.719,140,1.202,147,2.429,151,1.074,152,2.471,155,1.647,165,1.609,171,2.288,172,0.93,186,1.087,188,4.684,190,4.015,199,1.43,202,3.021,207,1.688,219,2.37,225,1.054,243,1.654,244,0.98,247,1.398,250,1.951,253,0.98,260,1.105,261,1.575,264,1.003,269,1.202,272,1.67,276,0.927,283,1.43,287,1.926,293,1.369,294,1.502,296,1.931,298,1.515,302,2.643,308,1.31,309,1.05,310,1.769,311,1.627,318,1.105,329,1.489,332,1.968,354,0.944,375,1.688,378,1.977,379,1.977,382,1.854,388,2.467,397,1.872,413,1.854,425,1.074,445,4.681,450,1.79,479,1.711,502,4.946,504,1.894,524,2.255,527,1.644,528,1.272,536,1.452,559,1.272,570,3.324,571,2.898,573,1.334,583,2.477,588,1.272,609,1.36,635,1.379,662,1.287,688,1.245,694,1.476,697,1.369,699,1.379,729,2.374,741,1.039,742,4.965,748,1.575,749,1.196,750,2.415,754,1.396,767,1.021,768,1.318,772,4.946,784,2.719,789,2.147,791,2.246,800,2.383,820,2.575,826,1.326,833,1.82,837,1.351,839,1.173,851,3.511,858,0.983,895,1.452,947,1.502,956,3.148,962,1.464,963,2.233,968,1.515,987,1.79,989,1.388,1016,3.312,1059,1.158,1117,2.274,1153,2.868,1212,1.476,1216,1.452,1273,1.28,1358,2.398,1575,1.502,1758,1.388,1950,2.163,1955,4.922,2902,1.667,4774,2.163,5969,1.688,6016,1.529,6017,2.255,6096,1.82,6098,1.79,6128,1.79,6175,2.163,6390,2.163,6391,3.71,6400,2.163,6403,2.029,6574,2.029,6576,2.378,6577,2.255,6578,2.255,6579,2.255,6586,2.378,6600,2.163,6601,2.565,6602,2.565,6603,4.399,6604,2.565,6605,2.565,6606,2.163,6607,2.255,6608,2.255,6609,2.255,6610,2.255,6611,2.255,6612,2.163,6613,2.255,6614,2.163,6615,2.163,6616,2.09]],["component/162",[1,0.349,18,0.6,46,0.58]],["title/163-1",[0,26.505,156,45.067,169,33.607]],["name/163-1",[]],["text/163-1",[]],["component/163-1",[]],["title/163-2",[0,26.505,94,14.156,156,45.067]],["name/163-2",[]],["text/163-2",[]],["component/163-2",[]],["title/163-3",[48,21.85,192,28.66,261,35.675,354,21.378]],["name/163-3",[]],["text/163-3",[]],["component/163-3",[]],["title/163-4",[1,7.026,46,11.684,119,24.223,156,31.315,269,21.679,601,28.717]],["name/163-4",[]],["text/163-4",[]],["component/163-4",[]],["title/163-5",[0,26.505,143,38.653,156,45.067]],["name/163-5",[]],["text/163-5",[]],["component/163-5",[]],["title/163",[0,20.502,1,7.822,46,13.007,156,34.861,281,31.01]],["name/163",[120,0.536,121,0.612,156,0.954]],["text/163",[0,3.617,1,1.38,6,1.886,10,2.064,19,2.26,34,2.975,46,2.889,59,3.296,72,1.286,82,2.3,83,2.846,90,2.24,94,0.632,114,1.183,119,2.61,120,1.129,121,2.165,122,2.974,123,4.083,126,1.4,133,2.211,143,1.726,151,1.245,152,1.67,153,2.238,156,8.277,165,1.865,169,1.5,176,1.421,177,1.286,186,2.113,188,2.097,190,2.235,192,1.467,242,1.342,243,1.118,253,1.136,254,1.964,260,2.147,261,3.062,269,4.257,272,1.129,276,1.802,280,1.227,295,1.577,298,1.756,300,1.26,302,2.909,305,1.373,307,2.352,309,1.218,310,3.032,354,4.296,361,3.001,365,2.508,373,2.13,380,2.191,423,2.473,432,1.546,436,1.598,452,2.012,483,3.674,523,2.508,527,3.608,529,1.467,554,1.845,573,1.546,582,1.566,635,4.052,694,1.711,731,5.662,741,2.608,742,1.556,772,3.201,774,1.467,800,1.035,825,1.909,838,3.24,1030,1.598,1039,2.919,1077,2.614,1132,1.845,1185,1.697,1209,1.826,1345,1.566,1446,3.094,1500,4.899,1580,3.425,1731,2.042,2020,1.865,2172,4.267,2286,2.238,2290,4.063,2539,2.352,2902,3.24,3189,2.238,3676,2.614,3790,2.614,3802,5.97,4497,2.508,4671,2.423,6016,1.773,6021,2.012,6096,2.11,6147,2.291,6600,2.508,6617,2.757,6618,2.614,6619,4.623,6620,7.786,6621,4.623,6622,2.973,6623,2.973,6624,2.757,6625,2.757,6626,4.623,6627,2.973,6628,2.973,6629,2.973,6630,6.439,6631,2.973,6632,2.973,6633,2.973,6634,2.973,6635,4.986,6636,4.623,6637,2.973,6638,2.973,6639,4.986,6640,2.973,6641,2.973,6642,4.986,6643,2.973,6644,2.973,6645,2.973,6646,2.973,6647,2.973,6648,2.973,6649,2.973,6650,2.973,6651,2.973,6652,2.973,6653,2.973,6654,2.973,6655,2.973,6656,2.973,6657,2.973,6658,2.973,6659,2.973,6660,2.973]],["component/163",[1,0.349,18,0.6,46,0.58]],["title/164",[119,34.86,329,38.653,784,31.353]],["name/164",[120,0.536,121,0.612,6615,1.189]],["text/164",[1,0.625,46,1.04,119,3.848,120,0.902,276,1.488,283,5.099,356,1.124,440,2.971,571,4.997,749,2.541,784,3.461,837,2.169,851,8.486,899,2.455,6606,7.292,6607,10.102,6608,7.083,6609,7.602,6610,7.083,6611,8.044,6612,3.473,6613,3.62,6614,11.336,6661,4.117,6662,4.117,6663,4.117,6664,4.117,6665,6.501,6666,6.501,6667,6.501,6668,4.117,6669,4.117,6670,5.449,6671,6.501,6672,6.501,6673,4.117,6674,5.449,6675,5.449,6676,5.449,6677,5.449,6678,5.449,6679,4.117,6680,5.449,6681,4.117,6682,4.117,6683,4.117,6684,4.117,6685,4.117,6686,4.117,6687,4.117,6688,4.117,6689,4.117,6690,4.117,6691,4.117,6692,4.117,6693,4.117,6694,4.117,6695,5.449,6696,5.449,6697,5.449,6698,5.449,6699,5.449,6700,5.449,6701,5.449,6702,5.449,6703,5.449,6704,5.449,6705,5.449,6706,6.501,6707,5.449,6708,5.449,6709,6.501,6710,6.501,6711,6.501,6712,6.501,6713,6.501,6714,6.501,6715,6.501,6716,6.501,6717,6.501,6718,6.501,6719,6.501,6720,6.501,6721,5.449,6722,6.501,6723,2.376,6724,2.376,6725,2.376,6726,2.376,6727,2.376,6728,2.376,6729,2.376,6730,2.376,6731,2.376,6732,2.376,6733,2.376,6734,2.376,6735,2.376,6736,2.376,6737,2.376,6738,2.376,6739,2.376,6740,2.376]],["component/164",[1,0.349,18,0.6,46,0.58]],["title/165-1",[0,26.505,157,50.136,169,33.607]],["name/165-1",[]],["text/165-1",[]],["component/165-1",[]],["title/165-2",[0,26.505,94,14.156,157,50.136]],["name/165-2",[]],["text/165-2",[]],["component/165-2",[]],["title/165-3",[94,12.348,152,32.63,611,36.445,769,41.232]],["name/165-3",[]],["text/165-3",[]],["component/165-3",[]],["title/165-4",[94,10.95,152,28.935,254,20.29,6741,45.297,6742,47.767]],["name/165-4",[]],["text/165-4",[]],["component/165-4",[]],["title/165-5",[94,12.348,119,30.409,120,22.06,4774,49]],["name/165-5",[]],["text/165-5",[]],["component/165-5",[]],["title/165",[0,20.502,1,7.822,46,13.007,157,38.782,281,31.01]],["name/165",[120,0.536,121,0.612,296,1.062]],["text/165",[0,3.25,1,1.514,4,0.784,6,1.206,10,2.04,18,0.496,20,4.379,32,1.717,34,3.189,37,0.746,46,2.642,51,1.512,72,1.978,82,2.274,83,2.611,90,0.854,94,1.626,99,0.943,106,0.922,110,0.796,119,2.905,120,1.285,121,0.825,123,3.871,125,0.832,126,3.322,133,1.5,135,0.964,140,2.143,152,3.964,157,5.759,164,0.85,165,1.192,166,0.917,169,0.959,185,0.988,186,1.434,190,2.449,192,0.937,196,0.982,200,1.021,219,1.171,220,4.391,236,1.001,237,0.835,243,0.715,250,0.843,253,2.697,254,1.333,260,1.457,261,1.167,263,1.44,270,2.834,272,1.737,276,1.223,280,1.396,291,1.771,296,5.313,302,1.306,305,0.877,307,1.503,309,4.084,310,2.232,329,1.103,335,0.839,342,0.77,354,4.189,358,1.235,360,1.206,365,1.603,380,1.4,397,0.808,412,3.308,415,1.144,432,0.988,437,2.379,443,2.1,502,1.22,516,0.97,527,0.71,559,1.678,568,1.251,602,1.014,611,2.87,635,2.459,655,0.927,668,0.899,692,0.828,699,1.021,729,0.781,731,4.022,740,1.143,741,2.249,742,4.719,759,1.076,767,1.347,769,6.875,772,4.087,778,0.671,785,1.373,851,1.155,898,1.028,907,0.953,937,1.858,956,1.036,959,1.4,967,0.873,1019,1.167,1030,1.021,1039,1.981,1078,2.494,1104,1.093,1153,1.417,1169,1.4,1185,1.084,1270,2.199,1320,1.192,1358,1.844,1365,1.999,1448,1.144,1470,1.548,1507,1.326,1523,1.251,1575,1.112,1714,1.192,1731,1.305,1796,1.059,1852,1.036,1911,1.167,1945,2.757,1955,1.981,1962,1.22,1989,2.324,1994,2.1,2167,2.29,2496,1.762,2585,5.036,2794,1.43,2930,1.373,3189,3.443,3676,1.671,3910,1.603,4239,1.373,4389,1.603,4671,1.548,5349,1.762,5372,2.975,5497,1.373,5717,4.022,6096,5.009,6147,1.464,6471,1.762,6600,1.603,6616,1.548,6617,1.762,6618,1.671,6619,3.137,6620,10.086,6621,1.762,6624,1.762,6625,3.137,6626,5.147,6741,2.975,6742,7.571,6743,1.9,6744,3.384,6745,1.9,6746,1.9,6747,1.9,6748,1.9,6749,1.9,6750,1.9,6751,1.9,6752,1.9,6753,1.9,6754,1.9,6755,1.9,6756,1.9,6757,1.9,6758,1.9,6759,3.384,6760,1.9,6761,1.9,6762,1.9,6763,3.137,6764,1.9,6765,1.9,6766,1.9,6767,4.574,6768,1.9,6769,1.9,6770,1.9,6771,1.9,6772,1.9,6773,1.9,6774,1.9,6775,1.9,6776,1.9,6777,1.9,6778,3.384,6779,1.9,6780,3.384,6781,1.9,6782,3.384,6783,2.854,6784,1.9,6785,1.9,6786,5.551,6787,1.9,6788,1.9,6789,4.574,6790,1.9,6791,1.9,6792,1.9,6793,1.9,6794,1.9,6795,3.384,6796,1.9,6797,1.9,6798,1.9]],["component/165",[1,0.349,18,0.6,46,0.58]],["title/166-1",[1,8.821,46,14.668,311,36.859,445,26.457]],["name/166-1",[]],["text/166-1",[]],["component/166-1",[]],["title/166-2",[1,7.822,46,13.007,123,23.147,311,32.686,742,26.966]],["name/166-2",[]],["text/166-2",[]],["component/166-2",[]],["title/166",[1,7.822,46,13.007,120,19.562,121,22.368,311,32.686]],["name/166",[120,0.536,121,0.612,311,0.895]],["text/166",[1,1.537,2,1.438,9,2.503,18,1.301,21,1.596,26,2.103,34,2.769,37,1.955,46,2.293,48,1.873,51,3.002,59,1.955,60,1.475,82,1.779,86,2.97,88,2.942,90,3.384,119,3.942,120,4.342,123,5.138,152,2.797,186,2.111,190,4.244,199,2.776,219,1.724,225,2.047,233,5.67,242,2.248,251,2.891,253,1.904,272,1.891,276,1.8,298,4.449,310,3.029,311,3.16,354,1.833,375,3.279,379,3.838,397,3.205,445,5.81,502,3.197,527,1.861,528,2.471,559,2.471,570,4.334,588,2.471,591,2.311,635,2.677,662,2.499,697,2.659,710,2.607,729,3.733,741,2.018,742,5.299,750,2.735,766,3.675,772,3.197,851,6.951,956,4.105,963,3.823,968,2.942,987,3.476,1273,2.485,1712,3.125,1955,2.916,2902,3.237,5647,4.618,6016,5.415,6096,3.535,6152,3.94,6574,3.94,6577,4.379,6600,4.201,6799,4.618,6800,4.618,6801,4.981]],["component/166",[1,0.349,18,0.6,46,0.58]],["title/167-1",[34,15.889,123,26.102,219,20.107,502,37.295]],["name/167-1",[]],["text/167-1",[]],["component/167-1",[]],["title/167-2",[967,35.861,1842,55.373]],["name/167-2",[]],["text/167-2",[]],["component/167-2",[]],["title/167-3",[741,31.606,967,35.861]],["name/167-3",[]],["text/167-3",[]],["component/167-3",[]],["title/167",[120,29.626,121,33.875]],["name/167",[120,0.758,121,0.867]],["text/167",[0,2.378,1,1.75,2,1.321,4,1.107,10,1.915,19,1.217,21,2.537,28,0.678,34,3.152,37,1.795,46,3.118,48,1.009,51,1.512,60,0.795,73,1.053,78,1.703,82,1.633,83,1.532,94,0.57,98,1.283,99,1.331,106,1.303,110,1.915,111,1.414,119,4.143,120,4.093,121,3.063,122,2.112,123,5.178,126,1.263,127,1.211,133,2.649,140,2.799,152,4.445,155,2.935,156,1.816,165,1.684,186,1.137,189,1.245,190,2.99,196,1.387,219,2.442,225,1.88,236,2.409,244,1.026,247,1.463,250,1.19,253,1.026,254,2.353,276,0.97,277,1.873,280,1.107,281,3.596,296,3.442,302,1.765,306,1.923,310,1.079,311,3.79,318,1.156,330,1.043,335,1.185,342,1.087,354,0.988,356,1.27,361,1.615,363,4.043,366,4.497,373,1.953,375,5.671,378,3.524,382,3.305,413,1.94,423,1.331,425,1.124,436,1.443,437,1.396,440,1.463,443,1.665,445,4.187,482,2.123,502,5.53,506,4.24,507,3.141,514,1.339,523,2.264,527,2.233,556,2.123,557,3.191,578,1.873,611,1.684,616,1.843,623,2.589,662,4.322,701,1.405,740,0.906,741,3.206,742,2.393,759,2.589,769,1.905,772,6.92,785,1.94,821,1.283,839,1.228,851,1.631,854,2.529,856,1.19,870,1.585,907,2.294,945,1.791,956,1.463,963,2.321,982,1.519,1039,2.677,1075,1.362,1104,1.544,1117,1.387,1122,1.684,1153,2.503,1180,1.744,1270,1.744,1353,1.94,1448,1.615,1456,3.305,1509,1.978,1582,2.187,1833,1.558,1961,2.61,1994,1.665,2031,2.02,2247,1.507,2560,2.726,5470,1.843,5497,1.94,6021,1.816,6096,5.007,6127,3.37,6129,3.442,6144,2.123,6307,2.187,6589,4.02,6590,2.36,6594,2.36,6596,2.488,6597,2.488,6616,3.726,6783,2.264,6802,2.684]],["component/167",[1,0.349,18,0.6,46,0.58]],["title/168",[83,53.744]],["name/168",[3,1.478]],["text/168",[0,4.352,1,2.013,10,1.87,37,2.29,46,3.232,51,2.799,59,2.29,60,2.507,71,2.522,83,3.329,87,5.888,88,5.888,118,2.645,119,3.053,120,5.203,121,5.949,151,2.444,152,4.756,156,5.73,157,6.374,222,3.329,225,3.481,228,5.436,287,2.554,332,2.609,354,3.116,412,3.661,462,3.947,502,5.436,507,5.816,528,2.894,575,2.72,623,3.302,680,4.753,768,4.35,1212,3.357,1400,4.615,1580,4.007,2497,7.851,6306,6.698]],["component/168",[1,0.349,18,0.6,46,0.58]],["title/169-1",[94,16.583,412,33.736]],["name/169-1",[]],["text/169-1",[]],["component/169-1",[]],["title/169-2",[958,48.416,6803,68.6]],["name/169-2",[]],["text/169-2",[]],["component/169-2",[]],["title/169",[507,64.682]],["name/169",[507,2.348]],["text/169",[1,1.883,2,0.697,4,1.723,14,1.634,15,1.028,16,1.659,26,2.33,34,3.289,37,2.166,46,3.157,52,0.761,54,0.996,60,1.237,73,2.166,82,1.492,86,1.44,90,1.877,94,0.513,98,1.154,99,1.198,118,1.894,120,1.586,121,1.049,122,2.548,125,1.057,126,3.095,133,3.605,135,2.12,140,1.131,153,1.818,162,1.685,163,1.346,169,1.219,170,1.659,175,2.031,186,1.024,193,3.92,201,0.971,206,3.644,239,1.105,242,1.885,243,2.076,244,1.596,246,1.454,260,5.116,263,1.028,269,1.131,272,2.82,276,1.509,277,1.685,281,3.322,285,1.307,287,3.56,293,1.289,301,1.91,308,3.357,310,3.507,311,1.532,330,0.938,342,2.663,348,1.745,354,2.419,361,5.811,363,2.426,397,1.777,412,2.843,452,1.634,462,1.634,506,8.318,507,6.889,511,1.172,513,1.468,529,1.191,556,1.91,557,1.685,561,1.454,623,3.722,662,3.299,676,2.826,680,6.625,698,1.357,710,1.264,741,0.978,749,1.126,753,1.172,772,2.681,778,0.853,833,2.964,834,1.198,836,1.241,839,1.105,895,2.365,962,4.64,969,1.219,971,3.61,1010,6.625,1044,1.191,1155,1.1,1188,1.91,1339,1.91,1389,1.745,1420,4.788,1444,3.672,1498,3.682,1571,2.172,1580,1.659,1841,1.241,1870,1.317,1930,2.964,1990,1.685,2039,1.219,2087,1.968,2201,1.59,2235,1.818,2560,1.44,2900,1.634,4708,1.818,5441,1.861,6021,1.634,6042,1.78,6144,3.304,6306,1.91,6803,2.124,6804,3.672,6805,2.239,6806,2.124,6807,2.415,6808,8.551,6809,5.519,6810,2.239,6811,6.096,6812,2.124,6813,2.415,6814,2.415,6815,2.415,6816,5.519,6817,3.873,6818,5.117,6819,2.239,6820,2.239,6821,2.415,6822,2.415,6823,2.239,6824,2.415]],["component/169",[1,0.349,18,0.6,46,0.58]],["title/170-1",[701,49.291]],["name/170-1",[]],["text/170-1",[]],["component/170-1",[]],["title/170-2",[94,20.016]],["name/170-2",[]],["text/170-2",[]],["component/170-2",[]],["title/170-3",[210,69.398]],["name/170-3",[]],["text/170-3",[]],["component/170-3",[]],["title/170",[126,36.73,616,53.59]],["name/170",[126,0.94,616,1.372]],["text/170",[1,1.389,7,1.813,9,1.001,10,0.965,15,2.145,32,2.558,34,2.313,46,2.31,59,1.182,60,1.924,69,1.957,70,1.779,71,1.302,82,1.8,85,1.779,87,5.738,94,2.64,119,5.541,123,2.92,126,6.201,133,1.336,163,1.679,172,1.827,176,1.439,188,3.557,190,2.256,192,1.486,196,1.557,210,6.233,219,1.744,236,1.587,239,1.378,245,1.238,247,5.77,260,4.183,269,3.045,272,2.886,276,1.088,283,1.679,285,1.63,287,4.915,290,1.889,294,4.449,300,2.136,302,3.265,305,2.328,308,2.574,310,1.211,317,3.005,330,1.17,332,1.347,344,2.162,354,2.392,397,1.282,417,1.529,435,2.574,437,1.567,438,3.001,439,2.434,445,1.372,449,1.666,511,1.462,527,1.126,528,1.494,559,1.494,571,2.529,573,1.567,580,1.557,609,1.597,616,7.891,658,1.547,697,3.47,698,4.751,703,2.853,711,1.733,712,1.957,729,2.072,766,1.47,776,1.63,780,2.673,809,1.831,834,1.494,836,1.547,837,1.587,852,3.363,907,1.511,935,1.889,956,1.642,969,1.52,996,2.038,1059,1.359,1060,2.267,1320,1.889,1322,5.141,1365,2.978,1428,2.138,1434,1.933,1520,2.138,1760,1.587,1866,2.069,2039,1.52,2467,2.382,2762,2.177,5200,4.574,5969,6.022,6016,1.796,6098,3.517,6128,4.536,6170,2.793,6171,4.432,6172,4.673,6173,2.54,6174,2.793,6175,2.54,6176,2.793,6177,1.911]],["component/170",[1,0.349,18,0.6,46,0.58]],["title/171-1",[515,46.963,1212,44.898]],["name/171-1",[]],["text/171-1",[]],["component/171-1",[]],["title/171-2",[1117,48.674]],["name/171-2",[]],["text/171-2",[]],["component/171-2",[]],["title/171-3",[120,29.626,121,33.875]],["name/171-3",[]],["text/171-3",[]],["component/171-3",[]],["title/171-4",[21,30.183]],["name/171-4",[]],["text/171-4",[]],["component/171-4",[]],["title/171-5",[123,42.31]],["name/171-5",[]],["text/171-5",[]],["component/171-5",[]],["title/171-6",[844,45.71]],["name/171-6",[]],["text/171-6",[]],["component/171-6",[]],["title/171-7",[60,27.883]],["name/171-7",[]],["text/171-7",[]],["component/171-7",[]],["title/171-8",[126,44.332]],["name/171-8",[]],["text/171-8",[]],["component/171-8",[]],["title/171-9",[269,36.55,294,45.679]],["name/171-9",[]],["text/171-9",[]],["component/171-9",[]],["title/171-10",[188,39.6]],["name/171-10",[]],["text/171-10",[]],["component/171-10",[]],["title/171-11",[298,55.63]],["name/171-11",[]],["text/171-11",[]],["component/171-11",[]],["title/171",[21,21.347,821,31.828,982,37.703]],["name/171",[21,0.452,821,0.674,982,0.798]],["text/171",[1,1.363,5,2.211,10,1.193,15,0.699,16,0.405,18,2.646,19,0.515,21,2.945,28,1.185,34,1.018,37,0.645,45,0.633,46,2.369,48,1.4,54,0.243,60,2.278,73,1.596,82,1.878,83,0.337,87,0.348,88,0.348,90,0.951,94,0.632,98,3.818,102,4.091,109,0.394,110,3.156,119,3.858,120,1.128,121,0.714,123,3.235,125,2.182,126,3.547,133,0.504,140,0.532,149,0.778,152,0.331,165,5.184,169,0.573,172,0.596,175,2.121,177,0.491,184,0.271,186,1.259,188,4.892,189,0.527,190,4.435,192,0.811,200,0.317,201,0.661,203,0.348,206,1.255,219,1.162,222,1.208,225,0.242,236,2.625,242,0.266,244,0.628,245,0.87,247,4.505,252,0.519,253,0.225,254,0.647,260,1.446,261,0.698,263,0.251,269,4.989,272,3.526,276,1.214,280,0.243,281,2.447,285,1.146,287,5.077,293,0.878,294,6.2,297,2.657,298,5.752,302,1.437,306,0.478,311,0.721,318,0.912,320,0.909,330,0.441,332,1.502,334,1.435,335,0.502,342,0.239,345,0.638,350,0.584,352,0.629,356,0.279,358,0.383,361,0.989,363,2.426,366,4.845,373,0.702,375,3.09,376,3.472,378,1.631,379,0.876,380,0.837,382,2.147,388,0.252,397,0.901,398,0.345,413,5.972,422,0.444,423,0.564,425,0.247,432,0.591,439,0.285,440,0.619,445,2.138,450,1.785,452,0.399,456,0.412,482,4.364,504,0.912,506,0.419,507,0.405,513,0.359,515,0.355,527,0.614,528,0.293,529,1.044,559,0.293,571,0.296,573,1.331,578,1.785,582,0.599,594,3.234,623,0.643,655,0.288,658,0.844,660,1.971,662,1.491,673,0.362,676,0.399,694,0.654,724,0.78,729,1.221,735,0.345,740,0.199,741,3.722,749,0.53,753,0.552,767,0.235,768,0.303,772,0.729,816,0.345,820,0.345,821,0.786,834,0.293,837,0.311,839,0.27,844,1.027,851,1.287,856,0.729,864,1.138,870,5.367,895,1.198,898,0.89,899,0.677,907,0.57,962,0.648,967,4.781,974,1.806,982,2.108,1007,0.497,1013,1.656,1014,5.044,1016,1.593,1039,0.962,1059,0.266,1075,1.508,1081,0.758,1084,1.861,1103,0.899,1117,2.979,1125,2.35,1136,1.405,1150,0.326,1153,3.806,1177,0.855,1194,0.291,1196,0.677,1212,0.339,1216,0.334,1292,0.467,1320,0.713,1348,3.029,1353,0.821,1418,0.482,1456,2.69,1575,0.665,1582,0.481,1760,0.311,1762,0.671,1833,0.342,1842,5.231,1853,1.009,1866,0.405,1879,0.958,1911,0.698,1927,0.519,1955,0.665,1969,0.497,1982,0.481,2039,0.298,2247,0.638,2398,0.426,2667,0.821,3113,0.455,4010,3.576,5407,0.497,5408,0.519,5470,0.405,5497,3.601,5566,0.455,5568,3.702,5969,0.748,6052,1.054,6067,0.806,6073,0.497,6096,0.806,6123,0.958,6126,0.958,6127,0.837,6128,1.785,6129,2.803,6133,0.958,6136,2.249,6144,0.467,6159,1.445,6167,0.467,6258,1.816,6412,0.497,6415,1.963,6416,1.054,6417,1.054,6418,1.054,6419,1.054,6420,1.054,6421,1.054,6501,0.547,6589,0.519,6590,0.519,6594,0.999,6606,0.958,6607,0.999,6608,0.999,6609,0.999,6610,0.999,6611,0.999,6612,0.958,6613,0.999,6614,0.958,6783,0.497,6825,0.59,6826,0.59,6827,0.59,6828,0.481,6829,0.59,6830,1.136,6831,0.59]],["component/171",[1,0.349,18,0.6,46,0.58]],["title/172-1",[94,16.583,260,33.599]],["name/172-1",[]],["text/172-1",[]],["component/172-1",[]],["title/172-2",[21,25.007,982,44.169]],["name/172-2",[]],["text/172-2",[]],["component/172-2",[]],["title/172-3",[127,35.211,442,55.373]],["name/172-3",[]],["text/172-3",[]],["component/172-3",[]],["title/172-4",[511,45.71]],["name/172-4",[]],["text/172-4",[]],["component/172-4",[]],["title/172-5",[94,16.583,310,31.38]],["name/172-5",[]],["text/172-5",[]],["component/172-5",[]],["title/172",[310,31.38,583,33.463]],["name/172",[94,0.727]],["text/172",[1,1.19,3,3.673,5,0.317,15,1.064,16,0.331,19,0.423,21,1.996,22,0.275,26,0.203,28,1.882,29,0.829,34,1.603,38,0.846,46,2.194,48,0.663,59,1.476,60,0.74,66,0.499,72,0.404,73,2.061,80,0.855,83,0.275,90,1.123,94,0.737,95,2.371,96,0.423,98,1.357,103,0.29,106,0.234,110,0.57,114,1.909,118,1.573,120,0.813,121,1.085,122,0.431,125,0.211,126,1.633,127,0.614,133,1.259,135,0.474,142,0.255,147,0.203,152,0.271,155,0.309,164,0.418,165,0.302,169,0.686,172,0.493,175,1.583,188,1.459,189,1.16,190,1.402,192,0.671,193,1.693,197,0.863,200,0.259,201,0.376,203,0.803,206,1.227,219,0.741,226,0.293,227,0.282,232,0.334,239,0.22,241,0.827,243,0.663,244,0.357,245,1.167,247,1.891,251,1.648,253,1.085,254,1.794,260,4.499,261,3.714,263,0.205,264,0.188,269,0.637,272,1.533,273,0.306,275,0.821,276,1.026,277,0.652,279,0.523,280,0.199,281,0.29,283,0.521,287,3.08,288,1.358,289,0.788,291,2.859,292,0.317,293,2.297,294,2.031,295,0.255,297,0.381,298,1.477,300,0.576,302,2.187,305,0.814,306,0.572,307,0.381,308,2.197,309,1.295,310,0.709,311,0.863,317,1.05,318,1.077,320,0.752,323,2.006,329,2.497,330,0.685,332,0.215,337,0.348,342,1.523,344,0.918,346,0.234,347,0.712,352,2.904,354,2.292,356,0.442,358,0.313,361,1.904,363,0.775,380,0.355,396,0.688,412,3.439,415,0.819,417,0.474,421,0.252,423,2.26,432,1.114,435,0.477,438,1.602,440,0.263,442,0.965,445,1.138,452,2.14,479,3.201,506,0.342,507,1.471,511,0.234,517,0.299,527,0.508,530,0.603,533,0.275,536,0.273,559,0.874,560,0.227,571,1.74,576,0.682,578,0.652,580,0.249,583,1.356,591,2.333,592,0.293,613,1.882,614,0.788,623,2.129,625,0.348,629,0.355,635,1.151,642,1.031,646,0.326,648,2.11,655,2.764,658,0.48,662,0.682,674,0.287,676,0.326,679,0.6,689,0.663,692,3.908,693,5.101,694,1.634,698,0.525,703,1.608,704,0.268,708,0.336,717,0.326,728,0.282,729,0.198,735,0.282,740,0.163,741,1.15,743,1.964,754,0.679,759,1.964,761,0.251,763,2.642,764,1.105,772,0.6,780,0.495,784,1.337,800,2.548,805,0.562,810,0.285,811,0.259,816,0.547,817,0.29,826,0.249,828,0.6,831,0.406,833,3.054,835,0.355,836,0.247,838,0.607,839,2.592,844,1.378,846,1.05,849,0.688,856,2.682,858,0.821,860,0.632,861,0.23,862,2.082,865,0.506,866,1.048,870,0.285,871,1.082,889,1.802,895,0.273,939,0.234,952,0.254,955,3.23,962,1.222,967,0.429,971,0.513,973,0.543,982,0.273,985,0.331,988,1.3,995,2.037,1002,1.196,1010,0.392,1014,0.58,1024,2.408,1030,0.259,1059,0.217,1062,1.568,1073,0.29,1075,0.69,1101,0.342,1102,0.355,1104,1.232,1151,0.372,1155,0.219,1156,0.211,1177,1.326,1187,0.277,1201,0.261,1209,1.315,1216,0.273,1217,1.776,1233,0.675,1273,0.466,1303,0.251,1345,0.254,1352,0.355,1354,3.378,1358,2.977,1362,0.28,1381,0.652,1399,1.282,1420,0.747,1444,0.821,1446,0.58,1466,0.293,1471,0.287,1498,0.623,1507,0.652,1509,0.355,1520,0.965,1571,1.477,1575,2.202,1580,0.331,1600,0.982,1641,0.406,1648,0.77,1652,0.607,1691,0.293,1707,0.675,1713,3.218,1737,4.175,1740,4.445,1741,0.326,1746,0.92,1758,0.506,1761,0.321,1762,0.285,1777,0.326,1833,0.28,1858,0.326,1903,0.336,1931,0.296,1944,3.998,1953,0.381,1992,0.593,2018,0.703,2024,0.688,2040,0.348,2043,2.611,2046,0.593,2054,0.348,2089,0.355,2093,0.392,2119,1.024,2172,0.997,2218,0.326,2238,4.862,2247,0.271,2268,0.371,2272,0.474,2305,1.192,2312,0.965,2375,1.298,2398,0.675,2467,0.381,2571,0.371,2649,0.363,2709,0.336,2742,0.371,2762,1.547,2792,0.326,2794,0.363,2797,2.198,2807,0.739,2813,1.298,2817,0.983,2884,0.392,2930,2.507,2961,1.147,3023,0.381,3137,0.447,3140,0.406,3150,0.381,3222,0.447,3290,0.306,3399,3.43,3498,3.404,3710,0.447,3804,0.423,3805,0.423,4186,4.616,4239,0.675,4267,1.435,4268,6.001,4280,0.675,4281,2.198,4531,0.423,4605,0.392,4613,1.261,4620,0.688,4621,0.788,4648,1.774,4708,0.363,4711,1.486,4713,1.927,4763,1.196,4886,0.326,5079,3.064,5223,0.406,5405,0.392,5407,0.788,5432,0.447,5469,0.72,5470,0.934,5510,0.423,5644,0.447,5839,1.196,5969,0.895,6042,0.355,6046,0.392,6054,1.196,6068,1.409,6098,1.982,6100,5.388,6103,0.447,6134,0.688,6167,0.381,6190,0.423,6192,0.447,6205,0.866,6379,0.739,6384,0.447,6387,0.423,6389,1.633,6390,0.406,6391,0.788,6392,0.447,6393,0.866,6394,3.744,6395,2.318,6397,0.447,6399,0.447,6400,0.406,6401,1.261,6424,0.447,6425,0.447,6430,0.866,6453,0.447,6464,1.196,6491,0.866,6551,1.985,6555,0.447,6556,0.447,6559,2.318,6806,0.821,6808,1.633,6810,0.447,6811,1.633,6812,0.423,6817,0.447,6818,1.261,6823,0.447,6832,0.482,6833,0.482,6834,0.482,6835,0.423,6836,0.482,6837,0.482,6838,0.482,6839,0.482,6840,0.482,6841,0.482,6842,0.482,6843,0.482,6844,0.482,6845,0.482,6846,0.447,6847,0.406,6848,0.482,6849,1.633,6850,0.866,6851,1.762,6852,0.934,6853,0.482,6854,0.482,6855,0.934,6856,0.934,6857,0.482,6858,0.482,6859,0.934,6860,0.482,6861,0.482,6862,0.482,6863,0.482,6864,0.934,6865,0.688,6866,0.934,6867,0.934,6868,0.482,6869,1.762,6870,1.806,6871,0.482,6872,0.934,6873,0.482,6874,0.482,6875,0.934,6876,0.482,6877,0.934,6878,0.482,6879,0.482,6880,0.482,6881,0.482,6882,0.482,6883,0.482,6884,0.482,6885,0.482,6886,0.482,6887,0.482,6888,2.5,6889,1.36,6890,0.482,6891,0.482,6892,0.482,6893,0.482,6894,0.482,6895,0.482,6896,0.482,6897,0.934,6898,0.482,6899,0.482,6900,0.934,6901,0.482,6902,0.482,6903,0.482,6904,0.482,6905,0.482,6906,0.482,6907,0.482,6908,0.482,6909,1.762,6910,0.482,6911,0.482,6912,0.482,6913,0.482,6914,0.934,6915,0.934,6916,0.934,6917,0.482,6918,0.934,6919,1.36,6920,1.36,6921,0.482,6922,0.447,6923,0.482,6924,1.196,6925,2.141,6926,0.423,6927,0.482,6928,0.482,6929,1.261,6930,0.934,6931,0.482,6932,0.482,6933,0.482,6934,1.147,6935,0.482,6936,0.482,6937,0.482,6938,0.482,6939,0.482,6940,0.482,6941,0.482,6942,0.406,6943,0.482,6944,1.36,6945,0.934,6946,0.934,6947,0.934,6948,0.934,6949,1.762,6950,0.482,6951,0.482,6952,0.482,6953,0.482,6954,0.482,6955,1.633,6956,0.482,6957,0.482,6958,0.934,6959,0.482,6960,0.482,6961,0.934,6962,0.482,6963,0.482,6964,0.482,6965,0.482,6966,0.482,6967,0.482,6968,0.934,6969,0.934,6970,0.482,6971,1.36,6972,0.482,6973,0.482,6974,0.934,6975,0.482,6976,0.934,6977,0.482]],["component/172",[1,0.349,18,0.6,46,0.58]],["title/173-1",[28,16.815,858,25.537,6016,39.709]],["name/173-1",[]],["text/173-1",[]],["component/173-1",[]],["title/173-2",[188,32.809,6016,46.518]],["name/173-2",[]],["text/173-2",[]],["component/173-2",[]],["title/173-3",[269,31.2,294,38.992,6016,39.709]],["name/173-3",[]],["text/173-3",[]],["component/173-3",[]],["title/173-4",[60,23.101,6016,46.518]],["name/173-4",[]],["text/173-4",[]],["component/173-4",[]],["title/173-5",[123,35.054,6016,46.518]],["name/173-5",[]],["text/173-5",[]],["component/173-5",[]],["title/173",[51,25.79,623,44.169]],["name/173",[51,0.66,623,1.13]],["text/173",[10,3.288,28,2.659,29,5.936,34,0.598,36,1.547,60,2.947,72,0.946,82,0.781,94,0.465,110,4.17,119,1.145,123,3.451,126,1.804,172,1.853,175,1.41,186,1.624,188,4.314,190,1.774,206,3.769,219,2.658,226,2.329,239,1.001,242,2.307,244,0.836,245,0.899,254,2.749,269,4.504,272,2.65,279,1.967,287,3.363,294,5.628,306,0.92,310,1.541,354,0.805,356,1.035,363,2.699,412,0.946,432,3.193,436,3.752,445,2.796,504,4.287,528,3.462,573,3.193,591,1.015,655,1.87,688,1.062,722,1.056,729,2.102,784,3.616,824,1.292,829,3.006,858,4.131,870,5.451,898,1.184,937,1.201,955,3.876,996,1.48,1013,2.135,1021,1.201,1151,0.87,1418,5.443,1448,2.306,1540,1.219,1777,4.723,1841,4.251,1956,2.632,2052,1.502,2683,2.824,2964,2.884,3290,5.25,4640,1.782,5211,1.923,5212,3.369,6258,3.629,6978,2.187,6979,12.844,6980,2.187,6981,2.187,6982,3.831,6983,2.187,6984,6.139,6985,2.187,6986,2.187,6987,2.187,6988,2.187,6989,2.187,6990,2.187,6991,10.53,6992,2.187,6993,2.187,6994,2.187,6995,3.831,6996,2.187,6997,2.187,6998,2.187,6999,2.187,7000,2.187,7001,2.187,7002,2.187,7003,2.187,7004,3.831,7005,2.187,7006,2.187,7007,2.187,7008,2.187,7009,2.187,7010,2.187,7011,2.187,7012,2.187,7013,2.187,7014,3.831,7015,2.187,7016,3.831,7017,2.187,7018,2.187,7019,2.028,7020,2.187,7021,2.187,7022,2.187,7023,2.187,7024,2.187,7025,2.187]],["component/173",[1,0.349,18,0.6,46,0.58]],["title/174",[94,20.016]],["name/174",[3,1.478]],["text/174",[7,3.511,10,1.87,21,1.87,26,2.463,28,2.138,38,2.802,51,2.799,60,2.951,73,2.29,83,3.329,94,2.817,95,1.793,120,3.785,121,4.328,123,4.478,126,5.703,147,3.561,190,4.95,247,3.18,260,2.512,287,2.554,291,3.053,294,6.403,308,2.979,310,2.346,332,2.609,361,3.511,452,3.947,507,4.007,527,3.725,583,3.632,616,4.007,623,3.302,698,4.756,741,4.038,743,3.302,768,2.997,821,2.788,963,2.961,969,2.944,982,3.302,1212,3.357,1320,3.66,2398,4.216,6162,9.242,6379,4.615]],["component/174",[1,0.349,18,0.6,46,0.58]],["title/175",[51,25.79,963,39.602]],["name/175",[51,0.66,963,1.014]],["text/175",[1,1.307,10,2.759,46,2.174,51,3.654,60,3.273,94,1.83,110,3.606,123,4.966,126,5.204,188,4.648,201,3.462,206,4.224,253,3.29,332,3.851,417,4.37,425,3.606,528,4.27,654,6.308,880,4.396,963,4.37,1039,5.04,4886,8.717,7026,8.609,7027,8.609,7028,8.609,7029,8.609,7030,8.609,7031,8.609]],["component/175",[1,0.349,18,0.6,46,0.58]],["title/176-1",[823,50.087,964,37.286]],["name/176-1",[]],["text/176-1",[]],["component/176-1",[]],["title/176",[964,37.286,2803,58.734]],["name/176",[964,0.954,2803,1.503]],["text/176",[1,1.652,5,4.304,10,0.768,15,2.782,21,2.944,28,0.605,34,1.5,36,3.882,38,1.151,46,2.806,52,0.754,60,2.188,73,0.94,75,1.345,80,2.611,90,1.076,93,3.61,94,0.509,95,0.736,99,1.188,110,1.737,114,1.65,118,1.88,121,1.801,123,1.863,125,1.049,126,3.81,127,1.081,142,1.27,149,1.962,152,2.329,153,1.803,164,1.071,186,1.015,188,1.744,190,1.903,196,1.238,201,2.972,203,1.415,225,0.985,232,1.481,244,2.499,245,0.985,247,2.989,250,2.432,254,3.618,260,1.031,264,0.937,269,3.063,272,0.91,276,1.982,277,1.671,281,3.301,287,4.521,291,1.254,293,1.279,294,5.084,300,1.758,302,0.924,305,3.412,308,3.338,309,2.246,310,1.668,311,2.631,317,2.473,318,1.031,332,1.855,342,0.97,345,1.345,350,1.23,354,0.881,360,3.479,419,1.296,504,2.362,529,5.682,569,1.325,575,1.117,583,1.027,605,2.02,613,1.803,640,2.02,662,1.202,692,1.808,697,1.279,708,2.894,710,1.254,743,1.356,749,1.933,754,2.075,759,3.701,761,2.157,767,2.602,768,1.23,778,0.846,789,1.169,800,3.197,816,6.845,820,1.402,822,2.894,823,5.574,839,1.897,840,2.767,842,2.106,844,2.013,895,1.356,912,2.106,937,1.315,964,4.777,969,1.209,989,1.296,1024,3.27,1039,3.211,1055,2.221,1081,1.598,1104,1.378,1117,1.238,1132,1.486,1181,1.846,1207,1.765,1240,1.803,1273,1.195,1334,1.731,1353,1.731,1358,1.306,1362,5.039,1378,1.803,1381,1.671,1418,1.758,1656,2.767,1760,1.262,1858,5.476,1992,1.52,2089,1.765,2093,3.379,2218,1.621,2632,2.106,2803,4.128,2838,2.02,2840,2.221,2892,1.895,2895,2.221,4648,1.7,4708,1.803,6046,1.952,6098,2.894,6128,1.671,7032,2.395,7033,3.845,7034,2.395,7035,2.221,7036,2.395,7037,2.395,7038,2.395,7039,2.395,7040,5.484,7041,2.395,7042,2.395,7043,2.395,7044,2.395,7045,2.395]],["component/176",[1,0.349,18,0.6,46,0.58]],["title/177-1",[21,21.347,80,26.598,844,32.327]],["name/177-1",[]],["text/177-1",[]],["component/177-1",[]],["title/177-2",[80,26.598,800,23.18,844,32.327]],["name/177-2",[]],["text/177-2",[]],["component/177-2",[]],["title/177-3",[28,16.815,73,26.141,844,32.327]],["name/177-3",[]],["text/177-3",[]],["component/177-3",[]],["title/177-4",[844,37.871,1940,43.157]],["name/177-4",[]],["text/177-4",[]],["component/177-4",[]],["title/177-5",[60,19.72,254,26.231,844,32.327]],["name/177-5",[]],["text/177-5",[]],["component/177-5",[]],["title/177-6",[202,53.59,844,37.871]],["name/177-6",[]],["text/177-6",[]],["component/177-6",[]],["title/177",[1,10.112,46,16.815,844,32.327]],["name/177",[1,0.214,46,0.356,844,0.685]],["text/177",[1,1.216,8,1.147,10,0.588,21,2.567,28,2.022,46,2.548,60,1.601,80,0.732,110,0.768,152,1.03,163,1.022,172,2.502,192,3.405,200,0.986,201,0.738,202,3.053,206,0.9,225,0.754,232,4.074,254,2.13,272,2.621,276,0.663,287,0.803,293,5.836,301,1.451,302,0.708,305,0.847,310,0.738,344,0.787,347,5.722,354,0.675,355,3.763,356,1.551,412,0.793,417,1.664,421,0.96,440,1,569,1.014,571,4.786,576,0.92,655,4.325,692,5.813,705,1.612,735,1.074,748,3.321,754,1.716,759,3.062,800,3.32,810,4.078,824,1.083,837,0.966,844,4.771,861,3.828,895,3.519,952,1.727,964,0.876,973,3.199,988,2.813,1013,1.022,1028,1.074,1187,2.558,1217,3.038,1358,5.026,1399,3.115,1540,1.022,1940,1.014,2100,5.46,2147,6.663,2215,1.993,2375,7.243,2817,2.369,2899,8.908,2900,7.137,2987,2.671,3000,1.7,4789,1.612,5486,1.413,7035,1.7,7046,3.278,7047,3.278,7048,3.278,7049,3.278,7050,6.903,7051,3.278,7052,1.834,7053,1.834,7054,3.278,7055,3.278,7056,3.278,7057,3.278,7058,3.278,7059,3.278,7060,3.278,7061,3.278,7062,1.834,7063,1.834,7064,3.278,7065,3.278,7066,5.408,7067,1.834,7068,5.408,7069,5.408,7070,3.278,7071,3.278,7072,3.278,7073,3.278,7074,1.834,7075,1.834,7076,1.834,7077,1.834,7078,1.834,7079,1.834,7080,1.834,7081,1.834,7082,1.834,7083,1.834,7084,3.278,7085,3.278,7086,3.278,7087,3.278,7088,1.834,7089,1.834,7090,1.834,7091,1.834,7092,1.834,7093,1.834,7094,1.834,7095,1.834,7096,1.834,7097,1.834,7098,1.834,7099,1.834,7100,1.834,7101,1.834,7102,1.834,7103,1.834,7104,1.834,7105,1.834,7106,1.834,7107,1.834,7108,1.834,7109,1.834,7110,1.834,7111,1.834,7112,1.834,7113,1.834,7114,1.834,7115,1.834,7116,1.834,7117,1.834,7118,1.834,7119,1.834,7120,1.834,7121,1.834,7122,1.834,7123,1.834,7124,1.834,7125,1.834,7126,1.834,7127,1.834,7128,1.834,7129,1.834,7130,1.834,7131,1.834,7132,1.834,7133,1.834,7134,1.834,7135,1.834,7136,1.834,7137,1.834,7138,1.834]],["component/177",[1,0.349,18,0.6,46,0.58]],["title/178",[4952,72.57]],["name/178",[4952,2.635]],["text/178",[1,1.693,9,2.383,10,2.298,34,1.961,46,2.815,54,4.04,60,2.123,82,2.561,90,3.221,98,3.426,106,3.48,110,3.003,126,4.61,127,3.236,188,3.015,201,2.884,232,2.561,260,4.802,269,3.359,276,2.591,287,3.139,291,3.753,293,5.228,294,5.733,305,3.311,330,2.786,576,3.597,583,3.075,767,4.992,786,6.648,816,5.733,823,4.603,844,3.48,852,4.784,858,2.749,948,5.284,952,3.777,964,3.426,977,4.603,1039,4.198,1540,3.996,1713,3.937,1746,4.852,2238,4.449,6147,7.546,7033,6.648,7139,7.17,7140,7.17]],["component/178",[1,0.349,18,0.6,46,0.58]],["title/179",[623,44.169,844,37.871]],["name/179",[623,1.13,844,0.969]],["text/179",[1,1.444,46,2.401,82,2.454,120,3.611,133,6.013,210,8.674,260,2.959,272,4.141,276,2.483,277,4.796,302,2.652,309,2.814,310,3.825,354,4.013,361,5.725,436,5.112,562,3.86,623,5.384,662,3.448,766,4.641,775,4.264,844,4.616,895,3.89,964,4.545,1322,5.436,1575,7.235,2838,5.796,2962,10.349,7141,6.872,7142,10.906,7143,6.872,7144,9.51,7145,9.51,7146,6.872,7147,6.872]],["component/179",[1,0.349,18,0.6,46,0.58]],["title/180",[749,36.374,3399,58.734]],["name/180",[749,0.931,3399,1.503]],["text/180",[1,1.887,2,3.004,10,2.239,34,1.235,45,2.516,46,2.627,51,2.309,52,1.422,54,1.863,60,1.337,61,2.772,71,1.952,82,1.612,90,2.028,94,2.211,114,1.797,133,4.613,151,1.891,172,1.636,175,2.571,176,2.158,184,3.211,190,4.392,192,2.227,200,2.427,201,1.816,254,4.097,276,2.525,280,2.882,302,2.696,310,1.816,373,1.929,412,1.952,436,2.427,462,3.055,517,2.802,521,2.802,533,2.577,553,2.898,554,2.802,592,2.744,623,3.955,626,5.259,710,2.363,722,2.18,734,2.744,749,4.85,759,2.556,768,2.319,778,1.594,782,3.327,806,2.479,809,2.744,834,2.24,839,2.065,881,1.725,905,2.898,947,2.643,962,2.577,1104,2.598,1151,1.797,1155,3.182,1156,1.977,1199,2.898,1273,2.252,1339,3.571,1404,2.292,1418,1.913,1571,2.348,1762,2.667,1810,3.479,1841,2.319,1897,3.399,1944,2.898,1984,2.864,2709,4.875,3148,3.327,3245,5.892,3290,2.864,3399,8.636,3818,4.186,4281,3.969,4386,3.571,5246,3.479,5759,3.969,7148,4.515,7149,4.515,7150,4.515,7151,4.515,7152,4.515,7153,6.986,7154,4.515,7155,4.515,7156,6.986,7157,4.515,7158,4.515]],["component/180",[1,0.349,18,0.6,46,0.58]],["title/181",[749,43.902]],["name/181",[3,1.478]],["text/181",[10,2.699,95,2.589,111,4.436,190,2.923,222,4.806,247,7.213,310,3.387,334,5.262,354,3.099,397,3.583,534,5.406,623,4.767,697,4.496,743,4.767,749,5.633,767,3.351,823,5.406,844,5.864,869,6.915,964,4.024,1357,7.404,1466,5.119,2803,6.339,3399,6.339,4895,7.404,6144,6.661,7159,8.421,7160,8.421]],["component/181",[1,0.349,18,0.6,46,0.58]],["title/182",[291,49.291]],["name/182",[3,1.478]],["text/182",[1,1.509,18,2.597,46,2.509,56,3.942,94,2.57,225,4.085,291,7.098,528,4.93,534,6.38,784,4.679,1090,7.054,1117,6.25,1270,6.459,4886,6.725]],["component/182",[1,0.349,18,0.6,46,0.58]],["title/183-1",[1117,40.327,1348,47.427]],["name/183-1",[]],["text/183-1",[]],["component/183-1",[]],["title/183",[291,40.838,1117,40.327]],["name/183",[291,1.045,1117,1.032]],["text/183",[1,1.532,34,2.05,46,2.548,52,2.361,59,2.942,82,2.677,94,2.789,166,5.508,172,2.717,244,2.864,291,6.667,310,4.588,317,4.469,342,3.036,350,3.85,373,3.202,415,4.511,527,3.771,583,3.214,635,4.028,722,3.619,734,4.556,783,3.85,1117,5.896,1333,5.642,1348,6.134,1456,5.416,1575,4.388,1994,4.651,6101,6.949,7161,7.495,7162,10.09,7163,7.495,7164,7.495,7165,7.495,7166,7.495,7167,7.495]],["component/183",[1,0.349,18,0.6,46,0.58]],["title/184-1",[208,42.531,209,45.282]],["name/184-1",[]],["text/184-1",[]],["component/184-1",[]],["title/184-2",[40,35.861,209,45.282]],["name/184-2",[]],["text/184-2",[]],["component/184-2",[]],["title/184-3",[208,42.531,217,48.945]],["name/184-3",[]],["text/184-3",[]],["component/184-3",[]],["title/184-4",[218,76.733]],["name/184-4",[]],["text/184-4",[]],["component/184-4",[]],["title/184-5",[219,23.05,220,52.682,221,56.173]],["name/184-5",[]],["text/184-5",[]],["component/184-5",[]],["title/184-6",[1,10.112,46,16.815,222,38.009]],["name/184-6",[]],["text/184-6",[]],["component/184-6",[]],["title/184",[1,11.846,46,19.699]],["name/184",[3,1.478]],["text/184",[0,0.486,1,1.408,4,0.262,5,4.289,8,0.427,9,0.907,10,0.565,15,0.52,18,0.166,19,0.799,21,1.014,26,0.516,28,0.572,32,0.323,34,2.377,37,0.888,38,1.311,40,0.81,42,0.43,43,0.49,46,2.226,48,0.239,59,1.242,60,0.522,72,0.275,73,0.888,78,0.403,79,1.676,82,1.13,83,1.292,86,0.728,87,0.376,88,0.721,89,2.187,90,1.934,94,0.481,98,0.584,99,0.315,106,0.309,110,0.266,114,0.486,118,0.288,120,0.464,121,0.53,122,0.564,123,2.226,126,1.066,127,1.428,128,0.424,131,0.366,132,0.347,133,0.542,135,0.894,140,0.298,141,0.424,145,0.408,146,6.443,147,0.514,149,0.834,151,0.512,156,0.43,163,0.354,164,0.788,165,1.985,166,0.307,169,0.889,170,1.21,171,0.917,172,0.989,175,0.648,182,0.395,185,0.635,186,0.518,188,1.33,189,0.295,190,3.417,199,0.354,201,0.709,206,0.599,208,3.428,209,5.253,210,0.469,211,3.138,212,3.471,213,3.784,214,2.781,215,2.4,216,1.549,217,2.477,218,4.279,219,2.534,220,5.325,221,1.909,222,2.253,224,0.536,225,0.93,226,0.742,227,0.372,228,0.408,229,1.405,230,0.518,231,0.479,232,0.436,233,1.327,234,0.479,235,0.451,236,0.928,237,0.28,238,0.49,239,0.559,240,1.325,241,0.742,242,0.795,243,1.863,244,1.209,245,2.767,246,1.362,247,6.716,248,1.634,249,1.132,250,0.542,251,0.369,252,1.074,253,0.674,254,0.25,255,1.132,256,0.59,257,0.59,258,0.536,259,0.59,260,3.375,261,3.861,262,2.4,263,0.963,264,0.478,265,0.59,266,0.564,267,1.327,268,0.735,269,0.826,270,0.624,271,2.781,272,3.301,273,0.403,274,4.355,275,0.559,276,1.143,277,2.755,278,0.559,279,1.217,280,0.262,281,0.735,282,1.905,283,0.354,284,0.59,285,0.344,286,0.419,287,1.195,288,0.49,289,0.536,290,2.91,291,1.656,292,0.419,293,1.208,294,0.715,295,0.935,296,0.479,297,0.503,298,0.376,299,1.549,300,0.518,301,0.503,302,0.68,303,1.634,304,0.354,305,0.564,306,1.148,307,0.503,308,1.394,309,0.927,310,2.332,311,0.403,312,0.503,313,0.559,314,1.634,315,0.536,316,1.03,317,1.35,318,1.175,319,1.132,320,0.352,321,0.59,322,0.59,323,0.403,324,0.59,325,0.59,326,0.59,327,0.59,328,0.59,329,1.314,330,0.88,331,1.132,332,1.766,333,1.486,334,0.59,335,0.539,336,1.555,337,0.459,338,0.59,339,1.132,340,0.59,341,0.998,342,0.258,343,1.634,344,0.524,345,0.357,346,1.325,347,0.333,348,0.459,349,0.451,350,0.627,351,1.486,352,0.676,353,1.074,354,1.313,355,0.347,356,0.301,357,2.668,358,0.794,359,0.39,360,1.118,361,2.982,362,0.975,363,0.995,364,1.132,365,1.03,366,1.704,367,1.634,368,1.132,369,1.132,370,1.132,371,1.132,372,1.132,373,0.753,374,0.59,375,0.804,376,0.966,377,0.59,378,0.49,379,0.49,380,0.469,381,0.59,382,0.459,383,0.59,384,0.59,385,0.59,386,0.444,387,1.132,388,0.522,389,0.451,390,0.479,391,0.408,392,0.403,393,0.339,394,0.559,395,0.721,396,0.469,397,1.161,398,0.372,399,0.59,400,0.59,401,0.559,402,0.59,403,0.59,404,0.59,405,0.59,406,0.59,407,0.59,408,0.59,409,1.132,410,0.59,411,0.59,412,0.528,413,0.459,414,0.559,415,0.735,416,1.132,417,1.385,418,0.518,419,2.681,420,0.444,421,0.639,422,0.479,423,0.315,424,0.59,425,0.738,426,0.59,427,0.479,428,0.536,429,1.074,430,1.074,431,0.503,432,0.331,433,0.503,434,0.59,435,1.822,436,2.122,437,0.635,438,1.823,439,1.093,440,0.666,441,2.099,442,0.867,443,0.395,444,0.386,445,2.519,446,1.132,447,1.176,448,0.559,449,0.352,450,1.58,451,0.59,452,1.192,453,0.59,454,0.59,455,0.59,456,3.004,457,1.634,458,1.634,459,1.634,460,1.634,461,0.59,462,1.532,463,1.082,464,0.59,465,0.59,466,0.59,467,0.59,468,0.59,469,0.59,470,0.59,471,0.59,472,0.59,473,0.59,474,0.59,475,0.59,476,0.59,477,3.507,478,3.991,479,3.095,480,3.991,481,0.59,482,3.405,483,3.172,484,0.59,485,0.59,486,0.59,487,0.59,488,0.59,489,0.59,490,0.59,491,0.59,492,0.59,493,0.59,494,0.59,495,0.59,496,0.59,497,0.59,498,0.59,499,0.59,500,0.59,501,0.59,502,0.408,503,0.536,504,0.274,505,1.156,506,0.867,507,0.437,508,0.59,509,0.59,510,0.444,511,1.099,512,0.424,513,0.386,514,0.609,515,0.383,516,0.325,517,0.395,518,0.337,519,0.419,520,0.518,521,0.395,522,0.469,523,0.536,524,0.559,525,0.59,526,0.59,527,0.846,528,0.315,529,0.314,530,0.282,531,0.59,532,0.518,533,0.363,534,0.408,535,0.59,536,0.36,537,0.451,538,0.413,544,0.503,545,2.099,546,0.518,547,0.49,548,0.59,549,0.536,550,0.559,551,0.379,552,0.43,553,0.408,554,0.395,555,0.503,556,0.503,557,0.444,558,0.518,559,0.315,560,0.299,561,0.383,562,0.357,563,0.379,564,0.43,565,0.518,566,0.59,567,0.49,568,0.419,569,0.352,570,0.366,571,0.319,572,0.559,573,0.331,574,0.559,575,0.569,576,0.613,577,0.59,578,0.444,579,0.59,580,0.329,581,1.132,582,0.335,583,0.756,584,1.03,585,0.59,586,0.413,587,3.309,588,0.315,589,0.357,590,0.518,591,0.295,592,1.071,593,0.59,594,2.331,595,2.933,596,1.132,597,0.59,598,0.59,599,0.59,600,0.469,601,0.395,602,0.339,603,4.355,604,0.479,605,0.536,606,2.099,607,0.59,608,1.791,609,2.094,610,1.791,611,2.239,612,1.132,613,0.479,614,1.486,615,0.59,616,0.437,617,0.59,618,0.59,619,0.59,620,0.536,621,0.59,622,0.59,623,0.998,624,1.132,625,1.636,626,0.919,627,1.074,628,2.933,629,2.63,630,0.59,631,0.59,632,0.59,633,2.933,634,1.634,635,0.947,636,0.59,637,0.59,638,0.59,639,1.132,640,1.03,641,1.132,642,1.032,643,1.132,644,0.59,645,1.132,646,0.43,647,0.59,648,0.424,649,0.59,650,1.132,651,0.59,652,1.634,653,1.634,654,1.006,655,0.86,656,0.59,657,1.132,658,0.905,659,1.132,660,0.941,661,1.132,662,0.613,663,1.132,664,1.132,665,1.132,666,0.59,667,1.132,668,0.301,669,0.59,670,0.59,671,1.132,672,0.59,673,0.39,674,0.379,675,0.39,676,0.43,677,0.518,678,0.59,679,0.408,680,0.518,681,1.132,682,1.132,683,0.59,684,0.518,685,0.372,686,0.9,687,0.559,688,0.593,689,0.451,690,0.376,691,0.292,692,0.277,693,0.536,694,0.703,695,0.59,696,0.59,697,0.339,698,0.686,699,0.342,700,0.408,701,0.333]],["component/184",[1,0.349,18,0.6,46,0.58]],["title/185-1",[1235,79.426]],["name/185-1",[]],["text/185-1",[]],["component/185-1",[]],["title/185-2",[1,8.821,46,14.668,300,24.622,354,21.378]],["name/185-2",[]],["text/185-2",[]],["component/185-2",[]],["title/185-3",[126,36.73,1273,38.921]],["name/185-3",[]],["text/185-3",[]],["component/185-3",[]],["title/185-4",[126,44.332]],["name/185-4",[]],["text/185-4",[]],["component/185-4",[]],["title/185-5",[126,36.73,698,43.821]],["name/185-5",[]],["text/185-5",[]],["component/185-5",[]],["title/185-6",[1,8.821,46,14.668,287,25.435,3912,45.955]],["name/185-6",[]],["text/185-6",[]],["component/185-6",[]],["title/185-7",[287,29.158,423,33.037,851,40.484]],["name/185-7",[]],["text/185-7",[]],["component/185-7",[]],["title/185-8",[189,36.2,287,34.159]],["name/185-8",[]],["text/185-8",[]],["component/185-8",[]],["title/185-9",[126,36.73,1151,31.05]],["name/185-9",[]],["text/185-9",[]],["component/185-9",[]],["title/185-10",[38,45.234]],["name/185-10",[]],["text/185-10",[]],["component/185-10",[]],["title/185-11",[120,29.626,121,33.875]],["name/185-11",[]],["text/185-11",[]],["component/185-11",[]],["title/185-12",[507,64.682]],["name/185-12",[]],["text/185-12",[]],["component/185-12",[]],["title/185",[1,11.846,46,19.699]],["name/185",[3,1.478]],["text/185",[1,1.707,2,0.874,4,0.692,5,1.571,8,0.311,9,0.295,10,1.622,15,1.759,18,0.232,19,1.082,21,1.622,22,0.958,26,1.745,28,1.278,34,2.209,37,1.812,38,1.986,42,0.6,46,2.784,48,0.898,51,1.526,54,0.366,56,0.352,59,0.659,60,1.499,66,0.896,71,0.384,73,1.623,74,1.191,82,2.213,85,0.524,86,0.529,87,0.524,88,0.524,90,0.399,94,1.62,95,0.93,99,0.44,109,0.592,110,0.372,116,0.563,118,1.372,119,2.863,120,1.57,121,1.314,125,2.022,126,5.154,127,0.757,132,0.484,133,0.744,135,0.852,140,0.786,142,1.266,147,0.706,149,0.42,152,1.341,163,0.494,164,1.354,165,0.557,166,1.741,170,1.64,171,0.873,172,1.307,175,0.326,184,0.408,186,1.012,187,0.491,188,4.094,189,1.918,190,4.352,193,1,196,0.459,201,1.857,206,0.435,219,1.431,222,1.727,225,1.898,230,0.723,231,0.668,232,0.852,233,0.668,234,0.668,235,0.63,236,1.9,237,0.39,238,0.684,239,1.092,240,0.982,244,0.641,245,2.806,247,5.16,253,0.641,254,1.42,260,1.781,261,1.466,263,0.714,264,0.656,269,0.416,272,2.22,276,1.494,277,1.666,279,1.387,280,0.366,281,0.534,282,2.517,287,5.288,288,0.684,291,1.584,293,0.474,294,1.398,300,1.752,302,2.517,304,0.494,305,0.775,306,1.004,308,2.111,309,1.24,310,1.451,313,0.78,315,0.748,316,0.748,317,0.529,318,1.781,330,0.652,332,1.354,335,0.392,342,0.68,344,0.38,345,0.942,346,1.469,347,0.464,350,1.853,352,0.928,354,2.152,356,1.129,357,0.748,361,2.779,373,0.717,379,0.684,397,0.377,398,0.519,401,0.78,412,1.788,413,1.725,417,1.212,420,0.619,421,0.878,423,2.291,425,0.372,428,0.748,432,1.876,436,0.902,437,0.461,438,3.152,439,2.641,440,0.484,450,0.619,452,4.81,462,0.6,502,1.077,504,2.355,507,2.84,510,0.619,515,0.534,527,0.332,529,0.438,530,1.342,534,0.569,569,0.928,575,0.414,580,1.234,583,1.024,591,0.412,609,0.89,616,0.609,623,2.042,625,2.606,629,2.23,635,1.939,662,0.842,673,0.545,680,0.723,689,0.63,694,1.374,697,0.896,698,2.594,712,0.577,722,0.428,729,0.365,736,0.748,740,0.567,741,0.359,753,0.814,761,0.461,767,0.353,768,1.226,773,0.506,775,1.041,783,0.456,784,1.425,800,0.309,806,0.487,810,0.524,817,0.534,826,0.459,851,4.634,854,1.32,867,0.414,898,0.48,901,1.415,917,0.6,956,1.966,962,1.362,963,2.344,982,0.502,985,1.64,988,1.574,1014,0.55,1021,0.487,1028,0.982,1032,0.474,1068,0.474,1081,1.119,1136,0.487,1145,1.627,1153,1.268,1166,0.524,1180,0.577,1187,0.51,1194,1.493,1196,0.529,1197,0.63,1208,0.563,1229,0.654,1273,0.443,1291,1.367,1296,1.236,1358,0.484,1365,0.524,1394,0.654,1434,1.077,1448,0.534,1464,0.896,1508,0.684,1509,0.654,1515,0.619,1575,3.819,1708,0.6,1749,0.563,1760,1.258,1761,0.592,1762,0.524,1803,1.171,1841,0.456,1866,1.152,1870,0.484,1908,2.806,1909,1.09,1930,1.191,1937,1.415,1940,0.491,1955,0.519,1994,0.55,2039,0.448,2087,0.723,2150,1.725,2235,0.668,3191,0.654,3457,0.609,3638,1.945,3912,1.327,4327,0.654,4465,1.367,4671,0.723,5469,0.684,5497,0.641,5566,0.684,5568,0.748,5658,5.501,5969,2.374,6016,0.529,6059,0.78,6098,1.666,6127,0.654,6128,2.885,6134,0.654,6147,1.839,6157,0.823,6159,2.099,6167,3.271,6168,0.823,6267,2.213,6306,0.702,6307,0.723,6455,2.806,6457,2.806,6458,2.213,6459,2.213,6578,1.475,6579,1.475,6804,0.78,6805,0.823,6806,0.78,7168,0.823,7169,1.556,7170,4.281,7171,1.678,7172,3.344,7173,0.887,7174,0.887,7175,1.678,7176,0.887,7177,3.027,7178,2.387,7179,2.387,7180,2.387,7181,0.887,7182,0.887,7183,0.887,7184,0.887,7185,0.887,7186,0.887,7187,0.887,7188,0.887]],["component/185",[1,0.349,18,0.6,46,0.58]],["title/186",[1,10.112,46,16.815,94,14.156]],["name/186",[94,0.727]],["text/186",[]],["component/186",[1,0.349,46,0.58,1170,1.475]],["title/187",[1,10.112,46,16.815,1170,42.755]],["name/187",[3,1.478]],["text/187",[]],["component/187",[1,0.349,46,0.58,1170,1.475]],["title/188",[1,10.112,46,16.815,169,33.607]],["name/188",[169,1.725]],["text/188",[]],["component/188",[1,0.349,46,0.58,1170,1.475]],["title/189",[1,10.112,46,16.815,738,52.682]],["name/189",[837,1.801]],["text/189",[]],["component/189",[1,0.349,46,0.58,1170,1.475]],["title/190-1",[697,41.652,784,36.73]],["name/190-1",[]],["text/190-1",[]],["component/190-1",[]],["title/190-2",[784,36.73,1464,41.652]],["name/190-2",[]],["text/190-2",[]],["component/190-2",[]],["title/190-3",[784,36.73,7189,78.021]],["name/190-3",[]],["text/190-3",[]],["component/190-3",[]],["title/190-4",[582,41.103,867,36.374]],["name/190-4",[]],["text/190-4",[]],["component/190-4",[]],["title/190-5",[527,35.194]],["name/190-5",[]],["text/190-5",[]],["component/190-5",[]],["title/190",[2172,53.311]],["name/190",[2172,1.935]],["text/190",[28,2.142,118,3.846,190,4.796,276,3.066,309,3.474,445,3.863,559,4.208,635,4.56,691,3.899,692,3.698,697,5.845,764,6.869,784,5.154,828,5.446,1136,4.658,1157,5.584,1341,5.591,1575,4.966,2172,6.864,2427,6.386,2667,6.13,2696,5.92,4338,7.458,7190,8.483,7191,7.865,7192,6.71,7193,7.458]],["component/190",[1,0.227,46,0.377,56,0.593,105,0.971,800,0.52]],["title/191",[4897,82.798]],["name/191",[3,1.478]],["text/191",[1,0.991,15,2.776,21,2.091,28,3.261,29,4.318,34,1.784,46,1.647,50,3.086,59,2.561,73,2.561,90,2.931,105,4.24,114,2.596,149,3.086,219,2.258,232,3.276,237,2.868,243,3.989,276,2.358,318,2.809,346,5.585,355,3.556,356,3.086,421,3.415,445,2.971,692,4.624,729,2.682,760,4.801,800,3.692,927,3.311,939,4.452,973,4.236,1117,3.372,1157,4.294,1198,3.134,1218,3.507,1341,3.331,1418,2.765,1513,5.027,1539,4.481,1648,5.192,1652,4.24,1691,5.575,2040,4.715,2172,3.693,2201,4.294,2696,4.552,5525,4.552,6349,7.255,7192,5.16,7193,5.736,7194,6.524,7195,6.524,7196,6.524,7197,6.049,7198,6.524]],["component/191",[1,0.227,46,0.377,56,0.593,105,0.971,800,0.52]],["title/192-1",[527,35.194]],["name/192-1",[]],["text/192-1",[]],["component/192-1",[]],["title/192",[867,43.902]],["name/192",[867,1.594]],["text/192",[28,1.796,34,1.264,118,2.096,147,2.992,164,2.068,190,3.855,237,2.032,264,1.808,287,2.024,309,3.552,318,5.563,330,2.765,344,4.963,355,4.728,363,2.032,373,1.975,570,2.66,594,8.185,648,4.747,692,3.102,760,2.42,811,2.485,867,3.317,922,4.065,967,3.27,989,3.851,1021,2.538,1037,3.128,1117,2.389,1158,6.548,1218,2.485,1333,6.529,1336,3.767,1348,2.81,1394,6.392,1418,5.193,1429,7.316,1431,5.628,1443,9.031,1447,5.869,1758,2.502,1879,6.001,2201,3.043,2307,4.065,2344,3.084,2526,3.407,2667,5.142,3068,3.226,5290,4.286,5291,4.286,5371,5.797,5424,5.797,5431,4.286,5851,4.286,6835,4.065,7197,4.286,7199,4.623,7200,7.115,7201,4.623,7202,4.623,7203,4.623,7204,4.623,7205,7.115,7206,4.623,7207,7.115,7208,4.623,7209,4.623,7210,4.623,7211,4.623,7212,4.623,7213,4.623,7214,7.115,7215,4.623,7216,4.623,7217,4.623,7218,6.597]],["component/192",[1,0.227,46,0.377,56,0.593,105,0.971,800,0.52]],["title/193",[6349,74.491]],["name/193",[6349,2.704]],["text/193",[190,4.639,264,3.728,286,6.273,330,4.579,346,4.626,648,6.358,828,8.58,937,5.233,1599,6.65,2667,6.887,6349,7.538,7192,9.322,7219,11.785,7220,10.927]],["component/193",[1,0.227,46,0.377,56,0.593,105,0.971,800,0.52]],["title/194",[50,44.552]],["name/194",[50,1.617]],["text/194",[15,2.995,29,4.552,34,2.644,50,4.575,175,3.558,201,2.831,263,2.995,269,4.53,276,2.544,279,2.708,306,2.96,309,5.502,318,3.031,329,5.612,396,5.187,692,4.216,763,4.322,828,7.633,867,5.149,967,4.444,1021,3.865,1273,3.511,1304,4.519,1341,6.072,1447,8.434,2054,5.087,2137,5.299,2899,5.736,4280,6.988,4440,6.527,6942,8.155,7221,7.039,7222,7.039,7223,11.045,7224,9.669]],["component/194",[1,0.227,46,0.377,56,0.593,105,0.971,800,0.52]],["title/195",[114,31.05,2285,63.574]],["name/195",[114,0.795,2285,1.627]],["text/195",[28,3.287,37,2.635,73,2.635,114,3.724,186,2.845,190,4.044,196,3.47,263,2.856,330,2.608,355,7.593,425,2.812,439,5.201,533,3.831,558,5.47,658,3.448,694,5.384,715,4.479,828,6.007,845,5.662,853,6.224,1381,4.684,1418,2.845,1500,6.081,1502,9.005,2201,4.419,2221,4.851,2285,7.624,2900,8.291,6349,7.401,6924,9.47,7193,8.227,7220,8.676,7225,6.713,7226,6.224]],["component/195",[1,0.227,46,0.377,56,0.593,105,0.971,800,0.52]],["title/196-1",[1,7.026,34,12.657,46,11.684,169,23.352,769,32.844,1205,35.663]],["name/196-1",[]],["text/196-1",[]],["component/196-1",[]],["title/196-2",[528,33.037,961,38.009,7227,58.558]],["name/196-2",[]],["text/196-2",[]],["component/196-2",[]],["title/196-3",[2077,51.359,7228,68.6]],["name/196-3",[]],["text/196-3",[]],["component/196-3",[]],["title/196-4",[37,22.803,511,28.199,837,30.606,1341,29.664]],["name/196-4",[]],["text/196-4",[]],["component/196-4",[]],["title/196-5",[126,31.353,697,35.555,4886,45.067]],["name/196-5",[]],["text/196-5",[]],["component/196-5",[]],["title/196-6",[291,30.409,654,33.156,839,26.579,7229,53.866]],["name/196-6",[]],["text/196-6",[]],["component/196-6",[]],["title/196-7",[1,10.112,46,16.815,206,32.676]],["name/196-7",[]],["text/196-7",[]],["component/196-7",[]],["title/196-8",[83,38.009,169,33.607,247,36.305]],["name/196-8",[]],["text/196-8",[]],["component/196-8",[]],["title/196",[1,7.026,46,11.684,56,18.353,169,23.352,769,32.844,1205,35.663]],["name/196",[3,1.478]],["text/196",[1,1.408,2,0.536,15,1.411,18,0.485,21,1.063,26,2.937,32,0.943,34,3.002,37,1.763,46,2.251,48,0.699,50,3.816,51,2.072,56,2.165,60,0.982,61,4.273,66,2.398,73,1.763,82,1.184,83,2.563,87,2.653,93,1.223,94,1.16,110,2.287,114,0.739,115,1.318,118,1.503,119,1.736,120,1.259,123,2.453,126,4.01,133,3.086,135,0.943,140,0.87,151,1.881,164,1.483,169,5.117,171,0.966,172,1.202,175,0.683,182,1.153,184,0.854,189,1.538,190,2.415,193,1.977,201,1.334,206,2.678,219,1.889,220,4.318,222,4.309,225,0.764,232,2.239,240,1.087,244,2.086,245,2.244,247,5.055,253,0.71,254,1.769,263,0.79,270,0.948,272,2.381,276,1.623,279,2.677,283,1.035,287,2.39,291,3.642,300,0.787,302,0.717,309,2.236,310,0.747,318,1.428,320,1.834,344,0.797,354,0.683,361,1.118,373,1.919,393,0.992,397,0.79,419,1.005,420,1.296,435,0.948,436,3.37,440,1.013,452,1.257,462,4.243,504,1.428,511,2.65,527,1.239,530,0.824,560,0.874,571,0.932,573,0.966,582,0.979,583,0.797,591,0.862,609,0.985,629,2.444,654,3.578,655,0.906,676,1.257,688,0.902,694,1.908,697,0.992,729,1.363,735,1.941,740,1.12,741,1.819,742,2.857,767,0.739,769,8.223,772,1.192,775,2.058,806,1.02,809,1.129,823,1.192,826,0.96,836,3.221,837,0.979,839,2.055,844,0.902,851,2.016,852,1.239,854,1.027,895,1.052,910,1.052,937,1.02,952,0.979,956,3.418,961,1.06,962,1.892,1004,0.972,1021,2.466,1022,2.702,1053,1.722,1062,2.08,1078,1.369,1118,2.555,1121,1.722,1129,1.513,1171,1.087,1196,2.678,1205,2.555,1209,2.758,1270,1.207,1273,1.654,1331,1.192,1341,2.293,1353,1.342,1362,1.078,1363,2.183,1503,1.722,1539,1.276,1582,1.513,1760,0.979,1762,1.959,1825,4.8,1842,3.188,1997,1.431,2038,3.788,2126,1.567,2238,1.153,2247,1.862,2375,1.369,2526,1.369,2593,1.318,2908,1.239,2960,5.062,3498,1.469,3718,1.318,4713,2.555,4886,1.257,5374,1.633,6016,1.107,6042,4.023,6127,1.369,6139,6.452,6177,1.178,6307,2.702,6493,1.722,6636,7.001,6783,1.567,6803,1.633,6804,1.633,7229,7.479,7230,1.857,7231,1.857,7232,3.316,7233,3.316,7234,1.857,7235,1.857,7236,1.857,7237,1.857,7238,1.857,7239,1.857,7240,1.857,7241,1.857,7242,3.316,7243,2.623,7244,1.857,7245,1.857,7246,4.491,7247,4.491,7248,4.491,7249,3.316,7250,3.316,7251,3.316,7252,1.857,7253,1.857,7254,1.857,7255,1.857,7256,4.491,7257,1.857,7258,3.316]],["component/196",[56,0.911,169,1.159,1205,1.77]],["title/197-1",[1,10.112,943,29.037,1393,36.569]],["name/197-1",[]],["text/197-1",[]],["component/197-1",[]],["title/197-2",[1,8.821,837,30.606,943,25.329,1900,41.985]],["name/197-2",[]],["text/197-2",[]],["component/197-2",[]],["title/197",[1,7.822,56,20.431,172,18.673,515,31.01,943,22.461]],["name/197",[3,1.478]],["text/197",[1,2.028,10,1.824,11,3.908,12,4.284,21,2.665,28,2.481,32,4.221,34,2.274,46,2.903,54,2.348,56,2.257,60,2.91,72,2.46,98,2.719,100,7.311,101,5.003,102,4.038,104,4.501,105,5.404,111,2.998,118,2.58,125,2.491,127,2.568,133,3.687,134,7.242,151,2.384,167,3.425,172,3.014,190,1.975,193,3.393,199,3.171,219,1.969,243,2.14,292,3.746,356,2.692,422,4.284,435,2.906,439,2.748,514,2.839,515,3.425,530,2.523,551,3.393,662,4.93,728,3.331,768,2.923,780,3.018,781,3.908,785,4.112,789,2.777,790,3.393,800,2.894,834,2.823,856,3.687,883,5.003,943,5.013,1150,3.148,1174,4.637,1197,4.038,1210,4.112,1273,2.839,1399,3.753,1692,4.112,1851,4.799,1900,6.009,7259,5.69,7260,5.69,7261,5.69,7262,5.69,7263,4.501]],["component/197",[172,0.833,515,1.383,943,1.002]],["title/198-1",[1118,72.57]],["name/198-1",[]],["text/198-1",[]],["component/198-1",[]],["title/198-2",[9,17.119,172,18.673,515,31.01,712,33.48,1295,45.297]],["name/198-2",[]],["text/198-2",[]],["component/198-2",[]],["title/198-3",[1,10.112,46,16.815,245,27.377]],["name/198-3",[]],["text/198-3",[]],["component/198-3",[]],["title/198-4",[60,17.202,245,23.881,463,27.764,1069,36.051]],["name/198-4",[]],["text/198-4",[]],["component/198-4",[]],["title/198-5",[1,10.112,712,43.282,943,29.037]],["name/198-5",[]],["text/198-5",[]],["component/198-5",[]],["title/198-6",[1,10.112,245,27.377,943,29.037]],["name/198-6",[]],["text/198-6",[]],["component/198-6",[]],["title/198",[169,47.519]],["name/198",[169,1.725]],["text/198",[1,2.024,9,0.847,21,2.46,32,1.293,34,1.572,40,2.01,46,2.67,54,1.051,56,1.01,60,3.035,66,3.068,82,1.562,86,1.519,88,1.505,94,0.542,95,1.767,97,1.841,98,3.667,110,1.067,122,1.177,127,1.15,165,6.2,169,2.207,171,3.991,172,3.248,175,0.938,190,1.995,193,1.519,201,1.759,227,1.492,235,1.808,242,1.15,244,0.974,245,4.214,254,2.263,260,4.415,266,1.177,270,1.301,276,2.463,279,0.98,300,1.854,302,0.983,308,2.233,320,1.409,330,1.7,332,1.14,344,1.093,346,3.725,350,1.309,354,0.938,356,3.963,361,5.394,362,2.42,388,3.278,391,2.808,392,1.617,393,3.068,398,1.492,422,1.918,435,1.301,437,1.325,438,1.177,439,1.23,443,1.581,463,3.258,483,1.878,514,1.271,515,2.633,527,1.635,570,1.466,583,1.093,591,1.182,611,4.276,629,4.235,642,1.492,697,1.36,712,3.735,728,3.365,750,1.399,766,3.326,771,1.442,774,1.257,809,1.549,816,3.365,820,1.492,821,1.218,834,1.264,837,3.591,851,2.659,896,6.835,943,4.944,985,3.004,1056,3.846,1069,5.869,1078,1.878,1086,5.053,1100,1.724,1101,1.808,1102,1.878,1136,1.399,1150,2.42,1230,1.656,1238,2.149,1244,2.016,1295,2.24,1320,1.598,1580,6.155,1600,3.203,1749,4.325,1864,1.878,2247,3.829,2344,1.7,2560,1.519,3148,6.172,4239,4.926,4271,1.918,6147,3.371,6618,3.846,7264,3.846,7265,2.548,7266,2.548,7267,2.548,7268,4.374,7269,8.335,7270,2.548,7271,2.363,7272,2.363,7273,2.363,7274,2.363,7275,1.918,7276,2.363]],["component/198",[172,0.833,515,1.383,943,1.002]],["title/199-1",[1118,72.57]],["name/199-1",[]],["text/199-1",[]],["component/199-1",[]],["title/199-2",[46,16.815,1952,48.131,7277,48.131]],["name/199-2",[]],["text/199-2",[]],["component/199-2",[]],["title/199-3",[21,21.347,80,26.598,95,20.474]],["name/199-3",[]],["text/199-3",[]],["component/199-3",[]],["title/199-4",[46,14.668,131,33.432,219,20.107,1952,41.985]],["name/199-4",[]],["text/199-4",[]],["component/199-4",[]],["title/199-5",[1,6.378,21,13.463,46,10.605,94,8.928,856,18.627,943,18.313,1952,30.356]],["name/199-5",[]],["text/199-5",[]],["component/199-5",[]],["title/199-6",[72,33.736,2218,52.795]],["name/199-6",[]],["text/199-6",[]],["component/199-6",[]],["title/199-7",[80,26.598,95,20.474,800,23.18]],["name/199-7",[]],["text/199-7",[]],["component/199-7",[]],["title/199-8",[46,14.668,131,33.432,219,20.107,1952,41.985]],["name/199-8",[]],["text/199-8",[]],["component/199-8",[]],["title/199-9",[1,6.378,46,10.605,94,8.928,800,14.62,856,18.627,943,18.313,1952,30.356]],["name/199-9",[]],["text/199-9",[]],["component/199-9",[]],["title/199-10",[72,33.736,2218,52.795]],["name/199-10",[]],["text/199-10",[]],["component/199-10",[]],["title/199-11",[28,16.815,80,26.598,95,20.474]],["name/199-11",[]],["text/199-11",[]],["component/199-11",[]],["title/199-12",[46,14.668,131,33.432,219,20.107,1952,41.985]],["name/199-12",[]],["text/199-12",[]],["component/199-12",[]],["title/199-13",[1,6.378,28,10.605,46,10.605,94,8.928,856,18.627,943,18.313,1952,30.356]],["name/199-13",[]],["text/199-13",[]],["component/199-13",[]],["title/199-14",[72,33.736,2218,52.795]],["name/199-14",[]],["text/199-14",[]],["component/199-14",[]],["title/199",[95,20.474,1399,30.057,7277,48.131]],["name/199",[1399,0.901,7277,1.443]],["text/199",[1,1.49,3,0.562,9,0.432,21,3.204,22,0.741,28,2.259,34,1.653,36,1.346,46,2.193,48,0.489,51,0.792,56,0.515,59,0.51,60,2.787,71,0.562,80,3.669,82,1.191,94,0.509,95,2.75,105,0.844,110,0.544,118,0.589,147,0.546,151,1.397,169,1.683,171,0.676,175,1.527,176,0.621,186,0.551,190,3.014,219,2.802,225,0.534,227,4.091,232,0.464,241,0.79,242,1.505,243,2.78,244,2.309,250,1.479,264,0.508,266,0.6,270,0.663,272,2.294,273,1.52,279,2.11,302,0.501,309,0.532,310,1.342,318,0.559,332,2.174,342,0.526,344,1.779,346,3.392,347,1.746,362,0.719,388,1.024,391,1.538,398,1.953,417,0.659,421,1.254,425,0.544,435,3.568,438,3.227,439,3.374,440,1.306,463,2.622,504,1.032,505,0.663,516,0.663,527,2.258,528,0.644,529,0.641,530,0.576,580,1.239,583,0.557,591,0.603,611,2.603,616,0.892,642,4.091,648,0.867,655,4.1,662,4.722,679,0.834,688,1.619,704,0.724,710,1.254,711,0.748,712,2.168,741,0.526,746,3.66,754,3.172,760,2.172,766,1.628,767,0.954,773,0.741,774,0.641,781,0.892,784,0.612,785,2.411,800,3.348,806,0.713,809,0.79,820,0.761,826,0.671,851,0.79,856,3.099,896,6.64,903,0.879,927,2.106,939,0.631,940,3.581,943,4.359,952,0.684,956,3.294,960,1.059,964,3.339,968,1.416,969,0.656,988,1.735,1004,2.172,1021,2.278,1024,0.775,1030,1.288,1069,4.336,1079,2.933,1100,4.089,1101,4.288,1102,4.453,1103,1.028,1106,1.001,1120,1.028,1153,2.927,1188,1.028,1198,1.602,1200,0.815,1346,0.824,1399,1.872,1418,0.551,1440,2.718,1593,0.978,1595,1.096,1648,0.735,1691,2.028,1714,0.815,1733,2.571,1758,1.806,1762,0.767,1771,0.939,1782,1.059,1796,0.724,1841,0.667,1853,0.798,1952,8.389,2039,0.656,2190,0.978,2198,1.804,2234,2.291,2539,1.028,2580,2.021,2696,0.907,2709,1.672,2853,2.571,3090,1.204,3290,0.824,3516,4.728,4239,0.939,4343,0.978,5072,1.204,5470,0.892,6029,1.204,6037,0.867,6870,1.096,6934,1.096,7264,1.142,7269,7.749,7275,2.511,7277,7.676,7278,5.087,7279,2.396,7280,1.299,7281,2.411,7282,2.107,7283,1.299,7284,1.299,7285,1.299,7286,1.299,7287,1.299,7288,2.718,7289,3.481,7290,1.299,7291,2.639,7292,3.123,7293,1.142,7294,1.299,7295,2.396,7296,1.299,7297,1.299,7298,1.299,7299,2.107,7300,1.299,7301,1.299,7302,1.299,7303,1.299,7304,1.299,7305,1.299,7306,1.299,7307,1.299,7308,1.299,7309,2.396,7310,1.299,7311,1.299,7312,1.299,7313,1.299,7314,1.299,7315,1.299]],["component/199",[172,0.833,515,1.383,943,1.002]],["title/200-1",[1118,72.57]],["name/200-1",[]],["text/200-1",[]],["component/200-1",[]],["title/200-2",[60,17.202,463,27.764,1069,36.051,7316,53.866]],["name/200-2",[]],["text/200-2",[]],["component/200-2",[]],["title/200-3",[1,5.839,21,12.325,463,18.377,580,19.876,856,17.052,943,16.766,1069,23.863,7277,27.79]],["name/200-3",[]],["text/200-3",[]],["component/200-3",[]],["title/200-4",[1,5.839,463,18.377,580,19.876,800,13.384,856,17.052,943,16.766,1069,23.863,7277,27.79]],["name/200-4",[]],["text/200-4",[]],["component/200-4",[]],["title/200-5",[1,5.839,28,9.709,463,18.377,580,19.876,789,18.765,943,16.766,1069,23.863,7277,27.79]],["name/200-5",[]],["text/200-5",[]],["component/200-5",[]],["title/200",[95,20.474,856,29.533,7277,48.131]],["name/200",[856,0.885,7277,1.443]],["text/200",[1,1.631,9,2.452,21,2.989,26,0.863,28,1.687,32,1.038,33,3.573,34,1.326,46,1.478,56,0.811,60,2.645,82,1.289,94,1.031,95,1.11,97,1.477,110,2.451,140,0.958,159,1.167,169,2.447,172,0.741,175,1.329,176,0.977,190,1.253,193,1.219,219,2.025,225,0.84,227,4.969,243,2.999,251,1.186,253,0.781,263,0.87,270,2.988,272,2.222,279,1.865,300,0.866,302,0.789,309,3.022,332,3.301,335,1.594,342,0.828,346,2.354,361,1.231,388,2.071,393,1.091,417,1.038,435,4.072,437,1.063,438,3.919,439,3.85,463,3.527,504,2.088,529,2.392,571,1.811,573,1.063,583,0.877,591,0.949,611,2.265,642,4.969,648,4.458,655,4.721,662,4.258,692,0.891,694,1.176,704,1.139,710,1.07,711,1.176,712,3.151,722,0.987,746,6.455,750,1.122,754,0.649,760,3.863,766,3.601,785,1.477,789,0.998,800,2.568,805,4.022,806,1.122,849,1.507,851,2.947,856,3.763,896,5.763,927,2.461,940,5.438,943,4.066,956,4.347,973,1.442,988,1.878,1004,1.89,1030,1.099,1044,2.887,1069,5.544,1079,4.263,1080,1.666,1100,6.547,1101,5.659,1102,5.438,1103,4.629,1117,2.506,1136,3.669,1145,1.099,1303,3.044,1333,2.718,1341,3.768,1346,1.297,1348,1.243,1372,1.575,1402,1.297,1418,1.53,1500,1.329,1580,1.404,1648,1.157,1673,1.797,1714,1.282,1758,2.624,2218,1.383,2247,2.028,2405,1.539,2696,1.427,2756,1.404,2836,1.507,3080,1.895,3290,2.291,3516,6.946,4731,1.724,5562,1.724,7192,1.617,7264,3.174,7269,7.867,7271,1.895,7276,3.348,7277,6.133,7278,1.895,7281,1.477,7282,1.797,7299,3.174,7317,2.044,7318,4.849,7319,2.044,7320,3.174,7321,2.044,7322,2.044,7323,2.044,7324,2.044,7325,2.044,7326,1.895,7327,2.044,7328,2.044,7329,2.044,7330,2.044,7331,2.044,7332,2.044]],["component/200",[172,0.833,515,1.383,943,1.002]],["title/201-1",[1,8.821,51,19.204,120,22.06,943,25.329]],["name/201-1",[]],["text/201-1",[]],["component/201-1",[]],["title/201-2",[95,23.985,856,34.597]],["name/201-2",[]],["text/201-2",[]],["component/201-2",[]],["title/201-3",[95,23.985,1399,35.211]],["name/201-3",[]],["text/201-3",[]],["component/201-3",[]],["title/201",[120,29.626,121,33.875]],["name/201",[120,0.758,121,0.867]],["text/201",[1,1.927,4,1.428,10,2.653,21,1.11,34,2.264,37,2.22,45,5.086,46,3.125,48,2.127,51,2.736,60,2.451,72,1.497,82,2.561,86,4.275,88,4.236,94,0.736,95,1.739,119,4.776,120,4.092,121,3.594,123,2.541,133,1.535,151,1.45,152,3.177,188,3.015,242,1.562,243,3.113,244,1.323,253,1.323,263,1.473,276,1.251,279,1.332,283,1.93,310,3.938,330,1.345,356,1.638,363,4.012,412,4.234,425,2.369,445,6.075,512,2.31,530,1.535,559,4.526,573,2.942,655,5.597,685,2.027,754,3.539,767,2.251,772,2.222,784,1.63,821,1.654,826,1.789,856,2.508,937,1.901,943,5.12,968,4.236,1044,1.708,1153,3.822,1399,1.562,1420,1.901,1463,3.177,1502,2.457,1575,2.027,1707,4.087,1760,1.824,2398,2.502,4494,3.21,6016,2.064,6096,2.457,6612,2.92,6614,2.92,6799,6.648,6800,3.21,7333,4.973,7334,3.21,7335,5.656,7336,3.462,7337,5.656,7338,3.462,7339,3.462]],["component/201",[18,0.821,943,1.37]],["title/202",[973,37.608]],["name/202",[973,1.365]],["text/202",[]],["component/202",[18,0.821,943,1.37]],["title/203-1",[94,16.583,310,31.38]],["name/203-1",[]],["text/203-1",[]],["component/203-1",[]],["title/203-2",[1,7.822,46,13.007,202,35.386,254,20.29,354,18.958]],["name/203-2",[]],["text/203-2",[]],["component/203-2",[]],["title/203-3",[110,32.683,7340,68.6]],["name/203-3",[]],["text/203-3",[]],["component/203-3",[]],["title/203-4",[6021,52.795,7341,72.341]],["name/203-4",[]],["text/203-4",[]],["component/203-4",[]],["title/203-5",[1498,52.054,7342,72.341]],["name/203-5",[]],["text/203-5",[]],["component/203-5",[]],["title/203-6",[1,10.112,46,16.815,254,26.231]],["name/203-6",[]],["text/203-6",[]],["component/203-6",[]],["title/203-7",[110,27.899,7343,49.08,7344,61.751]],["name/203-7",[]],["text/203-7",[]],["component/203-7",[]],["title/203-8",[95,17.859,1354,34.638,7343,42.813,7345,53.866]],["name/203-8",[]],["text/203-8",[]],["component/203-8",[]],["title/203-9",[46,16.815,7343,49.08,7346,66.6]],["name/203-9",[]],["text/203-9",[]],["component/203-9",[]],["title/203-10",[36,18.679,46,11.684,317,27.592,964,22.116,7343,34.104,7347,46.277]],["name/203-10",[]],["text/203-10",[]],["component/203-10",[]],["title/203-11",[270,39.838,7348,72.341]],["name/203-11",[]],["text/203-11",[]],["component/203-11",[]],["title/203-12",[272,29.626,7349,78.021]],["name/203-12",[]],["text/203-12",[]],["component/203-12",[]],["title/203-13",[36,26.882,272,25.29,7348,61.751]],["name/203-13",[]],["text/203-13",[]],["component/203-13",[]],["title/203-14",[1740,52.795,7350,78.021]],["name/203-14",[]],["text/203-14",[]],["component/203-14",[]],["title/203-15",[188,32.809,7351,78.021]],["name/203-15",[]],["text/203-15",[]],["component/203-15",[]],["title/203-16",[83,53.744]],["name/203-16",[]],["text/203-16",[]],["component/203-16",[]],["title/203-17",[964,37.286,7352,78.021]],["name/203-17",[]],["text/203-17",[]],["component/203-17",[]],["title/203-18",[152,43.821,153,58.734]],["name/203-18",[]],["text/203-18",[]],["component/203-18",[]],["title/203-19",[7353,94.169]],["name/203-19",[]],["text/203-19",[]],["component/203-19",[]],["title/203-20",[270,39.838,7354,78.021]],["name/203-20",[]],["text/203-20",[]],["component/203-20",[]],["title/203-21",[272,29.626,7355,78.021]],["name/203-21",[]],["text/203-21",[]],["component/203-21",[]],["title/203-22",[7333,82.798]],["name/203-22",[]],["text/203-22",[]],["component/203-22",[]],["title/203-23",[7356,87.314]],["name/203-23",[]],["text/203-23",[]],["component/203-23",[]],["title/203-24",[318,25.018,1420,31.899,6306,45.955,7357,58.096]],["name/203-24",[]],["text/203-24",[]],["component/203-24",[]],["title/203-25",[247,31.669,254,22.881,5885,49,6021,39.312]],["name/203-25",[]],["text/203-25",[]],["component/203-25",[]],["title/203-26",[133,29.533,7343,49.08,7358,61.751]],["name/203-26",[]],["text/203-26",[]],["component/203-26",[]],["title/203-27",[26,24.525,260,25.018,7343,42.813,7359,53.866]],["name/203-27",[]],["text/203-27",[]],["component/203-27",[]],["title/203-28",[46,14.668,133,25.762,7343,42.813,7360,58.096]],["name/203-28",[]],["text/203-28",[]],["component/203-28",[]],["title/203-29",[26,21.748,46,13.007,260,22.185,7343,37.965,7361,47.767]],["name/203-29",[]],["text/203-29",[]],["component/203-29",[]],["title/203-30",[60,15.254,254,20.29,412,22.276,5885,43.451,6021,34.861]],["name/203-30",[]],["text/203-30",[]],["component/203-30",[]],["title/203-31",[26,21.748,260,22.185,754,16.348,7361,47.767,7362,51.517]],["name/203-31",[]],["text/203-31",[]],["component/203-31",[]],["title/203-32",[254,26.231,679,42.755,6021,45.067]],["name/203-32",[]],["text/203-32",[]],["component/203-32",[]],["title/203-33",[133,34.597,7363,78.021]],["name/203-33",[]],["text/203-33",[]],["component/203-33",[]],["title/203-34",[73,26.141,260,28.681,7364,58.558]],["name/203-34",[]],["text/203-34",[]],["component/203-34",[]],["title/203-35",[73,26.141,772,42.755,7364,58.558]],["name/203-35",[]],["text/203-35",[]],["component/203-35",[]],["title/203-36",[73,26.141,243,25.048,7364,58.558]],["name/203-36",[]],["text/203-36",[]],["component/203-36",[]],["title/203-37",[83,33.156,354,21.378,943,25.329,1540,32.379]],["name/203-37",[]],["text/203-37",[]],["component/203-37",[]],["title/203-38",[253,25.454,846,39.709,7365,66.6]],["name/203-38",[]],["text/203-38",[]],["component/203-38",[]],["title/203-39",[28,23.776]],["name/203-39",[]],["text/203-39",[]],["component/203-39",[]],["title/203-40",[1354,46.518,7366,78.021]],["name/203-40",[]],["text/203-40",[]],["component/203-40",[]],["title/203-41",[1944,42.755,7367,48.131,7368,66.6]],["name/203-41",[]],["text/203-41",[]],["component/203-41",[]],["title/203-42",[38,45.234]],["name/203-42",[]],["text/203-42",[]],["component/203-42",[]],["title/203-43",[7369,82.798]],["name/203-43",[]],["text/203-43",[]],["component/203-43",[]],["title/203-44",[7370,87.314]],["name/203-44",[]],["text/203-44",[]],["component/203-44",[]],["title/203-45",[272,29.626,7371,78.021]],["name/203-45",[]],["text/203-45",[]],["component/203-45",[]],["title/203-46",[445,30.33,5562,56.173,7372,66.6]],["name/203-46",[]],["text/203-46",[]],["component/203-46",[]],["title/203-47",[7373,87.314]],["name/203-47",[]],["text/203-47",[]],["component/203-47",[]],["title/203-48",[1944,42.755,7374,66.6,7375,66.6]],["name/203-48",[]],["text/203-48",[]],["component/203-48",[]],["title/203-49",[1944,50.087,7376,78.021]],["name/203-49",[]],["text/203-49",[]],["component/203-49",[]],["title/203-50",[201,31.38,521,48.416]],["name/203-50",[]],["text/203-50",[]],["component/203-50",[]],["title/203-51",[7367,56.384,7377,78.021]],["name/203-51",[]],["text/203-51",[]],["component/203-51",[]],["title/203-52",[7367,48.131,7378,58.558,7379,66.6]],["name/203-52",[]],["text/203-52",[]],["component/203-52",[]],["title/203-53",[1944,37.295,7367,41.985,7378,51.081,7380,58.096]],["name/203-53",[]],["text/203-53",[]],["component/203-53",[]],["title/203-54",[1944,37.295,7367,41.985,7378,51.081,7381,58.096]],["name/203-54",[]],["text/203-54",[]],["component/203-54",[]],["title/203-55",[964,27.764,7367,41.985,7382,53.866,7383,58.096]],["name/203-55",[]],["text/203-55",[]],["component/203-55",[]],["title/203-56",[1944,37.295,7367,41.985,7382,53.866,7384,58.096]],["name/203-56",[]],["text/203-56",[]],["component/203-56",[]],["title/203-57",[245,23.881,7367,41.985,7385,58.096,7386,53.866]],["name/203-57",[]],["text/203-57",[]],["component/203-57",[]],["title/203-58",[867,27.085,4706,45.955,7367,41.985,7387,58.096]],["name/203-58",[]],["text/203-58",[]],["component/203-58",[]],["title/203",[94,20.016]],["name/203",[94,0.727]],["text/203",[1,1.714,4,0.73,8,0.619,9,0.588,10,1.018,18,0.829,26,1.823,28,1.704,29,0.833,34,2.903,36,2.448,38,3.773,45,0.986,46,2.812,51,0.585,60,0.524,61,1.087,73,2.067,82,0.632,83,1.01,93,1.165,94,1.434,95,0.544,110,2.541,114,1.264,118,0.802,120,0.672,121,0.768,127,0.799,133,2.335,135,0.898,140,0.829,152,1.783,159,1.01,161,1.136,175,1.589,188,2.215,190,0.614,200,0.951,201,0.712,202,2.966,203,1.045,206,2.119,207,1.165,232,1.134,236,2.275,243,0.665,244,1.213,247,4.001,253,1.213,254,3.699,260,2.906,263,1.837,266,0.817,270,0.903,272,2.787,279,3.489,302,1.225,306,2.215,309,1.3,310,2.118,311,1.123,317,1.893,318,0.762,330,2.046,332,1.932,335,1.402,344,0.759,354,1.589,361,1.065,363,2.667,388,1.356,392,1.123,396,1.304,412,2.623,419,1.718,445,2.762,506,3.738,521,1.098,527,0.661,559,2.142,560,0.833,573,0.92,580,3.135,583,0.759,591,2.004,623,2.445,629,1.304,646,1.197,654,1.01,658,2.218,662,2.167,677,3.519,690,1.045,692,0.771,729,0.727,734,1.076,741,1.286,754,1.37,764,1.992,767,1.719,772,1.136,773,1.01,776,2.337,779,2.253,805,1.911,806,2.892,824,1.045,834,1.575,846,1.893,858,0.678,867,0.825,869,2.337,871,2.652,889,1.123,935,1.11,943,5.541,963,0.898,964,1.517,1004,0.926,1008,1.279,1010,5.499,1021,1.743,1024,1.055,1033,1.215,1044,2.13,1046,0.932,1059,0.799,1068,0.945,1075,2.673,1077,1.556,1093,1.197,1108,1.332,1117,0.915,1198,0.85,1201,0.958,1345,0.932,1354,1.055,1365,1.045,1399,0.799,1420,3.331,1448,1.065,1507,1.235,1540,1.77,1571,3.51,1575,3.551,1580,1.215,1740,1.197,1944,4.332,1992,1.123,1994,1.098,1996,1.556,2039,0.893,2077,1.165,2098,4.166,2101,1.364,2147,1.279,2181,3.251,2252,2.587,2393,1.641,2792,2.148,2804,1.492,3290,1.123,4280,1.279,4327,2.34,4706,1.4,5245,1.442,5497,3.121,5885,2.678,6021,5.315,6063,1.641,6128,1.235,6306,2.511,6307,1.442,6812,2.792,6849,2.944,6850,1.641,7334,1.641,7386,1.641,7388,1.769,7389,1.769,7390,1.769,7391,1.769,7392,1.769,7393,1.769,7394,1.769,7395,1.769,7396,1.769,7397,1.769,7398,1.769,7399,1.769,7400,1.769,7401,1.769,7402,1.769,7403,1.769,7404,1.769,7405,1.769,7406,1.769,7407,1.769,7408,1.769,7409,1.769,7410,1.769,7411,5.624,7412,1.769,7413,1.769,7414,1.769,7415,1.769,7416,1.769,7417,1.769,7418,1.769,7419,1.769,7420,1.769,7421,1.769,7422,3.175,7423,1.769,7424,1.769,7425,1.769,7426,1.769,7427,1.769,7428,1.769,7429,4.318,7430,1.769,7431,1.769,7432,1.769,7433,1.769,7434,1.769,7435,1.769,7436,1.769,7437,1.769,7438,1.769,7439,4.318,7440,1.769,7441,1.769,7442,1.769,7443,3.175,7444,1.769,7445,1.769,7446,1.769,7447,1.769,7448,3.175,7449,1.769,7450,1.769,7451,1.769,7452,1.769]],["component/203",[18,0.821,943,1.37]],["title/204",[1,8.821,18,15.178,880,29.664,943,25.329]],["name/204",[3,1.478]],["text/204",[1,1.423,18,3.472,51,3.099,56,3.718,169,5.887,172,4.228,393,5.005,412,4.054,515,7.022,560,4.414,880,6.485,881,3.583,883,8.243,888,6.542,943,5.086,1194,4.625,1591,6.019]],["component/204",[18,0.821,943,1.37]],["title/205-1",[1,10.112,712,43.282,943,29.037]],["name/205-1",[]],["text/205-1",[]],["component/205-1",[]],["title/205-2",[94,20.016]],["name/205-2",[]],["text/205-2",[]],["component/205-2",[]],["title/205-3",[1,10.112,245,27.377,943,29.037]],["name/205-3",[]],["text/205-3",[]],["component/205-3",[]],["title/205",[169,47.519]],["name/205",[169,1.725]],["text/205",[1,1.905,10,1.314,18,1.071,21,1.314,34,2.718,37,1.609,46,2.896,48,1.542,66,2.188,72,1.772,82,2.314,83,2.339,94,1.94,95,1.26,98,3.096,110,2.714,119,3.391,120,1.557,127,1.85,147,1.724,152,2.302,165,6.235,166,3.128,169,2.068,172,1.486,188,3.838,189,1.902,190,1.423,193,2.444,201,1.649,219,1.419,225,1.685,232,1.464,236,2.16,245,2.663,254,2.551,260,4.55,261,2.517,264,1.604,272,1.557,276,1.481,287,3.516,302,1.582,308,3.308,310,3.998,330,1.593,342,1.661,346,1.99,347,2.146,354,2.384,356,3.065,361,5.493,363,3.531,388,1.751,435,2.093,442,2.909,445,2.95,527,2.421,560,1.93,571,2.057,573,2.132,623,3.667,625,2.962,635,2.203,662,2.057,676,2.774,692,1.787,712,2.664,728,2.4,732,2.146,741,1.661,767,1.631,806,2.251,816,2.4,821,1.959,834,2.033,851,3.938,869,2.219,943,5.148,962,2.339,967,1.884,985,2.816,1056,3.604,1078,3.021,1086,5.696,1187,2.359,1520,2.909,1600,3.611,1930,2.909,1992,2.601,2087,3.34,3148,4.774,4239,2.962,5497,2.962,6021,4.384,6147,3.159,6606,3.457,6846,3.801,7272,3.801,7273,3.801,7274,3.801,7340,7.062,7341,3.801,7356,3.801,7453,4.099,7454,4.099,7455,4.099,7456,4.099,7457,4.099]],["component/205",[18,0.821,943,1.37]],["title/206",[187,43.157,188,32.809]],["name/206",[187,1.105,188,0.84]],["text/206",[1,1.251,10,2.641,21,3.444,34,2.939,46,2.081,82,2.943,95,2.533,125,3.608,176,3.938,188,5.527,272,4.54,276,2.978,335,3.639,655,4.022,658,4.234,676,7.272,729,3.388,754,3.41,856,5.302,960,6.715,1039,7,1153,4.501,1194,4.066,7458,10.746,7459,8.241,7460,8.241,7461,8.241]],["component/206",[18,0.821,943,1.37]],["title/207",[521,41.328,837,35.086,1104,38.326]],["name/207",[837,1.801]],["text/207",[1,1.855,32,5.133,40,4.648,46,2.553,60,2.994,105,6.572,118,4.584,129,5.869,132,5.512,334,4.883,528,5.016,662,5.073,834,5.016,943,4.409,1174,8.24,1178,7.452]],["component/207",[18,0.821,943,1.37]],["title/208-1",[243,29.344,964,37.286]],["name/208-1",[]],["text/208-1",[]],["component/208-1",[]],["title/208-2",[662,39.143,7289,49.501]],["name/208-2",[]],["text/208-2",[]],["component/208-2",[]],["title/208-3",[95,23.985,662,39.143]],["name/208-3",[]],["text/208-3",[]],["component/208-3",[]],["title/208-4",[21,21.347,754,21.134,1153,27.899]],["name/208-4",[]],["text/208-4",[]],["component/208-4",[]],["title/208-5",[1,6.378,21,13.463,580,21.711,754,13.329,943,18.313,956,22.898,1153,17.596]],["name/208-5",[]],["text/208-5",[]],["component/208-5",[]],["title/208-6",[1,6.378,21,13.463,51,13.885,580,21.711,754,13.329,943,18.313,1153,17.596]],["name/208-6",[]],["text/208-6",[]],["component/208-6",[]],["title/208-7",[121,33.875,1477,53.59]],["name/208-7",[]],["text/208-7",[]],["component/208-7",[]],["title/208",[21,25.007,1399,35.211]],["name/208",[21,0.64,1399,0.901]],["text/208",[1,1.448,4,1.684,9,2.145,10,0.754,15,1.001,18,1.687,21,3.911,22,3.086,34,0.643,36,0.949,41,1.548,46,0.594,51,2.647,54,0.97,60,2.371,72,1.017,80,1.63,82,0.84,95,2.246,110,1.71,115,1.669,120,0.893,122,1.086,133,1.043,135,2.072,140,1.102,149,1.931,151,0.985,164,1.052,175,0.865,176,1.95,177,1.017,184,1.081,190,3.16,201,0.946,225,0.967,232,1.458,237,1.034,242,2.44,243,2.428,244,2.067,245,0.967,253,2.067,263,1.736,270,2.084,272,3.266,276,1.475,279,0.905,280,0.97,304,2.275,305,1.086,309,0.963,330,2.101,332,1.052,335,1.038,342,0.953,352,1.301,354,0.865,363,2.377,388,1.004,397,1.001,412,1.017,425,0.985,436,2.906,437,1.223,438,1.885,439,1.135,504,2.328,505,1.201,522,1.733,530,1.81,575,1.903,580,2.795,588,1.166,589,1.321,635,1.264,655,5.827,662,5.423,686,3.008,722,1.135,741,1.653,754,3.832,763,2.506,764,1.475,767,3.187,780,1.247,805,3.255,806,2.969,816,1.377,817,1.415,821,1.124,849,1.733,856,3.814,862,1.548,880,3.296,910,1.331,927,2.072,933,1.365,943,4.909,956,1.282,964,4.559,967,2.967,968,2.411,977,1.51,988,1.223,1004,1.231,1028,1.377,1039,2.389,1044,1.16,1136,1.291,1153,3.603,1158,2.136,1218,2.194,1348,3.924,1360,1.615,1399,1.061,1418,0.997,1420,3.545,1440,1.916,1464,1.255,1477,6.253,1540,1.311,1541,1.641,1571,2.123,1652,1.528,1656,2.723,1691,1.429,1741,1.591,1757,1.51,1767,2.067,1775,3.228,1807,1.641,1841,2.097,1853,1.444,2054,1.699,2119,1.77,2272,1.194,2273,1.548,2526,3.008,2593,1.669,2696,1.641,2756,2.803,2853,1.812,2877,1.916,3516,1.591,4343,1.77,6298,2.18,6847,1.983,6865,1.733,7275,1.77,7281,1.699,7288,1.916,7289,3.431,7291,3.228,7292,4.07,7462,2.351,7463,2.351,7464,2.351,7465,2.067,7466,2.067,7467,2.067,7468,2.067,7469,2.351,7470,5.986,7471,2.351,7472,2.351]],["component/208",[18,0.821,943,1.37]],["title/209-1",[243,29.344,964,37.286]],["name/209-1",[]],["text/209-1",[]],["component/209-1",[]],["title/209-2",[662,39.143,7289,49.501]],["name/209-2",[]],["text/209-2",[]],["component/209-2",[]],["title/209-3",[95,23.985,662,39.143]],["name/209-3",[]],["text/209-3",[]],["component/209-3",[]],["title/209-4",[95,20.474,110,27.899,662,33.413]],["name/209-4",[]],["text/209-4",[]],["component/209-4",[]],["title/209-5",[28,16.815,754,21.134,1153,27.899]],["name/209-5",[]],["text/209-5",[]],["component/209-5",[]],["title/209-6",[1,6.378,28,10.605,580,21.711,754,13.329,943,18.313,956,22.898,1153,17.596]],["name/209-6",[]],["text/209-6",[]],["component/209-6",[]],["title/209-7",[1,6.378,28,10.605,51,13.885,580,21.711,754,13.329,943,18.313,1153,17.596]],["name/209-7",[]],["text/209-7",[]],["component/209-7",[]],["title/209",[28,19.699,1399,35.211]],["name/209",[28,0.504,1399,0.901]],["text/209",[1,1.576,3,1.943,4,1.085,9,3.025,10,0.843,15,1.912,18,1.537,28,3.283,34,1.609,36,1.061,46,0.664,51,2.816,54,1.085,60,2.061,73,1.032,80,1.794,82,0.939,95,2.798,110,2.916,120,0.998,122,1.214,133,1.166,149,2.126,151,1.101,164,1.176,172,2.523,175,0.967,189,1.22,190,3.33,201,1.057,242,1.186,243,3.204,244,1.717,270,2.294,272,3.456,276,0.95,279,1.011,304,3.279,309,1.077,330,2.704,332,1.176,342,1.065,344,1.927,355,1.433,363,1.156,397,1.912,412,1.137,425,1.101,436,3.162,438,1.214,504,2.997,530,1.992,571,1.319,580,3.041,588,1.304,589,1.477,635,1.413,655,5.588,662,5.937,692,1.146,694,3.386,741,1.065,754,3.807,763,1.614,767,3.818,780,1.394,806,3.23,817,1.582,821,1.256,826,1.359,849,1.937,856,3.467,880,3.554,910,1.488,927,2.28,943,4.787,956,1.433,964,5.113,968,2.654,977,2.884,1004,1.376,1021,2.467,1037,1.779,1039,2.63,1044,1.297,1136,1.444,1153,3.813,1158,2.352,1218,3.162,1348,4.753,1354,1.567,1399,2.028,1420,1.444,1440,2.142,1447,1.779,1464,1.404,1540,1.465,1571,1.367,1691,1.598,1741,1.779,1903,1.835,2312,1.866,2340,3.462,2405,1.979,2593,1.866,2756,4.041,2853,2.026,2877,2.142,3516,1.779,4731,2.217,6847,2.217,7192,2.08,7275,1.979,7281,3.247,7288,2.142,7289,3.733,7291,3.554,7292,5.239,7465,2.312,7466,2.312,7467,2.312,7468,2.312,7473,2.629,7474,2.312,7475,2.438,7476,2.629,7477,2.438,7478,2.629]],["component/209",[18,0.821,943,1.37]],["title/210",[95,23.985,1399,35.211]],["name/210",[95,0.614,1399,0.901]],["text/210",[1,1.525,21,2.387,28,1.88,34,2.037,46,1.88,51,3.321,54,3.072,95,4.026,189,3.455,242,3.361,243,2.801,330,2.893,388,4.292,397,3.168,412,4.344,504,4.327,580,3.849,602,3.975,655,3.634,662,6.715,754,3.188,760,3.898,767,3.998,800,2.592,826,3.849,856,3.302,910,4.216,927,5.099,943,4.957,968,4.399,977,4.78,1153,3.119,1345,3.923,1348,4.526,1399,3.361,7289,6.374]],["component/210",[18,0.821,943,1.37]],["title/211-1",[243,29.344,964,37.286]],["name/211-1",[]],["text/211-1",[]],["component/211-1",[]],["title/211-2",[662,39.143,7289,49.501]],["name/211-2",[]],["text/211-2",[]],["component/211-2",[]],["title/211-3",[95,23.985,662,39.143]],["name/211-3",[]],["text/211-3",[]],["component/211-3",[]],["title/211-4",[754,21.134,800,23.18,1153,27.899]],["name/211-4",[]],["text/211-4",[]],["component/211-4",[]],["title/211-5",[1,6.378,580,21.711,754,13.329,800,14.62,943,18.313,956,22.898,1153,17.596]],["name/211-5",[]],["text/211-5",[]],["component/211-5",[]],["title/211-6",[1,6.378,51,13.885,580,21.711,754,13.329,800,14.62,943,18.313,1153,17.596]],["name/211-6",[]],["text/211-6",[]],["component/211-6",[]],["title/211",[800,27.155,1399,35.211]],["name/211",[800,0.695,1399,0.901]],["text/211",[1,1.666,4,1.367,9,2.311,10,1.062,15,1.41,18,1.425,21,1.062,28,0.837,34,0.906,36,1.337,46,0.837,51,2.947,54,1.367,60,2.387,80,2.179,82,1.183,95,2.478,110,1.388,120,1.258,122,1.53,133,1.469,149,1.568,151,1.388,164,1.482,175,1.219,190,3.676,201,1.333,242,2.462,243,3.032,244,1.266,270,2.786,272,3.85,276,1.197,279,1.275,304,3.041,309,1.357,330,2.702,332,1.482,342,1.342,363,1.457,397,1.41,412,1.433,425,1.388,436,3.738,504,2.995,530,2.419,580,3.595,588,1.644,589,1.861,635,1.781,655,5.515,662,6.044,741,1.342,754,3.938,767,3.816,780,1.757,800,4.26,806,2.996,817,1.994,821,1.583,849,2.442,856,3.575,880,3.551,910,1.876,927,2.769,943,4.927,956,1.806,964,5.245,968,3.223,977,2.127,1004,1.734,1039,3.194,1044,1.635,1136,1.819,1153,4.247,1158,2.856,1218,2.933,1348,4.901,1399,1.495,1420,1.819,1440,2.7,1464,1.769,1540,1.847,1571,1.723,1691,2.014,1741,2.242,2593,2.352,2696,2.312,2709,2.312,2756,3.747,2853,2.553,2877,2.7,3025,2.553,3516,2.242,6847,2.795,7275,2.494,7281,2.395,7288,2.7,7289,4.413,7291,4.316,7292,4.107,7465,2.913,7466,2.913,7467,2.913,7468,2.913,7479,3.313,7480,3.313]],["component/211",[18,0.821,943,1.37]],["title/212-1",[173,47.338,6870,49,7481,58.096,7482,58.096]],["name/212-1",[]],["text/212-1",[]],["component/212-1",[]],["title/212-2",[168,43.484,704,43.484]],["name/212-2",[]],["text/212-2",[]],["component/212-2",[]],["title/212-3",[71,22.276,175,18.958,691,23.679,1130,31.01,3196,25.276]],["name/212-3",[]],["text/212-3",[]],["component/212-3",[]],["title/212-4",[710,40.838,1448,46.963]],["name/212-4",[]],["text/212-4",[]],["component/212-4",[]],["title/212-5",[173,47.338,6934,49,7483,58.096,7484,58.096]],["name/212-5",[]],["text/212-5",[]],["component/212-5",[]],["title/212-6",[168,43.484,704,43.484]],["name/212-6",[]],["text/212-6",[]],["component/212-6",[]],["title/212-7",[71,22.276,175,18.958,691,23.679,1130,31.01,3196,25.276]],["name/212-7",[]],["text/212-7",[]],["component/212-7",[]],["title/212-8",[710,40.838,1448,46.963]],["name/212-8",[]],["text/212-8",[]],["component/212-8",[]],["title/212-9",[173,47.338,7485,58.096,7486,53.866,7487,58.096]],["name/212-9",[]],["text/212-9",[]],["component/212-9",[]],["title/212-10",[168,43.484,704,43.484]],["name/212-10",[]],["text/212-10",[]],["component/212-10",[]],["title/212-11",[71,22.276,175,18.958,691,23.679,1130,31.01,3196,25.276]],["name/212-11",[]],["text/212-11",[]],["component/212-11",[]],["title/212-12",[710,40.838,1448,46.963]],["name/212-12",[]],["text/212-12",[]],["component/212-12",[]],["title/212-13",[160,49,6870,49,7488,58.096,7489,53.866]],["name/212-13",[]],["text/212-13",[]],["component/212-13",[]],["title/212-14",[168,43.484,704,43.484]],["name/212-14",[]],["text/212-14",[]],["component/212-14",[]],["title/212-15",[71,22.276,175,18.958,691,23.679,1130,31.01,3196,25.276]],["name/212-15",[]],["text/212-15",[]],["component/212-15",[]],["title/212-16",[710,40.838,1448,46.963]],["name/212-16",[]],["text/212-16",[]],["component/212-16",[]],["title/212-17",[160,49,7490,58.096,7491,84.421]],["name/212-17",[]],["text/212-17",[]],["component/212-17",[]],["title/212-18",[168,43.484,704,43.484]],["name/212-18",[]],["text/212-18",[]],["component/212-18",[]],["title/212-19",[71,22.276,175,18.958,691,23.679,1130,31.01,3196,25.276]],["name/212-19",[]],["text/212-19",[]],["component/212-19",[]],["title/212-20",[710,40.838,1448,46.963]],["name/212-20",[]],["text/212-20",[]],["component/212-20",[]],["title/212-21",[160,49,7486,53.866,7492,58.096,7493,53.866]],["name/212-21",[]],["text/212-21",[]],["component/212-21",[]],["title/212",[8,27.309,280,32.191]],["name/212",[8,0.699,280,0.824]],["text/212",[1,1.473,2,0.551,9,0.633,10,0.611,21,2.457,22,1.088,26,0.805,28,2.179,29,0.897,34,0.521,37,2.776,38,2.203,46,2.369,48,2.4,51,1.122,54,1.4,59,1.332,90,0.856,94,0.721,95,3.221,110,1.921,114,0.759,115,1.353,133,0.845,140,0.893,147,2.683,153,2.555,163,3.941,165,4.002,168,3.556,169,3.219,172,2.563,175,2.348,188,1.929,196,0.985,201,0.767,202,4.382,203,2.005,208,1.039,209,1.106,219,0.66,243,1.276,244,2.703,245,0.784,254,2.785,260,3.045,276,3.505,279,3.732,286,1.255,300,0.808,302,0.736,310,3.083,320,3.529,335,1.498,344,1.456,346,3.097,355,1.039,356,0.902,360,1.209,363,2.016,391,2.944,423,2.275,425,1.422,432,3.318,445,2.089,533,1.088,573,2.385,609,1.011,623,1.079,640,1.608,655,0.93,662,0.956,691,2.108,710,2.401,711,3.672,735,3.735,741,0.772,754,3.325,759,1.079,760,2.401,763,1.171,767,0.759,778,0.673,789,1.656,800,3.004,829,0.821,836,1.743,846,2.023,856,2.034,858,0.731,861,3.379,870,1.126,889,1.209,927,1.723,935,5.414,939,1.647,943,5.329,962,1.088,964,2.192,968,3.287,988,2.894,1046,1.004,1109,2.368,1117,0.985,1130,1.147,1132,2.106,1198,1.63,1209,1.171,1273,1.693,1344,1.224,1348,1.159,1354,2.734,1361,2.501,1365,1.126,1372,2.615,1418,3.826,1420,2.518,1439,2.684,1463,1.071,1475,1.196,1477,2.331,1498,1.272,1502,2.408,1515,1.33,1520,1.353,1534,4.693,1572,1.183,1641,4.693,1667,1.224,1740,1.29,1747,1.676,1833,1.106,1864,1.405,1961,1.088,2286,1.435,2312,3.255,2405,1.435,2571,1.469,2649,1.435,2804,1.608,2877,1.553,2897,1.768,2964,4.189,3068,1.33,3290,1.209,4327,2.501,4565,2.862,5246,1.469,5405,1.553,5428,1.768,5429,1.768,5658,1.608,5812,1.608,6021,1.29,6056,1.676,6511,1.768,7281,1.378,7289,1.209,7292,6.797,7333,1.676,7340,1.676,7342,1.768,7343,4.1,7344,1.768,7345,1.768,7358,1.768,7359,1.768,7470,3.147,7474,1.676,7494,3.394,7495,6.38,7496,5.916,7497,1.906,7498,1.906,7499,1.906,7500,1.906,7501,1.906,7502,1.906,7503,1.906,7504,1.906,7505,1.906,7506,1.906,7507,1.906,7508,1.906,7509,1.906,7510,1.906,7511,1.906,7512,1.906,7513,1.906,7514,1.906]],["component/212",[18,0.821,943,1.37]],["title/213-1",[662,33.413,964,31.828,7289,42.255]],["name/213-1",[]],["text/213-1",[]],["component/213-1",[]],["title/213-2",[95,23.985,964,37.286]],["name/213-2",[]],["text/213-2",[]],["component/213-2",[]],["title/213",[21,25.007,856,34.597]],["name/213",[21,0.64,856,0.885]],["text/213",[1,1.496,9,2.209,10,2.131,18,1.352,21,3.719,22,5.304,34,1.415,37,1.22,46,2.174,51,2.198,59,1.22,60,1.532,95,2.857,118,1.409,164,1.391,188,2.176,189,2.401,190,3.226,200,1.671,232,1.11,242,1.403,243,3.706,244,1.188,250,1.379,254,1.224,263,2.829,264,2.025,270,1.587,272,2.525,276,2.403,302,1.998,309,1.273,317,3.086,318,1.339,323,1.972,330,2.011,332,2.315,335,1.373,397,1.323,412,1.344,425,2.168,437,1.617,504,2.229,522,5.713,530,2.295,573,1.617,582,1.638,588,1.542,609,2.745,642,3.03,655,5.394,662,6.035,694,1.789,729,1.278,741,2.097,746,4.436,754,3.127,760,5.158,767,2.06,793,1.89,800,2.314,805,1.871,806,2.842,825,3.322,856,4.121,880,1.587,888,3.612,909,1.76,910,1.76,927,4.718,935,1.95,937,1.707,943,1.355,964,4.709,968,3.928,969,1.569,1033,2.135,1039,3.03,1044,3.28,1117,1.607,1136,4.256,1151,1.237,1153,1.302,1218,4.628,1232,1.871,1333,3.896,1341,1.587,1345,1.638,1348,4.042,1420,4.256,1463,1.746,1656,3.453,1775,4.094,1801,3.453,2088,2.206,2571,2.396,2577,2.291,2696,3.612,3516,4.499,7275,2.34,7281,3.74,7282,5.846,7289,5.462,7320,2.733,7515,3.109,7516,3.109,7517,5.175,7518,2.733,7519,3.109,7520,4.799,7521,3.109]],["component/213",[18,0.821,943,1.37]],["title/214-1",[662,33.413,964,31.828,7289,42.255]],["name/214-1",[]],["text/214-1",[]],["component/214-1",[]],["title/214-2",[95,20.474,662,33.413,964,31.828]],["name/214-2",[]],["text/214-2",[]],["component/214-2",[]],["title/214-3",[95,17.859,110,24.336,662,29.147,964,27.764]],["name/214-3",[]],["text/214-3",[]],["component/214-3",[]],["title/214",[28,19.699,856,34.597]],["name/214",[28,0.504,856,0.885]],["text/214",[1,1.446,4,0.966,9,3.019,10,1.304,18,1.408,28,2.725,34,1.112,37,0.919,46,1.84,51,2.128,60,1.906,73,2.116,95,3.318,110,3.053,151,2.258,164,1.819,166,3.108,175,1.984,188,2.267,189,1.887,190,4.088,200,1.259,219,1.866,232,0.836,243,3.228,244,1.554,254,0.922,263,1.73,264,2.109,270,3.287,272,2.445,276,1.948,302,1.57,317,3.214,330,1.58,332,2.411,363,1.03,398,1.371,412,2.331,425,1.704,437,2.115,438,1.081,504,2.321,530,1.803,588,1.162,609,2.157,655,4.832,662,6.116,694,3.102,741,1.647,760,3.814,767,1.618,789,3.899,793,1.424,806,2.96,825,3.46,826,1.21,834,2.017,856,1.803,880,1.196,888,3.762,909,1.326,910,2.302,927,4.612,935,1.469,943,2.35,957,1.692,964,4.55,968,3.184,969,1.182,973,2.571,1021,2.233,1039,3.769,1075,1.189,1125,5.092,1136,2.233,1218,2.186,1341,1.196,1348,3.277,1399,1.835,1463,1.315,1600,1.305,1758,1.268,2340,3.134,2405,5.486,2571,1.805,3008,2.886,3516,3.647,3658,5.969,4731,6.146,7192,5.765,7275,1.763,7281,4.652,7289,4.084,7291,1.853,7292,3.062,7474,6.407,7475,4.998,7477,5.969,7489,5.969,7518,4.739,7522,2.342,7523,2.342,7524,9.086,7525,9.086,7526,9.086,7527,9.086,7528,9.086,7529,5.39,7530,4.067,7531,4.067,7532,2.342]],["component/214",[18,0.821,943,1.37]],["title/215",[95,23.985,856,34.597]],["name/215",[95,0.614,856,0.885]],["text/215",[1,1.743,21,2.434,28,1.917,34,2.784,46,1.917,51,2.51,54,3.133,95,4.049,189,3.523,242,3.427,243,2.856,330,2.95,397,3.231,580,3.925,602,4.054,655,5.603,662,6.607,760,3.974,767,4.051,784,3.574,800,2.643,826,3.925,839,3.474,856,5.092,910,4.298,927,5.167,943,5.349,968,4.485,977,4.874,1345,4,1348,4.615,1599,5.299,7289,4.817]],["component/215",[18,0.821,943,1.37]],["title/216-1",[662,33.413,964,31.828,7289,42.255]],["name/216-1",[]],["text/216-1",[]],["component/216-1",[]],["title/216-2",[95,20.474,662,33.413,964,31.828]],["name/216-2",[]],["text/216-2",[]],["component/216-2",[]],["title/216",[800,27.155,856,34.597]],["name/216",[800,0.695,856,0.885]],["text/216",[1,1.538,2,0.859,9,2.79,10,1.598,18,1.303,21,0.953,34,2.061,37,1.957,46,1.626,51,2.128,54,1.227,60,1.476,93,1.957,95,2.968,159,1.697,164,1.33,188,2.097,189,2.313,190,3.154,200,1.598,232,1.062,242,1.342,243,4.204,244,1.136,251,1.726,254,1.171,264,2.519,266,1.373,267,2.238,272,2.862,276,2.327,279,1.144,302,1.148,317,2.973,330,1.937,332,2.23,335,2.843,342,1.204,363,1.307,412,1.286,425,2.089,437,1.546,504,2.147,530,2.211,582,1.566,588,1.475,609,2.644,655,4.943,662,6.053,694,2.869,729,1.222,741,2.02,748,1.826,754,3.064,760,5.851,764,3.128,767,1.984,793,1.807,800,4.257,806,2.738,825,3.201,834,1.475,856,4.03,880,1.518,888,3.479,909,1.683,910,1.683,927,4.613,935,3.128,937,1.633,943,2.807,964,4.614,968,3.804,969,1.5,988,3.92,1039,2.919,1044,3.718,1117,1.537,1136,1.633,1153,1.245,1218,4.885,1333,3.753,1341,2.546,1345,2.627,1348,3.914,1372,5.809,1418,1.26,1463,1.67,1758,1.609,1801,1.984,1958,2.042,2088,2.11,2099,2.11,2571,2.291,2577,2.191,2696,4.493,2709,2.075,2907,2.238,2908,1.984,3516,4.357,5562,2.508,6229,2.757,7275,2.238,7281,3.603,7289,5.328,7299,5.662,7320,2.614,7326,6.989,7518,2.614,7520,2.757,7533,2.973,7534,4.986,7535,2.973,7536,2.973,7537,2.973,7538,2.973]],["component/216",[18,0.821,943,1.37]],["title/217-1",[38,45.234]],["name/217-1",[]],["text/217-1",[]],["component/217-1",[]],["title/217-2",[201,31.38,521,48.416]],["name/217-2",[]],["text/217-2",[]],["component/217-2",[]],["title/217",[94,16.583,7539,61.717]],["name/217",[592,1.214,7539,1.58]],["text/217",[18,3.052,28,1.705,34,2.955,38,5.19,72,2.92,75,3.792,82,2.411,94,2.702,110,2.828,133,2.994,147,2.839,190,2.343,201,4.346,240,3.953,247,5.121,250,2.994,276,2.44,310,3.779,335,2.981,346,3.277,354,4.518,443,4.19,504,2.908,521,4.19,560,3.179,677,5.502,741,2.735,754,2.143,779,4.792,837,3.557,867,3.148,881,2.58,933,3.919,943,5.353,1021,3.707,1028,3.953,1214,5.341,1445,5.341,1841,3.468,2150,4.879,3290,4.284,4706,5.341,7367,4.879,7369,5.937,7539,8.547,7540,6.26,7541,6.752,7542,6.752]],["component/217",[18,0.821,943,1.37]],["title/218-1",[1118,72.57]],["name/218-1",[]],["text/218-1",[]],["component/218-1",[]],["title/218-2",[943,29.037,1171,38.992,7539,52.682]],["name/218-2",[]],["text/218-2",[]],["component/218-2",[]],["title/218-3",[21,25.007,754,24.758]],["name/218-3",[]],["text/218-3",[]],["component/218-3",[]],["title/218-4",[28,19.699,754,24.758]],["name/218-4",[]],["text/218-4",[]],["component/218-4",[]],["title/218-5",[754,24.758,800,27.155]],["name/218-5",[]],["text/218-5",[]],["component/218-5",[]],["title/218-6",[49,53.311]],["name/218-6",[]],["text/218-6",[]],["component/218-6",[]],["title/218-7",[1,11.846,46,19.699]],["name/218-7",[]],["text/218-7",[]],["component/218-7",[]],["title/218-8",[943,41.057]],["name/218-8",[]],["text/218-8",[]],["component/218-8",[]],["title/218-9",[60,23.101,412,33.736]],["name/218-9",[]],["text/218-9",[]],["component/218-9",[]],["title/218",[201,31.38,521,48.416]],["name/218",[3,1.478]],["text/218",[4,2.553,10,1.526,15,2.026,16,1.933,18,1.244,21,2.332,28,2.23,34,2.226,38,2.287,54,1.161,60,3.051,71,1.217,72,1.217,73,1.105,80,1.124,82,1.005,94,2.102,118,1.276,126,1.325,133,1.248,140,1.318,171,1.464,175,1.036,177,3.519,180,1.933,184,2.188,186,1.193,197,1.786,201,3.784,243,1.79,244,3.78,245,1.957,247,5.616,250,1.248,253,2.365,254,1.108,266,2.198,276,1.72,279,4.754,287,2.709,295,1.492,300,1.193,306,2.602,335,2.732,354,1.036,388,2.034,397,1.197,398,1.648,412,4.277,433,2.226,510,3.322,518,4.315,521,2.954,527,1.052,530,2.111,534,1.807,554,2.954,580,1.455,588,1.396,685,2.787,754,3.48,766,1.373,783,1.446,789,2.323,795,3.322,800,2.153,834,3.069,856,2.111,871,2.923,872,1.786,881,1.076,909,1.593,935,1.765,943,5.772,947,1.648,958,1.746,964,2.275,1004,4.259,1021,1.545,1030,1.513,1039,1.648,1058,1.746,1059,2.148,1092,2.074,1153,3.409,1199,3.056,1207,2.074,1216,1.593,1232,1.694,1240,2.119,1270,1.829,1303,1.464,1324,1.648,1325,3.221,1362,5.741,1365,1.663,1397,1.997,1399,1.27,1427,2.374,1428,1.997,1703,2.169,1904,2.034,1955,2.787,2098,3.766,2350,2.609,2902,1.829,3149,4.414,3290,1.786,3612,2.293,3727,2.374,3862,4.414,3898,4.414,4327,2.074,4386,3.766,4396,2.226,4565,2.374,4706,2.226,4886,1.904,5525,1.964,5759,4.186,5948,4.894,5969,1.853,6049,2.474,7539,7.442,7543,2.814,7544,4.761,7545,2.814,7546,2.609,7547,2.814,7548,2.814]],["component/218",[18,0.821,943,1.37]],["title/219",[]],["name/219",[95,0.614,412,0.863]],["text/219",[]],["component/219",[18,0.821,943,1.37]],["title/220",[]],["name/220",[412,0.863,7289,1.267]],["text/220",[]],["component/220",[18,0.821,943,1.37]],["title/221-1",[51,25.79,943,34.016]],["name/221-1",[]],["text/221-1",[]],["component/221-1",[]],["title/221-2",[51,25.79,412,33.736]],["name/221-2",[]],["text/221-2",[]],["component/221-2",[]],["title/221-3",[51,22.015,95,20.474,412,28.798]],["name/221-3",[]],["text/221-3",[]],["component/221-3",[]],["title/221-4",[51,22.015,412,28.798,7289,42.255]],["name/221-4",[]],["text/221-4",[]],["component/221-4",[]],["title/221",[51,22.015,66,35.555,880,34.007]],["name/221",[3,1.478]],["text/221",[1,1.705,10,1.524,11,6.79,12,7.442,21,3.169,28,2.689,34,2.414,48,1.789,51,4.084,60,3.154,95,3.593,122,2.196,151,3.046,193,4.335,201,1.913,242,2.146,243,2.735,250,2.109,279,1.83,295,2.522,304,4.053,330,1.848,342,2.946,363,4.347,388,3.106,412,5.054,417,3.691,580,2.458,602,3.882,662,4.96,729,1.955,732,4.621,754,3.38,760,5.175,766,4.308,767,1.893,800,3.441,829,2.048,856,4.384,880,2.428,943,5.095,963,2.414,964,2.273,968,2.809,973,1.899,977,3.053,1044,2.346,1068,2.539,1153,4.141,1234,3.505,1341,2.428,1345,2.505,1348,2.891,1356,3.665,1911,2.92,5906,4.409,7288,5.925,7289,4.613,7496,4.409,7549,4.756]],["component/221",[18,0.821,943,1.37]],["title/222",[]],["name/222",[943,1.491]],["text/222",[]],["component/222",[18,0.821,943,1.37]],["title/223-1",[34,15.889,38,27.906,243,21.85,1021,31.899]],["name/223-1",[]],["text/223-1",[]],["component/223-1",[]],["title/223-2",[38,37.477,419,42.23]],["name/223-2",[]],["text/223-2",[]],["component/223-2",[]],["title/223-3",[1,10.112,38,31.991,46,16.815]],["name/223-3",[]],["text/223-3",[]],["component/223-3",[]],["title/223-4",[38,31.991,243,25.048,519,43.841]],["name/223-4",[]],["text/223-4",[]],["component/223-4",[]],["title/223",[38,45.234]],["name/223",[3,1.478]],["text/223",[1,0.589,5,2.554,18,2.024,34,3.522,37,3.04,38,5.835,48,1.459,54,2.558,71,1.677,73,4.25,82,2.215,94,2.629,106,1.883,110,1.625,118,2.811,120,1.473,121,1.684,142,4.692,152,2.179,161,2.49,188,3.721,201,2.494,219,1.343,236,2.044,242,1.751,243,2.913,247,6.484,253,2.96,254,2.442,260,1.671,264,1.518,279,2.98,300,1.644,302,1.497,305,3.577,306,3.721,309,1.589,310,3.115,318,2.67,335,1.713,352,3.43,354,2.85,363,1.706,373,1.657,388,1.657,419,5.236,445,1.767,519,5.099,521,3.848,530,2.75,533,2.214,554,2.407,559,3.076,562,2.179,576,1.946,591,1.8,677,3.161,690,2.292,698,2.179,741,1.572,780,2.057,881,3.697,929,6.311,933,2.252,939,1.883,943,5.296,1013,2.162,1019,2.382,1020,2.625,1021,2.13,1059,1.751,1109,2.707,1196,2.313,1365,2.292,1402,2.461,1515,2.707,1524,2.588,1588,4.401,1691,2.358,1703,2.99,1760,2.044,2576,3.597,3113,2.99,4386,3.069,7369,3.411,7370,3.597,7373,3.597,7539,3.069,7540,3.597,7550,3.879,7551,3.879,7552,3.879,7553,3.879]],["component/223",[18,0.821,943,1.37]],["title/224-1",[9,22.131,740,22.488,1393,36.569]],["name/224-1",[]],["text/224-1",[]],["component/224-1",[]],["title/224-2",[528,33.037,961,38.009,7227,58.558]],["name/224-2",[]],["text/224-2",[]],["component/224-2",[]],["title/224",[9,17.119,56,20.431,172,18.673,740,17.395,989,27.885]],["name/224",[3,1.478]],["text/224",[1,1.525,2,2.151,9,3.778,10,2.387,26,4.241,32,5.099,46,1.88,49,4.216,54,3.072,56,2.953,60,2.975,93,4.902,94,1.583,95,2.289,116,4.724,121,3.233,123,3.346,132,4.059,145,4.78,164,3.331,425,3.119,583,4.877,740,3.839,821,3.559,837,3.923,1072,4.482,1081,4.968,1093,6.798,1176,5.606,1210,5.381,1263,5.196,1289,5.285,1434,4.78,1539,5.115,1833,4.322,1912,5.488,2292,5.285,6016,4.44,6043,5.606,6064,6.547,6568,6.547,6926,6.547,7554,6.281,7555,6.904,7556,6.904,7557,6.904,7558,6.547]],["component/224",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/225",[120,29.626,445,35.531]],["name/225",[120,0.758,445,0.909]],["text/225",[1,1.573,10,2.499,34,2.133,46,2.616,60,3.068,94,2.202,110,3.266,111,4.108,120,4.709,127,4.676,186,3.305,209,4.525,219,2.699,225,3.205,253,2.98,254,4.081,287,4.536,305,3.601,310,4.167,332,3.488,354,3.813,373,4.426,445,6.043,513,4.74,700,5.006,740,2.633,741,3.159,766,3.805,1013,5.775,1145,4.191,6016,6.178]],["component/225",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/226",[60,27.883]],["name/226",[60,1.012]],["text/226",[10,3.665,60,4.01,99,4.505,110,3.804,127,4.098,154,6.337,197,5.762,225,3.733,245,3.733,272,3.448,280,3.747,412,3.927,513,5.52,692,3.959,740,4.226,741,3.679,779,6.445,820,5.317,1013,6.976,1760,4.784,6016,5.415]],["component/226",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/227",[7559,68.055]],["name/227",[7559,2.471]],["text/227",[9,3.691,26,4.689,34,2.372,46,2.19,60,3.289,82,3.098,95,2.666,120,3.293,123,3.897,125,3.797,132,4.728,150,7.315,154,6.053,176,4.145,436,4.662,445,3.95,583,3.72,740,3.75,750,4.762,854,4.798,945,5.787,1176,6.529,1210,6.268,1931,5.326,2921,7.067,5569,7.626,5802,7.315,6016,5.171,6045,7.626,7263,6.861,7560,8.042,7561,8.042]],["component/227",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/228",[9,15.378,26,19.536,34,12.657,354,17.029,740,15.626,774,22.829]],["name/228",[354,0.735,774,0.985]],["text/228",[26,5.421,46,2.426,60,2.845,111,5.062,120,3.649,123,4.317,149,4.546,176,4.592,186,4.072,354,3.536,445,4.376,567,7.405,568,6.325,740,3.244,757,6.168,771,5.44,774,4.74,870,5.676,6016,7.062,7562,9.609]],["component/228",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/229-1",[1,5.839,9,12.778,46,9.709,254,15.146,300,16.298,354,14.151,419,20.814,740,12.984]],["name/229-1",[]],["text/229-1",[]],["component/229-1",[]],["title/229-2",[1,7.026,9,15.378,46,11.684,182,28.717,192,22.829,740,15.626]],["name/229-2",[]],["text/229-2",[]],["component/229-2",[]],["title/229-3",[1,7.026,46,11.684,126,21.786,189,21.472,698,25.992,767,18.417]],["name/229-3",[]],["text/229-3",[]],["component/229-3",[]],["title/229",[1,7.822,46,13.007,169,25.996,175,18.958,279,19.819]],["name/229",[169,1.008,279,0.768]],["text/229",[1,2.041,9,3.28,10,2.053,26,1.706,32,2.052,34,1.105,46,3.394,82,2.842,94,0.859,120,1.535,126,5.669,127,1.824,133,1.792,169,3.233,171,2.102,174,3.294,175,2.358,180,2.776,182,5.619,185,2.102,237,2.817,244,1.545,245,4.058,254,3.134,264,1.581,276,1.461,279,4.04,287,3.964,291,2.116,300,3.838,306,1.7,330,1.571,332,1.808,346,1.962,354,2.929,355,2.203,388,2.737,419,4.308,422,3.043,529,3.16,536,2.288,551,2.41,591,1.875,692,1.762,698,2.27,699,2.173,704,2.253,728,2.366,740,3.333,741,2.595,749,1.884,757,2.595,766,1.972,767,3.928,768,4.088,771,5.126,774,3.926,775,3.976,776,2.188,783,2.076,798,5.633,816,2.366,829,1.741,854,2.236,899,2.41,927,3.252,1021,4.37,1212,2.326,1273,2.016,1392,2.776,1757,2.595,2039,2.04,2247,2.27,2344,2.697,2427,3.043,2560,2.41,4271,3.043,5200,4.79,5802,3.409,6037,2.697,6177,5.049,7218,3.748,7563,4.042]],["component/229",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/230",[9,22.131,120,25.29,740,22.488]],["name/230",[120,1.298]],["text/230",[9,3.997,34,2.695,152,5.535,176,4.709,276,3.561,348,7.121,557,6.876,559,4.888,728,5.769,740,4.062,776,5.334,829,4.244,850,7.418,1026,7.594,1039,5.769,6037,6.574,6616,8.029,7564,9.854]],["component/230",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/231",[9,22.131,127,30.057,740,22.488]],["name/231",[127,1.543]],["text/231",[1,1.92,2,2.681,26,2.801,32,3.368,34,1.815,46,3.08,60,1.965,119,3.473,122,3.064,125,2.905,127,5.857,151,3.888,180,4.558,207,4.368,219,2.297,222,3.787,236,3.496,253,2.536,269,3.109,272,3.524,279,4.46,308,3.388,363,4.081,373,3.965,516,3.388,527,2.48,551,3.956,611,4.163,779,4.71,809,4.034,820,3.885,844,3.221,854,5.134,963,3.368,1180,4.312,1196,3.956,1296,4.89,1426,5.597,1464,3.543,1478,3.757,1760,3.496,2051,5.407,2077,4.368,2292,4.71,5525,4.631,6472,6.153,7565,6.636,7566,6.636,7567,6.636,7568,6.636,7569,6.636,7570,6.636,7571,6.153]],["component/231",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/232-1",[276,18.617,280,21.256,362,28.497,518,27.32,7572,51.517]],["name/232-1",[]],["text/232-1",[]],["component/232-1",[]],["title/232",[309,31.953,3577,63.574]],["name/232",[3577,2.786]],["text/232",[1,1.366,2,1.832,9,4.258,33,4.676,34,2.46,44,4.585,46,1.602,78,6.628,120,2.409,122,2.93,123,2.851,124,3.937,132,3.459,172,2.3,181,3.651,188,2.668,189,2.944,204,5.17,234,4.776,253,2.425,330,2.465,388,2.71,440,3.459,504,2.732,518,3.365,570,3.651,583,2.721,586,4.123,601,3.937,740,4.421,766,3.096,767,2.525,771,5.091,774,3.13,785,4.585,809,3.857,862,4.177,899,3.783,948,4.676,963,3.221,968,3.748,1004,3.321,1062,3.98,1093,7.069,1130,3.819,1145,3.411,1303,3.3,1504,5.579,1523,4.177,1541,4.428,1725,5.17,1989,4.358,3577,7.328,4149,5.352,5200,3.819,5469,4.89,6177,5.706,6403,5.019,7573,6.345,7574,6.345,7575,6.345,7576,6.345,7577,5.883]],["component/232",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/233-1",[9,22.131,740,22.488,1393,36.569]],["name/233-1",[]],["text/233-1",[]],["component/233-1",[]],["title/233-2",[528,33.037,961,38.009,7227,58.558]],["name/233-2",[]],["text/233-2",[]],["component/233-2",[]],["title/233",[9,17.119,120,19.562,254,20.29,698,28.935,740,17.395]],["name/233",[3,1.478]],["text/233",[1,1.525,2,2.151,9,3.778,10,2.387,26,4.241,32,5.099,46,1.88,49,4.216,54,3.072,56,2.953,60,2.975,93,4.902,94,1.583,95,2.289,116,4.724,121,3.233,123,3.346,132,4.059,145,4.78,164,3.331,425,3.119,583,4.877,740,3.839,821,3.559,837,3.923,1072,4.482,1081,4.968,1093,6.798,1176,5.606,1210,5.381,1263,5.196,1289,5.285,1434,4.78,1539,5.115,1833,4.322,1912,5.488,2292,5.285,6016,4.44,6043,5.606,6064,6.547,6568,6.547,6926,6.547,7554,6.281,7555,6.904,7556,6.904,7557,6.904,7558,6.547]],["component/233",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/234-1",[300,21.834,354,18.958,438,23.79,742,26.966,1194,25.414]],["name/234-1",[]],["text/234-1",[]],["component/234-1",[]],["title/234-2",[300,21.834,354,18.958,439,24.875,757,33.072,1194,25.414]],["name/234-2",[]],["text/234-2",[]],["component/234-2",[]],["title/234-3",[60,17.202,254,22.881,435,29.664,1194,28.66]],["name/234-3",[]],["text/234-3",[]],["component/234-3",[]],["title/234",[114,26.505,344,28.565,698,37.407]],["name/234",[300,0.598,354,0.519,742,0.738]],["text/234",[1,1.755,2,2.667,4,1.728,9,3.84,10,2.611,34,1.802,46,1.057,50,3.117,52,1.319,59,1.644,60,3.788,84,2.657,94,1.4,98,2.001,114,1.667,120,1.59,123,2.96,127,1.89,145,5.229,152,2.352,172,1.518,208,2.283,217,2.627,219,2.28,232,2.353,237,1.841,241,2.546,244,1.601,245,3.348,253,1.601,254,4.552,260,1.804,264,1.638,269,1.962,272,1.59,276,1.514,279,2.535,285,2.267,300,3.452,332,1.873,342,1.697,344,2.826,346,3.954,354,2.997,388,2.815,421,2.192,425,1.754,435,2.139,436,2.251,463,2.001,534,2.689,560,1.972,571,2.101,582,2.206,697,2.236,704,2.334,722,2.022,724,2.877,729,1.722,740,3.601,741,3.299,742,4.263,748,2.572,749,3.072,750,2.3,757,6.447,766,2.044,767,2.622,771,5.228,776,2.267,777,3.086,778,1.479,811,2.251,838,2.722,852,2.794,903,2.834,952,2.206,1004,2.192,1024,2.497,1145,2.251,1150,2.317,1176,3.153,1190,2.251,1191,2.371,1367,3.086,1540,2.334,1571,2.178,1708,2.834,1714,4.133,2039,2.113,2218,2.834,2247,2.352,2248,4.598,3717,4.96,5200,4.903,6037,2.794,7578,4.188,7579,4.188,7580,4.188]],["component/234",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/235",[9,19.305,740,19.616,1708,39.312,2247,32.63]],["name/235",[1708,2.313]],["text/235",[1,1.961,2,3.206,4,3.223,9,4.215,10,1.676,15,2.224,26,3.297,34,2.557,46,2.619,48,1.966,56,2.073,60,3.674,82,1.867,111,2.754,123,2.349,127,2.359,171,4.062,172,2.831,222,2.984,225,2.149,237,3.434,245,3.211,254,4.754,279,3.005,332,3.494,342,2.118,349,3.71,363,2.299,388,2.233,463,2.498,529,4.613,688,2.538,699,2.81,704,2.914,722,2.524,732,2.736,740,4.283,749,2.437,757,3.356,767,3.108,774,5.117,855,3.21,952,2.754,1145,2.81,1190,2.81,1191,2.96,1194,2.579,1212,3.008,1331,3.356,1689,3.356,1749,3.317,1760,2.754,1859,3.71,2247,5.826,2273,3.441,3165,4.597,6037,3.488,6177,3.317,7581,4.847,7582,4.597]],["component/235",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/236-1",[504,33.599,973,31.159]],["name/236-1",[]],["text/236-1",[]],["component/236-1",[]],["title/236-2",[973,31.159,2896,48.416]],["name/236-2",[]],["text/236-2",[]],["component/236-2",[]],["title/236",[774,38.489,973,31.159]],["name/236",[774,0.985,973,0.797]],["text/236",[1,0.568,2,1.081,9,2.002,32,3.057,34,1.647,48,3.259,60,2.566,69,2.432,70,2.21,89,1.652,94,2.019,95,2.324,110,3.979,114,2.397,116,3.822,125,2.637,127,4.581,140,1.753,147,1.573,149,2.85,164,1.674,188,1.573,189,1.736,219,1.295,225,3.108,232,1.336,242,1.689,243,1.407,253,1.43,254,2.372,264,1.464,266,1.728,269,1.753,273,2.374,279,1.439,293,1.998,302,1.444,306,1.573,318,1.611,355,2.04,356,1.77,363,1.645,373,1.598,388,1.598,425,1.567,437,1.946,504,3.732,527,1.398,529,2.971,536,3.41,552,2.532,569,3.332,570,2.153,583,1.605,586,2.432,658,3.094,668,1.77,675,3.699,699,2.011,729,3.905,740,2.034,749,2.808,754,2.75,757,2.402,771,4.28,774,5.007,775,4.691,780,3.194,787,5.571,795,2.611,820,3.526,844,1.816,857,4.137,858,1.435,862,2.463,899,5.167,973,5.398,1021,3.307,1127,2.817,1145,2.011,1150,2.07,1156,1.638,1199,2.402,1201,2.025,1209,2.298,1298,2.655,1303,1.946,1345,1.971,1354,2.231,1385,2.883,1464,1.998,1469,2.402,1572,5.894,1591,2.402,1852,3.283,2094,3.469,2329,4.353,2398,4.353,2560,2.231,2569,3.29,2650,3.469,2817,2.704,2896,5.377,2900,2.532,4464,4.908,5200,2.252,6177,4.797,6924,3.29,7583,3.742,7584,3.742,7585,3.049,7586,3.742]],["component/236",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/237",[7559,68.055]],["name/237",[7559,2.471]],["text/237",[9,3.018,26,4.828,34,2.484,60,2.689,82,3.243,95,2.792,123,4.08,132,4.95,135,4.61,147,3.819,150,7.66,583,3.895,740,3.861,750,4.986,852,6.059,854,6.326,1130,5.466,1210,6.563,1360,6.238,1931,5.577,5116,7.184,5569,7.985,5802,7.66,6045,7.985,7263,7.184,7560,8.42,7561,8.42]],["component/237",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/238-1",[1,8.821,2,16.778,60,17.202,254,22.881]],["name/238-1",[]],["text/238-1",[]],["component/238-1",[]],["title/238-2",[60,19.72,254,26.231,2247,37.407]],["name/238-2",[]],["text/238-2",[]],["component/238-2",[]],["title/238",[9,22.131,740,22.488,2247,37.407]],["name/238",[2247,1.92]],["text/238",[1,1.751,2,2.211,4,3.159,9,3.975,10,2.454,15,2.166,34,1.392,46,2.323,48,1.914,59,1.998,60,3.909,110,2.132,114,2.026,116,3.229,120,1.933,126,2.396,133,2.257,147,3.219,149,2.408,169,2.569,172,3.335,225,2.092,241,4.654,243,1.914,245,2.092,254,5.053,264,2.995,276,2.767,279,1.958,285,5.94,330,1.978,342,2.062,344,3.284,388,3.27,425,2.132,463,2.433,504,2.192,529,2.511,601,3.159,658,2.615,688,3.716,704,4.267,722,2.458,740,4.039,757,3.268,767,3.047,771,2.882,774,5.049,816,2.98,829,2.192,903,5.181,952,2.682,1004,2.664,1015,4.148,1190,2.736,1191,2.882,1212,2.929,1331,3.268,1596,4.026,1749,3.229,1796,2.837,2039,2.569,2247,2.859,6177,5.838,7243,4.026,7582,4.475,7587,5.09]],["component/238",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/239-1",[504,33.599,754,24.758]],["name/239-1",[]],["text/239-1",[]],["component/239-1",[]],["title/239-2",[754,24.758,2896,48.416]],["name/239-2",[]],["text/239-2",[]],["component/239-2",[]],["title/239",[116,42.255,754,21.134,774,32.855]],["name/239",[116,0.895,754,0.448,774,0.696]],["text/239",[1,0.552,2,1.05,9,1.208,10,1.165,15,1.547,18,2.964,21,1.165,28,0.918,34,1.61,36,2.993,48,3.521,60,2.772,80,1.452,89,1.605,94,1.99,95,3.985,110,1.523,114,3.725,116,4.704,127,4.225,140,1.703,147,2.475,149,1.72,151,1.523,189,1.687,219,1.258,225,3.048,232,3.767,253,1.39,254,2.318,264,1.422,293,3.142,302,1.403,363,1.599,373,1.553,388,3.168,504,3.67,536,3.332,552,2.46,569,3.256,570,2.092,583,1.559,658,3.023,675,3.614,692,1.585,710,1.903,729,3.503,740,1.228,749,2.744,754,4.336,767,2.951,768,1.868,771,2.058,774,4.942,775,3.652,787,2.679,795,2.537,800,1.265,820,2.129,844,2.857,861,2.813,862,2.393,905,2.334,974,2.21,1021,1.996,1198,1.747,1201,1.968,1303,1.891,1344,2.334,1426,3.067,1469,2.334,1540,2.026,1572,5.809,1852,3.208,1911,2.233,2560,2.168,2896,5.809,2900,2.46,3342,7.677,4280,4.253,4464,4.796,5200,2.189,6177,4.704,6474,3.197,6865,2.679,6942,3.067,7588,3.636,7589,3.636,7590,4.964,7591,5.457,7592,3.636]],["component/239",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/240",[95,20.474,743,37.703,774,32.855]],["name/240",[95,0.434,743,0.798,774,0.696]],["text/240",[4,2.786,9,2.244,10,3.463,15,2.873,21,2.164,28,1.705,34,1.847,36,3.792,43,5.203,60,1.999,95,3.775,113,4.792,114,2.687,116,5.961,118,3.061,147,2.839,149,4.445,177,2.92,189,3.133,192,3.331,243,2.539,253,2.58,318,2.908,425,4.526,504,2.908,583,4.634,710,3.534,740,2.28,743,6.613,749,3.148,754,2.143,759,3.822,761,3.512,771,3.822,774,5.33,800,2.35,820,3.953,823,4.334,857,4.638,861,3.227,905,4.334,1183,5.502,1198,3.243,1344,4.334,1399,3.047,1463,3.792,1475,4.236,1515,6.556,1524,4.505,1600,3.763,6000,7.072,6297,6.26,7593,5.341,7594,5.937]],["component/240",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/241-1",[837,49.611]],["name/241-1",[]],["text/241-1",[]],["component/241-1",[]],["title/241-2",[1572,58.437]],["name/241-2",[]],["text/241-2",[]],["component/241-2",[]],["title/241-3",[703,53.311]],["name/241-3",[]],["text/241-3",[]],["component/241-3",[]],["title/241-4",[20,58.437]],["name/241-4",[]],["text/241-4",[]],["component/241-4",[]],["title/241",[749,36.374,774,38.489]],["name/241",[749,0.931,774,0.985]],["text/241",[4,1.73,9,2.904,10,0.777,15,1.032,20,2.601,34,1.146,36,3.904,48,3.638,59,0.952,60,2.736,71,1.049,75,1.362,88,1.433,94,1.732,99,1.203,103,1.46,110,2.319,114,2.203,115,1.721,120,0.921,125,1.062,127,1.095,147,3.131,172,0.879,175,0.892,192,3.253,219,1.451,225,2.71,237,2.434,242,1.095,243,0.912,244,0.927,250,1.075,251,1.408,253,2.52,254,2.18,264,0.949,266,1.12,269,3.089,302,1.618,305,1.12,309,2.267,310,0.975,330,0.942,345,3.11,363,1.843,423,1.203,437,1.261,447,1.618,504,2.384,522,1.787,527,0.906,529,2.068,560,1.142,562,1.362,569,1.342,582,1.278,591,1.125,601,1.505,658,1.246,688,1.177,703,3.733,729,4.385,740,2.951,741,1.698,749,4.509,750,2.302,753,1.177,754,2.363,766,1.184,767,1.668,768,1.246,771,2.373,774,4.771,775,6.235,793,1.474,816,3.241,820,3.241,826,1.254,837,2.917,838,1.576,844,3.615,847,1.557,856,1.075,858,3.351,860,1.641,861,1.159,870,1.433,885,2.975,910,1.373,934,1.46,973,2.974,1019,1.489,1020,1.641,1021,1.332,1044,2.068,1059,1.095,1104,2.412,1145,1.304,1201,2.997,1203,1.918,1212,1.396,1216,1.373,1232,1.46,1390,1.869,1397,1.721,1418,1.777,1446,1.505,1464,1.295,1475,2.63,1540,1.352,1572,7.701,1575,1.42,1600,1.352,1656,1.618,1714,1.521,1758,1.313,1796,1.352,1810,1.869,1852,5.037,1858,3.746,1870,1.322,1909,1.576,1911,4.573,2054,1.753,2115,2.046,2147,1.753,2247,1.362,2273,1.596,2344,1.618,2399,1.721,2427,1.826,2560,1.446,2896,8.204,2900,1.641,2978,3.416,3195,1.753,4648,4.68,5200,3.332,5461,2.249,5566,1.869,6070,2.132,6124,1.869,6177,5.863,6955,5.133,7595,2.425,7596,2.425,7597,2.249,7598,1.976]],["component/241",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/242-1",[60,23.101,504,33.599]],["name/242-1",[]],["text/242-1",[]],["component/242-1",[]],["title/242-2",[60,23.101,2896,48.416]],["name/242-2",[]],["text/242-2",[]],["component/242-2",[]],["title/242",[60,23.101,774,38.489]],["name/242",[774,0.985,837,1.052]],["text/242",[1,1.292,2,2.699,9,2.459,10,2.372,15,3.148,34,2.736,36,2.37,48,3.199,59,1.423,60,4.062,90,4.199,94,1.573,95,2.275,99,1.798,110,3.915,114,1.442,127,4.218,147,1.524,149,4.421,151,1.518,169,2.962,209,2.104,225,3.842,226,2.203,232,1.294,242,1.636,245,1.49,250,1.607,254,3.94,264,1.418,266,1.674,272,1.376,279,2.258,287,1.587,300,1.536,305,1.674,308,2.998,309,2.404,330,1.408,332,1.621,373,1.548,388,1.548,412,3.199,504,3.663,514,1.808,552,2.453,569,3.247,570,3.378,586,2.356,601,2.249,642,2.122,658,1.862,675,2.226,692,2.56,704,3.272,729,3.042,740,3.156,749,1.69,754,2.699,766,1.769,767,2.336,771,2.052,774,4.935,775,4.591,822,2.529,826,1.873,858,1.39,899,2.161,927,1.84,979,4.75,1021,1.99,1145,3.156,1201,4.005,1256,2.386,1358,1.976,1411,4.952,1448,2.182,1572,4.591,1584,2.953,1852,3.2,1881,2.3,1911,2.226,2072,7.175,2344,2.418,2560,2.161,2667,2.619,2688,2.529,2896,5.799,5169,2.953,5200,2.182,6037,3.917,6177,4.694,6403,2.867,6467,2.619,7585,2.953,7599,3.057,7600,3.057]],["component/242",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/243-1",[504,33.599,858,29.916]],["name/243-1",[]],["text/243-1",[]],["component/243-1",[]],["title/243-2",[858,29.916,2896,48.416]],["name/243-2",[]],["text/243-2",[]],["component/243-2",[]],["title/243",[774,38.489,858,29.916]],["name/243",[774,0.985,858,0.766]],["text/243",[1,0.55,2,1.047,9,1.204,10,2.372,15,1.542,18,1.534,28,2.659,34,1.606,36,1.463,48,2.208,59,1.423,60,2.519,80,1.448,94,1.986,110,3.563,116,3.725,120,1.376,123,1.628,127,3.339,145,2.327,147,2.469,149,3.501,151,1.518,189,1.682,192,1.788,198,2.182,206,1.778,209,2.104,225,2.413,226,3.569,232,1.294,245,2.413,253,2.244,254,2.312,264,2.296,272,1.376,279,2.258,287,1.587,305,1.674,332,1.621,354,1.334,373,1.548,388,1.548,397,1.542,504,3.663,529,1.788,561,2.182,569,3.247,570,2.086,583,3.173,586,3.815,658,1.862,673,2.226,675,2.226,692,3.226,710,1.897,729,2.413,732,1.897,740,1.224,749,1.69,754,1.15,767,2.945,771,3.323,774,5.196,775,5.279,787,4.326,816,4.332,820,4.98,823,2.327,826,1.873,834,1.798,857,4.032,858,5.09,859,4.097,899,3.5,905,2.327,955,5.048,1021,3.223,1145,1.948,1194,1.788,1196,2.161,1201,1.962,1212,2.086,1571,1.885,1572,4.591,1588,4.167,1796,2.02,1841,1.862,1852,3.2,1956,4.032,2051,2.953,2052,4.032,2215,3.569,2329,2.619,2344,2.418,2560,2.161,2738,3.187,2813,2.671,2819,2.274,2896,5.279,3290,2.3,3342,3.973,3755,2.793,5200,4.454,6042,2.671,6117,3.187,6177,6.347,6258,2.572,6467,2.619,6865,4.326,7585,2.953,7601,3.625,7602,3.625]],["component/243",[9,0.602,172,0.656,740,0.611,989,0.98]],["title/244-1",[10,18.621,34,15.889,296,43.734,1153,24.336]],["name/244-1",[]],["text/244-1",[]],["component/244-1",[]],["title/244-2",[120,29.626,318,33.599]],["name/244-2",[]],["text/244-2",[]],["component/244-2",[]],["title/244-3",[34,14.09,427,38.782,772,33.072,848,43.451,1153,21.581]],["name/244-3",[]],["text/244-3",[]],["component/244-3",[]],["title/244-4",[1853,47.91,7603,65.805]],["name/244-4",[]],["text/244-4",[]],["component/244-4",[]],["title/244",[152,52.891]],["name/244",[152,1.92]],["text/244",[9,3.697,10,3.566,34,3.042,54,1.915,56,1.841,60,1.374,82,2.549,114,1.847,120,3.302,127,2.095,152,2.607,153,3.494,157,3.494,219,2.47,232,2.549,239,3.978,245,1.908,250,2.058,254,1.828,272,2.71,276,1.677,285,2.512,291,5.823,296,7.931,300,1.967,305,2.143,344,3.729,355,2.53,425,1.944,427,8.723,463,2.218,511,2.253,530,2.058,537,3.294,557,3.239,589,2.607,591,2.153,601,4.429,626,3.494,654,2.649,697,3.81,728,2.717,740,3.558,742,4.551,757,2.98,767,2.84,769,3.294,771,4.923,772,6.266,826,2.399,848,9.773,867,2.164,1072,2.794,1153,3.642,1169,5.259,1182,3.915,1270,5.651,1399,3.221,1707,7.054,1714,2.912,1749,2.945,1757,2.98,1813,2.945,1843,3.188,2167,3.141,2585,5.645,3718,3.294,3910,6.019,4561,6.019,5200,4.296,6037,3.097,6096,3.294,6616,3.782,6741,4.081,6763,4.303,6828,3.782,7603,6.019,7604,4.303]],["component/244",[9,0.763,18,0.6,740,0.776]],["title/245-1",[740,26.344,758,58.734]],["name/245-1",[]],["text/245-1",[]],["component/245-1",[]],["title/245-2",[1,10.112,5,43.841,46,16.815]],["name/245-2",[]],["text/245-2",[]],["component/245-2",[]],["title/245-3",[306,32.809,748,47.91]],["name/245-3",[]],["text/245-3",[]],["component/245-3",[]],["title/245-4",[7605,87.314]],["name/245-4",[]],["text/245-4",[]],["component/245-4",[]],["title/245",[812,70.89]],["name/245",[812,2.574]],["text/245",[0,1.157,1,1.128,4,1.199,5,4.89,9,3.333,15,1.236,16,1.996,18,0.759,19,1.317,24,5.272,26,1.227,28,0.734,31,1.531,32,2.483,34,1.338,37,2.486,46,1.876,54,2.613,59,1.141,60,1.448,71,4.131,83,2.792,84,4.018,88,4.897,90,1.306,99,1.442,114,2.956,120,1.103,123,2.198,126,1.368,127,2.858,149,2.314,151,1.217,164,1.3,168,2.726,172,3.256,182,1.803,185,3.864,186,1.232,192,1.434,197,1.844,198,5.407,201,1.169,225,3.407,239,2.238,251,3.676,254,3.265,264,2.906,276,1.768,305,1.342,306,4.389,318,1.251,332,1.3,344,1.246,354,1.8,355,3.453,373,3.173,388,1.241,421,1.521,504,1.251,586,1.889,642,1.701,646,1.966,675,3.004,692,3.239,697,1.551,700,1.866,701,2.56,740,3.387,748,7.467,749,2.28,754,0.922,757,3.14,758,4.768,764,3.068,765,2.451,766,1.418,767,1.157,768,1.493,771,4.206,774,3.124,806,1.596,807,2.188,810,1.717,811,3.404,812,4.768,824,1.717,826,1.502,836,1.493,837,1.531,840,5.53,852,1.939,854,5.548,858,1.114,867,2.28,963,1.475,1004,1.521,1013,2.726,1030,1.562,1145,1.562,1294,2.239,1363,1.913,1434,3.14,1493,1.913,1760,1.531,1833,1.687,1841,1.493,1909,1.889,1962,1.866,2046,1.844,2156,4.169,2219,2.142,2253,2.694,2518,2.368,2641,2.555,2896,1.803,2978,3.986,3290,1.844,3718,2.062,5200,4.989,6024,1.966,6134,2.142,6173,2.451,7226,4.535,7411,2.694,7605,10.001,7606,4.891,7607,2.694,7608,4.535,7609,6.334,7610,2.906,7611,2.906,7612,4.891,7613,2.906,7614,2.906]],["component/245",[9,0.763,18,0.6,740,0.776]],["title/246",[232,27.865,318,33.599]],["name/246",[232,0.713,318,0.86]],["text/246",[]],["component/246",[9,0.763,18,0.6,740,0.776]],["title/247-1",[172,28.28,989,42.23]],["name/247-1",[]],["text/247-1",[]],["component/247-1",[]],["title/247-2",[71,40.719]],["name/247-2",[]],["text/247-2",[]],["component/247-2",[]],["title/247",[9,19.305,18,15.178,56,23.04,740,19.616]],["name/247",[3,1.478]],["text/247",[1,1.578,2,2.263,9,3.877,10,2.512,26,3.958,28,1.979,34,1.436,37,2.061,42,3.554,46,1.979,49,2.973,56,2.083,60,3.454,71,3.389,72,2.271,79,3.225,87,3.102,93,3.457,94,1.116,95,1.614,99,2.605,106,5.046,114,2.09,116,5.949,120,1.994,121,2.28,127,3.537,132,2.863,140,2.46,141,3.504,145,3.371,172,3.398,182,3.259,198,3.161,239,2.403,244,2.007,245,2.159,253,2.007,264,2.054,300,2.226,334,2.536,354,1.933,373,2.243,443,3.259,533,4.473,646,3.554,735,3.075,740,3.756,743,2.973,750,2.884,758,3.953,765,4.429,766,2.563,767,2.09,773,2.997,823,3.371,839,3.585,844,2.549,847,3.371,858,3.005,863,2.863,864,2.823,865,2.843,870,3.102,871,3.225,934,3.161,989,2.843,1093,3.554,1106,4.047,1175,4.617,1176,3.953,1194,2.591,1363,5.159,2221,3.795,2292,3.727,2485,4.279,2791,3.87,2819,3.295,2896,3.259,3008,3.727,4465,4.279,5948,4.154,6000,3.953,6828,4.279,7554,4.429,7615,5.252,7616,4.869]],["component/247",[9,0.763,18,0.6,740,0.776]],["title/248",[1,11.846,2,22.532]],["name/248",[1,0.303,2,0.577]],["text/248",[]],["component/248",[9,0.763,18,0.6,740,0.776]],["title/249",[1,11.846,46,19.699]],["name/249",[1,0.303,46,0.504]],["text/249",[]],["component/249",[9,0.763,18,0.6,740,0.776]],["title/250",[1222,61.989]],["name/250",[3,1.478]],["text/250",[]],["component/250",[9,0.763,18,0.6,740,0.776]],["title/251",[863,36.305,864,35.799,865,36.048]],["name/251",[868,2.348]],["text/251",[1,1.401,2,2.963,9,1.699,10,2.957,19,2.318,26,3.243,28,1.291,73,2.007,82,1.826,90,2.297,95,3.683,114,2.035,120,1.941,123,2.297,133,2.267,232,2.743,244,1.954,253,1.954,264,3.005,266,2.361,302,1.973,310,2.056,332,2.287,373,2.184,388,4.934,412,2.211,449,5.674,527,1.911,563,3.048,569,2.828,692,2.229,700,3.282,740,1.726,761,2.659,766,2.495,767,2.035,771,5.223,805,3.077,821,3.671,837,4.047,858,3.538,863,5.029,864,4.959,865,4.994,868,8.959,870,5.45,871,6.752,881,1.954,927,4.683,1013,2.849,1046,2.693,1059,2.307,1145,2.748,1222,3.365,1324,2.993,1393,2.807,1522,4.312,1528,4.044,1648,6.539,1669,3.46,1961,2.918,2036,3.46,2329,3.695,3342,3.46,4789,6.754,5053,4.74,5200,3.077,5566,3.94,7558,4.495]],["component/251",[9,0.763,18,0.6,740,0.776]],["title/252",[743,44.169,6315,61.717]],["name/252",[743,1.935]],["text/252",[]],["component/252",[9,0.763,18,0.6,740,0.776]],["title/253",[71,40.719]],["name/253",[3,1.478]],["text/253",[1,1.438,2,1.973,9,2.27,10,2.19,26,3.998,28,2.391,34,1.868,46,1.725,60,3.219,71,4.095,79,4.195,95,2.1,99,3.389,106,4.597,114,2.719,116,4.334,120,2.594,127,3.083,140,3.2,172,2.476,182,4.239,198,4.112,239,3.125,264,2.672,300,2.895,334,3.299,354,2.514,443,4.239,533,5.406,646,4.623,735,4,740,2.307,743,3.867,758,5.143,765,5.762,766,3.334,767,2.719,773,3.899,823,4.386,839,3.125,844,3.316,847,4.386,858,3.632,863,3.724,864,3.672,865,3.698,870,4.036,871,4.195,934,4.112,1194,3.37,1363,6.235,2221,4.937,2485,5.567,2791,5.034,2819,4.286,2896,4.239,3008,4.848,4465,5.567,5948,5.404,6000,5.143,6828,5.567,7616,6.334]],["component/253",[9,0.763,18,0.6,740,0.776]],["title/254-1",[28,16.815,29,31.353,858,25.537]],["name/254-1",[]],["text/254-1",[]],["component/254-1",[]],["title/254-2",[172,24.14,858,25.537,6258,47.267]],["name/254-2",[]],["text/254-2",[]],["component/254-2",[]],["title/254-3",[226,40.484,955,33.607,1956,45.745]],["name/254-3",[]],["text/254-3",[]],["component/254-3",[]],["title/254-4",[1816,50.704,1852,42.531]],["name/254-4",[]],["text/254-4",[]],["component/254-4",[]],["title/254-5",[955,39.37,1600,43.484]],["name/254-5",[]],["text/254-5",[]],["component/254-5",[]],["title/254-6",[79,40.897,239,30.47,3290,42.255]],["name/254-6",[]],["text/254-6",[]],["component/254-6",[]],["title/254",[26,32.937,858,29.916]],["name/254",[26,1.443]],["text/254",[1,0.399,2,0.759,9,2.719,10,0.46,11,0.986,16,1.805,26,0.606,28,3.009,29,3.68,34,2.623,36,0.58,37,1.031,40,0.66,48,0.988,51,0.475,56,0.569,59,0.564,60,2.314,66,1.403,71,1.571,73,1.763,75,1.476,79,1.613,80,1.049,82,1.297,87,0.848,94,0.558,99,0.712,109,0.958,114,2.34,121,0.623,122,0.663,132,0.783,133,1.991,135,2.656,142,3.119,147,0.604,164,0.642,172,2.966,175,0.528,176,1.256,177,1.571,182,0.891,184,0.66,186,0.609,198,2.186,201,1.461,205,0.958,206,0.705,209,2.606,219,1.257,226,3.575,232,3.504,237,0.631,239,2.69,244,1.388,245,1.08,250,1.611,253,1.004,254,1.769,264,1.421,266,0.663,279,4.115,287,2.291,293,1.403,300,0.609,302,0.554,305,0.663,306,0.604,318,0.618,320,0.794,332,2.009,342,0.582,344,1.127,347,0.752,350,0.738,354,0.528,356,1.718,363,0.631,373,3.496,388,1.122,398,2.629,423,0.712,438,0.663,445,1.197,504,2.253,511,0.697,514,0.716,517,0.891,518,1.926,527,1.357,529,0.708,533,0.82,536,0.813,560,0.676,570,0.826,571,2.625,582,0.756,583,0.616,591,2.084,691,0.66,692,3.033,694,2.09,699,1.412,716,0.747,722,0.693,724,0.986,729,1.08,735,3.443,740,2.763,753,1.763,755,1.17,758,1.081,761,2.722,766,3.148,767,0.571,771,3.652,774,0.708,790,0.856,810,0.848,816,0.841,834,1.802,836,1.35,837,0.756,840,1.753,844,0.697,847,0.922,855,0.882,856,0.637,857,0.986,858,4.845,859,1.002,860,2.458,877,0.922,881,1.004,889,0.911,892,1.136,899,1.567,907,0.72,928,1.331,931,1.019,934,0.864,955,6.293,1004,0.752,1013,0.8,1021,0.788,1032,0.767,1046,0.756,1059,0.648,1068,1.403,1072,0.864,1130,0.864,1145,0.772,1169,1.936,1194,1.792,1195,1.211,1221,2.503,1303,0.747,1320,1.648,1346,0.911,1360,1.805,1418,0.609,1522,1.211,1541,1.002,1571,0.747,1588,1.019,1600,4.356,1656,0.958,1713,1.994,1727,1.002,1757,0.922,1777,0.972,1816,3.822,1841,2.688,1852,0.783,1870,3.517,1956,3.084,1961,0.82,2020,4.047,2039,0.725,2046,3.32,2051,1.17,2052,4.039,2172,0.813,2215,2.73,2272,1.334,2305,0.972,2329,1.899,2344,2.996,2428,2.734,2585,1.136,2593,1.019,2756,0.986,2791,1.058,2792,0.972,2813,2.677,2819,4.903,2896,0.891,2898,2.677,3196,0.705,3290,3.731,3342,2.458,3755,2.025,3763,1.331,4243,1.263,4246,1.263,4253,1.211,4620,2.677,4621,1.211,4886,1.778,5050,1.834,5116,1.136,5200,5.905,5371,1.17,5948,1.136,6037,0.958,6075,2.436,6104,2.734,6258,4.938,6467,1.899,6934,1.211,7603,1.211,7608,1.331,7617,1.436,7618,1.331,7619,1.436,7620,1.436,7621,1.436,7622,1.331]],["component/254",[9,0.763,18,0.6,740,0.776]],["title/255-1",[158,56.384,2823,68.6]],["name/255-1",[]],["text/255-1",[]],["component/255-1",[]],["title/255-2",[158,56.384,862,51.359]],["name/255-2",[]],["text/255-2",[]],["component/255-2",[]],["title/255-3",[28,16.815,844,32.327,858,25.537]],["name/255-3",[]],["text/255-3",[]],["component/255-3",[]],["title/255-4",[754,24.758,844,37.871]],["name/255-4",[]],["text/255-4",[]],["component/255-4",[]],["title/255-5",[844,37.871,973,31.159]],["name/255-5",[]],["text/255-5",[]],["component/255-5",[]],["title/255-6",[60,23.101,844,37.871]],["name/255-6",[]],["text/255-6",[]],["component/255-6",[]],["title/255-7",[2588,63.723]],["name/255-7",[]],["text/255-7",[]],["component/255-7",[]],["title/255",[2,22.532,844,37.871]],["name/255",[844,1.659]],["text/255",[1,0.212,2,0.404,6,2.792,9,1.462,10,1.646,15,0.595,16,0.961,21,1.139,28,3.066,29,0.659,34,1.873,48,0.526,59,1.395,60,2.739,70,0.827,72,0.605,73,3.42,75,1.996,80,1.025,82,2.064,85,0.827,94,0.755,95,1.776,98,0.669,99,2.183,106,0.679,114,4.604,118,1.995,133,0.621,140,0.656,147,2.159,149,2.43,151,0.586,158,4.176,167,0.842,177,0.605,179,1.18,189,0.649,192,0.69,196,2.654,198,0.842,201,1.429,203,1.516,232,3.389,242,0.632,243,0.526,244,0.981,245,1.809,250,2.814,253,0.535,263,0.595,266,0.646,276,0.506,279,0.538,280,1.059,283,0.78,287,1.927,293,2.35,300,1.088,305,2.032,309,2.366,318,1.105,332,2.838,342,0.567,347,2.304,352,2.434,355,1.937,388,2.194,393,1.37,396,1.031,397,0.595,438,0.646,439,0.676,440,0.763,445,1.619,511,0.679,514,1.28,518,0.742,521,3.937,527,2.159,529,5.435,530,0.621,553,1.648,559,0.694,560,1.208,562,0.786,563,0.834,568,0.921,569,0.774,571,1.783,583,3.857,604,1.932,642,1.503,648,1.712,658,1.826,679,1.648,688,0.679,692,4.322,694,0.805,701,3.321,710,0.733,740,1.486,742,0.733,749,0.652,754,2.765,761,1.335,763,0.859,764,2.761,767,2.525,773,0.799,787,3.243,789,0.683,800,0.487,805,0.842,816,0.819,820,2.577,826,0.723,828,3.709,833,1.821,834,1.763,837,0.737,844,5.218,858,3.341,859,3.071,862,3.38,927,0.71,952,1.352,955,2.221,969,0.706,973,3.959,977,0.898,1024,2.624,1059,0.632,1071,0.977,1100,0.947,1102,3.243,1155,0.637,1194,1.753,1216,0.792,1232,1.545,1256,2.897,1272,2.405,1303,1.849,1344,0.898,1345,0.737,1354,0.834,1358,0.763,1441,0.834,1463,0.786,1471,0.834,1493,0.921,1499,1.054,1656,0.934,1713,4.617,1740,0.947,1758,3.434,1760,0.737,1841,3.75,1922,1.107,1931,3.896,1992,3.666,1994,0.868,1997,4.89,2031,3.313,2032,1.14,2039,0.706,2040,1.011,2046,1.628,2050,1.298,2052,3.527,2074,6.81,2075,1.18,2099,2.522,2215,0.851,2238,4.25,2292,1.821,2312,0.993,2526,1.031,2588,0.947,2671,1.054,2688,3.071,2813,1.891,2817,1.855,2821,2.03,2823,1.231,2900,2.978,2901,1.054,2902,0.91,2908,2.371,2961,1.18,3008,0.993,3038,1.14,3118,1.231,3606,1.011,4708,1.054,4711,2.998,4995,1.18,5050,1.791,5244,1.231,6054,3.125,6388,1.298,6467,1.855,6865,5.38,7590,1.18,7591,1.298,7599,2.165,7600,4.331,7623,1.4,7624,1.4,7625,2.566,7626,1.4,7627,1.298,7628,2.566]],["component/255",[9,0.763,18,0.6,740,0.776]],["title/256-1",[1572,58.437]],["name/256-1",[]],["text/256-1",[]],["component/256-1",[]],["title/256-2",[48,29.344,279,30.015]],["name/256-2",[]],["text/256-2",[]],["component/256-2",[]],["title/256-3",[2896,58.437]],["name/256-3",[]],["text/256-3",[]],["component/256-3",[]],["title/256-4",[20,58.437]],["name/256-4",[]],["text/256-4",[]],["component/256-4",[]],["title/256-5",[3428,76.733]],["name/256-5",[]],["text/256-5",[]],["component/256-5",[]],["title/256-6",[201,31.38,844,37.871]],["name/256-6",[]],["text/256-6",[]],["component/256-6",[]],["title/256",[749,43.902]],["name/256",[749,1.594]],["text/256",[1,0.828,2,1.575,4,0.765,8,1.159,9,2.507,10,1.438,15,0.789,19,0.841,20,4.314,21,0.594,28,1.755,34,1.227,46,0.468,48,2.837,54,0.765,56,0.735,59,0.728,60,2.744,66,0.99,72,0.802,75,1.042,82,1.183,88,1.956,94,0.704,95,1.379,103,5.578,110,1.879,114,1.785,129,1.922,139,1.467,144,8.377,167,1.116,172,1.2,175,2.007,177,0.802,182,2.055,186,2.946,189,0.86,190,4.02,196,0.959,201,2.519,207,2.18,209,1.922,219,1.552,225,2.574,239,1.515,240,1.086,243,0.697,244,0.709,254,0.73,264,0.725,266,0.856,270,0.947,276,1.197,279,2.674,293,1.768,300,4.295,302,2.417,305,1.529,306,1.392,309,0.759,330,0.721,332,2.006,345,1.042,346,2.177,354,3.729,373,1.414,388,3.223,395,1.095,412,0.802,421,1.733,437,0.965,438,1.529,439,0.895,514,0.925,527,1.237,529,0.915,530,1.989,536,1.874,559,0.92,563,1.106,570,1.067,586,1.205,591,0.86,611,1.163,613,1.396,654,5.784,676,1.255,685,1.086,689,1.316,692,0.809,694,1.067,700,1.19,701,2.854,703,1.05,729,0.762,732,0.971,740,2.547,749,3.968,754,1.423,755,1.511,757,4.02,764,3.421,766,1.616,767,1.318,768,0.953,771,3.087,774,3.09,780,2.379,784,1.559,800,0.645,826,0.959,828,2.126,832,5.507,839,2.052,844,4.325,847,1.19,850,1.396,856,1.468,858,2.401,859,4.37,861,1.582,862,2.18,868,1.274,870,1.095,895,1.05,899,1.974,934,1.116,952,0.977,954,0.983,955,1.671,959,1.367,968,1.095,969,2.263,973,2.501,1023,1.221,1046,0.977,1059,0.837,1104,3.138,1194,0.915,1254,1.467,1341,1.691,1354,1.106,1399,0.837,1502,1.316,1526,1.805,1539,1.274,1572,7.012,1691,1.127,1713,1.018,1760,0.977,1813,1.177,1841,0.953,1852,1.011,1931,2.033,1994,1.151,1997,1.429,2031,1.396,2039,1.671,2052,2.274,2089,3.306,2142,1.511,2172,1.05,2215,1.127,2329,2.393,2791,1.367,2821,2.619,2896,6.437,2900,3.035,3195,1.34,3428,5.103,4244,1.511,4268,5.967,4648,3.183,4711,1.564,5200,1.993,5948,1.467,6037,1.237,6043,1.396,6070,6.633,6104,1.396,6865,2.44,6922,3.07,7597,1.719,7629,1.854,7630,1.719,7631,1.854,7632,1.854,7633,6.263,7634,1.854,7635,1.854]],["component/256",[9,0.763,18,0.6,740,0.776]],["title/257",[757,60.453]],["name/257",[3,1.478]],["text/257",[127,5.148,701,5.971,757,7.323,892,9.023]],["component/257",[9,0.763,18,0.6,740,0.776]],["title/258-1",[119,30.409,583,24.917,988,30.217,6615,49]],["name/258-1",[]],["text/258-1",[]],["component/258-1",[]],["title/258",[9,22.131,119,34.86,740,22.488]],["name/258",[119,1.79]],["text/258",[4,1.167,9,0.94,15,3.106,26,2.621,28,1.207,32,4.495,34,0.773,70,1.671,108,2.237,119,6.607,120,1.815,123,2.148,125,2.093,127,4.818,133,2.12,175,1.759,182,3.853,186,1.199,190,5.099,240,2.799,244,1.827,263,1.203,272,3.363,276,1.022,280,1.167,300,1.199,306,3.432,335,1.249,353,4.203,354,1.041,388,1.208,390,3.599,567,5.626,583,1.213,740,0.955,748,4.483,749,2.229,753,1.373,757,7.225,763,1.737,767,3.248,768,2.456,775,1.755,781,4.265,793,1.719,820,3.635,851,6.275,852,5.444,857,3.283,858,1.833,863,1.542,864,1.52,865,1.531,868,3.283,885,2.007,955,2.412,988,3.797,1013,2.664,1014,5.064,1015,2.304,1059,1.276,1093,1.914,1117,1.462,1833,1.641,1955,4.778,3008,3.393,3342,1.914,3834,2.622,4305,5.757,5209,4.432,6027,4.432,6615,2.385,7607,4.432,7636,9.43,7637,8.856,7638,4.78,7639,6.209,7640,4.78,7641,4.78,7642,4.78,7643,4.78,7644,4.78,7645,2.828,7646,4.78,7647,2.828]],["component/258",[9,0.763,18,0.6,740,0.776]],["title/259",[26,32.937,852,52.054]],["name/259",[26,0.843,852,1.332]],["text/259",[]],["component/259",[9,0.763,18,0.6,740,0.776]],["title/260-1",[9,15.378,198,27.856,300,19.613,354,17.029,740,15.626,742,24.223]],["name/260-1",[]],["text/260-1",[]],["component/260-1",[]],["title/260",[9,22.131,740,22.488,1393,36.569]],["name/260",[9,0.664,740,0.674]],["text/260",[1,1.245,2,1.919,4,1.747,9,4.135,10,2.629,33,3.12,34,2.243,36,1.709,56,3.685,59,2.608,60,3.685,71,2.873,84,2.686,90,2.986,94,1.412,98,2.023,114,1.685,127,1.911,145,2.718,147,1.78,172,2.409,182,2.627,198,4.937,208,3.623,219,2.839,225,3.372,245,2.732,253,1.618,254,4.412,260,1.823,276,2.964,300,1.794,334,2.044,344,2.85,346,4.9,347,2.216,352,2.342,354,1.558,417,2.149,421,2.216,432,2.202,440,2.308,463,3.176,504,3.532,529,2.089,571,3.334,588,4.069,591,1.965,698,2.378,699,2.276,704,2.36,710,2.216,722,3.209,728,4.802,740,4.202,741,2.692,742,4.863,749,3.824,750,2.325,766,2.066,773,2.416,776,2.292,779,3.005,783,2.175,886,3.926,907,2.124,917,2.865,956,2.308,989,3.597,1030,2.276,1044,2.089,1153,1.774,1190,4.409,1191,4.644,1198,2.034,1331,2.718,1376,2.627,1392,2.908,1598,3.06,2190,3.187,2247,2.378,5127,3.723,5525,2.955,6104,3.187,6177,2.686,7243,3.349,7593,3.349,7648,4.234,7649,3.571]],["component/260",[463,1.098,740,0.776,7650,1.397]],["title/261",[1208,59.747]],["name/261",[2423,1.684,7651,1.997]],["text/261",[1,1.308,2,1.07,9,3.141,10,2.407,28,0.936,34,2.585,36,3.032,37,1.455,46,0.936,54,1.529,56,2.979,60,3.472,67,6.12,72,1.602,75,4.84,77,2.408,79,3.67,115,2.63,132,2.02,141,2.472,145,2.379,147,4.249,172,2.166,176,1.771,177,3.248,185,1.927,192,1.828,193,2.209,200,1.992,219,2.069,232,2.135,243,1.394,245,1.523,253,1.416,254,1.46,264,4.158,285,3.235,300,1.571,308,1.892,334,2.886,373,1.583,388,2.553,425,1.552,432,3.907,433,2.931,440,2.02,463,2.856,527,1.385,528,2.965,529,2.948,530,3.331,533,2.115,561,2.231,571,2.999,583,3.696,588,1.838,608,4.728,692,1.616,715,5.011,732,3.932,734,2.253,740,3.192,749,3.502,750,3.282,767,2.379,776,3.235,820,3.499,836,1.904,844,1.799,852,2.472,886,2.189,905,2.379,938,4.105,952,3.149,989,2.006,1004,1.94,1033,2.545,1068,1.978,1136,2.035,1166,2.189,1176,2.79,1187,2.132,1190,4.037,1191,4.252,1198,1.78,1201,3.235,1203,2.931,1210,2.678,1253,3.02,1321,2.379,1338,3.02,1362,2.151,1376,2.3,1484,2.508,1524,2.472,1543,3.258,1596,2.931,1689,2.379,1698,2.408,1811,2.439,1859,2.63,1961,2.115,1973,2.79,1994,2.3,2198,2.79,2247,2.081,2248,2.586,2305,2.508,2360,3.436,2441,3.126,2560,2.209,2562,3.258,2568,3.126,2908,2.472,2909,2.731,3717,2.79,4249,3.436,5371,3.02,5527,5.255,5810,3.258,6043,4.499,7593,2.931,7652,3.706,7653,3.706,7654,3.436,7655,3.706,7656,3.706,7657,3.706,7658,3.706]],["component/261",[463,1.098,740,0.776,7650,1.397]],["title/262",[7559,68.055]],["name/262",[7559,2.471]],["text/262",[1,0.71,2,1.351,9,4.305,19,2.121,33,7.793,34,2.39,56,1.856,59,1.836,60,3.304,71,2.023,75,7.05,78,2.969,84,2.969,94,1.526,106,2.271,111,2.465,124,2.903,172,1.696,191,4.338,193,2.79,219,1.619,232,1.671,254,2.828,266,3.316,280,1.93,285,3.887,334,3.467,347,2.449,350,2.404,388,3.733,425,1.96,463,2.236,583,2.007,740,4.374,753,2.271,767,1.862,768,2.404,773,2.67,774,2.308,780,3.808,806,2.569,854,2.588,861,2.236,896,3.381,941,3.946,963,2.375,979,3.004,1058,5.423,1059,2.112,1099,2.347,1153,1.96,1169,5.292,1183,3.812,1197,3.321,1198,4.709,1296,3.448,1365,2.764,1376,2.903,1393,4.798,1402,2.969,1447,3.166,1500,3.041,1524,3.122,1811,3.08,2247,2.628,2248,5.011,2554,4.338,3225,3.522,3985,4.338,4149,3.946,5655,3.946,6100,3.381,6929,4.338,7243,5.68,7593,3.701,7598,3.812,7654,4.338,7659,4.679,7660,5.914,7661,4.679,7662,4.679,7663,4.679,7664,4.679,7665,4.679,7666,6.658,7667,4.679,7668,4.679]],["component/262",[463,1.098,740,0.776,7650,1.397]],["title/263",[1208,59.747]],["name/263",[3,1.478]],["text/263",[1,1.522,2,2.463,9,1.958,10,1.889,21,1.889,28,1.488,34,2.742,36,3.443,56,4.358,59,3.935,60,3.874,72,2.548,75,4.791,79,3.619,82,2.105,89,2.602,95,1.812,147,3.587,208,4.65,209,3.42,217,3.697,245,3.506,254,3.36,285,3.19,308,3.009,320,3.26,334,2.845,342,2.387,354,2.169,388,3.644,432,3.065,463,2.816,527,2.202,529,2.907,583,4.3,591,2.734,704,3.284,710,3.085,722,2.845,740,1.99,749,2.747,768,3.027,773,3.363,820,4.994,836,3.027,854,3.26,877,3.783,1044,4.208,1178,4.343,1190,3.168,1191,3.336,1210,4.259,1344,3.783,1656,3.932,1796,4.754,1841,3.027,1900,4.259,1961,3.363,2039,2.974,2383,4.802,2881,5.181,3238,4.661,4960,5.464,5374,5.181,6043,4.436,7593,4.661,7669,4.97,7670,5.893,7671,5.893]],["component/263",[463,1.098,740,0.776,7650,1.397]],["title/264",[9,19.305,60,17.202,254,22.881,740,19.616]],["name/264",[3,1.478]],["text/264",[1,1.47,2,2.795,9,4.144,10,2.759,34,2.355,40,2.1,56,3.414,59,4.106,60,3.814,72,1.975,90,2.052,94,0.971,98,2.183,114,1.818,127,2.062,145,4.526,151,1.914,172,1.656,198,2.75,201,1.837,208,4.693,219,2.44,237,2.008,242,3.182,245,2.898,253,1.746,254,4.12,260,1.967,276,3.111,300,2.988,317,2.724,344,1.959,346,4.179,347,3.69,354,1.681,373,3.012,388,1.951,463,3.369,504,4.168,557,3.188,571,2.292,588,3.497,698,2.566,699,2.455,704,4.798,722,4.674,728,4.128,740,4.211,741,2.856,742,3.69,749,2.13,771,2.586,773,2.607,776,2.473,783,2.347,836,2.347,956,2.49,1004,2.391,1030,3.789,1190,5.622,1191,5.921,1331,5.527,1571,2.376,1598,3.301,2039,2.305,5127,4.016,6104,5.307,7649,3.853,7672,4.568]],["component/264",[463,1.098,740,0.776,7650,1.397]],["title/265",[304,43.484,837,41.103]],["name/265",[56,0.792,304,1.113]],["text/265",[1,1.305,2,2.482,4,2.456,9,3.669,32,3.022,34,3.019,40,2.736,56,3.999,59,4.334,60,3.883,72,2.574,77,3.869,84,5.452,94,1.265,147,2.504,167,3.584,198,3.584,201,2.395,208,3.245,219,2.974,232,2.126,241,5.223,244,2.275,245,2.447,253,2.275,254,3.384,276,3.105,306,2.504,317,3.55,342,2.412,346,2.89,348,4.303,350,3.058,388,2.543,425,2.494,436,3.2,463,4.107,530,2.64,551,3.55,688,4.171,699,3.2,710,3.116,722,2.875,740,3.728,742,3.116,749,4.006,861,2.845,886,3.517,941,5.021,979,3.822,1030,3.2,1058,5.332,1190,4.619,1191,4.865,1201,3.222,1331,3.822,1796,3.318,1961,3.398,2247,3.344,6100,4.303,6467,4.303,7660,4.029]],["component/265",[463,1.098,740,0.776,7650,1.397]],["title/266-1",[9,25.926,740,26.344]],["name/266-1",[]],["text/266-1",[]],["component/266-1",[]],["title/266-2",[1,7.822,2,14.878,59,20.221,60,15.254,741,20.869]],["name/266-2",[]],["text/266-2",[]],["component/266-2",[]],["title/266-3",[1,8.821,741,23.534,979,37.295,7660,39.312]],["name/266-3",[]],["text/266-3",[]],["component/266-3",[]],["title/266",[34,14.09,36,20.795,56,20.431,750,28.287,836,26.465]],["name/266",[36,0.569,37,0.554,750,0.774]],["text/266",[1,1.327,2,2.524,9,3.257,10,3.142,15,1.991,34,3.052,40,2.151,56,4.194,59,1.836,60,3.836,70,2.764,71,2.023,72,2.023,75,4.908,82,2.565,90,3.226,94,0.994,113,3.321,124,2.903,133,2.075,145,4.61,147,3.675,167,2.816,176,2.236,177,2.023,182,2.903,186,1.983,198,2.816,208,3.915,209,2.715,219,2.485,241,2.844,244,1.788,245,2.952,253,3.746,254,1.843,264,2.809,276,1.691,285,3.887,306,1.968,344,2.007,346,2.271,388,1.999,436,2.515,463,4.176,504,2.015,529,2.308,530,2.075,533,2.67,561,2.816,580,2.418,583,2.007,722,3.467,740,3.31,741,1.895,742,2.449,749,2.181,750,3.943,767,1.862,781,3.214,820,2.739,836,2.404,847,3.004,954,2.481,979,3.004,1044,2.308,1118,3.606,1119,3.946,1190,5.269,1191,5.549,1197,3.321,1201,2.532,1362,2.715,1395,3.701,1596,3.701,1698,3.041,1754,3.946,1796,4.002,1961,2.67,2247,2.628,2896,2.903,4244,3.812,4271,3.522,4648,3.321,6043,3.522,6467,3.381,7594,4.114,7660,3.166,7673,4.114,7674,4.679,7675,4.338]],["component/266",[463,1.098,740,0.776,7650,1.397]],["title/267-1",[1,8.821,19,26.337,60,17.202,7660,39.312]],["name/267-1",[]],["text/267-1",[]],["component/267-1",[]],["title/267-2",[1,8.821,120,22.06,740,19.616,7660,39.312]],["name/267-2",[]],["text/267-2",[]],["component/267-2",[]],["title/267-3",[7559,68.055]],["name/267-3",[]],["text/267-3",[]],["component/267-3",[]],["title/267",[1058,41.328,1393,36.569,7660,45.067]],["name/267",[1,0.214,186,0.598,7660,0.954]],["text/267",[1,1.38,2,1.295,4,1.85,9,2.309,10,0.841,15,1.908,19,2.033,21,0.841,26,1.107,28,1.971,34,1.606,50,3.288,52,2.189,56,1.04,59,2.728,60,3.322,71,1.134,75,5.107,82,2.098,90,2.015,94,1.933,95,0.806,110,1.099,114,1.785,120,1.703,121,1.139,125,1.148,133,1.163,134,3.305,135,1.331,140,1.229,147,1.103,171,2.332,172,3.084,185,5.56,186,2.945,190,0.91,206,1.287,208,3.202,209,1.522,219,1.552,225,1.843,226,1.594,232,1.601,237,3.433,241,2.726,245,1.843,246,1.579,253,1.714,254,1.766,266,1.211,268,2.699,276,1.62,285,1.42,306,1.103,334,2.165,344,1.125,350,2.304,352,1.451,363,1.153,373,1.916,388,3.336,437,1.364,463,2.807,516,1.339,527,1.676,529,2.212,530,1.163,553,1.684,561,1.579,569,2.48,570,1.509,583,1.125,655,1.28,691,2.061,710,2.347,729,1.843,740,2.347,754,1.864,766,2.866,768,1.347,771,2.539,783,1.347,800,0.913,858,1.006,861,2.807,862,1.727,886,1.55,954,1.391,956,1.43,974,2.726,979,3.77,985,1.802,1002,2.306,1023,1.727,1039,1.536,1058,3.645,1068,1.4,1073,1.579,1078,1.933,1099,5.741,1190,3.736,1191,6.052,1201,3.762,1230,1.705,1304,1.684,1320,1.646,1341,1.339,1378,1.975,1393,4.287,1478,1.485,1690,3.943,1796,2.499,1811,1.727,1936,1.896,1961,2.559,1973,4.421,2039,2.964,2215,1.594,2219,4.328,2247,3.299,2248,1.83,2909,3.305,3657,3.547,3699,2.306,4838,2.212,5200,2.699,5369,2.306,6100,5.643,6177,1.664,6865,3.305,7660,8.114,7669,2.212,7676,4.158,7677,2.623,7678,2.432,7679,2.623,7680,2.623,7681,5.873,7682,2.623,7683,2.432,7684,2.137,7685,2.432,7686,2.623,7687,2.623,7688,2.623,7689,2.623,7690,2.623,7691,2.432,7692,2.432,7693,2.623]],["component/267",[463,1.098,740,0.776,7650,1.397]],["title/268",[9,19.305,60,17.202,740,19.616,749,27.085]],["name/268",[3,1.478]],["text/268",[1,1.64,2,1.95,9,4.224,19,3.061,34,1.847,56,2.678,59,2.65,60,3.459,75,6.068,113,4.792,171,3.512,172,2.447,177,2.92,225,3.862,253,2.58,344,2.896,346,3.277,350,3.468,388,4.615,393,3.605,421,3.534,425,2.828,732,3.534,740,4.292,767,2.687,775,4.19,837,3.557,861,3.227,917,4.569,941,5.695,954,3.581,979,4.334,1068,3.605,1123,6.26,1194,3.331,1197,4.792,1201,5.085,1362,3.919,1393,5.932,1714,4.236,1796,3.763,1973,5.083,2190,5.083,2215,4.104,2247,3.792,3221,6.26,5213,6.26,6100,4.879,7660,6.357,7694,6.752]],["component/268",[463,1.098,740,0.776,7650,1.397]],["title/269",[60,19.72,710,34.86,1201,36.048]],["name/269",[710,0.738,7660,0.954,7695,1.41]],["text/269",[1,0.824,9,3.923,10,1.738,19,3.639,28,1.369,34,2.614,48,3.019,56,2.151,59,2.129,60,3.495,71,2.345,75,5.367,78,3.441,94,1.153,110,2.272,127,2.448,131,3.121,147,2.281,149,2.566,186,2.299,208,2.957,219,1.877,232,1.937,243,2.04,254,2.136,264,3.14,300,2.299,334,4.614,346,3.896,354,1.996,373,2.317,388,2.317,425,2.272,463,2.592,514,2.706,516,2.769,529,2.676,557,3.785,583,2.326,710,2.839,712,3.525,722,2.619,740,3.986,749,2.529,754,1.721,776,2.936,836,2.786,854,3,861,2.592,886,4.742,927,2.753,947,3.175,961,3.095,979,6.135,1058,4.981,1099,2.721,1190,4.315,1191,4.544,1201,5.717,1203,4.29,1393,5.247,1478,5.41,1698,3.525,1754,4.575,1796,3.023,1926,4.18,1989,3.725,2247,3.046,4149,4.575,5050,3.785,5369,4.769,6100,3.92,7598,4.419,7660,6.467,7678,5.029,7696,5.424]],["component/269",[463,1.098,740,0.776,7650,1.397]],["title/270-1",[172,28.28,774,38.489]],["name/270-1",[]],["text/270-1",[]],["component/270-1",[]],["title/270-2",[60,23.101,774,38.489]],["name/270-2",[]],["text/270-2",[]],["component/270-2",[]],["title/270-3",[60,19.72,504,28.681,767,26.505]],["name/270-3",[]],["text/270-3",[]],["component/270-3",[]],["title/270-4",[412,33.736,6467,56.384]],["name/270-4",[]],["text/270-4",[]],["component/270-4",[]],["title/270-5",[754,24.758,5169,63.574]],["name/270-5",[]],["text/270-5",[]],["component/270-5",[]],["title/270-6",[60,23.101,94,16.583]],["name/270-6",[]],["text/270-6",[]],["component/270-6",[]],["title/270-7",[36,38.011]],["name/270-7",[]],["text/270-7",[]],["component/270-7",[]],["title/270-8",[858,36.108]],["name/270-8",[]],["text/270-8",[]],["component/270-8",[]],["title/270-9",[90,42.31]],["name/270-9",[]],["text/270-9",[]],["component/270-9",[]],["title/270-10",[60,23.101,857,53.59]],["name/270-10",[]],["text/270-10",[]],["component/270-10",[]],["title/270-11",[775,41.328,787,49.08,1021,36.569]],["name/270-11",[]],["text/270-11",[]],["component/270-11",[]],["title/270-12",[94,12.348,114,23.12,787,42.813,4239,41.985]],["name/270-12",[]],["text/270-12",[]],["component/270-12",[]],["title/270-13",[774,38.489,858,29.916]],["name/270-13",[]],["text/270-13",[]],["component/270-13",[]],["title/270-14",[504,33.599,858,29.916]],["name/270-14",[]],["text/270-14",[]],["component/270-14",[]],["title/270-15",[858,29.916,1212,44.898]],["name/270-15",[]],["text/270-15",[]],["component/270-15",[]],["title/270-16",[279,36.227]],["name/270-16",[]],["text/270-16",[]],["component/270-16",[]],["title/270-17",[955,47.519]],["name/270-17",[]],["text/270-17",[]],["component/270-17",[]],["title/270-18",[28,19.699,754,24.758]],["name/270-18",[]],["text/270-18",[]],["component/270-18",[]],["title/270-19",[1588,66.834]],["name/270-19",[]],["text/270-19",[]],["component/270-19",[]],["title/270-20",[857,53.59,858,29.916]],["name/270-20",[]],["text/270-20",[]],["component/270-20",[]],["title/270-21",[60,23.101,857,53.59]],["name/270-21",[]],["text/270-21",[]],["component/270-21",[]],["title/270-22",[774,38.489,973,31.159]],["name/270-22",[]],["text/270-22",[]],["component/270-22",[]],["title/270-23",[504,33.599,973,31.159]],["name/270-23",[]],["text/270-23",[]],["component/270-23",[]],["title/270-24",[754,24.758,973,31.159]],["name/270-24",[]],["text/270-24",[]],["component/270-24",[]],["title/270-25",[89,34.449,95,23.985]],["name/270-25",[]],["text/270-25",[]],["component/270-25",[]],["title/270-26",[95,23.985,795,54.446]],["name/270-26",[]],["text/270-26",[]],["component/270-26",[]],["title/270-27",[857,53.59,973,31.159]],["name/270-27",[]],["text/270-27",[]],["component/270-27",[]],["title/270-28",[116,49.501,754,24.758]],["name/270-28",[]],["text/270-28",[]],["component/270-28",[]],["title/270-29",[754,24.758,2172,44.169]],["name/270-29",[]],["text/270-29",[]],["component/270-29",[]],["title/270-30",[48,25.048,754,21.134,1500,43.282]],["name/270-30",[]],["text/270-30",[]],["component/270-30",[]],["title/270-31",[504,33.599,754,24.758]],["name/270-31",[]],["text/270-31",[]],["component/270-31",[]],["title/270-32",[754,24.758,857,53.59]],["name/270-32",[]],["text/270-32",[]],["component/270-32",[]],["title/270-33",[754,24.758,837,41.103]],["name/270-33",[]],["text/270-33",[]],["component/270-33",[]],["title/270-34",[95,23.985,862,51.359]],["name/270-34",[]],["text/270-34",[]],["component/270-34",[]],["title/270-35",[114,31.05,2817,56.384]],["name/270-35",[]],["text/270-35",[]],["component/270-35",[]],["title/270-36",[114,31.05,754,24.758]],["name/270-36",[]],["text/270-36",[]],["component/270-36",[]],["title/270-37",[89,34.449,95,23.985]],["name/270-37",[]],["text/270-37",[]],["component/270-37",[]],["title/270-38",[95,23.985,795,54.446]],["name/270-38",[]],["text/270-38",[]],["component/270-38",[]],["title/270-39",[95,23.985,743,44.169]],["name/270-39",[]],["text/270-39",[]],["component/270-39",[]],["title/270-40",[95,17.859,166,28.052,743,32.889,6315,45.955]],["name/270-40",[]],["text/270-40",[]],["component/270-40",[]],["title/270",[9,19.305,60,17.202,740,19.616,837,30.606]],["name/270",[9,0.469,611,0.885,740,0.476]],["text/270",[1,0.763,2,1.292,3,0.239,4,2.862,8,0.193,9,2.246,10,1.02,15,1.503,18,0.279,21,1.769,28,2.053,29,0.502,32,0.541,34,1.988,36,3.229,37,0.217,40,0.49,46,0.39,48,1.453,50,0.504,56,0.423,59,1.103,60,2.905,69,0.359,70,1.178,71,0.668,72,0.239,75,0.868,77,0.693,79,0.655,80,0.965,81,0.35,82,0.552,84,0.35,85,0.326,89,1.56,90,1.587,94,1.122,95,3.384,106,0.75,107,0.669,110,2.21,111,0.291,114,3.67,116,2.65,118,0.25,120,0.21,124,0.343,125,0.242,131,0.318,134,0.407,139,0.437,143,0.32,147,1.881,149,0.731,151,1.177,158,1.117,166,0.515,171,0.555,172,1.019,174,0.45,175,0.392,180,0.379,182,0.959,184,0.49,188,0.232,189,1.121,190,0.192,198,0.642,199,0.308,201,0.622,203,0.326,205,0.368,206,0.758,208,0.581,219,0.191,222,0.315,225,2.779,226,0.94,232,2.538,237,0.469,239,0.253,240,0.323,242,1.268,243,1.453,244,1.71,245,1.155,250,0.245,253,1.71,254,2.351,260,0.238,264,2.249,266,1.784,269,0.259,272,1.208,273,0.35,276,0.721,279,1.932,285,0.299,287,0.873,293,0.295,295,0.293,300,0.234,302,0.932,305,0.492,306,0.839,308,0.282,309,0.226,310,0.222,330,0.601,332,0.892,334,0.963,335,0.244,342,1.431,344,1.205,346,0.268,350,0.794,354,0.392,355,2.106,356,0.261,362,0.855,363,0.243,373,1.651,388,3.527,393,0.569,395,0.63,396,0.786,397,0.235,398,0.323,412,0.239,417,0.28,421,0.558,425,0.648,432,1.037,437,0.287,440,0.301,445,0.251,463,0.953,479,0.368,504,3.445,515,0.332,527,1.444,528,0.274,529,3.947,530,0.685,532,0.45,552,1.902,561,0.642,569,0.59,570,1.831,571,0.277,583,2.466,586,1.005,601,0.343,604,0.416,610,1.578,614,0.899,642,0.323,648,0.368,655,0.754,673,0.339,675,0.949,688,1.545,692,2.19,697,0.295,701,0.809,722,0.267,728,0.624,729,2.064,732,0.809,734,0.336,740,2.22,741,0.808,743,1.591,749,0.721,750,0.303,753,0.518,754,3.287,758,0.416,759,0.604,763,1.225,766,0.973,767,3.016,768,2.146,771,4.529,774,3.587,775,4.964,784,0.26,787,6.929,790,0.329,791,0.282,792,0.989,793,1.212,794,2.239,795,1.685,798,1.359,800,0.694,805,0.332,807,0.803,816,0.905,820,4.437,826,1.248,829,0.859,836,0.284,837,0.291,839,1.286,840,0.711,844,1.364,846,0.329,854,0.305,856,0.884,857,1.93,858,3.846,859,0.744,860,0.721,861,0.739,862,0.702,881,0.407,885,0.392,886,0.913,899,4.848,901,0.466,903,1.046,905,0.354,917,0.374,926,0.466,927,0.541,938,0.379,947,0.624,952,0.562,954,1.058,955,2.534,963,0.28,969,0.279,973,2.838,974,0.336,979,1.28,982,0.604,1004,0.558,1021,2.758,1044,0.526,1068,0.569,1072,0.332,1073,0.642,1099,3.101,1104,0.318,1125,0.437,1138,0.466,1139,0.803,1145,1.072,1150,0.305,1169,0.407,1187,0.318,1190,2.077,1191,2.187,1194,0.526,1197,0.392,1198,0.512,1201,0.577,1203,0.843,1212,1.39,1215,0.293,1217,0.31,1218,0.573,1221,0.308,1232,0.332,1238,0.466,1262,0.407,1296,0.786,1303,2.172,1338,0.45,1341,0.282,1342,0.466,1344,0.354,1354,0.329,1362,2.76,1376,0.959,1392,0.379,1393,0.303,1399,1.594,1411,0.466,1441,0.329,1446,0.343,1447,1.35,1464,0.295,1466,0.336,1484,0.721,1488,0.981,1500,0.359,1513,0.426,1526,0.843,1540,0.308,1571,0.555,1584,0.869,1588,0.757,1596,0.437,1600,0.594,1713,0.585,1717,0.363,1758,1.307,1796,2.153,1813,0.35,1841,0.284,1852,1.317,1870,0.301,1900,0.399,1911,1.483,1931,0.339,1936,1.441,1951,0.905,1953,2.223,1956,1.37,1961,0.608,1990,0.385,1994,0.343,1997,1.191,2032,0.45,2039,0.279,2040,0.399,2052,0.379,2072,0.899,2074,0.899,2100,1.223,2119,0.416,2172,1.129,2174,0.416,2181,0.416,2215,0.648,2219,2.847,2238,0.343,2247,1.357,2272,0.541,2273,0.363,2312,0.392,2329,1.441,2398,0.77,2427,0.416,2428,0.803,2560,1.44,2648,0.937,2688,0.385,2813,0.786,2817,0.399,2819,1.515,2896,0.959,2899,0.869,2900,1.634,2901,2.395,2908,0.368,2909,0.407,2910,3.259,2978,0.45,2987,0.45,3068,0.744,3113,0.426,3115,0.485,3151,0.937,3290,0.676,3342,1.046,3593,0.437,3612,0.45,3718,0.392,3755,0.426,4064,0.485,4239,2.553,4253,0.466,4314,0.485,4420,0.437,4442,0.822,4707,0.437,4763,0.485,5169,1.625,5200,1.915,5211,0.485,5212,0.485,5244,1.359,5566,1.537,6024,0.374,6037,1.031,6043,0.803,6104,0.416,6116,0.937,6117,1.359,6124,0.426,6177,1.532,6258,1.097,6315,3.304,6403,0.437,6467,0.77,6474,1.754,6524,0.512,6572,0.512,6828,0.45,6835,0.937,6865,0.786,7263,0.843,7269,0.899,7316,0.512,7577,0.512,7581,0.989,7585,0.869,7590,1.304,7598,0.869,7599,0.466,7600,0.466,7630,0.512,7673,0.485,7675,0.512,7692,0.512,7697,0.552,7698,2.798,7699,1.546,7700,1.066,7701,0.552,7702,1.066,7703,0.552,7704,0.552,7705,0.552,7706,0.552,7707,0.552,7708,1.546,7709,0.552,7710,0.552,7711,0.552,7712,0.552,7713,0.552,7714,1.066,7715,0.552,7716,0.552,7717,0.552,7718,0.552,7719,0.552,7720,0.552,7721,0.552,7722,0.552,7723,0.552,7724,0.552,7725,0.552,7726,1.066,7727,1.066,7728,0.512,7729,0.552,7730,0.552,7731,0.552,7732,0.552,7733,0.552,7734,1.066,7735,0.552,7736,1.066,7737,0.552,7738,0.552]],["component/270",[463,1.098,740,0.776,7650,1.397]],["title/271-1",[28,14.668,397,24.719,754,18.435,5050,40.541]],["name/271-1",[]],["text/271-1",[]],["component/271-1",[]],["title/271-2",[60,23.101,774,38.489]],["name/271-2",[]],["text/271-2",[]],["component/271-2",[]],["title/271-3",[774,38.489,858,29.916]],["name/271-3",[]],["text/271-3",[]],["component/271-3",[]],["title/271-4",[116,42.255,754,21.134,774,32.855]],["name/271-4",[]],["text/271-4",[]],["component/271-4",[]],["title/271-5",[172,24.14,774,32.855,2896,41.328]],["name/271-5",[]],["text/271-5",[]],["component/271-5",[]],["title/271-6",[749,31.049,774,32.855,2896,41.328]],["name/271-6",[]],["text/271-6",[]],["component/271-6",[]],["title/271",[28,14.668,754,18.435,1201,31.445,5050,40.541]],["name/271",[28,0.356,754,0.448,5050,0.984]],["text/271",[4,2.75,9,2.41,19,1.414,20,1.936,28,2.425,34,1.984,36,2.095,40,0.797,48,1.598,59,0.681,60,2.3,66,0.926,70,1.025,71,1.349,75,0.974,77,1.128,79,1.065,82,2.137,94,1.979,95,0.533,106,0.842,110,1.307,114,2.652,116,2.696,120,2.531,133,0.769,143,1.007,147,1.312,151,1.78,164,0.776,166,1.506,168,1.739,172,1.54,176,0.829,182,1.077,185,2.21,186,1.801,188,2.182,189,1.447,192,0.856,196,0.897,200,0.933,201,1.255,203,1.025,208,0.946,219,0.6,225,1.747,232,0.62,242,1.918,244,2.547,250,1.383,253,1.624,264,3.039,266,1.44,276,0.627,287,1.861,295,1.654,302,0.67,306,1.312,309,1.74,334,0.838,342,1.722,344,0.744,349,1.231,355,1.7,356,0.821,373,0.741,388,3.318,391,1.114,392,1.101,393,1.665,396,1.279,398,1.016,425,1.307,438,0.801,439,0.838,440,2.317,463,0.829,479,1.158,504,3.124,521,5.102,527,0.648,528,0.861,529,4.056,552,1.174,561,1.044,563,1.034,569,0.96,570,0.998,573,0.902,575,0.809,583,2.858,586,1.128,592,1.055,658,1.602,691,1.953,692,0.756,701,1.633,703,1.766,710,0.908,722,0.838,734,1.055,740,2.449,748,1.065,749,3.382,750,0.953,753,0.842,754,3.512,761,0.902,763,1.065,766,2.074,767,1.241,768,1.602,771,4.883,774,4.737,775,4.501,783,0.891,787,6.861,807,2.348,820,4.548,839,0.794,840,1.158,844,0.842,857,4.111,858,3.445,859,6.701,861,0.829,862,1.142,886,1.025,896,2.254,909,2.406,910,0.982,963,0.881,964,0.829,967,0.797,968,1.025,974,1.896,977,1.114,1013,0.967,1019,1.065,1023,1.142,1039,2.488,1058,2.637,1072,1.878,1078,1.279,1099,3.344,1145,1.677,1190,2.284,1191,2.406,1198,0.833,1201,2.3,1303,0.902,1362,1.007,1446,1.936,1478,0.982,1526,0.946,1572,2.637,1758,1.688,1771,1.254,1813,1.101,1841,1.602,1852,0.946,1858,2.111,1870,1.7,1903,1.211,1929,1.231,1962,1.114,1973,1.306,1997,2.404,2046,2.696,2089,1.279,2100,1.372,2219,5.345,2247,0.974,2329,1.254,2399,3.016,2580,1.463,2585,1.372,2813,1.279,2817,1.254,2896,5.777,2899,1.414,2909,1.279,2921,1.414,3342,2.111,3428,1.414,3717,1.306,3755,1.337,4016,2.892,4268,1.372,4280,1.254,4314,2.743,4530,1.525,4648,1.231,5050,5.062,5169,1.414,5200,1.878,5437,1.609,5441,2.404,6024,1.174,6095,1.609,6100,5.242,6467,1.254,6477,1.609,6942,1.463,7546,1.609,7554,1.463,7590,1.463,7593,1.372,7598,1.414,7599,2.631,7600,2.631,7622,1.609,7627,1.609,7660,4.05,7673,1.525,7676,1.609,7691,1.609,7698,2.743,7739,1.735,7740,1.735,7741,1.735,7742,3.119,7743,1.525,7744,1.735,7745,1.735,7746,1.735,7747,1.735]],["component/271",[463,1.098,740,0.776,7650,1.397]],["title/272",[60,17.202,186,24.622,192,28.66,2198,43.734]],["name/272",[192,0.538,1190,0.586,1191,0.617,2198,0.821]],["text/272",[1,1.123,2,2.137,9,3.324,59,2.904,60,3.755,82,3.573,124,4.591,140,3.466,172,2.682,175,2.723,176,3.536,177,3.199,192,3.65,242,3.339,254,2.914,344,3.173,346,4.856,352,4.093,373,3.161,388,3.161,515,4.454,561,4.454,583,3.173,655,5.53,729,4.112,736,6.24,740,3.378,749,4.664,783,3.801,856,5.026,963,3.756,964,3.536,969,3.734,1004,3.873,1072,6.021,1187,4.258,1190,3.977,1191,4.189,1376,4.591,1393,4.063,1771,5.347,2033,4.87,4442,5.702,4523,6.86]],["component/272",[463,1.098,740,0.776,7650,1.397]],["title/273-1",[9,17.119,127,23.25,219,17.83,740,17.395,757,33.072]],["name/273-1",[]],["text/273-1",[]],["component/273-1",[]],["title/273-2",[9,17.119,186,21.834,412,22.276,740,17.395,979,33.072]],["name/273-2",[]],["text/273-2",[]],["component/273-2",[]],["title/273-3",[9,17.119,94,10.95,611,32.319,740,17.395,1026,39.701]],["name/273-3",[]],["text/273-3",[]],["component/273-3",[]],["title/273-4",[9,19.305,60,17.202,254,22.881,740,19.616]],["name/273-4",[]],["text/273-4",[]],["component/273-4",[]],["title/273-5",[9,17.119,60,15.254,241,31.316,740,17.395,749,24.018]],["name/273-5",[]],["text/273-5",[]],["component/273-5",[]],["title/273",[9,19.305,60,17.202,740,19.616,1331,37.295]],["name/273",[611,0.885,740,0.476,1331,0.905]],["text/273",[1,0.96,2,2.828,4,1.641,9,3.886,10,1.813,15,1.234,18,0.418,19,1.315,32,0.812,34,2.741,40,1.828,48,0.602,50,3.268,52,2.48,56,1.15,59,3.091,60,3.622,66,0.855,67,1.304,70,0.946,71,0.692,77,1.04,82,1.42,90,2.194,94,1.202,98,0.765,114,0.637,120,0.608,122,1.339,127,1.309,134,2.138,135,1.472,145,1.862,149,0.757,167,0.963,171,1.509,172,2.05,174,1.304,185,3.593,186,2.927,190,1.695,192,1.431,198,0.963,206,1.423,208,3.084,217,1.004,219,1.69,225,1.635,226,1.763,232,1.036,236,0.843,237,1.749,241,0.973,245,1.192,246,0.963,253,0.612,254,4.031,260,2.975,263,2.078,266,0.739,269,1.863,270,0.817,272,2.148,276,2.681,290,1.004,300,1.229,310,1.964,318,2.436,330,1.127,332,0.716,335,1.281,341,1.642,342,1.611,344,0.687,346,2.746,352,0.885,354,0.589,373,1.699,388,0.684,393,0.855,412,3.208,419,1.57,421,2.556,437,0.833,440,0.873,445,1.321,463,3.301,511,0.777,530,0.71,532,1.304,537,2.059,557,1.117,569,0.885,583,0.687,589,0.899,608,1.266,688,0.777,699,0.86,704,1.617,716,0.833,722,0.773,728,0.937,740,4.131,741,1.175,742,1.518,743,0.906,757,5.055,759,1.642,767,2.517,771,3.581,774,1.962,775,3.03,776,0.866,777,1.18,778,2.78,781,1.099,805,0.963,821,0.765,836,1.49,839,1.82,856,1.764,863,0.873,864,0.86,865,0.866,886,2.885,907,0.803,947,0.937,952,1.528,954,0.849,963,0.812,964,0.765,979,4.434,985,1.099,989,0.866,1004,2.082,1021,1.593,1024,0.954,1026,1.234,1075,0.812,1099,5.134,1150,0.885,1156,0.701,1169,1.18,1178,1.18,1190,5.13,1191,6.274,1230,1.04,1252,1.04,1313,1.484,1331,2.553,1353,1.157,1365,0.946,1397,1.136,1446,0.993,1571,1.509,1598,1.157,1714,1.82,1757,1.028,1758,0.866,1796,0.892,1927,1.407,1994,0.993,2039,1.464,2198,2.994,2219,4.661,2247,1.629,2248,1.117,2382,3.146,3657,3.863,3717,1.205,4441,1.205,4707,1.266,5200,3.807,5527,1.407,6037,1.068,6104,2.994,6177,2.523,7243,2.294,7603,1.35,7683,1.484,7684,1.304,7685,2.689,7748,2.901,7749,1.601,7750,1.601,7751,1.601,7752,3.977,7753,1.601,7754,3.977,7755,1.601,7756,1.601,7757,2.901,7758,1.601,7759,2.901,7760,2.901,7761,1.601,7762,1.601,7763,1.601,7764,1.484,7765,1.601,7766,1.601,7767,1.601,7768,1.601]],["component/273",[463,1.098,740,0.776,7650,1.397]],["title/274-1",[7228,82.798]],["name/274-1",[]],["text/274-1",[]],["component/274-1",[]],["title/274-2",[60,19.72,463,31.828,7769,61.751]],["name/274-2",[]],["text/274-2",[]],["component/274-2",[]],["title/274-3",[60,17.202,245,23.881,419,31.445,463,27.764]],["name/274-3",[]],["text/274-3",[]],["component/274-3",[]],["title/274",[34,12.657,59,18.164,208,25.227,463,22.116,1190,24.875,1191,26.198]],["name/274",[59,0.428,172,0.395,208,0.594,463,0.521]],["text/274",[1,1.088,2,1.632,4,0.804,9,3.858,10,1.109,21,1.496,28,0.492,33,1.436,34,1.546,36,1.884,46,0.873,48,1.301,56,0.773,59,2.219,60,3.35,66,1.04,71,1.496,72,0.842,73,0.765,75,1.094,82,1.667,90,0.875,94,0.992,95,1.063,107,1.222,113,1.383,114,0.775,120,1.314,124,1.209,125,0.853,127,0.879,134,2.549,147,0.819,166,1.67,169,0.983,171,1.013,172,2.346,174,1.587,175,0.717,190,4.325,198,2.809,201,1.391,208,5.979,209,2.008,217,4.868,219,0.674,225,2.323,232,1.236,237,0.856,241,1.184,243,0.733,244,0.745,245,2.946,253,2.16,254,3.592,258,1.643,260,3.757,264,0.762,266,0.9,276,2.59,279,0.749,285,1.872,300,3.037,330,1.344,332,0.871,335,0.86,342,0.789,346,2.265,350,1.001,354,0.717,373,1.478,388,3.896,393,1.04,417,3.638,419,3.504,420,3.944,421,1.02,425,0.816,436,4.69,463,4.359,529,0.961,530,0.864,557,3.256,583,0.836,588,0.966,591,0.904,600,2.549,601,1.209,699,1.047,704,2.601,711,1.121,712,6.157,722,2.729,740,3.92,741,0.789,742,3.388,749,1.613,750,1.07,753,1.679,757,3.629,767,1.377,768,1.777,771,3.2,774,0.961,775,2.147,800,1.204,806,1.07,826,1.007,836,1.001,858,0.747,861,0.931,886,2.044,903,1.318,907,0.977,956,1.886,979,1.251,985,2.376,1004,1.811,1023,1.282,1024,1.161,1026,1.501,1058,1.209,1099,1.736,1190,1.86,1191,4.393,1194,0.961,1197,1.383,1201,1.054,1290,1.541,1331,1.251,1342,1.643,1365,2.044,1376,1.209,1393,1.07,1447,1.318,1571,1.013,1598,1.408,1714,1.222,1749,1.236,1758,1.054,1796,1.086,1936,1.408,1961,1.974,1962,1.251,2219,4.165,2247,3.175,2472,7.494,2909,1.436,3148,1.436,3225,1.466,5200,2.809,6100,1.408,6104,4.255,6121,1.806,6177,1.236,6865,1.436,7649,2.918,7660,1.318,7666,3.208,7764,1.806,7770,1.948,7771,5.241,7772,1.948,7773,1.948,7774,1.948,7775,3.459,7776,4.666,7777,1.948,7778,1.948,7779,4.666,7780,1.948,7781,1.948,7782,1.948,7783,1.948,7784,1.948,7785,3.459,7786,1.948,7787,1.948,7788,1.948,7789,1.948,7790,1.948,7791,1.948,7792,1.948,7793,1.948,7794,1.948,7795,1.948,7796,1.948,7797,1.948,7798,1.948]],["component/274",[463,1.098,740,0.776,7650,1.397]],["title/275-1",[94,10.95,812,38.782,890,39.701,1237,40.752,1355,31.316]],["name/275-1",[]],["text/275-1",[]],["component/275-1",[]],["title/275-2",[1,7.822,237,22.65,268,31.01,1099,25.846,1191,29.165]],["name/275-2",[]],["text/275-2",[]],["component/275-2",[]],["title/275-3",[1,5.839,6,24.398,19,17.433,51,12.711,54,15.866,95,11.821,1099,19.293,1221,21.432]],["name/275-3",[]],["text/275-3",[]],["component/275-3",[]],["title/275",[1058,48.416,5639,63.574]],["name/275",[1058,1.239,5639,1.627]],["text/275",[1,1.979,2,2.927,4,1.539,6,4.786,10,1.926,18,1.57,19,2.724,34,3.032,36,2.425,37,2.358,47,2.366,48,2.837,50,4.795,51,1.986,52,1.892,60,1.779,71,1.613,72,2.598,82,3.387,90,3.886,94,1.603,95,1.847,98,1.782,99,2.98,110,2.517,133,1.654,140,1.747,170,2.562,171,3.125,172,2.734,182,2.314,185,3.125,186,3.666,189,1.73,193,2.224,237,5.28,241,2.267,246,4.541,260,3.725,268,4.541,276,1.348,310,1.5,344,1.6,346,1.81,363,3.317,516,4.842,527,1.394,530,1.654,560,2.828,600,5.559,668,1.764,722,1.801,729,3.555,732,1.952,734,2.267,750,3.299,778,2.121,810,2.203,812,2.808,867,1.739,881,1.425,890,2.874,979,4.843,1032,1.991,1058,4.681,1070,4.752,1099,4.339,1190,2.005,1191,4.271,1221,2.079,1224,2.95,1230,5.621,1237,8.017,1243,6.665,1306,3.039,1599,2.603,1717,2.455,2039,1.882,2121,5.067,2273,4.966,3657,6.842,5402,2.488,5639,3.039,6142,3.458,7684,3.039,7799,3.73,7800,3.73,7801,3.73,7802,3.458,7803,3.458]],["component/275",[463,1.502,7650,1.91]],["title/276-1",[50,36.912,304,43.484]],["name/276-1",[]],["text/276-1",[]],["component/276-1",[]],["title/276-2",[50,31.509,219,23.05,246,40.089]],["name/276-2",[]],["text/276-2",[]],["component/276-2",[]],["title/276-3",[94,16.583,5402,52.054]],["name/276-3",[]],["text/276-3",[]],["component/276-3",[]],["title/276-4",[50,31.509,219,23.05,1099,33.413]],["name/276-4",[]],["text/276-4",[]],["component/276-4",[]],["title/276-5",[70,34.32,219,20.107,1099,29.147,1191,32.889]],["name/276-5",[]],["text/276-5",[]],["component/276-5",[]],["title/276-6",[6,36.859,51,19.204,219,20.107,7804,53.866]],["name/276-6",[]],["text/276-6",[]],["component/276-6",[]],["title/276-7",[70,30.434,186,21.834,237,22.65,1099,25.846,1191,29.165]],["name/276-7",[]],["text/276-7",[]],["component/276-7",[]],["title/276",[1,7.026,2,13.365,50,21.894,175,17.029,187,25.598,219,16.017]],["name/276",[1,0.166,2,0.315,50,0.516,219,0.377]],["text/276",[1,0.402,2,0.764,4,2.675,6,5.424,8,0.506,9,0.481,15,0.616,19,0.656,21,2.078,28,0.365,34,2.497,36,0.584,37,0.568,40,1.216,50,6.139,51,3.018,52,0.456,54,0.597,60,2.324,66,0.772,70,3.108,79,0.888,82,1.879,90,0.65,94,1.256,95,1.124,98,1.747,106,0.702,110,0.606,114,0.576,117,1.144,118,0.656,124,1.642,125,0.633,132,1.442,134,1.066,141,0.965,149,2.137,164,1.635,171,1.901,172,1.325,175,2.738,177,1.58,184,0.665,185,1.901,186,1.914,187,2.499,190,3.668,193,1.577,199,0.806,219,3.406,222,0.826,225,1.502,226,2.222,227,1.549,228,1.698,237,3.272,242,1.65,243,0.544,244,0.553,245,0.595,246,5.792,250,0.642,253,1.011,260,2.545,261,0.888,263,0.616,268,3.902,270,4.195,272,0.549,276,2.689,295,1.403,304,3.895,310,1.47,320,2.022,330,2.716,334,0.699,335,1.168,344,1.135,346,3.392,347,0.757,348,1.046,350,1.359,352,2.499,354,0.974,355,1.442,356,1.252,358,0.94,362,0.8,373,0.618,388,1.13,415,0.871,417,0.734,421,1.385,425,0.606,435,1.351,438,1.222,439,1.277,447,3.51,463,0.691,514,0.722,518,1.403,529,0.714,530,1.173,560,0.681,569,0.8,570,0.833,571,0.726,591,0.671,600,4.777,601,0.898,642,1.549,704,0.806,722,1.765,728,1.549,729,1.087,740,0.488,741,0.586,750,0.794,778,1.29,800,0.504,886,0.855,903,0.979,904,1.046,907,1.327,910,0.819,969,1.844,980,1.341,985,2.511,1004,1.385,1030,1.422,1058,0.898,1060,1.089,1070,1.144,1092,1.066,1099,6.206,1100,1.79,1101,1.878,1102,1.95,1122,0.908,1136,0.794,1156,1.158,1176,1.089,1190,4.758,1191,6.435,1194,0.714,1201,1.432,1206,1.22,1230,6.648,1242,1.22,1263,1.846,1306,2.156,1320,0.908,1358,2.462,1367,1.066,1441,3.137,1446,0.898,1464,2.809,1480,0.908,1600,0.806,1657,4.626,1746,0.979,1962,0.929,1990,1.01,2037,1.22,2039,0.73,2273,1.741,2353,1.272,2388,1.144,2441,2.231,2564,1.179,2597,5.378,3148,1.066,3657,7.002,4320,2.231,4442,2.039,4640,2.156,5402,3.014,5639,1.179,6820,2.453,7263,1.144,7684,2.978,7698,1.272,7802,3.389,7803,1.341,7804,1.341,7805,2.231,7806,2.646,7807,2.646,7808,2.646,7809,2.646,7810,1.447,7811,3.655,7812,1.447,7813,1.447,7814,1.447,7815,3.655,7816,1.447,7817,1.447,7818,3.655,7819,1.447,7820,1.447,7821,1.447,7822,1.447,7823,3.655,7824,3.655,7825,4.188,7826,1.341,7827,1.447,7828,1.447,7829,1.447,7830,1.447,7831,1.447,7832,1.447,7833,1.447]],["component/276",[463,1.502,7650,1.91]],["title/277-1",[95,17.859,219,20.107,988,30.217,7834,49]],["name/277-1",[]],["text/277-1",[]],["component/277-1",[]],["title/277-2",[50,31.509,219,23.05,7834,56.173]],["name/277-2",[]],["text/277-2",[]],["component/277-2",[]],["title/277-3",[52,16.227,219,17.83,1156,22.555,7834,43.451,7835,47.767]],["name/277-3",[]],["text/277-3",[]],["component/277-3",[]],["title/277-4",[729,27.377,754,21.134,7836,52.682]],["name/277-4",[]],["text/277-4",[]],["component/277-4",[]],["title/277-5",[50,31.509,80,26.598,800,23.18]],["name/277-5",[]],["text/277-5",[]],["component/277-5",[]],["title/277-6",[34,18.215,272,25.29,800,23.18]],["name/277-6",[]],["text/277-6",[]],["component/277-6",[]],["title/277-7",[800,20.22,881,22.204,1190,31.227,1418,24.622]],["name/277-7",[]],["text/277-7",[]],["component/277-7",[]],["title/277-8",[50,27.485,54,23.97,800,20.22,881,22.204]],["name/277-8",[]],["text/277-8",[]],["component/277-8",[]],["title/277-9",[219,17.83,655,25.14,800,17.93,838,33.48,964,24.62]],["name/277-9",[]],["text/277-9",[]],["component/277-9",[]],["title/277-10",[800,20.22,881,22.204,964,27.764,7837,51.081]],["name/277-10",[]],["text/277-10",[]],["component/277-10",[]],["title/277-11",[800,20.22,881,22.204,964,27.764,7838,51.081]],["name/277-11",[]],["text/277-11",[]],["component/277-11",[]],["title/277-12",[245,27.377,716,34.64,800,23.18]],["name/277-12",[]],["text/277-12",[]],["component/277-12",[]],["title/277-13",[716,30.217,800,20.22,7837,51.081,7838,51.081]],["name/277-13",[]],["text/277-13",[]],["component/277-13",[]],["title/277-14",[21,25.007,982,44.169]],["name/277-14",[]],["text/277-14",[]],["component/277-14",[]],["title/277-15",[34,18.215,5525,46.476,7839,56.173]],["name/277-15",[]],["text/277-15",[]],["component/277-15",[]],["title/277-16",[7559,68.055]],["name/277-16",[]],["text/277-16",[]],["component/277-16",[]],["title/277",[219,23.05,800,23.18,1221,37.119]],["name/277",[50,0.516,219,0.377,816,0.638,1190,0.586]],["text/277",[1,0.812,2,1.19,4,1.198,6,2.051,7,0.298,10,0.703,13,0.314,15,0.593,18,0.472,19,0.435,21,1.642,22,1.657,28,1.598,34,1.731,36,2.693,37,0.194,38,0.238,40,0.227,41,1.912,46,0.553,48,1.55,50,2.076,51,0.461,52,1.937,54,1.584,56,0.196,59,0.376,60,0.957,66,0.264,70,0.566,71,0.414,72,0.414,73,0.376,77,0.906,79,0.304,80,1.952,82,2.652,85,0.566,88,0.292,89,0.423,90,0.222,92,0.403,94,0.384,95,1.772,98,0.236,106,0.24,109,0.33,110,1.216,113,0.351,114,0.555,120,0.364,121,1.111,122,0.443,123,0.222,127,0.223,131,0.552,132,0.76,141,0.33,142,0.957,147,0.208,149,0.234,159,0.547,164,0.429,167,0.298,171,1.843,172,0.795,173,0.403,175,1.413,176,0.458,177,0.603,180,0.34,181,0.552,184,1.486,186,2.443,189,0.445,190,4.115,196,0.256,199,0.276,200,0.266,201,2.06,205,0.33,206,1.738,208,0.523,217,0.31,219,1.426,225,0.901,227,1.892,232,0.783,241,1.333,242,0.223,243,1.926,244,1.235,245,0.394,246,0.298,250,0.425,253,0.533,254,0.195,260,0.601,263,0.593,264,1.001,268,0.298,270,1.809,272,1.856,276,1.678,279,0.536,290,0.31,300,0.929,302,0.538,304,0.534,305,0.228,306,1.733,308,2.496,309,0.203,317,0.571,318,2.302,320,0.771,332,0.221,334,0.239,341,2.767,342,1.881,344,0.598,346,0.465,347,0.259,352,1.788,354,0.513,355,0.523,356,1.037,359,0.304,360,1.842,362,2.124,363,0.613,373,0.771,375,2.332,388,0.409,393,0.512,395,0.292,397,0.768,398,0.29,419,0.268,421,0.502,425,0.402,435,2.241,438,2.923,439,2.684,442,0.68,447,0.33,456,0.345,515,0.298,516,0.489,518,0.262,519,0.326,527,0.521,529,0.473,530,1.433,554,0.307,561,0.839,562,1.014,570,0.802,573,0.257,575,0.65,576,0.7,582,0.505,583,2.292,588,0.245,591,0.229,601,0.595,642,1.057,655,3.411,662,0.906,668,2.529,674,2.457,697,0.744,704,1.222,708,2.473,711,0.285,716,1.997,722,1.058,729,2.995,732,1.692,741,0.2,753,0.465,754,1.308,759,0.28,767,2.519,771,0.28,776,0.268,780,0.262,783,0.716,784,0.451,793,1.097,799,0.435,800,4.076,810,1.066,816,3.808,820,0.561,821,1.388,824,0.566,825,0.895,826,0.256,829,4.345,834,0.475,838,0.623,839,0.226,846,0.295,847,0.895,855,0.589,856,1.433,866,0.381,869,1.384,870,0.292,872,0.608,877,0.318,881,2.203,886,0.566,892,0.391,895,0.28,898,0.268,903,0.649,904,0.357,907,0.248,927,0.708,934,0.298,937,0.272,939,1.569,947,0.29,952,0.261,954,0.739,958,0.307,962,0.282,963,0.487,964,1.969,967,0.83,968,0.292,969,0.484,971,2.55,973,0.198,974,0.301,975,0.839,982,0.789,988,2.416,996,0.335,1004,1.147,1023,0.326,1024,0.295,1028,0.29,1032,0.264,1039,1.498,1044,1.262,1050,0.435,1058,0.307,1068,0.264,1075,0.251,1089,0.758,1090,0.351,1094,1.075,1099,0.906,1100,0.944,1117,0.495,1132,0.595,1144,0.403,1145,0.266,1153,1.216,1155,3.723,1156,2.992,1158,3.219,1159,0.601,1171,0.29,1187,0.285,1190,4.454,1191,0.543,1194,0.244,1198,1.229,1216,0.28,1221,2.979,1232,0.298,1233,0.357,1262,0.706,1263,0.345,1290,0.391,1296,0.364,1304,0.318,1331,0.318,1341,1.119,1345,0.261,1365,0.292,1393,0.272,1398,0.615,1399,2.096,1404,0.251,1418,3.805,1434,0.318,1441,0.295,1446,1.12,1447,0.649,1448,0.298,1459,0.403,1463,0.278,1464,0.264,1470,0.403,1484,0.944,1499,1.05,1502,0.68,1518,1.145,1523,1.188,1525,0.758,1526,0.27,1527,1.132,1571,0.257,1591,0.318,1666,1.188,1689,0.318,1712,2.753,1713,1.204,1717,0.326,1722,2.294,1760,0.261,1770,0.808,1803,0.345,1852,0.27,1857,0.381,1893,1.391,1900,0.357,1904,0.357,1930,0.351,1955,0.561,1962,0.318,1990,0.669,2072,0.417,2089,0.706,2101,0.381,2137,0.372,2172,1.448,2230,1.075,2239,0.372,2248,0.345,2250,0.364,2273,0.326,2344,0.33,2391,0.68,2399,0.68,2422,1.204,2516,0.781,2577,0.364,2629,0.403,2698,1.33,2709,0.669,2892,0.391,2901,0.372,3008,0.68,3025,0.739,3040,2.336,3055,1.176,3061,1.293,3068,1.26,3161,0.459,3213,0.889,3225,0.722,3537,0.889,3717,0.372,3727,0.808,3924,0.843,4176,0.372,4268,0.391,4410,2.297,4441,0.372,4442,0.739,4754,0.391,5116,0.391,5246,0.381,5315,0.435,5424,0.781,5441,0.381,5525,0.669,5682,0.459,5845,1.674,5969,0.326,6112,0.808,6124,0.381,6129,1.926,6315,0.758,6574,1.103,6819,0.459,7243,0.391,7281,1.008,7293,0.435,7493,0.459,7585,0.403,7669,0.417,7771,0.459,7834,5.486,7835,2.693,7836,2.023,7837,3.115,7838,1.226,7839,0.808,7840,0.889,7841,0.495,7842,2.033,7843,1.394,7844,6.278,7845,4.956,7846,4.644,7847,2.192,7848,0.495,7849,0.889,7850,0.495,7851,0.495,7852,0.495,7853,0.495,7854,0.495,7855,1.394,7856,4.389,7857,0.495,7858,1.805,7859,3.543,7860,0.495,7861,0.495,7862,0.495,7863,0.495,7864,0.495,7865,0.495,7866,0.495,7867,0.495,7868,0.495,7869,0.495,7870,0.495,7871,0.495,7872,0.959,7873,0.959,7874,0.495,7875,1.394,7876,0.959,7877,0.495,7878,0.495,7879,0.889,7880,0.495,7881,0.495,7882,0.495,7883,0.495,7884,0.495,7885,0.495,7886,0.495,7887,0.495,7888,0.459,7889,0.495,7890,0.495,7891,4.306,7892,1.226,7893,1.805,7894,2.033,7895,0.495,7896,0.495,7897,0.495,7898,0.495,7899,0.495,7900,0.495,7901,0.495,7902,0.495,7903,0.495,7904,0.495,7905,0.495,7906,0.495,7907,0.495,7908,0.495,7909,0.495,7910,0.959,7911,0.495,7912,0.495,7913,1.394,7914,0.495,7915,0.889,7916,1.674,7917,1.674,7918,1.674,7919,1.674,7920,2.997,7921,3.232,7922,0.959,7923,0.959,7924,0.959,7925,0.959,7926,0.959,7927,0.959,7928,0.959,7929,0.959,7930,0.959,7931,0.959,7932,0.495,7933,0.889,7934,0.495,7935,0.495,7936,0.459,7937,1.394,7938,0.495,7939,0.495,7940,0.495,7941,0.495,7942,0.495,7943,0.495,7944,0.495,7945,0.495,7946,0.495,7947,0.495,7948,0.495,7949,0.495,7950,0.495,7951,0.459,7952,0.495,7953,0.495,7954,0.495,7955,0.495]],["component/277",[463,1.502,7650,1.91]],["title/278-1",[132,42.531,958,48.416]],["name/278-1",[]],["text/278-1",[]],["component/278-1",[]],["title/278-2",[175,17.029,232,16.528,583,19.848,881,17.687,1153,19.385,1190,24.875]],["name/278-2",[]],["text/278-2",[]],["component/278-2",[]],["title/278-3",[21,25.007,729,32.072]],["name/278-3",[]],["text/278-3",[]],["component/278-3",[]],["title/278-4",[21,21.347,881,25.454,1221,37.119]],["name/278-4",[]],["text/278-4",[]],["component/278-4",[]],["title/278-5",[219,20.107,973,23.201,1156,25.435,1190,31.227]],["name/278-5",[]],["text/278-5",[]],["component/278-5",[]],["title/278-6",[21,18.621,729,23.881,754,18.435,829,25.018]],["name/278-6",[]],["text/278-6",[]],["component/278-6",[]],["title/278-7",[80,26.598,973,26.598,7836,52.682]],["name/278-7",[]],["text/278-7",[]],["component/278-7",[]],["title/278-8",[121,25.224,662,29.147,881,22.204,963,29.488]],["name/278-8",[]],["text/278-8",[]],["component/278-8",[]],["title/278-9",[121,28.916,219,23.05,5402,44.434]],["name/278-9",[]],["text/278-9",[]],["component/278-9",[]],["title/278-10",[881,22.204,964,27.764,1153,24.336,1190,31.227]],["name/278-10",[]],["text/278-10",[]],["component/278-10",[]],["title/278-11",[7559,68.055]],["name/278-11",[]],["text/278-11",[]],["component/278-11",[]],["title/278",[71,22.276,175,18.958,219,17.83,881,19.689,1190,27.692]],["name/278",[219,0.488,881,0.539,1190,0.758]],["text/278",[1,0.914,2,1.817,4,1.63,6,1.259,9,0.24,10,1.517,11,0.497,12,0.544,15,0.308,21,3.646,22,0.788,28,2.109,30,0.505,32,0.367,34,2.039,36,3.089,37,0.779,40,0.635,48,1.322,50,1.441,51,0.838,52,0.435,54,0.818,59,0.995,60,2.012,71,1.097,72,0.313,77,0.898,78,0.459,79,1.218,80,2.616,82,1.935,84,0.877,85,0.816,89,1.345,94,0.154,95,1.455,98,1.212,106,0.671,110,1.062,121,1.716,122,0.638,123,1.139,125,0.317,127,0.326,132,3.281,133,0.321,140,0.339,141,0.922,155,0.464,159,0.413,164,0.618,167,0.832,171,1.319,172,0.919,175,2.885,176,0.66,180,0.497,181,0.416,184,0.912,186,1.675,190,3.235,193,1.183,199,0.77,200,0.389,201,0.556,207,0.909,208,0.394,209,0.42,217,0.454,219,2.776,222,0.413,225,1.043,226,0.84,227,1.485,232,2.149,235,0.513,236,0.381,241,0.44,242,0.326,243,1.639,244,0.528,245,0.297,246,0.435,250,0.613,253,0.276,263,2.014,264,0.776,269,0.339,270,1.295,272,0.525,276,1.958,279,1.52,283,0.403,295,0.383,300,0.306,302,0.533,304,0.77,305,0.334,306,2.278,308,2.225,309,0.296,310,1.02,317,0.431,318,0.595,320,1.684,330,0.771,334,0.349,335,0.319,342,1.601,344,1.088,345,0.406,346,1.918,347,0.723,350,0.371,352,2.186,354,0.73,355,0.394,356,0.938,359,0.444,362,1.403,373,1.083,388,0.847,395,0.427,396,0.533,397,0.588,417,0.701,420,0.505,421,0.723,423,0.359,425,0.579,435,2.225,436,0.389,438,2.779,439,2.456,444,0.44,447,0.482,449,0.4,504,1.311,512,0.482,520,0.589,521,0.449,527,1.628,529,0.357,530,0.321,559,1.744,560,0.65,561,0.435,562,0.776,570,1.459,576,2.873,580,0.374,583,3.835,588,0.359,591,0.92,601,1.574,635,0.389,642,1.783,655,4.489,662,0.693,668,2.24,675,0.444,685,0.423,692,0.315,694,0.416,704,0.403,711,0.795,715,0.482,716,1.828,722,0.667,728,0.423,729,2.091,732,0.723,734,0.44,743,0.409,750,0.397,753,0.671,754,2.079,759,0.409,767,1.399,783,0.371,791,0.369,793,2.402,800,1.993,805,0.435,816,0.423,818,0.61,821,1.212,825,0.464,829,3.21,834,0.685,838,0.898,847,1.955,855,1.218,856,2.256,861,0.66,881,2.686,886,0.427,889,0.459,896,0.523,898,0.391,904,1.833,927,0.367,933,1.151,934,0.435,939,0.963,947,0.809,956,1.081,958,0.449,961,0.413,962,0.788,963,1.546,964,1.68,967,0.912,969,2.198,971,2.17,973,2.032,975,0.435,988,2.055,1004,1.84,1013,0.403,1024,0.824,1032,1.059,1033,1.362,1039,0.423,1044,0.357,1058,1.89,1059,0.624,1071,0.505,1094,1.529,1099,2.873,1100,0.935,1101,0.981,1104,0.416,1117,0.374,1122,0.454,1127,0.544,1132,0.857,1150,1.097,1153,2.944,1154,0.636,1155,2.317,1156,2.073,1157,0.909,1158,2.068,1159,1.91,1162,0.505,1166,0.427,1183,0.589,1187,0.416,1190,5.827,1191,1.123,1198,1.218,1212,0.416,1221,4.265,1262,0.533,1263,0.505,1303,0.376,1304,0.464,1331,0.464,1334,0.523,1341,0.705,1376,0.449,1393,0.397,1397,0.513,1399,3.27,1404,0.367,1418,1.291,1438,0.589,1446,0.857,1447,0.489,1448,0.832,1464,1.626,1469,0.887,1473,1.206,1524,0.482,1527,0.867,1540,0.403,1544,0.533,1591,0.887,1593,0.544,1599,0.505,1600,0.403,1652,0.47,1655,0.61,1666,3.566,1674,0.636,1685,1.281,1689,1.273,1691,1.542,1698,0.47,1717,0.476,1718,2.092,1722,1.8,1746,1.342,1749,0.459,1752,0.459,1757,0.464,1758,1.903,1769,0.636,1778,0.572,1786,0.671,1811,0.909,1816,0.47,1819,0.867,1841,0.371,1852,0.753,1866,0.497,1870,0.394,1892,0.671,1900,0.523,1904,1.434,1930,0.981,1936,0.998,1955,0.423,1973,0.544,1994,0.857,2184,0.513,2215,0.44,2272,0.367,2273,2.314,2399,0.513,2428,0.544,2441,1.165,2452,0.544,2482,0.589,2502,0.981,2518,0.589,2533,0.589,2562,1.215,2564,0.589,2568,1.165,2593,0.513,2756,0.949,2792,0.489,2836,0.533,2908,0.482,3040,3.676,3068,0.505,3225,0.544,3516,1.342,3638,1.126,3756,0.61,4038,0.671,4410,3.126,4640,0.589,4710,0.572,4754,3.126,4773,0.636,4897,0.636,5315,0.636,5402,0.922,5441,0.557,5470,0.497,5525,0.505,5812,0.61,5831,0.671,6315,1.093,6528,1.281,7019,0.671,7168,0.671,7291,0.572,7292,0.544,7293,0.636,7571,0.671,7594,0.636,7604,0.671,7669,0.61,7728,0.671,7805,1.165,7836,3.126,7840,2.823,7842,1.281,7844,3.091,7845,2.352,7849,1.281,7879,2.352,7891,2.823,7892,1.744,7894,1.281,7951,1.281,7956,0.723,7957,0.723,7958,0.723,7959,4.763,7960,0.723,7961,0.723,7962,0.723,7963,0.723,7964,0.723,7965,0.723,7966,1.382,7967,0.723,7968,0.723,7969,0.723,7970,0.723,7971,0.723,7972,0.723,7973,0.723,7974,0.723,7975,0.723,7976,0.723,7977,0.723,7978,0.723,7979,0.723,7980,0.723,7981,0.723,7982,1.382,7983,3.045,7984,0.723,7985,0.723,7986,0.723,7987,0.723,7988,0.723,7989,0.671,7990,0.723,7991,0.723,7992,0.723,7993,0.723,7994,0.723,7995,0.723]],["component/278",[463,1.502,7650,1.91]],["title/279",[1208,59.747]],["name/279",[3,1.478]],["text/279",[1,1.819,2,2.828,4,2.958,32,3.639,34,1.961,40,3.295,46,2.472,50,4.633,56,3.883,60,3.548,106,3.48,111,3.777,172,2.599,175,3.603,177,3.1,181,4.126,219,2.481,222,5.588,276,2.591,306,3.015,336,4.925,341,4.059,344,3.075,346,3.48,417,3.639,425,4.102,463,3.426,529,3.537,537,5.089,538,4.66,768,3.683,839,3.28,854,3.966,886,7.079,898,3.881,903,4.852,909,4.059,934,4.316,939,3.48,1175,8.609,1190,5.263,1191,5.543,1478,4.059,7263,5.672,7996,7.17]],["component/279",[463,1.502,7650,1.91]],["title/280-1",[716,40.58,964,37.286]],["name/280-1",[]],["text/280-1",[]],["component/280-1",[]],["title/280-2",[21,25.007,982,44.169]],["name/280-2",[]],["text/280-2",[]],["component/280-2",[]],["title/280-3",[34,18.215,5525,46.476,7839,56.173]],["name/280-3",[]],["text/280-3",[]],["component/280-3",[]],["title/280-4",[1,6.378,46,10.605,276,15.18,356,19.873,655,20.498,1153,17.596,1190,22.578]],["name/280-4",[]],["text/280-4",[]],["component/280-4",[]],["title/280-5",[21,25.007,7743,68.6]],["name/280-5",[]],["text/280-5",[]],["component/280-5",[]],["title/280-6",[28,19.699,7743,68.6]],["name/280-6",[]],["text/280-6",[]],["component/280-6",[]],["title/280-7",[7559,68.055]],["name/280-7",[]],["text/280-7",[]],["component/280-7",[]],["title/280",[245,23.881,964,27.764,1153,24.336,1190,31.227]],["name/280",[219,0.377,716,0.567,964,0.521,1190,0.586]],["text/280",[0,0.839,1,1.141,4,1.53,10,0.675,21,3.661,28,2.177,34,2.358,36,1.497,37,1.456,46,1.721,50,2.35,60,2.401,66,1.125,71,1.604,73,1.456,80,1.481,82,2.136,95,1.14,106,1.023,114,1.476,117,2.934,120,1.408,121,1.61,124,1.308,132,2.022,135,1.07,140,0.987,151,0.883,167,1.269,171,1.929,172,0.764,175,1.828,184,1.705,186,1.572,190,2.076,193,1.257,199,1.175,219,2.359,225,0.866,232,1.774,236,1.11,243,1.868,244,1.417,245,2.042,246,1.269,250,0.935,253,0.805,254,0.83,260,2.575,270,1.894,276,2.161,279,0.811,283,1.175,285,2.007,298,1.245,300,2.105,302,0.813,306,0.886,330,0.819,332,0.943,342,2.423,344,2.13,355,1.149,356,1.755,359,1.294,363,2.629,373,1.584,380,1.553,388,3.21,391,2.381,412,1.604,421,1.103,425,0.883,436,1.133,504,0.908,511,1.023,516,3.054,529,2.45,530,0.935,559,1.045,570,1.213,583,2.923,588,1.045,655,4.783,660,2.858,662,3.77,715,1.406,716,3.545,729,0.866,741,0.854,754,1.898,759,5.132,761,1.096,766,1.028,767,2.38,768,1.083,771,3.858,773,1.203,799,1.853,800,1.729,826,1.089,829,0.908,834,1.045,839,3.118,846,1.257,847,1.353,856,2.202,881,1.417,899,1.257,903,1.426,910,1.193,927,3.815,939,1.8,963,2.521,964,4.12,967,1.705,968,1.245,969,1.063,982,3.386,988,1.929,1004,1.941,1023,1.387,1037,1.426,1039,3.99,1072,1.269,1078,1.553,1099,1.057,1102,1.553,1125,1.667,1127,2.792,1139,1.587,1144,1.717,1153,2.855,1190,3.664,1191,2.812,1221,2.067,1296,1.553,1331,1.353,1341,1.076,1348,1.281,1376,1.308,1378,1.587,1399,2.241,1446,1.308,1459,1.717,1499,3.739,1500,2.41,1502,1.496,1527,1.322,1588,1.496,1666,1.387,1742,1.257,1955,1.234,2021,1.717,2089,2.733,2215,2.254,2247,2.789,2329,1.523,2344,2.474,2391,1.496,2560,1.257,2836,1.553,2881,1.853,3058,1.954,3148,1.553,3225,1.587,3342,1.426,3516,5.834,4268,1.667,4271,1.587,4640,1.717,5200,3.6,5424,3.022,5425,1.954,5427,4.605,5470,1.448,5525,3.466,5940,1.853,6112,3.128,6124,1.624,6127,1.553,6177,3.794,6574,3.929,7292,2.792,7618,1.954,7805,3.128,7836,4.731,7839,4.189,7892,1.853,7915,1.954,7916,1.954,7917,1.954,7918,1.954,7919,1.954,7933,3.439,7936,1.954,7959,3.261,7989,1.954,7997,2.108,7998,4.966,7999,2.108,8000,2.108,8001,2.108,8002,2.108,8003,2.108,8004,2.108,8005,2.108,8006,2.108]],["component/280",[463,1.502,7650,1.91]],["title/281-1",[7228,82.798]],["name/281-1",[]],["text/281-1",[]],["component/281-1",[]],["title/281-2",[94,14.156,208,36.305,217,41.78]],["name/281-2",[]],["text/281-2",[]],["component/281-2",[]],["title/281-3",[208,36.305,217,41.78,600,49.08]],["name/281-3",[]],["text/281-3",[]],["component/281-3",[]],["title/281-4",[54,19.094,94,9.836,208,25.227,217,29.031,245,19.023,5402,30.875]],["name/281-4",[]],["text/281-4",[]],["component/281-4",[]],["title/281-5",[60,23.101,245,32.072]],["name/281-5",[]],["text/281-5",[]],["component/281-5",[]],["title/281",[60,15.254,208,28.083,217,32.319,245,21.177,419,27.885]],["name/281",[208,0.594,217,0.684,245,0.448,611,0.684]],["text/281",[1,1.444,18,0.443,19,0.769,21,0.98,22,1.745,28,1.289,34,2.098,45,0.946,46,2.402,49,1.731,50,1.974,52,0.963,54,1.722,59,0.666,60,2.729,66,0.906,71,1.322,73,1.638,82,2.556,89,0.749,94,1.253,95,1.569,98,0.811,102,1.204,110,0.711,120,1.585,122,0.784,127,1.883,133,0.752,140,0.795,146,1.342,155,1.089,159,0.968,164,0.759,167,1.021,169,2.106,172,4.304,177,1.322,181,0.976,186,0.719,190,4.611,192,0.837,205,1.132,208,6.151,209,4.716,210,1.25,217,5.098,219,1.767,225,1.257,227,1.79,237,1.344,239,1.399,243,0.638,244,1.595,245,3.91,246,1.84,247,4.847,253,1.169,254,0.668,258,1.431,260,3.304,270,3.009,272,1.161,276,1.105,279,0.653,285,0.918,289,1.431,291,0.888,299,2.688,300,0.719,302,1.611,310,0.682,330,3.696,341,0.961,342,0.687,346,1.484,354,1.125,361,3.072,373,0.725,388,1.783,392,1.077,393,0.906,419,0.918,421,1.6,423,0.842,429,1.492,430,1.492,435,1.561,436,2.744,438,3.939,439,1.476,462,1.148,515,5.134,518,1.621,570,1.76,583,1.79,591,0.787,600,1.25,601,1.053,623,0.961,625,1.226,629,1.25,635,1.644,642,1.79,685,0.993,729,1.257,735,0.993,740,1.032,750,0.932,771,2.362,774,1.508,778,1.079,781,3.506,783,0.872,789,0.828,800,1.064,837,0.894,866,6.262,869,1.655,877,1.089,881,1.169,891,1.342,903,1.148,907,0.851,927,0.861,937,0.932,982,0.961,1004,1.6,1024,1.012,1033,2.1,1060,1.277,1072,1.84,1078,2.253,1100,2.069,1135,1.342,1155,0.773,1190,4.124,1191,6.221,1201,1.655,1221,0.946,1230,1.103,1244,1.342,1251,1.103,1290,1.342,1322,1.342,1353,1.226,1398,1.089,1420,0.932,1488,1.077,1539,2.1,1580,1.165,1600,0.946,1692,1.226,1717,1.117,1904,1.226,2033,1.117,2039,1.543,2247,1.717,3229,1.573,3657,2.419,3910,2.579,4704,1.573,5200,1.021,5402,2.784,5658,7.499,6127,1.25,6177,1.077,7169,2.835,7170,4.733,7172,2.835,7649,3.52,7769,1.573,7805,7.194,7825,1.573,7826,1.573,8007,1.697,8008,3.058,8009,1.573,8010,1.697,8011,1.697,8012,1.697,8013,1.697,8014,1.697,8015,1.697,8016,1.697,8017,1.697,8018,1.697,8019,1.697,8020,1.697,8021,1.697,8022,1.697,8023,1.697,8024,1.697,8025,3.058,8026,1.697,8027,1.697,8028,4.173,8029,4.173,8030,1.697,8031,1.697,8032,1.697,8033,5.893,8034,1.697,8035,1.697]],["component/281",[463,1.502,7650,1.91]],["title/282-1",[1,7.822,2,14.878,54,21.256,94,10.95,516,26.305]],["name/282-1",[]],["text/282-1",[]],["component/282-1",[]],["title/282-2",[21,21.347,219,23.05,8036,61.751]],["name/282-2",[]],["text/282-2",[]],["component/282-2",[]],["title/282-3",[729,32.072,3363,61.717]],["name/282-3",[]],["text/282-3",[]],["component/282-3",[]],["title/282-4",[21,21.347,516,34.007,754,21.134]],["name/282-4",[]],["text/282-4",[]],["component/282-4",[]],["title/282-5",[356,36.912,516,39.838]],["name/282-5",[]],["text/282-5",[]],["component/282-5",[]],["title/282",[21,21.347,516,34.007,754,21.134]],["name/282",[21,0.452,516,0.72,1742,0.841]],["text/282",[1,1.382,2,1.959,4,1.319,10,1.954,13,1.131,15,0.759,18,0.835,19,1.97,21,3.527,28,1.712,34,0.874,36,2.737,40,1.469,48,1.202,52,0.562,54,0.736,56,0.707,60,2.008,66,0.952,71,1.879,72,1.879,77,1.159,80,2.115,82,2.178,85,1.053,89,1.412,94,0.379,98,0.852,110,1.339,114,1.272,131,1.026,132,1.743,135,0.905,162,2.231,171,1.663,172,0.646,175,2.713,177,0.771,179,1.504,184,1.469,185,0.927,186,1.842,189,0.827,190,3.463,192,0.88,207,1.174,219,2.73,225,0.733,232,2.979,237,2.982,239,1.988,245,3.03,250,0.791,253,0.681,260,1.377,263,1.36,264,1.251,270,3.114,272,0.677,276,1.155,283,2.422,304,0.994,309,0.73,320,1.768,330,0.693,334,1.544,342,2.146,346,1.552,354,1.176,356,3.488,359,1.095,363,2.329,373,1.856,375,2.86,388,1.366,391,1.145,397,0.759,421,0.933,423,1.586,427,1.342,435,2.705,438,3.132,439,2.558,504,1.377,514,0.889,516,6.778,530,0.791,549,1.504,559,0.884,561,1.073,569,0.986,571,0.895,575,0.831,576,0.895,583,3.162,591,2.016,600,1.314,655,0.87,694,3.903,698,1.001,704,0.994,711,1.84,722,2.098,729,1.314,754,2.503,778,0.629,781,1.225,800,0.621,825,1.145,829,1.377,834,0.884,836,1.642,839,3.103,856,0.791,861,1.528,866,7.262,881,1.661,886,1.053,903,1.207,910,1.009,939,1.552,947,1.872,969,0.9,971,0.979,973,2.115,974,1.943,982,1.81,1032,1.707,1037,1.207,1044,4.115,1070,1.41,1072,2.616,1092,1.314,1099,2.657,1139,1.342,1156,3.652,1169,1.314,1190,4.699,1191,1.81,1221,0.994,1230,2.824,1243,2.464,1250,5.681,1262,1.314,1315,1.653,1331,1.145,1361,1.314,1399,1.961,1404,1.623,1441,1.063,1446,1.106,1451,1.41,1463,1.001,1464,0.952,1499,1.342,1598,2.31,1600,0.994,1657,2.811,1717,1.174,1742,4.973,1749,2.028,1796,1.782,1962,1.145,2036,2.163,2142,1.453,2286,1.342,2563,1.504,3023,1.41,3225,1.342,3319,1.504,3363,6.598,3411,1.504,4131,1.568,4451,1.653,4453,1.568,4590,1.568,5335,2.964,6129,2.407,6171,1.568,7191,2.964,7582,1.568,7684,2.605,7836,2.529,7844,1.568,7888,1.653,7920,2.964,7959,6.482,8009,2.964,8036,4.911,8037,1.783,8038,3.197,8039,1.783,8040,1.783,8041,1.783,8042,1.783,8043,1.783,8044,3.197,8045,1.783,8046,3.197,8047,1.783]],["component/282",[463,1.502,7650,1.91]]],"invertedIndex":[["",{"_index":190,"title":{"35":{},"66":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"8":{},"9":{},"11":{},"13":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"60":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"88":{},"89":{},"91":{},"93":{},"96":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"112":{},"113":{},"115":{},"117":{},"122":{},"127":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"155":{},"157":{},"159":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"170":{},"171":{},"172":{},"173":{},"174":{},"176":{},"180":{},"181":{},"184":{},"185":{},"190":{},"192":{},"193":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"203":{},"205":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"217":{},"256":{},"258":{},"267":{},"270":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["0",{"_index":694,"title":{},"name":{},"text":{"3":{},"24":{},"50":{},"61":{},"83":{},"88":{},"108":{},"110":{},"144":{},"146":{},"159":{},"162":{},"163":{},"171":{},"172":{},"184":{},"185":{},"195":{},"196":{},"200":{},"209":{},"213":{},"214":{},"216":{},"254":{},"255":{},"256":{},"278":{},"282":{}},"component":{}}],["0.0",{"_index":8016,"title":{},"name":{},"text":{"281":{}},"component":{}}],["0.0.1",{"_index":7824,"title":{},"name":{},"text":{"276":{}},"component":{}}],["0.0.2",{"_index":7682,"title":{},"name":{},"text":{"267":{}},"component":{}}],["0.03",{"_index":6866,"title":{},"name":{},"text":{"172":{}},"component":{}}],["0.1.0",{"_index":5674,"title":{},"name":{},"text":{"111":{}},"component":{}}],["0.10",{"_index":7494,"title":{},"name":{},"text":{"212":{}},"component":{}}],["0.10.0",{"_index":7483,"title":{"212-5":{}},"name":{},"text":{},"component":{}}],["0.11.0",{"_index":7481,"title":{"212-1":{}},"name":{},"text":{},"component":{}}],["0.120",{"_index":8047,"title":{},"name":{},"text":{"282":{}},"component":{}}],["0.53",{"_index":6519,"title":{},"name":{},"text":{"151":{}},"component":{}}],["0.6.2",{"_index":7492,"title":{"212-21":{}},"name":{},"text":{},"component":{}}],["0.7",{"_index":7510,"title":{},"name":{},"text":{"212":{}},"component":{}}],["0.7.0",{"_index":7490,"title":{"212-17":{}},"name":{},"text":{},"component":{}}],["0.8",{"_index":2897,"title":{},"name":{},"text":{"51":{},"212":{}},"component":{}}],["0.8.0",{"_index":7488,"title":{"212-13":{}},"name":{},"text":{},"component":{}}],["0.9",{"_index":7497,"title":{},"name":{},"text":{"212":{}},"component":{}}],["0.9.0",{"_index":7485,"title":{"212-9":{}},"name":{},"text":{},"component":{}}],["0001",{"_index":6248,"title":{},"name":{},"text":{"142":{}},"component":{}}],["01",{"_index":7487,"title":{"212-9":{}},"name":{},"text":{},"component":{}}],["0100",{"_index":7538,"title":{},"name":{},"text":{"216":{}},"component":{}}],["01t10:15:30.00z",{"_index":5073,"title":{},"name":{},"text":{"80":{}},"component":{}}],["02",{"_index":7484,"title":{"212-5":{}},"name":{},"text":{},"component":{}}],["0397a9d5ba94",{"_index":7794,"title":{},"name":{},"text":{"274":{}},"component":{}}],["04",{"_index":7493,"title":{"212-21":{}},"name":{},"text":{"277":{}},"component":{}}],["07",{"_index":7482,"title":{"212-1":{}},"name":{},"text":{},"component":{}}],["08",{"_index":7491,"title":{"212-17":{}},"name":{},"text":{},"component":{}}],["09",{"_index":7489,"title":{"212-13":{}},"name":{},"text":{"214":{}},"component":{}}],["0ea84862944b",{"_index":7931,"title":{},"name":{},"text":{"277":{}},"component":{}}],["0s",{"_index":7442,"title":{},"name":{},"text":{"203":{}},"component":{}}],["1",{"_index":438,"title":{"26-2":{},"26-6":{},"234-1":{}},"name":{"68":{}},"text":{"3":{},"7":{},"9":{},"11":{},"24":{},"27":{},"28":{},"31":{},"35":{},"38":{},"40":{},"44":{},"49":{},"51":{},"56":{},"57":{},"58":{},"61":{},"63":{},"65":{},"66":{},"71":{},"75":{},"77":{},"78":{},"79":{},"80":{},"83":{},"85":{},"87":{},"88":{},"91":{},"93":{},"107":{},"110":{},"117":{},"137":{},"139":{},"141":{},"148":{},"151":{},"159":{},"170":{},"172":{},"184":{},"185":{},"198":{},"199":{},"200":{},"208":{},"209":{},"214":{},"254":{},"255":{},"256":{},"271":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["1\",context=\"mycontext\",fromtierlevel=\"0\",type=\"ev",{"_index":6513,"title":{},"name":{},"text":{"151":{}},"component":{}}],["1\",context=\"mycontext\",fromtierlevel=\"0\",type=\"event\",}10.0",{"_index":6516,"title":{},"name":{},"text":{"151":{}},"component":{}}],["1\",context=\"mycontext\",fromtierlevel=\"1\",type=\"snapshot",{"_index":6518,"title":{},"name":{},"text":{"151":{}},"component":{}}],["1,tenant",{"_index":5727,"title":{},"name":{},"text":{"117":{}},"component":{}}],["1.0",{"_index":2496,"title":{},"name":{},"text":{"38":{},"165":{}},"component":{}}],["1.0.0",{"_index":5675,"title":{},"name":{},"text":{"111":{}},"component":{}}],["1.3.jar",{"_index":6754,"title":{},"name":{},"text":{"165":{}},"component":{}}],["1.4.14",{"_index":4210,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.4.16",{"_index":4211,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.4.17",{"_index":4175,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.4.18",{"_index":4173,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1.4.4.jar",{"_index":6757,"title":{},"name":{},"text":{"165":{}},"component":{}}],["1.6",{"_index":7780,"title":{},"name":{},"text":{"274":{}},"component":{}}],["1.65.1",{"_index":6031,"title":{},"name":{},"text":{"137":{},"138":{}},"component":{}}],["1.7.3",{"_index":7751,"title":{},"name":{},"text":{"273":{}},"component":{}}],["1.9.jar",{"_index":6746,"title":{},"name":{},"text":{"165":{}},"component":{}}],["1.intern",{"_index":6456,"title":{},"name":{},"text":{"148":{}},"component":{}}],["1.jar",{"_index":6625,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["1.mydomain.net",{"_index":7237,"title":{},"name":{},"text":{"196":{}},"component":{}}],["1/0",{"_index":8015,"title":{},"name":{},"text":{"281":{}},"component":{}}],["10",{"_index":648,"title":{},"name":{},"text":{"3":{},"31":{},"56":{},"80":{},"107":{},"117":{},"156":{},"172":{},"184":{},"192":{},"193":{},"199":{},"200":{},"255":{},"270":{}},"component":{}}],["100",{"_index":764,"title":{},"name":{},"text":{"5":{},"27":{},"31":{},"36":{},"50":{},"66":{},"71":{},"101":{},"102":{},"127":{},"144":{},"146":{},"172":{},"190":{},"203":{},"208":{},"216":{},"245":{},"255":{},"256":{}},"component":{}}],["1000",{"_index":1737,"title":{},"name":{},"text":{"27":{},"31":{},"80":{},"104":{},"107":{},"142":{},"146":{},"156":{},"172":{}},"component":{}}],["1000/minut",{"_index":7634,"title":{},"name":{},"text":{"256":{}},"component":{}}],["10000",{"_index":6559,"title":{},"name":{},"text":{"156":{},"172":{}},"component":{}}],["1000000",{"_index":7190,"title":{},"name":{},"text":{"190":{}},"component":{}}],["10001",{"_index":6242,"title":{},"name":{},"text":{"142":{}},"component":{}}],["10002",{"_index":6243,"title":{},"name":{},"text":{"142":{}},"component":{}}],["10003",{"_index":6247,"title":{},"name":{},"text":{"142":{}},"component":{}}],["10007",{"_index":6245,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1001",{"_index":271,"title":{},"name":{},"text":{"3":{},"142":{},"184":{}},"component":{}}],["1002",{"_index":6178,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1003",{"_index":6179,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1004",{"_index":3757,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["101",{"_index":1167,"title":{"14-1":{}},"name":{},"text":{},"component":{}}],["1024",{"_index":4908,"title":{},"name":{},"text":{"79":{}},"component":{}}],["1035",{"_index":4324,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1040",{"_index":4322,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1042",{"_index":4321,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1044f17e2323",{"_index":7777,"title":{},"name":{},"text":{"274":{}},"component":{}}],["1056",{"_index":3707,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1077",{"_index":4318,"title":{},"name":{},"text":{"61":{}},"component":{}}],["10m",{"_index":6429,"title":{},"name":{},"text":{"147":{}},"component":{}}],["11",{"_index":6029,"title":{},"name":{},"text":{"137":{},"199":{}},"component":{}}],["11.0",{"_index":6514,"title":{},"name":{},"text":{"151":{}},"component":{}}],["110",{"_index":7517,"title":{},"name":{},"text":{"213":{}},"component":{}}],["1100",{"_index":6180,"title":{},"name":{},"text":{"142":{}},"component":{}}],["11000",{"_index":6250,"title":{},"name":{},"text":{"142":{}},"component":{}}],["11001",{"_index":6251,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1106",{"_index":3379,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1123",{"_index":3372,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1125",{"_index":3447,"title":{},"name":{},"text":{"60":{}},"component":{}}],["113.5",{"_index":7783,"title":{},"name":{},"text":{"274":{}},"component":{}}],["1169",{"_index":3752,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1184",{"_index":3484,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1187",{"_index":4289,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1193",{"_index":3613,"title":{},"name":{},"text":{"60":{}},"component":{}}],["12",{"_index":5072,"title":{},"name":{},"text":{"80":{},"199":{}},"component":{}}],["1200",{"_index":3694,"title":{},"name":{},"text":{"60":{}},"component":{}}],["120000",{"_index":6884,"title":{},"name":{},"text":{"172":{}},"component":{}}],["1211",{"_index":4059,"title":{},"name":{},"text":{"61":{}},"component":{}}],["123",{"_index":4372,"title":{},"name":{},"text":{"63":{}},"component":{}}],["1230",{"_index":4315,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1231",{"_index":4316,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1234",{"_index":7191,"title":{},"name":{},"text":{"190":{},"282":{}},"component":{}}],["1264",{"_index":4313,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1274",{"_index":4311,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1280",{"_index":3609,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1287",{"_index":4310,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1293",{"_index":4317,"title":{},"name":{},"text":{"61":{}},"component":{}}],["13",{"_index":7306,"title":{},"name":{},"text":{"199":{}},"component":{}}],["1300",{"_index":6181,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1301",{"_index":6182,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1302",{"_index":6183,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1304",{"_index":6184,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1305",{"_index":6185,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1315",{"_index":3745,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1323",{"_index":4312,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1325",{"_index":3747,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1333",{"_index":3743,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1338",{"_index":3715,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1363",{"_index":4304,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1371",{"_index":4308,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1372",{"_index":4306,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1377",{"_index":5333,"title":{},"name":{},"text":{"87":{}},"component":{}}],["1391",{"_index":3721,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1394",{"_index":3719,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1397",{"_index":4303,"title":{},"name":{},"text":{"61":{}},"component":{}}],["14",{"_index":7307,"title":{},"name":{},"text":{"199":{}},"component":{}}],["1400",{"_index":6186,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1408",{"_index":4300,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1410",{"_index":4298,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1416",{"_index":4301,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1425",{"_index":4297,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1427",{"_index":3607,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1428",{"_index":3724,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1438",{"_index":3728,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1447",{"_index":3720,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1450",{"_index":4286,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1454",{"_index":4294,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1457",{"_index":4295,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1458",{"_index":3378,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1459",{"_index":4296,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1466",{"_index":3481,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1469",{"_index":3697,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1475",{"_index":3605,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1482",{"_index":4275,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1484",{"_index":4272,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1485",{"_index":4276,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1487",{"_index":4283,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1488",{"_index":4279,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1490",{"_index":3470,"title":{},"name":{},"text":{"60":{}},"component":{}}],["15",{"_index":6870,"title":{"212-1":{},"212-13":{}},"name":{},"text":{"172":{},"199":{}},"component":{}}],["15.12mb",{"_index":7774,"title":{},"name":{},"text":{"274":{}},"component":{}}],["15.12mb/79.56mb",{"_index":7778,"title":{},"name":{},"text":{"274":{}},"component":{}}],["1500",{"_index":6187,"title":{},"name":{},"text":{"142":{},"146":{}},"component":{}}],["15000",{"_index":6952,"title":{},"name":{},"text":{"172":{}},"component":{}}],["1509",{"_index":3360,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1510",{"_index":4261,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1536f297fd7e.mock.pstmn.io/list",{"_index":7304,"title":{},"name":{},"text":{"199":{}},"component":{}}],["155",{"_index":7295,"title":{},"name":{},"text":{"199":{}},"component":{}}],["1595",{"_index":4260,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1597",{"_index":4256,"title":{},"name":{},"text":{"61":{}},"component":{}}],["16",{"_index":6934,"title":{"212-5":{}},"name":{},"text":{"172":{},"199":{},"254":{}},"component":{}}],["1607",{"_index":4248,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1612",{"_index":4252,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1621",{"_index":3703,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1629",{"_index":3603,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1630",{"_index":3395,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1645",{"_index":3467,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1646",{"_index":3559,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1656",{"_index":3698,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1660",{"_index":3708,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1665",{"_index":4231,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1666",{"_index":4232,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1669",{"_index":3601,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1674",{"_index":4234,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1680",{"_index":4237,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1683",{"_index":4241,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1689",{"_index":4221,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1691",{"_index":3597,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1695",{"_index":4227,"title":{},"name":{},"text":{"61":{}},"component":{}}],["16b7152",{"_index":4223,"title":{},"name":{},"text":{"61":{}},"component":{}}],["17",{"_index":1380,"title":{},"name":{},"text":{"24":{},"124":{},"137":{}},"component":{}}],["1700",{"_index":6188,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1711",{"_index":3561,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1712",{"_index":3695,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1723",{"_index":3594,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1733",{"_index":3709,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1742",{"_index":4200,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1771",{"_index":4203,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1772",{"_index":3480,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1778",{"_index":4205,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1786",{"_index":4208,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1792",{"_index":4206,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1796",{"_index":3592,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1797",{"_index":3591,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1821",{"_index":4195,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1826",{"_index":3418,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1828",{"_index":3293,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1830",{"_index":3590,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1842",{"_index":4198,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1853",{"_index":4191,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1854",{"_index":4194,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1866",{"_index":4190,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1889",{"_index":3588,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1892",{"_index":4179,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1895",{"_index":4182,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1898",{"_index":3584,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1899",{"_index":3587,"title":{},"name":{},"text":{"60":{}},"component":{}}],["19",{"_index":7486,"title":{"212-9":{},"212-21":{}},"name":{},"text":{},"component":{}}],["1900",{"_index":6189,"title":{},"name":{},"text":{"142":{}},"component":{}}],["1901",{"_index":3583,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1905",{"_index":3581,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["1910",{"_index":3580,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1915",{"_index":3578,"title":{},"name":{},"text":{"60":{}},"component":{}}],["192.4",{"_index":7785,"title":{},"name":{},"text":{"274":{}},"component":{}}],["192.8",{"_index":7788,"title":{},"name":{},"text":{"274":{}},"component":{}}],["1920",{"_index":3662,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1929",{"_index":3479,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1930",{"_index":3477,"title":{},"name":{},"text":{"60":{}},"component":{}}],["194.9",{"_index":7781,"title":{},"name":{},"text":{"274":{}},"component":{}}],["1963",{"_index":4163,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1964",{"_index":3450,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1967",{"_index":3464,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1970/01/01",{"_index":7198,"title":{},"name":{},"text":{"191":{}},"component":{}}],["1974",{"_index":3573,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1975",{"_index":3574,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1981",{"_index":4102,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1986",{"_index":3473,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1987",{"_index":3571,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1989",{"_index":3475,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1992",{"_index":3472,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1995",{"_index":3469,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1997",{"_index":3466,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1999",{"_index":4165,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1d",{"_index":6531,"title":{},"name":{},"text":{"151":{}},"component":{}}],["1ee6",{"_index":7916,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["1gi",{"_index":657,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["1m",{"_index":6428,"title":{},"name":{},"text":{"147":{}},"component":{}}],["2",{"_index":439,"title":{"25-4":{},"26-3":{},"26-7":{},"234-2":{}},"name":{},"text":{"3":{},"9":{},"27":{},"28":{},"31":{},"32":{},"35":{},"40":{},"44":{},"49":{},"56":{},"57":{},"58":{},"60":{},"63":{},"65":{},"66":{},"71":{},"75":{},"77":{},"78":{},"80":{},"85":{},"88":{},"91":{},"93":{},"135":{},"138":{},"141":{},"143":{},"148":{},"149":{},"150":{},"159":{},"170":{},"171":{},"184":{},"185":{},"195":{},"197":{},"198":{},"199":{},"200":{},"208":{},"255":{},"256":{},"271":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["2,tenant",{"_index":5728,"title":{},"name":{},"text":{"117":{}},"component":{}}],["2.0",{"_index":2497,"title":{},"name":{},"text":{"38":{},"168":{}},"component":{}}],["2.0.1.final.jar",{"_index":6773,"title":{},"name":{},"text":{"165":{}},"component":{}}],["2.1.6.release.jar",{"_index":6766,"title":{},"name":{},"text":{"165":{}},"component":{}}],["2.1.jar",{"_index":6750,"title":{},"name":{},"text":{"165":{}},"component":{}}],["2.2.jar",{"_index":6752,"title":{},"name":{},"text":{"165":{}},"component":{}}],["2.3.4.release.jar",{"_index":6627,"title":{},"name":{},"text":{"163":{}},"component":{}}],["2.6.0",{"_index":4166,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2.intern",{"_index":6460,"title":{},"name":{},"text":{"148":{}},"component":{}}],["2.mydomain.net",{"_index":7238,"title":{},"name":{},"text":{"196":{}},"component":{}}],["2.x",{"_index":3326,"title":{},"name":{},"text":{"60":{}},"component":{}}],["20",{"_index":831,"title":{},"name":{},"text":{"5":{},"31":{},"66":{},"172":{}},"component":{}}],["200",{"_index":2089,"title":{},"name":{},"text":{"31":{},"138":{},"144":{},"172":{},"176":{},"256":{},"271":{},"277":{},"280":{}},"component":{}}],["2000",{"_index":6190,"title":{},"name":{},"text":{"142":{},"146":{},"172":{}},"component":{}}],["2001",{"_index":3463,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2002",{"_index":6191,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2008",{"_index":3568,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2016",{"_index":3659,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2020",{"_index":3462,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2021",{"_index":3437,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["2022",{"_index":3658,"title":{},"name":{},"text":{"60":{},"214":{}},"component":{}}],["2023",{"_index":160,"title":{"212-13":{},"212-17":{},"212-21":{}},"name":{},"text":{"2":{}},"component":{}}],["2023.0",{"_index":6020,"title":{"137-24":{}},"name":{},"text":{"135":{},"137":{}},"component":{}}],["2023.0.0",{"_index":6063,"title":{},"name":{},"text":{"137":{},"203":{}},"component":{}}],["2023.1",{"_index":233,"title":{"137-14":{},"138-20":{}},"name":{},"text":{"3":{},"135":{},"137":{},"166":{},"184":{},"185":{}},"component":{}}],["2023.1.0",{"_index":6324,"title":{},"name":{},"text":{"144":{}},"component":{}}],["2023.1.1",{"_index":414,"title":{"138-23":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["2023.1.2",{"_index":6093,"title":{"138-21":{}},"name":{},"text":{},"component":{}}],["2023.2",{"_index":312,"title":{"137-9":{},"138-9":{}},"name":{},"text":{"3":{},"135":{},"137":{},"184":{}},"component":{}}],["2023.2.0",{"_index":301,"title":{},"name":{},"text":{"3":{},"61":{},"138":{},"169":{},"177":{},"184":{}},"component":{}}],["2023.2.1",{"_index":6092,"title":{"138-18":{}},"name":{},"text":{"138":{}},"component":{}}],["2023.2.2",{"_index":6091,"title":{"138-17":{}},"name":{},"text":{},"component":{}}],["2023.2.3",{"_index":6090,"title":{"138-16":{}},"name":{},"text":{},"component":{}}],["2023.2.4",{"_index":6089,"title":{"138-15":{}},"name":{},"text":{"138":{}},"component":{}}],["2023.2.5",{"_index":6088,"title":{"138-14":{}},"name":{},"text":{},"component":{}}],["2023.2.6",{"_index":6087,"title":{"138-13":{}},"name":{},"text":{},"component":{}}],["2023.2.7",{"_index":6086,"title":{"138-12":{}},"name":{},"text":{},"component":{}}],["2023.2.8",{"_index":6085,"title":{"138-11":{}},"name":{},"text":{},"component":{}}],["2023.2.9",{"_index":6084,"title":{"138-10":{}},"name":{},"text":{},"component":{}}],["2024",{"_index":173,"title":{"212-1":{},"212-5":{},"212-9":{}},"name":{},"text":{"2":{},"277":{}},"component":{}}],["2024.0",{"_index":713,"title":{"137-6":{}},"name":{},"text":{"4":{},"135":{},"137":{}},"component":{}}],["2024.0.0",{"_index":705,"title":{"4":{}},"name":{},"text":{"4":{},"177":{}},"component":{}}],["2024.0.1",{"_index":6083,"title":{"138-8":{}},"name":{},"text":{},"component":{}}],["2024.0.2",{"_index":6082,"title":{"138-7":{}},"name":{},"text":{},"component":{}}],["2024.0.3",{"_index":6081,"title":{"138-6":{}},"name":{},"text":{},"component":{}}],["2024.0.4",{"_index":6080,"title":{"138-5":{}},"name":{},"text":{},"component":{}}],["2024.1",{"_index":5282,"title":{"137-1":{},"138-1":{}},"name":{},"text":{"81":{},"135":{}},"component":{}}],["2024.1.0",{"_index":6030,"title":{},"name":{},"text":{"137":{}},"component":{}}],["2024.1.1",{"_index":6079,"title":{"138-4":{}},"name":{},"text":{},"component":{}}],["2024.1.2",{"_index":6078,"title":{"138-3":{}},"name":{},"text":{},"component":{}}],["2024.1.3",{"_index":6077,"title":{"138-2":{}},"name":{},"text":{},"component":{}}],["2028",{"_index":3566,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2033",{"_index":3564,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2037",{"_index":4105,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2038",{"_index":4151,"title":{},"name":{},"text":{"61":{}},"component":{}}],["204",{"_index":7502,"title":{},"name":{},"text":{"212":{}},"component":{}}],["2040",{"_index":4152,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2041",{"_index":4104,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2045",{"_index":3458,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2051",{"_index":4156,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2052",{"_index":4153,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2061",{"_index":3562,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2062",{"_index":3560,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2063",{"_index":3558,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2065",{"_index":3556,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2066",{"_index":3554,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2067",{"_index":4145,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2071",{"_index":3456,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2073",{"_index":3552,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2074",{"_index":3341,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2082",{"_index":4142,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2088",{"_index":3656,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2093",{"_index":3550,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2095",{"_index":3551,"title":{},"name":{},"text":{"60":{}},"component":{}}],["20xx.2",{"_index":6019,"title":{},"name":{},"text":{"135":{}},"component":{}}],["20xx.{0..2}.0",{"_index":6018,"title":{},"name":{},"text":{"135":{}},"component":{}}],["21",{"_index":7825,"title":{},"name":{},"text":{"276":{},"281":{}},"component":{}}],["2100",{"_index":6194,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2101",{"_index":3549,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2105",{"_index":3547,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2106",{"_index":3545,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2107",{"_index":6195,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2108",{"_index":6197,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2110",{"_index":3454,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2115",{"_index":3655,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2116",{"_index":3654,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2124",{"_index":3652,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2125",{"_index":3453,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2127",{"_index":4137,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2129",{"_index":3393,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2130",{"_index":3452,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2136",{"_index":3543,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2139",{"_index":3542,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2140",{"_index":3541,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2141",{"_index":3449,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2144",{"_index":3446,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2146",{"_index":3445,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2148",{"_index":3540,"title":{},"name":{},"text":{"60":{}},"component":{}}],["215.7",{"_index":7795,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2154",{"_index":4133,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2156",{"_index":3444,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2168",{"_index":4134,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2170",{"_index":3538,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2171",{"_index":3536,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2173",{"_index":3535,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2174",{"_index":3534,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2177",{"_index":4130,"title":{},"name":{},"text":{"61":{}},"component":{}}],["218.0",{"_index":7793,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2180",{"_index":3650,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2182",{"_index":3442,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2183",{"_index":3441,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2192",{"_index":3377,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2197",{"_index":3532,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2198",{"_index":3434,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2200",{"_index":6198,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2206",{"_index":3530,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2209",{"_index":3529,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2210",{"_index":4123,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2212",{"_index":3528,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2213",{"_index":3527,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2215",{"_index":3647,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2218",{"_index":3646,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2222",{"_index":3525,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2223",{"_index":3645,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2225",{"_index":4128,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2228",{"_index":3315,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2237",{"_index":3643,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2238",{"_index":3641,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2239",{"_index":3439,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2240",{"_index":3640,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2242",{"_index":4113,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2243",{"_index":4098,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2244",{"_index":3522,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2245",{"_index":4118,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2246",{"_index":4116,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2248",{"_index":4114,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2250",{"_index":3520,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2254",{"_index":3637,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2256",{"_index":4112,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2257",{"_index":4111,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2258",{"_index":3438,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2259",{"_index":3519,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2262",{"_index":3518,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2263",{"_index":4110,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2264",{"_index":3517,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2265",{"_index":3513,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2266",{"_index":3510,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2268",{"_index":3633,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2269",{"_index":3635,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2270",{"_index":3509,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2274",{"_index":4108,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2275",{"_index":4107,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2276",{"_index":4103,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2277",{"_index":4106,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2280",{"_index":3507,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2285",{"_index":4101,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2286",{"_index":4100,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2287",{"_index":4099,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2289",{"_index":4095,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2290",{"_index":4085,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2291",{"_index":4097,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2292",{"_index":4086,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2293",{"_index":4094,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2294",{"_index":3436,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2295",{"_index":3505,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2298",{"_index":4093,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2299",{"_index":4092,"title":{},"name":{},"text":{"61":{}},"component":{}}],["22t173839.200.json",{"_index":7948,"title":{},"name":{},"text":{"277":{}},"component":{}}],["22t21:37:00.000+00:00",{"_index":7529,"title":{},"name":{},"text":{"214":{}},"component":{}}],["22t21:37:01.000+00:00",{"_index":7532,"title":{},"name":{},"text":{"214":{}},"component":{}}],["2300",{"_index":4091,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2301",{"_index":3435,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2302",{"_index":6199,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2303",{"_index":6200,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2304",{"_index":6201,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2305",{"_index":4089,"title":{},"name":{},"text":{"61":{},"142":{}},"component":{}}],["2306",{"_index":6202,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2307",{"_index":3431,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2308",{"_index":3503,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2309",{"_index":3632,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2310",{"_index":6204,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2311",{"_index":4087,"title":{},"name":{},"text":{"61":{},"142":{}},"component":{}}],["2312",{"_index":3432,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2317",{"_index":3629,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2319",{"_index":3631,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2320",{"_index":3502,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2321",{"_index":3500,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2328",{"_index":3496,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2330",{"_index":3495,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2331",{"_index":3626,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2332",{"_index":3628,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2333",{"_index":3625,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2336",{"_index":3624,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2340",{"_index":3623,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2341",{"_index":3620,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2342",{"_index":3494,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2343",{"_index":3622,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2344",{"_index":3493,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2345",{"_index":3491,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2346",{"_index":3490,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2347",{"_index":3619,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2348",{"_index":3430,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2350",{"_index":3296,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2351",{"_index":3368,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2353",{"_index":3489,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2354",{"_index":3488,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2356",{"_index":3487,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2360",{"_index":3486,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2364",{"_index":4080,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2367",{"_index":4078,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2368",{"_index":4084,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2369",{"_index":4082,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2370",{"_index":4079,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2382",{"_index":4074,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2383",{"_index":3401,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2389",{"_index":4067,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2389b0240d5b",{"_index":7791,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2390",{"_index":4075,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2393",{"_index":4062,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2396",{"_index":4072,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2398",{"_index":4073,"title":{},"name":{},"text":{"61":{}},"component":{}}],["24",{"_index":5432,"title":{},"name":{},"text":{"97":{},"172":{}},"component":{}}],["24/7",{"_index":7611,"title":{},"name":{},"text":{"245":{}},"component":{}}],["2400",{"_index":3412,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2401",{"_index":4071,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2403",{"_index":3314,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2404",{"_index":3414,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2407",{"_index":4069,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2409",{"_index":4066,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2411",{"_index":4054,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2412",{"_index":4063,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2413",{"_index":4061,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2414",{"_index":4052,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2418",{"_index":3413,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2420",{"_index":3352,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2421",{"_index":3348,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2423",{"_index":4060,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2424",{"_index":4058,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2426",{"_index":4057,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2427",{"_index":3255,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2428",{"_index":4055,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2431",{"_index":4044,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2433",{"_index":4050,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2434",{"_index":4047,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2436",{"_index":4043,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2441",{"_index":4042,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2444",{"_index":4005,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2445",{"_index":4028,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2446",{"_index":4006,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2448",{"_index":4040,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2449",{"_index":4020,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2451",{"_index":4037,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2453",{"_index":3313,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2454",{"_index":4034,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2455",{"_index":4036,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2456",{"_index":4009,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2458",{"_index":4033,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2459",{"_index":4030,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2461",{"_index":3312,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2462",{"_index":4026,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2463",{"_index":4027,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2464",{"_index":4018,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2465",{"_index":4024,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2466",{"_index":4012,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2468",{"_index":4021,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2469",{"_index":4019,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2470",{"_index":4008,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2472",{"_index":4017,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2473",{"_index":4013,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2474",{"_index":4014,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2475",{"_index":3420,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2476",{"_index":3365,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2481",{"_index":4002,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2482",{"_index":4004,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2483",{"_index":4001,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2485",{"_index":3999,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2486",{"_index":3988,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2487",{"_index":3408,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2497",{"_index":3997,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2498",{"_index":3376,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2499",{"_index":3375,"title":{},"name":{},"text":{"60":{}},"component":{}}],["25",{"_index":7635,"title":{},"name":{},"text":{"256":{}},"component":{}}],["250",{"_index":6388,"title":{},"name":{},"text":{"146":{},"255":{}},"component":{}}],["2500",{"_index":6205,"title":{},"name":{},"text":{"142":{},"172":{}},"component":{}}],["2501",{"_index":6206,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2502",{"_index":6207,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2507",{"_index":3347,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2509",{"_index":3374,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2510",{"_index":3406,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2511",{"_index":6208,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2512",{"_index":3996,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2514",{"_index":3992,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2517",{"_index":3994,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2525",{"_index":3993,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2526",{"_index":3405,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2527",{"_index":3373,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2528",{"_index":3991,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2530",{"_index":3400,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2531",{"_index":3990,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2532",{"_index":3986,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2533",{"_index":3989,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2536",{"_index":3398,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2544",{"_index":3397,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2545",{"_index":3371,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2547",{"_index":3369,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2548",{"_index":3367,"title":{},"name":{},"text":{"60":{}},"component":{}}],["255",{"_index":5426,"title":{},"name":{},"text":{"97":{},"138":{}},"component":{}}],["2550",{"_index":3396,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2551",{"_index":3364,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2552",{"_index":3394,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2555",{"_index":3961,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2561",{"_index":3385,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2562",{"_index":3392,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2564",{"_index":3345,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2566",{"_index":3391,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2569",{"_index":3344,"title":{},"name":{},"text":{"60":{}},"component":{}}],["256mb",{"_index":6872,"title":{},"name":{},"text":{"172":{}},"component":{}}],["2574",{"_index":3388,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2575",{"_index":3343,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2578",{"_index":3384,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2581",{"_index":3308,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2582",{"_index":3311,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2584",{"_index":3972,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2585",{"_index":3970,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2586",{"_index":3967,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2587",{"_index":3340,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2591",{"_index":3966,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2592",{"_index":3963,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2595",{"_index":3984,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2596",{"_index":3945,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2597",{"_index":3944,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2598",{"_index":3339,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2604",{"_index":3956,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2606",{"_index":3337,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2607",{"_index":3959,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2608",{"_index":3307,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2610",{"_index":6249,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2611",{"_index":3946,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2612",{"_index":3983,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2613",{"_index":3955,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2617",{"_index":3953,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2620",{"_index":3951,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2621",{"_index":3982,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2622",{"_index":3336,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2624",{"_index":3952,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2625",{"_index":3948,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2626",{"_index":3950,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2628",{"_index":3333,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2629",{"_index":3334,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2630",{"_index":3942,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2631",{"_index":3937,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2633",{"_index":3332,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2635",{"_index":3943,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2637",{"_index":3940,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2638",{"_index":3911,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2639",{"_index":3302,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2640",{"_index":3304,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2644",{"_index":3932,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2650",{"_index":3330,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2656",{"_index":3305,"title":{},"name":{},"text":{"60":{}},"component":{}}],["266.7",{"_index":7779,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2660",{"_index":3329,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2661",{"_index":3303,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2662",{"_index":3328,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2663",{"_index":3327,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2669",{"_index":3931,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2675",{"_index":3936,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2678",{"_index":3935,"title":{},"name":{},"text":{"61":{}},"component":{}}],["268.9",{"_index":7776,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2683",{"_index":3354,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2686",{"_index":3934,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2688",{"_index":3933,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2689",{"_index":3288,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2690",{"_index":3930,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2694",{"_index":3981,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2695",{"_index":3929,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2696",{"_index":3980,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2698",{"_index":3979,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2700",{"_index":3325,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2701",{"_index":6209,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2704",{"_index":3976,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2708",{"_index":3301,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2709",{"_index":3351,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2714",{"_index":3973,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2716",{"_index":3975,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2721",{"_index":3324,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2722",{"_index":3299,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2724",{"_index":3322,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2726",{"_index":3928,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2727",{"_index":3321,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2729",{"_index":3298,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2736",{"_index":3927,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2742",{"_index":3275,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2743",{"_index":3297,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2744",{"_index":3295,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2745",{"_index":3292,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2750",{"_index":3291,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2751",{"_index":3925,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2752",{"_index":3917,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2753",{"_index":3289,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2755",{"_index":3318,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2756",{"_index":3923,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2757",{"_index":3320,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2759",{"_index":3920,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2763",{"_index":3317,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2769",{"_index":3274,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2776",{"_index":3254,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2777",{"_index":3253,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2778",{"_index":3236,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2780",{"_index":3273,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2783",{"_index":3282,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2785",{"_index":3909,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2790",{"_index":3251,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2792",{"_index":3916,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2794",{"_index":3915,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2795",{"_index":3914,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2796",{"_index":3908,"title":{},"name":{},"text":{"61":{}},"component":{}}],["28",{"_index":5433,"title":{},"name":{},"text":{"97":{}},"component":{}}],["2800",{"_index":6210,"title":{},"name":{},"text":{"142":{}},"component":{}}],["2801",{"_index":3250,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["2802",{"_index":3905,"title":{},"name":{},"text":{"61":{},"142":{}},"component":{}}],["2803",{"_index":3249,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2804",{"_index":3904,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2805",{"_index":3272,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2807",{"_index":3248,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2809",{"_index":3896,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2810",{"_index":3270,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2814",{"_index":3903,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2815",{"_index":3246,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2817",{"_index":3269,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2818",{"_index":3267,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2819",{"_index":3244,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2820",{"_index":3895,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2824",{"_index":3266,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2826",{"_index":3265,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2827",{"_index":3901,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2828",{"_index":3899,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2829",{"_index":3264,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2830",{"_index":3263,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2833",{"_index":3280,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2834",{"_index":3262,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2835",{"_index":3243,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2843",{"_index":3258,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2844",{"_index":3887,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2845",{"_index":3890,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2846",{"_index":3891,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2852",{"_index":3888,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2853",{"_index":3259,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2855",{"_index":3882,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2862",{"_index":3277,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2866",{"_index":3257,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2868",{"_index":3242,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2869",{"_index":3885,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2870",{"_index":3884,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2871",{"_index":3889,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2883",{"_index":3216,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2888",{"_index":3880,"title":{},"name":{},"text":{"61":{}},"component":{}}],["29.19mb",{"_index":7789,"title":{},"name":{},"text":{"274":{}},"component":{}}],["29.19mb/55.7mb",{"_index":7792,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2900",{"_index":3869,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2903",{"_index":3871,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2908",{"_index":3877,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2909",{"_index":3870,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2910",{"_index":3214,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2913",{"_index":3881,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2914",{"_index":3876,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2917",{"_index":3868,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2936",{"_index":3874,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2944",{"_index":3211,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2947",{"_index":3865,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2948",{"_index":3199,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2955",{"_index":3860,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2957",{"_index":3861,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2958",{"_index":3850,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2960",{"_index":3859,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2963",{"_index":3857,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2964",{"_index":3855,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2974",{"_index":3848,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2976",{"_index":3840,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2977",{"_index":3847,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2978",{"_index":3210,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2985",{"_index":3845,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2986",{"_index":3842,"title":{},"name":{},"text":{"61":{}},"component":{}}],["29e6b66d6884",{"_index":7787,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2be7f236dde6",{"_index":7528,"title":{},"name":{},"text":{"214":{}},"component":{}}],["2cd6",{"_index":7944,"title":{},"name":{},"text":{"277":{}},"component":{}}],["2d4a49de79de.mock.pstmn.io/card",{"_index":7314,"title":{},"name":{},"text":{"199":{}},"component":{}}],["2s",{"_index":7429,"title":{},"name":{},"text":{"203":{}},"component":{}}],["3",{"_index":435,"title":{"26-4":{},"26-8":{},"234-3":{}},"name":{},"text":{"3":{},"9":{},"26":{},"27":{},"28":{},"32":{},"49":{},"56":{},"58":{},"60":{},"63":{},"65":{},"71":{},"75":{},"78":{},"80":{},"85":{},"88":{},"91":{},"93":{},"114":{},"117":{},"124":{},"141":{},"143":{},"148":{},"149":{},"159":{},"170":{},"172":{},"184":{},"196":{},"197":{},"198":{},"199":{},"200":{},"205":{},"234":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["3.1.6",{"_index":3875,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3.2.2",{"_index":6004,"title":{},"name":{},"text":{"131":{}},"component":{}}],["3.3",{"_index":451,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["3.3.0",{"_index":7827,"title":{},"name":{},"text":{"276":{}},"component":{}}],["3.8.1.jar",{"_index":6748,"title":{},"name":{},"text":{"165":{}},"component":{}}],["3.8.6",{"_index":3501,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3.intern",{"_index":6461,"title":{},"name":{},"text":{"148":{}},"component":{}}],["3.mydomain.net",{"_index":7239,"title":{},"name":{},"text":{"196":{}},"component":{}}],["3.x",{"_index":3753,"title":{},"name":{},"text":{"60":{}},"component":{}}],["30",{"_index":646,"title":{},"name":{},"text":{"3":{},"33":{},"68":{},"80":{},"87":{},"91":{},"107":{},"140":{},"172":{},"184":{},"203":{},"245":{},"247":{},"253":{}},"component":{}}],["300",{"_index":6922,"title":{},"name":{},"text":{"172":{},"256":{}},"component":{}}],["3000",{"_index":5644,"title":{},"name":{},"text":{"108":{},"172":{}},"component":{}}],["30000",{"_index":6953,"title":{},"name":{},"text":{"172":{}},"component":{}}],["300000",{"_index":6909,"title":{},"name":{},"text":{"172":{}},"component":{}}],["3004",{"_index":6219,"title":{},"name":{},"text":{"142":{}},"component":{}}],["3005",{"_index":6220,"title":{},"name":{},"text":{"142":{}},"component":{}}],["3007",{"_index":3204,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3009",{"_index":3207,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3028",{"_index":3203,"title":{},"name":{},"text":{"60":{}},"component":{}}],["303",{"_index":2644,"title":{},"name":{},"text":{"44":{}},"component":{}}],["3030",{"_index":3198,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3032",{"_index":3223,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3041",{"_index":3220,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3043",{"_index":3200,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3046",{"_index":3218,"title":{},"name":{},"text":{"60":{}},"component":{}}],["3054",{"_index":3835,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3078",{"_index":3833,"title":{},"name":{},"text":{"61":{}},"component":{}}],["30_000",{"_index":5363,"title":{},"name":{},"text":{"91":{}},"component":{}}],["31",{"_index":5342,"title":{},"name":{},"text":{"87":{}},"component":{}}],["3117",{"_index":3831,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3119",{"_index":3829,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3123",{"_index":3826,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3124",{"_index":3828,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3126",{"_index":3837,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3130",{"_index":3836,"title":{},"name":{},"text":{"61":{}},"component":{}}],["31c70e9d0593.mock.pstmn.io/gift",{"_index":7287,"title":{},"name":{},"text":{"199":{}},"component":{}}],["32767",{"_index":6192,"title":{},"name":{},"text":{"142":{},"172":{}},"component":{}}],["32kb",{"_index":6958,"title":{},"name":{},"text":{"172":{}},"component":{}}],["34",{"_index":7950,"title":{},"name":{},"text":{"277":{}},"component":{}}],["34m",{"_index":7949,"title":{},"name":{},"text":{"277":{}},"component":{}}],["36",{"_index":5427,"title":{},"name":{},"text":{"97":{},"280":{}},"component":{}}],["3600000",{"_index":6956,"title":{},"name":{},"text":{"172":{}},"component":{}}],["389",{"_index":6631,"title":{},"name":{},"text":{"163":{}},"component":{}}],["3a38",{"_index":7939,"title":{},"name":{},"text":{"277":{}},"component":{}}],["3s",{"_index":7439,"title":{},"name":{},"text":{"203":{}},"component":{}}],["4",{"_index":227,"title":{},"name":{"26":{}},"text":{"3":{},"5":{},"9":{},"27":{},"31":{},"49":{},"50":{},"56":{},"66":{},"75":{},"78":{},"80":{},"81":{},"85":{},"93":{},"137":{},"149":{},"172":{},"184":{},"198":{},"199":{},"200":{},"276":{},"277":{},"278":{},"281":{}},"component":{}}],["4.0",{"_index":3194,"title":{"60-42":{},"61-132":{}},"name":{},"text":{"59":{},"60":{},"61":{}},"component":{}}],["4.0.1",{"_index":3824,"title":{"61-136":{}},"name":{},"text":{},"component":{}}],["4.0.2",{"_index":3823,"title":{"61-135":{}},"name":{},"text":{},"component":{}}],["4.0.3",{"_index":3822,"title":{"61-134":{}},"name":{},"text":{},"component":{}}],["4.0.4",{"_index":3821,"title":{"61-133":{}},"name":{},"text":{},"component":{}}],["4.1",{"_index":3193,"title":{"60-39":{},"61-129":{}},"name":{},"text":{"59":{}},"component":{}}],["4.1.1",{"_index":3820,"title":{"61-131":{}},"name":{},"text":{},"component":{}}],["4.1.2",{"_index":3819,"title":{"61-130":{}},"name":{},"text":{},"component":{}}],["4.10",{"_index":3186,"title":{"60-1":{},"61-1":{}},"name":{},"text":{"59":{},"137":{}},"component":{}}],["4.10.1",{"_index":3767,"title":{"61-2":{}},"name":{},"text":{},"component":{}}],["4.2",{"_index":3192,"title":{"60-36":{},"61-126":{}},"name":{},"text":{"59":{},"150":{}},"component":{}}],["4.2.1",{"_index":3818,"title":{"61-128":{}},"name":{},"text":{"180":{}},"component":{}}],["4.2.2",{"_index":3817,"title":{"61-127":{}},"name":{},"text":{"61":{}},"component":{}}],["4.3",{"_index":3191,"title":{"60-33":{},"61-120":{}},"name":{},"text":{"59":{},"60":{},"61":{},"139":{},"140":{},"148":{},"185":{}},"component":{}}],["4.3.1",{"_index":3816,"title":{"61-125":{}},"name":{},"text":{},"component":{}}],["4.3.2",{"_index":3815,"title":{"61-124":{}},"name":{},"text":{},"component":{}}],["4.3.3",{"_index":3814,"title":{"61-123":{}},"name":{},"text":{"61":{}},"component":{}}],["4.3.4",{"_index":3813,"title":{"61-122":{}},"name":{},"text":{"61":{}},"component":{}}],["4.3.5",{"_index":3812,"title":{"61-121":{}},"name":{},"text":{},"component":{}}],["4.4",{"_index":3190,"title":{"60-30":{},"61-110":{}},"name":{},"text":{"59":{},"60":{},"61":{},"131":{},"137":{},"139":{},"146":{},"150":{}},"component":{}}],["4.4.1",{"_index":3811,"title":{"61-119":{}},"name":{},"text":{},"component":{}}],["4.4.10",{"_index":6968,"title":{},"name":{},"text":{"172":{}},"component":{}}],["4.4.14",{"_index":6886,"title":{},"name":{},"text":{"172":{}},"component":{}}],["4.4.2",{"_index":3810,"title":{"61-118":{}},"name":{},"text":{},"component":{}}],["4.4.3",{"_index":3809,"title":{"61-117":{}},"name":{},"text":{"61":{}},"component":{}}],["4.4.4",{"_index":3808,"title":{"61-116":{}},"name":{},"text":{"61":{}},"component":{}}],["4.4.5",{"_index":3807,"title":{"61-115":{}},"name":{},"text":{},"component":{}}],["4.4.6",{"_index":3806,"title":{"61-114":{}},"name":{},"text":{"61":{}},"component":{}}],["4.4.7",{"_index":3805,"title":{"61-113":{}},"name":{},"text":{"61":{},"172":{}},"component":{}}],["4.4.8",{"_index":3804,"title":{"61-112":{}},"name":{},"text":{"61":{},"172":{}},"component":{}}],["4.4.9",{"_index":3803,"title":{"61-111":{}},"name":{},"text":{"61":{}},"component":{}}],["4.5",{"_index":3189,"title":{"60-27":{},"61-85":{}},"name":{},"text":{"59":{},"60":{},"61":{},"147":{},"163":{},"165":{}},"component":{}}],["4.5.1",{"_index":3802,"title":{"61-109":{}},"name":{},"text":{"163":{}},"component":{}}],["4.5.1.jar",{"_index":6623,"title":{},"name":{},"text":{"163":{}},"component":{}}],["4.5.10",{"_index":3793,"title":{"61-100":{}},"name":{},"text":{},"component":{}}],["4.5.11",{"_index":3792,"title":{"61-97":{}},"name":{},"text":{},"component":{}}],["4.5.12",{"_index":3791,"title":{"61-95":{}},"name":{},"text":{"140":{}},"component":{}}],["4.5.13",{"_index":3790,"title":{"61-91":{}},"name":{},"text":{"61":{},"163":{}},"component":{}}],["4.5.14",{"_index":3789,"title":{"61-89":{}},"name":{},"text":{},"component":{}}],["4.5.15",{"_index":3788,"title":{"61-86":{}},"name":{},"text":{},"component":{}}],["4.5.17",{"_index":6151,"title":{},"name":{},"text":{"140":{}},"component":{}}],["4.5.2",{"_index":3801,"title":{"61-108":{}},"name":{},"text":{"61":{}},"component":{}}],["4.5.3",{"_index":3800,"title":{"61-107":{}},"name":{},"text":{"61":{}},"component":{}}],["4.5.4",{"_index":3799,"title":{"61-106":{}},"name":{},"text":{"61":{}},"component":{}}],["4.5.5",{"_index":3798,"title":{"61-105":{}},"name":{},"text":{"61":{}},"component":{}}],["4.5.6",{"_index":3797,"title":{"61-104":{}},"name":{},"text":{"61":{}},"component":{}}],["4.5.7",{"_index":3796,"title":{"61-103":{}},"name":{},"text":{},"component":{}}],["4.5.8",{"_index":3795,"title":{"61-102":{}},"name":{},"text":{},"component":{}}],["4.5.9",{"_index":3794,"title":{"61-101":{}},"name":{},"text":{"61":{}},"component":{}}],["4.6",{"_index":1220,"title":{"60-22":{},"61-56":{},"143-6":{}},"name":{},"text":{"22":{},"59":{},"60":{},"61":{},"119":{},"143":{}},"component":{}}],["4.6.0",{"_index":1528,"title":{},"name":{},"text":{"25":{},"35":{},"60":{},"61":{},"156":{},"251":{}},"component":{}}],["4.6.1",{"_index":3787,"title":{"61-82":{}},"name":{},"text":{"143":{}},"component":{}}],["4.6.11",{"_index":303,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["4.6.2",{"_index":3786,"title":{"61-77":{}},"name":{},"text":{},"component":{}}],["4.6.3",{"_index":3785,"title":{"61-73":{}},"name":{},"text":{},"component":{}}],["4.6.4",{"_index":3784,"title":{"61-70":{}},"name":{},"text":{},"component":{}}],["4.6.5",{"_index":3783,"title":{"61-67":{}},"name":{},"text":{},"component":{}}],["4.6.6",{"_index":3782,"title":{"61-64":{}},"name":{},"text":{},"component":{}}],["4.6.7",{"_index":3781,"title":{"61-61":{}},"name":{},"text":{},"component":{}}],["4.6.8",{"_index":3780,"title":{"61-57":{}},"name":{},"text":{},"component":{}}],["4.6.x",{"_index":1592,"title":{},"name":{},"text":{"26":{}},"component":{}}],["4.7",{"_index":1219,"title":{"26":{},"60-17":{},"61-32":{}},"name":{},"text":{"22":{},"26":{},"59":{},"60":{},"61":{}},"component":{}}],["4.7.0",{"_index":1590,"title":{},"name":{},"text":{"26":{}},"component":{}}],["4.7.1",{"_index":3779,"title":{"61-53":{}},"name":{},"text":{},"component":{}}],["4.7.2",{"_index":3778,"title":{"61-48":{}},"name":{},"text":{},"component":{}}],["4.7.3",{"_index":3777,"title":{"61-44":{}},"name":{},"text":{},"component":{}}],["4.7.4",{"_index":3776,"title":{"61-40":{}},"name":{},"text":{},"component":{}}],["4.7.5",{"_index":3775,"title":{"61-37":{}},"name":{},"text":{},"component":{}}],["4.7.6",{"_index":3774,"title":{"61-33":{}},"name":{},"text":{},"component":{}}],["4.7.x",{"_index":1605,"title":{},"name":{},"text":{"26":{},"103":{}},"component":{}}],["4.8",{"_index":3188,"title":{"60-12":{},"61-19":{}},"name":{},"text":{"59":{},"103":{}},"component":{}}],["4.8.0",{"_index":5927,"title":{},"name":{},"text":{"123":{}},"component":{}}],["4.8.1",{"_index":3773,"title":{"61-28":{}},"name":{},"text":{},"component":{}}],["4.8.2",{"_index":3772,"title":{"61-24":{}},"name":{},"text":{},"component":{}}],["4.8.3",{"_index":3771,"title":{"61-20":{}},"name":{},"text":{},"component":{}}],["4.9",{"_index":3187,"title":{"60-6":{},"61-6":{}},"name":{},"text":{"59":{},"60":{},"61":{}},"component":{}}],["4.9.1",{"_index":3770,"title":{"61-14":{}},"name":{},"text":{},"component":{}}],["4.9.2",{"_index":3769,"title":{"61-11":{}},"name":{},"text":{},"component":{}}],["4.9.3",{"_index":3768,"title":{"61-7":{}},"name":{},"text":{},"component":{}}],["4.9.4",{"_index":7801,"title":{},"name":{},"text":{"275":{}},"component":{}}],["4.x",{"_index":1307,"title":{},"name":{},"text":{"23":{},"60":{}},"component":{}}],["4.x.i",{"_index":6015,"title":{},"name":{},"text":{"134":{}},"component":{}}],["40",{"_index":7610,"title":{},"name":{},"text":{"245":{}},"component":{}}],["400",{"_index":7505,"title":{},"name":{},"text":{"212":{}},"component":{}}],["4000",{"_index":6211,"title":{},"name":{},"text":{"142":{}},"component":{}}],["4001",{"_index":6212,"title":{},"name":{},"text":{"142":{}},"component":{}}],["4002",{"_index":6213,"title":{},"name":{},"text":{"142":{}},"component":{}}],["4003",{"_index":6214,"title":{},"name":{},"text":{"142":{}},"component":{}}],["4004",{"_index":6221,"title":{},"name":{},"text":{"142":{}},"component":{}}],["4005",{"_index":6215,"title":{},"name":{},"text":{"142":{}},"component":{}}],["4083",{"_index":7302,"title":{},"name":{},"text":{"199":{}},"component":{}}],["409",{"_index":7513,"title":{},"name":{},"text":{"212":{}},"component":{}}],["4096",{"_index":2047,"title":{},"name":{},"text":{"31":{}},"component":{}}],["4102",{"_index":7945,"title":{},"name":{},"text":{"277":{}},"component":{}}],["4140",{"_index":7929,"title":{},"name":{},"text":{"277":{}},"component":{}}],["42",{"_index":2537,"title":{},"name":{},"text":{"40":{}},"component":{}}],["43859",{"_index":4139,"title":{},"name":{},"text":{"61":{}},"component":{}}],["4452",{"_index":7924,"title":{},"name":{},"text":{"277":{}},"component":{}}],["45",{"_index":5440,"title":{},"name":{},"text":{"97":{}},"component":{}}],["4565",{"_index":7312,"title":{},"name":{},"text":{"199":{}},"component":{}}],["4583",{"_index":7285,"title":{},"name":{},"text":{"199":{}},"component":{}}],["4788",{"_index":7526,"title":{},"name":{},"text":{"214":{}},"component":{}}],["497",{"_index":7937,"title":{},"name":{},"text":{"277":{}},"component":{}}],["4c37",{"_index":7940,"title":{},"name":{},"text":{"277":{}},"component":{}}],["4e0a",{"_index":7917,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["4e32",{"_index":6582,"title":{},"name":{},"text":{"159":{}},"component":{}}],["4ee11ca7",{"_index":7938,"title":{},"name":{},"text":{"277":{}},"component":{}}],["4mb",{"_index":7398,"title":{},"name":{},"text":{"203":{}},"component":{}}],["5",{"_index":642,"title":{},"name":{},"text":{"3":{},"9":{},"27":{},"56":{},"66":{},"75":{},"80":{},"85":{},"88":{},"93":{},"122":{},"151":{},"156":{},"172":{},"184":{},"198":{},"199":{},"200":{},"213":{},"242":{},"245":{},"255":{},"270":{},"276":{},"277":{},"278":{},"281":{}},"component":{}}],["5.0",{"_index":1316,"title":{},"name":{},"text":{"23":{}},"component":{}}],["5.1.5.release.jar",{"_index":6767,"title":{},"name":{},"text":{"165":{}},"component":{}}],["5.268",{"_index":7456,"title":{},"name":{},"text":{"205":{}},"component":{}}],["5.4.7.jar",{"_index":6628,"title":{},"name":{},"text":{"163":{}},"component":{}}],["50",{"_index":6395,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["500",{"_index":4267,"title":{},"name":{},"text":{"61":{},"71":{},"146":{},"156":{},"172":{}},"component":{}}],["5000",{"_index":5079,"title":{},"name":{},"text":{"80":{},"104":{},"142":{},"156":{},"172":{}},"component":{}}],["5002",{"_index":6216,"title":{},"name":{},"text":{"142":{}},"component":{}}],["5004",{"_index":6222,"title":{},"name":{},"text":{"142":{}},"component":{}}],["5005",{"_index":6223,"title":{},"name":{},"text":{"142":{}},"component":{}}],["5006",{"_index":6217,"title":{},"name":{},"text":{"142":{}},"component":{}}],["5007",{"_index":6218,"title":{},"name":{},"text":{"142":{}},"component":{}}],["502",{"_index":7512,"title":{},"name":{},"text":{"212":{}},"component":{}}],["5110",{"_index":7521,"title":{},"name":{},"text":{"213":{}},"component":{}}],["512",{"_index":6028,"title":{},"name":{},"text":{"137":{}},"component":{}}],["547a47fa",{"_index":7927,"title":{},"name":{},"text":{"277":{}},"component":{}}],["55",{"_index":7318,"title":{},"name":{},"text":{"200":{}},"component":{}}],["55.7mb",{"_index":7790,"title":{},"name":{},"text":{"274":{}},"component":{}}],["552d4cdb84db",{"_index":7947,"title":{},"name":{},"text":{"277":{}},"component":{}}],["562l",{"_index":6352,"title":{},"name":{},"text":{"144":{}},"component":{}}],["573b",{"_index":7928,"title":{},"name":{},"text":{"277":{}},"component":{}}],["591",{"_index":8003,"title":{},"name":{},"text":{"280":{}},"component":{}}],["591m",{"_index":8002,"title":{},"name":{},"text":{"280":{}},"component":{}}],["5ecb2c4d23ec",{"_index":6584,"title":{},"name":{},"text":{"159":{}},"component":{}}],["5gi",{"_index":656,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["5h",{"_index":6532,"title":{},"name":{},"text":{"151":{}},"component":{}}],["5s",{"_index":7447,"title":{},"name":{},"text":{"203":{}},"component":{}}],["6",{"_index":1100,"title":{},"name":{},"text":{"9":{},"26":{},"27":{},"56":{},"92":{},"93":{},"198":{},"199":{},"200":{},"255":{},"276":{},"277":{},"278":{},"281":{}},"component":{}}],["6.0.5",{"_index":3941,"title":{},"name":{},"text":{"61":{}},"component":{}}],["6.321",{"_index":7457,"title":{},"name":{},"text":{"205":{}},"component":{}}],["60",{"_index":2022,"title":{},"name":{},"text":{"31":{},"79":{},"80":{}},"component":{}}],["6000",{"_index":6239,"title":{},"name":{},"text":{"142":{}},"component":{}}],["6001",{"_index":6240,"title":{},"name":{},"text":{"142":{}},"component":{}}],["6002",{"_index":6241,"title":{},"name":{},"text":{"142":{}},"component":{}}],["602",{"_index":3615,"title":{},"name":{},"text":{"60":{}},"component":{}}],["6100",{"_index":6224,"title":{},"name":{},"text":{"142":{}},"component":{}}],["6101",{"_index":6225,"title":{},"name":{},"text":{"142":{}},"component":{}}],["69132",{"_index":8027,"title":{},"name":{},"text":{"281":{}},"component":{}}],["6e531a6cf173243adf9519905f42cbec0a334238",{"_index":3653,"title":{},"name":{},"text":{"60":{}},"component":{}}],["7",{"_index":1101,"title":{},"name":{"26":{}},"text":{"9":{},"27":{},"78":{},"146":{},"172":{},"198":{},"199":{},"200":{},"276":{},"278":{}},"component":{}}],["7000",{"_index":6226,"title":{},"name":{},"text":{"142":{}},"component":{}}],["70f9be2efb6",{"_index":7797,"title":{},"name":{},"text":{"274":{}},"component":{}}],["719",{"_index":3614,"title":{},"name":{},"text":{"60":{}},"component":{}}],["75.69mb",{"_index":7796,"title":{},"name":{},"text":{"274":{}},"component":{}}],["75.69mb/79.56mb",{"_index":7798,"title":{},"name":{},"text":{"274":{}},"component":{}}],["782",{"_index":3422,"title":{},"name":{},"text":{"60":{}},"component":{}}],["79.56mb",{"_index":7775,"title":{},"name":{},"text":{"274":{}},"component":{}}],["7ae84cee97a8",{"_index":7782,"title":{},"name":{},"text":{"274":{}},"component":{}}],["7c78946494",{"_index":7467,"title":{},"name":{},"text":{"208":{},"209":{},"211":{}},"component":{}}],["7ed31eaf5ef8",{"_index":7784,"title":{},"name":{},"text":{"274":{}},"component":{}}],["8",{"_index":1102,"title":{},"name":{},"text":{"9":{},"78":{},"172":{},"198":{},"199":{},"200":{},"255":{},"276":{},"280":{}},"component":{}}],["8.23.1.jar",{"_index":6765,"title":{},"name":{},"text":{"165":{}},"component":{}}],["8/14",{"_index":7773,"title":{},"name":{},"text":{"274":{}},"component":{}}],["80",{"_index":832,"title":{},"name":{},"text":{"5":{},"51":{},"256":{}},"component":{}}],["8024",{"_index":629,"title":{},"name":{},"text":{"3":{},"148":{},"172":{},"184":{},"185":{},"196":{},"198":{},"203":{},"281":{}},"component":{}}],["8024/8124",{"_index":7185,"title":{},"name":{},"text":{"185":{}},"component":{}}],["8024/tcp",{"_index":369,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8024:8024",{"_index":429,"title":{},"name":{},"text":{"3":{},"184":{},"281":{}},"component":{}}],["8025:8024",{"_index":467,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8026:8024",{"_index":473,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8080",{"_index":1086,"title":{},"name":{},"text":{"8":{},"198":{},"205":{}},"component":{}}],["8081",{"_index":7271,"title":{},"name":{},"text":{"198":{},"200":{}},"component":{}}],["8123",{"_index":3644,"title":{},"name":{},"text":{"60":{}},"component":{}}],["8124",{"_index":625,"title":{},"name":{},"text":{"3":{},"60":{},"144":{},"148":{},"159":{},"172":{},"184":{},"185":{},"205":{},"281":{}},"component":{}}],["8124/tcp",{"_index":370,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8124:8124",{"_index":430,"title":{},"name":{},"text":{"3":{},"184":{},"281":{}},"component":{}}],["8125:8124",{"_index":468,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8126:8124",{"_index":474,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8224",{"_index":6167,"title":{},"name":{},"text":{"141":{},"148":{},"159":{},"171":{},"172":{},"185":{}},"component":{}}],["8224/tcp",{"_index":371,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8224:8224",{"_index":461,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8225:8224",{"_index":469,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8226:8224",{"_index":475,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["8231323",{"_index":2808,"title":{},"name":{},"text":{"49":{}},"component":{}}],["8427681b",{"_index":7915,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["85",{"_index":4188,"title":{},"name":{},"text":{"61":{}},"component":{}}],["8601",{"_index":5429,"title":{},"name":{},"text":{"97":{},"212":{}},"component":{}}],["86ba",{"_index":6583,"title":{},"name":{},"text":{"159":{}},"component":{}}],["874",{"_index":4309,"title":{},"name":{},"text":{"61":{}},"component":{}}],["880",{"_index":3485,"title":{},"name":{},"text":{"60":{}},"component":{}}],["883",{"_index":4331,"title":{},"name":{},"text":{"61":{}},"component":{}}],["8888",{"_index":7147,"title":{},"name":{},"text":{"179":{}},"component":{}}],["88af",{"_index":7930,"title":{},"name":{},"text":{"277":{}},"component":{}}],["9",{"_index":1103,"title":{},"name":{},"text":{"9":{},"78":{},"146":{},"171":{},"199":{},"200":{}},"component":{}}],["9.0.21.jar",{"_index":6771,"title":{},"name":{},"text":{"165":{}},"component":{}}],["9.1.3.jar",{"_index":6761,"title":{},"name":{},"text":{"165":{}},"component":{}}],["90",{"_index":7591,"title":{},"name":{},"text":{"239":{},"255":{}},"component":{}}],["9000",{"_index":6227,"title":{},"name":{},"text":{"142":{}},"component":{}}],["9001",{"_index":6231,"title":{},"name":{},"text":{"142":{}},"component":{}}],["901aa5c",{"_index":7524,"title":{},"name":{},"text":{"214":{}},"component":{}}],["903",{"_index":4329,"title":{},"name":{},"text":{"61":{}},"component":{}}],["904",{"_index":4330,"title":{},"name":{},"text":{"61":{}},"component":{}}],["9100",{"_index":6232,"title":{},"name":{},"text":{"142":{}},"component":{}}],["9101",{"_index":6233,"title":{},"name":{},"text":{"142":{}},"component":{}}],["9102",{"_index":6234,"title":{},"name":{},"text":{"142":{}},"component":{}}],["913",{"_index":4326,"title":{},"name":{},"text":{"61":{}},"component":{}}],["9200",{"_index":6236,"title":{},"name":{},"text":{"142":{}},"component":{}}],["932",{"_index":3751,"title":{},"name":{},"text":{"60":{}},"component":{}}],["945",{"_index":3760,"title":{},"name":{},"text":{"60":{}},"component":{}}],["947",{"_index":3382,"title":{},"name":{},"text":{"60":{}},"component":{}}],["9500",{"_index":6238,"title":{},"name":{},"text":{"142":{}},"component":{}}],["950e",{"_index":6581,"title":{},"name":{},"text":{"159":{}},"component":{}}],["9584",{"_index":7941,"title":{},"name":{},"text":{"277":{}},"component":{}}],["961",{"_index":3759,"title":{},"name":{},"text":{"60":{}},"component":{}}],["964b",{"_index":7301,"title":{},"name":{},"text":{"199":{}},"component":{}}],["967",{"_index":4325,"title":{},"name":{},"text":{"61":{}},"component":{}}],["97f2",{"_index":7527,"title":{},"name":{},"text":{"214":{}},"component":{}}],["9900",{"_index":6237,"title":{},"name":{},"text":{"142":{}},"component":{}}],["9ee97334f60b",{"_index":7786,"title":{},"name":{},"text":{"274":{}},"component":{}}],["9f4572c0",{"_index":7922,"title":{},"name":{},"text":{"277":{}},"component":{}}],["_",{"_index":5658,"title":{},"name":{},"text":{"109":{},"185":{},"212":{},"281":{}},"component":{}}],["_\"\"_",{"_index":6840,"title":{},"name":{},"text":{"172":{}},"component":{}}],["_(_)_",{"_index":8019,"title":{},"name":{},"text":{"281":{}},"component":{}}],["_*the",{"_index":7184,"title":{},"name":{},"text":{"185":{}},"component":{}}],["_\\/_/\\_\\___/|_",{"_index":7173,"title":{},"name":{},"text":{"185":{}},"component":{}}],["_\\__",{"_index":8022,"title":{},"name":{},"text":{"281":{}},"component":{}}],["__",{"_index":7170,"title":{},"name":{},"text":{"185":{},"281":{}},"component":{}}],["___",{"_index":7172,"title":{},"name":{},"text":{"185":{},"281":{}},"component":{}}],["___'_",{"_index":8018,"title":{},"name":{},"text":{"281":{}},"component":{}}],["____",{"_index":7169,"title":{},"name":{},"text":{"185":{},"281":{}},"component":{}}],["_____",{"_index":7171,"title":{},"name":{},"text":{"185":{}},"component":{}}],["___|_",{"_index":7175,"title":{},"name":{},"text":{"185":{}},"component":{}}],["__axon",{"_index":5630,"title":{},"name":{},"text":{"108":{}},"component":{}}],["__axon_token_store_upd",{"_index":5564,"title":{},"name":{},"text":{"104":{}},"component":{}}],["__|_",{"_index":8020,"title":{},"name":{},"text":{"281":{}},"component":{}}],["_admin",{"_index":6128,"title":{},"name":{},"text":{"139":{},"140":{},"141":{},"146":{},"149":{},"159":{},"162":{},"170":{},"171":{},"176":{},"185":{},"203":{}},"component":{}}],["_playbook",{"_index":1097,"title":{},"name":{},"text":{"9":{}},"component":{}}],["_select",{"_index":7254,"title":{},"name":{},"text":{"196":{}},"component":{}}],["_{role_name}@{context_nam",{"_index":6598,"title":{},"name":{},"text":{"161":{}},"component":{}}],["_|==============|___/=/_/_/_",{"_index":8023,"title":{},"name":{},"text":{"281":{}},"component":{}}],["_|_",{"_index":8021,"title":{},"name":{},"text":{"281":{}},"component":{}}],["_|____",{"_index":7174,"title":{},"name":{},"text":{"185":{}},"component":{}}],["a.k.a",{"_index":5906,"title":{},"name":{},"text":{"122":{},"221":{}},"component":{}}],["a36b",{"_index":7313,"title":{},"name":{},"text":{"199":{}},"component":{}}],["a6bc",{"_index":7286,"title":{},"name":{},"text":{"199":{}},"component":{}}],["abcd",{"_index":7219,"title":{},"name":{},"text":{"193":{}},"component":{}}],["abil",{"_index":154,"title":{},"name":{},"text":{"2":{},"5":{},"44":{},"48":{},"61":{},"80":{},"83":{},"119":{},"137":{},"151":{},"226":{},"227":{}},"component":{}}],["abnorm",{"_index":7742,"title":{},"name":{},"text":{"271":{}},"component":{}}],["abort",{"_index":5045,"title":{},"name":{},"text":{"80":{}},"component":{}}],["abov",{"_index":437,"title":{},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"13":{},"26":{},"27":{},"28":{},"29":{},"36":{},"37":{},"56":{},"57":{},"66":{},"70":{},"71":{},"77":{},"78":{},"80":{},"104":{},"122":{},"130":{},"141":{},"146":{},"148":{},"161":{},"165":{},"167":{},"170":{},"184":{},"185":{},"198":{},"200":{},"208":{},"213":{},"214":{},"216":{},"236":{},"241":{},"256":{},"267":{},"270":{},"273":{}},"component":{}}],["absenc",{"_index":1773,"title":{},"name":{},"text":{"28":{},"35":{},"44":{},"53":{},"60":{},"61":{},"80":{}},"component":{}}],["absolut",{"_index":6313,"title":{},"name":{},"text":{"144":{}},"component":{}}],["abstract",{"_index":1718,"title":{"38-2":{}},"name":{},"text":{"27":{},"29":{},"38":{},"42":{},"56":{},"63":{},"65":{},"66":{},"71":{},"74":{},"92":{},"278":{}},"component":{}}],["abstractannotatedaggregateroot",{"_index":4690,"title":{},"name":{},"text":{"71":{}},"component":{}}],["abstractannotationhandlerbeanpostprocessor",{"_index":4169,"title":{},"name":{},"text":{"61":{}},"component":{}}],["abstractcacheadapt",{"_index":4699,"title":{},"name":{},"text":{"71":{}},"component":{}}],["abstractdeadlinemanagertestsuit",{"_index":3335,"title":{},"name":{},"text":{"60":{}},"component":{}}],["abstractdependencyinjectionspringcontexttest",{"_index":5439,"title":{},"name":{},"text":{"97":{}},"component":{}}],["abstractmethodpropertyaccessstrategi",{"_index":3830,"title":{},"name":{},"text":{"61":{}},"component":{}}],["abstractrepositori",{"_index":3907,"title":{},"name":{},"text":{"61":{}},"component":{}}],["abstractsagaentri",{"_index":1643,"title":{},"name":{},"text":{"26":{}},"component":{}}],["abstractsagamanag",{"_index":3002,"title":{},"name":{},"text":{"52":{}},"component":{}}],["abstractsnapshott",{"_index":4262,"title":{},"name":{},"text":{"61":{},"71":{}},"component":{}}],["abstracttokenentri",{"_index":1639,"title":{},"name":{},"text":{"26":{}},"component":{}}],["abuijz",{"_index":3285,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["accept",{"_index":838,"title":{"277-9":{}},"name":{},"text":{"5":{},"31":{},"63":{},"66":{},"68":{},"80":{},"127":{},"143":{},"144":{},"159":{},"163":{},"172":{},"234":{},"241":{},"277":{},"278":{}},"component":{}}],["acceptallcommandsdiscoverymod",{"_index":5943,"title":{},"name":{},"text":{"126":{}},"component":{}}],["access",{"_index":120,"title":{"159":{},"160":{},"162":{},"166":{},"167":{},"201":{},"225":{},"230":{},"233":{},"5-10":{},"8-6":{},"144-21":{},"165-5":{},"171-3":{},"185-11":{},"201-1":{},"244-2":{},"267-2":{}},"name":{"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"201":{},"225":{},"230":{}},"text":{"2":{},"3":{},"5":{},"8":{},"28":{},"29":{},"31":{},"32":{},"35":{},"37":{},"41":{},"45":{},"46":{},"54":{},"57":{},"60":{},"61":{},"63":{},"65":{},"71":{},"75":{},"79":{},"80":{},"85":{},"92":{},"93":{},"96":{},"116":{},"117":{},"137":{},"139":{},"140":{},"144":{},"146":{},"147":{},"151":{},"154":{},"155":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"171":{},"172":{},"174":{},"179":{},"184":{},"185":{},"196":{},"201":{},"203":{},"205":{},"208":{},"209":{},"211":{},"223":{},"225":{},"227":{},"228":{},"229":{},"232":{},"234":{},"238":{},"241":{},"243":{},"244":{},"245":{},"247":{},"251":{},"253":{},"258":{},"267":{},"270":{},"271":{},"273":{},"274":{},"277":{},"280":{},"281":{}},"component":{}}],["accesscontrol.admin",{"_index":6911,"title":{},"name":{},"text":{"172":{}},"component":{}}],["accesscontrol.cach",{"_index":6907,"title":{},"name":{},"text":{"172":{}},"component":{}}],["accesscontrol.en",{"_index":6906,"title":{},"name":{},"text":{"172":{}},"component":{}}],["accesscontrol.intern",{"_index":6910,"title":{},"name":{},"text":{"172":{}},"component":{}}],["accesscontrol.systemtokenfil",{"_index":6912,"title":{},"name":{},"text":{"172":{}},"component":{}}],["accesscontrol.token",{"_index":6852,"title":{},"name":{},"text":{"172":{}},"component":{}}],["accessmod",{"_index":652,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["accessor",{"_index":1770,"title":{},"name":{},"text":{"28":{},"66":{},"77":{},"277":{}},"component":{}}],["accident",{"_index":4290,"title":{},"name":{},"text":{"61":{},"73":{},"75":{},"80":{}},"component":{}}],["accommod",{"_index":1474,"title":{},"name":{},"text":{"24":{},"35":{},"61":{},"70":{},"158":{}},"component":{}}],["accompani",{"_index":3621,"title":{},"name":{},"text":{"60":{},"80":{}},"component":{}}],["accomplish",{"_index":7264,"title":{},"name":{},"text":{"198":{},"199":{},"200":{}},"component":{}}],["accord",{"_index":180,"title":{},"name":{},"text":{"2":{},"26":{},"61":{},"104":{},"121":{},"144":{},"151":{},"218":{},"229":{},"231":{},"270":{},"277":{},"278":{}},"component":{}}],["accordingli",{"_index":996,"title":{},"name":{},"text":{"8":{},"9":{},"36":{},"60":{},"66":{},"70":{},"81":{},"117":{},"141":{},"154":{},"158":{},"170":{},"173":{},"277":{}},"component":{}}],["accordinglu",{"_index":7954,"title":{},"name":{},"text":{"277":{}},"component":{}}],["account",{"_index":742,"title":{"5-2":{},"162-2":{},"162-4":{},"166-2":{},"234-1":{},"260-1":{}},"name":{"234":{}},"text":{"5":{},"7":{},"24":{},"29":{},"32":{},"42":{},"57":{},"60":{},"61":{},"70":{},"78":{},"79":{},"80":{},"107":{},"126":{},"130":{},"138":{},"158":{},"159":{},"160":{},"162":{},"163":{},"165":{},"166":{},"167":{},"196":{},"234":{},"244":{},"255":{},"260":{},"264":{},"265":{},"266":{},"273":{},"274":{}},"component":{}}],["account(registeraccountcommand,deadlinemanag",{"_index":3031,"title":{},"name":{},"text":{"52":{}},"component":{}}],["accountregisteredev",{"_index":2922,"title":{},"name":{},"text":{"52":{}},"component":{}}],["accumul",{"_index":6466,"title":{},"name":{},"text":{"149":{}},"component":{}}],["achiev",{"_index":933,"title":{},"name":{},"text":{"7":{},"15":{},"19":{},"21":{},"23":{},"24":{},"27":{},"28":{},"31":{},"35":{},"36":{},"44":{},"49":{},"51":{},"56":{},"60":{},"73":{},"80":{},"104":{},"105":{},"106":{},"107":{},"143":{},"155":{},"208":{},"217":{},"223":{},"278":{}},"component":{}}],["ack",{"_index":5448,"title":{},"name":{},"text":{"98":{},"142":{}},"component":{}}],["acknowledg",{"_index":5283,"title":{},"name":{},"text":{"81":{},"107":{},"139":{},"142":{},"143":{},"151":{}},"component":{}}],["acount",{"_index":6802,"title":{},"name":{},"text":{"167":{}},"component":{}}],["acquir",{"_index":7625,"title":{},"name":{},"text":{"255":{}},"component":{}}],["act",{"_index":877,"title":{},"name":{},"text":{"5":{},"28":{},"29":{},"31":{},"52":{},"75":{},"76":{},"79":{},"80":{},"100":{},"101":{},"117":{},"129":{},"139":{},"254":{},"263":{},"277":{},"281":{}},"component":{}}],["action",{"_index":2215,"title":{},"name":{},"text":{"33":{},"34":{},"44":{},"45":{},"46":{},"52":{},"56":{},"60":{},"63":{},"80":{},"138":{},"142":{},"144":{},"177":{},"243":{},"254":{},"255":{},"256":{},"267":{},"268":{},"270":{},"278":{},"280":{}},"component":{}}],["activ",{"_index":192,"title":{"272":{},"139-2":{},"147-5":{},"163-3":{},"229-2":{}},"name":{"272":{}},"text":{"2":{},"5":{},"23":{},"31":{},"32":{},"33":{},"46":{},"47":{},"50":{},"51":{},"52":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"75":{},"80":{},"104":{},"121":{},"139":{},"140":{},"141":{},"142":{},"144":{},"147":{},"149":{},"163":{},"165":{},"170":{},"171":{},"172":{},"177":{},"180":{},"240":{},"241":{},"243":{},"245":{},"255":{},"261":{},"271":{},"272":{},"273":{},"281":{},"282":{}},"component":{}}],["activate_plugin",{"_index":6723,"title":{},"name":{},"text":{"164":{}},"component":{}}],["active_backup",{"_index":6123,"title":{},"name":{},"text":{"139":{},"146":{},"149":{},"171":{}},"component":{}}],["activedirectori",{"_index":6644,"title":{},"name":{},"text":{"163":{}},"component":{}}],["activetransform",{"_index":6357,"title":{},"name":{},"text":{"144":{}},"component":{}}],["activetransformation#cancel",{"_index":6362,"title":{},"name":{},"text":{"144":{}},"component":{}}],["activetransformation#startappli",{"_index":6361,"title":{},"name":{},"text":{"144":{}},"component":{}}],["activetransformation#transform(transform",{"_index":6360,"title":{},"name":{},"text":{"144":{}},"component":{}}],["activetransformation.transform(transform",{"_index":6366,"title":{},"name":{},"text":{"144":{}},"component":{}}],["actual",{"_index":602,"title":{},"name":{},"text":{"3":{},"8":{},"27":{},"29":{},"31":{},"35":{},"37":{},"38":{},"40":{},"42":{},"44":{},"46":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"76":{},"77":{},"101":{},"104":{},"107":{},"115":{},"126":{},"151":{},"154":{},"165":{},"184":{},"210":{},"215":{},"221":{}},"component":{}}],["actuat",{"_index":2803,"title":{"176":{},"47-1":{}},"name":{"176":{}},"text":{"47":{},"48":{},"60":{},"176":{},"181":{}},"component":{}}],["actuator/env",{"_index":7037,"title":{},"name":{},"text":{"176":{}},"component":{}}],["actuator/health",{"_index":7033,"title":{},"name":{},"text":{"176":{},"178":{}},"component":{}}],["actuator/health/readi",{"_index":6113,"title":{},"name":{},"text":{"138":{}},"component":{}}],["actuator/info",{"_index":640,"title":{},"name":{},"text":{"3":{},"176":{},"184":{},"212":{}},"component":{}}],["actuator/logg",{"_index":7036,"title":{},"name":{},"text":{"176":{}},"component":{}}],["actuator/metr",{"_index":7035,"title":{},"name":{},"text":{"176":{},"177":{}},"component":{}}],["actuator/prometheu",{"_index":2840,"title":{},"name":{},"text":{"50":{},"176":{}},"component":{}}],["actuator`url",{"_index":7032,"title":{},"name":{},"text":{"176":{}},"component":{}}],["ad",{"_index":19,"title":{"5-7":{},"9-4":{},"9-5":{},"9-6":{},"267-1":{},"275-3":{}},"name":{},"text":{"1":{},"3":{},"9":{},"19":{},"23":{},"28":{},"29":{},"31":{},"32":{},"33":{},"36":{},"37":{},"38":{},"42":{},"44":{},"52":{},"60":{},"61":{},"66":{},"71":{},"79":{},"80":{},"81":{},"83":{},"85":{},"94":{},"97":{},"99":{},"108":{},"112":{},"116":{},"117":{},"122":{},"123":{},"124":{},"126":{},"138":{},"139":{},"141":{},"142":{},"146":{},"150":{},"151":{},"163":{},"167":{},"171":{},"172":{},"184":{},"185":{},"245":{},"251":{},"256":{},"262":{},"267":{},"268":{},"269":{},"271":{},"273":{},"275":{},"276":{},"277":{},"281":{},"282":{}},"component":{}}],["adapt",{"_index":1253,"title":{},"name":{},"text":{"23":{},"60":{},"71":{},"100":{},"261":{}},"component":{}}],["add",{"_index":186,"title":{"272":{},"5-12":{},"89-2":{},"273-2":{},"276-7":{}},"name":{"267":{}},"text":{"2":{},"3":{},"5":{},"8":{},"9":{},"13":{},"23":{},"24":{},"28":{},"32":{},"33":{},"35":{},"38":{},"40":{},"44":{},"46":{},"49":{},"52":{},"60":{},"61":{},"63":{},"65":{},"75":{},"77":{},"79":{},"80":{},"81":{},"83":{},"89":{},"93":{},"107":{},"108":{},"117":{},"122":{},"137":{},"138":{},"139":{},"142":{},"144":{},"146":{},"147":{},"148":{},"149":{},"151":{},"154":{},"159":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"169":{},"171":{},"173":{},"176":{},"184":{},"185":{},"195":{},"199":{},"218":{},"225":{},"228":{},"245":{},"254":{},"256":{},"258":{},"266":{},"267":{},"269":{},"271":{},"273":{},"275":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["add/assign",{"_index":7647,"title":{},"name":{},"text":{"258":{}},"component":{}}],["add_node_to_clust",{"_index":6724,"title":{},"name":{},"text":{"164":{}},"component":{}}],["add_node_to_context",{"_index":6725,"title":{},"name":{},"text":{"164":{}},"component":{}}],["add_node_to_replication_group",{"_index":6726,"title":{},"name":{},"text":{"164":{}},"component":{}}],["add_plugin",{"_index":6727,"title":{},"name":{},"text":{"164":{}},"component":{}}],["addelement(\"descript",{"_index":2510,"title":{},"name":{},"text":{"38":{}},"component":{}}],["addgroup",{"_index":374,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["addit",{"_index":189,"title":{"185-8":{},"229-3":{}},"name":{},"text":{"2":{},"3":{},"23":{},"24":{},"27":{},"31":{},"33":{},"38":{},"40":{},"42":{},"44":{},"45":{},"52":{},"60":{},"61":{},"66":{},"79":{},"80":{},"85":{},"95":{},"104":{},"108":{},"109":{},"110":{},"112":{},"123":{},"124":{},"126":{},"137":{},"139":{},"140":{},"146":{},"149":{},"150":{},"151":{},"156":{},"161":{},"167":{},"171":{},"172":{},"184":{},"185":{},"196":{},"205":{},"209":{},"210":{},"213":{},"214":{},"215":{},"216":{},"232":{},"236":{},"239":{},"240":{},"243":{},"255":{},"256":{},"270":{},"271":{},"275":{},"277":{},"282":{}},"component":{}}],["addition",{"_index":1346,"title":{},"name":{},"text":{"24":{},"35":{},"42":{},"44":{},"50":{},"61":{},"66":{},"70":{},"80":{},"91":{},"107":{},"114":{},"122":{},"126":{},"137":{},"151":{},"199":{},"200":{},"254":{}},"component":{}}],["addmessagesource(\"eventsourcea",{"_index":5255,"title":{},"name":{},"text":{"80":{}},"component":{}}],["addmessagesource(\"eventsourceb",{"_index":5256,"title":{},"name":{},"text":{"80":{}},"component":{}}],["addnodetoreplicationgroup(joinreplicationgroup",{"_index":7010,"title":{},"name":{},"text":{"173":{}},"component":{}}],["addr=glob",{"_index":5491,"title":{},"name":{},"text":{"102":{}},"component":{}}],["address",{"_index":1270,"title":{},"name":{},"text":{"23":{},"30":{},"42":{},"60":{},"61":{},"63":{},"102":{},"106":{},"137":{},"142":{},"145":{},"165":{},"167":{},"182":{},"196":{},"218":{},"244":{}},"component":{}}],["addresschangedev",{"_index":2581,"title":{},"name":{},"text":{"42":{}},"component":{}}],["addresscorrectedev",{"_index":2583,"title":{},"name":{},"text":{"42":{}},"component":{}}],["addus",{"_index":377,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["adher",{"_index":4000,"title":{},"name":{},"text":{"61":{},"137":{}},"component":{}}],["adjust",{"_index":240,"title":{"137-19":{}},"name":{},"text":{"3":{},"26":{},"29":{},"35":{},"38":{},"60":{},"61":{},"70":{},"71":{},"78":{},"79":{},"80":{},"104":{},"106":{},"108":{},"129":{},"135":{},"137":{},"158":{},"184":{},"185":{},"196":{},"217":{},"256":{},"258":{},"270":{}},"component":{}}],["admin",{"_index":851,"title":{"185-7":{}},"name":{},"text":{"5":{},"8":{},"141":{},"143":{},"146":{},"149":{},"154":{},"160":{},"161":{},"162":{},"164":{},"165":{},"166":{},"167":{},"171":{},"185":{},"196":{},"198":{},"199":{},"200":{},"205":{},"258":{}},"component":{}}],["admin/default",{"_index":6160,"title":{},"name":{},"text":{"141":{}},"component":{}}],["admin@_admin",{"_index":7335,"title":{},"name":{},"text":{"201":{}},"component":{}}],["admin@context",{"_index":7337,"title":{},"name":{},"text":{"201":{}},"component":{}}],["admin_",{"_index":6383,"title":{},"name":{},"text":{"146":{}},"component":{}}],["admin_staff",{"_index":6654,"title":{},"name":{},"text":{"163":{}},"component":{}}],["adminactionresult",{"_index":6984,"title":{},"name":{},"text":{"173":{}},"component":{}}],["adminchannel",{"_index":6262,"title":{},"name":{},"text":{"143":{}},"component":{}}],["adminchannel().pauseeventprocessor(eventprocessornam",{"_index":6271,"title":{},"name":{},"text":{"143":{}},"component":{}}],["adminchannel().starteventprocessor(eventprocessornam",{"_index":6274,"title":{},"name":{},"text":{"143":{}},"component":{}}],["administ",{"_index":6017,"title":{},"name":{},"text":{"134":{},"147":{},"162":{}},"component":{}}],["administr",{"_index":6016,"title":{"145":{},"147-2":{},"173-1":{},"173-2":{},"173-3":{},"173-4":{},"173-5":{}},"name":{},"text":{"134":{},"141":{},"142":{},"143":{},"145":{},"162":{},"163":{},"166":{},"170":{},"185":{},"196":{},"201":{},"224":{},"225":{},"226":{},"227":{},"228":{},"233":{}},"component":{}}],["adminnod",{"_index":7178,"title":{},"name":{},"text":{"185":{}},"component":{}}],["advanc",{"_index":1434,"title":{"83":{},"88":{},"117-11":{}},"name":{"83":{},"88":{}},"text":{"24":{},"61":{},"68":{},"86":{},"117":{},"137":{},"141":{},"170":{},"185":{},"224":{},"233":{},"245":{},"277":{}},"component":{}}],["advantag",{"_index":1924,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"35":{},"44":{},"76":{}},"component":{}}],["advis",{"_index":1805,"title":{},"name":{},"text":{"28":{},"80":{}},"component":{}}],["af",{"_index":3217,"title":{},"name":{},"text":{"60":{}},"component":{}}],["af93",{"_index":7303,"title":{},"name":{},"text":{"199":{}},"component":{}}],["affect",{"_index":1953,"title":{},"name":{},"text":{"31":{},"38":{},"139":{},"144":{},"172":{},"270":{}},"component":{}}],["aforement",{"_index":3731,"title":{},"name":{},"text":{"60":{}},"component":{}}],["afourtheventwithsomespecialth",{"_index":4542,"title":{},"name":{},"text":{"66":{}},"component":{}}],["aftercommit",{"_index":2765,"title":{},"name":{},"text":{"46":{}},"component":{}}],["ag",{"_index":4117,"title":{},"name":{},"text":{"61":{},"151":{}},"component":{}}],["again",{"_index":398,"title":{},"name":{},"text":{"3":{},"5":{},"60":{},"71":{},"79":{},"80":{},"88":{},"91":{},"97":{},"139":{},"141":{},"143":{},"144":{},"147":{},"151":{},"161":{},"171":{},"184":{},"185":{},"198":{},"199":{},"214":{},"218":{},"254":{},"270":{},"271":{},"277":{}},"component":{}}],["against",{"_index":1803,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"50":{},"56":{},"63":{},"66":{},"68":{},"80":{},"144":{},"185":{},"277":{}},"component":{}}],["agent",{"_index":2960,"title":{},"name":{},"text":{"52":{},"196":{}},"component":{}}],["aggerg",{"_index":7584,"title":{},"name":{},"text":{"236":{}},"component":{}}],["aggreement",{"_index":7579,"title":{},"name":{},"text":{"234":{}},"component":{}}],["aggreg",{"_index":973,"title":{"73":{},"74":{},"75":{},"77":{},"78":{},"202":{},"236":{},"28-1":{},"28-4":{},"29-1":{},"29-12":{},"36-1":{},"36-2":{},"44-19":{},"66-8":{},"71-9":{},"73-1":{},"74-1":{},"75-1":{},"75-2":{},"236-1":{},"236-2":{},"255-5":{},"270-22":{},"270-23":{},"270-24":{},"270-27":{},"278-5":{},"278-7":{}},"name":{"73":{},"74":{},"75":{},"77":{},"78":{},"202":{},"236":{}},"text":{"8":{},"10":{},"13":{},"23":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"38":{},"42":{},"44":{},"45":{},"52":{},"60":{},"61":{},"66":{},"68":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"83":{},"84":{},"85":{},"86":{},"90":{},"93":{},"97":{},"101":{},"103":{},"105":{},"106":{},"107":{},"114":{},"138":{},"142":{},"146":{},"151":{},"156":{},"172":{},"177":{},"191":{},"200":{},"214":{},"221":{},"236":{},"241":{},"255":{},"256":{},"270":{},"277":{},"278":{},"282":{}},"component":{}}],["aggregate#execute(consum",{"_index":1845,"title":{},"name":{},"text":{"28":{}},"component":{}}],["aggregate(cach",{"_index":4717,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregate(repositori",{"_index":1884,"title":{},"name":{},"text":{"29":{}},"component":{}}],["aggregate(snapshotfilt",{"_index":4683,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregate(snapshottriggerdefinit",{"_index":4669,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregate/ent",{"_index":2665,"title":{},"name":{},"text":{"44":{}},"component":{}}],["aggregate/saga",{"_index":2157,"title":{},"name":{},"text":{"32":{}},"component":{}}],["aggregate_id",{"_index":5991,"title":{},"name":{},"text":{"130":{}},"component":{}}],["aggregateconfigur",{"_index":3722,"title":{},"name":{},"text":{"60":{},"71":{},"74":{}},"component":{}}],["aggregateconfiguration#aggregatefactori",{"_index":4658,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregateconfiguration`",{"_index":4659,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregateconfigurer#withsubtypes(class",{"_index":3729,"title":{},"name":{},"text":{"60":{}},"component":{}}],["aggregateconfigurer#withsubtypes(set",{"_index":4743,"title":{},"name":{},"text":{"74":{}},"component":{}}],["aggregateconfigurer.defaultconfiguration(giftcard.class",{"_index":1875,"title":{},"name":{},"text":{"29":{},"71":{},"74":{}},"component":{}}],["aggregatecreationpolici",{"_index":1831,"title":{},"name":{},"text":{"28":{}},"component":{}}],["aggregatecreationpolicy#alway",{"_index":4307,"title":{},"name":{},"text":{"61":{}},"component":{}}],["aggregatefactori",{"_index":1850,"title":{"29-15":{}},"name":{},"text":{"29":{},"61":{},"66":{},"71":{}},"component":{}}],["aggregateid",{"_index":4731,"title":{},"name":{},"text":{"73":{},"200":{},"209":{},"214":{}},"component":{}}],["aggregateidentifi",{"_index":1157,"title":{},"name":{},"text":{"13":{},"27":{},"28":{},"29":{},"45":{},"52":{},"74":{},"75":{},"77":{},"78":{},"85":{},"97":{},"114":{},"190":{},"191":{},"278":{}},"component":{}}],["aggregateidentifierspanattributesprovid",{"_index":2938,"title":{},"name":{},"text":{"52":{}},"component":{}}],["aggregatelifecycl",{"_index":2402,"title":{},"name":{},"text":{"36":{},"75":{}},"component":{}}],["aggregatelifecycle#appli",{"_index":2407,"title":{},"name":{},"text":{"36":{},"75":{}},"component":{}}],["aggregatelifecycle#apply(object",{"_index":2404,"title":{},"name":{},"text":{"36":{},"75":{},"78":{}},"component":{}}],["aggregatelifecycle#createnew(class",{"_index":4728,"title":{},"name":{},"text":{"73":{}},"component":{}}],["aggregatelifecycle.appli",{"_index":1892,"title":{},"name":{},"text":{"29":{},"278":{}},"component":{}}],["aggregatelifecycle.apply(new",{"_index":2403,"title":{},"name":{},"text":{"36":{}},"component":{}}],["aggregatelifecycle.isl",{"_index":4767,"title":{},"name":{},"text":{"75":{}},"component":{}}],["aggregatelifecycle.markdelet",{"_index":1871,"title":{},"name":{},"text":{"29":{}},"component":{}}],["aggregateloadtimesnapshottriggerdefinit",{"_index":4257,"title":{},"name":{},"text":{"61":{}},"component":{}}],["aggregatememb",{"_index":4215,"title":{},"name":{},"text":{"61":{},"77":{},"78":{}},"component":{}}],["aggregatemember(eventforwardingmod",{"_index":4806,"title":{},"name":{},"text":{"77":{}},"component":{}}],["aggregatemember(typ",{"_index":4792,"title":{},"name":{},"text":{"77":{}},"component":{}}],["aggregatenotfoundexcept",{"_index":4119,"title":{},"name":{},"text":{"61":{}},"component":{}}],["aggregatesequencenumb",{"_index":7193,"title":{},"name":{},"text":{"190":{},"191":{},"195":{}},"component":{}}],["aggregatesnapshot",{"_index":4653,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregatesnapshott",{"_index":4652,"title":{},"name":{},"text":{"71":{}},"component":{}}],["aggregatestreamcreationexcept",{"_index":3742,"title":{},"name":{},"text":{"60":{}},"component":{}}],["aggregatetest",{"_index":4456,"title":{},"name":{},"text":{"66":{}},"component":{}}],["aggregatetestfixtur",{"_index":3363,"title":{"282-3":{}},"name":{},"text":{"60":{},"61":{},"66":{},"87":{},"282":{}},"component":{}}],["aggregatetestfixture.andgivencurrenttim",{"_index":3960,"title":{},"name":{},"text":{"61":{}},"component":{}}],["aggregatetestfixture<>(bike.class",{"_index":8039,"title":{},"name":{},"text":{"282":{}},"component":{}}],["aggregatetestfixture<>(expiringgiftcard.class",{"_index":5341,"title":{},"name":{},"text":{"87":{}},"component":{}}],["aggregatetestfixture<>(giftcard.class",{"_index":4448,"title":{},"name":{},"text":{"66":{}},"component":{}}],["aggregatetyp",{"_index":7192,"title":{},"name":{},"text":{"190":{},"191":{},"193":{},"200":{},"209":{},"214":{}},"component":{}}],["aggregatevers",{"_index":4742,"title":{},"name":{},"text":{"74":{}},"component":{}}],["aggregate’",{"_index":1799,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"36":{},"42":{},"44":{},"60":{},"66":{},"71":{},"75":{},"85":{}},"component":{}}],["agreg",{"_index":7586,"title":{},"name":{},"text":{"236":{}},"component":{}}],["ahaead",{"_index":535,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["ahead",{"_index":808,"title":{"124":{},"23-33":{}},"name":{},"text":{"5":{},"23":{},"123":{}},"component":{}}],["aid",{"_index":6045,"title":{},"name":{},"text":{"137":{},"227":{},"237":{}},"component":{}}],["aim",{"_index":1263,"title":{},"name":{},"text":{"23":{},"29":{},"50":{},"60":{},"61":{},"137":{},"151":{},"224":{},"233":{},"276":{},"277":{},"278":{}},"component":{}}],["aisw",{"_index":7573,"title":{},"name":{},"text":{"232":{}},"component":{}}],["aka",{"_index":5945,"title":{},"name":{},"text":{"126":{}},"component":{}}],["albeit",{"_index":1302,"title":{},"name":{},"text":{"23":{},"63":{},"106":{}},"component":{}}],["alert",{"_index":2896,"title":{"236-2":{},"239-2":{},"242-2":{},"243-2":{},"256-3":{},"271-5":{},"271-6":{}},"name":{},"text":{"51":{},"236":{},"239":{},"241":{},"242":{},"243":{},"245":{},"247":{},"253":{},"254":{},"256":{},"266":{},"270":{},"271":{}},"component":{}}],["algorithm",{"_index":7546,"title":{},"name":{},"text":{"218":{},"271":{}},"component":{}}],["alia",{"_index":1444,"title":{},"name":{},"text":{"24":{},"169":{},"172":{}},"component":{}}],["alias",{"_index":1340,"title":{},"name":{},"text":{"24":{},"35":{}},"component":{}}],["align",{"_index":2230,"title":{},"name":{},"text":{"33":{},"60":{},"61":{},"66":{},"135":{},"137":{},"277":{}},"component":{}}],["aliv",{"_index":4281,"title":{},"name":{},"text":{"61":{},"172":{},"180":{}},"component":{}}],["allevi",{"_index":5269,"title":{},"name":{},"text":{"81":{},"121":{}},"component":{}}],["alloc",{"_index":6971,"title":{},"name":{},"text":{"172":{}},"component":{}}],["allow",{"_index":253,"title":{"203-38":{}},"name":{},"text":{"3":{},"5":{},"7":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"41":{},"42":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"71":{},"74":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"89":{},"93":{},"96":{},"97":{},"100":{},"103":{},"106":{},"109":{},"110":{},"117":{},"122":{},"126":{},"127":{},"131":{},"135":{},"137":{},"138":{},"142":{},"143":{},"144":{},"146":{},"147":{},"150":{},"151":{},"155":{},"156":{},"162":{},"163":{},"165":{},"166":{},"167":{},"171":{},"172":{},"175":{},"184":{},"185":{},"196":{},"200":{},"201":{},"203":{},"208":{},"218":{},"223":{},"225":{},"231":{},"232":{},"234":{},"236":{},"239":{},"240":{},"241":{},"243":{},"247":{},"251":{},"254":{},"255":{},"260":{},"261":{},"264":{},"265":{},"266":{},"267":{},"268":{},"270":{},"271":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["allow(domaineventdata",{"_index":4678,"title":{},"name":{},"text":{"71":{}},"component":{}}],["allowreplay",{"_index":5234,"title":{},"name":{},"text":{"80":{}},"component":{}}],["alon",{"_index":2191,"title":{},"name":{},"text":{"32":{}},"component":{}}],["along",{"_index":5566,"title":{},"name":{},"text":{"105":{},"108":{},"171":{},"185":{},"241":{},"251":{},"270":{}},"component":{}}],["alongsid",{"_index":1743,"title":{},"name":{},"text":{"27":{},"44":{},"57":{},"79":{},"107":{}},"component":{}}],["alreadi",{"_index":722,"title":{"5-7":{},"144-25":{}},"name":{},"text":{"4":{},"5":{},"9":{},"25":{},"26":{},"42":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"71":{},"77":{},"80":{},"83":{},"88":{},"91":{},"101":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"154":{},"173":{},"180":{},"183":{},"185":{},"200":{},"208":{},"234":{},"235":{},"238":{},"254":{},"260":{},"263":{},"264":{},"265":{},"266":{},"269":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["alter",{"_index":2629,"title":{},"name":{},"text":{"44":{},"75":{},"126":{},"151":{},"277":{}},"component":{}}],["altern",{"_index":1030,"title":{},"name":{},"text":{"8":{},"13":{},"23":{},"27":{},"29":{},"31":{},"32":{},"33":{},"35":{},"56":{},"60":{},"63":{},"65":{},"66":{},"75":{},"80":{},"81":{},"97":{},"99":{},"101":{},"103":{},"105":{},"110":{},"114":{},"117":{},"128":{},"137":{},"163":{},"165":{},"172":{},"199":{},"200":{},"218":{},"245":{},"260":{},"264":{},"265":{},"276":{}},"component":{}}],["although",{"_index":199,"title":{},"name":{},"text":{"2":{},"3":{},"24":{},"26":{},"28":{},"29":{},"31":{},"33":{},"35":{},"42":{},"46":{},"58":{},"61":{},"63":{},"66":{},"79":{},"81":{},"89":{},"92":{},"103":{},"104":{},"121":{},"129":{},"140":{},"162":{},"166":{},"184":{},"197":{},"270":{},"276":{},"277":{},"278":{},"280":{}},"component":{}}],["altogeth",{"_index":1452,"title":{},"name":{},"text":{"24":{},"31":{},"44":{},"71":{},"79":{},"90":{},"101":{},"126":{},"151":{}},"component":{}}],["altuntasfatih",{"_index":3666,"title":{},"name":{},"text":{"60":{}},"component":{}}],["alway",{"_index":196,"title":{},"name":{},"text":{"2":{},"24":{},"27":{},"28":{},"29":{},"31":{},"35":{},"38":{},"42":{},"43":{},"44":{},"45":{},"46":{},"60":{},"61":{},"63":{},"65":{},"69":{},"80":{},"88":{},"89":{},"96":{},"97":{},"101":{},"107":{},"108":{},"114":{},"126":{},"138":{},"141":{},"144":{},"151":{},"159":{},"165":{},"167":{},"170":{},"176":{},"185":{},"195":{},"212":{},"255":{},"256":{},"271":{},"277":{}},"component":{}}],["amazon",{"_index":5465,"title":{},"name":{},"text":{"101":{}},"component":{}}],["ambigu",{"_index":3492,"title":{},"name":{},"text":{"60":{}},"component":{}}],["america",{"_index":7568,"title":{},"name":{},"text":{"231":{}},"component":{}}],["amongst",{"_index":2090,"title":{},"name":{},"text":{"31":{}},"component":{}}],["amount",{"_index":805,"title":{},"name":{},"text":{"5":{},"28":{},"31":{},"32":{},"34":{},"56":{},"71":{},"80":{},"83":{},"86":{},"87":{},"139":{},"151":{},"156":{},"172":{},"200":{},"203":{},"208":{},"213":{},"251":{},"255":{},"270":{},"273":{},"278":{}},"component":{}}],["ampq",{"_index":5449,"title":{"99":{}},"name":{},"text":{},"component":{}}],["amqp",{"_index":53,"title":{"98":{},"100":{},"23-16":{},"23-17":{}},"name":{},"text":{"1":{},"23":{},"35":{},"81":{},"98":{},"99":{},"100":{}},"component":{"98":{},"99":{},"100":{}}}],["amsterdam",{"_index":8044,"title":{},"name":{},"text":{"282":{}},"component":{}}],["anal",{"_index":7657,"title":{},"name":{},"text":{"261":{}},"component":{}}],["analog",{"_index":915,"title":{},"name":{},"text":{"7":{}},"component":{}}],["analys",{"_index":6001,"title":{},"name":{},"text":{"131":{}},"component":{}}],["analysi",{"_index":7964,"title":{},"name":{},"text":{"278":{}},"component":{}}],["analyz",{"_index":818,"title":{},"name":{},"text":{"5":{},"49":{},"144":{},"278":{}},"component":{}}],["anatomi",{"_index":2531,"title":{"40":{}},"name":{"40":{}},"text":{},"component":{}}],["anchor",{"_index":3294,"title":{},"name":{},"text":{"60":{}},"component":{}}],["and(\"otherkey",{"_index":2538,"title":{},"name":{},"text":{"40":{}},"component":{}}],["and(message.getmetadata().entryset().stream",{"_index":2858,"title":{},"name":{},"text":{"50":{}},"component":{}}],["and/or",{"_index":1367,"title":{},"name":{},"text":{"24":{},"31":{},"32":{},"60":{},"66":{},"79":{},"156":{},"234":{},"276":{}},"component":{}}],["andeventavailabilitytimeout(2000",{"_index":5084,"title":{},"name":{},"text":{"80":{}},"component":{}}],["andgiven",{"_index":4487,"title":{},"name":{},"text":{"66":{}},"component":{}}],["andgivencommand",{"_index":4489,"title":{},"name":{},"text":{"66":{},"83":{}},"component":{}}],["andgivencommands(new",{"_index":5338,"title":{},"name":{},"text":{"87":{}},"component":{}}],["andgivencurrenttim",{"_index":3958,"title":{},"name":{},"text":{"61":{}},"component":{}}],["andinitialsegmentscount(2",{"_index":5121,"title":{},"name":{},"text":{"80":{}},"component":{}}],["andinitialsegmentscount(4",{"_index":5149,"title":{},"name":{},"text":{"80":{}},"component":{}}],["andinitialtrackingtoken(streamablemessagesource::createheadtoken",{"_index":5063,"title":{},"name":{},"text":{"80":{}},"component":{}}],["andinitialtrackingtoken(streamablemessagesource::createtailtoken",{"_index":5066,"title":{},"name":{},"text":{"80":{}},"component":{}}],["andmetadata",{"_index":2546,"title":{},"name":{},"text":{"40":{}},"component":{}}],["andmetadata(singletonmap(\"otherkey",{"_index":2542,"title":{},"name":{},"text":{"40":{}},"component":{}}],["andnomor",{"_index":4543,"title":{},"name":{},"text":{"66":{}},"component":{}}],["andthen(runn",{"_index":2411,"title":{},"name":{},"text":{"36":{}},"component":{}}],["andthenapply(suppli",{"_index":2409,"title":{},"name":{},"text":{"36":{}},"component":{}}],["andthenapplyif(suppli",{"_index":2412,"title":{},"name":{},"text":{"36":{}},"component":{}}],["andthenif(suppli",{"_index":2413,"title":{},"name":{},"text":{"36":{}},"component":{}}],["andtokenclaiminterval(1000",{"_index":5083,"title":{},"name":{},"text":{"80":{}},"component":{}}],["andye2004",{"_index":3679,"title":{},"name":{},"text":{"60":{}},"component":{}}],["anew",{"_index":5214,"title":{},"name":{},"text":{"80":{}},"component":{}}],["anim",{"_index":7731,"title":{},"name":{},"text":{"270":{}},"component":{}}],["annot",{"_index":668,"title":{"45":{},"96":{},"38-8":{},"41-2":{},"44-5":{},"44-13":{}},"name":{"45":{}},"text":{"3":{},"5":{},"13":{},"17":{},"19":{},"25":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"37":{},"38":{},"41":{},"44":{},"45":{},"46":{},"53":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"71":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"85":{},"93":{},"94":{},"96":{},"97":{},"114":{},"124":{},"126":{},"127":{},"165":{},"184":{},"236":{},"275":{},"277":{},"278":{}},"component":{"96":{}}}],["annotatedaggreg",{"_index":1895,"title":{},"name":{},"text":{"29":{}},"component":{}}],["annotatedaggregatemetamodelfactory.annotatedaggregatemodel",{"_index":4258,"title":{},"name":{},"text":{"61":{}},"component":{}}],["annotatedmessagehandlingmemb",{"_index":3702,"title":{},"name":{},"text":{"60":{}},"component":{}}],["annotatedsagamanag",{"_index":4391,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["annotatedsagarepositori",{"_index":4393,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["annotationattribut",{"_index":5418,"title":{},"name":{},"text":{"96":{}},"component":{}}],["annotationcommandtargetresolv",{"_index":4023,"title":{},"name":{},"text":{"61":{}},"component":{}}],["annotationrevisionresolv",{"_index":2463,"title":{},"name":{},"text":{"38":{}},"component":{}}],["annotationroutingstrategi",{"_index":1920,"title":{"31-21":{}},"name":{},"text":{"31":{},"126":{},"127":{}},"component":{}}],["annotationroutingstrategy.build",{"_index":2109,"title":{},"name":{},"text":{"31":{}},"component":{}}],["annotationtype(customroutingannotation.class",{"_index":2110,"title":{},"name":{},"text":{"31":{}},"component":{}}],["annotationutils#findannotationattributes(annotatedel",{"_index":5417,"title":{},"name":{},"text":{"96":{}},"component":{}}],["annotation’",{"_index":4161,"title":{},"name":{},"text":{"61":{},"96":{}},"component":{}}],["announc",{"_index":3429,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["anoth",{"_index":753,"title":{"73":{},"5-7":{},"73-1":{}},"name":{"73":{}},"text":{"23":{},"24":{},"26":{},"28":{},"31":{},"33":{},"35":{},"36":{},"38":{},"41":{},"43":{},"46":{},"52":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"73":{},"76":{},"79":{},"80":{},"81":{},"88":{},"97":{},"101":{},"122":{},"129":{},"130":{},"137":{},"138":{},"139":{},"140":{},"141":{},"144":{},"146":{},"151":{},"161":{},"169":{},"171":{},"185":{},"241":{},"254":{},"258":{},"262":{},"270":{},"271":{},"274":{},"277":{},"278":{}},"component":{}}],["answer",{"_index":92,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"14":{},"277":{}},"component":{}}],["anti",{"_index":2395,"title":{},"name":{},"text":{"35":{}},"component":{}}],["anticip",{"_index":5174,"title":{},"name":{},"text":{"80":{},"137":{}},"component":{}}],["antora",{"_index":976,"title":{},"name":{},"text":{"8":{},"10":{},"11":{}},"component":{}}],["antora.yml",{"_index":1098,"title":{},"name":{},"text":{"9":{}},"component":{}}],["antora’",{"_index":1031,"title":{},"name":{},"text":{"8":{},"9":{},"10":{}},"component":{}}],["anymor",{"_index":1534,"title":{},"name":{},"text":{"25":{},"61":{},"141":{},"212":{}},"component":{}}],["anyon",{"_index":7245,"title":{},"name":{},"text":{"196":{}},"component":{}}],["anyth",{"_index":1378,"title":{},"name":{},"text":{"24":{},"33":{},"35":{},"126":{},"144":{},"176":{},"267":{},"280":{}},"component":{}}],["anytim",{"_index":6173,"title":{},"name":{},"text":{"141":{},"144":{},"170":{},"245":{}},"component":{}}],["anyway",{"_index":7618,"title":{},"name":{},"text":{"254":{},"280":{}},"component":{}}],["anywher",{"_index":853,"title":{},"name":{},"text":{"5":{},"195":{}},"component":{}}],["aot",{"_index":55,"title":{},"name":{},"text":{"1":{},"23":{},"60":{},"61":{},"123":{},"124":{}},"component":{"123":{},"124":{},"125":{}}}],["apach",{"_index":130,"title":{},"name":{},"text":{"2":{},"60":{},"105":{},"131":{}},"component":{}}],["apart",{"_index":6403,"title":{},"name":{},"text":{"146":{},"147":{},"162":{},"232":{},"242":{},"270":{}},"component":{}}],["api",{"_index":51,"title":{"133":{},"136":{},"159":{},"173":{},"175":{},"221":{},"24-2":{},"29-2":{},"29-5":{},"29-8":{},"31-9":{},"31-12":{},"31-15":{},"31-23":{},"31-26":{},"31-29":{},"35-4":{},"35-8":{},"35-11":{},"35-14":{},"35-18":{},"35-23":{},"37-2":{},"38-7":{},"50-2":{},"50-5":{},"50-6":{},"52-2":{},"52-6":{},"52-12":{},"52-23":{},"53-2":{},"54-4":{},"54-7":{},"63-12":{},"63-14":{},"65-2":{},"69-2":{},"70-4":{},"71-3":{},"71-7":{},"71-11":{},"79-6":{},"79-9":{},"79-14":{},"79-17":{},"79-25":{},"80-3":{},"80-5":{},"80-8":{},"80-11":{},"80-13":{},"80-16":{},"80-23":{},"80-25":{},"80-28":{},"80-30":{},"80-36":{},"80-40":{},"80-42":{},"80-46":{},"80-51":{},"80-55":{},"80-65":{},"80-67":{},"80-69":{},"81-2":{},"81-4":{},"81-10":{},"143-4":{},"144-19":{},"144-26":{},"146-10":{},"159-1":{},"159-2":{},"201-1":{},"208-6":{},"209-7":{},"211-6":{},"221-1":{},"221-2":{},"221-3":{},"221-4":{},"275-3":{},"276-6":{}},"name":{"133":{},"136":{},"159":{},"173":{},"175":{}},"text":{"1":{},"7":{},"13":{},"23":{},"24":{},"27":{},"31":{},"35":{},"38":{},"43":{},"50":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"70":{},"71":{},"75":{},"79":{},"80":{},"90":{},"93":{},"96":{},"104":{},"106":{},"111":{},"121":{},"122":{},"126":{},"137":{},"138":{},"139":{},"140":{},"143":{},"144":{},"146":{},"147":{},"150":{},"158":{},"159":{},"161":{},"162":{},"165":{},"166":{},"167":{},"168":{},"174":{},"175":{},"180":{},"185":{},"196":{},"199":{},"201":{},"203":{},"204":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"254":{},"275":{},"276":{},"277":{},"278":{}},"component":{}}],["api.thi",{"_index":6048,"title":{},"name":{},"text":{"137":{}},"component":{}}],["api/pom.xml",{"_index":7803,"title":{},"name":{},"text":{"275":{},"276":{}},"component":{}}],["api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/bikestatus.java",{"_index":7843,"title":{},"name":{},"text":{"277":{}},"component":{}}],["api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/bikestatusnamedqueries.java",{"_index":7870,"title":{},"name":{},"text":{"277":{}},"component":{}}],["api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/rentalstatus.java",{"_index":7848,"title":{},"name":{},"text":{"277":{}},"component":{}}],["api/src/main/java/io/axoniq/demo/bikerental/coreapi/retnal/registerbikecommand.java",{"_index":7962,"title":{},"name":{},"text":{"278":{}},"component":{}}],["apivers",{"_index":606,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["api’",{"_index":5528,"title":{},"name":{},"text":{"104":{},"111":{}},"component":{}}],["aplic",{"_index":7661,"title":{},"name":{},"text":{"262":{}},"component":{}}],["apm",{"_index":2920,"title":{},"name":{},"text":{"52":{},"131":{}},"component":{}}],["app",{"_index":611,"title":{"161-1":{},"165-3":{},"273-3":{}},"name":{"270":{},"273":{},"281":{}},"text":{"3":{},"5":{},"60":{},"81":{},"127":{},"161":{},"165":{},"167":{},"184":{},"198":{},"199":{},"200":{},"231":{},"256":{}},"component":{}}],["appar",{"_index":3872,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{}}],["appear",{"_index":3612,"title":{},"name":{},"text":{"60":{},"66":{},"68":{},"218":{},"270":{}},"component":{}}],["append",{"_index":2375,"title":{},"name":{},"text":{"35":{},"38":{},"63":{},"66":{},"144":{},"151":{},"172":{},"177":{},"196":{}},"component":{}}],["append_ev",{"_index":6709,"title":{},"name":{},"text":{"164":{}},"component":{}}],["append_snapshot",{"_index":6710,"title":{},"name":{},"text":{"164":{}},"component":{}}],["appender.deleteevent(100l",{"_index":6353,"title":{},"name":{},"text":{"144":{}},"component":{}}],["appender.replaceevent(562l",{"_index":6354,"title":{},"name":{},"text":{"144":{}},"component":{}}],["appender.replaceevent(eventwithtoken.gettoken",{"_index":6341,"title":{},"name":{},"text":{"144":{}},"component":{}}],["appendev",{"_index":4323,"title":{},"name":{},"text":{"61":{}},"component":{}}],["appendic",{"_index":3219,"title":{},"name":{},"text":{"60":{}},"component":{}}],["appli",{"_index":658,"title":{"7-2":{},"28-3":{},"144-12":{}},"name":{},"text":{"3":{},"8":{},"9":{},"23":{},"25":{},"28":{},"29":{},"36":{},"38":{},"42":{},"44":{},"52":{},"61":{},"71":{},"73":{},"75":{},"76":{},"77":{},"78":{},"79":{},"81":{},"122":{},"138":{},"139":{},"141":{},"144":{},"161":{},"170":{},"171":{},"172":{},"184":{},"195":{},"203":{},"206":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"255":{},"271":{}},"component":{}}],["applic",{"_index":60,"title":{"161":{},"226":{},"242":{},"264":{},"268":{},"269":{},"270":{},"272":{},"273":{},"281":{},"5-3":{},"5-5":{},"32-3":{},"171-7":{},"173-4":{},"177-5":{},"198-4":{},"200-2":{},"203-30":{},"218-9":{},"234-3":{},"238-1":{},"238-2":{},"242-1":{},"242-2":{},"255-6":{},"266-2":{},"267-1":{},"270-2":{},"270-3":{},"270-6":{},"270-10":{},"270-21":{},"271-2":{},"273-4":{},"273-5":{},"274-2":{},"274-3":{},"281-5":{}},"name":{"226":{}},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"14":{},"15":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"58":{},"60":{},"61":{},"63":{},"65":{},"67":{},"69":{},"70":{},"71":{},"72":{},"73":{},"79":{},"80":{},"81":{},"84":{},"85":{},"90":{},"91":{},"92":{},"93":{},"94":{},"98":{},"99":{},"100":{},"104":{},"114":{},"116":{},"117":{},"119":{},"121":{},"123":{},"124":{},"126":{},"127":{},"131":{},"137":{},"138":{},"141":{},"142":{},"143":{},"146":{},"149":{},"150":{},"154":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"180":{},"184":{},"185":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"203":{},"207":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"218":{},"221":{},"224":{},"225":{},"226":{},"227":{},"228":{},"231":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"247":{},"253":{},"254":{},"255":{},"256":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["application'",{"_index":4686,"title":{},"name":{},"text":{"71":{}},"component":{}}],["application.properti",{"_index":2382,"title":{},"name":{},"text":{"35":{},"80":{},"98":{},"108":{},"117":{},"273":{}},"component":{}}],["application.properties`und",{"_index":6533,"title":{},"name":{},"text":{"154":{}},"component":{}}],["application/json",{"_index":7281,"title":{},"name":{},"text":{"199":{},"200":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"277":{}},"component":{}}],["application/us",{"_index":6605,"title":{},"name":{},"text":{"162":{}},"component":{}}],["application/vnd.axoniq.event.list+json",{"_index":7475,"title":{},"name":{},"text":{"209":{},"214":{}},"component":{}}],["application/xml",{"_index":7320,"title":{},"name":{},"text":{"200":{},"213":{},"216":{}},"component":{}}],["applicationadminservic",{"_index":7012,"title":{},"name":{},"text":{"173":{}},"component":{}}],["applicationcontext",{"_index":5485,"title":{},"name":{},"text":{"102":{}},"component":{}}],["applicationoverview",{"_index":7014,"title":{},"name":{},"text":{"173":{}},"component":{}}],["applications/modul",{"_index":7748,"title":{},"name":{},"text":{"273":{}},"component":{}}],["application’",{"_index":1936,"title":{},"name":{},"text":{"31":{},"42":{},"52":{},"63":{},"65":{},"80":{},"267":{},"270":{},"274":{},"278":{}},"component":{}}],["apply()`invoc",{"_index":1815,"title":{},"name":{},"text":{"28":{}},"component":{}}],["apply(new",{"_index":1162,"title":{},"name":{},"text":{"13":{},"28":{},"29":{},"32":{},"66":{},"73":{},"75":{},"77":{},"78":{},"83":{},"85":{},"278":{}},"component":{}}],["apply(object",{"_index":2406,"title":{},"name":{},"text":{"36":{},"75":{}},"component":{}}],["apply(…​).andthenappli",{"_index":1820,"title":{},"name":{},"text":{"28":{}},"component":{}}],["applymor",{"_index":2408,"title":{},"name":{},"text":{"36":{},"60":{}},"component":{}}],["applysnapshot(mysnapshotev",{"_index":4692,"title":{},"name":{},"text":{"71":{}},"component":{}}],["approach",{"_index":505,"title":{},"name":{},"text":{"3":{},"7":{},"23":{},"24":{},"27":{},"28":{},"29":{},"31":{},"35":{},"43":{},"44":{},"46":{},"47":{},"53":{},"56":{},"57":{},"58":{},"60":{},"61":{},"65":{},"69":{},"71":{},"75":{},"79":{},"80":{},"81":{},"89":{},"90":{},"91":{},"99":{},"101":{},"104":{},"105":{},"107":{},"121":{},"128":{},"137":{},"143":{},"144":{},"150":{},"151":{},"156":{},"158":{},"184":{},"199":{},"208":{}},"component":{}}],["appropri",{"_index":2836,"title":{},"name":{},"text":{"50":{},"63":{},"65":{},"68":{},"80":{},"151":{},"200":{},"278":{},"280":{}},"component":{}}],["approv",{"_index":1025,"title":{},"name":{},"text":{"8":{},"60":{}},"component":{}}],["apps/v1",{"_index":607,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["apt",{"_index":7257,"title":{},"name":{},"text":{"196":{}},"component":{}}],["arbitrari",{"_index":4643,"title":{},"name":{},"text":{"71":{}},"component":{}}],["arc",{"_index":7732,"title":{},"name":{},"text":{"270":{}},"component":{}}],["archetype:gener",{"_index":7811,"title":{},"name":{},"text":{"276":{}},"component":{}}],["archetypeartifactid",{"_index":7821,"title":{},"name":{},"text":{"276":{}},"component":{}}],["archetypegroupid",{"_index":7819,"title":{},"name":{},"text":{"276":{}},"component":{}}],["archetypevers",{"_index":7822,"title":{},"name":{},"text":{"276":{}},"component":{}}],["architectur",{"_index":1900,"title":{"197-2":{}},"name":{},"text":{"29":{},"66":{},"105":{},"121":{},"197":{},"263":{},"270":{},"277":{},"278":{}},"component":{}}],["archiv",{"_index":4671,"title":{},"name":{},"text":{"71":{},"151":{},"163":{},"165":{},"185":{}},"component":{}}],["area",{"_index":2398,"title":{},"name":{},"text":{"36":{},"80":{},"141":{},"157":{},"171":{},"172":{},"174":{},"201":{},"236":{},"270":{}},"component":{}}],["aren’t",{"_index":1012,"title":{},"name":{},"text":{"8":{},"24":{},"63":{},"68":{},"80":{}},"component":{}}],["arg",{"_index":1898,"title":{},"name":{},"text":{"29":{},"61":{},"75":{},"78":{},"127":{}},"component":{}}],["arguabl",{"_index":2424,"title":{},"name":{},"text":{"37":{},"126":{}},"component":{}}],["argument",{"_index":4410,"title":{},"name":{},"text":{"63":{},"65":{},"92":{},"144":{},"277":{},"278":{}},"component":{}}],["argumentclass2",{"_index":3029,"title":{},"name":{},"text":{"52":{}},"component":{}}],["aris",{"_index":3699,"title":{},"name":{},"text":{"60":{},"80":{},"267":{}},"component":{}}],["arithmet",{"_index":7189,"title":{"190-3":{}},"name":{},"text":{},"component":{}}],["arnaud",{"_index":3675,"title":{},"name":{},"text":{"60":{}},"component":{}}],["aros",{"_index":2787,"title":{},"name":{},"text":{"46":{}},"component":{}}],["around",{"_index":1466,"title":{},"name":{},"text":{"24":{},"35":{},"43":{},"44":{},"46":{},"60":{},"61":{},"62":{},"63":{},"66":{},"69":{},"77":{},"80":{},"97":{},"105":{},"122":{},"126":{},"137":{},"143":{},"157":{},"172":{},"181":{},"270":{}},"component":{}}],["arrang",{"_index":7581,"title":{},"name":{},"text":{"235":{},"270":{}},"component":{}}],["array",{"_index":1460,"title":{},"name":{},"text":{"24":{},"57":{},"148":{}},"component":{}}],["arraylist",{"_index":4780,"title":{},"name":{},"text":{"77":{},"78":{}},"component":{}}],["arrays.aslist",{"_index":2603,"title":{},"name":{},"text":{"43":{},"52":{}},"component":{}}],["arriv",{"_index":4343,"title":{},"name":{},"text":{"62":{},"68":{},"71":{},"77":{},"97":{},"122":{},"199":{},"208":{}},"component":{}}],["arrow",{"_index":794,"title":{},"name":{},"text":{"5":{},"270":{}},"component":{}}],["arrow’",{"_index":803,"title":{},"name":{},"text":{"5":{}},"component":{}}],["articl",{"_index":532,"title":{},"name":{},"text":{"3":{},"7":{},"184":{},"270":{},"273":{}},"component":{}}],["artifact",{"_index":170,"title":{"137-23":{}},"name":{},"text":{"2":{},"3":{},"23":{},"108":{},"116":{},"122":{},"135":{},"137":{},"169":{},"184":{},"185":{},"275":{}},"component":{}}],["artifactid",{"_index":2353,"title":{},"name":{},"text":{"35":{},"38":{},"276":{}},"component":{}}],["asciidoc",{"_index":1124,"title":{},"name":{},"text":{"10":{}},"component":{}}],["asdomaineventmessag",{"_index":3553,"title":{},"name":{},"text":{"60":{}},"component":{}}],["aseventmessag",{"_index":2587,"title":{},"name":{},"text":{"42":{}},"component":{}}],["asia",{"_index":7570,"title":{},"name":{},"text":{"231":{}},"component":{}}],["asid",{"_index":2575,"title":{},"name":{},"text":{"42":{}},"component":{}}],["ask",{"_index":1169,"title":{"14-3":{}},"name":{},"text":{"121":{},"165":{},"244":{},"254":{},"262":{},"270":{},"273":{},"282":{}},"component":{}}],["aslist",{"_index":6441,"title":{},"name":{},"text":{"147":{}},"component":{}}],["aslv2",{"_index":3954,"title":{},"name":{},"text":{"61":{}},"component":{}}],["aspect",{"_index":534,"title":{},"name":{},"text":{"3":{},"27":{},"56":{},"70":{},"79":{},"80":{},"81":{},"97":{},"144":{},"145":{},"152":{},"158":{},"181":{},"182":{},"184":{},"185":{},"218":{},"234":{}},"component":{}}],["assert",{"_index":3319,"title":{},"name":{},"text":{"60":{},"61":{},"66":{},"282":{}},"component":{}}],["assertequals(1",{"_index":4459,"title":{},"name":{},"text":{"66":{}},"component":{}}],["assertionerror",{"_index":4505,"title":{},"name":{},"text":{"66":{}},"component":{}}],["asset",{"_index":6071,"title":{},"name":{},"text":{"137":{}},"component":{}}],["assign",{"_index":1955,"title":{"79-1":{},"79-2":{},"162-3":{}},"name":{},"text":{"31":{},"37":{},"61":{},"63":{},"79":{},"80":{},"81":{},"104":{},"108":{},"139":{},"142":{},"146":{},"149":{},"155":{},"162":{},"165":{},"166":{},"171":{},"185":{},"218":{},"258":{},"277":{},"278":{},"280":{}},"component":{}}],["assign/chang",{"_index":7640,"title":{},"name":{},"text":{"258":{}},"component":{}}],["assign/un",{"_index":7639,"title":{},"name":{},"text":{"258":{}},"component":{}}],["assignhandlerinstancesmatching(str",{"_index":4854,"title":{},"name":{},"text":{"79":{}},"component":{}}],["assignhandlertypesmatch",{"_index":5618,"title":{},"name":{},"text":{"107":{}},"component":{}}],["assignhandlertypesmatching(str",{"_index":4856,"title":{},"name":{},"text":{"79":{}},"component":{}}],["assignprocessinggroup(funct",{"_index":4858,"title":{},"name":{},"text":{"79":{}},"component":{}}],["assignprocessinggroup(str",{"_index":4857,"title":{},"name":{},"text":{"79":{}},"component":{}}],["assist",{"_index":1179,"title":{},"name":{},"text":{"15":{},"21":{}},"component":{}}],["associ",{"_index":1911,"title":{"62":{}},"name":{"62":{}},"text":{"30":{},"39":{},"55":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"79":{},"117":{},"141":{},"146":{},"165":{},"171":{},"221":{},"239":{},"241":{},"242":{},"270":{}},"component":{}}],["associatewith(str",{"_index":4339,"title":{},"name":{},"text":{"62":{}},"component":{}}],["association_value_entri",{"_index":1650,"title":{},"name":{},"text":{"26":{}},"component":{}}],["associationkey",{"_index":5422,"title":{},"name":{},"text":{"97":{}},"component":{}}],["associationproperti",{"_index":3585,"title":{},"name":{},"text":{"60":{},"63":{}},"component":{}}],["associationresolv",{"_index":3964,"title":{},"name":{},"text":{"61":{}},"component":{}}],["associations.key",{"_index":5701,"title":{},"name":{},"text":{"114":{}},"component":{}}],["associations.valu",{"_index":5702,"title":{},"name":{},"text":{"114":{}},"component":{}}],["associationvalu",{"_index":4370,"title":{},"name":{},"text":{"63":{},"97":{}},"component":{}}],["associationvalue`",{"_index":4369,"title":{},"name":{},"text":{"63":{}},"component":{}}],["associationvalueentri",{"_index":5420,"title":{},"name":{},"text":{"97":{}},"component":{}}],["assum",{"_index":282,"title":{},"name":{},"text":{"3":{},"8":{},"23":{},"27":{},"37":{},"57":{},"61":{},"73":{},"80":{},"108":{},"184":{},"185":{}},"component":{}}],["async",{"_index":5816,"title":{},"name":{},"text":{"121":{}},"component":{}}],["asyncfetch",{"_index":5517,"title":{"108-9":{}},"name":{},"text":{"104":{},"108":{}},"component":{}}],["asyncfetcher.build",{"_index":5520,"title":{},"name":{},"text":{"104":{}},"component":{}}],["asynchron",{"_index":1727,"title":{"143-6":{}},"name":{},"text":{"27":{},"31":{},"46":{},"52":{},"54":{},"56":{},"80":{},"121":{},"131":{},"143":{},"254":{}},"component":{}}],["asynchronouscommandbu",{"_index":1918,"title":{"31-11":{}},"name":{},"text":{"31":{}},"component":{}}],["asynchronouscommandbus(transactionmanag",{"_index":2030,"title":{},"name":{},"text":{"31":{}},"component":{}}],["asynchronouscommandbus.build",{"_index":2027,"title":{},"name":{},"text":{"31":{}},"component":{}}],["asynchronouscommandbus.class",{"_index":2029,"title":{},"name":{},"text":{"31":{}},"component":{}}],["atom",{"_index":2357,"title":{},"name":{},"text":{"35":{},"46":{},"80":{},"144":{}},"component":{}}],["attach",{"_index":1488,"title":{},"name":{},"text":{"24":{},"31":{},"32":{},"35":{},"36":{},"38":{},"42":{},"44":{},"45":{},"46":{},"56":{},"60":{},"66":{},"79":{},"109":{},"110":{},"112":{},"270":{},"281":{}},"component":{}}],["attemp",{"_index":6203,"title":{},"name":{},"text":{"142":{}},"component":{}}],["attempt",{"_index":1507,"title":{},"name":{},"text":{"24":{},"60":{},"63":{},"66":{},"80":{},"92":{},"102":{},"138":{},"142":{},"165":{},"172":{},"203":{}},"component":{}}],["attribut",{"_index":1132,"title":{"52-11":{},"79-23":{}},"name":{},"text":{"11":{},"29":{},"42":{},"44":{},"52":{},"56":{},"60":{},"61":{},"63":{},"71":{},"79":{},"80":{},"93":{},"96":{},"163":{},"176":{},"212":{},"277":{},"278":{}},"component":{}}],["audienc",{"_index":7227,"title":{"196-2":{},"224-2":{},"233-2":{}},"name":{},"text":{},"component":{}}],["audit",{"_index":1868,"title":{},"name":{},"text":{"29":{},"42":{},"44":{},"137":{}},"component":{}}],["auditinginterceptor",{"_index":2652,"title":{},"name":{},"text":{"44":{}},"component":{}}],["authcorrelationdataprovid",{"_index":2606,"title":{},"name":{},"text":{"43":{}},"component":{}}],["authcorrelationdataprovider(funct",{"_index":2608,"title":{},"name":{},"text":{"43":{}},"component":{}}],["authent",{"_index":152,"title":{"244":{},"165-3":{},"165-4":{},"203-18":{}},"name":{"244":{}},"text":{"2":{},"8":{},"44":{},"138":{},"139":{},"142":{},"146":{},"159":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"168":{},"171":{},"172":{},"176":{},"177":{},"185":{},"201":{},"203":{},"205":{},"223":{},"230":{},"234":{},"244":{}},"component":{}}],["author",{"_index":153,"title":{"203-18":{}},"name":{},"text":{"2":{},"147":{},"163":{},"169":{},"176":{},"212":{},"244":{}},"component":{}}],["auto",{"_index":1151,"title":{"25-1":{},"25-4":{},"25-5":{},"29-3":{},"29-6":{},"29-9":{},"31-10":{},"31-13":{},"31-16":{},"31-24":{},"31-27":{},"31-30":{},"35-5":{},"35-9":{},"35-12":{},"35-15":{},"35-19":{},"35-24":{},"37-3":{},"38-8":{},"38-9":{},"50-3":{},"50-7":{},"50-8":{},"52-3":{},"52-7":{},"52-13":{},"52-14":{},"52-19":{},"52-24":{},"53-3":{},"54-5":{},"54-8":{},"63-13":{},"63-15":{},"65-3":{},"69-3":{},"70-5":{},"71-4":{},"71-8":{},"71-12":{},"79-7":{},"79-10":{},"79-15":{},"79-18":{},"79-26":{},"80-4":{},"80-6":{},"80-7":{},"80-9":{},"80-12":{},"80-14":{},"80-15":{},"80-17":{},"80-24":{},"80-26":{},"80-29":{},"80-31":{},"80-37":{},"80-41":{},"80-43":{},"80-44":{},"80-47":{},"80-48":{},"80-52":{},"80-53":{},"80-56":{},"80-57":{},"80-68":{},"80-70":{},"80-71":{},"81-3":{},"81-5":{},"81-6":{},"81-11":{},"81-12":{},"97-2":{},"185-9":{}},"name":{},"text":{"13":{},"23":{},"25":{},"29":{},"32":{},"33":{},"35":{},"43":{},"52":{},"60":{},"61":{},"63":{},"80":{},"97":{},"101":{},"103":{},"104":{},"108":{},"116":{},"137":{},"172":{},"173":{},"180":{},"213":{}},"component":{}}],["auto_rebalance_processor",{"_index":6695,"title":{},"name":{},"text":{"164":{}},"component":{}}],["autoclust",{"_index":448,"title":{},"name":{},"text":{"3":{},"141":{},"184":{}},"component":{}}],["autocluster.context",{"_index":6903,"title":{},"name":{},"text":{"172":{}},"component":{}}],["autocluster.first",{"_index":6902,"title":{},"name":{},"text":{"172":{}},"component":{}}],["autocommit",{"_index":2778,"title":{},"name":{},"text":{"46":{}},"component":{}}],["autoconfig",{"_index":4049,"title":{},"name":{},"text":{"61":{}},"component":{}}],["autoconfigur",{"_index":1148,"title":{},"name":{},"text":{"13":{},"25":{},"43":{},"52":{},"60":{},"61":{},"62":{},"89":{},"93":{},"116":{},"127":{},"150":{}},"component":{}}],["autoconfigurationpackages#get(beanfactori",{"_index":4162,"title":{},"name":{},"text":{"61":{}},"component":{}}],["autoconfigureaft",{"_index":3853,"title":{},"name":{},"text":{"61":{}},"component":{}}],["autoconfigurebefor",{"_index":3852,"title":{},"name":{},"text":{"61":{}},"component":{}}],["autom",{"_index":1588,"title":{"26-10":{},"270-19":{}},"name":{},"text":{"26":{},"38":{},"60":{},"141":{},"223":{},"243":{},"254":{},"270":{},"280":{}},"component":{}}],["automat",{"_index":239,"title":{"141-3":{},"254-6":{}},"name":{},"text":{"3":{},"23":{},"24":{},"25":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"42":{},"43":{},"44":{},"46":{},"52":{},"54":{},"56":{},"60":{},"61":{},"62":{},"63":{},"70":{},"71":{},"74":{},"79":{},"80":{},"84":{},"89":{},"91":{},"95":{},"96":{},"97":{},"98":{},"102":{},"104":{},"108":{},"114":{},"116":{},"117":{},"118":{},"122":{},"127":{},"135":{},"137":{},"140":{},"141":{},"146":{},"151":{},"160":{},"169":{},"170":{},"172":{},"173":{},"184":{},"185":{},"244":{},"245":{},"247":{},"253":{},"254":{},"256":{},"270":{},"281":{},"282":{}},"component":{}}],["automaticaccountcommanddispatcher.dispatch",{"_index":2923,"title":{},"name":{},"text":{"52":{}},"component":{}}],["autosc",{"_index":7607,"title":{},"name":{},"text":{"245":{},"258":{}},"component":{}}],["autowir",{"_index":2956,"title":{},"name":{},"text":{"52":{},"61":{},"63":{},"102":{},"103":{}},"component":{}}],["avail",{"_index":201,"title":{"218":{},"203-50":{},"217-2":{},"256-6":{}},"name":{},"text":{"2":{},"3":{},"8":{},"15":{},"19":{},"21":{},"23":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"42":{},"44":{},"46":{},"47":{},"52":{},"55":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"76":{},"79":{},"80":{},"89":{},"97":{},"99":{},"101":{},"103":{},"104":{},"105":{},"106":{},"116":{},"117":{},"121":{},"122":{},"128":{},"130":{},"134":{},"137":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"156":{},"169":{},"171":{},"172":{},"175":{},"176":{},"177":{},"178":{},"180":{},"184":{},"185":{},"194":{},"196":{},"198":{},"203":{},"205":{},"208":{},"209":{},"211":{},"212":{},"217":{},"218":{},"221":{},"223":{},"245":{},"254":{},"255":{},"256":{},"264":{},"265":{},"270":{},"271":{},"274":{},"277":{},"278":{}},"component":{}}],["averag",{"_index":2899,"title":{},"name":{},"text":{"51":{},"177":{},"194":{},"270":{},"271":{}},"component":{}}],["avg",{"_index":7224,"title":{},"name":{},"text":{"194":{}},"component":{}}],["avoid",{"_index":1060,"title":{},"name":{},"text":{"8":{},"24":{},"101":{},"107":{},"141":{},"170":{},"276":{},"281":{}},"component":{}}],["aw",{"_index":950,"title":{},"name":{},"text":{"7":{}},"component":{}}],["awaitforstatus(str",{"_index":6277,"title":{},"name":{},"text":{"143":{}},"component":{}}],["awar",{"_index":1461,"title":{},"name":{},"text":{"24":{},"27":{},"29":{},"38":{},"60":{},"63":{},"65":{},"71":{},"80":{},"85":{},"144":{},"145":{}},"component":{}}],["away",{"_index":5461,"title":{},"name":{},"text":{"101":{},"241":{}},"component":{}}],["awkward",{"_index":5671,"title":{},"name":{},"text":{"111":{}},"component":{}}],["axoframework",{"_index":7744,"title":{},"name":{},"text":{"271":{}},"component":{}}],["axon",{"_index":1,"title":{"1":{},"2":{},"3":{},"4":{},"17":{},"18":{},"26":{},"82":{},"86":{},"90":{},"132":{},"133":{},"136":{},"147":{},"154":{},"161":{},"162":{},"163":{},"165":{},"166":{},"177":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"196":{},"197":{},"204":{},"229":{},"248":{},"249":{},"276":{},"2-1":{},"2-2":{},"2-3":{},"2-4":{},"2-5":{},"2-6":{},"2-7":{},"3-13":{},"5-4":{},"19-1":{},"19-2":{},"23-2":{},"23-3":{},"23-4":{},"23-5":{},"23-6":{},"23-7":{},"23-8":{},"23-9":{},"23-10":{},"23-11":{},"23-12":{},"23-13":{},"23-14":{},"23-16":{},"23-17":{},"23-18":{},"23-19":{},"23-20":{},"23-21":{},"23-22":{},"23-23":{},"23-24":{},"23-25":{},"23-26":{},"23-27":{},"23-28":{},"23-29":{},"23-30":{},"23-31":{},"23-32":{},"23-33":{},"23-34":{},"23-35":{},"23-36":{},"23-37":{},"23-38":{},"24-2":{},"25-3":{},"29-2":{},"29-5":{},"29-8":{},"31-9":{},"31-12":{},"31-15":{},"31-23":{},"31-26":{},"31-29":{},"33-5":{},"35-3":{},"35-4":{},"35-8":{},"35-11":{},"35-14":{},"35-18":{},"35-23":{},"37-2":{},"38-7":{},"47-1":{},"50-2":{},"50-5":{},"50-6":{},"52-2":{},"52-6":{},"52-12":{},"52-23":{},"52-27":{},"52-28":{},"52-38":{},"52-39":{},"52-41":{},"52-42":{},"52-44":{},"52-45":{},"53-2":{},"54-4":{},"54-7":{},"63-12":{},"63-14":{},"65-2":{},"69-2":{},"70-2":{},"70-4":{},"71-3":{},"71-7":{},"71-11":{},"79-6":{},"79-9":{},"79-14":{},"79-17":{},"79-25":{},"80-3":{},"80-5":{},"80-8":{},"80-11":{},"80-13":{},"80-16":{},"80-23":{},"80-25":{},"80-28":{},"80-30":{},"80-36":{},"80-40":{},"80-42":{},"80-46":{},"80-51":{},"80-55":{},"80-67":{},"80-69":{},"81-2":{},"81-4":{},"81-10":{},"137-23":{},"140-3":{},"143-3":{},"143-5":{},"143-6":{},"144-18":{},"144-27":{},"146-2":{},"150-5":{},"151-2":{},"156-2":{},"158-2":{},"161-1":{},"162-1":{},"162-2":{},"163-4":{},"166-1":{},"166-2":{},"184-6":{},"185-2":{},"185-6":{},"196-1":{},"196-7":{},"197-1":{},"197-2":{},"198-3":{},"198-5":{},"198-6":{},"199-5":{},"199-9":{},"199-13":{},"200-3":{},"200-4":{},"200-5":{},"201-1":{},"203-2":{},"203-6":{},"205-1":{},"205-3":{},"208-5":{},"208-6":{},"209-6":{},"209-7":{},"211-5":{},"211-6":{},"218-7":{},"223-3":{},"229-1":{},"229-2":{},"229-3":{},"238-1":{},"245-2":{},"266-2":{},"266-3":{},"267-1":{},"267-2":{},"275-2":{},"275-3":{},"280-4":{},"282-1":{}},"name":{"17":{},"18":{},"154":{},"177":{},"248":{},"249":{},"267":{},"276":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"11":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"84":{},"85":{},"92":{},"93":{},"96":{},"97":{},"99":{},"100":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"108":{},"111":{},"114":{},"116":{},"117":{},"119":{},"121":{},"122":{},"123":{},"124":{},"127":{},"128":{},"131":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"182":{},"183":{},"184":{},"185":{},"191":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"223":{},"224":{},"225":{},"229":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"238":{},"239":{},"242":{},"243":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{"1":{},"3":{},"4":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{}}}],["axon'",{"_index":64,"title":{},"name":{},"text":{"1":{}},"component":{}}],["axon.amqp.exchange=exchangenam",{"_index":5446,"title":{},"name":{},"text":{"98":{}},"component":{}}],["axon.amqp.transact",{"_index":5447,"title":{},"name":{},"text":{"98":{}},"component":{}}],["axon.applicationcommandqueue.s",{"_index":7112,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applicationqueryqueue.s",{"_index":7119,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applications.duration.connect",{"_index":7101,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applications.saturation.connected.count",{"_index":7103,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applications.throughput.connect.count",{"_index":7102,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applications.throughput.disconnect.count",{"_index":7104,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applicationsubscriptionmetricregistry.act",{"_index":7136,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applicationsubscriptionmetricregistry.tot",{"_index":7134,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.applicationsubscriptionmetricregistry.upd",{"_index":7135,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.authentication.error.count",{"_index":7105,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.axonserver.cert",{"_index":6822,"title":{},"name":{},"text":{"169":{}},"component":{}}],["axon.axonserver.context",{"_index":5732,"title":{},"name":{},"text":{"117":{},"146":{}},"component":{}}],["axon.axonserver.contexts=ten",{"_index":5726,"title":{},"name":{},"text":{"117":{}},"component":{}}],["axon.axonserver.disableeventblacklisting=tru",{"_index":4639,"title":{},"name":{},"text":{"70":{}},"component":{}}],["axon.axonserver.en",{"_index":1574,"title":{},"name":{},"text":{"25":{},"33":{}},"component":{}}],["axon.axonserver.eventhandling.processors.[processor",{"_index":5181,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axon.axonserver.eventhandling.processors.mi",{"_index":5185,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axon.axonserver.heartbeat.enabled=fals",{"_index":7158,"title":{},"name":{},"text":{"180":{}},"component":{}}],["axon.axonserver.initi",{"_index":6550,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axon.axonserver.new",{"_index":6553,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axon.axonserver.nr",{"_index":6552,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axon.axonserver.persist",{"_index":5295,"title":{},"name":{},"text":{"81":{}},"component":{}}],["axon.axonserver.ssl",{"_index":6821,"title":{},"name":{},"text":{"169":{}},"component":{}}],["axon.axonserver.token",{"_index":6587,"title":{},"name":{},"text":{"161":{}},"component":{}}],["axon.axonserver.token=[token",{"_index":6599,"title":{},"name":{},"text":{"161":{}},"component":{}}],["axon.command",{"_index":7110,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.act",{"_index":7111,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.count",{"_index":7106,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.dur",{"_index":7051,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.duration.handl",{"_index":7052,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.error.count",{"_index":7053,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.rate.fifteenminuter",{"_index":7109,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.rate.fiveminuter",{"_index":7108,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.rate.oneminuter",{"_index":7107,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.saturation.active.count",{"_index":7055,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.saturation.queued.count",{"_index":7054,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.throughput.count",{"_index":7046,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.throughput.rate.fifteenminuter",{"_index":7049,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.throughput.rate.fiveminuter",{"_index":7048,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.commands.throughput.rate.oneminuter",{"_index":7047,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.distributed.enabled=tru",{"_index":2139,"title":{},"name":{},"text":{"31":{},"102":{},"127":{}},"component":{}}],["axon.distributed.jgroup",{"_index":5487,"title":{},"name":{},"text":{"102":{}},"component":{}}],["axon.distributed.jgroups.bind",{"_index":5490,"title":{},"name":{},"text":{"102":{}},"component":{}}],["axon.distributed.jgroups.clust",{"_index":5493,"title":{},"name":{},"text":{"102":{}},"component":{}}],["axon.distributed.jgroups.configur",{"_index":5495,"title":{},"name":{},"text":{"102":{}},"component":{}}],["axon.distributed.jgroups.gossip.auto",{"_index":5499,"title":{},"name":{},"text":{"102":{}},"component":{}}],["axon.distributed.jgroups.gossip.hosts=localhost[12001",{"_index":5498,"title":{},"name":{},"text":{"102":{}},"component":{}}],["axon.distributed.load",{"_index":5488,"title":{},"name":{},"text":{"102":{},"127":{}},"component":{}}],["axon.distributed.spr",{"_index":5973,"title":{},"name":{},"text":{"127":{}},"component":{}}],["axon.ev",{"_index":5541,"title":{},"name":{},"text":{"104":{},"107":{}},"component":{}}],["axon.event.count",{"_index":7120,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.event.rate.fifteenminuter",{"_index":7123,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.event.rate.fiveminuter",{"_index":7122,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.event.rate.oneminuter",{"_index":7121,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.eventhandling.processors.first.dlq.enabled=tru",{"_index":5355,"title":{},"name":{},"text":{"89":{}},"component":{}}],["axon.eventhandling.processors.mi",{"_index":4919,"title":{},"name":{},"text":{"79":{},"80":{},"81":{}},"component":{}}],["axon.eventhandling.processors.name.source=myqueuemessagesourc",{"_index":5459,"title":{},"name":{},"text":{"100":{}},"component":{}}],["axon.eventhandling.processors[my.processor].mode=pool",{"_index":5039,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axon.eventhandling.processors[my.processor].mode=subscrib",{"_index":5280,"title":{},"name":{},"text":{"81":{}},"component":{}}],["axon.eventhandling.processors[my.processor].mode=track",{"_index":5022,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axon.eventhandling.processors[my.processor].source=eventbu",{"_index":5281,"title":{},"name":{},"text":{"81":{}},"component":{}}],["axon.eventhandling.processors[my.processor].source=eventstor",{"_index":5023,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axon.eventhandling.tokenstore.claim",{"_index":5092,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axon.events.append.dur",{"_index":7074,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.append.error.count",{"_index":7075,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.append.saturation.active.count",{"_index":7076,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.append.throughput.count",{"_index":7070,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.append.throughput.rate.fifteenminuter",{"_index":7073,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.append.throughput.rate.fiveminuter",{"_index":7072,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.append.throughput.rate.oneminuter",{"_index":7071,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.dur",{"_index":7081,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.error.count",{"_index":7082,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.saturation.active.count",{"_index":7083,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.throughput.count",{"_index":7077,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.throughput.rate.fifteenminuter",{"_index":7080,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.throughput.rate.fiveminuter",{"_index":7079,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.events.read.aggregate.throughput.rate.oneminuter",{"_index":7078,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.extension.tracing.en",{"_index":5988,"title":{},"name":{},"text":{"130":{}},"component":{}}],["axon.extension.tracing.span.commandtags=message_id",{"_index":5996,"title":{},"name":{},"text":{"130":{}},"component":{}}],["axon.extension.tracing.span.eventtags=message_id",{"_index":5997,"title":{},"name":{},"text":{"130":{}},"component":{}}],["axon.extension.tracing.span.querytags=message_id",{"_index":5998,"title":{},"name":{},"text":{"130":{}},"component":{}}],["axon.globalsubscriptionmetricregistry.act",{"_index":7130,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.globalsubscriptionmetricregistry.tot",{"_index":7128,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.globalsubscriptionmetricregistry.upd",{"_index":7129,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.kafka",{"_index":5633,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.consum",{"_index":5637,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.consumer.ev",{"_index":5645,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.fetcher.pol",{"_index":5632,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.messag",{"_index":5624,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.produc",{"_index":5636,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.producer.ev",{"_index":5631,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.producer.transact",{"_index":5628,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.kafka.publisher.confirm",{"_index":5627,"title":{},"name":{},"text":{"108":{}},"component":{}}],["axon.metrics.auto",{"_index":2832,"title":{},"name":{},"text":{"50":{}},"component":{}}],["axon.metrics.micrometer.dimensional=tru",{"_index":2844,"title":{},"name":{},"text":{"50":{}},"component":{}}],["axon.mongo.databas",{"_index":5716,"title":{},"name":{},"text":{"116":{}},"component":{}}],["axon.multi",{"_index":5736,"title":{},"name":{},"text":{"117":{},"118":{}},"component":{}}],["axon.queri",{"_index":7117,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.act",{"_index":7118,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.count",{"_index":7113,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.dur",{"_index":7061,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.duration.handl",{"_index":7062,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.error.count",{"_index":7063,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.rate.fifteenminuter",{"_index":7116,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.rate.fiveminuter",{"_index":7115,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.rate.oneminuter",{"_index":7114,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.saturation.active.count",{"_index":7065,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.saturation.queued.count",{"_index":7064,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.subscriptionquery.dur",{"_index":7067,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.subscriptionquery.saturation.act",{"_index":7069,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.subscriptionquery.throughput.tot",{"_index":7066,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.subscriptionquery.throughput.upd",{"_index":7068,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.throughput.count",{"_index":7057,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.throughput.rate.fifteenminuter",{"_index":7060,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.throughput.rate.fiveminuter",{"_index":7059,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.queries.throughput.rate.oneminuter",{"_index":7058,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.querysubscriptionmetricregistry.act",{"_index":7133,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.querysubscriptionmetricregistry.tot",{"_index":7131,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.querysubscriptionmetricregistry.upd",{"_index":7132,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.serializer.ev",{"_index":1422,"title":{},"name":{},"text":{"24":{}},"component":{}}],["axon.serializer.events*=jackson",{"_index":6539,"title":{},"name":{},"text":{"154":{}},"component":{}}],["axon.serializer.events=jackson",{"_index":2384,"title":{},"name":{},"text":{"35":{}},"component":{}}],["axon.serializer.gener",{"_index":1421,"title":{},"name":{},"text":{"24":{}},"component":{}}],["axon.serializer.messag",{"_index":1423,"title":{},"name":{},"text":{"24":{}},"component":{}}],["axon.server.en",{"_index":2122,"title":{},"name":{},"text":{"31":{}},"component":{}}],["axon.snapshot.count",{"_index":7124,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshot.rate.fifteenminuter",{"_index":7127,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshot.rate.fiveminuter",{"_index":7126,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshot.rate.oneminuter",{"_index":7125,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.dur",{"_index":7088,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.error.count",{"_index":7089,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.saturation.active.count",{"_index":7090,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.throughput.count",{"_index":7084,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.throughput.rate.fifteenminuter",{"_index":7087,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.throughput.rate.fiveminuter",{"_index":7086,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.append.throughput.rate.oneminuter",{"_index":7085,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.dur",{"_index":7095,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.error.count",{"_index":7096,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.saturation.active.count",{"_index":7097,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.throughput.count",{"_index":7091,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.throughput.rate.fifteenminuter",{"_index":7094,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.throughput.rate.fiveminuter",{"_index":7093,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.snapshots.read.throughput.rate.oneminuter",{"_index":7092,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.tags.computeregion=europ",{"_index":6484,"title":{},"name":{},"text":{"150":{}},"component":{}}],["axon.tasks.dur",{"_index":7100,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.tasks.error.count",{"_index":7099,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.tasks.saturation.scheduled.count",{"_index":7098,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axon.tracing.attributeproviders.aggregateidentifi",{"_index":2969,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.tracing.attributeproviders.messageid",{"_index":2970,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.tracing.attributeproviders.messagenam",{"_index":2971,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.tracing.attributeproviders.messagetyp",{"_index":2972,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.tracing.attributeproviders.metadata",{"_index":2974,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.tracing.attributeproviders.payloadtyp",{"_index":2973,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.tracing.showeventsourcinghandl",{"_index":2967,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon.vers",{"_index":2121,"title":{},"name":{},"text":{"31":{},"35":{},"54":{},"275":{}},"component":{}}],["axon_aggregate_identifi",{"_index":2939,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon_ee_server_hom",{"_index":6534,"title":{},"name":{},"text":{"154":{}},"component":{}}],["axon_message_id",{"_index":2941,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon_message_nam",{"_index":2943,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon_message_typ",{"_index":2945,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon_metadata_{key",{"_index":2950,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon_payload_typ",{"_index":2948,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axon_se_server_home}/data/default",{"_index":6546,"title":{},"name":{},"text":{"155":{}},"component":{}}],["axon_server_url}/swagg",{"_index":7030,"title":{},"name":{},"text":{"175":{}},"component":{}}],["axonautoconfigur",{"_index":1568,"title":{},"name":{},"text":{"25":{}},"component":{}}],["axonconfig",{"_index":1984,"title":{},"name":{},"text":{"31":{},"35":{},"37":{},"38":{},"52":{},"54":{},"63":{},"70":{},"71":{},"74":{},"79":{},"80":{},"81":{},"88":{},"89":{},"93":{},"113":{},"115":{},"180":{}},"component":{}}],["axonconfig.eventprocessingconfigur",{"_index":4624,"title":{},"name":{},"text":{"70":{}},"component":{}}],["axonconfigur",{"_index":1854,"title":{},"name":{},"text":{"29":{},"53":{},"146":{}},"component":{}}],["axonconfigurationexcept",{"_index":4217,"title":{},"name":{},"text":{"61":{}},"component":{}}],["axondbschedulerautoconfigur",{"_index":3260,"title":{},"name":{},"text":{"60":{}},"component":{}}],["axonframework",{"_index":1058,"title":{"267":{},"275":{}},"name":{"275":{}},"text":{"8":{},"17":{},"19":{},"33":{},"61":{},"63":{},"65":{},"218":{},"262":{},"265":{},"267":{},"269":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{}},"component":{}}],["axonframeworkvers",{"_index":2966,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonframwork",{"_index":7679,"title":{},"name":{},"text":{"267":{}},"component":{}}],["axoniq",{"_index":9,"title":{"5":{},"6":{},"8":{},"15":{},"21":{},"224":{},"228":{},"230":{},"231":{},"233":{},"235":{},"238":{},"247":{},"258":{},"260":{},"264":{},"268":{},"270":{},"273":{},"5-1":{},"5-3":{},"5-4":{},"5-5":{},"5-7":{},"5-13":{},"5-14":{},"5-15":{},"7-2":{},"8-11":{},"9-1":{},"198-2":{},"224-1":{},"229-1":{},"229-2":{},"233-1":{},"260-1":{},"266-1":{},"273-1":{},"273-2":{},"273-3":{},"273-4":{},"273-5":{}},"name":{"260":{},"270":{}},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"14":{},"15":{},"16":{},"17":{},"19":{},"21":{},"35":{},"60":{},"91":{},"134":{},"141":{},"142":{},"159":{},"161":{},"162":{},"166":{},"170":{},"178":{},"184":{},"185":{},"198":{},"199":{},"200":{},"203":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"224":{},"227":{},"229":{},"230":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"258":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"276":{},"278":{}},"component":{"5":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{}}}],["axoniq.axonserv",{"_index":6845,"title":{},"name":{},"text":{"172":{}},"component":{}}],["axoniq.axonserver.accesscontrol.admin",{"_index":6800,"title":{},"name":{},"text":{"166":{},"201":{}},"component":{}}],["axoniq.axonserver.accesscontrol.en",{"_index":6600,"title":{},"name":{},"text":{"162":{},"163":{},"165":{},"166":{}},"component":{}}],["axoniq.axonserver.accesscontrol.enabled=tru",{"_index":523,"title":{},"name":{},"text":{"3":{},"163":{},"167":{},"184":{}},"component":{}}],["axoniq.axonserver.accesscontrol.intern",{"_index":524,"title":{},"name":{},"text":{"3":{},"162":{},"184":{}},"component":{}}],["axoniq.axonserver.accesscontrol.sam",{"_index":6106,"title":{},"name":{},"text":{"138":{}},"component":{}}],["axoniq.axonserver.accesscontrol.systemtokenfil",{"_index":6601,"title":{},"name":{},"text":{"162":{}},"component":{}}],["axoniq.axonserver.accesscontrol.systemtokenfile=./config/axonserver.token",{"_index":404,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.accesscontrol.systemtokenfile=/axonserver/config/axonserver.tok",{"_index":526,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.accesscontrol.token",{"_index":6799,"title":{},"name":{},"text":{"166":{},"201":{}},"component":{}}],["axoniq.axonserver.autocluster.context",{"_index":6168,"title":{},"name":{},"text":{"141":{},"185":{}},"component":{}}],["axoniq.axonserver.autocluster.contexts=_admin,default",{"_index":509,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.autocluster.contexts=context1,context2",{"_index":6166,"title":{},"name":{},"text":{"141":{}},"component":{}}],["axoniq.axonserver.autocluster.contexts=default",{"_index":6060,"title":{},"name":{},"text":{"137":{}},"component":{}}],["axoniq.axonserver.autocluster.first",{"_index":6059,"title":{},"name":{},"text":{"137":{},"141":{},"185":{}},"component":{}}],["axoniq.axonserver.autocluster.first=axonserv",{"_index":508,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.autocluster.first=intern",{"_index":6164,"title":{},"name":{},"text":{"141":{}},"component":{}}],["axoniq.axonserver.clustertemplate.path:/mypath/clust",{"_index":6174,"title":{},"name":{},"text":{"141":{},"170":{}},"component":{}}],["axoniq.axonserver.commandflowcontrol.initi",{"_index":6558,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.commandflowcontrol.new",{"_index":6561,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.commandflowcontrol.nr",{"_index":6560,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.configdb",{"_index":730,"title":{},"name":{},"text":{"4":{}},"component":{}}],["axoniq.axonserver.controldb",{"_index":316,"title":{},"name":{},"text":{"3":{},"4":{},"184":{},"185":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.activedirectori",{"_index":6645,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.activedirectory=tru",{"_index":6648,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.addomain",{"_index":6646,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.addomain=demo.io",{"_index":6650,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.allow",{"_index":6659,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.en",{"_index":6629,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.enabled=tru",{"_index":6647,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.group",{"_index":6642,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.initialbindpassword",{"_index":6638,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.initialbinduserdn",{"_index":6634,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.rol",{"_index":6653,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.roles.admin_staff=admin@_admin",{"_index":6656,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.roles.axonadmin=admin@_admin",{"_index":6652,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.roles.ship_crew=use_context@default",{"_index":6657,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.search",{"_index":6639,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.searchfilter=(&(objectclass=user)(samaccountname=\\{1",{"_index":6651,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.serv",{"_index":6630,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.servername=mi",{"_index":6649,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.trust",{"_index":6114,"title":{},"name":{},"text":{"138":{}},"component":{}}],["axoniq.axonserver.enterprise.ldap.us",{"_index":6658,"title":{},"name":{},"text":{"163":{}},"component":{}}],["axoniq.axonserver.enterprise.licensedirectori",{"_index":284,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.enterprise.licensedirectory=./config",{"_index":403,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.enterprise.oauth2.author",{"_index":6776,"title":{},"name":{},"text":{"165":{}},"component":{}}],["axoniq.axonserver.enterprise.oauth2.en",{"_index":6774,"title":{},"name":{},"text":{"165":{}},"component":{}}],["axoniq.axonserver.enterprise.oauth2.forceoidclogout",{"_index":6787,"title":{},"name":{},"text":{"165":{}},"component":{}}],["axoniq.axonserver.enterprise.oauth2.mod",{"_index":6775,"title":{},"name":{},"text":{"165":{}},"component":{}}],["axoniq.axonserver.enterprise.oauth2.request",{"_index":6782,"title":{},"name":{},"text":{"165":{}},"component":{}}],["axoniq.axonserver.enterprise.oauth2.usernam",{"_index":6780,"title":{},"name":{},"text":{"165":{}},"component":{}}],["axoniq.axonserver.ev",{"_index":6108,"title":{},"name":{},"text":{"138":{},"144":{}},"component":{}}],["axoniq.axonserver.event.aggregate.prefetch",{"_index":6554,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.event.ev",{"_index":6557,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.event.glob",{"_index":6102,"title":{},"name":{},"text":{"138":{}},"component":{}}],["axoniq.axonserver.event.storag",{"_index":313,"title":{},"name":{},"text":{"3":{},"184":{},"185":{}},"component":{}}],["axoniq.axonserver.event.storage=./ev",{"_index":399,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.event.storage]/[context",{"_index":6385,"title":{},"name":{},"text":{"146":{}},"component":{}}],["axoniq.axonserver.event.storages.slow_disk=/hhd2/eventstor",{"_index":6499,"title":{},"name":{},"text":{"151":{}},"component":{}}],["axoniq.axonserver.event.storages.{storag",{"_index":6494,"title":{},"name":{},"text":{"151":{}},"component":{}}],["axoniq.axonserver.events.storag",{"_index":6381,"title":{},"name":{},"text":{"146":{}},"component":{}}],["axoniq.axonserver.forc",{"_index":6119,"title":{},"name":{},"text":{"139":{}},"component":{}}],["axoniq.axonserver.heartbeat.enabled=tru",{"_index":7150,"title":{},"name":{},"text":{"180":{}},"component":{}}],["axoniq.axonserver.hostnam",{"_index":7187,"title":{},"name":{},"text":{"185":{}},"component":{}}],["axoniq.axonserver.legaci",{"_index":7137,"title":{},"name":{},"text":{"177":{}},"component":{}}],["axoniq.axonserver.metrics.grpc.en",{"_index":7141,"title":{},"name":{},"text":{"179":{}},"component":{}}],["axoniq.axonserver.metrics.grpc.jaeg",{"_index":7142,"title":{},"name":{},"text":{"179":{}},"component":{}}],["axoniq.axonserver.metrics.grpc.prometheu",{"_index":7143,"title":{},"name":{},"text":{"179":{}},"component":{}}],["axoniq.axonserver.metrics.grpc.z",{"_index":7144,"title":{},"name":{},"text":{"179":{}},"component":{}}],["axoniq.axonserver.nam",{"_index":7186,"title":{},"name":{},"text":{"185":{}},"component":{}}],["axoniq.axonserver.pid",{"_index":406,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.plugin",{"_index":319,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.preview.persist",{"_index":6040,"title":{},"name":{},"text":{"137":{}},"component":{}}],["axoniq.axonserver.queryflowcontrol.initi",{"_index":6562,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.queryflowcontrol.new",{"_index":6564,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.queryflowcontrol.nr",{"_index":6563,"title":{},"name":{},"text":{"156":{}},"component":{}}],["axoniq.axonserver.recoveryfil",{"_index":6454,"title":{},"name":{},"text":{"148":{}},"component":{}}],["axoniq.axonserver.replication.log",{"_index":401,"title":{},"name":{},"text":{"3":{},"184":{},"185":{}},"component":{}}],["axoniq.axonserver.replication.min",{"_index":6122,"title":{},"name":{},"text":{"139":{}},"component":{}}],["axoniq.axonserver.serv",{"_index":6535,"title":{},"name":{},"text":{"154":{}},"component":{}}],["axoniq.axonserver.snapshot.storag",{"_index":315,"title":{},"name":{},"text":{"3":{},"146":{},"184":{},"185":{}},"component":{}}],["axoniq.axonserver.snapshot.storage=./ev",{"_index":400,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.snapshot.storage]/[context",{"_index":6398,"title":{},"name":{},"text":{"146":{}},"component":{}}],["axoniq.axonserver.snapshot.storages.slow_disk=/hhd2/eventstor",{"_index":6500,"title":{},"name":{},"text":{"151":{}},"component":{}}],["axoniq.axonserver.snapshot.storages.{storag",{"_index":6496,"title":{},"name":{},"text":{"151":{}},"component":{}}],["axoniq.axonserver.ssl.cert",{"_index":6814,"title":{},"name":{},"text":{"169":{}},"component":{}}],["axoniq.axonserver.ssl.en",{"_index":6813,"title":{},"name":{},"text":{"169":{}},"component":{}}],["axoniq.axonserver.ssl.intern",{"_index":6816,"title":{},"name":{},"text":{"169":{}},"component":{}}],["axoniq.axonserver.ssl.priv",{"_index":6815,"title":{},"name":{},"text":{"169":{}},"component":{}}],["axoniq.axonserver.standalon",{"_index":424,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq.axonserver.standalone=tru",{"_index":428,"title":{},"name":{},"text":{"3":{},"138":{},"184":{},"185":{}},"component":{}}],["axoniq.axonserver.tags.computeregion=europ",{"_index":6479,"title":{},"name":{},"text":{"150":{}},"component":{}}],["axoniq.axonserver.tags.networkspeed=fast",{"_index":6480,"title":{},"name":{},"text":{"150":{}},"component":{}}],["axoniq.axonserver.transformation.storag",{"_index":6322,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axoniq.console.appl",{"_index":7757,"title":{},"name":{},"text":{"273":{}},"component":{}}],["axoniq.console.credenti",{"_index":7754,"title":{},"name":{},"text":{"273":{}},"component":{}}],["axoniq.console.dlq",{"_index":7759,"title":{},"name":{},"text":{"273":{}},"component":{}}],["axoniq.datasource.eventstore.password",{"_index":6538,"title":{},"name":{},"text":{"154":{}},"component":{}}],["axoniq.datasource.eventstore.url",{"_index":6536,"title":{},"name":{},"text":{"154":{}},"component":{}}],["axoniq.datasource.eventstore.usernam",{"_index":6537,"title":{},"name":{},"text":{"154":{}},"component":{}}],["axoniq.licens",{"_index":500,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq/axonserv",{"_index":721,"title":{},"name":{},"text":{"4":{},"137":{}},"component":{}}],["axoniq/axonserver:2023.1",{"_index":255,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq/axonserver:2023.1.0",{"_index":6058,"title":{},"name":{},"text":{"137":{}},"component":{}}],["axoniq/axonserver:latest",{"_index":299,"title":{},"name":{},"text":{"3":{},"184":{},"281":{}},"component":{}}],["axoniq/synaps",{"_index":7509,"title":{},"name":{},"text":{"212":{}},"component":{}}],["axoniq_axonserver_standalon",{"_index":8013,"title":{},"name":{},"text":{"281":{}},"component":{}}],["axoniq_axonserver_standalone=tru",{"_index":8011,"title":{},"name":{},"text":{"281":{}},"component":{}}],["axoniq_licens",{"_index":631,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniq_license=/axonserver/config/axoniq.licens",{"_index":460,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axoniqconsol",{"_index":7658,"title":{},"name":{},"text":{"261":{}},"component":{}}],["axoniq’",{"_index":7561,"title":{},"name":{},"text":{"227":{},"237":{}},"component":{}}],["axonquickstart.zip",{"_index":7266,"title":{},"name":{},"text":{"198":{}},"component":{}}],["axonserv",{"_index":247,"title":{"196-8":{},"203-25":{}},"name":{},"text":{"3":{},"4":{},"31":{},"35":{},"54":{},"61":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"154":{},"157":{},"161":{},"162":{},"167":{},"170":{},"171":{},"172":{},"174":{},"176":{},"181":{},"184":{},"185":{},"196":{},"203":{},"217":{},"218":{},"223":{},"281":{}},"component":{}}],["axonserver.jar",{"_index":357,"title":{},"name":{},"text":{"3":{},"4":{},"184":{},"185":{}},"component":{}}],["axonserver.properti",{"_index":277,"title":{},"name":{},"text":{"3":{},"4":{},"141":{},"147":{},"161":{},"167":{},"169":{},"172":{},"176":{},"179":{},"184":{},"185":{}},"component":{}}],["axonserver.token",{"_index":501,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver.yml",{"_index":6833,"title":{},"name":{},"text":{"172":{}},"component":{}}],["axonserver/axonserv",{"_index":7267,"title":{},"name":{},"text":{"198":{}},"component":{}}],["axonserver/config",{"_index":211,"title":{"3-3":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/config/axoniq.licens",{"_index":457,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/config/axonserver.properti",{"_index":458,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/config/axonserver.token",{"_index":459,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/data",{"_index":212,"title":{"3-4":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/data/axonserver.log",{"_index":328,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/ev",{"_index":213,"title":{"3-5":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/ext",{"_index":215,"title":{"3-7":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/licens",{"_index":637,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/license/axoniq.licens",{"_index":581,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/log",{"_index":214,"title":{"3-6":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/plugin",{"_index":216,"title":{"3-8":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/plugins/bundl",{"_index":322,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/plugins/cach",{"_index":325,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/secur",{"_index":636,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver/security/token.txt",{"_index":585,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserver:axonserv",{"_index":383,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["axonserveractuatorautoconfigurationi",{"_index":4053,"title":{},"name":{},"text":{"61":{}},"component":{}}],["axonserverautoconfigur",{"_index":1567,"title":{},"name":{},"text":{"25":{}},"component":{}}],["axonservercommandbu",{"_index":1922,"title":{"31-25":{}},"name":{},"text":{"31":{},"52":{},"61":{},"117":{},"255":{}},"component":{}}],["axonservercommandbus(commandbu",{"_index":2128,"title":{},"name":{},"text":{"31":{}},"component":{}}],["axonservercommandbus.build",{"_index":2131,"title":{},"name":{},"text":{"31":{}},"component":{}}],["axonservercommandbus.dispatch(${commandnam",{"_index":2980,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonservercommandbus.handle(${commandnam",{"_index":2981,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonserverconfig",{"_index":4636,"title":{},"name":{},"text":{"70":{}},"component":{}}],["axonserverconfig.setdisableeventblacklisting(tru",{"_index":4637,"title":{},"name":{},"text":{"70":{}},"component":{}}],["axonserverconfigur",{"_index":3245,"title":{},"name":{},"text":{"60":{},"61":{},"70":{},"180":{}},"component":{}}],["axonserverconfiguration#isforcereadfromlead",{"_index":4277,"title":{},"name":{},"text":{"61":{}},"component":{}}],["axonserverconfiguration.builder().context(othercontext).build",{"_index":6405,"title":{},"name":{},"text":{"146":{}},"component":{}}],["axonserverconfiguration.heartbeatconfigur",{"_index":7153,"title":{},"name":{},"text":{"180":{}},"component":{}}],["axonserverconnect",{"_index":6326,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axonserverconnection#disconnect",{"_index":6331,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axonserverconnection#isconnect",{"_index":6332,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axonserverconnectionfactori",{"_index":6263,"title":{},"name":{},"text":{"143":{},"144":{}},"component":{}}],["axonserverconnectionfactory#connect(context",{"_index":6330,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axonserverconnectionfactory#forcli",{"_index":6325,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axonserverconnectionfactory.forclient(\"ev",{"_index":6327,"title":{},"name":{},"text":{"144":{}},"component":{}}],["axonserverconnectionfactory.forclient(componentname).build",{"_index":6265,"title":{},"name":{},"text":{"143":{}},"component":{}}],["axonserverconnectionmanag",{"_index":2259,"title":{},"name":{},"text":{"33":{},"47":{},"60":{},"61":{},"146":{}},"component":{}}],["axonservercontain",{"_index":3316,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["axonservereecontain",{"_index":3459,"title":{},"name":{},"text":{"60":{}},"component":{}}],["axonservereventschedul",{"_index":2228,"title":{},"name":{},"text":{"33":{},"60":{},"117":{}},"component":{}}],["axonservereventstor",{"_index":2269,"title":{},"name":{},"text":{"35":{},"61":{},"117":{}},"component":{}}],["axonservereventstore#createstreamablemessagesourceforcontext(str",{"_index":2392,"title":{},"name":{},"text":{"35":{}},"component":{}}],["axonservereventstorefactori",{"_index":3247,"title":{},"name":{},"text":{"60":{}},"component":{}}],["axonserverhealthind",{"_index":3451,"title":{},"name":{},"text":{"60":{}},"component":{}}],["axonserverquerybu",{"_index":3038,"title":{"54-3":{}},"name":{},"text":{"54":{},"61":{},"117":{},"255":{}},"component":{}}],["axonserverquerybus.query(${querynam",{"_index":3009,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonserverquerybus.responseprocessingtask(${querynam",{"_index":3012,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonserverquerybus.scattergather(${querynam",{"_index":3016,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonserverquerybus.streamingquery(${querynam",{"_index":3014,"title":{},"name":{},"text":{"52":{}},"component":{}}],["axonserversecontain",{"_index":3460,"title":{},"name":{},"text":{"60":{}},"component":{}}],["axonstartedev",{"_index":1585,"title":{},"name":{},"text":{"25":{}},"component":{}}],["axonsynaps",{"_index":7495,"title":{},"name":{},"text":{"212":{}},"component":{}}],["axonsynapse.properti",{"_index":7453,"title":{},"name":{},"text":{"205":{}},"component":{}}],["axonthreadfactory(\"coordin",{"_index":5158,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axonthreadfactory(\"work",{"_index":5161,"title":{},"name":{},"text":{"80":{}},"component":{}}],["axonus",{"_index":2655,"title":{},"name":{},"text":{"44":{}},"component":{}}],["axonuser\".equals(userid",{"_index":2663,"title":{},"name":{},"text":{"44":{}},"component":{}}],["axon’",{"_index":1355,"title":{"275-1":{}},"name":{},"text":{"24":{},"25":{},"27":{},"35":{},"38":{},"44":{},"52":{},"60":{},"61":{},"66":{},"70":{},"71":{},"79":{},"81":{},"104":{},"105":{},"107":{},"109":{},"110":{},"111":{},"112":{},"146":{}},"component":{}}],["azzazzel",{"_index":3356,"title":{},"name":{},"text":{"60":{}},"component":{}}],["b",{"_index":1144,"title":{},"name":{},"text":{"13":{},"28":{},"139":{},"277":{},"280":{}},"component":{}}],["b281",{"_index":7525,"title":{},"name":{},"text":{"214":{}},"component":{}}],["b328",{"_index":7311,"title":{},"name":{},"text":{"199":{}},"component":{}}],["b5d8",{"_index":7918,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["b887",{"_index":7946,"title":{},"name":{},"text":{"277":{}},"component":{}}],["back",{"_index":159,"title":{"56-6":{}},"name":{},"text":{"2":{},"26":{},"31":{},"35":{},"44":{},"46":{},"56":{},"60":{},"61":{},"63":{},"65":{},"71":{},"78":{},"79":{},"80":{},"81":{},"97":{},"106":{},"138":{},"140":{},"142":{},"144":{},"149":{},"200":{},"203":{},"216":{},"277":{},"278":{},"281":{}},"component":{}}],["backbon",{"_index":7231,"title":{},"name":{},"text":{"196":{}},"component":{}}],["backend",{"_index":677,"title":{},"name":{},"text":{"3":{},"184":{},"203":{},"217":{},"223":{}},"component":{}}],["background",{"_index":1542,"title":{},"name":{},"text":{"25":{},"27":{},"138":{},"144":{}},"component":{}}],["backofficeaccount",{"_index":1906,"title":{},"name":{},"text":{"29":{}},"component":{}}],["backpressur",{"_index":3140,"title":{},"name":{},"text":{"56":{},"122":{},"156":{},"172":{}},"component":{}}],["backup",{"_index":6068,"title":{"139":{},"140":{},"139-1":{},"139-2":{},"139-3":{},"142-6":{}},"name":{"139":{},"140":{}},"text":{"137":{},"139":{},"140":{},"142":{},"145":{},"149":{},"151":{},"172":{}},"component":{}}],["backup_nod",{"_index":6141,"title":{},"name":{},"text":{"140":{}},"component":{}}],["backward",{"_index":1530,"title":{},"name":{},"text":{"25":{},"38":{},"129":{}},"component":{}}],["bad",{"_index":4565,"title":{},"name":{},"text":{"66":{},"140":{},"212":{},"218":{}},"component":{}}],["badg",{"_index":7632,"title":{},"name":{},"text":{"256":{}},"component":{}}],["balanc",{"_index":3290,"title":{"254-6":{}},"name":{},"text":{"60":{},"61":{},"80":{},"114":{},"151":{},"172":{},"173":{},"180":{},"199":{},"200":{},"203":{},"212":{},"217":{},"218":{},"243":{},"245":{},"254":{},"270":{}},"component":{}}],["balancing=tru",{"_index":5187,"title":{},"name":{},"text":{"80":{}},"component":{}}],["banner",{"_index":7614,"title":{},"name":{},"text":{"245":{}},"component":{}}],["barbequ",{"_index":3668,"title":{},"name":{},"text":{"60":{}},"component":{}}],["base",{"_index":59,"title":{"274":{},"71-9":{},"150-1":{},"151-10":{},"151-11":{},"266-2":{}},"name":{"274":{}},"text":{"1":{},"2":{},"3":{},"5":{},"14":{},"17":{},"19":{},"22":{},"23":{},"24":{},"25":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"40":{},"42":{},"43":{},"44":{},"49":{},"52":{},"56":{},"57":{},"60":{},"61":{},"63":{},"66":{},"68":{},"71":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"84":{},"91":{},"92":{},"93":{},"94":{},"103":{},"105":{},"107":{},"112":{},"114":{},"117":{},"122":{},"129":{},"137":{},"139":{},"141":{},"143":{},"150":{},"151":{},"153":{},"155":{},"156":{},"162":{},"163":{},"166":{},"168":{},"170":{},"172":{},"183":{},"184":{},"185":{},"191":{},"199":{},"212":{},"213":{},"234":{},"238":{},"241":{},"242":{},"243":{},"245":{},"254":{},"255":{},"256":{},"260":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"277":{},"278":{},"281":{}},"component":{}}],["bash",{"_index":6825,"title":{},"name":{},"text":{"171":{}},"component":{}}],["basi",{"_index":3700,"title":{},"name":{},"text":{"60":{},"80":{},"101":{}},"component":{}}],["basic",{"_index":697,"title":{"14":{},"15-2":{},"21-2":{},"75-1":{},"190-1":{},"196-5":{}},"name":{"14":{}},"text":{"3":{},"7":{},"15":{},"19":{},"21":{},"23":{},"29":{},"38":{},"61":{},"71":{},"75":{},"86":{},"141":{},"143":{},"144":{},"147":{},"159":{},"162":{},"166":{},"170":{},"176":{},"181":{},"184":{},"185":{},"190":{},"196":{},"198":{},"234":{},"244":{},"245":{},"270":{},"277":{}},"component":{}}],["batch",{"_index":2312,"title":{},"name":{},"text":{"35":{},"61":{},"72":{},"80":{},"81":{},"156":{},"172":{},"209":{},"212":{},"255":{},"270":{}},"component":{}}],["batchsiz",{"_index":7478,"title":{},"name":{},"text":{"209":{}},"component":{}}],["batchsize/2",{"_index":3596,"title":{},"name":{},"text":{"60":{}},"component":{}}],["bd31",{"_index":7925,"title":{},"name":{},"text":{"277":{}},"component":{}}],["be",{"_index":761,"title":{"5-14":{}},"name":{},"text":{"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"42":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"60":{},"61":{},"66":{},"71":{},"75":{},"76":{},"78":{},"80":{},"106":{},"137":{},"139":{},"140":{},"144":{},"147":{},"149":{},"151":{},"172":{},"176":{},"185":{},"240":{},"251":{},"254":{},"255":{},"271":{},"280":{}},"component":{}}],["bean",{"_index":1417,"title":{"38-9":{},"52-13":{},"52-14":{}},"name":{},"text":{"24":{},"25":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"43":{},"44":{},"45":{},"50":{},"52":{},"53":{},"54":{},"60":{},"61":{},"63":{},"65":{},"69":{},"70":{},"71":{},"79":{},"80":{},"81":{},"85":{},"89":{},"93":{},"100":{},"113":{},"115":{},"117":{},"127":{},"146":{}},"component":{}}],["beandefinit",{"_index":3938,"title":{},"name":{},"text":{"61":{}},"component":{}}],["beanvalidationinterceptor",{"_index":2646,"title":{},"name":{},"text":{"44":{}},"component":{}}],["bearer",{"_index":7339,"title":{},"name":{},"text":{"201":{}},"component":{}}],["becom",{"_index":345,"title":{},"name":{},"text":{"3":{},"24":{},"25":{},"28":{},"31":{},"32":{},"33":{},"34":{},"35":{},"41":{},"51":{},"52":{},"60":{},"61":{},"63":{},"79":{},"80":{},"81":{},"94":{},"96":{},"97":{},"137":{},"139":{},"141":{},"151":{},"171":{},"176":{},"184":{},"185":{},"241":{},"256":{},"278":{}},"component":{}}],["befor",{"_index":591,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"8":{},"9":{},"25":{},"27":{},"31":{},"35":{},"44":{},"46":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"71":{},"75":{},"79":{},"80":{},"83":{},"91":{},"97":{},"101":{},"106":{},"123":{},"129":{},"137":{},"138":{},"140":{},"142":{},"143":{},"144":{},"147":{},"148":{},"151":{},"161":{},"166":{},"172":{},"173":{},"184":{},"185":{},"196":{},"198":{},"199":{},"200":{},"203":{},"223":{},"229":{},"241":{},"244":{},"254":{},"256":{},"260":{},"263":{},"274":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["beforeeach",{"_index":5335,"title":{},"name":{},"text":{"87":{},"282":{}},"component":{}}],["beforehand",{"_index":7236,"title":{},"name":{},"text":{"196":{}},"component":{}}],["begin",{"_index":348,"title":{},"name":{},"text":{"3":{},"23":{},"61":{},"80":{},"141":{},"169":{},"184":{},"230":{},"265":{},"276":{}},"component":{}}],["beginn",{"_index":932,"title":{},"name":{},"text":{"7":{}},"component":{}}],["behalf",{"_index":7518,"title":{},"name":{},"text":{"213":{},"214":{},"216":{}},"component":{}}],["behav",{"_index":2909,"title":{},"name":{},"text":{"52":{},"61":{},"144":{},"156":{},"261":{},"267":{},"270":{},"271":{},"274":{}},"component":{}}],["behavior",{"_index":1796,"title":{"60-7":{}},"name":{},"text":{"28":{},"31":{},"35":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"79":{},"80":{},"88":{},"90":{},"94":{},"117":{},"156":{},"165":{},"199":{},"238":{},"241":{},"243":{},"263":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"273":{},"274":{},"282":{}},"component":{}}],["behaviour",{"_index":1859,"title":{"143-6":{}},"name":{},"text":{"29":{},"41":{},"61":{},"63":{},"77":{},"79":{},"87":{},"106":{},"235":{},"261":{}},"component":{}}],["behind",{"_index":1181,"title":{},"name":{},"text":{"15":{},"21":{},"50":{},"60":{},"73":{},"138":{},"176":{}},"component":{}}],["believ",{"_index":6302,"title":{},"name":{},"text":{"144":{}},"component":{}}],["belong",{"_index":389,"title":{},"name":{},"text":{"3":{},"35":{},"38":{},"61":{},"77":{},"79":{},"80":{},"117":{},"131":{},"140":{},"184":{}},"component":{}}],["below",{"_index":332,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"22":{},"23":{},"25":{},"26":{},"30":{},"31":{},"34":{},"35":{},"39":{},"44":{},"48":{},"54":{},"55":{},"56":{},"57":{},"60":{},"64":{},"66":{},"67":{},"68":{},"71":{},"72":{},"79":{},"88":{},"134":{},"135":{},"141":{},"146":{},"149":{},"152":{},"156":{},"157":{},"162":{},"168":{},"170":{},"171":{},"172":{},"174":{},"175":{},"176":{},"184":{},"185":{},"198":{},"199":{},"200":{},"203":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"225":{},"229":{},"234":{},"235":{},"242":{},"243":{},"245":{},"251":{},"254":{},"255":{},"256":{},"270":{},"273":{},"274":{},"277":{},"280":{}},"component":{}}],["benefici",{"_index":4409,"title":{},"name":{},"text":{"63":{},"65":{},"74":{},"79":{},"80":{},"81":{},"114":{},"125":{}},"component":{}}],["benefit",{"_index":1376,"title":{},"name":{},"text":{"24":{},"25":{},"38":{},"58":{},"61":{},"63":{},"65":{},"66":{},"77":{},"80":{},"104":{},"121":{},"155":{},"260":{},"261":{},"262":{},"270":{},"272":{},"274":{},"278":{},"280":{}},"component":{}}],["besid",{"_index":1268,"title":{},"name":{},"text":{"23":{},"32":{},"35":{},"40":{},"51":{},"66":{},"99":{},"101":{},"104":{},"105":{},"124":{},"128":{},"146":{}},"component":{}}],["best",{"_index":551,"title":{},"name":{},"text":{"3":{},"8":{},"16":{},"24":{},"27":{},"29":{},"31":{},"45":{},"46":{},"52":{},"60":{},"66":{},"71":{},"84":{},"89":{},"94":{},"97":{},"114":{},"139":{},"151":{},"184":{},"197":{},"229":{},"231":{},"265":{}},"component":{}}],["beta",{"_index":4288,"title":{},"name":{},"text":{"61":{}},"component":{}}],["better",{"_index":938,"title":{},"name":{},"text":{"7":{},"24":{},"31":{},"33":{},"60":{},"61":{},"66":{},"71":{},"86":{},"137":{},"144":{},"261":{},"270":{}},"component":{}}],["between",{"_index":118,"title":{"129":{},"80-58":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"23":{},"24":{},"29":{},"31":{},"33":{},"35":{},"38":{},"40":{},"42":{},"44":{},"50":{},"51":{},"52":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"79":{},"80":{},"84":{},"100":{},"101":{},"106":{},"108":{},"114":{},"130":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"149":{},"150":{},"151":{},"156":{},"162":{},"168":{},"169":{},"172":{},"176":{},"184":{},"185":{},"190":{},"192":{},"196":{},"197":{},"199":{},"203":{},"207":{},"213":{},"218":{},"223":{},"240":{},"255":{},"270":{},"276":{}},"component":{}}],["bewar",{"_index":4673,"title":{},"name":{},"text":{"71":{}},"component":{}}],["beyond",{"_index":1810,"title":{},"name":{},"text":{"28":{},"35":{},"52":{},"101":{},"140":{},"180":{},"241":{}},"component":{}}],["bi",{"_index":4302,"title":{},"name":{},"text":{"61":{}},"component":{}}],["bia",{"_index":3764,"title":{},"name":{},"text":{"60":{}},"component":{}}],["biconsum",{"_index":6334,"title":{},"name":{},"text":{"144":{}},"component":{}}],["bifunct",{"_index":2634,"title":{},"name":{},"text":{"44":{},"106":{},"122":{}},"component":{}}],["big",{"_index":520,"title":{},"name":{},"text":{"3":{},"71":{},"121":{},"184":{},"278":{}},"component":{}}],["bigger",{"_index":2094,"title":{},"name":{},"text":{"31":{},"236":{}},"component":{}}],["biggest",{"_index":2254,"title":{},"name":{},"text":{"33":{}},"component":{}}],["bike",{"_index":1190,"title":{"274":{},"278":{},"280":{},"277-7":{},"278-2":{},"278-5":{},"278-10":{},"280-4":{}},"name":{"272":{},"277":{},"278":{},"280":{}},"text":{"15":{},"21":{},"234":{},"235":{},"238":{},"260":{},"261":{},"263":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["bike(registerbikecommand",{"_index":7971,"title":{},"name":{},"text":{"278":{}},"component":{}}],["bikeid",{"_index":7844,"title":{},"name":{},"text":{"277":{},"278":{},"282":{}},"component":{}}],["bikeregisteredev",{"_index":7836,"title":{"277-4":{},"278-7":{}},"name":{},"text":{"277":{},"278":{},"280":{},"282":{}},"component":{}}],["bikeregisteredevent(\"bikeid",{"_index":8045,"title":{},"name":{},"text":{"282":{}},"component":{}}],["bikeregisteredevent(command.bikeid",{"_index":7974,"title":{},"name":{},"text":{"278":{}},"component":{}}],["bikerent",{"_index":7650,"title":{},"name":{},"text":{},"component":{"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}}}],["bikerentaldatagener",{"_index":7983,"title":{},"name":{},"text":{"278":{}},"component":{}}],["bikerequestedev",{"_index":7713,"title":{},"name":{},"text":{"270":{}},"component":{}}],["bikes/{bikeid",{"_index":7911,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikes?biketype={biketype}&location={c",{"_index":7988,"title":{},"name":{},"text":{"278":{}},"component":{}}],["bikestatu",{"_index":7834,"title":{"277-1":{},"277-2":{},"277-3":{}},"name":{},"text":{"277":{}},"component":{}}],["bikestatus(event.bikeid",{"_index":7864,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatus.class",{"_index":7910,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusnamedqueri",{"_index":7871,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusnamedqueries.find_al",{"_index":7876,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusnamedqueries.find_avail",{"_index":7880,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusnamedqueries.find_on",{"_index":7884,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusproject",{"_index":7856,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusprojection(bikestatusrepostori",{"_index":7860,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusrepositori",{"_index":7859,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusrepository.findal",{"_index":7877,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusrepository.findallbybiketypeandstatus(biketyp",{"_index":7882,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusrepository.findbyid(bikeid).orelse(nul",{"_index":7886,"title":{},"name":{},"text":{"277":{}},"component":{}}],["bikestatusrepository.save(bikestatu",{"_index":7867,"title":{},"name":{},"text":{"277":{}},"component":{}}],["biketest",{"_index":8036,"title":{"282-2":{}},"name":{},"text":{"282":{}},"component":{}}],["biketyp",{"_index":7845,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["bill",{"_index":812,"title":{"245":{},"23-38":{},"275-1":{}},"name":{"245":{}},"text":{"5":{},"23":{},"245":{},"275":{}},"component":{}}],["bin.zip",{"_index":6619,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["binari",{"_index":1235,"title":{"185-1":{}},"name":{},"text":{"23":{},"33":{},"124":{}},"component":{}}],["bind",{"_index":483,"title":{},"name":{},"text":{"3":{},"35":{},"46":{},"61":{},"98":{},"102":{},"163":{},"184":{},"198":{}},"component":{}}],["bird’",{"_index":7670,"title":{},"name":{},"text":{"263":{}},"component":{}}],["bit",{"_index":3717,"title":{},"name":{},"text":{"60":{},"117":{},"143":{},"234":{},"261":{},"271":{},"273":{},"277":{}},"component":{}}],["black",{"_index":6485,"title":{"151-5":{}},"name":{},"text":{"151":{}},"component":{}}],["blackdread",{"_index":3358,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["blacklist",{"_index":4621,"title":{"70-3":{}},"name":{},"text":{"70":{},"172":{},"254":{}},"component":{}}],["block",{"_index":41,"title":{},"name":{},"text":{"1":{},"5":{},"13":{},"23":{},"29":{},"31":{},"44":{},"46":{},"60":{},"61":{},"66":{},"80":{},"121":{},"129":{},"208":{},"277":{}},"component":{}}],["blockedpayload",{"_index":5908,"title":{},"name":{},"text":{"122":{}},"component":{}}],["blocker",{"_index":5268,"title":{},"name":{},"text":{"81":{}},"component":{}}],["blockingwaitstrategi",{"_index":2057,"title":{},"name":{},"text":{"31":{}},"component":{}}],["blog",{"_index":531,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["blogpost",{"_index":7651,"title":{},"name":{"261":{}},"text":{},"component":{}}],["bloom",{"_index":6394,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["bloom_filter_index",{"_index":6392,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["blue",{"_index":798,"title":{},"name":{},"text":{"5":{},"229":{},"270":{}},"component":{}}],["bodi",{"_index":7292,"title":{},"name":{},"text":{"199":{},"208":{},"209":{},"211":{},"212":{},"214":{},"278":{},"280":{}},"component":{}}],["bom",{"_index":1237,"title":{"275-1":{}},"name":{},"text":{"23":{},"31":{},"60":{},"61":{},"275":{}},"component":{}}],["book",{"_index":922,"title":{},"name":{},"text":{"7":{},"146":{},"192":{}},"component":{}}],["book[*].titl",{"_index":7217,"title":{},"name":{},"text":{"192":{}},"component":{}}],["boolean",{"_index":2502,"title":{},"name":{},"text":{"38":{},"51":{},"62":{},"66":{},"77":{},"79":{},"85":{},"93":{},"122":{},"143":{},"278":{}},"component":{}}],["boot",{"_index":778,"title":{"25":{},"23-9":{},"23-17":{},"23-20":{},"23-22":{},"23-24":{},"23-28":{},"23-30":{},"23-32":{},"23-35":{},"23-37":{},"24-3":{},"24-4":{},"24-5":{},"25-3":{},"25-4":{},"25-5":{},"29-3":{},"29-6":{},"29-9":{},"31-10":{},"31-13":{},"31-16":{},"31-24":{},"31-27":{},"31-30":{},"35-5":{},"35-9":{},"35-12":{},"35-15":{},"35-19":{},"35-24":{},"37-3":{},"38-8":{},"38-9":{},"47-1":{},"50-3":{},"50-7":{},"50-8":{},"52-3":{},"52-7":{},"52-13":{},"52-14":{},"52-19":{},"52-24":{},"53-3":{},"54-5":{},"54-8":{},"63-13":{},"63-15":{},"65-3":{},"69-3":{},"70-5":{},"71-4":{},"71-8":{},"71-12":{},"79-7":{},"79-10":{},"79-15":{},"79-18":{},"79-26":{},"80-4":{},"80-6":{},"80-7":{},"80-9":{},"80-12":{},"80-14":{},"80-15":{},"80-17":{},"80-24":{},"80-26":{},"80-29":{},"80-31":{},"80-37":{},"80-41":{},"80-43":{},"80-44":{},"80-47":{},"80-48":{},"80-52":{},"80-53":{},"80-56":{},"80-57":{},"80-68":{},"80-70":{},"80-71":{},"81-3":{},"81-5":{},"81-6":{},"81-11":{},"81-12":{}},"name":{"25":{}},"text":{"5":{},"13":{},"22":{},"23":{},"25":{},"26":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"43":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"60":{},"61":{},"62":{},"63":{},"65":{},"79":{},"80":{},"101":{},"102":{},"108":{},"116":{},"122":{},"124":{},"127":{},"128":{},"131":{},"146":{},"150":{},"165":{},"169":{},"176":{},"180":{},"212":{},"234":{},"273":{},"275":{},"276":{},"281":{},"282":{}},"component":{}}],["bootstrap",{"_index":5639,"title":{"275":{}},"name":{"275":{}},"text":{"108":{},"275":{},"276":{}},"component":{}}],["bootstrapserv",{"_index":5634,"title":{},"name":{},"text":{"108":{}},"component":{}}],["both",{"_index":122,"title":{},"name":{},"text":{"2":{},"3":{},"8":{},"9":{},"24":{},"26":{},"28":{},"29":{},"31":{},"33":{},"35":{},"36":{},"38":{},"41":{},"43":{},"44":{},"45":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"71":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"84":{},"101":{},"103":{},"104":{},"106":{},"125":{},"126":{},"128":{},"137":{},"140":{},"143":{},"144":{},"150":{},"151":{},"156":{},"163":{},"167":{},"169":{},"172":{},"184":{},"198":{},"208":{},"209":{},"211":{},"221":{},"231":{},"232":{},"254":{},"273":{},"277":{},"278":{},"281":{}},"component":{}}],["bother",{"_index":1236,"title":{},"name":{},"text":{"23":{}},"component":{}}],["bottleneck",{"_index":7593,"title":{},"name":{},"text":{"240":{},"260":{},"261":{},"262":{},"263":{},"271":{}},"component":{}}],["bottom",{"_index":7585,"title":{},"name":{},"text":{"236":{},"242":{},"243":{},"270":{},"277":{}},"component":{}}],["bound",{"_index":2235,"title":{},"name":{},"text":{"33":{},"35":{},"46":{},"57":{},"61":{},"102":{},"169":{},"185":{}},"component":{}}],["boundari",{"_index":1993,"title":{},"name":{},"text":{"31":{},"35":{},"75":{},"151":{}},"component":{}}],["box",{"_index":107,"title":{},"name":{},"text":{"2":{},"24":{},"29":{},"35":{},"46":{},"49":{},"52":{},"54":{},"57":{},"65":{},"71":{},"77":{},"80":{},"99":{},"108":{},"117":{},"119":{},"139":{},"270":{},"274":{}},"component":{}}],["breach",{"_index":6505,"title":{},"name":{},"text":{"151":{}},"component":{}}],["break",{"_index":1361,"title":{"60-7":{}},"name":{},"text":{"24":{},"26":{},"60":{},"61":{},"79":{},"104":{},"212":{},"282":{}},"component":{}}],["breakdown",{"_index":7624,"title":{},"name":{},"text":{"255":{}},"component":{}}],["breviti",{"_index":2710,"title":{},"name":{},"text":{"44":{},"74":{},"85":{}},"component":{}}],["bridg",{"_index":1174,"title":{},"name":{},"text":{"14":{},"31":{},"100":{},"197":{},"207":{}},"component":{}}],["briefli",{"_index":7765,"title":{},"name":{},"text":{"273":{}},"component":{}}],["bring",{"_index":1127,"title":{},"name":{},"text":{"10":{},"61":{},"75":{},"107":{},"137":{},"236":{},"278":{},"280":{}},"component":{}}],["broadcast",{"_index":6074,"title":{},"name":{},"text":{"137":{}},"component":{}}],["broader",{"_index":6050,"title":{},"name":{},"text":{"137":{}},"component":{}}],["broken",{"_index":3221,"title":{},"name":{},"text":{"60":{},"268":{}},"component":{}}],["broker",{"_index":1290,"title":{},"name":{},"text":{"23":{},"35":{},"99":{},"274":{},"277":{},"281":{}},"component":{}}],["brought",{"_index":4167,"title":{},"name":{},"text":{"61":{}},"component":{}}],["brows",{"_index":7317,"title":{},"name":{},"text":{"200":{}},"component":{}}],["browser",{"_index":1078,"title":{},"name":{},"text":{"8":{},"165":{},"196":{},"198":{},"205":{},"267":{},"271":{},"280":{},"281":{}},"component":{}}],["bu",{"_index":1526,"title":{"35":{},"31-7":{},"31-17":{},"35-1":{},"54-2":{},"56-1":{}},"name":{"35":{}},"text":{"25":{},"27":{},"29":{},"31":{},"35":{},"36":{},"39":{},"42":{},"44":{},"52":{},"54":{},"56":{},"58":{},"66":{},"71":{},"80":{},"81":{},"100":{},"101":{},"107":{},"117":{},"122":{},"126":{},"128":{},"129":{},"256":{},"270":{},"271":{},"277":{}},"component":{}}],["bubbl",{"_index":4797,"title":{},"name":{},"text":{"77":{},"79":{},"81":{}},"component":{}}],["bucket",{"_index":6310,"title":{},"name":{},"text":{"144":{}},"component":{}}],["buffer",{"_index":2043,"title":{},"name":{},"text":{"31":{},"46":{},"56":{},"104":{},"122":{},"142":{},"156":{},"172":{}},"component":{}}],["buffercapac",{"_index":5554,"title":{},"name":{},"text":{"104":{}},"component":{}}],["bufferfactori",{"_index":5556,"title":{},"name":{},"text":{"104":{}},"component":{}}],["buffersize(4096",{"_index":2082,"title":{},"name":{},"text":{"31":{}},"component":{}}],["bug",{"_index":3196,"title":{"60-4":{},"60-10":{},"60-15":{},"60-20":{},"60-25":{},"60-29":{},"60-32":{},"60-35":{},"60-38":{},"60-41":{},"60-44":{},"61-4":{},"61-9":{},"61-12":{},"61-16":{},"61-22":{},"61-26":{},"61-30":{},"61-35":{},"61-38":{},"61-42":{},"61-46":{},"61-51":{},"61-54":{},"61-59":{},"61-62":{},"61-65":{},"61-68":{},"61-71":{},"61-75":{},"61-80":{},"61-84":{},"61-88":{},"61-90":{},"61-94":{},"61-96":{},"61-99":{},"137-3":{},"137-21":{},"138-19":{},"138-22":{},"138-25":{},"212-3":{},"212-7":{},"212-11":{},"212-15":{},"212-19":{}},"name":{},"text":{"60":{},"61":{},"137":{},"138":{},"144":{},"254":{}},"component":{}}],["build",{"_index":40,"title":{"8":{},"3-9":{},"8-5":{},"8-7":{},"8-10":{},"184-2":{}},"name":{"8":{}},"text":{"1":{},"3":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"14":{},"15":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"35":{},"44":{},"46":{},"52":{},"54":{},"56":{},"60":{},"63":{},"66":{},"79":{},"80":{},"85":{},"89":{},"101":{},"103":{},"104":{},"106":{},"107":{},"113":{},"115":{},"121":{},"123":{},"127":{},"143":{},"144":{},"184":{},"198":{},"207":{},"254":{},"264":{},"265":{},"266":{},"270":{},"271":{},"273":{},"276":{},"277":{},"278":{},"279":{},"282":{}},"component":{}}],["build(str",{"_index":4980,"title":{},"name":{},"text":{"79":{}},"component":{}}],["buildconfigur",{"_index":2827,"title":{},"name":{},"text":{"50":{}},"component":{}}],["buildcontext",{"_index":2481,"title":{},"name":{},"text":{"38":{}},"component":{}}],["builder",{"_index":1043,"title":{"79-28":{}},"name":{},"text":{"8":{},"9":{},"24":{},"31":{},"33":{},"35":{},"42":{},"52":{},"60":{},"61":{},"80":{},"85":{},"89":{},"103":{},"104":{},"106":{},"107":{},"146":{}},"component":{}}],["builder.coordinatorexecutor(coordinatorexecutorbuild",{"_index":5162,"title":{},"name":{},"text":{"80":{}},"component":{}}],["builder.initialsegmentcount(32",{"_index":5124,"title":{},"name":{},"text":{"80":{}},"component":{}}],["builder.initialtoken",{"_index":5075,"title":{},"name":{},"text":{"80":{}},"component":{}}],["builder.initialtoken(messagesourc",{"_index":5068,"title":{},"name":{},"text":{"80":{}},"component":{}}],["builder.tokenclaiminterval(2000",{"_index":5086,"title":{},"name":{},"text":{"80":{}},"component":{}}],["builder’",{"_index":1051,"title":{},"name":{},"text":{"8":{}},"component":{}}],["buildmultistreamablemessagesourc",{"_index":5250,"title":{},"name":{},"text":{"80":{}},"component":{}}],["buildscript",{"_index":1308,"title":{},"name":{},"text":{"23":{}},"component":{}}],["buildseri",{"_index":1481,"title":{},"name":{},"text":{"24":{}},"component":{}}],["built",{"_index":145,"title":{},"name":{},"text":{"2":{},"3":{},"45":{},"80":{},"105":{},"114":{},"143":{},"184":{},"224":{},"233":{},"234":{},"243":{},"247":{},"260":{},"261":{},"264":{},"266":{},"273":{}},"component":{}}],["bulk",{"_index":1907,"title":{},"name":{},"text":{"29":{}},"component":{}}],["bullet",{"_index":4758,"title":{},"name":{},"text":{"75":{},"77":{}},"component":{}}],["bunch",{"_index":2393,"title":{},"name":{},"text":{"35":{},"203":{}},"component":{}}],["bundl",{"_index":5408,"title":{},"name":{},"text":{"95":{},"147":{},"171":{}},"component":{}}],["bus/ev",{"_index":2276,"title":{},"name":{},"text":{"35":{}},"component":{}}],["bus/stor",{"_index":2275,"title":{},"name":{},"text":{"35":{}},"component":{}}],["buse",{"_index":1584,"title":{},"name":{},"text":{"25":{},"31":{},"60":{},"242":{},"270":{}},"component":{}}],["busi",{"_index":1441,"title":{"28-2":{}},"name":{},"text":{"24":{},"27":{},"28":{},"31":{},"42":{},"46":{},"51":{},"63":{},"64":{},"66":{},"71":{},"75":{},"77":{},"78":{},"79":{},"83":{},"137":{},"144":{},"151":{},"255":{},"270":{},"276":{},"277":{},"282":{}},"component":{}}],["buss",{"_index":4412,"title":{},"name":{},"text":{"63":{}},"component":{}}],["busybox",{"_index":364,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["busyspinwaitstrategi",{"_index":2053,"title":{},"name":{},"text":{"31":{}},"component":{}}],["button",{"_index":5200,"title":{},"name":{},"text":{"80":{},"141":{},"158":{},"170":{},"229":{},"232":{},"234":{},"236":{},"239":{},"241":{},"242":{},"243":{},"244":{},"245":{},"251":{},"254":{},"256":{},"267":{},"270":{},"271":{},"273":{},"274":{},"280":{},"281":{}},"component":{}}],["buy",{"_index":4375,"title":{},"name":{},"text":{"63":{}},"component":{}}],["buyorderid",{"_index":4376,"title":{},"name":{},"text":{"63":{}},"component":{}}],["bydefaultassignhandlerinstancesto(funct",{"_index":4852,"title":{},"name":{},"text":{"79":{}},"component":{}}],["bydefaultassignhandlertypesto(funct",{"_index":4853,"title":{},"name":{},"text":{"79":{}},"component":{}}],["bydefaultassignto(str",{"_index":4851,"title":{},"name":{},"text":{"79":{}},"component":{}}],["bypass",{"_index":6163,"title":{},"name":{},"text":{"141":{}},"component":{}}],["bystam",{"_index":3233,"title":{},"name":{},"text":{"60":{}},"component":{}}],["byte",{"_index":1459,"title":{},"name":{},"text":{"24":{},"106":{},"108":{},"277":{},"280":{}},"component":{}}],["bytearrayinputstream",{"_index":1458,"title":{},"name":{},"text":{"24":{}},"component":{}}],["bytearrayoutputstream",{"_index":1457,"title":{},"name":{},"text":{"24":{}},"component":{}}],["bytebuff",{"_index":6869,"title":{},"name":{},"text":{"172":{}},"component":{}}],["c",{"_index":102,"title":{},"name":{},"text":{"2":{},"13":{},"63":{},"65":{},"70":{},"139":{},"146":{},"147":{},"171":{},"197":{},"281":{}},"component":{}}],["c09d",{"_index":7923,"title":{},"name":{},"text":{"277":{}},"component":{}}],["c524b9ed553d",{"_index":7919,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["c61a95b",{"_index":4226,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ca",{"_index":6597,"title":{},"name":{},"text":{"161":{},"167":{}},"component":{}}],["cach",{"_index":323,"title":{"63-10":{},"65-8":{},"71-10":{}},"name":{},"text":{"3":{},"29":{},"31":{},"35":{},"60":{},"61":{},"63":{},"65":{},"71":{},"89":{},"101":{},"104":{},"147":{},"172":{},"184":{},"213":{}},"component":{}}],["cache#computeifpres",{"_index":4039,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cachedthreadpool",{"_index":2060,"title":{},"name":{},"text":{"31":{}},"component":{}}],["cachingeventsourcingrepositori",{"_index":1910,"title":{},"name":{},"text":{"29":{}},"component":{}}],["cachingsagastor",{"_index":4031,"title":{},"name":{},"text":{"61":{},"63":{},"65":{}},"component":{}}],["calcul",{"_index":2137,"title":{},"name":{},"text":{"31":{},"51":{},"60":{},"61":{},"80":{},"151":{},"194":{},"277":{}},"component":{}}],["california",{"_index":875,"title":{},"name":{},"text":{"5":{}},"component":{}}],["call",{"_index":184,"title":{"57-2":{}},"name":{},"text":{"2":{},"4":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"43":{},"44":{},"45":{},"46":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"70":{},"71":{},"73":{},"75":{},"78":{},"79":{},"80":{},"83":{},"85":{},"89":{},"92":{},"97":{},"101":{},"104":{},"108":{},"112":{},"114":{},"117":{},"122":{},"138":{},"140":{},"143":{},"144":{},"146":{},"148":{},"149":{},"151":{},"154":{},"158":{},"171":{},"180":{},"185":{},"196":{},"208":{},"218":{},"254":{},"270":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["callabl",{"_index":4729,"title":{},"name":{},"text":{"73":{},"75":{}},"component":{}}],["callback",{"_index":1700,"title":{},"name":{},"text":{"27":{},"31":{},"46":{},"60":{},"68":{}},"component":{}}],["callbackbehavior",{"_index":4597,"title":{},"name":{},"text":{"68":{}},"component":{}}],["callback’",{"_index":2067,"title":{},"name":{},"text":{"31":{}},"component":{}}],["caller",{"_index":1982,"title":{},"name":{},"text":{"31":{},"52":{},"122":{},"144":{},"171":{}},"component":{}}],["calll",{"_index":7901,"title":{},"name":{},"text":{"277":{}},"component":{}}],["camelcas",{"_index":6837,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cancel",{"_index":2156,"title":{"56-7":{}},"name":{},"text":{"32":{},"33":{},"34":{},"46":{},"52":{},"56":{},"61":{},"83":{},"103":{},"117":{},"122":{},"137":{},"144":{},"156":{},"245":{}},"component":{}}],["cancel_scheduled_ev",{"_index":6711,"title":{},"name":{},"text":{"164":{}},"component":{}}],["cancelal",{"_index":2170,"title":{},"name":{},"text":{"32":{},"60":{},"103":{}},"component":{}}],["cancelall(str",{"_index":2164,"title":{},"name":{},"text":{"32":{}},"component":{}}],["cancelallwithinscop",{"_index":3346,"title":{},"name":{},"text":{"60":{}},"component":{}}],["cancelallwithinscope(str",{"_index":2166,"title":{},"name":{},"text":{"32":{}},"component":{}}],["cancelmydeadline(str",{"_index":2162,"title":{},"name":{},"text":{"32":{}},"component":{}}],["candid",{"_index":4613,"title":{},"name":{},"text":{"69":{},"172":{}},"component":{}}],["canhandle(@nonnul",{"_index":5395,"title":{},"name":{},"text":{"93":{}},"component":{}}],["cannotconvertbetweentypesexcept",{"_index":4250,"title":{},"name":{},"text":{"61":{}},"component":{}}],["canregisterbik",{"_index":8041,"title":{},"name":{},"text":{"282":{}},"component":{}}],["canupcast",{"_index":1505,"title":{},"name":{},"text":{"24":{},"38":{}},"component":{}}],["canupcast(intermediateeventrepresent",{"_index":2503,"title":{},"name":{},"text":{"38":{}},"component":{}}],["can’t",{"_index":5812,"title":{},"name":{},"text":{"121":{},"124":{},"212":{},"278":{}},"component":{}}],["capabilitydiscoverymod",{"_index":5935,"title":{},"name":{},"text":{"126":{},"127":{}},"component":{}}],["capabilitydiscoverymode(capabilitydiscoverymod",{"_index":5962,"title":{},"name":{},"text":{"127":{}},"component":{}}],["capabilitydiscoverymode(resttempl",{"_index":5952,"title":{},"name":{},"text":{"127":{}},"component":{}}],["capabl",{"_index":111,"title":{},"name":{},"text":{"2":{},"22":{},"23":{},"27":{},"30":{},"31":{},"34":{},"35":{},"37":{},"39":{},"43":{},"44":{},"52":{},"55":{},"63":{},"64":{},"65":{},"67":{},"71":{},"72":{},"75":{},"77":{},"78":{},"80":{},"126":{},"127":{},"131":{},"134":{},"137":{},"139":{},"145":{},"146":{},"167":{},"181":{},"197":{},"225":{},"228":{},"235":{},"262":{},"270":{},"279":{}},"component":{}}],["capac",{"_index":2813,"title":{},"name":{},"text":{"50":{},"51":{},"104":{},"172":{},"243":{},"254":{},"255":{},"270":{},"271":{}},"component":{}}],["capacity/gaug",{"_index":2873,"title":{},"name":{},"text":{"50":{}},"component":{}}],["capacitymonitor",{"_index":2816,"title":{},"name":{},"text":{"50":{},"60":{}},"component":{}}],["capacitymonitor.buildmonitor",{"_index":2875,"title":{},"name":{},"text":{"50":{}},"component":{}}],["capacitymonitor1minut",{"_index":2874,"title":{},"name":{},"text":{"50":{}},"component":{}}],["captur",{"_index":2580,"title":{},"name":{},"text":{"42":{},"71":{},"199":{},"271":{}},"component":{}}],["card",{"_index":746,"title":{"5-6":{}},"name":{},"text":{"5":{},"7":{},"33":{},"56":{},"57":{},"74":{},"75":{},"77":{},"78":{},"83":{},"86":{},"199":{},"200":{},"213":{}},"component":{}}],["card_id",{"_index":5332,"title":{},"name":{},"text":{"87":{}},"component":{}}],["cardid",{"_index":1673,"title":{},"name":{},"text":{"27":{},"28":{},"200":{}},"component":{}}],["cardin",{"_index":6526,"title":{},"name":{},"text":{"151":{}},"component":{}}],["cardissuedev",{"_index":2733,"title":{},"name":{},"text":{"44":{},"110":{},"112":{}},"component":{}}],["cardissuedevent(\"cardid",{"_index":2420,"title":{},"name":{},"text":{"36":{},"66":{}},"component":{}}],["cardissuedevent(cmd.getcardid",{"_index":1163,"title":{},"name":{},"text":{"13":{},"28":{},"29":{},"36":{},"75":{}},"component":{}}],["cardissuedevent(v",{"_index":5694,"title":{},"name":{},"text":{"112":{}},"component":{}}],["cardissuedevent.class",{"_index":2734,"title":{},"name":{},"text":{"44":{}},"component":{}}],["cardissuedevent::class",{"_index":5666,"title":{},"name":{},"text":{"110":{}},"component":{}}],["cardredeemedevent(\"cardid",{"_index":4454,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cardredeemedevent(giftcardid",{"_index":5302,"title":{},"name":{},"text":{"83":{}},"component":{}}],["cardredeemedevent(id",{"_index":1784,"title":{},"name":{},"text":{"28":{},"77":{},"78":{}},"component":{}}],["cardredeemedevent.class",{"_index":2702,"title":{},"name":{},"text":{"44":{}},"component":{}}],["cardreimbursedevent(cmd.getcardid",{"_index":4796,"title":{},"name":{},"text":{"77":{}},"component":{}}],["cardreplaycontext",{"_index":5241,"title":{},"name":{},"text":{"80":{}},"component":{}}],["cardrepositori",{"_index":3132,"title":{},"name":{},"text":{"56":{}},"component":{}}],["cardrepository.findal",{"_index":3130,"title":{},"name":{},"text":{"56":{}},"component":{}}],["cardsummari",{"_index":3033,"title":{},"name":{},"text":{"53":{},"56":{},"57":{}},"component":{}}],["cardsummary.class",{"_index":3074,"title":{},"name":{},"text":{"56":{}},"component":{}}],["cardsummaryid",{"_index":3158,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cardsummaryproject",{"_index":2697,"title":{},"name":{},"text":{"44":{},"53":{},"56":{},"57":{},"80":{},"112":{}},"component":{}}],["cardsummarystorag",{"_index":3162,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cardsummarystorage.get(query.getcardsummaryid",{"_index":3163,"title":{},"name":{},"text":{"57":{}},"component":{}}],["care",{"_index":267,"title":{},"name":{},"text":{"3":{},"31":{},"42":{},"79":{},"144":{},"146":{},"184":{},"216":{}},"component":{}}],["careful",{"_index":6374,"title":{},"name":{},"text":{"144":{}},"component":{}}],["carefulli",{"_index":351,"title":{},"name":{},"text":{"3":{},"24":{},"139":{},"184":{}},"component":{}}],["carri",{"_index":1768,"title":{},"name":{},"text":{"28":{},"31":{},"38":{},"40":{},"42":{},"60":{},"61":{},"75":{}},"component":{}}],["cascad",{"_index":4823,"title":{},"name":{},"text":{"78":{}},"component":{}}],["cascadetype.al",{"_index":4824,"title":{},"name":{},"text":{"78":{}},"component":{}}],["case",{"_index":342,"title":{"83":{},"88":{},"151-7":{}},"name":{},"text":{"3":{},"8":{},"11":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"40":{},"42":{},"43":{},"44":{},"45":{},"46":{},"51":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"73":{},"74":{},"76":{},"77":{},"79":{},"80":{},"81":{},"83":{},"84":{},"86":{},"89":{},"93":{},"107":{},"112":{},"114":{},"117":{},"122":{},"124":{},"127":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"146":{},"148":{},"150":{},"151":{},"154":{},"156":{},"161":{},"165":{},"167":{},"169":{},"171":{},"172":{},"176":{},"183":{},"184":{},"185":{},"199":{},"200":{},"205":{},"208":{},"209":{},"211":{},"216":{},"221":{},"234":{},"235":{},"238":{},"254":{},"255":{},"263":{},"265":{},"270":{},"271":{},"273":{},"274":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["cast",{"_index":1964,"title":{},"name":{},"text":{"31":{},"38":{},"117":{}},"component":{}}],["caster",{"_index":6309,"title":{},"name":{},"text":{"144":{}},"component":{}}],["catch",{"_index":2707,"title":{},"name":{},"text":{"44":{},"46":{},"60":{},"61":{},"62":{},"79":{},"104":{},"138":{}},"component":{}}],["categori",{"_index":7598,"title":{},"name":{},"text":{"241":{},"262":{},"269":{},"270":{},"271":{}},"component":{}}],["cater",{"_index":7557,"title":{},"name":{},"text":{"224":{},"233":{}},"component":{}}],["caught",{"_index":2884,"title":{},"name":{},"text":{"51":{},"61":{},"79":{},"80":{},"172":{}},"component":{}}],["caughtup",{"_index":3978,"title":{},"name":{},"text":{"61":{}},"component":{}}],["caus",{"_index":1961,"title":{},"name":{},"text":{"31":{},"40":{},"42":{},"46":{},"49":{},"56":{},"60":{},"61":{},"71":{},"79":{},"80":{},"88":{},"90":{},"126":{},"138":{},"140":{},"143":{},"148":{},"161":{},"167":{},"212":{},"251":{},"254":{},"261":{},"263":{},"265":{},"266":{},"267":{},"270":{},"274":{}},"component":{}}],["causat",{"_index":2935,"title":{},"name":{},"text":{"52":{}},"component":{}}],["caution",{"_index":6501,"title":{},"name":{},"text":{"151":{},"171":{}},"component":{}}],["caveat",{"_index":2169,"title":{},"name":{},"text":{"32":{},"151":{}},"component":{}}],["cbor",{"_index":3252,"title":{},"name":{},"text":{"60":{}},"component":{}}],["ccpa",{"_index":878,"title":{},"name":{},"text":{"5":{}},"component":{}}],["cd",{"_index":1056,"title":{},"name":{},"text":{"8":{},"198":{},"205":{}},"component":{}}],["cdi",{"_index":1227,"title":{"23-18":{}},"name":{},"text":{"23":{}},"component":{}}],["center",{"_index":6117,"title":{},"name":{},"text":{"139":{},"243":{},"270":{}},"component":{}}],["central",{"_index":1238,"title":{},"name":{},"text":{"23":{},"122":{},"198":{},"270":{}},"component":{}}],["centric",{"_index":2812,"title":{},"name":{},"text":{"50":{}},"component":{}}],["cert",{"_index":6817,"title":{},"name":{},"text":{"169":{},"172":{}},"component":{}}],["certain",{"_index":954,"title":{},"name":{},"text":{"7":{},"25":{},"27":{},"29":{},"32":{},"34":{},"35":{},"36":{},"40":{},"42":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"73":{},"74":{},"80":{},"86":{},"107":{},"116":{},"117":{},"124":{},"130":{},"139":{},"144":{},"151":{},"256":{},"266":{},"267":{},"268":{},"270":{},"273":{},"277":{}},"component":{}}],["certainti",{"_index":2563,"title":{},"name":{},"text":{"41":{},"60":{},"71":{},"282":{}},"component":{}}],["certif",{"_index":506,"title":{"137-10":{}},"name":{},"text":{"3":{},"137":{},"138":{},"161":{},"167":{},"169":{},"171":{},"172":{},"184":{},"203":{}},"component":{}}],["cfd7304a",{"_index":6580,"title":{},"name":{},"text":{"159":{}},"component":{}}],["chain",{"_index":1498,"title":{"203-5":{}},"name":{},"text":{"24":{},"27":{},"35":{},"38":{},"43":{},"44":{},"45":{},"56":{},"61":{},"106":{},"131":{},"169":{},"172":{},"212":{}},"component":{}}],["chain’",{"_index":1512,"title":{},"name":{},"text":{"24":{}},"component":{}}],["challeng",{"_index":2554,"title":{},"name":{},"text":{"41":{},"262":{}},"component":{}}],["chanc",{"_index":1390,"title":{},"name":{},"text":{"24":{},"60":{},"70":{},"80":{},"127":{},"149":{},"241":{}},"component":{}}],["chang",{"_index":306,"title":{"28-2":{},"60-7":{},"137-4":{},"139-6":{},"245-3":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"24":{},"26":{},"28":{},"29":{},"31":{},"35":{},"38":{},"40":{},"42":{},"46":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"70":{},"71":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"86":{},"88":{},"90":{},"91":{},"94":{},"101":{},"106":{},"108":{},"111":{},"121":{},"123":{},"124":{},"126":{},"127":{},"137":{},"139":{},"140":{},"142":{},"144":{},"146":{},"148":{},"149":{},"151":{},"158":{},"161":{},"167":{},"171":{},"172":{},"173":{},"184":{},"185":{},"194":{},"203":{},"218":{},"223":{},"229":{},"236":{},"245":{},"254":{},"256":{},"258":{},"265":{},"266":{},"267":{},"270":{},"271":{},"277":{},"278":{},"279":{},"280":{}},"component":{}}],["changelist",{"_index":4219,"title":{},"name":{},"text":{"61":{}},"component":{}}],["changepend",{"_index":6578,"title":{},"name":{},"text":{"159":{},"162":{},"185":{}},"component":{}}],["channel",{"_index":1254,"title":{},"name":{},"text":{"23":{},"98":{},"100":{},"101":{},"143":{},"256":{}},"component":{}}],["channel(channel",{"_index":5474,"title":{},"name":{},"text":{"101":{}},"component":{}}],["chao",{"_index":7678,"title":{},"name":{},"text":{"267":{},"269":{}},"component":{}}],["chapter",{"_index":2451,"title":{},"name":{},"text":{"38":{},"45":{},"57":{},"66":{},"75":{},"77":{},"79":{},"80":{},"97":{},"144":{}},"component":{}}],["charact",{"_index":1431,"title":{},"name":{},"text":{"24":{},"29":{},"61":{},"97":{},"138":{},"192":{}},"component":{}}],["characterist",{"_index":1135,"title":{},"name":{},"text":{"11":{},"31":{},"35":{},"107":{},"157":{},"281":{}},"component":{}}],["charg",{"_index":1363,"title":{},"name":{},"text":{"24":{},"31":{},"38":{},"43":{},"44":{},"45":{},"57":{},"61":{},"79":{},"80":{},"126":{},"129":{},"196":{},"245":{},"247":{},"253":{}},"component":{}}],["check",{"_index":839,"title":{"144-22":{},"196-6":{}},"name":{},"text":{"5":{},"8":{},"15":{},"21":{},"23":{},"24":{},"31":{},"35":{},"38":{},"41":{},"42":{},"44":{},"49":{},"51":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"75":{},"76":{},"77":{},"79":{},"80":{},"83":{},"85":{},"87":{},"93":{},"97":{},"98":{},"104":{},"107":{},"117":{},"126":{},"138":{},"139":{},"143":{},"144":{},"146":{},"147":{},"154":{},"155":{},"158":{},"160":{},"161":{},"162":{},"167":{},"169":{},"171":{},"172":{},"176":{},"180":{},"196":{},"215":{},"247":{},"253":{},"256":{},"270":{},"271":{},"273":{},"277":{},"279":{},"280":{},"282":{}},"component":{}}],["checkbox",{"_index":7692,"title":{},"name":{},"text":{"267":{},"270":{}},"component":{}}],["checker",{"_index":6945,"title":{},"name":{},"text":{"172":{}},"component":{}}],["child",{"_index":918,"title":{},"name":{},"text":{"7":{},"44":{},"52":{},"60":{},"73":{},"74":{},"77":{}},"component":{}}],["childaggreg",{"_index":4723,"title":{},"name":{},"text":{"73":{}},"component":{}}],["childaggregate(str",{"_index":4730,"title":{},"name":{},"text":{"73":{}},"component":{}}],["childaggregate.class",{"_index":4727,"title":{},"name":{},"text":{"73":{}},"component":{}}],["childaggregatecreatedev",{"_index":4733,"title":{},"name":{},"text":{"73":{}},"component":{}}],["childaggregatecreatedevent(aggregateid",{"_index":4732,"title":{},"name":{},"text":{"73":{}},"component":{}}],["childent",{"_index":4233,"title":{},"name":{},"text":{"61":{}},"component":{}}],["children",{"_index":4744,"title":{},"name":{},"text":{"74":{}},"component":{}}],["choic",{"_index":1843,"title":{},"name":{},"text":{"28":{},"29":{},"51":{},"52":{},"63":{},"65":{},"66":{},"80":{},"84":{},"107":{},"128":{},"144":{},"244":{}},"component":{}}],["choos",{"_index":699,"title":{},"name":{},"text":{"3":{},"5":{},"24":{},"29":{},"31":{},"35":{},"38":{},"44":{},"46":{},"56":{},"60":{},"63":{},"65":{},"71":{},"79":{},"80":{},"84":{},"89":{},"96":{},"101":{},"126":{},"137":{},"139":{},"140":{},"144":{},"151":{},"162":{},"165":{},"184":{},"229":{},"235":{},"236":{},"254":{},"260":{},"264":{},"265":{},"273":{},"274":{}},"component":{}}],["choosen",{"_index":7899,"title":{},"name":{},"text":{"277":{}},"component":{}}],["chose",{"_index":1359,"title":{},"name":{},"text":{"24":{},"121":{},"137":{}},"component":{}}],["chosen",{"_index":2428,"title":{},"name":{},"text":{"37":{},"57":{},"80":{},"143":{},"150":{},"254":{},"270":{},"278":{}},"component":{}}],["chown",{"_index":381,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["chown=axonserv",{"_index":387,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["christian",{"_index":3681,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["chronounit.days).truncatedto(chronounit.day",{"_index":5322,"title":{},"name":{},"text":{"85":{}},"component":{}}],["chunk",{"_index":3137,"title":{},"name":{},"text":{"56":{},"172":{}},"component":{}}],["circl",{"_index":7730,"title":{},"name":{},"text":{"270":{}},"component":{}}],["circular",{"_index":4171,"title":{},"name":{},"text":{"61":{}},"component":{}}],["circumst",{"_index":2370,"title":{},"name":{},"text":{"35":{},"37":{},"42":{},"57":{},"66":{}},"component":{}}],["citi",{"_index":7920,"title":{},"name":{},"text":{"277":{},"282":{}},"component":{}}],["claim",{"_index":2052,"title":{"80-27":{}},"name":{},"text":{"31":{},"60":{},"61":{},"80":{},"116":{},"143":{},"173":{},"243":{},"254":{},"255":{},"256":{},"270":{}},"component":{}}],["claimextensionthreshold",{"_index":5081,"title":{},"name":{},"text":{"80":{}},"component":{}}],["claimextensionthreshold(3000",{"_index":5087,"title":{},"name":{},"text":{"80":{}},"component":{}}],["claimtimeout",{"_index":3300,"title":{},"name":{},"text":{"60":{},"80":{}},"component":{}}],["clarif",{"_index":1971,"title":{},"name":{},"text":{"31":{}},"component":{}}],["clarifi",{"_index":3947,"title":{},"name":{},"text":{"61":{},"80":{}},"component":{}}],["clariti",{"_index":3179,"title":{},"name":{},"text":{"57":{},"79":{},"137":{}},"component":{}}],["class",{"_index":1156,"title":{"24-3":{},"277-3":{},"278-5":{}},"name":{},"text":{"13":{},"24":{},"25":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"68":{},"69":{},"71":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"85":{},"87":{},"88":{},"89":{},"91":{},"92":{},"93":{},"95":{},"103":{},"104":{},"106":{},"107":{},"109":{},"110":{},"112":{},"113":{},"115":{},"117":{},"122":{},"127":{},"130":{},"143":{},"146":{},"147":{},"172":{},"180":{},"236":{},"273":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["classcastexcept",{"_index":1965,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{}}],["classifi",{"_index":6490,"title":{},"name":{},"text":{"151":{}},"component":{}}],["classload",{"_index":3278,"title":{},"name":{},"text":{"60":{},"92":{},"95":{}},"component":{}}],["classnotfoundexcept",{"_index":4081,"title":{},"name":{},"text":{"61":{}},"component":{}}],["classpath",{"_index":1252,"title":{},"name":{},"text":{"23":{},"25":{},"35":{},"44":{},"50":{},"60":{},"63":{},"92":{},"97":{},"99":{},"101":{},"105":{},"121":{},"128":{},"143":{},"156":{},"273":{}},"component":{}}],["claus",{"_index":4443,"title":{},"name":{},"text":{"66":{}},"component":{}}],["clazz",{"_index":5619,"title":{},"name":{},"text":{"107":{}},"component":{}}],["clazz.isassignablefrom(kafkaeventpublisher.class",{"_index":5620,"title":{},"name":{},"text":{"107":{}},"component":{}}],["clean",{"_index":2762,"title":{"144-14":{}},"name":{},"text":{"46":{},"60":{},"80":{},"137":{},"138":{},"141":{},"144":{},"170":{},"172":{}},"component":{}}],["clean/uniniti",{"_index":6158,"title":{},"name":{},"text":{"141":{}},"component":{}}],["cleaner",{"_index":1299,"title":{},"name":{},"text":{"23":{},"28":{},"80":{}},"component":{}}],["cleanup",{"_index":2797,"title":{},"name":{},"text":{"46":{},"61":{},"172":{}},"component":{}}],["clear",{"_index":2305,"title":{},"name":{},"text":{"35":{},"42":{},"52":{},"60":{},"61":{},"63":{},"66":{},"80":{},"101":{},"138":{},"149":{},"172":{},"254":{},"261":{}},"component":{}}],["clearer",{"_index":2559,"title":{},"name":{},"text":{"41":{}},"component":{}}],["clearli",{"_index":1926,"title":{},"name":{},"text":{"31":{},"35":{},"60":{},"68":{},"75":{},"139":{},"269":{}},"component":{}}],["cli",{"_index":502,"title":{"160":{},"161-1":{},"167-1":{}},"name":{"160":{}},"text":{"3":{},"137":{},"142":{},"146":{},"159":{},"160":{},"161":{},"162":{},"165":{},"166":{},"167":{},"168":{},"184":{},"185":{}},"component":{}}],["cli.jar",{"_index":413,"title":{},"name":{},"text":{"3":{},"139":{},"146":{},"147":{},"161":{},"162":{},"167":{},"171":{},"184":{},"185":{}},"component":{}}],["click",{"_index":771,"title":{},"name":{},"text":{"5":{},"52":{},"58":{},"139":{},"158":{},"198":{},"228":{},"229":{},"232":{},"234":{},"236":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"251":{},"254":{},"256":{},"264":{},"267":{},"270":{},"271":{},"273":{},"274":{},"277":{},"280":{},"281":{}},"component":{}}],["client",{"_index":412,"title":{"161":{},"137-17":{},"142-1":{},"150-6":{},"161-1":{},"169-1":{},"203-30":{},"218-9":{},"221-2":{},"221-3":{},"221-4":{},"270-4":{},"273-2":{}},"name":{"161":{},"219":{},"220":{}},"text":{"3":{},"5":{},"8":{},"31":{},"32":{},"35":{},"42":{},"53":{},"54":{},"56":{},"60":{},"61":{},"62":{},"70":{},"81":{},"104":{},"107":{},"108":{},"121":{},"131":{},"137":{},"138":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"148":{},"149":{},"150":{},"155":{},"156":{},"159":{},"160":{},"161":{},"165":{},"168":{},"169":{},"172":{},"173":{},"177":{},"180":{},"184":{},"185":{},"201":{},"203":{},"204":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"216":{},"218":{},"221":{},"226":{},"242":{},"251":{},"256":{},"270":{},"273":{},"280":{}},"component":{}}],["client.vers",{"_index":7753,"title":{},"name":{},"text":{"273":{}},"component":{}}],["clientauthenticationid",{"_index":7503,"title":{},"name":{},"text":{"212":{}},"component":{}}],["clientid",{"_index":1440,"title":{},"name":{},"text":{"24":{},"199":{},"208":{},"209":{},"211":{}},"component":{}}],["clientinstance.getisrun",{"_index":6287,"title":{},"name":{},"text":{"143":{}},"component":{}}],["clipboard",{"_index":6110,"title":{},"name":{},"text":{"138":{}},"component":{}}],["clock",{"_index":2193,"title":{},"name":{},"text":{"32":{},"68":{}},"component":{}}],["clock.systemutc",{"_index":2196,"title":{},"name":{},"text":{"32":{}},"component":{}}],["clone",{"_index":978,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["close",{"_index":889,"title":{},"name":{},"text":{"7":{},"24":{},"56":{},"60":{},"61":{},"62":{},"63":{},"104":{},"107":{},"122":{},"137":{},"138":{},"140":{},"151":{},"172":{},"203":{},"212":{},"254":{},"278":{}},"component":{}}],["closedloopgiftcard",{"_index":4738,"title":{},"name":{},"text":{"74":{}},"component":{}}],["closest",{"_index":4245,"title":{},"name":{},"text":{"61":{}},"component":{}}],["closetimeout",{"_index":5594,"title":{},"name":{},"text":{"107":{}},"component":{}}],["closetimeout(closetimeout",{"_index":5598,"title":{},"name":{},"text":{"107":{}},"component":{}}],["closur",{"_index":3515,"title":{},"name":{},"text":{"60":{}},"component":{}}],["cloud",{"_index":61,"title":{"128":{},"23-34":{},"23-35":{}},"name":{},"text":{"1":{},"5":{},"7":{},"23":{},"31":{},"101":{},"106":{},"119":{},"126":{},"127":{},"128":{},"150":{},"180":{},"196":{},"203":{}},"component":{"126":{},"127":{},"128":{},"129":{}}}],["cloud.en",{"_index":5977,"title":{},"name":{},"text":{"127":{}},"component":{}}],["cloud.mode=rest",{"_index":5974,"title":{},"name":{},"text":{"127":{}},"component":{}}],["cloud.rest",{"_index":5975,"title":{},"name":{},"text":{"127":{}},"component":{}}],["cloud_ev",{"_index":5625,"title":{},"name":{},"text":{"108":{}},"component":{}}],["cloudev",{"_index":5626,"title":{},"name":{},"text":{"108":{}},"component":{}}],["cloudeventkafkamessageconvert",{"_index":5583,"title":{},"name":{},"text":{"106":{},"108":{}},"component":{}}],["cloud’",{"_index":5930,"title":{},"name":{},"text":{"126":{}},"component":{}}],["cluster",{"_index":126,"title":{"141":{},"170":{},"137-18":{},"140-3":{},"141-4":{},"142-8":{},"144-15":{},"171-8":{},"185-3":{},"185-4":{},"185-5":{},"185-9":{},"196-5":{},"229-3":{}},"name":{"141":{},"170":{}},"text":{"2":{},"3":{},"4":{},"5":{},"33":{},"75":{},"101":{},"102":{},"126":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"148":{},"149":{},"151":{},"154":{},"155":{},"156":{},"160":{},"162":{},"163":{},"165":{},"167":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"184":{},"185":{},"196":{},"218":{},"229":{},"238":{},"245":{}},"component":{}}],["cluster.auto",{"_index":6950,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster.balanc",{"_index":6951,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster.command",{"_index":6962,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster.connect",{"_index":6944,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster.metr",{"_index":6946,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster.queri",{"_index":6961,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster.rebal",{"_index":6948,"title":{},"name":{},"text":{"172":{}},"component":{}}],["cluster/context",{"_index":446,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["clusterip",{"_index":665,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["clusternam",{"_index":5467,"title":{},"name":{},"text":{"101":{}},"component":{}}],["clustername(\"mycommandbu",{"_index":5475,"title":{},"name":{},"text":{"101":{}},"component":{}}],["cluster’",{"_index":6170,"title":{},"name":{},"text":{"141":{},"170":{}},"component":{}}],["clutter",{"_index":6076,"title":{},"name":{},"text":{"137":{}},"component":{}}],["cmd",{"_index":1161,"title":{},"name":{},"text":{"13":{},"28":{},"29":{},"32":{},"36":{},"75":{},"77":{},"78":{}},"component":{}}],["cmd.getamount",{"_index":1164,"title":{},"name":{},"text":{"13":{},"28":{},"29":{},"36":{},"75":{},"77":{},"78":{}},"component":{}}],["cmd.gettransactionid",{"_index":1785,"title":{},"name":{},"text":{"28":{},"77":{},"78":{}},"component":{}}],["cmdmsg",{"_index":1680,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cmdresultmsg",{"_index":1681,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cmdresultmsg.exceptionresult",{"_index":1684,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cmdresultmsg.getpayload",{"_index":1686,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cmdresultmsg.isexcept",{"_index":1682,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cn=admin,dc=demo,dc=io",{"_index":6637,"title":{},"name":{},"text":{"163":{}},"component":{}}],["co`mpon",{"_index":4837,"title":{},"name":{},"text":{"79":{}},"component":{}}],["coda",{"_index":1258,"title":{},"name":{},"text":{"23":{}},"component":{}}],["code",{"_index":969,"title":{"142":{},"8-2":{},"13-2":{}},"name":{"142":{}},"text":{"8":{},"10":{},"11":{},"13":{},"23":{},"26":{},"27":{},"30":{},"35":{},"44":{},"50":{},"55":{},"56":{},"60":{},"62":{},"66":{},"68":{},"71":{},"75":{},"89":{},"90":{},"137":{},"142":{},"143":{},"144":{},"150":{},"159":{},"169":{},"170":{},"174":{},"176":{},"199":{},"213":{},"214":{},"216":{},"255":{},"256":{},"270":{},"272":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["codebas",{"_index":991,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{}}],["codedrivenmitch",{"_index":3286,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["cold",{"_index":6492,"title":{},"name":{},"text":{"151":{}},"component":{}}],["collabor",{"_index":1011,"title":{},"name":{},"text":{"8":{},"80":{}},"component":{}}],["colleagu",{"_index":7666,"title":{},"name":{},"text":{"262":{},"274":{}},"component":{}}],["collect",{"_index":952,"title":{},"name":{},"text":{"7":{},"15":{},"17":{},"18":{},"20":{},"21":{},"23":{},"24":{},"35":{},"38":{},"50":{},"52":{},"57":{},"60":{},"61":{},"63":{},"65":{},"77":{},"79":{},"80":{},"89":{},"93":{},"104":{},"114":{},"116":{},"138":{},"144":{},"172":{},"177":{},"178":{},"196":{},"199":{},"234":{},"235":{},"238":{},"255":{},"256":{},"261":{},"270":{},"273":{},"277":{}},"component":{}}],["collect(collectors.tolist",{"_index":2862,"title":{},"name":{},"text":{"50":{}},"component":{}}],["collections.emptymap",{"_index":2954,"title":{},"name":{},"text":{"52":{}},"component":{}}],["collector",{"_index":2961,"title":{},"name":{},"text":{"52":{},"137":{},"172":{},"255":{}},"component":{}}],["color",{"_index":796,"title":{},"name":{},"text":{"5":{}},"component":{}}],["column",{"_index":3342,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"80":{},"97":{},"137":{},"239":{},"243":{},"251":{},"254":{},"258":{},"270":{},"271":{},"280":{}},"component":{}}],["com.fasterxml.jackson.databind.jsonnod",{"_index":5662,"title":{},"name":{},"text":{"110":{}},"component":{}}],["com.fasterxml.jackson.databind.jsonnode.class",{"_index":2513,"title":{},"name":{},"text":{"38":{}},"component":{}}],["coma",{"_index":5725,"title":{},"name":{},"text":{"117":{}},"component":{}}],["comand",{"_index":8010,"title":{},"name":{},"text":{"281":{}},"component":{}}],["combin",{"_index":45,"title":{"35-20":{},"52-5":{}},"name":{},"text":{"1":{},"26":{},"27":{},"38":{},"42":{},"43":{},"44":{},"50":{},"53":{},"54":{},"56":{},"61":{},"66":{},"75":{},"80":{},"81":{},"90":{},"101":{},"104":{},"105":{},"114":{},"128":{},"137":{},"146":{},"151":{},"160":{},"171":{},"180":{},"201":{},"203":{},"281":{}},"component":{}}],["come",{"_index":1068,"title":{},"name":{},"text":{"8":{},"24":{},"29":{},"31":{},"32":{},"35":{},"38":{},"40":{},"41":{},"44":{},"46":{},"50":{},"52":{},"53":{},"54":{},"57":{},"58":{},"60":{},"61":{},"66":{},"71":{},"79":{},"80":{},"97":{},"101":{},"104":{},"126":{},"139":{},"149":{},"151":{},"185":{},"203":{},"221":{},"254":{},"261":{},"267":{},"268":{},"270":{},"277":{}},"component":{}}],["comfort",{"_index":195,"title":{},"name":{},"text":{"2":{}},"component":{}}],["comma",{"_index":5497,"title":{},"name":{},"text":{"102":{},"146":{},"154":{},"161":{},"165":{},"167":{},"171":{},"185":{},"203":{},"205":{}},"component":{}}],["command",{"_index":21,"title":{"27":{},"28":{},"30":{},"66":{},"69":{},"109":{},"126":{},"129":{},"171":{},"208":{},"213":{},"282":{},"27-3":{},"28-1":{},"28-4":{},"28-5":{},"29-4":{},"29-7":{},"31-6":{},"31-7":{},"31-17":{},"42-1":{},"44-1":{},"44-2":{},"44-4":{},"45-1":{},"52-26":{},"66-1":{},"66-6":{},"69-1":{},"77-1":{},"122-2":{},"142-3":{},"146-7":{},"171-4":{},"172-2":{},"177-1":{},"199-3":{},"199-5":{},"200-3":{},"208-4":{},"208-5":{},"208-6":{},"218-3":{},"277-14":{},"278-3":{},"278-4":{},"278-6":{},"280-2":{},"280-5":{},"282-2":{},"282-4":{}},"name":{"27":{},"28":{},"66":{},"69":{},"109":{},"126":{},"129":{},"171":{},"208":{},"213":{},"282":{}},"text":{"1":{},"3":{},"5":{},"8":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"36":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"56":{},"57":{},"60":{},"61":{},"62":{},"66":{},"67":{},"68":{},"69":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"83":{},"85":{},"92":{},"93":{},"96":{},"101":{},"103":{},"109":{},"111":{},"117":{},"122":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"137":{},"139":{},"141":{},"142":{},"146":{},"147":{},"149":{},"150":{},"154":{},"161":{},"162":{},"166":{},"167":{},"171":{},"172":{},"174":{},"176":{},"177":{},"184":{},"185":{},"191":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"205":{},"206":{},"208":{},"210":{},"211":{},"212":{},"213":{},"215":{},"216":{},"218":{},"221":{},"239":{},"240":{},"255":{},"256":{},"263":{},"267":{},"270":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["command.amount",{"_index":5303,"title":{},"name":{},"text":{"83":{},"85":{}},"component":{}}],["command.biketyp",{"_index":7975,"title":{},"name":{},"text":{"278":{}},"component":{}}],["command.daysvalid",{"_index":5320,"title":{},"name":{},"text":{"85":{}},"component":{}}],["command.loc",{"_index":7976,"title":{},"name":{},"text":{"278":{}},"component":{}}],["command/queri",{"_index":2567,"title":{},"name":{},"text":{"41":{}},"component":{}}],["commandbodi",{"_index":5833,"title":{},"name":{},"text":{"122":{}},"component":{}}],["commandbu",{"_index":1256,"title":{"27-1":{}},"name":{},"text":{"23":{},"27":{},"31":{},"44":{},"46":{},"50":{},"52":{},"63":{},"68":{},"101":{},"117":{},"127":{},"129":{},"242":{},"255":{}},"component":{}}],["commandbus#dispatch(commandmessag",{"_index":1697,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandbus(commandbu",{"_index":1987,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandbus.dispatch",{"_index":1678,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandbus.dispatch(commandmessag",{"_index":1706,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandbus.dispatch(genericcommandmessage.ascommandmessage(new",{"_index":1675,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandbus.registerdispatchinterceptor(new",{"_index":2640,"title":{},"name":{},"text":{"44":{}},"component":{}}],["commandbus.registerhandlerinterceptor",{"_index":2004,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandbus.registerhandlerinterceptor(new",{"_index":2083,"title":{},"name":{},"text":{"31":{},"44":{}},"component":{}}],["commandbus.subscribe(anothercommandtype.class.getnam",{"_index":5481,"title":{},"name":{},"text":{"101":{}},"component":{}}],["commandbus.subscribe(commandtype.class.getnam",{"_index":5479,"title":{},"name":{},"text":{"101":{}},"component":{}}],["commandbus.updateloadfactor(150",{"_index":5483,"title":{},"name":{},"text":{"101":{}},"component":{}}],["commandbus/commandgateway",{"_index":1755,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandbusclass}.dispatch(${commandnam",{"_index":2982,"title":{},"name":{},"text":{"52":{}},"component":{}}],["commandbusclass}.handle(${commandnam",{"_index":2983,"title":{},"name":{},"text":{"52":{}},"component":{}}],["commandbusconfigur",{"_index":2637,"title":{},"name":{},"text":{"44":{}},"component":{}}],["commandbusconnector",{"_index":2135,"title":{},"name":{},"text":{"31":{},"101":{},"127":{},"128":{},"129":{}},"component":{}}],["commandbuscorrelationconfigurermodul",{"_index":2015,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandcallback",{"_index":1671,"title":{"31-5":{}},"name":{},"text":{"27":{},"31":{},"60":{},"109":{}},"component":{}}],["commandcallback`",{"_index":1939,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commanddispatch",{"_index":1687,"title":{},"name":{},"text":{"27":{},"122":{}},"component":{}}],["commanddispatcher(priv",{"_index":5652,"title":{},"name":{},"text":{"109":{}},"component":{}}],["commanddispatchinterceptor",{"_index":1915,"title":{"31-4":{}},"name":{},"text":{},"component":{}}],["commanddispatchinterceptor`",{"_index":1938,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandexecutionexcept",{"_index":1967,"title":{},"name":{},"text":{"31":{},"41":{}},"component":{}}],["commandgateway",{"_index":1666,"title":{"27-2":{},"31-1":{},"31-2":{},"109-1":{}},"name":{},"text":{"27":{},"31":{},"60":{},"61":{},"62":{},"63":{},"80":{},"109":{},"131":{},"277":{},"278":{},"280":{}},"component":{}}],["commandgateway#send",{"_index":4143,"title":{},"name":{},"text":{"61":{},"129":{}},"component":{}}],["commandgateway#send(object",{"_index":1728,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandgateway#sendandwait",{"_index":4144,"title":{},"name":{},"text":{"61":{}},"component":{}}],["commandgateway#sendandwait(object",{"_index":1739,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandgateway.send",{"_index":5656,"title":{},"name":{},"text":{"109":{}},"component":{}}],["commandgateway.send(new",{"_index":1724,"title":{},"name":{},"text":{"27":{},"62":{}},"component":{}}],["commandgateway.send(registerbikecommand",{"_index":7994,"title":{},"name":{},"text":{"278":{}},"component":{}}],["commandgateway.sendandwait(commandpayload",{"_index":1736,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandgateway.sendandwait(new",{"_index":3093,"title":{},"name":{},"text":{"56":{}},"component":{}}],["commandgatewayfactori",{"_index":1916,"title":{"31-6":{}},"name":{},"text":{"31":{}},"component":{}}],["commandgatewayfactory.build",{"_index":1986,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandhandl",{"_index":1159,"title":{},"name":{},"text":{"13":{},"27":{},"28":{},"29":{},"36":{},"45":{},"60":{},"66":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"83":{},"85":{},"96":{},"103":{},"277":{},"278":{}},"component":{}}],["commandhandler(payloadtyp",{"_index":5413,"title":{},"name":{},"text":{"96":{}},"component":{}}],["commandhandler`",{"_index":4736,"title":{},"name":{},"text":{"74":{}},"component":{}}],["commandhandlerinterceptor",{"_index":2623,"title":{"44-5":{}},"name":{},"text":{"44":{},"45":{},"61":{}},"component":{}}],["commandhandlerinterceptor`",{"_index":1991,"title":{},"name":{},"text":{"31":{},"74":{}},"component":{}}],["commandhandlingexcept",{"_index":4199,"title":{},"name":{},"text":{"61":{}},"component":{}}],["commandlin",{"_index":6588,"title":{},"name":{},"text":{"161":{}},"component":{}}],["commandloadfactorprovid",{"_index":2125,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandmessag",{"_index":1695,"title":{},"name":{},"text":{"27":{},"31":{},"42":{},"43":{},"44":{},"45":{},"66":{},"93":{},"109":{}},"component":{}}],["commandmessage`",{"_index":1948,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandmessage’",{"_index":2102,"title":{},"name":{},"text":{"31":{}},"component":{}}],["commandnam",{"_index":1767,"title":{},"name":{},"text":{"28":{},"96":{},"208":{}},"component":{}}],["commandnamepattern",{"_index":2666,"title":{},"name":{},"text":{"44":{}},"component":{}}],["commandpayload",{"_index":1734,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandpublish",{"_index":5836,"title":{},"name":{},"text":{"122":{}},"component":{}}],["commandresult",{"_index":1685,"title":{},"name":{},"text":{"27":{},"278":{}},"component":{}}],["commandresultmessag",{"_index":1702,"title":{},"name":{},"text":{"27":{},"31":{},"60":{},"66":{}},"component":{}}],["commandresultmessage#exceptionresult",{"_index":1710,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandresultmessage#getpayload",{"_index":1711,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandresultmessage#isexcept",{"_index":1709,"title":{},"name":{},"text":{"27":{}},"component":{}}],["commandrout",{"_index":2136,"title":{},"name":{},"text":{"31":{},"101":{},"127":{},"128":{}},"component":{}}],["commandrouter(commandrout",{"_index":5971,"title":{},"name":{},"text":{"127":{}},"component":{}}],["commandrouter(connector",{"_index":5478,"title":{},"name":{},"text":{"101":{}},"component":{}}],["commands.wait",{"_index":7038,"title":{},"name":{},"text":{"176":{}},"component":{}}],["commands/ev",{"_index":4589,"title":{},"name":{},"text":{"67":{}},"component":{}}],["commands/queries/ev",{"_index":1357,"title":{},"name":{},"text":{"24":{},"139":{},"181":{}},"component":{}}],["commands=tru",{"_index":5979,"title":{},"name":{},"text":{"127":{}},"component":{}}],["commandtargetresolv",{"_index":1798,"title":{},"name":{},"text":{"28":{},"60":{},"66":{}},"component":{}}],["commandvalid",{"_index":3725,"title":{},"name":{},"text":{"60":{}},"component":{}}],["command’",{"_index":2668,"title":{},"name":{},"text":{"44":{},"66":{}},"component":{}}],["comment",{"_index":1725,"title":{},"name":{},"text":{"27":{},"75":{},"77":{},"78":{},"232":{}},"component":{}}],["commerci",{"_index":6014,"title":{},"name":{},"text":{"134":{}},"component":{}}],["commit",{"_index":1931,"title":{},"name":{},"text":{"31":{},"35":{},"44":{},"46":{},"52":{},"60":{},"61":{},"79":{},"80":{},"97":{},"107":{},"108":{},"139":{},"140":{},"142":{},"149":{},"172":{},"227":{},"237":{},"255":{},"256":{},"270":{}},"component":{}}],["common",{"_index":358,"title":{},"name":{},"text":{"3":{},"23":{},"42":{},"43":{},"58":{},"61":{},"77":{},"79":{},"104":{},"122":{},"124":{},"151":{},"165":{},"171":{},"172":{},"184":{},"276":{}},"component":{}}],["commonli",{"_index":4531,"title":{},"name":{},"text":{"66":{},"75":{},"172":{}},"component":{}}],["commun",{"_index":193,"title":{},"name":{},"text":{"2":{},"7":{},"31":{},"35":{},"40":{},"42":{},"60":{},"84":{},"101":{},"138":{},"169":{},"172":{},"185":{},"196":{},"197":{},"198":{},"200":{},"205":{},"221":{},"261":{},"262":{},"275":{},"276":{},"278":{},"280":{}},"component":{}}],["compact",{"_index":337,"title":{"144-9":{},"144-23":{}},"name":{},"text":{"3":{},"24":{},"35":{},"104":{},"140":{},"144":{},"172":{},"184":{}},"component":{}}],["compani",{"_index":7578,"title":{},"name":{},"text":{"234":{}},"component":{}}],["companion",{"_index":6013,"title":{},"name":{},"text":{"134":{}},"component":{}}],["companynam",{"_index":2494,"title":{},"name":{},"text":{"38":{}},"component":{}}],["compar",{"_index":1909,"title":{},"name":{},"text":{"29":{},"31":{},"33":{},"50":{},"51":{},"52":{},"60":{},"61":{},"63":{},"66":{},"80":{},"85":{},"139":{},"151":{},"185":{},"241":{},"245":{}},"component":{}}],["comparison",{"_index":4338,"title":{},"name":{},"text":{"62":{},"66":{},"190":{}},"component":{}}],["compat",{"_index":14,"title":{"156-2":{}},"name":{},"text":{"1":{},"2":{},"4":{},"23":{},"25":{},"35":{},"38":{},"60":{},"100":{},"129":{},"134":{},"150":{},"169":{}},"component":{}}],["compens",{"_index":4361,"title":{},"name":{},"text":{"63":{},"80":{}},"component":{}}],["compet",{"_index":5177,"title":{},"name":{},"text":{"80":{}},"component":{}}],["compil",{"_index":58,"title":{"123":{}},"name":{"123":{}},"text":{"1":{},"56":{},"60":{},"123":{},"124":{},"125":{}},"component":{}}],["complain",{"_index":5416,"title":{},"name":{},"text":{"96":{}},"component":{}}],["complaint",{"_index":2512,"title":{},"name":{},"text":{"38":{}},"component":{}}],["complaintev",{"_index":2493,"title":{},"name":{},"text":{"38":{}},"component":{}}],["complaintevent0_to_1upcast",{"_index":2522,"title":{},"name":{},"text":{"38":{}},"component":{}}],["complaintevent1_to_2upcast",{"_index":2498,"title":{},"name":{},"text":{"38":{}},"component":{}}],["complainteventupcasteron",{"_index":2529,"title":{},"name":{},"text":{"38":{}},"component":{}}],["complainteventupcastertwo",{"_index":2530,"title":{},"name":{},"text":{"38":{}},"component":{}}],["complement",{"_index":1269,"title":{"151-19":{}},"name":{},"text":{"23":{},"30":{},"55":{},"66":{},"151":{}},"component":{}}],["complet",{"_index":417,"title":{},"name":{},"text":{"3":{},"7":{},"11":{},"15":{},"21":{},"24":{},"25":{},"27":{},"37":{},"38":{},"45":{},"46":{},"51":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"66":{},"67":{},"70":{},"80":{},"107":{},"137":{},"138":{},"140":{},"142":{},"144":{},"149":{},"151":{},"155":{},"170":{},"172":{},"175":{},"177":{},"184":{},"185":{},"199":{},"200":{},"221":{},"260":{},"270":{},"274":{},"276":{},"278":{},"279":{}},"component":{}}],["completablefutur",{"_index":1722,"title":{},"name":{},"text":{"27":{},"31":{},"56":{},"70":{},"80":{},"112":{},"122":{},"129":{},"144":{},"277":{},"278":{}},"component":{}}],["completablefuture::get",{"_index":7902,"title":{},"name":{},"text":{"277":{}},"component":{}}],["completablefuture`",{"_index":6363,"title":{},"name":{},"text":{"144":{}},"component":{}}],["complete=\"fals",{"_index":5444,"title":{},"name":{},"text":{"97":{}},"component":{}}],["completionstag",{"_index":1963,"title":{},"name":{},"text":{"31":{}},"component":{}}],["complex",{"_index":141,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"56":{},"61":{},"66":{},"77":{},"79":{},"89":{},"184":{},"247":{},"261":{},"276":{},"277":{},"278":{}},"component":{}}],["compli",{"_index":873,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["complic",{"_index":7958,"title":{},"name":{},"text":{"278":{}},"component":{}}],["compon",{"_index":36,"title":{"120":{},"266":{},"52-25":{},"108-1":{},"108-3":{},"108-7":{},"203-10":{},"203-13":{},"270-7":{}},"name":{"120":{},"266":{}},"text":{"1":{},"13":{},"14":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"42":{},"44":{},"46":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"73":{},"79":{},"80":{},"81":{},"85":{},"89":{},"91":{},"93":{},"99":{},"101":{},"105":{},"107":{},"108":{},"116":{},"117":{},"119":{},"120":{},"121":{},"122":{},"126":{},"127":{},"128":{},"137":{},"143":{},"146":{},"158":{},"173":{},"176":{},"199":{},"203":{},"208":{},"209":{},"211":{},"239":{},"240":{},"241":{},"242":{},"243":{},"254":{},"260":{},"261":{},"263":{},"270":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["componentloc",{"_index":3886,"title":{},"name":{},"text":{"61":{}},"component":{}}],["componentnam",{"_index":2853,"title":{},"name":{},"text":{"50":{},"79":{},"143":{},"199":{},"208":{},"209":{},"211":{}},"component":{}}],["componentscan",{"_index":4159,"title":{},"name":{},"text":{"61":{}},"component":{}}],["componenttyp",{"_index":2852,"title":{},"name":{},"text":{"50":{},"79":{}},"component":{}}],["component’",{"_index":7728,"title":{},"name":{},"text":{"270":{},"278":{}},"component":{}}],["compos",{"_index":217,"title":{"281":{},"3-10":{},"184-3":{},"281-2":{},"281-3":{},"281-4":{}},"name":{"281":{}},"text":{"3":{},"60":{},"66":{},"137":{},"144":{},"184":{},"234":{},"263":{},"273":{},"274":{},"277":{},"278":{},"281":{}},"component":{}}],["compose.yaml",{"_index":7649,"title":{},"name":{},"text":{"260":{},"264":{},"274":{},"281":{}},"component":{}}],["compose.yml",{"_index":7771,"title":{},"name":{},"text":{"274":{},"277":{}},"component":{}}],["comprehens",{"_index":6043,"title":{},"name":{},"text":{"137":{},"224":{},"233":{},"256":{},"261":{},"263":{},"266":{},"270":{}},"component":{}}],["compress",{"_index":6745,"title":{},"name":{},"text":{"165":{}},"component":{}}],["compris",{"_index":4218,"title":{},"name":{},"text":{"61":{}},"component":{}}],["comput",{"_index":2038,"title":{},"name":{},"text":{"31":{},"119":{},"157":{},"196":{}},"component":{}}],["computeifpres",{"_index":4032,"title":{},"name":{},"text":{"61":{}},"component":{}}],["computeregion=asia",{"_index":6476,"title":{},"name":{},"text":{"150":{}},"component":{}}],["computeregion=europ",{"_index":6475,"title":{},"name":{},"text":{"150":{}},"component":{}}],["con",{"_index":5127,"title":{},"name":{},"text":{"80":{},"260":{},"264":{}},"component":{}}],["concat(listdata",{"_index":7204,"title":{},"name":{},"text":{"192":{}},"component":{}}],["concaten",{"_index":5851,"title":{},"name":{},"text":{"122":{},"192":{}},"component":{}}],["concatwith(result.upd",{"_index":5861,"title":{},"name":{},"text":{"122":{}},"component":{}}],["concept",{"_index":1166,"title":{"42":{},"14-1":{}},"name":{},"text":{"15":{},"19":{},"21":{},"22":{},"27":{},"29":{},"30":{},"31":{},"34":{},"35":{},"38":{},"41":{},"42":{},"46":{},"55":{},"62":{},"69":{},"75":{},"77":{},"79":{},"144":{},"185":{},"261":{},"278":{}},"component":{}}],["conceptu",{"_index":1214,"title":{},"name":{},"text":{"22":{},"40":{},"63":{},"65":{},"80":{},"217":{}},"component":{}}],["concern",{"_index":1271,"title":{},"name":{},"text":{"23":{},"30":{},"55":{},"56":{},"61":{},"64":{},"79":{},"81":{},"107":{},"137":{},"143":{}},"component":{}}],["concess",{"_index":4220,"title":{},"name":{},"text":{"61":{}},"component":{}}],["concis",{"_index":894,"title":{},"name":{},"text":{"7":{}},"component":{}}],["conclud",{"_index":5095,"title":{},"name":{},"text":{"80":{},"144":{}},"component":{}}],["conclus",{"_index":7559,"title":{"227":{},"237":{},"262":{},"267-3":{},"277-16":{},"278-11":{},"280-7":{}},"name":{"227":{},"237":{},"262":{}},"text":{},"component":{}}],["concret",{"_index":1490,"title":{},"name":{},"text":{"24":{},"25":{},"35":{},"41":{},"42":{},"80":{}},"component":{}}],["concurr",{"_index":1477,"title":{"208-7":{}},"name":{},"text":{"24":{},"29":{},"31":{},"35":{},"61":{},"63":{},"65":{},"71":{},"80":{},"151":{},"208":{},"212":{}},"component":{}}],["concurrencyexcept",{"_index":2291,"title":{},"name":{},"text":{"35":{},"60":{}},"component":{}}],["concurrencyexception`",{"_index":3739,"title":{},"name":{},"text":{"60":{}},"component":{}}],["concurrenthashmap",{"_index":3962,"title":{},"name":{},"text":{"61":{}},"component":{}}],["condit",{"_index":1572,"title":{"151-8":{},"241-2":{},"256-1":{}},"name":{},"text":{"25":{},"36":{},"41":{},"60":{},"77":{},"80":{},"137":{},"138":{},"142":{},"151":{},"212":{},"236":{},"239":{},"241":{},"242":{},"243":{},"256":{},"271":{}},"component":{}}],["condition",{"_index":4365,"title":{},"name":{},"text":{"63":{},"77":{},"151":{}},"component":{}}],["conditionalonbean",{"_index":3415,"title":{},"name":{},"text":{"60":{}},"component":{}}],["conditionalonclass",{"_index":3634,"title":{},"name":{},"text":{"60":{}},"component":{}}],["conditionalonmissingbean",{"_index":3402,"title":{},"name":{},"text":{"60":{},"61":{},"89":{}},"component":{}}],["conditionalonmissingbean(eventbus.class",{"_index":1579,"title":{},"name":{},"text":{"25":{}},"component":{}}],["conf",{"_index":4869,"title":{},"name":{},"text":{"79":{},"80":{},"81":{}},"component":{}}],["config",{"_index":592,"title":{},"name":{"102":{},"113":{},"115":{},"116":{},"127":{},"130":{},"217":{}},"text":{"3":{},"31":{},"35":{},"54":{},"69":{},"79":{},"80":{},"88":{},"89":{},"91":{},"113":{},"116":{},"172":{},"180":{},"184":{},"271":{}},"component":{}}],["config.commandbus().registerhandlerinterceptor",{"_index":2017,"title":{},"name":{},"text":{"31":{}},"component":{}}],["config.deadletterqueue(processinggroup",{"_index":4941,"title":{},"name":{},"text":{"79":{}},"component":{}}],["config.eventprocessors().keyset",{"_index":5366,"title":{},"name":{},"text":{"91":{}},"component":{}}],["config.sequenceddeadletterprocessor(processinggroup",{"_index":4929,"title":{},"name":{},"text":{"79":{}},"component":{}}],["config.sequenceddeadletterprocessor(processinggroup).ifpres",{"_index":5367,"title":{},"name":{},"text":{"91":{}},"component":{}}],["config.snapshott",{"_index":4665,"title":{},"name":{},"text":{"71":{}},"component":{}}],["config/axonserver.properti",{"_index":6842,"title":{},"name":{},"text":{"172":{}},"component":{}}],["configdb",{"_index":718,"title":{},"name":{},"text":{"4":{}},"component":{}}],["configdb.mv.db",{"_index":720,"title":{},"name":{},"text":{"4":{}},"component":{}}],["configdb;defrag_always=tru",{"_index":727,"title":{},"name":{},"text":{"4":{}},"component":{}}],["configmap",{"_index":221,"title":{"3-12":{},"184-5":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["configmap/axonserv",{"_index":599,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["configtoken",{"_index":4273,"title":{},"name":{},"text":{"61":{}},"component":{}}],["configur",{"_index":94,"title":{"29":{},"53":{},"102":{},"108":{},"113":{},"115":{},"116":{},"117":{},"127":{},"130":{},"132":{},"174":{},"186":{},"203":{},"217":{},"4-2":{},"8-5":{},"8-7":{},"8-8":{},"9-7":{},"23-6":{},"24-2":{},"24-3":{},"25-1":{},"25-4":{},"25-5":{},"29-1":{},"29-2":{},"29-3":{},"29-5":{},"29-6":{},"29-8":{},"29-9":{},"31-2":{},"31-9":{},"31-10":{},"31-12":{},"31-13":{},"31-15":{},"31-16":{},"31-23":{},"31-24":{},"31-26":{},"31-27":{},"31-28":{},"31-29":{},"31-30":{},"32-4":{},"33-7":{},"35-4":{},"35-5":{},"35-8":{},"35-9":{},"35-11":{},"35-12":{},"35-14":{},"35-15":{},"35-18":{},"35-19":{},"35-23":{},"35-24":{},"37-2":{},"37-3":{},"38-6":{},"38-7":{},"38-8":{},"38-9":{},"43-6":{},"50-2":{},"50-3":{},"50-5":{},"50-6":{},"50-7":{},"50-8":{},"52-2":{},"52-3":{},"52-6":{},"52-7":{},"52-12":{},"52-13":{},"52-14":{},"52-16":{},"52-19":{},"52-20":{},"52-23":{},"52-24":{},"53-2":{},"53-3":{},"54-4":{},"54-5":{},"54-7":{},"54-8":{},"63-11":{},"63-12":{},"63-13":{},"63-14":{},"63-15":{},"65-2":{},"65-3":{},"69-2":{},"69-3":{},"70-4":{},"70-5":{},"71-3":{},"71-4":{},"71-7":{},"71-8":{},"71-11":{},"71-12":{},"79-6":{},"79-7":{},"79-9":{},"79-10":{},"79-13":{},"79-14":{},"79-15":{},"79-16":{},"79-17":{},"79-18":{},"79-25":{},"79-26":{},"79-27":{},"80-1":{},"80-2":{},"80-3":{},"80-4":{},"80-5":{},"80-6":{},"80-7":{},"80-8":{},"80-9":{},"80-10":{},"80-11":{},"80-12":{},"80-13":{},"80-14":{},"80-15":{},"80-16":{},"80-17":{},"80-21":{},"80-23":{},"80-24":{},"80-25":{},"80-26":{},"80-28":{},"80-29":{},"80-30":{},"80-31":{},"80-36":{},"80-37":{},"80-40":{},"80-41":{},"80-42":{},"80-43":{},"80-44":{},"80-46":{},"80-47":{},"80-48":{},"80-49":{},"80-51":{},"80-52":{},"80-53":{},"80-55":{},"80-56":{},"80-57":{},"80-67":{},"80-68":{},"80-69":{},"80-70":{},"80-71":{},"81-1":{},"81-2":{},"81-3":{},"81-4":{},"81-5":{},"81-6":{},"81-9":{},"81-10":{},"81-11":{},"81-12":{},"107-1":{},"108-11":{},"117-1":{},"117-2":{},"117-11":{},"122-1":{},"141-6":{},"147-4":{},"151-6":{},"151-20":{},"163-2":{},"165-2":{},"165-3":{},"165-4":{},"165-5":{},"169-1":{},"170-2":{},"172-1":{},"172-5":{},"199-5":{},"199-9":{},"199-13":{},"203-1":{},"205-2":{},"270-6":{},"270-12":{},"273-3":{},"275-1":{},"276-3":{},"281-2":{},"281-4":{},"282-1":{}},"name":{"29":{},"53":{},"108":{},"117":{},"132":{},"172":{},"186":{},"203":{}},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"13":{},"15":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"69":{},"70":{},"71":{},"74":{},"75":{},"79":{},"80":{},"81":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"93":{},"95":{},"96":{},"97":{},"98":{},"100":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"113":{},"114":{},"115":{},"116":{},"117":{},"122":{},"126":{},"127":{},"129":{},"130":{},"131":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"145":{},"146":{},"147":{},"149":{},"150":{},"151":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"165":{},"167":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"180":{},"182":{},"183":{},"184":{},"185":{},"196":{},"198":{},"199":{},"200":{},"201":{},"203":{},"205":{},"212":{},"217":{},"218":{},"223":{},"224":{},"225":{},"229":{},"233":{},"234":{},"236":{},"239":{},"241":{},"242":{},"243":{},"247":{},"254":{},"255":{},"256":{},"260":{},"262":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["configuration#configurecorrelationdataprovid",{"_index":2619,"title":{},"name":{},"text":{"43":{}},"component":{}}],["configuration#onshutdown",{"_index":3734,"title":{},"name":{},"text":{"60":{}},"component":{}}],["configuration#onstart",{"_index":3733,"title":{},"name":{},"text":{"60":{}},"component":{}}],["configuration(producerconfigur",{"_index":5600,"title":{},"name":{},"text":{"107":{}},"component":{}}],["configuration.enabled=tru",{"_index":2833,"title":{},"name":{},"text":{"50":{}},"component":{}}],["configuration.eventprocessingconfigur",{"_index":5753,"title":{},"name":{},"text":{"117":{},"143":{}},"component":{}}],["configuration.sequenceddeadletterprocessor",{"_index":5764,"title":{},"name":{},"text":{"117":{}},"component":{}}],["configuration.spanfactory().registerspanattributeprovider(new",{"_index":2955,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configurationlisten",{"_index":6432,"title":{},"name":{},"text":{"147":{}},"component":{}}],["configurationresourceinjector",{"_index":4387,"title":{},"name":{},"text":{"63":{}},"component":{}}],["configurationscopeawareprovider(configur",{"_index":2209,"title":{},"name":{},"text":{"32":{},"85":{}},"component":{}}],["configure(configur",{"_index":2915,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configure_plugin",{"_index":6728,"title":{},"name":{},"text":{"164":{}},"component":{}}],["configureaggreg",{"_index":1874,"title":{},"name":{},"text":{"29":{}},"component":{}}],["configureaggregate(giftcard.class",{"_index":1147,"title":{},"name":{},"text":{"13":{},"29":{}},"component":{}}],["configureaggregate(giftcardconfigur",{"_index":4666,"title":{},"name":{},"text":{"71":{}},"component":{}}],["configureaggregatewithcache(configur",{"_index":4714,"title":{},"name":{},"text":{"71":{}},"component":{}}],["configureasynchronouscommandbus(configur",{"_index":2026,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configurecache(config",{"_index":4715,"title":{},"name":{},"text":{"71":{}},"component":{}}],["configurecommandbu",{"_index":2638,"title":{},"name":{},"text":{"44":{}},"component":{}}],["configurecorrelationdataproviders(config",{"_index":2620,"title":{},"name":{},"text":{"43":{}},"component":{}}],["configuredeadletterqueue(eventprocessingconfigur",{"_index":4899,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["configuredefaultmetrics(configur",{"_index":2828,"title":{},"name":{},"text":{"50":{}},"component":{}}],["configuredisruptorcommandbus(configur",{"_index":2078,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configureenqueuepolicy(eventprocessingconfigur",{"_index":4972,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["configureeventbus(eventstorageengin",{"_index":2677,"title":{},"name":{},"text":{"44":{}},"component":{}}],["configureeventhandler(configur",{"_index":2442,"title":{},"name":{},"text":{"37":{}},"component":{}}],["configureeventprocessing(configur",{"_index":2685,"title":{},"name":{},"text":{"44":{}},"component":{}}],["configureeventserializer(c",{"_index":2380,"title":{},"name":{},"text":{"35":{}},"component":{}}],["configureeventserializer(configur",{"_index":1416,"title":{},"name":{},"text":{"24":{}},"component":{}}],["configureinitialtrackingtoken(eventprocessingconfigur",{"_index":5062,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configureinmemoryeventstorage(configur",{"_index":2372,"title":{},"name":{},"text":{"35":{}},"component":{}}],["configurejdbceventstorage(configur",{"_index":2333,"title":{},"name":{},"text":{"35":{}},"component":{}}],["configuremessageserializer(configur",{"_index":1415,"title":{},"name":{},"text":{"24":{}},"component":{}}],["configuremongoeventstorage(configur",{"_index":2363,"title":{},"name":{},"text":{"35":{}},"component":{}}],["configuremysaga(eventprocessingconfigur",{"_index":4416,"title":{},"name":{},"text":{"63":{}},"component":{}}],["configurepooledstreamingprocessor(eventprocessingconfigur",{"_index":5263,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configurepooledstreamingprocessors(eventprocessingconfigur",{"_index":5032,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configureprocessinggrouperrorhandling(eventprocessingconfigur",{"_index":4865,"title":{},"name":{},"text":{"79":{}},"component":{}}],["configureprocessordefault(eventprocessingconfigur",{"_index":5008,"title":{},"name":{},"text":{"80":{},"81":{}},"component":{}}],["configurequerybus(configur",{"_index":3043,"title":{},"name":{},"text":{"54":{}},"component":{}}],["configurer#oniniti",{"_index":3732,"title":{},"name":{},"text":{"60":{}},"component":{}}],["configurer#registerhandlerenhancerdefinit",{"_index":3370,"title":{},"name":{},"text":{"60":{}},"component":{}}],["configurer.configureaggregate(giftcardconfigur",{"_index":4716,"title":{},"name":{},"text":{"71":{}},"component":{}}],["configurer.configurecommandbu",{"_index":1999,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configurer.configurecommandbus(config",{"_index":2079,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configurer.configureembeddedeventstor",{"_index":2335,"title":{},"name":{},"text":{"35":{}},"component":{}}],["configurer.configureembeddedeventstore(config",{"_index":2373,"title":{},"name":{},"text":{"35":{}},"component":{}}],["configurer.configuremessagemonitor(commandbus.class",{"_index":2879,"title":{},"name":{},"text":{"50":{}},"component":{}}],["configurer.configuremessagemonitor(eventstore.class",{"_index":2867,"title":{},"name":{},"text":{"50":{}},"component":{}}],["configurer.configuremessagemonitor(querybus.class",{"_index":2880,"title":{},"name":{},"text":{"50":{}},"component":{}}],["configurer.configuremessagemonitor(trackingeventprocessor.class",{"_index":2876,"title":{},"name":{},"text":{"50":{}},"component":{}}],["configurer.configurequerybu",{"_index":3044,"title":{},"name":{},"text":{"54":{}},"component":{}}],["configurer.configureserializer(configur",{"_index":1414,"title":{},"name":{},"text":{"24":{}},"component":{}}],["configurer.configurespanfactory(c",{"_index":2977,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configurer.configurespanfactory(configur",{"_index":2916,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configurer.defaultconfigur",{"_index":2975,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configurer.eventprocess",{"_index":2446,"title":{},"name":{},"text":{"37":{},"44":{},"79":{},"80":{},"81":{}},"component":{}}],["configurer.eventprocessing().registerdeadletterqueu",{"_index":4907,"title":{},"name":{},"text":{"79":{},"113":{}},"component":{}}],["configurer.eventprocessing().registerdeadletterqueueprovid",{"_index":4918,"title":{},"name":{},"text":{"79":{}},"component":{}}],["configurer.eventprocessing(eventprocessingconfigur",{"_index":4432,"title":{},"name":{},"text":{"65":{}},"component":{}}],["configurer.eventprocessing(eventprocessingconfigurer::usingpooledstreamingeventprocessor",{"_index":5030,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configurer.eventprocessing(eventprocessingconfigurer::usingsubscribingeventprocessor",{"_index":5272,"title":{},"name":{},"text":{"81":{}},"component":{}}],["configurer.eventprocessing(eventprocessingconfigurer::usingtrackingeventprocessor",{"_index":5011,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configurer.oniniti",{"_index":2016,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configurer.registercompon",{"_index":4388,"title":{},"name":{},"text":{"63":{}},"component":{}}],["configurer.registercomponent(axonserverconfiguration.class",{"_index":7152,"title":{},"name":{},"text":{"180":{}},"component":{}}],["configurer.registercomponent(routingstrategy.class",{"_index":2118,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configurer.registercomponent(sagastore.class",{"_index":4435,"title":{},"name":{},"text":{"65":{}},"component":{}}],["configurer.registerdeadletterpolicy(\"mi",{"_index":4973,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["configurer.registereventhandler(config",{"_index":2443,"title":{},"name":{},"text":{"37":{}},"component":{}}],["configurer.registereventupcaster(config",{"_index":2521,"title":{},"name":{},"text":{"38":{}},"component":{}}],["configurer.registerhandlerenhancerdefinition(config",{"_index":5404,"title":{},"name":{},"text":{"93":{}},"component":{}}],["configurer.registermessagehandler(config",{"_index":2445,"title":{},"name":{},"text":{"37":{}},"component":{}}],["configurer.registermodule(kafkamessagesourceconfigur",{"_index":5535,"title":{},"name":{},"text":{"104":{}},"component":{}}],["configurerepository(c",{"_index":1876,"title":{},"name":{},"text":{"29":{}},"component":{}}],["configurermodul",{"_index":2014,"title":{},"name":{},"text":{"31":{},"50":{},"61":{},"79":{},"80":{},"81":{},"113":{}},"component":{}}],["configurermodule.ord",{"_index":3893,"title":{},"name":{},"text":{"61":{}},"component":{}}],["configureroutingstrategy(configur",{"_index":2116,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configuresegmentcount(eventprocessingconfigur",{"_index":5119,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configuresequencingpolicy(eventprocessingconfigur",{"_index":5134,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configuresimplecommandbus(configur",{"_index":1998,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configuresnapshotfilter(config",{"_index":4681,"title":{},"name":{},"text":{"71":{}},"component":{}}],["configuresnapshottrigger(config",{"_index":4664,"title":{},"name":{},"text":{"71":{}},"component":{}}],["configurespanfactory(c",{"_index":2976,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configurespanfactory(spanfactori",{"_index":2957,"title":{},"name":{},"text":{"52":{}},"component":{}}],["configurestreamablekafkasource(eventprocessingconfigur",{"_index":5559,"title":{},"name":{},"text":{"104":{}},"component":{}}],["configuresubscribablekafkasource(eventprocessingconfigur",{"_index":5549,"title":{},"name":{},"text":{"104":{}},"component":{}}],["configuresubscribingprocessors(eventprocessingconfigur",{"_index":5274,"title":{},"name":{},"text":{"81":{}},"component":{}}],["configuretags(config",{"_index":6482,"title":{},"name":{},"text":{"150":{}},"component":{}}],["configurethreadcount(eventprocessingconfigur",{"_index":5147,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configuretokenclaimvalues(eventprocessingconfigur",{"_index":5082,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configuretrackingprocessor(eventprocessingconfigur",{"_index":5261,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configuretrackingprocessors(eventprocessingconfigur",{"_index":5013,"title":{},"name":{},"text":{"80":{}},"component":{}}],["configureupcasters(configur",{"_index":2519,"title":{},"name":{},"text":{"38":{}},"component":{}}],["confirm",{"_index":2218,"title":{"199-6":{},"199-10":{},"199-14":{}},"name":{},"text":{"33":{},"42":{},"107":{},"108":{},"139":{},"142":{},"149":{},"172":{},"176":{},"200":{},"234":{}},"component":{}}],["confirmationmod",{"_index":5587,"title":{},"name":{},"text":{"107":{}},"component":{}}],["confirmationmode(confirmationmod",{"_index":5601,"title":{},"name":{},"text":{"107":{}},"component":{}}],["confirmpaymentcommand",{"_index":7710,"title":{},"name":{},"text":{"270":{}},"component":{}}],["conflict",{"_index":1864,"title":{"76":{}},"name":{"76":{}},"text":{"29":{},"35":{},"45":{},"61":{},"76":{},"198":{},"212":{}},"component":{}}],["conflictresolv",{"_index":2740,"title":{},"name":{},"text":{"45":{},"76":{}},"component":{}}],["confus",{"_index":3710,"title":{},"name":{},"text":{"60":{},"172":{}},"component":{}}],["congratul",{"_index":7764,"title":{},"name":{},"text":{"273":{},"274":{}},"component":{}}],["conjunct",{"_index":2742,"title":{},"name":{},"text":{"45":{},"60":{},"61":{},"111":{},"137":{},"143":{},"172":{}},"component":{}}],["connect",{"_index":254,"title":{"233":{},"264":{},"5-3":{},"144-18":{},"150-2":{},"165-4":{},"177-5":{},"203-2":{},"203-6":{},"203-25":{},"203-30":{},"203-32":{},"229-1":{},"234-3":{},"238-1":{},"238-2":{},"273-4":{}},"name":{},"text":{"3":{},"5":{},"23":{},"27":{},"31":{},"35":{},"46":{},"47":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"70":{},"80":{},"81":{},"101":{},"102":{},"104":{},"117":{},"119":{},"122":{},"137":{},"138":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"148":{},"149":{},"150":{},"154":{},"156":{},"161":{},"163":{},"165":{},"167":{},"171":{},"172":{},"173":{},"176":{},"177":{},"180":{},"184":{},"185":{},"196":{},"198":{},"203":{},"205":{},"212":{},"213":{},"214":{},"216":{},"218":{},"223":{},"225":{},"229":{},"234":{},"235":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"244":{},"245":{},"254":{},"256":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"272":{},"273":{},"274":{},"277":{},"280":{},"281":{}},"component":{}}],["connection.eventchannel",{"_index":6336,"title":{},"name":{},"text":{"144":{}},"component":{}}],["connection.eventtransformationchannel",{"_index":6343,"title":{},"name":{},"text":{"144":{}},"component":{}}],["connectiondetail",{"_index":3279,"title":{},"name":{},"text":{"60":{}},"component":{}}],["connectionfactori",{"_index":6264,"title":{},"name":{},"text":{"143":{}},"component":{}}],["connectionfactory.connect(contextname).adminchannel",{"_index":6266,"title":{},"name":{},"text":{"143":{}},"component":{}}],["connectionprovid",{"_index":2330,"title":{},"name":{},"text":{"35":{},"63":{},"65":{}},"component":{}}],["connectionprovider(connectionprovid",{"_index":2338,"title":{},"name":{},"text":{"35":{}},"component":{}}],["connection’",{"_index":2805,"title":{},"name":{},"text":{"47":{}},"component":{}}],["connector",{"_index":1222,"title":{"250":{},"23-7":{},"143-5":{}},"name":{},"text":{"23":{},"31":{},"35":{},"54":{},"60":{},"61":{},"101":{},"102":{},"128":{},"143":{},"144":{},"161":{},"251":{}},"component":{}}],["connector(commandbusconnector",{"_index":5972,"title":{},"name":{},"text":{"127":{}},"component":{}}],["connector(connector",{"_index":5477,"title":{},"name":{},"text":{"101":{}},"component":{}}],["connector.connect",{"_index":5480,"title":{},"name":{},"text":{"101":{}},"component":{}}],["consciou",{"_index":2555,"title":{},"name":{},"text":{"41":{}},"component":{}}],["conscious",{"_index":2394,"title":{},"name":{},"text":{"35":{}},"component":{}}],["consensu",{"_index":6463,"title":{"149-2":{}},"name":{},"text":{},"component":{}}],["consequ",{"_index":4176,"title":{"80-34":{}},"name":{},"text":{"61":{},"78":{},"79":{},"80":{},"117":{},"149":{},"277":{}},"component":{}}],["consid",{"_index":562,"title":{},"name":{},"text":{"3":{},"8":{},"11":{},"24":{},"27":{},"31":{},"37":{},"38":{},"40":{},"42":{},"46":{},"52":{},"56":{},"61":{},"63":{},"66":{},"71":{},"76":{},"79":{},"80":{},"97":{},"102":{},"144":{},"150":{},"151":{},"179":{},"184":{},"223":{},"241":{},"255":{},"277":{},"278":{}},"component":{}}],["consider",{"_index":958,"title":{"107-2":{},"144-12":{},"144-15":{},"169-2":{},"278-1":{}},"name":{},"text":{"7":{},"11":{},"17":{},"19":{},"27":{},"35":{},"77":{},"79":{},"80":{},"96":{},"97":{},"144":{},"157":{},"218":{},"277":{},"278":{}},"component":{}}],["consist",{"_index":1232,"title":{},"name":{},"text":{"23":{},"24":{},"28":{},"31":{},"38":{},"40":{},"52":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"75":{},"79":{},"107":{},"126":{},"140":{},"213":{},"218":{},"241":{},"255":{},"270":{},"277":{}},"component":{}}],["consistenthash",{"_index":5468,"title":{},"name":{},"text":{"101":{},"127":{}},"component":{}}],["consistenthash.equ",{"_index":3521,"title":{},"name":{},"text":{"60":{}},"component":{}}],["consistenthashchangelisten",{"_index":5947,"title":{},"name":{},"text":{"126":{},"127":{}},"component":{}}],["consol",{"_index":740,"title":{"5":{},"224":{},"228":{},"230":{},"231":{},"233":{},"235":{},"238":{},"247":{},"258":{},"260":{},"264":{},"268":{},"270":{},"273":{},"5-1":{},"5-3":{},"5-4":{},"5-5":{},"5-7":{},"5-13":{},"5-14":{},"5-15":{},"224-1":{},"229-1":{},"229-2":{},"233-1":{},"245-1":{},"260-1":{},"266-1":{},"267-2":{},"273-1":{},"273-2":{},"273-3":{},"273-4":{},"273-5":{}},"name":{"260":{},"270":{},"273":{}},"text":{"5":{},"14":{},"15":{},"16":{},"17":{},"19":{},"21":{},"60":{},"91":{},"138":{},"139":{},"146":{},"154":{},"155":{},"165":{},"167":{},"171":{},"172":{},"185":{},"196":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"258":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"276":{},"281":{}},"component":{"5":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{}}}],["console_faq",{"_index":762,"title":{},"name":{"5":{}},"text":{},"component":{}}],["console’",{"_index":6828,"title":{},"name":{},"text":{"171":{},"244":{},"247":{},"253":{},"270":{}},"component":{}}],["consolid",{"_index":7576,"title":{},"name":{},"text":{"232":{}},"component":{}}],["constant",{"_index":3213,"title":{},"name":{},"text":{"60":{},"277":{}},"component":{}}],["constantli",{"_index":4641,"title":{},"name":{},"text":{"71":{}},"component":{}}],["constitut",{"_index":4813,"title":{},"name":{},"text":{"78":{}},"component":{}}],["constraint",{"_index":2285,"title":{"195":{}},"name":{"195":{}},"text":{"35":{},"74":{},"195":{}},"component":{}}],["construct",{"_index":229,"title":{},"name":{},"text":{"3":{},"13":{},"26":{},"29":{},"31":{},"35":{},"38":{},"42":{},"52":{},"60":{},"61":{},"63":{},"65":{},"79":{},"80":{},"85":{},"101":{},"102":{},"104":{},"140":{},"184":{}},"component":{}}],["constructor",{"_index":1473,"title":{},"name":{},"text":{"24":{},"27":{},"28":{},"29":{},"33":{},"36":{},"38":{},"42":{},"43":{},"44":{},"50":{},"61":{},"63":{},"65":{},"66":{},"71":{},"73":{},"74":{},"75":{},"77":{},"78":{},"92":{},"278":{}},"component":{}}],["consul",{"_index":5984,"title":{},"name":{},"text":{"128":{}},"component":{}}],["consult",{"_index":1129,"title":{},"name":{},"text":{"10":{},"63":{},"65":{},"79":{},"196":{}},"component":{}}],["consum",{"_index":790,"title":{"104":{},"104-1":{},"104-2":{},"108-7":{}},"name":{"104":{}},"text":{"5":{},"29":{},"52":{},"56":{},"61":{},"63":{},"66":{},"80":{},"90":{},"104":{},"105":{},"106":{},"107":{},"108":{},"117":{},"151":{},"156":{},"197":{},"254":{},"270":{}},"component":{}}],["consumerconfigur",{"_index":5514,"title":{},"name":{},"text":{"104":{}},"component":{}}],["consumercount",{"_index":5538,"title":{},"name":{},"text":{"104":{}},"component":{}}],["consumercount(consumercount",{"_index":5547,"title":{},"name":{},"text":{"104":{}},"component":{}}],["consumerfactori",{"_index":5509,"title":{},"name":{},"text":{"104":{}},"component":{}}],["consumerfactory(consumerfactori",{"_index":5543,"title":{},"name":{},"text":{"104":{}},"component":{}}],["consumerfactory(map",{"_index":5513,"title":{},"name":{},"text":{"104":{}},"component":{}}],["consumerrecord",{"_index":5571,"title":{},"name":{},"text":{"106":{}},"component":{}}],["consumpt",{"_index":4077,"title":{},"name":{},"text":{"61":{},"104":{},"106":{},"107":{}},"component":{}}],["contact",{"_index":7411,"title":{},"name":{},"text":{"203":{},"245":{}},"component":{}}],["contactmovedev",{"_index":2582,"title":{},"name":{},"text":{"42":{}},"component":{}}],["contain",{"_index":330,"title":{"13-2":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"9":{},"13":{},"15":{},"21":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"35":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"93":{},"95":{},"104":{},"105":{},"106":{},"107":{},"114":{},"122":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"146":{},"147":{},"148":{},"149":{},"151":{},"152":{},"154":{},"155":{},"158":{},"167":{},"169":{},"170":{},"171":{},"172":{},"178":{},"184":{},"185":{},"192":{},"193":{},"195":{},"198":{},"201":{},"203":{},"205":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"215":{},"216":{},"221":{},"229":{},"232":{},"238":{},"241":{},"242":{},"256":{},"270":{},"273":{},"274":{},"276":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["containermanagedentitymanagerprovid",{"_index":2297,"title":{},"name":{},"text":{"35":{}},"component":{}}],["containerport",{"_index":624,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["containingclassname.methodname(argumentclass1",{"_index":3028,"title":{},"name":{},"text":{"52":{}},"component":{}}],["content",{"_index":927,"title":{"9":{},"11":{},"8-8":{},"8-9":{},"9-2":{},"9-3":{},"9-4":{},"9-5":{},"9-6":{},"10-2":{}},"name":{"9":{}},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"24":{},"31":{},"53":{},"63":{},"92":{},"95":{},"144":{},"147":{},"191":{},"199":{},"200":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"229":{},"242":{},"251":{},"255":{},"269":{},"270":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["contenttypeconvert",{"_index":1329,"title":{"24-14":{}},"name":{},"text":{"24":{},"60":{}},"component":{}}],["context",{"_index":188,"title":{"146":{},"206":{},"25-2":{},"80-63":{},"80-64":{},"137-28":{},"144-22":{},"146-3":{},"146-4":{},"146-6":{},"146-8":{},"151-6":{},"151-7":{},"171-10":{},"173-2":{},"203-15":{}},"name":{"146":{},"206":{}},"text":{"2":{},"3":{},"23":{},"25":{},"29":{},"31":{},"32":{},"34":{},"35":{},"37":{},"38":{},"40":{},"42":{},"44":{},"46":{},"47":{},"60":{},"61":{},"63":{},"70":{},"71":{},"73":{},"80":{},"85":{},"89":{},"92":{},"93":{},"117":{},"122":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"149":{},"151":{},"155":{},"159":{},"161":{},"162":{},"163":{},"170":{},"171":{},"172":{},"173":{},"175":{},"176":{},"178":{},"184":{},"185":{},"201":{},"203":{},"205":{},"206":{},"212":{},"213":{},"214":{},"216":{},"223":{},"232":{},"236":{},"270":{},"271":{}},"component":{}}],["context.tenantid().startswith(\"ten",{"_index":5731,"title":{},"name":{},"text":{"117":{}},"component":{}}],["context/appl",{"_index":6591,"title":{},"name":{},"text":{"161":{}},"component":{}}],["context_admin",{"_index":6607,"title":{},"name":{},"text":{"162":{},"164":{},"171":{}},"component":{}}],["context_adminv",{"_index":6740,"title":{},"name":{},"text":{"164":{}},"component":{}}],["contextadminservic",{"_index":6993,"title":{},"name":{},"text":{"173":{}},"component":{}}],["contextawareeventmultiupcast",{"_index":2483,"title":{},"name":{},"text":{"38":{}},"component":{}}],["contextawaresingleeventupcast",{"_index":2480,"title":{},"name":{},"text":{"38":{}},"component":{}}],["contextnam",{"_index":6267,"title":{},"name":{},"text":{"143":{},"185":{}},"component":{}}],["contextoverview",{"_index":6995,"title":{},"name":{},"text":{"173":{}},"component":{}}],["contexts_",{"_index":6382,"title":{},"name":{},"text":{"146":{}},"component":{}}],["contextu",{"_index":2175,"title":{},"name":{},"text":{"32":{}},"component":{}}],["contextupd",{"_index":7001,"title":{},"name":{},"text":{"173":{}},"component":{}}],["contibut",{"_index":884,"title":{},"name":{},"text":{},"component":{"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{}}}],["continu",{"_index":1714,"title":{},"name":{},"text":{"27":{},"44":{},"56":{},"63":{},"76":{},"79":{},"89":{},"90":{},"107":{},"141":{},"144":{},"165":{},"199":{},"200":{},"234":{},"241":{},"244":{},"268":{},"273":{},"274":{}},"component":{}}],["contrari",{"_index":4362,"title":{},"name":{},"text":{"63":{}},"component":{}}],["contrast",{"_index":1950,"title":{},"name":{},"text":{"31":{},"143":{},"151":{},"162":{}},"component":{}}],["contribut",{"_index":882,"title":{"6":{}},"name":{},"text":{"6":{},"60":{}},"component":{}}],["contributor",{"_index":3197,"title":{"60-5":{},"60-11":{},"60-16":{},"60-21":{},"60-26":{},"61-5":{},"61-10":{},"61-13":{},"61-18":{},"61-23":{},"61-27":{},"61-31":{},"61-36":{},"61-39":{},"61-43":{},"61-47":{},"61-52":{},"61-55":{},"61-60":{},"61-63":{},"61-66":{},"61-69":{},"61-72":{},"61-76":{},"61-81":{}},"name":{},"text":{"60":{},"61":{}},"component":{}}],["control",{"_index":121,"title":{"156":{},"159":{},"160":{},"162":{},"166":{},"167":{},"201":{},"140-1":{},"144-21":{},"151-12":{},"171-3":{},"185-11":{},"208-7":{},"278-8":{},"278-9":{}},"name":{"156":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"201":{}},"text":{"2":{},"3":{},"4":{},"8":{},"41":{},"44":{},"46":{},"50":{},"56":{},"60":{},"71":{},"79":{},"80":{},"93":{},"107":{},"122":{},"137":{},"138":{},"139":{},"140":{},"144":{},"146":{},"148":{},"149":{},"150":{},"151":{},"156":{},"157":{},"159":{},"160":{},"162":{},"163":{},"165":{},"167":{},"168":{},"169":{},"171":{},"172":{},"174":{},"176":{},"184":{},"185":{},"201":{},"203":{},"223":{},"224":{},"233":{},"247":{},"254":{},"267":{},"277":{},"278":{},"280":{}},"component":{}}],["control.initi",{"_index":6914,"title":{},"name":{},"text":{"172":{}},"component":{}}],["control.new",{"_index":6916,"title":{},"name":{},"text":{"172":{}},"component":{}}],["control.nr",{"_index":6915,"title":{},"name":{},"text":{"172":{}},"component":{}}],["control/token",{"_index":6543,"title":{},"name":{},"text":{"154":{}},"component":{}}],["controldb",{"_index":288,"title":{},"name":{},"text":{"3":{},"4":{},"140":{},"155":{},"172":{},"184":{},"185":{}},"component":{}}],["controldb;defrag_always=tru",{"_index":726,"title":{},"name":{},"text":{"4":{}},"component":{}}],["conveni",{"_index":1717,"title":{},"name":{},"text":{"27":{},"31":{},"32":{},"33":{},"54":{},"56":{},"66":{},"80":{},"97":{},"151":{},"270":{},"275":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["convent",{"_index":1089,"title":{"9-1":{}},"name":{},"text":{"9":{},"24":{},"25":{},"35":{},"277":{}},"component":{}}],["convers",{"_index":1504,"title":{},"name":{},"text":{"24":{},"38":{},"232":{}},"component":{}}],["convert",{"_index":1394,"title":{},"name":{},"text":{"24":{},"38":{},"56":{},"71":{},"97":{},"106":{},"108":{},"185":{},"192":{}},"component":{}}],["converter’",{"_index":5622,"title":{},"name":{},"text":{"107":{}},"component":{}}],["cook",{"_index":919,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cookeri",{"_index":921,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cooki",{"_index":672,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["cool",{"_index":2070,"title":{},"name":{},"text":{"31":{},"151":{}},"component":{}}],["coolingdownperiod",{"_index":2069,"title":{},"name":{},"text":{"31":{}},"component":{}}],["cooper",{"_index":7545,"title":{},"name":{},"text":{"218":{}},"component":{}}],["coordin",{"_index":1245,"title":{},"name":{},"text":{"23":{},"46":{},"61":{},"70":{},"80":{},"139":{},"149":{},"158":{}},"component":{}}],["coordinatorexecutorbuild",{"_index":5156,"title":{},"name":{},"text":{"80":{}},"component":{}}],["cope",{"_index":2450,"title":{},"name":{},"text":{"38":{},"79":{},"151":{}},"component":{}}],["copi",{"_index":290,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"23":{},"38":{},"43":{},"95":{},"117":{},"137":{},"138":{},"139":{},"140":{},"141":{},"149":{},"151":{},"155":{},"170":{},"184":{},"273":{},"277":{}},"component":{}}],["copyright",{"_index":3949,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cor",{"_index":6850,"title":{},"name":{},"text":{"172":{},"203":{}},"component":{}}],["core",{"_index":6,"title":{"16-1":{},"275-3":{},"276-6":{}},"name":{},"text":{"1":{},"29":{},"31":{},"42":{},"56":{},"61":{},"75":{},"140":{},"160":{},"163":{},"165":{},"255":{},"275":{},"276":{},"277":{},"278":{}},"component":{}}],["corner",{"_index":7630,"title":{},"name":{},"text":{"256":{},"270":{}},"component":{}}],["correct",{"_index":685,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"28":{},"33":{},"35":{},"36":{},"40":{},"44":{},"61":{},"70":{},"71":{},"74":{},"77":{},"78":{},"80":{},"90":{},"103":{},"114":{},"138":{},"143":{},"184":{},"201":{},"218":{},"256":{},"278":{},"281":{}},"component":{}}],["correctli",{"_index":391,"title":{},"name":{},"text":{"3":{},"28":{},"35":{},"50":{},"60":{},"61":{},"66":{},"68":{},"79":{},"104":{},"117":{},"184":{},"198":{},"199":{},"212":{},"271":{},"280":{},"282":{}},"component":{}}],["correl",{"_index":2588,"title":{"43":{},"43-1":{},"43-5":{},"49-1":{},"255-7":{}},"name":{"43":{}},"text":{"43":{},"44":{},"49":{},"52":{},"60":{},"61":{},"79":{},"255":{}},"component":{}}],["correlationdata",{"_index":2612,"title":{},"name":{},"text":{"43":{}},"component":{}}],["correlationdata.put(\"usernam",{"_index":2617,"title":{},"name":{},"text":{"43":{}},"component":{}}],["correlationdatafor(messag",{"_index":2611,"title":{},"name":{},"text":{"43":{}},"component":{}}],["correlationdatainterceptor<>(config.correlationdataprovid",{"_index":2005,"title":{},"name":{},"text":{"31":{}},"component":{}}],["correlationdataprovid",{"_index":2594,"title":{},"name":{},"text":{"43":{},"49":{},"60":{},"61":{}},"component":{}}],["correlationdataproviderconfigur",{"_index":2621,"title":{},"name":{},"text":{"43":{}},"component":{}}],["correlationid",{"_index":2595,"title":{},"name":{},"text":{"43":{}},"component":{}}],["correlationprovid",{"_index":5735,"title":{},"name":{},"text":{"117":{}},"component":{}}],["correspond",{"_index":1446,"title":{},"name":{},"text":{"24":{},"32":{},"35":{},"52":{},"53":{},"56":{},"63":{},"108":{},"117":{},"142":{},"163":{},"172":{},"241":{},"270":{},"271":{},"273":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["corrupt",{"_index":2059,"title":{},"name":{},"text":{"31":{},"35":{},"61":{},"101":{}},"component":{}}],["cost",{"_index":739,"title":{"5-1":{}},"name":{},"text":{"24":{},"89":{},"130":{},"137":{},"151":{}},"component":{}}],["costli",{"_index":5247,"title":{},"name":{},"text":{"80":{}},"component":{}}],["couldn’t",{"_index":3696,"title":{},"name":{},"text":{"60":{}},"component":{}}],["count",{"_index":828,"title":{"70-1":{},"158-1":{}},"name":{},"text":{"5":{},"23":{},"50":{},"71":{},"80":{},"97":{},"104":{},"151":{},"156":{},"172":{},"190":{},"193":{},"194":{},"195":{},"255":{},"256":{}},"component":{}}],["count(//customerid",{"_index":7215,"title":{},"name":{},"text":{"192":{}},"component":{}}],["count=16",{"_index":5165,"title":{},"name":{},"text":{"80":{}},"component":{}}],["count=32",{"_index":5166,"title":{},"name":{},"text":{"80":{}},"component":{}}],["count=4",{"_index":5152,"title":{},"name":{},"text":{"80":{},"81":{}},"component":{}}],["count=8",{"_index":6109,"title":{},"name":{},"text":{"138":{}},"component":{}}],["countbikestatusesbybiketype(str",{"_index":7890,"title":{},"name":{},"text":{"277":{}},"component":{}}],["countcardsummariesqueri",{"_index":5679,"title":{},"name":{},"text":{"112":{}},"component":{}}],["countcardsummariesquery(v",{"_index":5681,"title":{},"name":{},"text":{"112":{}},"component":{}}],["countchangedupd",{"_index":5691,"title":{},"name":{},"text":{"112":{}},"component":{}}],["counter",{"_index":2868,"title":{},"name":{},"text":{"50":{},"51":{},"135":{}},"component":{}}],["counterpart",{"_index":2328,"title":{},"name":{},"text":{"35":{},"66":{}},"component":{}}],["countri",{"_index":5435,"title":{},"name":{},"text":{"97":{},"150":{}},"component":{}}],["coupl",{"_index":1689,"title":{},"name":{},"text":{"27":{},"28":{},"31":{},"36":{},"43":{},"51":{},"54":{},"61":{},"75":{},"79":{},"80":{},"122":{},"126":{},"141":{},"235":{},"261":{},"277":{},"278":{}},"component":{}}],["cours",{"_index":1074,"title":{},"name":{},"text":{"8":{},"13":{},"31":{},"33":{},"46":{},"71":{},"79":{},"80":{},"150":{}},"component":{}}],["couto",{"_index":4126,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cover",{"_index":1171,"title":{"218-2":{}},"name":{},"text":{"14":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"30":{},"31":{},"34":{},"39":{},"55":{},"56":{},"61":{},"64":{},"67":{},"70":{},"72":{},"75":{},"79":{},"80":{},"81":{},"97":{},"152":{},"196":{},"277":{}},"component":{}}],["coverag",{"_index":3557,"title":{},"name":{},"text":{"60":{}},"component":{}}],["cptcheesebeard",{"_index":3867,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cpu",{"_index":1997,"title":{},"name":{},"text":{"31":{},"101":{},"196":{},"255":{},"256":{},"270":{},"271":{}},"component":{}}],["cqr",{"_index":1211,"title":{},"name":{},"text":{"22":{},"29":{},"58":{},"66":{},"75":{}},"component":{}}],["craft",{"_index":7556,"title":{},"name":{},"text":{"224":{},"233":{}},"component":{}}],["crash",{"_index":3898,"title":{},"name":{},"text":{"61":{},"218":{}},"component":{}}],["creat",{"_index":219,"title":{"276":{},"277":{},"278":{},"3-12":{},"5-2":{},"31-6":{},"71-2":{},"73-1":{},"146-8":{},"167-1":{},"184-5":{},"199-4":{},"199-8":{},"199-12":{},"273-1":{},"276-2":{},"276-4":{},"276-5":{},"276-6":{},"277-1":{},"277-2":{},"277-3":{},"277-9":{},"278-5":{},"278-9":{},"282-2":{}},"name":{"276":{},"277":{},"278":{},"280":{}},"text":{"3":{},"5":{},"7":{},"8":{},"9":{},"17":{},"19":{},"23":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"40":{},"42":{},"43":{},"44":{},"46":{},"52":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"71":{},"72":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"84":{},"88":{},"89":{},"92":{},"93":{},"95":{},"96":{},"97":{},"98":{},"103":{},"104":{},"107":{},"108":{},"114":{},"116":{},"117":{},"124":{},"129":{},"138":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"154":{},"161":{},"162":{},"165":{},"166":{},"167":{},"170":{},"171":{},"172":{},"173":{},"184":{},"185":{},"191":{},"196":{},"197":{},"199":{},"200":{},"205":{},"212":{},"214":{},"223":{},"225":{},"231":{},"234":{},"236":{},"239":{},"241":{},"244":{},"254":{},"256":{},"260":{},"261":{},"262":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["create(configur",{"_index":4988,"title":{},"name":{},"text":{"79":{}},"component":{}}],["create/remov",{"_index":7637,"title":{},"name":{},"text":{"258":{}},"component":{}}],["create/return",{"_index":5017,"title":{},"name":{},"text":{"80":{},"81":{}},"component":{}}],["create/upd",{"_index":7016,"title":{},"name":{},"text":{"173":{}},"component":{}}],["create_app",{"_index":6729,"title":{},"name":{},"text":{"164":{}},"component":{}}],["create_context",{"_index":6730,"title":{},"name":{},"text":{"164":{}},"component":{}}],["create_controldb_backup",{"_index":6731,"title":{},"name":{},"text":{"164":{}},"component":{}}],["create_if_miss",{"_index":1834,"title":{},"name":{},"text":{"28":{}},"component":{}}],["create_replication_group",{"_index":6732,"title":{},"name":{},"text":{"164":{}},"component":{}}],["createbikecommand",{"_index":7961,"title":{},"name":{},"text":{"278":{}},"component":{}}],["createcontext(createcontextrequest",{"_index":6997,"title":{},"name":{},"text":{"173":{}},"component":{}}],["createheadtoken",{"_index":5057,"title":{},"name":{},"text":{"80":{}},"component":{}}],["createinvoicecommand",{"_index":2222,"title":{},"name":{},"text":{"33":{},"62":{}},"component":{}}],["createinvoiceid",{"_index":4352,"title":{},"name":{},"text":{"62":{}},"component":{}}],["createnew",{"_index":4726,"title":{},"name":{},"text":{"73":{}},"component":{}}],["createnew(class",{"_index":4765,"title":{},"name":{},"text":{"75":{}},"component":{}}],["createorrechargecardcommand",{"_index":1830,"title":{},"name":{},"text":{"28":{}},"component":{}}],["createorupdateapplication(applicationrequest",{"_index":7017,"title":{},"name":{},"text":{"173":{}},"component":{}}],["createorupdateuser(createorupdateuserrequest",{"_index":7024,"title":{},"name":{},"text":{"173":{}},"component":{}}],["createreplicationgroup(createreplicationgrouprequest",{"_index":7008,"title":{},"name":{},"text":{"173":{}},"component":{}}],["createrepository(aggregatefactori",{"_index":2035,"title":{},"name":{},"text":{"31":{}},"component":{}}],["createschema",{"_index":2341,"title":{},"name":{},"text":{"35":{}},"component":{}}],["createshipmentid",{"_index":4350,"title":{},"name":{},"text":{"62":{}},"component":{}}],["createtailtoken",{"_index":5058,"title":{},"name":{},"text":{"80":{}},"component":{}}],["createtokenat(inst",{"_index":5059,"title":{},"name":{},"text":{"80":{}},"component":{}}],["createtokensince(dur",{"_index":5060,"title":{},"name":{},"text":{"80":{}},"component":{}}],["creation",{"_index":898,"title":{"73":{},"28-4":{},"52-13":{}},"name":{"73":{}},"text":{"7":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"44":{},"52":{},"60":{},"61":{},"63":{},"71":{},"73":{},"74":{},"75":{},"77":{},"79":{},"104":{},"107":{},"116":{},"137":{},"140":{},"142":{},"144":{},"146":{},"165":{},"171":{},"173":{},"185":{},"277":{},"278":{},"279":{}},"component":{}}],["creationpolici",{"_index":1822,"title":{},"name":{},"text":{"28":{},"60":{},"61":{}},"component":{}}],["creationpolicy(aggregatecreationpolicy.alway",{"_index":1826,"title":{},"name":{},"text":{"28":{}},"component":{}}],["creationpolicy(aggregatecreationpolicy.create_if_miss",{"_index":1828,"title":{},"name":{},"text":{"28":{},"85":{}},"component":{}}],["creationpolicy(alway",{"_index":4192,"title":{},"name":{},"text":{"61":{}},"component":{}}],["credenti",{"_index":1026,"title":{"159-1":{},"273-3":{}},"name":{},"text":{"8":{},"159":{},"230":{},"273":{},"274":{}},"component":{}}],["credit",{"_index":745,"title":{"5-6":{}},"name":{},"text":{"5":{},"33":{},"61":{}},"component":{}}],["criteria",{"_index":3055,"title":{},"name":{},"text":{"56":{},"79":{},"151":{},"277":{}},"component":{}}],["critic",{"_index":6070,"title":{},"name":{},"text":{"137":{},"241":{},"256":{}},"component":{}}],["cross",{"_index":1996,"title":{},"name":{},"text":{"31":{},"35":{},"203":{}},"component":{}}],["crucial",{"_index":2051,"title":{},"name":{},"text":{"31":{},"80":{},"231":{},"243":{},"254":{}},"component":{}}],["crud",{"_index":5048,"title":{},"name":{},"text":{"80":{}},"component":{}}],["cs.foreach(system.out::println",{"_index":3102,"title":{},"name":{},"text":{"56":{}},"component":{}}],["ctx.get(\"secur",{"_index":5905,"title":{},"name":{},"text":{"122":{}},"component":{}}],["ctx.haskey(\"secur",{"_index":5903,"title":{},"name":{},"text":{"122":{}},"component":{}}],["culinari",{"_index":924,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cumbersom",{"_index":2579,"title":{},"name":{},"text":{"42":{}},"component":{}}],["curiou",{"_index":4187,"title":{},"name":{},"text":{"61":{},"144":{}},"component":{}}],["curl",{"_index":6574,"title":{},"name":{},"text":{"158":{},"159":{},"162":{},"166":{},"277":{},"280":{}},"component":{}}],["current",{"_index":305,"title":{},"name":{},"text":{"3":{},"23":{},"24":{},"26":{},"29":{},"31":{},"32":{},"33":{},"36":{},"38":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"53":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"79":{},"80":{},"81":{},"83":{},"89":{},"111":{},"117":{},"119":{},"120":{},"126":{},"138":{},"140":{},"141":{},"142":{},"144":{},"151":{},"154":{},"163":{},"165":{},"170":{},"172":{},"176":{},"177":{},"178":{},"184":{},"185":{},"208":{},"223":{},"225":{},"241":{},"242":{},"243":{},"244":{},"245":{},"254":{},"255":{},"256":{},"270":{},"277":{},"278":{}},"component":{}}],["currentunitofwork.get",{"_index":2760,"title":{},"name":{},"text":{"46":{}},"component":{}}],["currentunitofwork.isstart",{"_index":2761,"title":{},"name":{},"text":{"46":{}},"component":{}}],["currentunitofwork.set(unitofwork",{"_index":2793,"title":{},"name":{},"text":{"46":{}},"component":{}}],["custom",{"_index":166,"title":{"106":{},"31-6":{},"43-5":{},"117-4":{},"151-4":{},"270-40":{}},"name":{},"text":{"2":{},"3":{},"8":{},"23":{},"24":{},"26":{},"28":{},"29":{},"31":{},"32":{},"35":{},"42":{},"43":{},"45":{},"47":{},"50":{},"52":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"77":{},"79":{},"80":{},"93":{},"94":{},"96":{},"106":{},"117":{},"127":{},"130":{},"137":{},"139":{},"143":{},"144":{},"145":{},"151":{},"165":{},"183":{},"184":{},"185":{},"205":{},"214":{},"270":{},"271":{},"274":{}},"component":{}}],["customcommandgateway(commandbu",{"_index":1985,"title":{},"name":{},"text":{"31":{}},"component":{}}],["customcorrelationdataprovid",{"_index":2601,"title":{},"name":{},"text":{"43":{}},"component":{}}],["customenqueuepolici",{"_index":4962,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["customerid",{"_index":1443,"title":{},"name":{},"text":{"24":{},"192":{}},"component":{}}],["customiz",{"_index":2349,"title":{},"name":{},"text":{"35":{},"60":{},"77":{},"127":{}},"component":{}}],["customroutingannot",{"_index":2108,"title":{},"name":{},"text":{"31":{}},"component":{}}],["customroutingproperti",{"_index":4791,"title":{},"name":{},"text":{"77":{}},"component":{}}],["customsourc",{"_index":5794,"title":{},"name":{},"text":{"117":{}},"component":{}}],["customspanattributesprovid",{"_index":2951,"title":{},"name":{},"text":{"52":{}},"component":{}}],["customtargettenantresolv",{"_index":5741,"title":{},"name":{},"text":{"117":{}},"component":{}}],["cve",{"_index":4138,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cve’",{"_index":4174,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cycl",{"_index":813,"title":{"63-1":{}},"name":{},"text":{"5":{},"28":{},"31":{},"60":{},"63":{},"65":{},"75":{},"80":{},"110":{}},"component":{}}],["d",{"_index":380,"title":{},"name":{},"text":{"3":{},"146":{},"161":{},"163":{},"165":{},"171":{},"172":{},"184":{},"280":{}},"component":{}}],["d29775ea",{"_index":7943,"title":{},"name":{},"text":{"277":{}},"component":{}}],["d2d1",{"_index":7284,"title":{},"name":{},"text":{"199":{}},"component":{}}],["dactiverecipes=org.axonframework.migration.upgradeaxonframework_4_7_javax",{"_index":1662,"title":{},"name":{},"text":{"26":{}},"component":{}}],["dactiverecipes=org.openrewrite.java.spring.boot3.upgradespringboot_3_0,org.axonframework.migration.upgradeaxonframework_4_7_jakarta",{"_index":1665,"title":{},"name":{},"text":{"26":{}},"component":{}}],["dakr0013",{"_index":4129,"title":{},"name":{},"text":{"61":{}},"component":{}}],["damir",{"_index":4269,"title":{},"name":{},"text":{"61":{}},"component":{}}],["darchetypeartifactid=pom",{"_index":7813,"title":{},"name":{},"text":{"276":{}},"component":{}}],["darchetypegroupid=org.codehaus.mojo.archetyp",{"_index":7812,"title":{},"name":{},"text":{"276":{}},"component":{}}],["darchetypeversion=releas",{"_index":7814,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dark/light",{"_index":6038,"title":{},"name":{},"text":{"137":{}},"component":{}}],["dartifactid=bik",{"_index":7816,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dartifactid=cor",{"_index":7830,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dartifactid=rent",{"_index":7828,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dasboard",{"_index":7574,"title":{},"name":{},"text":{"232":{}},"component":{}}],["dashboard",{"_index":2247,"title":{"235":{},"238":{},"238-2":{}},"name":{"238":{}},"text":{"33":{},"80":{},"137":{},"167":{},"171":{},"172":{},"196":{},"198":{},"200":{},"229":{},"234":{},"235":{},"238":{},"241":{},"260":{},"261":{},"262":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"273":{},"274":{},"280":{},"281":{}},"component":{}}],["dashboard’",{"_index":5180,"title":{},"name":{},"text":{"80":{}},"component":{}}],["data",{"_index":318,"title":{"246":{},"5-13":{},"5-15":{},"40-1":{},"40-2":{},"43-1":{},"43-5":{},"49-1":{},"151-12":{},"203-24":{},"244-2":{}},"name":{"246":{}},"text":{"3":{},"5":{},"24":{},"25":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"40":{},"42":{},"43":{},"44":{},"49":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"76":{},"79":{},"80":{},"93":{},"97":{},"101":{},"112":{},"116":{},"117":{},"119":{},"121":{},"137":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"149":{},"151":{},"154":{},"155":{},"156":{},"162":{},"167":{},"171":{},"172":{},"176":{},"184":{},"185":{},"191":{},"192":{},"194":{},"196":{},"199":{},"203":{},"213":{},"223":{},"236":{},"240":{},"245":{},"254":{},"255":{},"273":{},"277":{},"278":{}},"component":{}}],["data/axonserver.log",{"_index":327,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data/plugins/bundl",{"_index":321,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data/plugins/cach",{"_index":324,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data1",{"_index":476,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data1:/axonserver/data",{"_index":453,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data2",{"_index":488,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data2:/axonserver/data",{"_index":464,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data3",{"_index":494,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["data3:/axonserver/data",{"_index":470,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["databas",{"_index":142,"title":{"4-2":{},"97-1":{},"137-7":{},"140-1":{}},"name":{},"text":{"2":{},"4":{},"17":{},"19":{},"23":{},"25":{},"29":{},"33":{},"35":{},"42":{},"46":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"79":{},"80":{},"84":{},"89":{},"97":{},"116":{},"117":{},"119":{},"137":{},"140":{},"146":{},"148":{},"154":{},"172":{},"176":{},"185":{},"223":{},"254":{},"277":{}},"component":{}}],["database/servic",{"_index":2706,"title":{},"name":{},"text":{"44":{}},"component":{}}],["datadog",{"_index":6009,"title":{},"name":{},"text":{"131":{}},"component":{}}],["datafil",{"_index":6228,"title":{},"name":{},"text":{"142":{}},"component":{}}],["datainputstream",{"_index":1454,"title":{},"name":{},"text":{"24":{}},"component":{}}],["dataoutputstream",{"_index":1455,"title":{},"name":{},"text":{"24":{}},"component":{}}],["datasourc",{"_index":702,"title":{"4-1":{}},"name":{},"text":{"35":{},"63":{},"65":{},"80":{},"117":{},"146":{}},"component":{}}],["datasource(datasourc",{"_index":4431,"title":{},"name":{},"text":{"63":{}},"component":{}}],["datasourceproperti",{"_index":5745,"title":{},"name":{},"text":{"117":{}},"component":{}}],["date",{"_index":3068,"title":{},"name":{},"text":{"56":{},"68":{},"71":{},"137":{},"139":{},"149":{},"151":{},"192":{},"212":{},"270":{},"277":{},"278":{}},"component":{}}],["datetim",{"_index":7474,"title":{},"name":{},"text":{"209":{},"212":{},"214":{}},"component":{}}],["daunt",{"_index":7996,"title":{},"name":{},"text":{"279":{}},"component":{}}],["day",{"_index":2221,"title":{},"name":{},"text":{"33":{},"63":{},"68":{},"71":{},"83":{},"87":{},"117":{},"195":{},"247":{},"253":{}},"component":{}}],["day(timestamp",{"_index":7210,"title":{},"name":{},"text":{"192":{}},"component":{}}],["daylight",{"_index":5436,"title":{},"name":{},"text":{"97":{}},"component":{}}],["db",{"_index":708,"title":{"33-4":{}},"name":{},"text":{"4":{},"32":{},"33":{},"60":{},"137":{},"138":{},"140":{},"153":{},"172":{},"176":{},"277":{}},"component":{}}],["dbschedul",{"_index":2171,"title":{},"name":{},"text":{"32":{},"60":{}},"component":{}}],["dbschedulerdeadlinemanag",{"_index":2146,"title":{},"name":{},"text":{"32":{},"61":{},"84":{}},"component":{}}],["dbschedulerdeadlinemanager.build",{"_index":2210,"title":{},"name":{},"text":{"32":{}},"component":{}}],["dbschedulereventschedul",{"_index":2251,"title":{},"name":{},"text":{"33":{}},"component":{}}],["dbschedulereventseri",{"_index":2229,"title":{},"name":{},"text":{"33":{}},"component":{}}],["dd't'hh:mm:ss.sssx",{"_index":7166,"title":{},"name":{},"text":{"183":{}},"component":{}}],["ddd",{"_index":7168,"title":{},"name":{},"text":{"185":{},"278":{}},"component":{}}],["de",{"_index":1386,"title":{},"name":{},"text":{"24":{},"60":{},"61":{},"106":{},"121":{}},"component":{}}],["de)seri",{"_index":1364,"title":{},"name":{},"text":{"24":{},"61":{},"108":{}},"component":{}}],["deactiv",{"_index":6299,"title":{"144-27":{}},"name":{},"text":{"144":{}},"component":{}}],["dead",{"_index":863,"title":{"89":{},"90":{},"91":{},"113":{},"251":{},"79-11":{},"79-12":{},"79-13":{},"79-16":{},"79-19":{},"79-20":{},"79-21":{},"79-22":{},"79-23":{},"79-24":{},"89-1":{},"89-2":{},"114-4":{},"117-8":{}},"name":{},"text":{"5":{},"45":{},"60":{},"61":{},"79":{},"88":{},"89":{},"90":{},"91":{},"113":{},"114":{},"117":{},"247":{},"251":{},"253":{},"258":{},"273":{}},"component":{}}],["dead_letter_entri",{"_index":4892,"title":{},"name":{},"text":{"79":{}},"component":{}}],["deadlett",{"_index":2753,"title":{},"name":{},"text":{"45":{},"60":{},"61":{},"79":{},"114":{}},"component":{}}],["deadletter.message().getidentifier().equals(firstletterid",{"_index":4951,"title":{},"name":{},"text":{"79":{}},"component":{}}],["deadletter.message().getpayload",{"_index":4932,"title":{},"name":{},"text":{"79":{}},"component":{}}],["deadletterprocessor",{"_index":4927,"title":{},"name":{},"text":{"79":{},"117":{}},"component":{}}],["deadletterprovid",{"_index":5346,"title":{},"name":{},"text":{"89":{}},"component":{}}],["deadletterqueu",{"_index":3998,"title":{},"name":{},"text":{"61":{}},"component":{}}],["deadletterqueueconfigurermodul",{"_index":4906,"title":{},"name":{},"text":{"79":{},"113":{}},"component":{}}],["deadletterqueueoverflowexcept",{"_index":4909,"title":{},"name":{},"text":{"79":{}},"component":{}}],["deadletterqueueprovid",{"_index":5350,"title":{},"name":{},"text":{"89":{}},"component":{}}],["deadletterqueueproviderconfigurermodul",{"_index":5351,"title":{},"name":{},"text":{"89":{}},"component":{}}],["deadlettersequ",{"_index":4940,"title":{},"name":{},"text":{"79":{}},"component":{}}],["deadlin",{"_index":25,"title":{"32":{},"34":{},"85":{},"86":{},"87":{},"32-1":{},"32-2":{},"33-1":{},"52-33":{},"66-9":{},"117-9":{}},"name":{"32":{}},"text":{"1":{},"5":{},"24":{},"32":{},"33":{},"34":{},"45":{},"52":{},"60":{},"61":{},"66":{},"83":{},"84":{},"85":{},"86":{},"87":{},"103":{},"117":{},"120":{}},"component":{}}],["deadlinecancelingcompon",{"_index":2161,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlinehandl",{"_index":2182,"title":{},"name":{},"text":{"32":{},"60":{}},"component":{}}],["deadlinehandler(deadlinenam",{"_index":2186,"title":{},"name":{},"text":{"32":{},"85":{}},"component":{}}],["deadlinehandler`when",{"_index":2141,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlineid",{"_index":2153,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlinejob.execute(${deadlinename},${deadlinepayloadclass",{"_index":2997,"title":{},"name":{},"text":{"52":{}},"component":{}}],["deadlinemanag",{"_index":2140,"title":{},"name":{},"text":{"32":{},"45":{},"60":{},"61":{},"83":{},"84":{},"85":{},"86":{},"103":{}},"component":{}}],["deadlinemanager.cancelallwithinscope(expired_gift_card",{"_index":5304,"title":{},"name":{},"text":{"83":{}},"component":{}}],["deadlinemanager.cancelschedule(\"mydeadlin",{"_index":2163,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlinemanager.schedul",{"_index":2178,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlinemanager.schedule(duration.ofmillis(500",{"_index":2154,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlinemanager.schedule(trigg",{"_index":5323,"title":{},"name":{},"text":{"85":{}},"component":{}}],["deadlinemanagerclass}.cancelall(${deadlinenam",{"_index":2995,"title":{},"name":{},"text":{"52":{}},"component":{}}],["deadlinemanagerclass}.cancelallwithinscope(${deadlinenam",{"_index":2996,"title":{},"name":{},"text":{"52":{}},"component":{}}],["deadlinemanagerclass}.cancelschedule(${deadlinenam",{"_index":2993,"title":{},"name":{},"text":{"52":{}},"component":{}}],["deadlinemanagerclass}.schedule(${deadlinenam",{"_index":2992,"title":{},"name":{},"text":{"52":{}},"component":{}}],["deadlinemessag",{"_index":4478,"title":{},"name":{},"text":{"66":{}},"component":{}}],["deadlinenam",{"_index":2165,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlinepayload",{"_index":2188,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlineschedulingcompon",{"_index":2151,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlineschedulingwithpayloadcompon",{"_index":2176,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadline’",{"_index":2189,"title":{},"name":{},"text":{"32":{}},"component":{}}],["deadlock",{"_index":5089,"title":{},"name":{},"text":{"80":{}},"component":{}}],["deal",{"_index":1122,"title":{},"name":{},"text":{"10":{},"24":{},"26":{},"31":{},"33":{},"34":{},"41":{},"44":{},"60":{},"61":{},"63":{},"71":{},"79":{},"80":{},"81":{},"93":{},"101":{},"167":{},"276":{},"278":{}},"component":{}}],["dealt",{"_index":4612,"title":{},"name":{},"text":{"69":{}},"component":{}}],["debug",{"_index":1338,"title":{},"name":{},"text":{"24":{},"35":{},"52":{},"261":{},"270":{}},"component":{}}],["decent",{"_index":2386,"title":{},"name":{},"text":{"35":{}},"component":{}}],["decid",{"_index":161,"title":{"84":{}},"name":{"84":{}},"text":{"2":{},"5":{},"28":{},"31":{},"44":{},"56":{},"66":{},"73":{},"76":{},"78":{},"79":{},"80":{},"126":{},"144":{},"203":{},"223":{}},"component":{}}],["decide(deadlett",{"_index":4963,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["decis",{"_index":1807,"title":{},"name":{},"text":{"28":{},"36":{},"42":{},"44":{},"60":{},"61":{},"71":{},"73":{},"75":{},"77":{},"79":{},"208":{}},"component":{}}],["decisions.donotenqueu",{"_index":4966,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["decisions.enqueue(caus",{"_index":4969,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["decisions.evict",{"_index":4971,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["deciss",{"_index":4832,"title":{},"name":{},"text":{"78":{}},"component":{}}],["declar",{"_index":268,"title":{"275-2":{}},"name":{},"text":{"3":{},"25":{},"28":{},"29":{},"31":{},"35":{},"37":{},"44":{},"45":{},"46":{},"54":{},"57":{},"61":{},"71":{},"77":{},"78":{},"98":{},"144":{},"184":{},"267":{},"275":{},"276":{},"277":{}},"component":{}}],["decompos",{"_index":6002,"title":{},"name":{},"text":{"131":{}},"component":{}}],["decor",{"_index":5940,"title":{},"name":{},"text":{"126":{},"127":{},"280":{}},"component":{}}],["decoupl",{"_index":2564,"title":{},"name":{},"text":{"41":{},"80":{},"81":{},"276":{},"278":{}},"component":{}}],["decreas",{"_index":4620,"title":{"70-1":{},"158-1":{}},"name":{},"text":{"70":{},"79":{},"80":{},"125":{},"158":{},"172":{},"254":{}},"component":{}}],["dedic",{"_index":131,"title":{"199-4":{},"199-8":{},"199-12":{}},"name":{},"text":{"2":{},"3":{},"8":{},"11":{},"26":{},"38":{},"41":{},"58":{},"60":{},"61":{},"63":{},"71":{},"79":{},"80":{},"105":{},"107":{},"109":{},"121":{},"137":{},"138":{},"144":{},"184":{},"269":{},"270":{},"277":{},"282":{}},"component":{}}],["deduc",{"_index":4181,"title":{},"name":{},"text":{"61":{},"80":{},"104":{},"112":{}},"component":{}}],["deduct",{"_index":7332,"title":{},"name":{},"text":{"200":{}},"component":{}}],["deep",{"_index":4115,"title":{},"name":{},"text":{"61":{},"146":{}},"component":{}}],["deepequalsmatch",{"_index":4122,"title":{},"name":{},"text":{"61":{}},"component":{}}],["deeper",{"_index":7601,"title":{},"name":{},"text":{"243":{}},"component":{}}],["default",{"_index":302,"title":{"117-12":{},"151-3":{}},"name":{},"text":{"3":{},"5":{},"24":{},"25":{},"26":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"43":{},"44":{},"45":{},"46":{},"50":{},"52":{},"53":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"69":{},"70":{},"71":{},"75":{},"77":{},"79":{},"80":{},"81":{},"88":{},"89":{},"90":{},"91":{},"92":{},"94":{},"96":{},"97":{},"98":{},"99":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"108":{},"114":{},"116":{},"117":{},"118":{},"122":{},"126":{},"127":{},"128":{},"129":{},"130":{},"137":{},"138":{},"139":{},"141":{},"144":{},"146":{},"147":{},"151":{},"154":{},"155":{},"159":{},"160":{},"161":{},"162":{},"163":{},"165":{},"167":{},"170":{},"171":{},"172":{},"176":{},"177":{},"179":{},"180":{},"184":{},"185":{},"196":{},"198":{},"199":{},"200":{},"203":{},"205":{},"212":{},"213":{},"214":{},"216":{},"223":{},"236":{},"239":{},"241":{},"251":{},"254":{},"256":{},"270":{},"271":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["default=tru",{"_index":5989,"title":{},"name":{},"text":{"130":{}},"component":{}}],["defaultcommandgateway",{"_index":1934,"title":{},"name":{},"text":{"31":{},"60":{}},"component":{}}],["defaultconfigur",{"_index":2120,"title":{},"name":{},"text":{"31":{},"60":{},"61":{},"146":{}},"component":{}}],["defaultconfigurer.defaultconfigur",{"_index":1146,"title":{},"name":{},"text":{"13":{},"29":{},"31":{},"35":{},"43":{},"50":{},"53":{},"54":{},"65":{},"70":{},"71":{},"150":{}},"component":{}}],["defaultconfigurer.defaultconfiguration().registercompon",{"_index":4617,"title":{},"name":{},"text":{"69":{}},"component":{}}],["defaultconfigurer.jpaconfiguration(entitymanagerprovid",{"_index":2315,"title":{},"name":{},"text":{"35":{}},"component":{}}],["defaultconsumerfactori",{"_index":5511,"title":{"108-8":{}},"name":{},"text":{"104":{},"108":{}},"component":{}}],["defaultconsumerfactory<>(consumerconfigur",{"_index":5515,"title":{},"name":{},"text":{"104":{}},"component":{}}],["defaultcontext",{"_index":6404,"title":{},"name":{},"text":{"146":{}},"component":{}}],["defaultkafkamessageconvert",{"_index":5546,"title":{"108-2":{}},"name":{},"text":{"104":{},"106":{},"107":{}},"component":{}}],["defaultkafkamessageconverter.build",{"_index":5578,"title":{},"name":{},"text":{"106":{}},"component":{}}],["defaultmongotempl",{"_index":4406,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["defaultproducerfactori",{"_index":5590,"title":{"108-4":{}},"name":{},"text":{"107":{},"108":{}},"component":{}}],["defaultproducerfactory.build",{"_index":5591,"title":{},"name":{},"text":{"107":{}},"component":{}}],["defaultquerygateway",{"_index":3041,"title":{},"name":{},"text":{"54":{}},"component":{}}],["defaultseri",{"_index":1406,"title":{},"name":{},"text":{"24":{}},"component":{}}],["defaulttenantsourc",{"_index":5795,"title":{},"name":{},"text":{"117":{}},"component":{}}],["defaulttyp",{"_index":1496,"title":{},"name":{},"text":{"24":{}},"component":{}}],["defaultunitofwork",{"_index":2773,"title":{},"name":{},"text":{"46":{}},"component":{}}],["defaultunitofwork.startandget(messag",{"_index":2777,"title":{},"name":{},"text":{"46":{}},"component":{}}],["defens",{"_index":7472,"title":{},"name":{},"text":{"208":{}},"component":{}}],["defer",{"_index":3483,"title":{},"name":{},"text":{"60":{}},"component":{}}],["defin",{"_index":729,"title":{"44-15":{},"44-16":{},"44-17":{},"277-4":{},"278-3":{},"278-6":{},"282-3":{}},"name":{},"text":{"4":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"40":{},"44":{},"45":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"96":{},"101":{},"102":{},"106":{},"107":{},"108":{},"117":{},"122":{},"127":{},"139":{},"141":{},"147":{},"148":{},"149":{},"150":{},"154":{},"162":{},"165":{},"166":{},"170":{},"171":{},"172":{},"173":{},"185":{},"191":{},"196":{},"203":{},"206":{},"213":{},"216":{},"221":{},"234":{},"236":{},"239":{},"241":{},"242":{},"243":{},"254":{},"256":{},"267":{},"270":{},"272":{},"275":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["definit",{"_index":447,"title":{},"name":{},"text":{"3":{},"24":{},"35":{},"38":{},"60":{},"61":{},"71":{},"79":{},"81":{},"146":{},"184":{},"241":{},"276":{},"277":{},"278":{}},"component":{}}],["degrad",{"_index":148,"title":{},"name":{},"text":{"2":{},"151":{}},"component":{}}],["degre",{"_index":4838,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"267":{}},"component":{}}],["delay",{"_index":6100,"title":{},"name":{},"text":{"138":{},"143":{},"172":{},"262":{},"265":{},"267":{},"268":{},"269":{},"271":{},"274":{}},"component":{}}],["deleg",{"_index":2088,"title":{},"name":{},"text":{"31":{},"35":{},"52":{},"63":{},"65":{},"70":{},"80":{},"93":{},"115":{},"213":{},"216":{}},"component":{}}],["delegate.attribute(\"expectedvalu",{"_index":5394,"title":{},"name":{},"text":{"93":{}},"component":{}}],["delegate.attribute(\"metadatakey",{"_index":5393,"title":{},"name":{},"text":{"93":{}},"component":{}}],["delet",{"_index":870,"title":{"147-8":{}},"name":{},"text":{"5":{},"29":{},"52":{},"75":{},"137":{},"138":{},"139":{},"142":{},"144":{},"146":{},"147":{},"151":{},"161":{},"167":{},"171":{},"172":{},"173":{},"212":{},"228":{},"241":{},"247":{},"251":{},"253":{},"256":{},"277":{}},"component":{}}],["delete(identifi",{"_index":1869,"title":{},"name":{},"text":{"29":{}},"component":{}}],["delete/cr",{"_index":6053,"title":{},"name":{},"text":{"137":{}},"component":{}}],["delete_app",{"_index":6733,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_context",{"_index":6734,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_node_from_context",{"_index":6735,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_node_from_replication_group",{"_index":6736,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_plugin",{"_index":6737,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_replication_group",{"_index":6738,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_task",{"_index":6739,"title":{},"name":{},"text":{"164":{}},"component":{}}],["delete_us",{"_index":6661,"title":{},"name":{},"text":{"164":{}},"component":{}}],["deleteapplication(applicationid",{"_index":7018,"title":{},"name":{},"text":{"173":{}},"component":{}}],["deletecontext(deletecontextrequest",{"_index":6998,"title":{},"name":{},"text":{"173":{}},"component":{}}],["deletereplicationgroup(deletereplicationgrouprequest",{"_index":7009,"title":{},"name":{},"text":{"173":{}},"component":{}}],["deleteuser(deleteuserrequest",{"_index":7025,"title":{},"name":{},"text":{"173":{}},"component":{}}],["deliber",{"_index":7675,"title":{},"name":{},"text":{"266":{},"270":{}},"component":{}}],["delic",{"_index":4392,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["delimit",{"_index":7205,"title":{},"name":{},"text":{"192":{}},"component":{}}],["deliv",{"_index":1904,"title":{},"name":{},"text":{"29":{},"45":{},"62":{},"80":{},"122":{},"137":{},"218":{},"277":{},"278":{},"281":{}},"component":{}}],["deliveri",{"_index":1291,"title":{},"name":{},"text":{"23":{},"27":{},"79":{},"141":{},"185":{}},"component":{}}],["demand",{"_index":1241,"title":{},"name":{},"text":{"23":{},"137":{}},"component":{}}],["demarc",{"_index":4688,"title":{},"name":{},"text":{"71":{}},"component":{}}],["demo",{"_index":463,"title":{"274":{},"198-4":{},"200-2":{},"200-3":{},"200-4":{},"200-5":{},"274-2":{},"274-3":{}},"name":{"274":{}},"text":{"3":{},"5":{},"8":{},"184":{},"198":{},"199":{},"200":{},"234":{},"235":{},"238":{},"244":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"276":{},"279":{}},"component":{"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}}}],["demo.git",{"_index":1065,"title":{},"name":{},"text":{"8":{}},"component":{}}],["demonstr",{"_index":960,"title":{},"name":{},"text":{"7":{},"30":{},"55":{},"199":{},"206":{}},"component":{}}],["demystifi",{"_index":1519,"title":{"25-3":{}},"name":{},"text":{},"component":{}}],["denot",{"_index":6844,"title":{},"name":{},"text":{"172":{}},"component":{}}],["depart",{"_index":7580,"title":{},"name":{},"text":{"234":{}},"component":{}}],["depend",{"_index":237,"title":{"8-4":{},"61-17":{},"137-5":{},"275-2":{},"276-7":{}},"name":{},"text":{"3":{},"5":{},"8":{},"9":{},"19":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"38":{},"41":{},"42":{},"52":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"79":{},"80":{},"85":{},"89":{},"91":{},"101":{},"102":{},"103":{},"104":{},"108":{},"116":{},"122":{},"123":{},"127":{},"131":{},"135":{},"137":{},"138":{},"141":{},"143":{},"144":{},"146":{},"154":{},"165":{},"184":{},"185":{},"191":{},"192":{},"208":{},"229":{},"234":{},"235":{},"241":{},"254":{},"264":{},"267":{},"270":{},"273":{},"274":{},"275":{},"276":{},"281":{},"282":{}},"component":{}}],["dependabot",{"_index":3306,"title":{},"name":{},"text":{"60":{}},"component":{}}],["dependabot[bot",{"_index":3389,"title":{},"name":{},"text":{"60":{}},"component":{}}],["dependencymanag",{"_index":1313,"title":{},"name":{},"text":{"23":{},"273":{}},"component":{}}],["depict",{"_index":450,"title":{},"name":{},"text":{"3":{},"28":{},"43":{},"79":{},"142":{},"144":{},"146":{},"149":{},"162":{},"171":{},"184":{},"185":{}},"component":{}}],["deplet",{"_index":5301,"title":{},"name":{},"text":{"83":{}},"component":{}}],["deploy",{"_index":222,"title":{"3-13":{},"184-6":{}},"name":{},"text":{"3":{},"5":{},"14":{},"24":{},"60":{},"71":{},"131":{},"134":{},"135":{},"137":{},"140":{},"141":{},"145":{},"146":{},"153":{},"155":{},"168":{},"171":{},"181":{},"184":{},"185":{},"196":{},"231":{},"235":{},"270":{},"276":{},"278":{},"279":{}},"component":{}}],["deprec",{"_index":202,"title":{"177-6":{},"203-2":{}},"name":{},"text":{"2":{},"4":{},"26":{},"52":{},"60":{},"61":{},"71":{},"162":{},"177":{},"203":{},"212":{}},"component":{}}],["depth",{"_index":1195,"title":{},"name":{},"text":{"16":{},"61":{},"103":{},"254":{}},"component":{}}],["deregist",{"_index":4011,"title":{},"name":{},"text":{"61":{}},"component":{}}],["deriv",{"_index":2892,"title":{},"name":{},"text":{"51":{},"61":{},"74":{},"148":{},"176":{},"277":{}},"component":{}}],["descend",{"_index":3003,"title":{},"name":{},"text":{"52":{}},"component":{}}],["describ",{"_index":907,"title":{},"name":{},"text":{"7":{},"8":{},"24":{},"25":{},"27":{},"28":{},"29":{},"31":{},"32":{},"36":{},"38":{},"40":{},"42":{},"44":{},"49":{},"52":{},"53":{},"57":{},"58":{},"60":{},"61":{},"66":{},"68":{},"69":{},"73":{},"77":{},"79":{},"80":{},"101":{},"104":{},"109":{},"110":{},"112":{},"122":{},"128":{},"141":{},"146":{},"150":{},"165":{},"167":{},"170":{},"171":{},"254":{},"260":{},"273":{},"274":{},"276":{},"277":{},"281":{}},"component":{}}],["describeto(descript",{"_index":4520,"title":{},"name":{},"text":{"66":{}},"component":{}}],["descript",{"_index":895,"title":{},"name":{},"text":{"7":{},"13":{},"15":{},"21":{},"26":{},"38":{},"40":{},"42":{},"52":{},"61":{},"66":{},"75":{},"79":{},"128":{},"142":{},"143":{},"144":{},"146":{},"153":{},"157":{},"161":{},"162":{},"169":{},"171":{},"172":{},"176":{},"177":{},"179":{},"196":{},"256":{},"277":{}},"component":{}}],["descriptor",{"_index":600,"title":{"281-3":{}},"name":{},"text":{"3":{},"45":{},"184":{},"274":{},"275":{},"276":{},"281":{},"282":{}},"component":{}}],["deselect",{"_index":7708,"title":{},"name":{},"text":{"270":{}},"component":{}}],["deseri",{"_index":1327,"title":{"24-10":{}},"name":{},"text":{"24":{},"33":{},"60":{},"61":{},"63":{},"106":{},"124":{},"129":{}},"component":{}}],["deserv",{"_index":5267,"title":{},"name":{},"text":{"81":{}},"component":{}}],["design",{"_index":132,"title":{"278-1":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"11":{},"14":{},"15":{},"21":{},"22":{},"27":{},"28":{},"31":{},"45":{},"62":{},"71":{},"75":{},"79":{},"121":{},"141":{},"184":{},"185":{},"207":{},"224":{},"227":{},"232":{},"233":{},"237":{},"247":{},"254":{},"261":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["desir",{"_index":1073,"title":{},"name":{},"text":{"8":{},"9":{},"24":{},"27":{},"28":{},"35":{},"38":{},"44":{},"49":{},"57":{},"61":{},"66":{},"69":{},"75":{},"79":{},"80":{},"94":{},"96":{},"108":{},"143":{},"144":{},"172":{},"267":{},"270":{}},"component":{}}],["desktop",{"_index":258,"title":{},"name":{},"text":{"3":{},"184":{},"274":{},"281":{}},"component":{}}],["despit",{"_index":2933,"title":{},"name":{},"text":{"52":{}},"component":{}}],["destin",{"_index":795,"title":{"270-26":{},"270-38":{}},"name":{},"text":{"5":{},"29":{},"31":{},"42":{},"69":{},"101":{},"218":{},"236":{},"239":{},"270":{}},"component":{}}],["destruct",{"_index":2460,"title":{},"name":{},"text":{"38":{}},"component":{}}],["detail",{"_index":504,"title":{"236-1":{},"239-1":{},"242-1":{},"243-1":{},"270-3":{},"270-14":{},"270-23":{},"270-31":{}},"name":{},"text":{"3":{},"5":{},"7":{},"11":{},"22":{},"23":{},"24":{},"25":{},"26":{},"28":{},"30":{},"31":{},"34":{},"39":{},"41":{},"47":{},"55":{},"56":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"67":{},"72":{},"75":{},"79":{},"80":{},"81":{},"104":{},"106":{},"137":{},"143":{},"144":{},"146":{},"149":{},"158":{},"162":{},"171":{},"173":{},"176":{},"184":{},"185":{},"196":{},"199":{},"200":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"216":{},"217":{},"232":{},"236":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"245":{},"254":{},"260":{},"264":{},"266":{},"270":{},"271":{},"278":{},"280":{},"282":{}},"component":{}}],["details=when",{"_index":7045,"title":{},"name":{},"text":{"176":{}},"component":{}}],["detect",{"_index":1201,"title":{"269":{},"271":{}},"name":{},"text":{"17":{},"19":{},"24":{},"29":{},"31":{},"35":{},"45":{},"60":{},"61":{},"66":{},"68":{},"74":{},"76":{},"92":{},"95":{},"101":{},"137":{},"172":{},"203":{},"236":{},"239":{},"241":{},"242":{},"243":{},"261":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"274":{},"276":{},"281":{}},"component":{}}],["detectconflict",{"_index":4776,"title":{},"name":{},"text":{"76":{}},"component":{}}],["determin",{"_index":833,"title":{},"name":{},"text":{"5":{},"51":{},"79":{},"117":{},"146":{},"149":{},"151":{},"162":{},"169":{},"172":{},"255":{}},"component":{}}],["determinist",{"_index":4609,"title":{},"name":{},"text":{"68":{}},"component":{}}],["dev",{"_index":620,"title":{},"name":{},"text":{"3":{},"60":{},"137":{},"184":{}},"component":{}}],["dev.yaml",{"_index":993,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["develop",{"_index":32,"title":{"8-7":{},"137-19":{},"147-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"8":{},"15":{},"21":{},"22":{},"30":{},"39":{},"41":{},"52":{},"55":{},"60":{},"64":{},"80":{},"81":{},"90":{},"96":{},"137":{},"138":{},"141":{},"142":{},"147":{},"165":{},"170":{},"184":{},"196":{},"197":{},"198":{},"200":{},"207":{},"224":{},"229":{},"231":{},"233":{},"236":{},"245":{},"258":{},"265":{},"270":{},"273":{},"278":{},"279":{}},"component":{}}],["developer/view",{"_index":7641,"title":{},"name":{},"text":{"258":{}},"component":{}}],["developmentmod",{"_index":7179,"title":{},"name":{},"text":{"185":{}},"component":{}}],["deviat",{"_index":2115,"title":{},"name":{},"text":{"31":{},"35":{},"57":{},"241":{}},"component":{}}],["devic",{"_index":480,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["devmode.en",{"_index":6848,"title":{},"name":{},"text":{"172":{}},"component":{}}],["devop",{"_index":7654,"title":{},"name":{},"text":{"261":{},"262":{}},"component":{}}],["devtool",{"_index":3897,"title":{},"name":{},"text":{"61":{}},"component":{}}],["devtools.properti",{"_index":3894,"title":{},"name":{},"text":{"61":{}},"component":{}}],["dgomezg",{"_index":3229,"title":{},"name":{},"text":{"60":{},"281":{}},"component":{}}],["dgroupid=io.axoniq.demo.bikerent",{"_index":7815,"title":{},"name":{},"text":{"276":{}},"component":{}}],["diagnos",{"_index":7602,"title":{},"name":{},"text":{"243":{}},"component":{}}],["diagnost",{"_index":4952,"title":{"178":{},"137-12":{}},"name":{"178":{}},"text":{"79":{},"88":{},"137":{},"138":{}},"component":{}}],["diagram",{"_index":6315,"title":{"252":{},"270-40":{}},"name":{},"text":{"144":{},"270":{},"277":{},"278":{}},"component":{}}],["dialect",{"_index":4400,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["dialog",{"_index":6104,"title":{},"name":{},"text":{"138":{},"254":{},"256":{},"260":{},"264":{},"270":{},"273":{},"274":{}},"component":{}}],["dialogu",{"_index":6573,"title":{},"name":{},"text":{"158":{}},"component":{}}],["diataxi",{"_index":887,"title":{"7":{}},"name":{},"text":{"7":{}},"component":{}}],["dictat",{"_index":2525,"title":{},"name":{},"text":{"38":{},"46":{},"80":{}},"component":{}}],["didn’t",{"_index":3727,"title":{},"name":{},"text":{"60":{},"61":{},"218":{},"277":{}},"component":{}}],["differ",{"_index":4,"title":{"24-9":{},"80-58":{},"151-18":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"8":{},"10":{},"13":{},"24":{},"25":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"42":{},"44":{},"46":{},"50":{},"52":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"91":{},"93":{},"97":{},"101":{},"105":{},"107":{},"111":{},"116":{},"117":{},"122":{},"126":{},"137":{},"138":{},"139":{},"144":{},"146":{},"149":{},"150":{},"151":{},"158":{},"165":{},"167":{},"169":{},"184":{},"185":{},"201":{},"203":{},"208":{},"209":{},"211":{},"214":{},"218":{},"234":{},"235":{},"238":{},"240":{},"241":{},"245":{},"256":{},"258":{},"260":{},"265":{},"267":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"282":{}},"component":{}}],["difficult",{"_index":1543,"title":{},"name":{},"text":{"25":{},"151":{},"261":{}},"component":{}}],["digit",{"_index":6419,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["dilsh0d",{"_index":3673,"title":{},"name":{},"text":{"60":{}},"component":{}}],["dimension",{"_index":1260,"title":{},"name":{},"text":{"23":{},"50":{}},"component":{}}],["dinteractivemode=fals",{"_index":7818,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dir",{"_index":6853,"title":{},"name":{},"text":{"172":{}},"component":{}}],["direct",{"_index":945,"title":{"52-37":{}},"name":{},"text":{"7":{},"15":{},"19":{},"21":{},"29":{},"46":{},"52":{},"56":{},"61":{},"63":{},"74":{},"104":{},"167":{},"227":{}},"component":{}}],["directexecutor",{"_index":5987,"title":{},"name":{},"text":{"129":{}},"component":{}}],["directli",{"_index":588,"title":{"144-26":{}},"name":{},"text":{"3":{},"24":{},"27":{},"28":{},"29":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"42":{},"45":{},"46":{},"51":{},"52":{},"60":{},"61":{},"66":{},"68":{},"70":{},"80":{},"86":{},"90":{},"93":{},"108":{},"109":{},"122":{},"137":{},"142":{},"143":{},"144":{},"158":{},"162":{},"166":{},"184":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"218":{},"260":{},"261":{},"264":{},"274":{},"277":{},"278":{},"280":{}},"component":{}}],["directori",{"_index":261,"title":{"17-1":{},"18-1":{},"20-1":{},"163-3":{}},"name":{},"text":{"3":{},"4":{},"25":{},"142":{},"146":{},"147":{},"148":{},"154":{},"160":{},"162":{},"163":{},"165":{},"171":{},"172":{},"184":{},"185":{},"205":{},"276":{}},"component":{}}],["disabl",{"_index":517,"title":{"118":{},"117-13":{}},"name":{"118":{}},"text":{"3":{},"5":{},"25":{},"31":{},"52":{},"60":{},"61":{},"70":{},"117":{},"118":{},"126":{},"130":{},"137":{},"139":{},"172":{},"180":{},"184":{},"254":{}},"component":{}}],["disableeventblacklist",{"_index":4635,"title":{},"name":{},"text":{"70":{}},"component":{}}],["disableheartbeats(configur",{"_index":7151,"title":{},"name":{},"text":{"180":{}},"component":{}}],["disadvantag",{"_index":2359,"title":{},"name":{},"text":{"35":{}},"component":{}}],["disallow",{"_index":4679,"title":{},"name":{},"text":{"71":{},"80":{}},"component":{}}],["disallowreplay",{"_index":3239,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["disast",{"_index":6140,"title":{},"name":{},"text":{"140":{}},"component":{}}],["discard",{"_index":5898,"title":{},"name":{},"text":{"122":{}},"component":{}}],["disconnect",{"_index":5486,"title":{},"name":{},"text":{"102":{},"137":{},"138":{},"139":{},"142":{},"144":{},"177":{}},"component":{}}],["discourag",{"_index":7543,"title":{},"name":{},"text":{"218":{}},"component":{}}],["discov",{"_index":779,"title":{"126":{}},"name":{},"text":{"5":{},"114":{},"126":{},"128":{},"147":{},"203":{},"217":{},"226":{},"231":{},"260":{}},"component":{}}],["discover",{"_index":5942,"title":{},"name":{},"text":{"126":{},"127":{}},"component":{}}],["discoveri",{"_index":5245,"title":{},"name":{},"text":{"80":{},"101":{},"126":{},"128":{},"203":{}},"component":{}}],["discovery.pol",{"_index":7381,"title":{"203-54":{}},"name":{},"text":{},"component":{}}],["discovery.retri",{"_index":7380,"title":{"203-53":{}},"name":{},"text":{},"component":{}}],["discovery.timeout",{"_index":7379,"title":{"203-52":{}},"name":{},"text":{},"component":{}}],["discovery/eureka",{"_index":5982,"title":{},"name":{},"text":{"128":{}},"component":{}}],["discoverycli",{"_index":5931,"title":{},"name":{},"text":{"126":{},"127":{}},"component":{}}],["discoveryclient(discoverycli",{"_index":5959,"title":{},"name":{},"text":{"127":{}},"component":{}}],["discrep",{"_index":3706,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["discurs",{"_index":914,"title":{},"name":{},"text":{"7":{}},"component":{}}],["discuss",{"_index":78,"title":{"2-4":{}},"name":{},"text":{"3":{},"27":{},"38":{},"56":{},"58":{},"60":{},"61":{},"77":{},"79":{},"80":{},"124":{},"161":{},"167":{},"184":{},"232":{},"262":{},"269":{},"278":{}},"component":{}}],["disk",{"_index":4713,"title":{},"name":{},"text":{"71":{},"144":{},"147":{},"151":{},"157":{},"172":{},"196":{}},"component":{}}],["diskspac",{"_index":7040,"title":{},"name":{},"text":{"176":{}},"component":{}}],["dispatch",{"_index":791,"title":{"27":{},"36":{},"56":{},"27-3":{},"36-1":{},"36-2":{},"44-2":{},"44-7":{},"44-10":{},"122-15":{}},"name":{"27":{},"36":{},"56":{}},"text":{"5":{},"27":{},"28":{},"30":{},"31":{},"35":{},"36":{},"39":{},"42":{},"44":{},"49":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"66":{},"68":{},"80":{},"101":{},"109":{},"112":{},"122":{},"126":{},"129":{},"142":{},"162":{},"270":{},"278":{}},"component":{}}],["dispatch(commandmessag",{"_index":1670,"title":{},"name":{},"text":{"27":{}},"component":{}}],["dispatch_command",{"_index":6608,"title":{},"name":{},"text":{"162":{},"164":{},"171":{}},"component":{}}],["dispatch_queri",{"_index":6609,"title":{},"name":{},"text":{"162":{},"164":{},"171":{}},"component":{}}],["dispatch_subscription_queri",{"_index":6706,"title":{},"name":{},"text":{"164":{}},"component":{}}],["dispatchcommand",{"_index":1672,"title":{},"name":{},"text":{"27":{}},"component":{}}],["dispatchev",{"_index":2418,"title":{},"name":{},"text":{"36":{}},"component":{}}],["dispatching/handl",{"_index":1744,"title":{},"name":{},"text":{"27":{}},"component":{}}],["dispatchinterceptor",{"_index":2809,"title":{},"name":{},"text":{"49":{}},"component":{}}],["display",{"_index":775,"title":{"270-11":{}},"name":{},"text":{"5":{},"10":{},"66":{},"137":{},"146":{},"179":{},"185":{},"196":{},"229":{},"236":{},"239":{},"241":{},"242":{},"243":{},"258":{},"268":{},"270":{},"271":{},"273":{},"274":{}},"component":{}}],["disregard",{"_index":5061,"title":{},"name":{},"text":{"80":{}},"component":{}}],["disruptor",{"_index":1223,"title":{"23-10":{}},"name":{},"text":{"23":{},"31":{}},"component":{}}],["disruptorcommandbu",{"_index":1919,"title":{"31-14":{}},"name":{},"text":{"31":{},"60":{},"61":{}},"component":{}}],["disruptorcommandbus(transactionmanag",{"_index":2084,"title":{},"name":{},"text":{"31":{}},"component":{}}],["disruptorcommandbus.build",{"_index":2080,"title":{},"name":{},"text":{"31":{}},"component":{}}],["disruptorcommandbus.class",{"_index":2081,"title":{},"name":{},"text":{"31":{}},"component":{}}],["disruptorconfigur",{"_index":2041,"title":{},"name":{},"text":{"31":{}},"component":{}}],["distinct",{"_index":946,"title":{},"name":{},"text":{"7":{},"23":{},"24":{},"29":{},"35":{},"42":{},"56":{},"58":{},"60":{},"61":{},"80":{},"111":{},"117":{}},"component":{}}],["distinguish",{"_index":2126,"title":{},"name":{},"text":{"31":{},"107":{},"143":{},"196":{}},"component":{}}],["distribut",{"_index":432,"title":{"52":{},"31-17":{},"35-26":{},"150-2":{}},"name":{},"text":{"3":{},"8":{},"23":{},"24":{},"28":{},"31":{},"35":{},"41":{},"42":{},"52":{},"54":{},"60":{},"61":{},"70":{},"71":{},"80":{},"81":{},"99":{},"101":{},"105":{},"126":{},"128":{},"131":{},"137":{},"138":{},"146":{},"149":{},"163":{},"165":{},"171":{},"172":{},"173":{},"184":{},"185":{},"212":{},"260":{},"261":{},"263":{},"270":{}},"component":{}}],["distributedcommandbu",{"_index":1923,"title":{"31-31":{}},"name":{},"text":{"31":{},"60":{},"101":{},"102":{},"127":{},"128":{}},"component":{}}],["distributedcommandbus(commandrout",{"_index":5970,"title":{},"name":{},"text":{"127":{}},"component":{}}],["distributedcommandbus.build",{"_index":5476,"title":{},"name":{},"text":{"101":{},"127":{}},"component":{}}],["distributor",{"_index":6947,"title":{},"name":{},"text":{"172":{}},"component":{}}],["distroless",{"_index":339,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["disturb",{"_index":4650,"title":{},"name":{},"text":{"71":{}},"component":{}}],["disucss",{"_index":7575,"title":{},"name":{},"text":{"232":{}},"component":{}}],["dit",{"_index":426,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["dive",{"_index":6411,"title":{},"name":{},"text":{"146":{}},"component":{}}],["diverg",{"_index":5006,"title":{},"name":{},"text":{"80":{}},"component":{}}],["divid",{"_index":5244,"title":{},"name":{},"text":{"80":{},"255":{},"270":{}},"component":{}}],["divis",{"_index":2561,"title":{},"name":{},"text":{"41":{}},"component":{}}],["dlist",{"_index":1141,"title":{},"name":{},"text":{"13":{}},"component":{}}],["dlq",{"_index":868,"title":{"89":{}},"name":{"113":{},"251":{}},"text":{"5":{},"61":{},"79":{},"89":{},"90":{},"113":{},"117":{},"251":{},"256":{},"258":{}},"component":{}}],["dlqenabledgroup",{"_index":4911,"title":{},"name":{},"text":{"79":{}},"component":{}}],["dlqenabledgroups.contains(processinggroup",{"_index":4912,"title":{},"name":{},"text":{"79":{}},"component":{}}],["dlqmanag",{"_index":5762,"title":{},"name":{},"text":{"117":{}},"component":{}}],["dlqmanagement(configur",{"_index":5763,"title":{},"name":{},"text":{"117":{}},"component":{}}],["dlqmanagementcontrol",{"_index":5771,"title":{},"name":{},"text":{"117":{}},"component":{}}],["dmurat",{"_index":3692,"title":{},"name":{},"text":{"60":{}},"component":{}}],["dn",{"_index":6636,"title":{},"name":{},"text":{"163":{},"196":{}},"component":{}}],["do",{"_index":273,"title":{},"name":{},"text":{"3":{},"24":{},"27":{},"28":{},"31":{},"32":{},"44":{},"50":{},"60":{},"71":{},"78":{},"80":{},"93":{},"140":{},"172":{},"184":{},"199":{},"236":{},"270":{}},"component":{}}],["doc",{"_index":888,"title":{"15":{},"21":{}},"name":{"7":{}},"text":{"8":{},"9":{},"15":{},"21":{},"60":{},"204":{},"213":{},"214":{},"216":{}},"component":{}}],["docker",{"_index":208,"title":{"3":{},"274":{},"281":{},"3-1":{},"3-10":{},"137-4":{},"184-1":{},"184-3":{},"281-2":{},"281-3":{},"281-4":{}},"name":{"274":{},"281":{}},"text":{"3":{},"4":{},"7":{},"60":{},"137":{},"152":{},"184":{},"212":{},"234":{},"260":{},"263":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"277":{},"278":{},"281":{}},"component":{}}],["dockerfil",{"_index":331,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["dockerhub",{"_index":8012,"title":{},"name":{},"text":{"281":{}},"component":{}}],["docs/_playbook",{"_index":1091,"title":{},"name":{},"text":{"9":{}},"component":{}}],["docs/playbook",{"_index":1066,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["document",{"_index":880,"title":{"8":{},"204":{},"221":{},"7-2":{},"7-5":{},"8-11":{},"9-1":{},"11-1":{}},"name":{},"text":{"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"16":{},"19":{},"23":{},"24":{},"26":{},"35":{},"38":{},"52":{},"56":{},"61":{},"63":{},"65":{},"98":{},"104":{},"105":{},"107":{},"115":{},"123":{},"128":{},"137":{},"140":{},"143":{},"144":{},"175":{},"204":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"221":{}},"component":{}}],["document.getrootel",{"_index":2509,"title":{},"name":{},"text":{"38":{}},"component":{}}],["documentation’",{"_index":1107,"title":{},"name":{},"text":{"9":{}},"component":{}}],["documentpercommitstoragestrategi",{"_index":2355,"title":{},"name":{},"text":{"35":{}},"component":{}}],["doesn’t",{"_index":935,"title":{},"name":{},"text":{"7":{},"8":{},"29":{},"42":{},"61":{},"80":{},"83":{},"84":{},"89":{},"90":{},"101":{},"104":{},"122":{},"170":{},"203":{},"212":{},"213":{},"214":{},"216":{},"218":{}},"component":{}}],["dofin",{"_index":3119,"title":{},"name":{},"text":{"56":{}},"component":{}}],["dofinally(it",{"_index":3104,"title":{},"name":{},"text":{"56":{}},"component":{}}],["dofinally(sign",{"_index":5862,"title":{},"name":{},"text":{"122":{}},"component":{}}],["dom4j",{"_index":1497,"title":{},"name":{},"text":{"24":{}},"component":{}}],["domain",{"_index":1209,"title":{},"name":{},"text":{"22":{},"23":{},"28":{},"35":{},"42":{},"44":{},"57":{},"60":{},"62":{},"66":{},"71":{},"73":{},"75":{},"77":{},"80":{},"86":{},"114":{},"163":{},"172":{},"196":{},"212":{},"236":{}},"component":{}}],["domain_event_entri",{"_index":1649,"title":{},"name":{},"text":{"26":{}},"component":{}}],["domainev",{"_index":5699,"title":{},"name":{},"text":{"114":{}},"component":{}}],["domainevententri",{"_index":2281,"title":{},"name":{},"text":{"35":{},"97":{}},"component":{}}],["domaineventmessag",{"_index":2574,"title":{},"name":{},"text":{"42":{},"45":{},"52":{},"61":{},"66":{}},"component":{}}],["domaineventstream",{"_index":2356,"title":{},"name":{},"text":{"35":{}},"component":{}}],["done",{"_index":1870,"title":{},"name":{},"text":{"29":{},"31":{},"33":{},"38":{},"40":{},"42":{},"44":{},"46":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"70":{},"73":{},"75":{},"80":{},"117":{},"127":{},"140":{},"142":{},"143":{},"144":{},"146":{},"151":{},"169":{},"185":{},"241":{},"254":{},"270":{},"271":{},"278":{}},"component":{}}],["don’t",{"_index":285,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"26":{},"33":{},"35":{},"42":{},"43":{},"52":{},"61":{},"75":{},"80":{},"83":{},"86":{},"88":{},"89":{},"91":{},"117":{},"139":{},"141":{},"144":{},"169":{},"170":{},"171":{},"184":{},"234":{},"238":{},"244":{},"261":{},"262":{},"263":{},"266":{},"267":{},"270":{},"274":{},"280":{},"281":{}},"component":{}}],["dosomethingcommand(\"aggregateid",{"_index":4553,"title":{},"name":{},"text":{"66":{}},"component":{}}],["dot",{"_index":792,"title":{},"name":{},"text":{"5":{},"270":{}},"component":{}}],["doubl",{"_index":2362,"title":{},"name":{},"text":{"35":{},"80":{},"144":{}},"component":{}}],["doupcast",{"_index":2477,"title":{},"name":{},"text":{"38":{}},"component":{}}],["dowload",{"_index":7769,"title":{"274-2":{}},"name":{},"text":{"281":{}},"component":{}}],["down",{"_index":1362,"title":{},"name":{},"text":{"24":{},"31":{},"33":{},"47":{},"57":{},"60":{},"61":{},"77":{},"80":{},"102":{},"104":{},"122":{},"135":{},"138":{},"146":{},"149":{},"151":{},"155":{},"158":{},"172":{},"176":{},"196":{},"218":{},"261":{},"266":{},"268":{},"270":{},"271":{}},"component":{}}],["downgrad",{"_index":7609,"title":{},"name":{},"text":{"245":{}},"component":{}}],["download",{"_index":712,"title":{"198-2":{},"198-5":{},"205-1":{}},"name":{},"text":{"4":{},"23":{},"61":{},"66":{},"137":{},"141":{},"170":{},"185":{},"198":{},"199":{},"200":{},"205":{},"269":{},"274":{}},"component":{}}],["download_diagnos",{"_index":6662,"title":{},"name":{},"text":{"164":{}},"component":{}}],["download_templ",{"_index":6663,"title":{},"name":{},"text":{"164":{}},"component":{}}],["downtim",{"_index":6803,"title":{"169-2":{}},"name":{},"text":{"169":{},"196":{}},"component":{}}],["dpackage=io.axoniq.demo.bikerental.coreapi",{"_index":7831,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dpackage=io.axoniq.demo.bikerental.rent",{"_index":7829,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dproperty=valu",{"_index":6834,"title":{},"name":{},"text":{"172":{}},"component":{}}],["draft",{"_index":2423,"title":{},"name":{"261":{}},"text":{"37":{},"61":{},"104":{}},"component":{}}],["drastic",{"_index":3761,"title":{},"name":{},"text":{"60":{}},"component":{}}],["draw",{"_index":6470,"title":{},"name":{},"text":{"149":{}},"component":{}}],["drawn",{"_index":7738,"title":{},"name":{},"text":{"270":{}},"component":{}}],["drewrite.recipeartifactcoordinates=org.axonframework:axon",{"_index":1660,"title":{},"name":{},"text":{"26":{}},"component":{}}],["drewrite.recipeartifactcoordinates=org.openrewrite.recipe:rewrit",{"_index":1663,"title":{},"name":{},"text":{"26":{}},"component":{}}],["dri",{"_index":913,"title":{},"name":{},"text":{"7":{}},"component":{}}],["drill",{"_index":7673,"title":{},"name":{},"text":{"266":{},"270":{},"271":{}},"component":{}}],["drive",{"_index":1809,"title":{},"name":{},"text":{"28":{},"31":{},"73":{},"78":{},"151":{}},"component":{}}],["driven",{"_index":1210,"title":{},"name":{},"text":{"22":{},"75":{},"121":{},"197":{},"224":{},"227":{},"233":{},"237":{},"261":{},"263":{}},"component":{}}],["driver",{"_index":477,"title":{},"name":{},"text":{"3":{},"24":{},"35":{},"154":{},"184":{}},"component":{}}],["driver_opt",{"_index":478,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["drop",{"_index":2901,"title":{},"name":{},"text":{"51":{},"60":{},"61":{},"71":{},"80":{},"255":{},"270":{},"277":{}},"component":{}}],["dropdown",{"_index":6493,"title":{},"name":{},"text":{"151":{},"196":{}},"component":{}}],["dropwizard",{"_index":2811,"title":{"50-1":{}},"name":{},"text":{"50":{},"60":{}},"component":{}}],["dsl",{"_index":1318,"title":{},"name":{},"text":{"23":{}},"component":{}}],["due",{"_index":563,"title":{},"name":{},"text":{"3":{},"24":{},"27":{},"31":{},"38":{},"41":{},"45":{},"52":{},"60":{},"61":{},"63":{},"65":{},"79":{},"80":{},"90":{},"95":{},"104":{},"105":{},"142":{},"151":{},"184":{},"251":{},"255":{},"256":{},"271":{}},"component":{}}],["dump",{"_index":7140,"title":{},"name":{},"text":{"178":{}},"component":{}}],["duplic",{"_index":1325,"title":{"24-8":{},"69-1":{}},"name":{},"text":{"29":{},"35":{},"52":{},"60":{},"61":{},"69":{},"70":{},"80":{},"117":{},"142":{},"146":{},"218":{}},"component":{}}],["duplicatecommandhandlerresolut",{"_index":4615,"title":{},"name":{},"text":{"69":{}},"component":{}}],["duplicatecommandhandlerresolution.class",{"_index":4618,"title":{},"name":{},"text":{"69":{}},"component":{}}],["duplicatecommandhandlerresolution.rejectdupl",{"_index":4619,"title":{},"name":{},"text":{"69":{}},"component":{}}],["duplicatecommandhandlerresolv",{"_index":1860,"title":{},"name":{},"text":{"29":{},"69":{}},"component":{}}],["duplicatecommandhandlersubscriptionexcept",{"_index":4616,"title":{},"name":{},"text":{"69":{}},"component":{}}],["durabl",{"_index":136,"title":{},"name":{},"text":{"2":{},"144":{}},"component":{}}],["durat",{"_index":2147,"title":{},"name":{},"text":{"32":{},"51":{},"66":{},"68":{},"80":{},"122":{},"138":{},"177":{},"203":{},"241":{}},"component":{}}],["duration.ofmillis(500",{"_index":2179,"title":{},"name":{},"text":{"32":{}},"component":{}}],["duration.ofseconds(2",{"_index":6293,"title":{},"name":{},"text":{"143":{}},"component":{}}],["duration.ofseconds(5)).take(3",{"_index":5850,"title":{},"name":{},"text":{"122":{}},"component":{}}],["dure",{"_index":836,"title":{"266":{}},"name":{},"text":{"5":{},"11":{},"28":{},"31":{},"32":{},"38":{},"44":{},"46":{},"51":{},"52":{},"53":{},"56":{},"60":{},"61":{},"63":{},"66":{},"68":{},"69":{},"79":{},"80":{},"97":{},"126":{},"138":{},"141":{},"142":{},"144":{},"149":{},"151":{},"169":{},"170":{},"172":{},"196":{},"212":{},"245":{},"254":{},"261":{},"263":{},"264":{},"266":{},"269":{},"270":{},"273":{},"274":{},"282":{}},"component":{}}],["dversion=0.0.1",{"_index":7817,"title":{},"name":{},"text":{"276":{}},"component":{}}],["dynam",{"_index":689,"title":{"117-2":{}},"name":{},"text":{"3":{},"80":{},"81":{},"117":{},"119":{},"141":{},"172":{},"184":{},"185":{},"256":{}},"component":{}}],["e",{"_index":427,"title":{"244-3":{}},"name":{},"text":{"3":{},"5":{},"46":{},"80":{},"184":{},"244":{},"282":{}},"component":{}}],["e0464143baf7",{"_index":7926,"title":{},"name":{},"text":{"277":{}},"component":{}}],["e32c48ab5047",{"_index":6603,"title":{},"name":{},"text":{"162":{}},"component":{}}],["ea",{"_index":3575,"title":{},"name":{},"text":{"60":{}},"component":{}}],["each",{"_index":15,"title":{"151-19":{}},"name":{},"text":{"1":{},"3":{},"5":{},"8":{},"9":{},"24":{},"27":{},"29":{},"31":{},"35":{},"38":{},"40":{},"44":{},"46":{},"49":{},"51":{},"52":{},"56":{},"58":{},"60":{},"63":{},"65":{},"66":{},"68":{},"71":{},"77":{},"79":{},"80":{},"89":{},"91":{},"101":{},"103":{},"108":{},"112":{},"115":{},"117":{},"137":{},"138":{},"139":{},"140":{},"141":{},"144":{},"146":{},"147":{},"149":{},"150":{},"151":{},"155":{},"156":{},"162":{},"169":{},"170":{},"171":{},"172":{},"176":{},"184":{},"185":{},"191":{},"194":{},"196":{},"208":{},"209":{},"211":{},"218":{},"235":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"245":{},"255":{},"256":{},"258":{},"266":{},"267":{},"270":{},"273":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["eager",{"_index":3846,"title":{},"name":{},"text":{"61":{}},"component":{}}],["eagerli",{"_index":4164,"title":{},"name":{},"text":{"61":{},"97":{},"151":{}},"component":{}}],["earli",{"_index":2642,"title":{},"name":{},"text":{"44":{},"60":{},"137":{}},"component":{}}],["earlier",{"_index":1593,"title":{},"name":{},"text":{"26":{},"31":{},"38":{},"57":{},"66":{},"143":{},"199":{},"278":{}},"component":{}}],["eas",{"_index":2485,"title":{},"name":{},"text":{"38":{},"61":{},"122":{},"247":{},"253":{}},"component":{}}],["easi",{"_index":124,"title":{},"name":{},"text":{"2":{},"29":{},"31":{},"33":{},"38":{},"52":{},"60":{},"66":{},"79":{},"81":{},"87":{},"89":{},"155":{},"232":{},"262":{},"266":{},"270":{},"272":{},"274":{},"276":{},"280":{}},"component":{}}],["easier",{"_index":1524,"title":{},"name":{},"text":{"25":{},"31":{},"33":{},"46":{},"60":{},"68":{},"79":{},"83":{},"84":{},"140":{},"223":{},"240":{},"261":{},"262":{},"278":{}},"component":{}}],["easiest",{"_index":1255,"title":{},"name":{},"text":{"23":{},"25":{},"26":{},"27":{},"31":{},"54":{},"56":{},"80":{},"128":{}},"component":{}}],["easili",{"_index":167,"title":{},"name":{},"text":{"2":{},"5":{},"23":{},"24":{},"29":{},"31":{},"52":{},"60":{},"61":{},"62":{},"80":{},"85":{},"130":{},"137":{},"197":{},"255":{},"256":{},"265":{},"266":{},"273":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["easymock",{"_index":4601,"title":{},"name":{},"text":{"68":{}},"component":{}}],["eclips",{"_index":248,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["eddumelendez",{"_index":3689,"title":{},"name":{},"text":{"60":{}},"component":{}}],["edit",{"_index":88,"title":{"155":{},"2-6":{}},"name":{"155":{}},"text":{"2":{},"3":{},"8":{},"9":{},"61":{},"134":{},"135":{},"137":{},"141":{},"146":{},"147":{},"151":{},"166":{},"168":{},"171":{},"184":{},"185":{},"198":{},"201":{},"241":{},"245":{},"256":{},"277":{}},"component":{}}],["editor",{"_index":1121,"title":{},"name":{},"text":{"10":{},"196":{}},"component":{}}],["ee",{"_index":281,"title":{"163":{},"165":{},"161-1":{}},"name":{"162":{}},"text":{"3":{},"23":{},"119":{},"134":{},"139":{},"140":{},"141":{},"146":{},"149":{},"154":{},"155":{},"160":{},"161":{},"167":{},"169":{},"171":{},"172":{},"176":{},"184":{},"185":{}},"component":{}}],["ee/s",{"_index":6841,"title":{},"name":{},"text":{"172":{}},"component":{}}],["effect",{"_index":1833,"title":{},"name":{},"text":{"28":{},"31":{},"40":{},"43":{},"45":{},"46":{},"49":{},"56":{},"61":{},"66":{},"68":{},"75":{},"79":{},"80":{},"126":{},"138":{},"141":{},"144":{},"151":{},"161":{},"167":{},"171":{},"172":{},"212":{},"224":{},"233":{},"245":{},"258":{}},"component":{}}],["effici",{"_index":5116,"title":{},"name":{},"text":{"80":{},"137":{},"146":{},"237":{},"254":{},"277":{}},"component":{}}],["effort",{"_index":231,"title":{},"name":{},"text":{"3":{},"26":{},"29":{},"135":{},"137":{},"139":{},"184":{},"185":{}},"component":{}}],["eg",{"_index":1578,"title":{},"name":{},"text":{"25":{}},"component":{}}],["ehcach",{"_index":3350,"title":{},"name":{},"text":{"60":{},"71":{}},"component":{}}],["ehcache3adapt",{"_index":4701,"title":{},"name":{},"text":{"71":{}},"component":{}}],["ehcacheadapt",{"_index":4698,"title":{},"name":{},"text":{"71":{}},"component":{}}],["eight",{"_index":7700,"title":{},"name":{},"text":{"270":{}},"component":{}}],["eisenmann",{"_index":3678,"title":{},"name":{},"text":{"60":{}},"component":{}}],["el",{"_index":6770,"title":{},"name":{},"text":{"165":{}},"component":{}}],["elabor",{"_index":2475,"title":{},"name":{},"text":{"38":{}},"component":{}}],["elaps",{"_index":4590,"title":{},"name":{},"text":{"68":{},"87":{},"282":{}},"component":{}}],["elast",{"_index":5810,"title":{},"name":{},"text":{"121":{},"131":{},"261":{}},"component":{}}],["elasticsearch",{"_index":2919,"title":{},"name":{},"text":{"52":{}},"component":{}}],["elect",{"_index":6464,"title":{"149-2":{}},"name":{},"text":{"149":{},"172":{}},"component":{}}],["element",{"_index":1447,"title":{},"name":{},"text":{"24":{},"40":{},"101":{},"148":{},"150":{},"151":{},"192":{},"194":{},"209":{},"262":{},"270":{},"274":{},"277":{},"278":{}},"component":{}}],["elementtype.annotation_typ",{"_index":5412,"title":{},"name":{},"text":{"96":{}},"component":{}}],["elementtype.constructor",{"_index":5411,"title":{},"name":{},"text":{"96":{}},"component":{}}],["elig",{"_index":4605,"title":{},"name":{},"text":{"68":{},"93":{},"103":{},"151":{},"172":{}},"component":{}}],["elimin",{"_index":4606,"title":{},"name":{},"text":{"68":{},"137":{}},"component":{}}],["elk",{"_index":751,"title":{"5-7":{}},"name":{},"text":{"5":{}},"component":{}}],["elsewher",{"_index":4222,"title":{},"name":{},"text":{"61":{},"101":{}},"component":{}}],["email",{"_index":2585,"title":{},"name":{},"text":{"42":{},"80":{},"165":{},"244":{},"254":{},"271":{}},"component":{}}],["emb",{"_index":6769,"title":{},"name":{},"text":{"165":{}},"component":{}}],["embed",{"_index":929,"title":{"35-6":{}},"name":{},"text":{"7":{},"102":{},"137":{},"223":{}},"component":{}}],["embeddedeventstor",{"_index":2270,"title":{},"name":{},"text":{"35":{},"61":{},"115":{}},"component":{}}],["embeddedeventstore.build",{"_index":2318,"title":{},"name":{},"text":{"35":{},"44":{},"115":{}},"component":{}}],["embrac",{"_index":4860,"title":{},"name":{},"text":{"79":{},"121":{}},"component":{}}],["emerg",{"_index":6508,"title":{},"name":{},"text":{"151":{}},"component":{}}],["emiss",{"_index":3089,"title":{},"name":{},"text":{"56":{}},"component":{}}],["emit",{"_index":3023,"title":{},"name":{},"text":{"52":{},"56":{},"61":{},"112":{},"172":{},"282":{}},"component":{}}],["emit(countchangedupd",{"_index":5692,"title":{},"name":{},"text":{"112":{}},"component":{}}],["emitt",{"_index":2691,"title":{"117-6":{}},"name":{},"text":{"44":{},"117":{}},"component":{}}],["employ",{"_index":6138,"title":{},"name":{},"text":{"140":{}},"component":{}}],["employe",{"_index":1009,"title":{},"name":{},"text":{"8":{}},"component":{}}],["empti",{"_index":1037,"title":{},"name":{},"text":{"8":{},"54":{},"56":{},"60":{},"75":{},"79":{},"85":{},"91":{},"106":{},"122":{},"192":{},"209":{},"280":{},"282":{}},"component":{}}],["empty,it",{"_index":5629,"title":{},"name":{},"text":{"108":{}},"component":{}}],["en",{"_index":6963,"title":{},"name":{},"text":{"172":{}},"component":{}}],["enabl",{"_index":133,"title":{"150-4":{},"203-26":{},"203-28":{},"203-33":{}},"name":{},"text":{"2":{},"3":{},"5":{},"23":{},"24":{},"25":{},"31":{},"34":{},"50":{},"52":{},"56":{},"60":{},"61":{},"71":{},"79":{},"80":{},"83":{},"89":{},"90":{},"101":{},"102":{},"108":{},"116":{},"117":{},"118":{},"119":{},"126":{},"127":{},"128":{},"137":{},"142":{},"144":{},"147":{},"150":{},"151":{},"159":{},"160":{},"163":{},"165":{},"167":{},"169":{},"170":{},"171":{},"172":{},"179":{},"180":{},"184":{},"185":{},"196":{},"197":{},"201":{},"203":{},"208":{},"209":{},"211":{},"212":{},"217":{},"218":{},"229":{},"238":{},"251":{},"254":{},"255":{},"258":{},"266":{},"267":{},"271":{},"275":{},"278":{},"281":{}},"component":{}}],["enable/dis",{"_index":3419,"title":{},"name":{},"text":{"60":{}},"component":{}}],["enabled=fals",{"_index":7138,"title":{},"name":{},"text":{"177":{}},"component":{}}],["enablediscoverycli",{"_index":5932,"title":{},"name":{},"text":{"126":{},"127":{}},"component":{}}],["encapsul",{"_index":4750,"title":{},"name":{},"text":{"75":{}},"component":{}}],["enclos",{"_index":1142,"title":{},"name":{},"text":{"13":{},"73":{}},"component":{}}],["encod",{"_index":965,"title":{},"name":{},"text":{"7":{}},"component":{}}],["encount",{"_index":1445,"title":{},"name":{},"text":{"24":{},"35":{},"80":{},"97":{},"114":{},"217":{}},"component":{}}],["encourag",{"_index":204,"title":{},"name":{},"text":{"2":{},"41":{},"42":{},"150":{},"232":{}},"component":{}}],["encrypt",{"_index":6306,"title":{"203-24":{}},"name":{},"text":{"144":{},"168":{},"169":{},"185":{},"203":{}},"component":{}}],["encrypt(eventwithtoken.getev",{"_index":6342,"title":{},"name":{},"text":{"144":{}},"component":{}}],["encyclopedia",{"_index":923,"title":{},"name":{},"text":{"7":{}},"component":{}}],["end",{"_index":811,"title":{},"name":{},"text":{"5":{},"7":{},"15":{},"21":{},"24":{},"31":{},"32":{},"38":{},"51":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"70":{},"71":{},"75":{},"79":{},"80":{},"104":{},"106":{},"107":{},"112":{},"121":{},"126":{},"129":{},"137":{},"140":{},"144":{},"151":{},"156":{},"158":{},"172":{},"192":{},"234":{},"245":{}},"component":{}}],["endpoint",{"_index":964,"title":{"176":{},"280":{},"176-1":{},"203-10":{},"203-17":{},"203-55":{},"208-1":{},"209-1":{},"211-1":{},"213-1":{},"213-2":{},"214-1":{},"214-2":{},"214-3":{},"216-1":{},"216-2":{},"277-9":{},"277-10":{},"277-11":{},"278-10":{},"280-1":{}},"name":{"176":{},"280":{}},"text":{"7":{},"50":{},"52":{},"73":{},"80":{},"117":{},"126":{},"127":{},"137":{},"138":{},"140":{},"144":{},"158":{},"176":{},"177":{},"178":{},"179":{},"181":{},"199":{},"203":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"218":{},"221":{},"271":{},"272":{},"273":{},"277":{},"278":{},"280":{}},"component":{}}],["endpointopt",{"_index":7466,"title":{},"name":{},"text":{"208":{},"209":{},"211":{}},"component":{}}],["endpointtyp",{"_index":7288,"title":{},"name":{},"text":{"199":{},"208":{},"209":{},"211":{},"221":{}},"component":{}}],["endsaga",{"_index":2185,"title":{},"name":{},"text":{"32":{},"60":{},"63":{}},"component":{}}],["enforc",{"_index":1400,"title":{},"name":{},"text":{"24":{},"42":{},"61":{},"80":{},"107":{},"168":{}},"component":{}}],["engag",{"_index":6368,"title":{},"name":{},"text":{"144":{}},"component":{}}],["engin",{"_index":1539,"title":{},"name":{},"text":{"25":{},"35":{},"61":{},"62":{},"63":{},"65":{},"97":{},"191":{},"196":{},"224":{},"233":{},"256":{},"281":{}},"component":{}}],["enhanc",{"_index":31,"title":{"93":{},"60-3":{},"60-9":{},"60-14":{},"60-19":{},"60-24":{},"60-28":{},"60-31":{},"60-34":{},"60-37":{},"60-40":{},"60-43":{},"61-3":{},"61-8":{},"61-15":{},"61-21":{},"61-25":{},"61-29":{},"61-34":{},"61-41":{},"61-45":{},"61-50":{},"61-58":{},"61-74":{},"61-79":{},"61-83":{},"61-87":{},"61-93":{},"61-98":{},"137-11":{},"137-15":{},"137-20":{},"138-24":{}},"name":{"93":{}},"text":{"1":{},"2":{},"60":{},"61":{},"93":{},"137":{},"245":{}},"component":{}}],["enhancement/test",{"_index":3215,"title":{},"name":{},"text":{"60":{}},"component":{}}],["enlarg",{"_index":7702,"title":{},"name":{},"text":{"270":{}},"component":{}}],["enough",{"_index":1240,"title":{},"name":{},"text":{"23":{},"35":{},"56":{},"123":{},"144":{},"151":{},"176":{},"218":{}},"component":{}}],["enqueu",{"_index":4836,"title":{"79-24":{}},"name":{},"text":{"79":{},"88":{},"91":{},"117":{}},"component":{}}],["enqueuedat",{"_index":4954,"title":{},"name":{},"text":{"79":{}},"component":{}}],["enqueuedecis",{"_index":4958,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["enqueuepolici",{"_index":4957,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["enqueuepolicyconfigurermodul",{"_index":4975,"title":{},"name":{},"text":{"79":{}},"component":{}}],["ensur",{"_index":135,"title":{},"name":{},"text":{"2":{},"3":{},"8":{},"23":{},"24":{},"27":{},"28":{},"29":{},"31":{},"35":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"75":{},"79":{},"80":{},"81":{},"90":{},"97":{},"104":{},"107":{},"137":{},"139":{},"140":{},"141":{},"143":{},"144":{},"151":{},"156":{},"160":{},"165":{},"169":{},"172":{},"184":{},"185":{},"196":{},"203":{},"208":{},"237":{},"254":{},"267":{},"273":{},"280":{},"282":{}},"component":{}}],["ensureindex",{"_index":5698,"title":{},"name":{},"text":{"114":{}},"component":{}}],["entail",{"_index":3359,"title":{},"name":{},"text":{"60":{}},"component":{}}],["enter",{"_index":3718,"title":{},"name":{},"text":{"60":{},"61":{},"88":{},"117":{},"138":{},"144":{},"151":{},"196":{},"244":{},"245":{},"270":{}},"component":{}}],["enterpris",{"_index":87,"title":{"155":{},"2-6":{}},"name":{"155":{}},"text":{"2":{},"3":{},"5":{},"33":{},"80":{},"121":{},"134":{},"135":{},"137":{},"139":{},"141":{},"146":{},"148":{},"150":{},"151":{},"168":{},"170":{},"171":{},"184":{},"185":{},"196":{},"247":{},"254":{}},"component":{}}],["enterprise.context",{"_index":6954,"title":{},"name":{},"text":{"172":{}},"component":{}}],["enterprise.default",{"_index":6885,"title":{},"name":{},"text":{"172":{}},"component":{}}],["enterprise.licens",{"_index":6854,"title":{},"name":{},"text":{"172":{}},"component":{}}],["enterprise:2023.0.1",{"_index":6057,"title":{},"name":{},"text":{"137":{}},"component":{}}],["enterprise’",{"_index":6062,"title":{},"name":{},"text":{"137":{}},"component":{}}],["entir",{"_index":700,"title":{},"name":{},"text":{"3":{},"35":{},"45":{},"46":{},"52":{},"61":{},"71":{},"75":{},"79":{},"80":{},"104":{},"107":{},"144":{},"184":{},"225":{},"245":{},"251":{},"256":{}},"component":{}}],["entireti",{"_index":2743,"title":{},"name":{},"text":{"45":{},"66":{},"70":{}},"component":{}}],["entiti",{"_index":1527,"title":{"77":{},"77-1":{},"77-2":{}},"name":{"77":{}},"text":{"25":{},"27":{},"28":{},"29":{},"35":{},"36":{},"44":{},"61":{},"73":{},"75":{},"77":{},"78":{},"97":{},"277":{},"278":{},"280":{}},"component":{}}],["entity/ent",{"_index":4788,"title":{},"name":{},"text":{"77":{}},"component":{}}],["entityid",{"_index":4782,"title":{},"name":{},"text":{"77":{}},"component":{}}],["entityid(routingkey",{"_index":4790,"title":{},"name":{},"text":{"77":{}},"component":{}}],["entitymanag",{"_index":1890,"title":{},"name":{},"text":{"29":{},"35":{},"46":{},"63":{},"65":{},"80":{}},"component":{}}],["entitymanager.clear",{"_index":2311,"title":{},"name":{},"text":{"35":{}},"component":{}}],["entitymanager.createnamedquery(\"cardsummary.fetch",{"_index":3073,"title":{},"name":{},"text":{"56":{}},"component":{}}],["entitymanager.find(cardsummary.class",{"_index":3083,"title":{},"name":{},"text":{"56":{}},"component":{}}],["entitymanager.flush",{"_index":2310,"title":{},"name":{},"text":{"35":{}},"component":{}}],["entitymanager`",{"_index":4397,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["entitymanagerprovid",{"_index":1889,"title":{},"name":{},"text":{"29":{},"35":{},"63":{},"65":{},"89":{}},"component":{}}],["entitymanagerprovider(config.getcompon",{"_index":4914,"title":{},"name":{},"text":{"79":{}},"component":{}}],["entitymanagerprovider(config.getcomponent(entitymanagerprovider.class",{"_index":4904,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["entitymanagerprovider(entitymanagerprovid",{"_index":2327,"title":{},"name":{},"text":{"35":{},"63":{},"89":{}},"component":{}}],["entitymanagerprovider.class",{"_index":4915,"title":{},"name":{},"text":{"79":{}},"component":{}}],["entitymanagerprovider’",{"_index":2295,"title":{},"name":{},"text":{"35":{}},"component":{}}],["entityscan",{"_index":1533,"title":{},"name":{},"text":{"25":{}},"component":{}}],["entri",{"_index":1062,"title":{"140-3":{}},"name":{},"text":{"8":{},"9":{},"11":{},"31":{},"35":{},"40":{},"52":{},"61":{},"62":{},"66":{},"71":{},"79":{},"122":{},"138":{},"140":{},"151":{},"172":{},"196":{},"232":{}},"component":{}}],["entrypoint",{"_index":372,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["enum",{"_index":3537,"title":{},"name":{},"text":{"60":{},"277":{}},"component":{}}],["enumer",{"_index":1832,"title":{},"name":{},"text":{"28":{},"60":{},"61":{}},"component":{}}],["env",{"_index":630,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["environ",{"_index":127,"title":{"231":{},"172-3":{},"273-1":{}},"name":{"231":{}},"text":{"2":{},"3":{},"5":{},"8":{},"13":{},"23":{},"26":{},"28":{},"31":{},"35":{},"37":{},"41":{},"42":{},"45":{},"60":{},"61":{},"63":{},"79":{},"80":{},"90":{},"93":{},"101":{},"102":{},"117":{},"130":{},"140":{},"142":{},"144":{},"148":{},"150":{},"151":{},"167":{},"172":{},"176":{},"178":{},"184":{},"185":{},"197":{},"198":{},"203":{},"205":{},"225":{},"226":{},"229":{},"231":{},"234":{},"235":{},"236":{},"239":{},"241":{},"242":{},"243":{},"244":{},"245":{},"247":{},"253":{},"257":{},"258":{},"260":{},"264":{},"269":{},"273":{},"274":{},"277":{},"278":{},"281":{}},"component":{}}],["environment",{"_index":7160,"title":{},"name":{},"text":{"181":{}},"component":{}}],["environment/nod",{"_index":6843,"title":{},"name":{},"text":{"172":{}},"component":{}}],["environment’",{"_index":788,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ep",{"_index":6982,"title":{},"name":{},"text":{"173":{}},"component":{}}],["ep@ten",{"_index":5755,"title":{},"name":{},"text":{"117":{}},"component":{}}],["ephemer",{"_index":6025,"title":{"137-28":{},"151-6":{},"151-7":{}},"name":{},"text":{"137":{},"151":{}},"component":{}}],["equal",{"_index":1958,"title":{},"name":{},"text":{"31":{},"40":{},"60":{},"61":{},"63":{},"65":{},"66":{},"79":{},"80":{},"143":{},"150":{},"151":{},"216":{}},"component":{}}],["equals(eventprocessornam",{"_index":6281,"title":{},"name":{},"text":{"143":{}},"component":{}}],["equals(tokenstoreidentifi",{"_index":6283,"title":{},"name":{},"text":{"143":{}},"component":{}}],["equals/hashcod",{"_index":1791,"title":{},"name":{},"text":{"28":{},"57":{},"77":{}},"component":{}}],["equalto",{"_index":4558,"title":{},"name":{},"text":{"66":{}},"component":{}}],["equalto(new",{"_index":4559,"title":{},"name":{},"text":{"66":{}},"component":{}}],["equival",{"_index":1063,"title":{},"name":{},"text":{"8":{},"122":{}},"component":{}}],["erasur",{"_index":2744,"title":{},"name":{},"text":{"45":{},"60":{}},"component":{}}],["erikhof",{"_index":3672,"title":{},"name":{},"text":{"60":{}},"component":{}}],["error",{"_index":861,"title":{"142":{},"56-8":{},"79-4":{},"79-5":{},"79-8":{},"80-18":{},"81-7":{},"142-1":{},"142-2":{},"142-3":{},"142-4":{},"142-5":{},"142-6":{},"142-7":{},"142-8":{},"142-9":{}},"name":{"142":{}},"text":{"5":{},"31":{},"35":{},"44":{},"46":{},"51":{},"56":{},"60":{},"61":{},"63":{},"66":{},"79":{},"80":{},"81":{},"89":{},"90":{},"97":{},"124":{},"138":{},"142":{},"143":{},"144":{},"154":{},"161":{},"172":{},"177":{},"212":{},"239":{},"240":{},"241":{},"256":{},"262":{},"265":{},"267":{},"268":{},"269":{},"270":{},"271":{},"274":{},"278":{},"282":{}},"component":{}}],["errorcontext",{"_index":4883,"title":{},"name":{},"text":{"79":{}},"component":{}}],["errorev",{"_index":4835,"title":{"79-20":{}},"name":{},"text":{"79":{}},"component":{}}],["errorhandl",{"_index":4875,"title":{},"name":{},"text":{"79":{}},"component":{}}],["errorhandler’",{"_index":4881,"title":{},"name":{},"text":{"79":{}},"component":{}}],["especi",{"_index":538,"title":{},"name":{},"text":{"3":{},"8":{},"24":{},"28":{},"31":{},"35":{},"41":{},"63":{},"65":{},"66":{},"70":{},"71":{},"91":{},"137":{},"158":{},"184":{},"279":{}},"component":{}}],["essenc",{"_index":2401,"title":{},"name":{},"text":{"36":{}},"component":{}}],["essenti",{"_index":2671,"title":{},"name":{},"text":{"44":{},"56":{},"79":{},"104":{},"110":{},"144":{},"151":{},"255":{}},"component":{}}],["establish",{"_index":5246,"title":{},"name":{},"text":{"80":{},"94":{},"144":{},"159":{},"180":{},"212":{},"277":{}},"component":{}}],["estim",{"_index":2893,"title":{},"name":{},"text":{"51":{},"60":{}},"component":{}}],["etc",{"_index":386,"title":{},"name":{},"text":{"3":{},"7":{},"11":{},"13":{},"26":{},"35":{},"38":{},"52":{},"62":{},"71":{},"72":{},"184":{}},"component":{}}],["etc/group",{"_index":385,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["etc/passwd",{"_index":384,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["etc/utc",{"_index":7167,"title":{},"name":{},"text":{"183":{}},"component":{}}],["eureka",{"_index":5981,"title":{},"name":{},"text":{"128":{}},"component":{}}],["europ",{"_index":7569,"title":{},"name":{},"text":{"231":{}},"component":{}}],["evalu",{"_index":2427,"title":{},"name":{},"text":{"37":{},"57":{},"63":{},"66":{},"190":{},"229":{},"241":{},"270":{}},"component":{}}],["even",{"_index":937,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"24":{},"35":{},"42":{},"44":{},"45":{},"52":{},"56":{},"61":{},"63":{},"66":{},"71":{},"79":{},"80":{},"85":{},"97":{},"117":{},"139":{},"140":{},"144":{},"149":{},"151":{},"156":{},"165":{},"173":{},"176":{},"193":{},"196":{},"201":{},"213":{},"216":{},"277":{},"281":{}},"component":{}}],["event",{"_index":28,"title":{"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"51":{},"66":{},"70":{},"71":{},"79":{},"80":{},"81":{},"98":{},"100":{},"104":{},"106":{},"107":{},"110":{},"115":{},"143":{},"144":{},"158":{},"209":{},"214":{},"271":{},"2-3":{},"2-4":{},"23-4":{},"24-9":{},"25-6":{},"28-3":{},"29-11":{},"33-1":{},"33-2":{},"33-3":{},"33-4":{},"33-5":{},"33-6":{},"35-1":{},"35-2":{},"35-3":{},"35-6":{},"35-16":{},"35-17":{},"35-20":{},"35-21":{},"35-25":{},"35-26":{},"36-1":{},"36-2":{},"37-1":{},"38-1":{},"38-4":{},"38-5":{},"42-2":{},"44-6":{},"44-7":{},"44-8":{},"45-2":{},"51-1":{},"52-29":{},"52-30":{},"52-31":{},"52-32":{},"63-2":{},"66-7":{},"70-3":{},"71-5":{},"71-6":{},"71-9":{},"77-2":{},"79-2":{},"79-3":{},"79-8":{},"79-28":{},"79-29":{},"80-61":{},"80-66":{},"89-1":{},"104-1":{},"104-2":{},"107-1":{},"110-1":{},"117-10":{},"117-13":{},"122-12":{},"137-16":{},"140-2":{},"143-1":{},"144-2":{},"144-3":{},"144-4":{},"144-6":{},"144-10":{},"144-17":{},"144-20":{},"144-23":{},"146-4":{},"173-1":{},"177-3":{},"199-11":{},"199-13":{},"200-5":{},"203-39":{},"209-5":{},"209-6":{},"209-7":{},"218-4":{},"254-1":{},"255-3":{},"270-18":{},"271-1":{},"280-6":{}},"name":{"33":{},"35":{},"36":{},"37":{},"38":{},"66":{},"70":{},"71":{},"110":{},"143":{},"144":{},"158":{},"209":{},"214":{},"271":{}},"text":{"1":{},"2":{},"3":{},"5":{},"17":{},"19":{},"22":{},"23":{},"24":{},"25":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{},"70":{},"71":{},"72":{},"73":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"95":{},"97":{},"98":{},"99":{},"100":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"110":{},"111":{},"114":{},"115":{},"116":{},"117":{},"119":{},"122":{},"126":{},"130":{},"131":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"149":{},"151":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"167":{},"171":{},"172":{},"173":{},"174":{},"176":{},"177":{},"184":{},"185":{},"190":{},"191":{},"192":{},"195":{},"197":{},"199":{},"200":{},"203":{},"209":{},"210":{},"211":{},"212":{},"214":{},"215":{},"217":{},"218":{},"221":{},"239":{},"240":{},"243":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"258":{},"261":{},"263":{},"267":{},"269":{},"270":{},"271":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["event).put(\"descript",{"_index":2514,"title":{},"name":{},"text":{"38":{}},"component":{}}],["event.aggregate.prefetch",{"_index":6890,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.aggregate.retry.attempt",{"_index":6891,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.aggregate.retry.delay",{"_index":6892,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.amount",{"_index":5306,"title":{},"name":{},"text":{"83":{}},"component":{}}],["event.bikeid",{"_index":7979,"title":{},"name":{},"text":{"278":{}},"component":{}}],["event.biketyp",{"_index":7865,"title":{},"name":{},"text":{"277":{}},"component":{}}],["event.bloom",{"_index":6855,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.ev",{"_index":6856,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.forc",{"_index":6867,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.getamount",{"_index":3086,"title":{},"name":{},"text":{"56":{},"78":{}},"component":{}}],["event.getid",{"_index":3084,"title":{},"name":{},"text":{"56":{}},"component":{}}],["event.getid().startswith(query.getfilter().getidstartswith",{"_index":3088,"title":{},"name":{},"text":{"56":{}},"component":{}}],["event.getpayload",{"_index":5880,"title":{},"name":{},"text":{"122":{}},"component":{}}],["event.glob",{"_index":6103,"title":{},"name":{},"text":{"138":{},"172":{}},"component":{}}],["event.handler.thread",{"_index":7498,"title":{},"name":{},"text":{"212":{}},"component":{}}],["event.id",{"_index":5326,"title":{},"name":{},"text":{"85":{}},"component":{}}],["event.id.startswith(query.idfilt",{"_index":5693,"title":{},"name":{},"text":{"112":{}},"component":{}}],["event.index",{"_index":6390,"title":{},"name":{},"text":{"146":{},"159":{},"162":{},"172":{}},"component":{}}],["event.leader.retry.attempt",{"_index":6893,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.leader.retry.delay",{"_index":6894,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.loc",{"_index":7866,"title":{},"name":{},"text":{"277":{}},"component":{}}],["event.max",{"_index":6393,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["event.memori",{"_index":6876,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.new",{"_index":6857,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.otherst",{"_index":4696,"title":{},"name":{},"text":{"71":{}},"component":{}}],["event.primari",{"_index":6868,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.read",{"_index":6957,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.retent",{"_index":6396,"title":{},"name":{},"text":{"146":{},"151":{}},"component":{}}],["event.secondari",{"_index":6871,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.seg",{"_index":6387,"title":{},"name":{},"text":{"146":{},"151":{},"172":{}},"component":{}}],["event.somest",{"_index":4694,"title":{},"name":{},"text":{"71":{}},"component":{}}],["event.storag",{"_index":6384,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["event.storage=[loc",{"_index":6413,"title":{},"name":{},"text":{"146":{}},"component":{}}],["event.sync",{"_index":6873,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.us",{"_index":6887,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event.valid",{"_index":6874,"title":{},"name":{},"text":{"172":{}},"component":{}}],["event/snapshot",{"_index":6230,"title":{},"name":{},"text":{"142":{},"146":{},"155":{}},"component":{}}],["eventa",{"_index":2431,"title":{},"name":{},"text":{"37":{}},"component":{}}],["eventavailabilitytimeout",{"_index":5080,"title":{},"name":{},"text":{"80":{}},"component":{}}],["eventb",{"_index":2430,"title":{},"name":{},"text":{"37":{}},"component":{}}],["eventblocklistingen",{"_index":3863,"title":{},"name":{},"text":{"61":{}},"component":{}}],["eventbu",{"_index":1891,"title":{},"name":{},"text":{"29":{},"32":{},"33":{},"35":{},"36":{},"44":{},"50":{},"60":{},"63":{},"75":{},"80":{},"81":{},"98":{}},"component":{}}],["eventbuffer#disableig",{"_index":3864,"title":{},"name":{},"text":{"61":{}},"component":{}}],["eventbus(eventbu",{"_index":2264,"title":{},"name":{},"text":{"33":{}},"component":{}}],["eventbus.registerdispatchinterceptor(new",{"_index":2679,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eventbus/eventgateway",{"_index":2748,"title":{},"name":{},"text":{"45":{}},"component":{}}],["eventbusclass}.commit",{"_index":2989,"title":{},"name":{},"text":{"52":{}},"component":{}}],["eventbusclass}.publish(${eventclass",{"_index":2988,"title":{},"name":{},"text":{"52":{}},"component":{}}],["eventbusconfigur",{"_index":2676,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eventc",{"_index":2432,"title":{},"name":{},"text":{"37":{}},"component":{}}],["eventcountsnapshottriggerdefinit",{"_index":4649,"title":{},"name":{},"text":{"71":{}},"component":{}}],["eventcountsnapshottriggerdefinition(snapshott",{"_index":4668,"title":{},"name":{},"text":{"71":{}},"component":{}}],["eventdata",{"_index":314,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["eventforwardingmod",{"_index":4804,"title":{},"name":{},"text":{"77":{}},"component":{}}],["eventgateway",{"_index":2417,"title":{},"name":{},"text":{"36":{},"60":{},"122":{}},"component":{}}],["eventgateway.publish(new",{"_index":2419,"title":{},"name":{},"text":{"36":{}},"component":{}}],["eventhandl",{"_index":2422,"title":{},"name":{},"text":{"37":{},"44":{},"45":{},"56":{},"60":{},"61":{},"63":{},"71":{},"75":{},"78":{},"79":{},"80":{},"112":{},"117":{},"277":{}},"component":{}}],["eventhandler(ev",{"_index":5781,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventhandler`",{"_index":7878,"title":{},"name":{},"text":{"277":{}},"component":{}}],["eventhandlerinterceptor",{"_index":4983,"title":{},"name":{},"text":{"79":{}},"component":{}}],["eventhandlerinvok",{"_index":4979,"title":{},"name":{},"text":{"79":{}},"component":{}}],["eventhandlingcomponentschedulingev",{"_index":5780,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventidentifi",{"_index":5419,"title":{},"name":{},"text":{"97":{}},"component":{}}],["eventjobdatabind",{"_index":2233,"title":{},"name":{},"text":{"33":{}},"component":{}}],["eventloggingdispatchinterceptor",{"_index":2673,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eventmessag",{"_index":2194,"title":{},"name":{},"text":{"32":{},"36":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"60":{},"61":{},"79":{},"106":{}},"component":{}}],["eventmessage.class",{"_index":2695,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eventmessage`",{"_index":4761,"title":{},"name":{},"text":{"75":{},"78":{}},"component":{}}],["eventmessagehandl",{"_index":4874,"title":{},"name":{},"text":{"79":{}},"component":{}}],["eventmono",{"_index":5877,"title":{},"name":{},"text":{"122":{}},"component":{}}],["eventmono.map(ev",{"_index":5878,"title":{},"name":{},"text":{"122":{}},"component":{}}],["eventmultiupcast",{"_index":2478,"title":{},"name":{},"text":{"38":{},"61":{}},"component":{}}],["eventnam",{"_index":7473,"title":{},"name":{},"text":{"209":{}},"component":{}}],["eventprocessingconfigur",{"_index":2440,"title":{},"name":{},"text":{"37":{},"60":{},"61":{},"63":{},"65":{},"79":{},"80":{},"89":{},"91":{},"104":{},"107":{},"143":{}},"component":{}}],["eventprocessingconfiguration#eventprocessor(str",{"_index":5194,"title":{},"name":{},"text":{"80":{}},"component":{}}],["eventprocessingconfigurer#defaulttransactionmanag",{"_index":3474,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventprocessingconfigurer#registersaga(class",{"_index":4421,"title":{},"name":{},"text":{"63":{}},"component":{}}],["eventprocessingconfigurer#registersagastore(funct",{"_index":4426,"title":{},"name":{},"text":{"63":{}},"component":{}}],["eventprocessingconfigurer.pooledstreamingprocessorconfigur",{"_index":5033,"title":{},"name":{},"text":{"80":{}},"component":{}}],["eventprocessingconfigurer.registereventhandler(configur",{"_index":5617,"title":{},"name":{},"text":{"107":{}},"component":{}}],["eventprocessingconfigurer.registersaga",{"_index":4422,"title":{},"name":{},"text":{"63":{}},"component":{}}],["eventprocessingconfigurer.registersaga(mysaga.class",{"_index":4417,"title":{},"name":{},"text":{"63":{}},"component":{}}],["eventprocessingconfigurer.registersubscribingeventprocessor",{"_index":5550,"title":{},"name":{},"text":{"104":{}},"component":{}}],["eventprocessingconfigurer.registertrackingeventprocessor",{"_index":5560,"title":{},"name":{},"text":{"104":{}},"component":{}}],["eventprocessingmodul",{"_index":3648,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventprocessor",{"_index":2683,"title":{},"name":{},"text":{"44":{},"46":{},"50":{},"60":{},"70":{},"79":{},"80":{},"143":{},"173":{}},"component":{}}],["eventprocessor(\"com.demo.queri",{"_index":5754,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventprocessor(processornam",{"_index":4625,"title":{},"name":{},"text":{"70":{}},"component":{}}],["eventprocessor.getidentifier().getprocessornam",{"_index":6280,"title":{},"name":{},"text":{"143":{}},"component":{}}],["eventprocessor.getidentifier().gettokenstoreidentifi",{"_index":6282,"title":{},"name":{},"text":{"143":{}},"component":{}}],["eventprocessor.gettokenstoreidentifi",{"_index":5115,"title":{},"name":{},"text":{"80":{}},"component":{}}],["eventprocessor`",{"_index":2690,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eventprocessoradminservic",{"_index":6978,"title":{},"name":{},"text":{"173":{}},"component":{}}],["eventprocessorbuild",{"_index":4977,"title":{},"name":{},"text":{"79":{}},"component":{}}],["eventprocessorbyprocessinggroup(processornam",{"_index":6252,"title":{},"name":{},"text":{"143":{}},"component":{}}],["eventprocessorconfigur",{"_index":2684,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eventprocessorcontrolservic",{"_index":3843,"title":{},"name":{},"text":{"61":{}},"component":{}}],["eventprocessorlatencymetr",{"_index":3353,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventprocessorlatencymonitor",{"_index":2818,"title":{},"name":{},"text":{"50":{},"61":{}},"component":{}}],["eventprocessornam",{"_index":6276,"title":{},"name":{},"text":{"143":{}},"component":{}}],["eventprocessorproperti",{"_index":5352,"title":{},"name":{},"text":{"89":{}},"component":{}}],["eventprocessor}",{"_index":5347,"title":{},"name":{},"text":{"89":{}},"component":{}}],["eventpublish",{"_index":5873,"title":{},"name":{},"text":{"122":{}},"component":{}}],["events/snapshot",{"_index":6235,"title":{},"name":{},"text":{"142":{}},"component":{}}],["events1",{"_index":484,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["events1:/axonserver/ev",{"_index":454,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["events2",{"_index":490,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["events2:/axonserver/ev",{"_index":465,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["events3",{"_index":496,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["events3:/axonserver/ev",{"_index":471,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["eventschedul",{"_index":2216,"title":{},"name":{},"text":{"33":{},"60":{},"68":{},"117":{}},"component":{}}],["eventscheduler#schedul",{"_index":5784,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventscheduler.cancelschedule(token",{"_index":5785,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventscheduler.schedule(instant.now().plusdays(10",{"_index":5783,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventschedulingcompon",{"_index":5788,"title":{},"name":{},"text":{"117":{}},"component":{}}],["eventschema",{"_index":3309,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventseri",{"_index":2322,"title":{},"name":{},"text":{"35":{},"60":{},"89":{},"108":{}},"component":{}}],["eventserializer(config.eventseri",{"_index":2339,"title":{},"name":{},"text":{"35":{}},"component":{}}],["eventserializer(eventseri",{"_index":2326,"title":{},"name":{},"text":{"35":{},"89":{}},"component":{}}],["eventsourc",{"_index":1249,"title":{},"name":{},"text":{"23":{},"26":{},"144":{}},"component":{}}],["eventsourcea",{"_index":5251,"title":{},"name":{},"text":{"80":{}},"component":{}}],["eventsourceb",{"_index":5252,"title":{},"name":{},"text":{"80":{}},"component":{}}],["eventsources.rang",{"_index":6335,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventsourcinghandl",{"_index":4754,"title":{},"name":{},"text":{"75":{},"77":{},"83":{},"85":{},"277":{},"278":{}},"component":{}}],["eventsourcinghandler`",{"_index":4737,"title":{},"name":{},"text":{"74":{}},"component":{}}],["eventsourcingrepositori",{"_index":1880,"title":{},"name":{},"text":{"29":{},"60":{},"71":{}},"component":{}}],["eventsourcingrepository#getaggregatefactori",{"_index":4657,"title":{},"name":{},"text":{"71":{}},"component":{}}],["eventsourcingrepository.builder(giftcard.class",{"_index":1877,"title":{},"name":{},"text":{"29":{}},"component":{}}],["eventsourcingrepository.builder(giftcard.class).eventstore(eventstore).build",{"_index":1883,"title":{},"name":{},"text":{"29":{}},"component":{}}],["eventstor",{"_index":1881,"title":{},"name":{},"text":{"29":{},"31":{},"32":{},"35":{},"38":{},"42":{},"44":{},"50":{},"60":{},"61":{},"63":{},"71":{},"79":{},"80":{},"98":{},"115":{},"117":{},"142":{},"242":{}},"component":{}}],["eventstorageengin",{"_index":2277,"title":{},"name":{},"text":{"35":{},"44":{},"61":{},"97":{},"115":{},"116":{}},"component":{}}],["eventstorageengine(seri",{"_index":2321,"title":{},"name":{},"text":{"35":{}},"component":{}}],["eventstore(c.eventstor",{"_index":1878,"title":{},"name":{},"text":{"29":{}},"component":{}}],["eventstore(eventstorageengin",{"_index":2316,"title":{},"name":{},"text":{"35":{},"115":{}},"component":{}}],["eventstore’",{"_index":2389,"title":{},"name":{},"text":{"35":{}},"component":{}}],["eventstream",{"_index":7626,"title":{},"name":{},"text":{"255":{}},"component":{}}],["eventtablefactori",{"_index":2334,"title":{},"name":{},"text":{"35":{}},"component":{}}],["eventtrackerstatuschangelisten",{"_index":3714,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventtransform",{"_index":6333,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventtransformationchannel",{"_index":6370,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventtransformationchannel#activetransform",{"_index":6375,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventtransformationchannel#newtransformation(descript",{"_index":6358,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventtransformationchannel#startcompact",{"_index":6373,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventtransformationchannel#transform",{"_index":6355,"title":{},"name":{},"text":{"144":{}},"component":{}}],["eventtyp",{"_index":5665,"title":{},"name":{},"text":{"110":{}},"component":{}}],["eventtypeupcast",{"_index":2484,"title":{},"name":{},"text":{"38":{},"61":{}},"component":{}}],["eventtypeupcaster#from(str",{"_index":2486,"title":{},"name":{},"text":{"38":{}},"component":{}}],["eventtypeupcaster.builder#to(upcastedpayloadtyp",{"_index":2489,"title":{},"name":{},"text":{"38":{}},"component":{}}],["eventu",{"_index":3117,"title":{},"name":{},"text":{"56":{},"61":{},"80":{},"97":{},"101":{}},"component":{}}],["eventupcaster.singleeventupcast",{"_index":5664,"title":{},"name":{},"text":{"110":{}},"component":{}}],["eventupcasterchain",{"_index":2449,"title":{"38-9":{}},"name":{},"text":{"38":{},"61":{},"106":{}},"component":{}}],["eventutils#asdomaineventmessag",{"_index":3711,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventvalid",{"_index":3726,"title":{},"name":{},"text":{"60":{}},"component":{}}],["eventwithtoken",{"_index":6340,"title":{},"name":{},"text":{"144":{}},"component":{}}],["event’",{"_index":2470,"title":{},"name":{},"text":{"38":{},"50":{},"80":{},"81":{}},"component":{}}],["everybodi",{"_index":4177,"title":{},"name":{},"text":{"61":{},"126":{}},"component":{}}],["everyth",{"_index":781,"title":{},"name":{},"text":{"5":{},"6":{},"25":{},"79":{},"81":{},"151":{},"197":{},"199":{},"258":{},"266":{},"273":{},"281":{},"282":{}},"component":{}}],["evict",{"_index":4411,"title":{},"name":{},"text":{"63":{},"65":{},"88":{}},"component":{}}],["evolut",{"_index":7698,"title":{},"name":{},"text":{"270":{},"271":{},"276":{}},"component":{}}],["evolutionari",{"_index":827,"title":{},"name":{},"text":{"5":{}},"component":{}}],["evolv",{"_index":7263,"title":{},"name":{},"text":{"197":{},"227":{},"237":{},"270":{},"276":{},"279":{}},"component":{}}],["evt",{"_index":4756,"title":{},"name":{},"text":{"75":{},"77":{}},"component":{}}],["evt.getamount",{"_index":4801,"title":{},"name":{},"text":{"77":{}},"component":{}}],["evt.getcardid",{"_index":4757,"title":{},"name":{},"text":{"75":{}},"component":{}}],["exact",{"_index":1233,"title":{},"name":{},"text":{"23":{},"31":{},"57":{},"61":{},"66":{},"80":{},"151":{},"156":{},"172":{},"277":{}},"component":{}}],["exactli",{"_index":69,"title":{"2-1":{}},"name":{},"text":{"27":{},"29":{},"31":{},"42":{},"63":{},"66":{},"71":{},"77":{},"79":{},"80":{},"96":{},"141":{},"144":{},"170":{},"236":{},"270":{}},"component":{}}],["exactsequenceof",{"_index":4557,"title":{},"name":{},"text":{"66":{}},"component":{}}],["examin",{"_index":7316,"title":{"200-2":{}},"name":{},"text":{"270":{}},"component":{}}],["exampl",{"_index":527,"title":{"190-5":{},"192-1":{}},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"11":{},"13":{},"15":{},"21":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"73":{},"74":{},"77":{},"79":{},"80":{},"81":{},"83":{},"86":{},"88":{},"89":{},"90":{},"93":{},"96":{},"97":{},"101":{},"105":{},"107":{},"108":{},"109":{},"111":{},"112":{},"114":{},"117":{},"122":{},"124":{},"126":{},"127":{},"128":{},"130":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"154":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"170":{},"171":{},"172":{},"174":{},"183":{},"184":{},"185":{},"196":{},"198":{},"199":{},"203":{},"205":{},"218":{},"231":{},"236":{},"241":{},"251":{},"254":{},"255":{},"256":{},"261":{},"263":{},"267":{},"270":{},"271":{},"275":{},"277":{},"278":{}},"component":{}}],["examplehandlerdefinit",{"_index":5381,"title":{},"name":{},"text":{"93":{}},"component":{}}],["examplemessagehandlingmemb",{"_index":5388,"title":{},"name":{},"text":{"93":{}},"component":{}}],["examplemessagehandlingmember(messagehandlingmemb",{"_index":5391,"title":{},"name":{},"text":{"93":{}},"component":{}}],["examplemessagehandlingmember<>(origin",{"_index":5385,"title":{},"name":{},"text":{"93":{}},"component":{}}],["exce",{"_index":755,"title":{"5-9":{}},"name":{},"text":{"71":{},"80":{},"254":{},"256":{}},"component":{}}],["exceed",{"_index":4244,"title":{},"name":{},"text":{"61":{},"79":{},"80":{},"256":{},"266":{}},"component":{}}],["excel",{"_index":1342,"title":{},"name":{},"text":{"24":{},"92":{},"270":{},"274":{}},"component":{}}],["except",{"_index":1046,"title":{"41":{},"41-1":{},"44-19":{},"44-20":{}},"name":{"41":{}},"text":{"8":{},"9":{},"24":{},"27":{},"28":{},"31":{},"33":{},"35":{},"38":{},"41":{},"44":{},"46":{},"56":{},"60":{},"61":{},"66":{},"71":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"90":{},"100":{},"106":{},"109":{},"142":{},"144":{},"148":{},"203":{},"212":{},"251":{},"254":{},"256":{}},"component":{}}],["exception",{"_index":1750,"title":{},"name":{},"text":{"27":{},"61":{}},"component":{}}],["exception/messag",{"_index":2708,"title":{},"name":{},"text":{"44":{}},"component":{}}],["exceptionhandl",{"_index":2553,"title":{"41-2":{},"44-18":{}},"name":{},"text":{"41":{},"44":{},"60":{},"61":{}},"component":{}}],["exceptionhandler(payloadtyp",{"_index":2713,"title":{},"name":{},"text":{"44":{}},"component":{}}],["exceptionhandler(resulttyp",{"_index":2718,"title":{},"name":{},"text":{"44":{}},"component":{}}],["exceptionresult",{"_index":2789,"title":{},"name":{},"text":{"46":{}},"component":{}}],["exchang",{"_index":117,"title":{"98":{}},"name":{},"text":{"2":{},"98":{},"99":{},"276":{},"280":{}},"component":{}}],["excit",{"_index":7694,"title":{},"name":{},"text":{"268":{}},"component":{}}],["exclud",{"_index":2123,"title":{},"name":{},"text":{"31":{},"35":{},"54":{},"60":{},"79":{}},"component":{}}],["exclus",{"_index":2307,"title":{},"name":{},"text":{"35":{},"61":{},"192":{}},"component":{}}],["execut",{"_index":356,"title":{"41-1":{},"66-4":{},"280-4":{},"282-5":{}},"name":{},"text":{"3":{},"27":{},"28":{},"31":{},"32":{},"34":{},"35":{},"36":{},"41":{},"42":{},"44":{},"46":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"74":{},"75":{},"76":{},"80":{},"93":{},"117":{},"142":{},"143":{},"144":{},"147":{},"150":{},"151":{},"164":{},"167":{},"171":{},"172":{},"173":{},"177":{},"184":{},"185":{},"191":{},"197":{},"198":{},"201":{},"205":{},"212":{},"236":{},"254":{},"270":{},"271":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["execute(eventtranformationchannelsuppli",{"_index":6350,"title":{},"name":{},"text":{"144":{}},"component":{}}],["execute(giftcard",{"_index":1839,"title":{},"name":{},"text":{"28":{},"29":{}},"component":{}}],["executeintransact",{"_index":5791,"title":{},"name":{},"text":{"117":{}},"component":{}}],["executewithresult",{"_index":2785,"title":{},"name":{},"text":{"46":{}},"component":{}}],["executionresult",{"_index":2796,"title":{},"name":{},"text":{"46":{}},"component":{}}],["executor",{"_index":2018,"title":{},"name":{},"text":{"31":{},"52":{},"71":{},"80":{},"104":{},"127":{},"129":{},"172":{}},"component":{}}],["executors.newscheduledthreadpool(1",{"_index":5157,"title":{},"name":{},"text":{"80":{}},"component":{}}],["executors.newscheduledthreadpool(16",{"_index":5160,"title":{},"name":{},"text":{"80":{}},"component":{}}],["executorservic",{"_index":2025,"title":{},"name":{},"text":{"31":{},"104":{}},"component":{}}],["executorservice(executorservic",{"_index":5522,"title":{},"name":{},"text":{"104":{}},"component":{}}],["exemplifi",{"_index":1688,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{}}],["exercis",{"_index":7770,"title":{},"name":{},"text":{"274":{}},"component":{}}],["exert",{"_index":4831,"title":{},"name":{},"text":{"78":{}},"component":{}}],["exhaust",{"_index":936,"title":{},"name":{},"text":{"7":{},"26":{},"45":{},"60":{},"61":{},"79":{},"80":{}},"component":{}}],["exist",{"_index":573,"title":{},"name":{},"text":{"3":{},"9":{},"28":{},"29":{},"31":{},"32":{},"35":{},"40":{},"44":{},"53":{},"56":{},"60":{},"61":{},"63":{},"65":{},"70":{},"91":{},"93":{},"97":{},"103":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"151":{},"154":{},"162":{},"163":{},"170":{},"171":{},"173":{},"184":{},"196":{},"200":{},"201":{},"203":{},"205":{},"212":{},"213":{},"271":{},"277":{}},"component":{}}],["exit",{"_index":2693,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{}}],["expand",{"_index":3593,"title":{},"name":{},"text":{"60":{},"86":{},"137":{},"139":{},"150":{},"270":{}},"component":{}}],["expect",{"_index":1044,"title":{},"name":{},"text":{"8":{},"9":{},"24":{},"26":{},"28":{},"29":{},"31":{},"33":{},"37":{},"38":{},"40":{},"44":{},"45":{},"46":{},"56":{},"57":{},"60":{},"61":{},"66":{},"68":{},"71":{},"73":{},"76":{},"77":{},"79":{},"80":{},"93":{},"106":{},"108":{},"122":{},"142":{},"151":{},"154":{},"159":{},"169":{},"200":{},"201":{},"203":{},"208":{},"209":{},"211":{},"213":{},"216":{},"221":{},"241":{},"260":{},"263":{},"266":{},"270":{},"277":{},"278":{},"282":{}},"component":{}}],["expectdeadlinesmet(object",{"_index":4587,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectdeadlinesmetmatching(match",{"_index":4588,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectdispatchedcommandsmatching(matchers.listwithallof(amarkasoverduecommand",{"_index":4595,"title":{},"name":{},"text":{"68":{}},"component":{}}],["expectdispatchedcommandsmatching(matchers.payloadsmatching(matchers.listwithallof(amarkasoverduecommand",{"_index":4596,"title":{},"name":{},"text":{"68":{}},"component":{}}],["expectedpayloadtyp",{"_index":2487,"title":{},"name":{},"text":{"38":{}},"component":{}}],["expectedrevis",{"_index":2488,"title":{},"name":{},"text":{"38":{}},"component":{}}],["expectedvalu",{"_index":5390,"title":{},"name":{},"text":{"93":{}},"component":{}}],["expectedvalue.equals(message.getmetadata().get(metadatakey",{"_index":5397,"title":{},"name":{},"text":{"93":{}},"component":{}}],["expectevents(new",{"_index":4453,"title":{},"name":{},"text":{"66":{},"87":{},"282":{}},"component":{}}],["expecteventsmatching(exactsequenceof",{"_index":4554,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expecteventsmatching(payloadsmatch",{"_index":4556,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectexceptionmessag",{"_index":4136,"title":{},"name":{},"text":{"61":{}},"component":{}}],["expectnoev",{"_index":5312,"title":{},"name":{},"text":{"83":{}},"component":{}}],["expectnoscheduleddeadlin",{"_index":4577,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadline(dur",{"_index":4580,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadline(inst",{"_index":4584,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlinematching(dur",{"_index":4579,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlinematching(inst",{"_index":4583,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlinematching(match",{"_index":4578,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlineoftype(dur",{"_index":4581,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlineoftype(inst",{"_index":4585,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlinewithname(dur",{"_index":4582,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectnoscheduleddeadlinewithname(inst",{"_index":4586,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadline(dur",{"_index":4569,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadline(inst",{"_index":4573,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadlinematching(dur",{"_index":4570,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadlinematching(inst",{"_index":4574,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadlineoftype(dur",{"_index":4571,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadlineoftype(inst",{"_index":4575,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadlinewithname(dur",{"_index":4572,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectscheduleddeadlinewithname(inst",{"_index":4576,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectst",{"_index":4564,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectstate(st",{"_index":4563,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expectsuccessfulhandlerexecut",{"_index":3602,"title":{},"name":{},"text":{"60":{},"66":{},"83":{},"87":{}},"component":{}}],["expecttriggereddeadlineswithname(\"expired_gift_card",{"_index":5340,"title":{},"name":{},"text":{"87":{}},"component":{}}],["expend",{"_index":5823,"title":{},"name":{},"text":{"122":{}},"component":{}}],["expens",{"_index":4408,"title":{},"name":{},"text":{"63":{},"65":{},"71":{},"139":{},"151":{}},"component":{}}],["experi",{"_index":33,"title":{},"name":{},"text":{"1":{},"7":{},"23":{},"137":{},"200":{},"232":{},"260":{},"262":{},"274":{}},"component":{}}],["experienc",{"_index":7810,"title":{},"name":{},"text":{"276":{}},"component":{}}],["experiment",{"_index":5673,"title":{},"name":{},"text":{"111":{},"137":{},"151":{}},"component":{}}],["experimental.black",{"_index":6502,"title":{},"name":{},"text":{"151":{}},"component":{}}],["expert",{"_index":4437,"title":{},"name":{},"text":{"66":{}},"component":{}}],["expir",{"_index":4708,"title":{},"name":{},"text":{"71":{},"83":{},"85":{},"86":{},"169":{},"172":{},"176":{},"255":{}},"component":{}}],["expired_gift_card",{"_index":5305,"title":{},"name":{},"text":{"83":{},"85":{}},"component":{}}],["expiri",{"_index":6036,"title":{},"name":{},"text":{"137":{}},"component":{}}],["expiringcardexpiredev",{"_index":5330,"title":{},"name":{},"text":{"85":{},"87":{}},"component":{}}],["expiringcardexpiredevent(card_id",{"_index":5339,"title":{},"name":{},"text":{"87":{}},"component":{}}],["expiringcardexpiredevent(giftcardid",{"_index":5324,"title":{},"name":{},"text":{"85":{}},"component":{}}],["expiringcardissuedevent(command.id",{"_index":5319,"title":{},"name":{},"text":{"85":{}},"component":{}}],["expiringgiftcard",{"_index":5317,"title":{},"name":{},"text":{"85":{}},"component":{}}],["expiringgiftcardtest",{"_index":5331,"title":{},"name":{},"text":{"87":{}},"component":{}}],["explain",{"_index":909,"title":{"14-1":{}},"name":{},"text":{"7":{},"8":{},"15":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"37":{},"38":{},"54":{},"55":{},"58":{},"61":{},"75":{},"78":{},"79":{},"80":{},"89":{},"151":{},"213":{},"214":{},"216":{},"218":{},"271":{},"279":{}},"component":{}}],["explan",{"_index":892,"title":{},"name":{},"text":{"7":{},"60":{},"144":{},"254":{},"257":{},"277":{}},"component":{}}],["explicit",{"_index":1929,"title":{},"name":{},"text":{"31":{},"35":{},"40":{},"61":{},"66":{},"68":{},"76":{},"79":{},"112":{},"140":{},"271":{}},"component":{}}],["explicitli",{"_index":817,"title":{},"name":{},"text":{"5":{},"25":{},"31":{},"35":{},"45":{},"66":{},"68":{},"71":{},"73":{},"77":{},"79":{},"80":{},"89":{},"93":{},"96":{},"104":{},"144":{},"146":{},"148":{},"172":{},"185":{},"208":{},"209":{},"211":{}},"component":{}}],["explor",{"_index":7243,"title":{},"name":{},"text":{"196":{},"238":{},"260":{},"262":{},"273":{},"277":{}},"component":{}}],["exploratori",{"_index":7677,"title":{},"name":{},"text":{"267":{}},"component":{}}],["exponenti",{"_index":1947,"title":{},"name":{},"text":{"31":{},"60":{}},"component":{}}],["exponentialbackoffintervalretryschedul",{"_index":1946,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{}}],["export",{"_index":210,"title":{"3-2":{},"141-7":{},"170-3":{}},"name":{},"text":{"3":{},"141":{},"170":{},"179":{},"184":{},"281":{}},"component":{}}],["expos",{"_index":360,"title":{},"name":{},"text":{"3":{},"31":{},"37":{},"43":{},"50":{},"51":{},"60":{},"75":{},"77":{},"79":{},"126":{},"137":{},"143":{},"158":{},"165":{},"176":{},"184":{},"212":{},"277":{}},"component":{}}],["exposur",{"_index":6022,"title":{"137-11":{}},"name":{},"text":{},"component":{}}],["express",{"_index":2667,"title":{},"name":{},"text":{"44":{},"66":{},"81":{},"144":{},"146":{},"171":{},"190":{},"192":{},"193":{},"242":{}},"component":{}}],["ext",{"_index":731,"title":{},"name":{},"text":{"4":{},"163":{},"165":{}},"component":{}}],["extend",{"_index":1893,"title":{},"name":{},"text":{"29":{},"35":{},"37":{},"38":{},"40":{},"42":{},"45":{},"57":{},"60":{},"61":{},"71":{},"74":{},"80":{},"92":{},"93":{},"95":{},"122":{},"135":{},"277":{}},"component":{}}],["extens",{"_index":0,"title":{"1":{},"105":{},"114":{},"118":{},"127":{},"130":{},"163":{},"165":{},"1-1":{},"4-3":{},"16-2":{},"23-15":{},"163-1":{},"163-2":{},"163-5":{},"165-1":{},"165-2":{}},"name":{},"text":{"1":{},"3":{},"4":{},"8":{},"16":{},"23":{},"24":{},"25":{},"31":{},"32":{},"35":{},"52":{},"56":{},"60":{},"66":{},"79":{},"80":{},"81":{},"99":{},"100":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"111":{},"116":{},"117":{},"118":{},"119":{},"121":{},"122":{},"123":{},"124":{},"128":{},"129":{},"130":{},"131":{},"137":{},"138":{},"146":{},"147":{},"163":{},"165":{},"167":{},"168":{},"184":{},"245":{},"280":{}},"component":{"1":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{}}}],["extent",{"_index":1751,"title":{},"name":{},"text":{"27":{}},"component":{}}],["extern",{"_index":155,"title":{"28-5":{}},"name":{},"text":{"2":{},"29":{},"63":{},"66":{},"68":{},"75":{},"78":{},"90":{},"117":{},"122":{},"137":{},"143":{},"162":{},"167":{},"172":{},"278":{},"281":{}},"component":{}}],["extra",{"_index":835,"title":{},"name":{},"text":{"5":{},"24":{},"31":{},"40":{},"42":{},"60":{},"66":{},"151":{},"172":{}},"component":{}}],["extract",{"_index":3638,"title":{},"name":{},"text":{"60":{},"71":{},"81":{},"185":{},"278":{}},"component":{}}],["extractor",{"_index":5132,"title":{},"name":{},"text":{"80":{}},"component":{}}],["extraordinari",{"_index":1995,"title":{},"name":{},"text":{"31":{}},"component":{}}],["extrem",{"_index":1426,"title":{},"name":{},"text":{"24":{},"53":{},"231":{},"239":{}},"component":{}}],["exts/axon",{"_index":6621,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["exts/common",{"_index":6744,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/cont",{"_index":6749,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/javax.inject",{"_index":6624,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["exts/javax.persist",{"_index":6751,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/javax.transact",{"_index":6753,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/jcip",{"_index":6755,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/lang",{"_index":6756,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/nimbu",{"_index":6758,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/oauth2",{"_index":6762,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/spr",{"_index":6626,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["exts/tomcat",{"_index":6768,"title":{},"name":{},"text":{"165":{}},"component":{}}],["exts/valid",{"_index":6772,"title":{},"name":{},"text":{"165":{}},"component":{}}],["ey",{"_index":2881,"title":{},"name":{},"text":{"51":{},"263":{},"280":{}},"component":{}}],["f",{"_index":660,"title":{},"name":{},"text":{"3":{},"60":{},"80":{},"147":{},"171":{},"184":{},"280":{}},"component":{}}],["f016e450998",{"_index":7942,"title":{},"name":{},"text":{"277":{}},"component":{}}],["fabio",{"_index":4125,"title":{},"name":{},"text":{"61":{}},"component":{}}],["facad",{"_index":1261,"title":{},"name":{},"text":{"23":{},"50":{}},"component":{}}],["face",{"_index":4127,"title":{},"name":{},"text":{"61":{},"129":{}},"component":{}}],["facilit",{"_index":1912,"title":{},"name":{},"text":{"30":{},"39":{},"55":{},"64":{},"67":{},"137":{},"144":{},"224":{},"233":{}},"component":{}}],["fact",{"_index":564,"title":{},"name":{},"text":{"3":{},"31":{},"42":{},"44":{},"52":{},"60":{},"61":{},"70":{},"77":{},"80":{},"90":{},"95":{},"144":{},"184":{}},"component":{}}],["facto",{"_index":5818,"title":{},"name":{},"text":{"121":{}},"component":{}}],["factor",{"_index":686,"title":{"31-19":{},"31-28":{}},"name":{},"text":{"3":{},"31":{},"71":{},"102":{},"127":{},"184":{},"208":{}},"component":{}}],["factor=100",{"_index":5489,"title":{},"name":{},"text":{"102":{},"127":{}},"component":{}}],["factori",{"_index":1847,"title":{"29-12":{},"52-1":{},"52-5":{},"117-14":{}},"name":{},"text":{"29":{},"31":{},"43":{},"52":{},"60":{},"71":{},"73":{},"79":{},"80":{},"92":{},"115":{},"117":{}},"component":{}}],["factory(factori",{"_index":5707,"title":{},"name":{},"text":{"115":{}},"component":{}}],["factory.creategateway(mygateway.class",{"_index":1988,"title":{},"name":{},"text":{"31":{}},"component":{}}],["factorybean",{"_index":4170,"title":{},"name":{},"text":{"61":{}},"component":{}}],["fail",{"_index":1471,"title":{"91":{}},"name":{},"text":{"24":{},"28":{},"29":{},"31":{},"41":{},"46":{},"50":{},"56":{},"60":{},"61":{},"66":{},"71":{},"76":{},"79":{},"80":{},"89":{},"90":{},"109":{},"122":{},"138":{},"142":{},"150":{},"172":{},"255":{}},"component":{}}],["failur",{"_index":2036,"title":{},"name":{},"text":{"31":{},"35":{},"41":{},"60":{},"61":{},"75":{},"78":{},"79":{},"107":{},"109":{},"126":{},"151":{},"251":{},"282":{}},"component":{}}],["failurethreshold",{"_index":645,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["fair",{"_index":2058,"title":{},"name":{},"text":{"31":{},"80":{}},"component":{}}],["fairli",{"_index":3183,"title":{},"name":{},"text":{"58":{},"66":{}},"component":{}}],["faith",{"_index":4719,"title":{},"name":{},"text":{"73":{}},"component":{}}],["fall",{"_index":891,"title":{},"name":{},"text":{"7":{},"31":{},"35":{},"60":{},"80":{},"281":{}},"component":{}}],["fallback",{"_index":2101,"title":{},"name":{},"text":{"31":{},"54":{},"61":{},"81":{},"156":{},"203":{},"277":{}},"component":{}}],["fallbackroutingstrategy(unresolvedroutingkeypolicy.random_key",{"_index":2114,"title":{},"name":{},"text":{"31":{}},"component":{}}],["fallbackroutingstrategy(unresolvedroutingkeypolicy.static_key",{"_index":2111,"title":{},"name":{},"text":{"31":{}},"component":{}}],["fals",{"_index":1575,"title":{},"name":{},"text":{"25":{},"31":{},"33":{},"45":{},"50":{},"51":{},"52":{},"61":{},"62":{},"75":{},"77":{},"85":{},"116":{},"117":{},"130":{},"159":{},"162":{},"165":{},"171":{},"172":{},"179":{},"183":{},"185":{},"190":{},"201":{},"203":{},"241":{}},"component":{}}],["familiar",{"_index":1123,"title":{},"name":{},"text":{"10":{},"268":{}},"component":{}}],["faq",{"_index":91,"title":{"2":{},"5":{}},"name":{"2":{}},"text":{"14":{}},"component":{"2":{},"5":{}}}],["far",{"_index":1207,"title":{},"name":{},"text":{"19":{},"23":{},"25":{},"50":{},"61":{},"128":{},"138":{},"176":{},"218":{}},"component":{}}],["fashion",{"_index":2926,"title":{},"name":{},"text":{"52":{},"60":{},"80":{}},"component":{}}],["fast",{"_index":1334,"title":{},"name":{},"text":{"24":{},"35":{},"80":{},"122":{},"137":{},"139":{},"151":{},"156":{},"176":{},"278":{}},"component":{}}],["faster",{"_index":2093,"title":{},"name":{},"text":{"31":{},"137":{},"151":{},"172":{},"176":{}},"component":{}}],["fastest",{"_index":6474,"title":{},"name":{},"text":{"150":{},"239":{},"270":{}},"component":{}}],["fat",{"_index":2479,"title":{},"name":{},"text":{"38":{}},"component":{}}],["fatal",{"_index":6097,"title":{},"name":{},"text":{"138":{}},"component":{}}],["faulti",{"_index":4299,"title":{},"name":{},"text":{"61":{},"79":{},"127":{}},"component":{}}],["favor",{"_index":1641,"title":{},"name":{},"text":{"26":{},"61":{},"172":{},"212":{}},"component":{}}],["favorit",{"_index":980,"title":{},"name":{},"text":{"8":{},"276":{}},"component":{}}],["favour",{"_index":2127,"title":{},"name":{},"text":{"31":{}},"component":{}}],["feasibl",{"_index":4684,"title":{},"name":{},"text":{"71":{},"140":{}},"component":{}}],["featur",{"_index":71,"title":{"253":{},"278":{},"2-2":{},"2-5":{},"52-8":{},"60-2":{},"60-8":{},"60-13":{},"60-18":{},"60-23":{},"61-49":{},"61-78":{},"61-92":{},"137-8":{},"137-15":{},"137-26":{},"138-24":{},"144-27":{},"212-3":{},"212-7":{},"212-11":{},"212-15":{},"212-19":{},"247-2":{}},"name":{},"text":{"2":{},"5":{},"14":{},"23":{},"25":{},"33":{},"45":{},"52":{},"56":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"80":{},"101":{},"103":{},"126":{},"137":{},"139":{},"141":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"156":{},"168":{},"170":{},"180":{},"185":{},"199":{},"218":{},"223":{},"241":{},"245":{},"247":{},"253":{},"254":{},"260":{},"262":{},"266":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"275":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["feature/1466",{"_index":3455,"title":{},"name":{},"text":{"60":{}},"component":{}}],["feature/1629",{"_index":3548,"title":{},"name":{},"text":{"60":{}},"component":{}}],["feed",{"_index":5573,"title":{},"name":{},"text":{"106":{}},"component":{}}],["feedback",{"_index":3577,"title":{"232":{}},"name":{"232":{}},"text":{"60":{},"137":{},"232":{}},"component":{}}],["feel",{"_index":194,"title":{},"name":{},"text":{"2":{},"5":{},"56":{},"111":{},"121":{},"137":{},"149":{}},"component":{}}],["fernanf",{"_index":3425,"title":{},"name":{},"text":{"60":{}},"component":{}}],["fetch",{"_index":1008,"title":{},"name":{},"text":{"8":{},"31":{},"35":{},"52":{},"57":{},"60":{},"61":{},"80":{},"156":{},"203":{}},"component":{}}],["fetchcardsummariesqueri",{"_index":3090,"title":{},"name":{},"text":{"56":{},"199":{}},"component":{}}],["fetchcardsummariesquery(offset",{"_index":3095,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fetchcardsummaryqueri",{"_index":3157,"title":{},"name":{},"text":{"57":{}},"component":{}}],["fetchcardsummaryquery(str",{"_index":3159,"title":{},"name":{},"text":{"57":{}},"component":{}}],["fetcher",{"_index":5510,"title":{},"name":{},"text":{"104":{},"108":{},"172":{}},"component":{}}],["fetcher(fetch",{"_index":5544,"title":{},"name":{},"text":{"104":{}},"component":{}}],["fetcher(long",{"_index":5518,"title":{},"name":{},"text":{"104":{}},"component":{}}],["fetchqueryresult",{"_index":3097,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fetchqueryresult.clos",{"_index":3105,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fetchtype.eag",{"_index":4822,"title":{},"name":{},"text":{"78":{}},"component":{}}],["few",{"_index":1591,"title":{},"name":{},"text":{"26":{},"31":{},"33":{},"35":{},"44":{},"46":{},"63":{},"66":{},"71":{},"83":{},"92":{},"127":{},"144":{},"151":{},"204":{},"236":{},"277":{},"278":{}},"component":{}}],["fewer",{"_index":7622,"title":{},"name":{},"text":{"254":{},"271":{}},"component":{}}],["field",{"_index":1341,"title":{"196-4":{}},"name":{},"text":{"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"38":{},"42":{},"43":{},"44":{},"45":{},"51":{},"53":{},"57":{},"60":{},"61":{},"63":{},"66":{},"68":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"81":{},"97":{},"112":{},"130":{},"190":{},"191":{},"194":{},"196":{},"200":{},"213":{},"214":{},"216":{},"221":{},"256":{},"267":{},"270":{},"277":{},"278":{},"280":{}},"component":{}}],["field/gett",{"_index":4809,"title":{},"name":{},"text":{"77":{}},"component":{}}],["fifo",{"_index":4109,"title":{},"name":{},"text":{"61":{}},"component":{}}],["fifteen",{"_index":7050,"title":{},"name":{},"text":{"177":{}},"component":{}}],["fifth",{"_index":7707,"title":{},"name":{},"text":{"270":{}},"component":{}}],["figur",{"_index":896,"title":{},"name":{},"text":{"7":{},"11":{},"35":{},"38":{},"198":{},"199":{},"200":{},"262":{},"271":{},"278":{}},"component":{}}],["file",{"_index":260,"title":{"24-4":{},"24-5":{},"80-7":{},"80-15":{},"80-44":{},"80-48":{},"80-53":{},"80-57":{},"80-71":{},"81-6":{},"81-12":{},"108-11":{},"172-1":{},"203-27":{},"203-29":{},"203-31":{},"203-34":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"25":{},"26":{},"31":{},"35":{},"38":{},"60":{},"80":{},"81":{},"92":{},"93":{},"95":{},"97":{},"101":{},"102":{},"108":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"154":{},"155":{},"160":{},"162":{},"163":{},"165":{},"169":{},"170":{},"171":{},"172":{},"174":{},"176":{},"178":{},"179":{},"184":{},"185":{},"198":{},"203":{},"205":{},"212":{},"223":{},"234":{},"260":{},"264":{},"270":{},"273":{},"274":{},"275":{},"276":{},"277":{},"280":{},"281":{},"282":{}},"component":{}}],["file.segment.per.ti",{"_index":6523,"title":{},"name":{},"text":{"151":{}},"component":{}}],["file=./axoniq.licens",{"_index":593,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["file=./axoniq.token",{"_index":597,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["file=./axonserver.properti",{"_index":598,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["file=default_tcp_gossip.xml",{"_index":5496,"title":{},"name":{},"text":{"102":{}},"component":{}}],["file_segment_moved_complet",{"_index":6521,"title":{},"name":{},"text":{"151":{}},"component":{}}],["file_segment_moved_completed_total{axonserver=\"axonserv",{"_index":6515,"title":{},"name":{},"text":{"151":{}},"component":{}}],["file_segment_moved_dur",{"_index":6522,"title":{},"name":{},"text":{"151":{}},"component":{}}],["file_segment_moved_duration_seconds_sum{axonserver=\"axonserv",{"_index":6517,"title":{},"name":{},"text":{"151":{}},"component":{}}],["file_segment_moved_initi",{"_index":6520,"title":{},"name":{},"text":{"151":{}},"component":{}}],["file_segment_moved_initiated_total{axonserver=\"axonserv",{"_index":6512,"title":{},"name":{},"text":{"151":{}},"component":{}}],["filenam",{"_index":719,"title":{},"name":{},"text":{"4":{},"140":{}},"component":{}}],["fill",{"_index":2593,"title":{},"name":{},"text":{"43":{},"60":{},"79":{},"147":{},"156":{},"196":{},"208":{},"209":{},"211":{},"254":{},"278":{}},"component":{}}],["filter",{"_index":2172,"title":{"190":{},"35-21":{},"71-6":{},"270-29":{}},"name":{"190":{}},"text":{"32":{},"35":{},"56":{},"60":{},"61":{},"66":{},"71":{},"79":{},"81":{},"93":{},"112":{},"122":{},"126":{},"127":{},"137":{},"143":{},"144":{},"146":{},"163":{},"172":{},"190":{},"191":{},"254":{},"256":{},"270":{},"277":{}},"component":{}}],["filter(ctx",{"_index":5902,"title":{},"name":{},"text":{"122":{}},"component":{}}],["filter(eventprocessor",{"_index":4626,"title":{},"name":{},"text":{"70":{},"143":{}},"component":{}}],["filter(eventwithtoken",{"_index":6337,"title":{},"name":{},"text":{"144":{}},"component":{}}],["filter(pred",{"_index":6348,"title":{},"name":{},"text":{"144":{}},"component":{}}],["filter(result",{"_index":6289,"title":{},"name":{},"text":{"143":{}},"component":{}}],["filteringeventstorageengin",{"_index":2377,"title":{},"name":{},"text":{"35":{}},"component":{}}],["final",{"_index":362,"title":{"232-1":{}},"name":{},"text":{"3":{},"8":{},"10":{},"28":{},"29":{},"31":{},"32":{},"33":{},"38":{},"42":{},"43":{},"44":{},"55":{},"57":{},"66":{},"79":{},"85":{},"86":{},"87":{},"88":{},"91":{},"93":{},"122":{},"143":{},"144":{},"147":{},"184":{},"198":{},"199":{},"270":{},"276":{},"277":{},"278":{}},"component":{}}],["financ",{"_index":7460,"title":{},"name":{},"text":{"206":{}},"component":{}}],["find",{"_index":780,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"17":{},"18":{},"20":{},"24":{},"26":{},"29":{},"37":{},"44":{},"46":{},"49":{},"52":{},"61":{},"63":{},"71":{},"77":{},"92":{},"101":{},"102":{},"117":{},"126":{},"127":{},"141":{},"146":{},"148":{},"150":{},"160":{},"170":{},"172":{},"197":{},"208":{},"209":{},"211":{},"223":{},"236":{},"256":{},"262":{},"277":{}},"component":{}}],["find_al",{"_index":7872,"title":{},"name":{},"text":{"277":{}},"component":{}}],["find_avail",{"_index":7874,"title":{},"name":{},"text":{"277":{}},"component":{}}],["find_on",{"_index":7873,"title":{},"name":{},"text":{"277":{}},"component":{}}],["findal",{"_index":7837,"title":{"277-10":{},"277-13":{}},"name":{},"text":{"277":{}},"component":{}}],["findall(findallqueri",{"_index":5846,"title":{},"name":{},"text":{"122":{}},"component":{}}],["findallbybiketypeandstatus(str",{"_index":7889,"title":{},"name":{},"text":{"277":{}},"component":{}}],["findavail",{"_index":7875,"title":{},"name":{},"text":{"277":{}},"component":{}}],["findavailable(str",{"_index":7881,"title":{},"name":{},"text":{"277":{}},"component":{}}],["findbyid",{"_index":7887,"title":{},"name":{},"text":{"277":{}},"component":{}}],["findcardqueri",{"_index":2725,"title":{},"name":{},"text":{"44":{}},"component":{}}],["findcardquery.class",{"_index":2726,"title":{},"name":{},"text":{"44":{}},"component":{}}],["findmany(findmanyqueri",{"_index":5847,"title":{},"name":{},"text":{"122":{}},"component":{}}],["findon",{"_index":7838,"title":{"277-11":{},"277-13":{}},"name":{},"text":{"277":{}},"component":{}}],["findone(str",{"_index":7885,"title":{},"name":{},"text":{"277":{}},"component":{}}],["findstatus(@pathvariable(\"bikeid",{"_index":7908,"title":{},"name":{},"text":{"277":{}},"component":{}}],["fine",{"_index":1019,"title":{},"name":{},"text":{"8":{},"24":{},"38":{},"41":{},"44":{},"50":{},"56":{},"60":{},"70":{},"71":{},"79":{},"80":{},"93":{},"105":{},"130":{},"144":{},"151":{},"157":{},"165":{},"223":{},"241":{},"271":{}},"component":{}}],["finish",{"_index":1521,"title":{"25-6":{}},"name":{},"text":{"27":{},"31":{},"52":{},"75":{},"80":{},"142":{}},"component":{}}],["finit",{"_index":3152,"title":{},"name":{},"text":{"56":{}},"component":{}}],["finsh",{"_index":7563,"title":{},"name":{},"text":{"229":{}},"component":{}}],["fire",{"_index":1973,"title":{},"name":{},"text":{"31":{},"44":{},"52":{},"261":{},"267":{},"268":{},"271":{},"278":{}},"component":{}}],["firestart",{"_index":7660,"title":{"267":{},"266-3":{},"267-1":{},"267-2":{}},"name":{"267":{},"269":{}},"text":{"262":{},"265":{},"266":{},"267":{},"268":{},"269":{},"271":{},"274":{}},"component":{}}],["first",{"_index":344,"title":{"234":{}},"name":{},"text":{"3":{},"5":{},"8":{},"9":{},"11":{},"23":{},"24":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"36":{},"37":{},"38":{},"44":{},"45":{},"50":{},"53":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"89":{},"102":{},"104":{},"117":{},"131":{},"138":{},"140":{},"141":{},"144":{},"147":{},"151":{},"170":{},"172":{},"177":{},"184":{},"185":{},"192":{},"196":{},"198":{},"199":{},"203":{},"209":{},"212":{},"234":{},"238":{},"244":{},"245":{},"254":{},"260":{},"264":{},"266":{},"267":{},"268":{},"270":{},"271":{},"272":{},"273":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{}},"component":{}}],["firstev",{"_index":4551,"title":{},"name":{},"text":{"66":{}},"component":{}}],["firsthand",{"_index":7648,"title":{},"name":{},"text":{"260":{}},"component":{}}],["firstletterid",{"_index":4946,"title":{},"name":{},"text":{"79":{}},"component":{}}],["firstli",{"_index":1925,"title":{},"name":{},"text":{"31":{},"61":{},"80":{},"81":{},"122":{}},"component":{}}],["firsttoken",{"_index":6347,"title":{},"name":{},"text":{"144":{}},"component":{}}],["fisttoken",{"_index":6345,"title":{},"name":{},"text":{"144":{}},"component":{}}],["fit",{"_index":3705,"title":{},"name":{},"text":{"60":{},"61":{},"71":{},"79":{},"86":{},"114":{},"121":{},"144":{}},"component":{}}],["five",{"_index":2100,"title":{},"name":{},"text":{"31":{},"56":{},"122":{},"177":{},"270":{},"271":{}},"component":{}}],["fix",{"_index":691,"title":{"60-4":{},"60-10":{},"60-15":{},"60-20":{},"60-25":{},"60-29":{},"60-32":{},"60-35":{},"60-38":{},"60-41":{},"60-44":{},"61-4":{},"61-9":{},"61-12":{},"61-16":{},"61-22":{},"61-26":{},"61-30":{},"61-35":{},"61-38":{},"61-42":{},"61-46":{},"61-51":{},"61-54":{},"61-59":{},"61-62":{},"61-65":{},"61-68":{},"61-71":{},"61-75":{},"61-80":{},"61-84":{},"61-88":{},"61-90":{},"61-94":{},"61-96":{},"61-99":{},"137-3":{},"137-21":{},"138-19":{},"138-22":{},"138-25":{},"212-3":{},"212-7":{},"212-11":{},"212-15":{},"212-19":{}},"name":{},"text":{"3":{},"50":{},"60":{},"61":{},"79":{},"80":{},"90":{},"97":{},"135":{},"137":{},"138":{},"143":{},"144":{},"184":{},"190":{},"212":{},"254":{},"267":{},"271":{}},"component":{}}],["fixedvaluerevisionresolv",{"_index":2466,"title":{},"name":{},"text":{"38":{}},"component":{}}],["fixtur",{"_index":1250,"title":{},"name":{},"text":{"23":{},"28":{},"60":{},"61":{},"66":{},"68":{},"282":{}},"component":{}}],["fixture.expectexception(class",{"_index":4512,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectexception(match",{"_index":4511,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectexceptiondetails(class",{"_index":4516,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectexceptiondetails(match",{"_index":4517,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectexceptiondetails(object",{"_index":4515,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectexceptionmessage(match",{"_index":4514,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectexceptionmessage(str",{"_index":4513,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectresultmessage(commandresultmessag",{"_index":4509,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectresultmessagematching(match",{"_index":4510,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectresultmessagepayload(object",{"_index":4507,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectresultmessagepayloadmatching(match",{"_index":4508,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.expectsuccessfulhandlerexecut",{"_index":4506,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.given(new",{"_index":4450,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.givenaggregate(invoiceid).published(new",{"_index":4592,"title":{},"name":{},"text":{"68":{}},"component":{}}],["fixture.givennoprioract",{"_index":8042,"title":{},"name":{},"text":{"282":{}},"component":{}}],["fixture.givenst",{"_index":4562,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fixture.registerresource(object",{"_index":4599,"title":{},"name":{},"text":{"68":{}},"component":{}}],["fixtureconfigur",{"_index":4447,"title":{},"name":{},"text":{"66":{},"68":{}},"component":{}}],["fixture’",{"_index":4229,"title":{},"name":{},"text":{"61":{}},"component":{}}],["flag",{"_index":1969,"title":{},"name":{},"text":{"31":{},"61":{},"122":{},"171":{}},"component":{}}],["flagship",{"_index":6012,"title":{},"name":{},"text":{"134":{}},"component":{}}],["flatmap(collection::stream",{"_index":3066,"title":{},"name":{},"text":{"56":{}},"component":{}}],["flatmap(eventprocessor",{"_index":6284,"title":{},"name":{},"text":{"143":{}},"component":{}}],["flatmapmany(flux::fromiter",{"_index":5868,"title":{},"name":{},"text":{"122":{}},"component":{}}],["flatmapmany(result",{"_index":5859,"title":{},"name":{},"text":{"122":{}},"component":{}}],["flatten",{"_index":5864,"title":{},"name":{},"text":{"122":{}},"component":{}}],["flavor",{"_index":1356,"title":{},"name":{},"text":{"24":{},"31":{},"32":{},"50":{},"79":{},"139":{},"221":{}},"component":{}}],["flexibl",{"_index":1374,"title":{},"name":{},"text":{"24":{},"31":{},"35":{},"40":{},"56":{},"61":{},"80":{},"81":{},"137":{},"144":{}},"component":{}}],["flight",{"_index":7056,"title":{},"name":{},"text":{"177":{}},"component":{}}],["float",{"_index":3181,"title":{},"name":{},"text":{"57":{}},"component":{}}],["flow",{"_index":743,"title":{"156":{},"240":{},"252":{},"5-5":{},"144-10":{},"144-13":{},"151-12":{},"270-39":{},"270-40":{}},"name":{"156":{},"240":{},"252":{}},"text":{"5":{},"24":{},"49":{},"56":{},"79":{},"131":{},"151":{},"156":{},"157":{},"172":{},"174":{},"176":{},"181":{},"240":{},"247":{},"253":{},"270":{},"273":{},"278":{}},"component":{}}],["fluent",{"_index":4462,"title":{"144-19":{}},"name":{},"text":{"66":{},"89":{}},"component":{}}],["flush",{"_index":3019,"title":{},"name":{},"text":{"52":{}},"component":{}}],["flux",{"_index":3112,"title":{},"name":{},"text":{"56":{},"60":{},"61":{},"122":{},"143":{}},"component":{}}],["flux#concatmap",{"_index":5840,"title":{},"name":{},"text":{"122":{}},"component":{}}],["flux#us",{"_index":3120,"title":{},"name":{},"text":{"56":{}},"component":{}}],["flux.>error(new",{"_index":5917,"title":{},"name":{},"text":{"122":{}},"component":{}}],["flux.from(new",{"_index":6278,"title":{},"name":{},"text":{"143":{}},"component":{}}],["flux.from(querygateway.streamingquery(queri",{"_index":3143,"title":{},"name":{},"text":{"56":{}},"component":{}}],["flux.fromiterable(eventprocessor.getclientinstancelist",{"_index":6285,"title":{},"name":{},"text":{"143":{}},"component":{}}],["flux.just(r",{"_index":5919,"title":{},"name":{},"text":{"122":{}},"component":{}}],["flux.us",{"_index":3122,"title":{},"name":{},"text":{"56":{}},"component":{}}],["flyway",{"_index":5752,"title":{},"name":{},"text":{"117":{}},"component":{}}],["focal",{"_index":257,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["focu",{"_index":4442,"title":{},"name":{},"text":{"66":{},"75":{},"137":{},"270":{},"272":{},"276":{},"277":{}},"component":{}}],["focus",{"_index":7582,"title":{},"name":{},"text":{"235":{},"238":{},"282":{}},"component":{}}],["fold",{"_index":5094,"title":{},"name":{},"text":{"80":{}},"component":{}}],["folder",{"_index":985,"title":{},"name":{},"text":{"8":{},"9":{},"144":{},"154":{},"155":{},"172":{},"185":{},"198":{},"205":{},"267":{},"273":{},"274":{},"276":{}},"component":{}}],["folder=./log",{"_index":402,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["follow",{"_index":276,"title":{"232-1":{},"280-4":{}},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"9":{},"11":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"36":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"58":{},"61":{},"63":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"74":{},"75":{},"78":{},"79":{},"80":{},"81":{},"97":{},"105":{},"108":{},"110":{},"116":{},"117":{},"118":{},"119":{},"120":{},"122":{},"123":{},"126":{},"127":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"149":{},"151":{},"154":{},"156":{},"158":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"169":{},"170":{},"171":{},"172":{},"176":{},"177":{},"178":{},"179":{},"180":{},"184":{},"185":{},"190":{},"191":{},"194":{},"196":{},"198":{},"201":{},"205":{},"206":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"217":{},"218":{},"229":{},"230":{},"234":{},"238":{},"244":{},"245":{},"255":{},"256":{},"258":{},"260":{},"264":{},"265":{},"266":{},"267":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["for(str",{"_index":5365,"title":{},"name":{},"text":{"91":{}},"component":{}}],["forbidden",{"_index":4741,"title":{},"name":{},"text":{"74":{},"144":{}},"component":{}}],["forc",{"_index":2930,"title":{"137-17":{}},"name":{},"text":{"52":{},"63":{},"71":{},"80":{},"96":{},"137":{},"140":{},"165":{},"172":{}},"component":{}}],["forcefulli",{"_index":6889,"title":{},"name":{},"text":{"172":{}},"component":{}}],["forcenew",{"_index":4364,"title":{},"name":{},"text":{"63":{}},"component":{}}],["foreach(system.out::println",{"_index":3067,"title":{},"name":{},"text":{"56":{}},"component":{}}],["foremost",{"_index":5154,"title":{},"name":{},"text":{"80":{}},"component":{}}],["forev",{"_index":4961,"title":{},"name":{},"text":{"79":{},"80":{},"144":{}},"component":{}}],["forget",{"_index":1974,"title":{},"name":{},"text":{"31":{},"35":{},"83":{},"122":{},"144":{}},"component":{}}],["forgot",{"_index":6305,"title":{},"name":{},"text":{"144":{}},"component":{}}],["form",{"_index":910,"title":{},"name":{},"text":{"7":{},"24":{},"31":{},"35":{},"38":{},"50":{},"52":{},"57":{},"61":{},"75":{},"79":{},"80":{},"103":{},"122":{},"144":{},"146":{},"147":{},"196":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"215":{},"216":{},"241":{},"271":{},"276":{},"280":{},"282":{}},"component":{}}],["format",{"_index":1117,"title":{"106":{},"183":{},"10-2":{},"146-1":{},"171-2":{},"183-1":{}},"name":{"106":{},"183":{}},"text":{"24":{},"28":{},"33":{},"38":{},"44":{},"49":{},"52":{},"57":{},"60":{},"61":{},"71":{},"73":{},"97":{},"106":{},"137":{},"142":{},"144":{},"146":{},"159":{},"161":{},"162":{},"167":{},"171":{},"176":{},"182":{},"183":{},"191":{},"192":{},"200":{},"203":{},"212":{},"213":{},"216":{},"258":{},"277":{},"278":{}},"component":{}}],["formatdate(data",{"_index":7203,"title":{},"name":{},"text":{"192":{}},"component":{}}],["former",{"_index":1193,"title":{},"name":{},"text":{"16":{},"35":{},"60":{},"71":{},"128":{}},"component":{}}],["formerli",{"_index":183,"title":{},"name":{},"text":{"2":{},"137":{}},"component":{}}],["formul",{"_index":949,"title":{},"name":{},"text":{"7":{}},"component":{}}],["formula",{"_index":7629,"title":{},"name":{},"text":{"256":{}},"component":{}}],["forten",{"_index":5761,"title":{},"name":{},"text":{"117":{}},"component":{}}],["fortun",{"_index":7888,"title":{},"name":{},"text":{"277":{},"282":{}},"component":{}}],["forum",{"_index":4149,"title":{},"name":{},"text":{"61":{},"232":{},"262":{},"269":{}},"component":{}}],["forward",{"_index":1652,"title":{"98":{}},"name":{"98":{}},"text":{"26":{},"38":{},"58":{},"63":{},"65":{},"77":{},"98":{},"99":{},"107":{},"138":{},"142":{},"172":{},"191":{},"208":{},"278":{}},"component":{}}],["forwardal",{"_index":4811,"title":{},"name":{},"text":{"77":{}},"component":{}}],["forwardmatchinginst",{"_index":4808,"title":{},"name":{},"text":{"77":{}},"component":{}}],["forwardmatchinginstances.class",{"_index":4807,"title":{},"name":{},"text":{"77":{}},"component":{}}],["forwardnon",{"_index":4812,"title":{},"name":{},"text":{"77":{}},"component":{}}],["fot",{"_index":6975,"title":{},"name":{},"text":{"172":{}},"component":{}}],["found",{"_index":536,"title":{},"name":{},"text":{"3":{},"29":{},"31":{},"37":{},"47":{},"52":{},"56":{},"57":{},"60":{},"61":{},"63":{},"70":{},"76":{},"77":{},"79":{},"103":{},"105":{},"114":{},"122":{},"142":{},"143":{},"146":{},"150":{},"162":{},"172":{},"184":{},"229":{},"236":{},"239":{},"254":{},"256":{}},"component":{}}],["four",{"_index":885,"title":{"7-1":{}},"name":{},"text":{"7":{},"31":{},"32":{},"33":{},"56":{},"66":{},"101":{},"241":{},"258":{},"270":{}},"component":{}}],["fourth",{"_index":928,"title":{},"name":{},"text":{"7":{},"254":{}},"component":{}}],["fpp",{"_index":6864,"title":{},"name":{},"text":{"172":{}},"component":{}}],["fqcn",{"_index":1604,"title":{},"name":{},"text":{"26":{}},"component":{}}],["fragment",{"_index":1038,"title":{},"name":{},"text":{"8":{}},"component":{}}],["frame",{"_index":4266,"title":{},"name":{},"text":{"61":{},"138":{}},"component":{}}],["framerwork",{"_index":7671,"title":{},"name":{},"text":{"263":{}},"component":{}}],["framework",{"_index":2,"title":{"1":{},"17":{},"26":{},"82":{},"86":{},"90":{},"161":{},"248":{},"255":{},"276":{},"19-1":{},"70-2":{},"143-3":{},"143-6":{},"146-2":{},"156-2":{},"238-1":{},"266-2":{},"282-1":{}},"name":{"17":{},"248":{},"276":{}},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"9":{},"11":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"64":{},"66":{},"67":{},"70":{},"71":{},"72":{},"74":{},"75":{},"78":{},"79":{},"80":{},"81":{},"84":{},"85":{},"88":{},"90":{},"91":{},"92":{},"111":{},"114":{},"119":{},"121":{},"122":{},"124":{},"134":{},"137":{},"141":{},"142":{},"143":{},"146":{},"150":{},"154":{},"156":{},"158":{},"161":{},"162":{},"166":{},"167":{},"169":{},"180":{},"185":{},"196":{},"212":{},"216":{},"224":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"238":{},"239":{},"242":{},"243":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"270":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"282":{}},"component":{"1":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{}}}],["framework'",{"_index":1172,"title":{},"name":{},"text":{"14":{},"117":{}},"component":{}}],["framework.vers",{"_index":2965,"title":{},"name":{},"text":{"52":{}},"component":{}}],["framework/doc",{"_index":1049,"title":{},"name":{},"text":{"8":{}},"component":{}}],["framework’",{"_index":1067,"title":{},"name":{},"text":{"8":{},"23":{},"26":{},"31":{},"35":{},"61":{},"68":{},"121":{}},"component":{}}],["free",{"_index":198,"title":{"5-1":{},"260-1":{}},"name":{},"text":{"2":{},"5":{},"40":{},"50":{},"56":{},"71":{},"79":{},"121":{},"144":{},"243":{},"245":{},"247":{},"253":{},"254":{},"255":{},"260":{},"264":{},"265":{},"266":{},"270":{},"273":{},"274":{}},"component":{}}],["freed",{"_index":6312,"title":{},"name":{},"text":{"144":{}},"component":{}}],["freedom",{"_index":5019,"title":{},"name":{},"text":{"80":{},"81":{}},"component":{}}],["freeli",{"_index":2253,"title":{},"name":{},"text":{"33":{},"245":{}},"component":{}}],["frequenc",{"_index":6491,"title":{},"name":{},"text":{"151":{},"172":{}},"component":{}}],["frequent",{"_index":1168,"title":{"14-3":{}},"name":{},"text":{"137":{},"151":{}},"component":{}}],["fresh",{"_index":6171,"title":{},"name":{},"text":{"141":{},"170":{},"282":{}},"component":{}}],["friendli",{"_index":4216,"title":{},"name":{},"text":{"61":{}},"component":{}}],["friendlier",{"_index":1933,"title":{},"name":{},"text":{"31":{}},"component":{}}],["from/for",{"_index":6595,"title":{},"name":{},"text":{"161":{}},"component":{}}],["from=sourc",{"_index":367,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["front",{"_index":2650,"title":{},"name":{},"text":{"44":{},"236":{}},"component":{}}],["fsgroup",{"_index":619,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["fulfil",{"_index":2605,"title":{},"name":{},"text":{"43":{}},"component":{}}],["full",{"_index":1028,"title":{},"name":{},"text":{"8":{},"26":{},"29":{},"31":{},"38":{},"60":{},"61":{},"66":{},"71":{},"111":{},"117":{},"126":{},"134":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"146":{},"151":{},"157":{},"177":{},"185":{},"208":{},"217":{},"277":{}},"component":{}}],["fullconcurrencypolici",{"_index":5129,"title":{},"name":{},"text":{"80":{}},"component":{}}],["fulli",{"_index":872,"title":{},"name":{},"text":{"5":{},"25":{},"28":{},"29":{},"38":{},"45":{},"56":{},"61":{},"92":{},"93":{},"95":{},"111":{},"121":{},"129":{},"139":{},"143":{},"149":{},"218":{},"277":{}},"component":{}}],["fun",{"_index":5655,"title":{},"name":{},"text":{"109":{},"110":{},"112":{},"262":{}},"component":{}}],["function",{"_index":867,"title":{"192":{},"190-4":{},"203-58":{}},"name":{"192":{}},"text":{"5":{},"15":{},"21":{},"27":{},"28":{},"29":{},"30":{},"32":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"64":{},"66":{},"69":{},"70":{},"71":{},"75":{},"78":{},"79":{},"80":{},"86":{},"89":{},"94":{},"107":{},"109":{},"110":{},"112":{},"117":{},"122":{},"131":{},"137":{},"143":{},"144":{},"149":{},"185":{},"192":{},"194":{},"203":{},"217":{},"244":{},"245":{},"275":{}},"component":{}}],["functionalinterfac",{"_index":4978,"title":{},"name":{},"text":{"79":{},"122":{}},"component":{}}],["function’",{"_index":3060,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fundament",{"_index":1170,"title":{"82":{},"187":{}},"name":{},"text":{"14":{},"105":{}},"component":{"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"186":{},"187":{},"188":{},"189":{}}}],["further",{"_index":554,"title":{},"name":{},"text":{"3":{},"24":{},"27":{},"35":{},"37":{},"58":{},"60":{},"61":{},"77":{},"80":{},"81":{},"90":{},"102":{},"146":{},"147":{},"163":{},"180":{},"184":{},"218":{},"223":{},"277":{}},"component":{}}],["furthermor",{"_index":1321,"title":{},"name":{},"text":{"23":{},"28":{},"29":{},"31":{},"35":{},"38":{},"44":{},"53":{},"60":{},"61":{},"79":{},"80":{},"81":{},"102":{},"126":{},"130":{},"135":{},"261":{}},"component":{}}],["futur",{"_index":207,"title":{},"name":{},"text":{"2":{},"19":{},"27":{},"28":{},"31":{},"52":{},"57":{},"61":{},"126":{},"151":{},"162":{},"203":{},"231":{},"256":{},"278":{},"282":{}},"component":{}}],["future/completablefutur",{"_index":4212,"title":{},"name":{},"text":{"61":{}},"component":{}}],["futurecallback",{"_index":1715,"title":{},"name":{},"text":{"27":{}},"component":{}}],["futureresult",{"_index":1723,"title":{},"name":{},"text":{"27":{},"70":{}},"component":{}}],["g",{"_index":376,"title":{},"name":{},"text":{"3":{},"8":{},"139":{},"146":{},"171":{},"184":{}},"component":{}}],["ga",{"_index":4083,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gain",{"_index":2738,"title":{},"name":{},"text":{"45":{},"52":{},"243":{}},"component":{}}],["game",{"_index":7665,"title":{},"name":{},"text":{"262":{}},"component":{}}],["gap",{"_index":3611,"title":{},"name":{},"text":{"60":{},"61":{},"66":{},"73":{},"91":{},"97":{},"142":{}},"component":{}}],["gapawaretrackingtoken",{"_index":3873,"title":{},"name":{},"text":{"61":{}},"component":{}}],["garbag",{"_index":6054,"title":{},"name":{},"text":{"137":{},"172":{},"255":{}},"component":{}}],["gateway",{"_index":1667,"title":{"122":{},"31-6":{},"54-1":{},"56-1":{},"122-2":{},"122-5":{},"122-12":{}},"name":{"122":{}},"text":{"27":{},"29":{},"31":{},"36":{},"54":{},"56":{},"61":{},"68":{},"122":{},"212":{}},"component":{}}],["gather",{"_index":2908,"title":{"52-43":{},"56-3":{}},"name":{},"text":{"52":{},"54":{},"56":{},"58":{},"61":{},"126":{},"144":{},"196":{},"216":{},"255":{},"261":{},"270":{},"278":{}},"component":{}}],["gathier",{"_index":6439,"title":{},"name":{},"text":{"147":{}},"component":{}}],["gaug",{"_index":1264,"title":{},"name":{},"text":{"23":{},"50":{}},"component":{}}],["gave",{"_index":7324,"title":{},"name":{},"text":{"200":{}},"component":{}}],["gb",{"_index":7628,"title":{},"name":{},"text":{"255":{}},"component":{}}],["gc1",{"_index":3107,"title":{},"name":{},"text":{"56":{}},"component":{}}],["gcloud",{"_index":7246,"title":{},"name":{},"text":{"196":{}},"component":{}}],["gcp",{"_index":7230,"title":{},"name":{},"text":{"196":{}},"component":{}}],["gcr.io",{"_index":340,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["gcr.io/distroless/java:11",{"_index":343,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["gdpr",{"_index":874,"title":{},"name":{},"text":{"5":{}},"component":{}}],["gener",{"_index":397,"title":{"92":{},"9-2":{},"9-5":{},"13-1":{},"24-13":{},"79-27":{},"108-1":{},"143-2":{},"271-1":{}},"name":{},"text":{"3":{},"5":{},"8":{},"9":{},"11":{},"17":{},"19":{},"24":{},"25":{},"26":{},"27":{},"29":{},"31":{},"35":{},"36":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"71":{},"75":{},"77":{},"79":{},"80":{},"92":{},"97":{},"98":{},"101":{},"104":{},"112":{},"113":{},"114":{},"121":{},"141":{},"157":{},"160":{},"161":{},"162":{},"165":{},"166":{},"169":{},"170":{},"171":{},"181":{},"184":{},"185":{},"196":{},"208":{},"209":{},"210":{},"211":{},"213":{},"215":{},"218":{},"243":{},"255":{},"270":{},"277":{},"278":{},"282":{}},"component":{"92":{}}}],["generatedvalu",{"_index":5442,"title":{},"name":{},"text":{"97":{}},"component":{}}],["genericaggregatefactori",{"_index":1848,"title":{"29-13":{}},"name":{},"text":{"29":{}},"component":{}}],["genericcommandmessage#ascommandmessage(object",{"_index":1694,"title":{},"name":{},"text":{"27":{}},"component":{}}],["genericcommandmessage.ascommandmessage(new",{"_index":1679,"title":{},"name":{},"text":{"27":{}},"component":{}}],["genericeventmessag",{"_index":2586,"title":{},"name":{},"text":{"42":{}},"component":{}}],["genericeventmessage.aseventmessage(\"intercept",{"_index":5879,"title":{},"name":{},"text":{"122":{}},"component":{}}],["genericeventmessage.aseventmessage(\"mypayload",{"_index":2540,"title":{},"name":{},"text":{"40":{}},"component":{}}],["genericeventmessage.clock",{"_index":2195,"title":{},"name":{},"text":{"32":{}},"component":{}}],["genericjparepositori",{"_index":1888,"title":{},"name":{},"text":{"29":{},"60":{},"61":{},"78":{}},"component":{}}],["genericquerymessag",{"_index":2946,"title":{},"name":{},"text":{"52":{},"56":{}},"component":{}}],["genericquerymessage<>(\"criteria",{"_index":3056,"title":{},"name":{},"text":{"56":{}},"component":{}}],["genericsagasqlschema",{"_index":4402,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["genericseri",{"_index":5353,"title":{},"name":{},"text":{"89":{}},"component":{}}],["genericserializer(genericseri",{"_index":5354,"title":{},"name":{},"text":{"89":{}},"component":{}}],["generictokentablefactori",{"_index":5099,"title":{},"name":{},"text":{"80":{}},"component":{}}],["generifi",{"_index":2565,"title":{},"name":{},"text":{"41":{}},"component":{}}],["geograph",{"_index":7566,"title":{},"name":{},"text":{"231":{}},"component":{}}],["get",{"_index":989,"title":{"224":{},"247-1":{}},"name":{},"text":{"8":{},"14":{},"15":{},"21":{},"38":{},"52":{},"56":{},"146":{},"162":{},"176":{},"192":{},"247":{},"260":{},"261":{},"273":{}},"component":{"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{}}}],["get_app_detail",{"_index":6664,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_commands_count",{"_index":6707,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_commands_queu",{"_index":6708,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_event_processor",{"_index":6666,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_event_processor_strategi",{"_index":6665,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_event_processors_strategi",{"_index":6667,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_first_token",{"_index":6714,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_last_token",{"_index":6715,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_plugin_configur",{"_index":6668,"title":{},"name":{},"text":{"164":{}},"component":{}}],["get_token_at",{"_index":6716,"title":{},"name":{},"text":{"164":{}},"component":{}}],["getalleventprocessors(google.protobuf.empti",{"_index":6980,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getapplication(applicationid",{"_index":7013,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getapplications(google.protobuf.empti",{"_index":7015,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getbalancingstrategies(google.protobuf.empti",{"_index":6988,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getbikeid",{"_index":7850,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getbiketyp",{"_index":7851,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getcontaineripaddress",{"_index":3524,"title":{},"name":{},"text":{"60":{}},"component":{}}],["getcontext(getcontextrequest",{"_index":6994,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getcontexts(google.protobuf.empti",{"_index":6996,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getcurrentposit",{"_index":2890,"title":{},"name":{},"text":{"51":{}},"component":{}}],["getentitymanag",{"_index":2301,"title":{},"name":{},"text":{"35":{}},"component":{}}],["geteventprocessorsbycomponent(compon",{"_index":6981,"title":{},"name":{},"text":{"173":{}},"component":{}}],["gethost",{"_index":3523,"title":{},"name":{},"text":{"60":{}},"component":{}}],["getidentifi",{"_index":4948,"title":{},"name":{},"text":{"79":{}},"component":{}}],["getloc",{"_index":7852,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getmap",{"_index":5845,"title":{},"name":{},"text":{"122":{},"277":{}},"component":{}}],["getmapping(\"/bik",{"_index":7895,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getmapping(\"/bikes/{bikeid",{"_index":7907,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getnam",{"_index":6408,"title":{},"name":{},"text":{"146":{}},"component":{}}],["getnod",{"_index":7006,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getorderid",{"_index":4371,"title":{},"name":{},"text":{"63":{}},"component":{}}],["getrent",{"_index":7853,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getreplicationgroup(getreplicationgrouprequest",{"_index":7003,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getreplicationgroups(google.protobuf.empti",{"_index":7005,"title":{},"name":{},"text":{"173":{}},"component":{}}],["getresetposit",{"_index":2891,"title":{},"name":{},"text":{"51":{}},"component":{}}],["getsequenceidentifierfor(t",{"_index":5144,"title":{},"name":{},"text":{"80":{}},"component":{}}],["getstatu",{"_index":7854,"title":{},"name":{},"text":{"277":{}},"component":{}}],["getter",{"_index":1369,"title":{},"name":{},"text":{"24":{},"28":{},"31":{},"38":{},"57":{},"63":{},"77":{}},"component":{}}],["gettestfixtur",{"_index":5336,"title":{},"name":{},"text":{"87":{}},"component":{}}],["gettotalnumberofcard",{"_index":5678,"title":{},"name":{},"text":{"112":{}},"component":{}}],["gettransactionid",{"_index":4787,"title":{},"name":{},"text":{"77":{}},"component":{}}],["getusers(google.protobuf.empti",{"_index":7022,"title":{},"name":{},"text":{"173":{}},"component":{}}],["ghaction",{"_index":3589,"title":{},"name":{},"text":{"60":{}},"component":{}}],["gha’",{"_index":3563,"title":{},"name":{},"text":{"60":{}},"component":{}}],["gift",{"_index":940,"title":{},"name":{},"text":{"7":{},"57":{},"75":{},"77":{},"78":{},"83":{},"86":{},"199":{},"200":{}},"component":{}}],["giftcard",{"_index":1069,"title":{"198-4":{},"200-2":{},"200-3":{},"200-4":{},"200-5":{}},"name":{},"text":{"8":{},"13":{},"28":{},"29":{},"36":{},"44":{},"56":{},"66":{},"71":{},"74":{},"75":{},"77":{},"78":{},"198":{},"199":{},"200":{}},"component":{}}],["giftcard(issuecardcommand",{"_index":1160,"title":{},"name":{},"text":{"13":{},"28":{},"29":{},"36":{},"75":{},"78":{}},"component":{}}],["giftcard.handle(cmd",{"_index":1840,"title":{},"name":{},"text":{"28":{},"29":{}},"component":{}}],["giftcardcach",{"_index":4718,"title":{},"name":{},"text":{"71":{}},"component":{}}],["giftcardcommandhandl",{"_index":1836,"title":{},"name":{},"text":{"28":{},"29":{}},"component":{}}],["giftcardconfigur",{"_index":4663,"title":{},"name":{},"text":{"71":{},"74":{}},"component":{}}],["giftcardid",{"_index":4826,"title":{},"name":{},"text":{"78":{},"85":{}},"component":{}}],["giftcardrepositori",{"_index":1837,"title":{},"name":{},"text":{"28":{},"29":{}},"component":{}}],["giftcardrepository.load(cmd.getcardid",{"_index":1838,"title":{},"name":{},"text":{"28":{},"29":{}},"component":{}}],["giftcardsnapshotfilt",{"_index":4682,"title":{},"name":{},"text":{"71":{}},"component":{}}],["giftcardsnapshottrigg",{"_index":4670,"title":{},"name":{},"text":{"71":{}},"component":{}}],["giftcardsnapshottrigger(snapshott",{"_index":4667,"title":{},"name":{},"text":{"71":{}},"component":{}}],["giftcardtest",{"_index":4446,"title":{},"name":{},"text":{"66":{}},"component":{}}],["giftcardtransact",{"_index":4781,"title":{},"name":{},"text":{"77":{}},"component":{}}],["giftcardtransaction(evt.gettransactionid",{"_index":4800,"title":{},"name":{},"text":{"77":{}},"component":{}}],["giftcardtransaction(id",{"_index":4829,"title":{},"name":{},"text":{"78":{}},"component":{}}],["giftcardtransaction(str",{"_index":4785,"title":{},"name":{},"text":{"77":{}},"component":{}}],["giftcardtransaction.class",{"_index":4793,"title":{},"name":{},"text":{"77":{}},"component":{}}],["git",{"_index":981,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["git@github.com:axoniq/axoniq",{"_index":983,"title":{},"name":{},"text":{"8":{}},"component":{}}],["github",{"_index":537,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"23":{},"60":{},"124":{},"147":{},"184":{},"244":{},"273":{},"279":{}},"component":{}}],["github_pat_",{"_index":1029,"title":{},"name":{},"text":{"8":{}},"component":{}}],["gitignor",{"_index":1061,"title":{},"name":{},"text":{"8":{}},"component":{}}],["give",{"_index":440,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"30":{},"42":{},"44":{},"55":{},"56":{},"60":{},"68":{},"69":{},"80":{},"81":{},"93":{},"101":{},"121":{},"128":{},"130":{},"145":{},"161":{},"164":{},"167":{},"171":{},"172":{},"177":{},"184":{},"185":{},"196":{},"199":{},"232":{},"255":{},"260":{},"261":{},"270":{},"271":{},"273":{}},"component":{}}],["given",{"_index":575,"title":{"66-3":{}},"name":{},"text":{"3":{},"11":{},"22":{},"24":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"42":{},"44":{},"48":{},"51":{},"53":{},"55":{},"56":{},"57":{},"60":{},"61":{},"64":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"75":{},"78":{},"79":{},"80":{},"89":{},"98":{},"104":{},"107":{},"110":{},"111":{},"112":{},"117":{},"122":{},"126":{},"129":{},"134":{},"135":{},"140":{},"151":{},"152":{},"168":{},"176":{},"184":{},"185":{},"208":{},"271":{},"277":{},"282":{}},"component":{}}],["given(object",{"_index":3957,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["givencommand",{"_index":4230,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["givencommands(object",{"_index":4488,"title":{},"name":{},"text":{"66":{}},"component":{}}],["givencurrentim",{"_index":4491,"title":{},"name":{},"text":{"66":{}},"component":{}}],["givencurrenttime(inst",{"_index":4490,"title":{},"name":{},"text":{"66":{}},"component":{}}],["givennoprioract",{"_index":4486,"title":{},"name":{},"text":{"66":{}},"component":{}}],["givenst",{"_index":4493,"title":{},"name":{},"text":{"66":{}},"component":{}}],["givenstate(suppli",{"_index":4492,"title":{},"name":{},"text":{"66":{}},"component":{}}],["gklij",{"_index":3283,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["global",{"_index":1903,"title":{},"name":{},"text":{"29":{},"37":{},"61":{},"79":{},"97":{},"102":{},"138":{},"143":{},"146":{},"172":{},"209":{},"271":{}},"component":{}}],["globalmetricregistri",{"_index":2008,"title":{},"name":{},"text":{"31":{},"35":{},"50":{},"115":{}},"component":{}}],["globalmetricregistry(meterregistri",{"_index":2834,"title":{},"name":{},"text":{"50":{}},"component":{}}],["globalmetricregistry(metricregistri",{"_index":2829,"title":{},"name":{},"text":{"50":{}},"component":{}}],["globalmetricregistry.registerwithconfigurer(configur",{"_index":2830,"title":{},"name":{},"text":{"50":{}},"component":{}}],["globalmetricregistry.registerwithconfigurerwithdefaulttags(configur",{"_index":2835,"title":{},"name":{},"text":{"50":{}},"component":{}}],["globalsequencetrackingtoken#covers(trackingtoken",{"_index":4328,"title":{},"name":{},"text":{"61":{}},"component":{}}],["go",{"_index":1004,"title":{},"name":{},"text":{"8":{},"24":{},"26":{},"35":{},"36":{},"38":{},"48":{},"56":{},"61":{},"66":{},"71":{},"79":{},"80":{},"91":{},"122":{},"139":{},"143":{},"144":{},"196":{},"199":{},"200":{},"203":{},"208":{},"209":{},"211":{},"218":{},"232":{},"234":{},"238":{},"245":{},"254":{},"261":{},"264":{},"270":{},"272":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["goal",{"_index":904,"title":{},"name":{},"text":{"7":{},"15":{},"21":{},"31":{},"38":{},"57":{},"111":{},"276":{},"277":{},"278":{}},"component":{}}],["goe",{"_index":5948,"title":{},"name":{},"text":{"127":{},"218":{},"247":{},"253":{},"254":{},"256":{}},"component":{}}],["golden",{"_index":6044,"title":{},"name":{},"text":{"137":{}},"component":{}}],["gone",{"_index":6132,"title":{},"name":{},"text":{"139":{}},"component":{}}],["good",{"_index":1994,"title":{},"name":{},"text":{"31":{},"33":{},"35":{},"42":{},"60":{},"71":{},"80":{},"84":{},"101":{},"114":{},"165":{},"167":{},"183":{},"185":{},"203":{},"255":{},"256":{},"261":{},"270":{},"273":{},"278":{}},"component":{}}],["googl",{"_index":769,"title":{"196":{},"165-3":{},"196-1":{}},"name":{},"text":{"5":{},"18":{},"19":{},"138":{},"165":{},"167":{},"196":{},"244":{}},"component":{}}],["google.protobuf.empti",{"_index":6991,"title":{},"name":{},"text":{"173":{}},"component":{}}],["google’",{"_index":338,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["gossip",{"_index":5466,"title":{},"name":{},"text":{"101":{},"102":{}},"component":{}}],["grace",{"_index":842,"title":{},"name":{},"text":{"5":{},"61":{},"176":{}},"component":{}}],["gracefulli",{"_index":3730,"title":{},"name":{},"text":{"60":{}},"component":{}}],["gradat",{"_index":6544,"title":{},"name":{},"text":{"155":{}},"component":{}}],["grade",{"_index":7183,"title":{},"name":{},"text":{"185":{}},"component":{}}],["gradl",{"_index":1231,"title":{"23-40":{},"52-18":{}},"name":{},"text":{"23":{},"26":{}},"component":{}}],["grain",{"_index":1020,"title":{},"name":{},"text":{"8":{},"38":{},"41":{},"44":{},"50":{},"56":{},"71":{},"79":{},"80":{},"93":{},"130":{},"151":{},"223":{},"241":{}},"component":{}}],["grame",{"_index":7664,"title":{},"name":{},"text":{"262":{}},"component":{}}],["grant",{"_index":1016,"title":{},"name":{},"text":{"8":{},"31":{},"122":{},"137":{},"144":{},"161":{},"162":{},"171":{}},"component":{}}],["granular",{"_index":3115,"title":{},"name":{},"text":{"56":{},"60":{},"270":{}},"component":{}}],["graph",{"_index":787,"title":{"270-11":{},"270-12":{}},"name":{},"text":{"5":{},"236":{},"239":{},"243":{},"255":{},"270":{},"271":{}},"component":{}}],["graphana",{"_index":7655,"title":{},"name":{},"text":{"261":{}},"component":{}}],["graphic",{"_index":7558,"title":{},"name":{},"text":{"224":{},"233":{},"251":{}},"component":{}}],["grasp",{"_index":2107,"title":{},"name":{},"text":{"31":{}},"component":{}}],["great",{"_index":815,"title":{},"name":{},"text":{"5":{},"60":{},"121":{}},"component":{}}],["greater",{"_index":4522,"title":{},"name":{},"text":{"66":{},"81":{}},"component":{}}],["greaterthantwomatch",{"_index":4521,"title":{},"name":{},"text":{"66":{}},"component":{}}],["greatest",{"_index":2459,"title":{},"name":{},"text":{"38":{}},"component":{}}],["greatli",{"_index":3763,"title":{},"name":{},"text":{"60":{},"254":{}},"component":{}}],["green",{"_index":799,"title":{},"name":{},"text":{"5":{},"277":{},"280":{}},"component":{}}],["greenfield",{"_index":1594,"title":{},"name":{},"text":{"26":{}},"component":{}}],["grou",{"_index":6135,"title":{},"name":{},"text":{"139":{}},"component":{}}],["group",{"_index":269,"title":{"149":{},"79-5":{},"89-2":{},"149-3":{},"163-4":{},"171-9":{},"173-3":{}},"name":{"149":{}},"text":{"3":{},"5":{},"7":{},"19":{},"23":{},"31":{},"33":{},"36":{},"43":{},"52":{},"60":{},"71":{},"79":{},"88":{},"89":{},"91":{},"93":{},"104":{},"107":{},"108":{},"113":{},"116":{},"117":{},"122":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"149":{},"151":{},"160":{},"162":{},"163":{},"169":{},"170":{},"171":{},"172":{},"173":{},"176":{},"178":{},"184":{},"185":{},"194":{},"231":{},"234":{},"236":{},"241":{},"270":{},"273":{},"278":{}},"component":{}}],["group.dlq.en",{"_index":4921,"title":{},"name":{},"text":{"79":{}},"component":{}}],["groupbi",{"_index":7221,"title":{},"name":{},"text":{"194":{}},"component":{}}],["groupby(payloadtyp",{"_index":7220,"title":{},"name":{},"text":{"193":{},"195":{}},"component":{}}],["groupid",{"_index":1242,"title":{},"name":{},"text":{"23":{},"38":{},"104":{},"276":{}},"component":{}}],["groupid(groupid",{"_index":5542,"title":{},"name":{},"text":{"104":{}},"component":{}}],["groups/context",{"_index":6162,"title":{},"name":{},"text":{"141":{},"174":{}},"component":{}}],["group’",{"_index":572,"title":{},"name":{},"text":{"3":{},"79":{},"184":{}},"component":{}}],["grow",{"_index":179,"title":{},"name":{},"text":{"2":{},"28":{},"255":{},"282":{}},"component":{}}],["grown",{"_index":7960,"title":{},"name":{},"text":{"278":{}},"component":{}}],["grpc",{"_index":623,"title":{"133":{},"159":{},"173":{},"179":{},"144-26":{},"159-2":{}},"name":{"133":{},"173":{},"179":{}},"text":{"3":{},"7":{},"52":{},"61":{},"137":{},"138":{},"159":{},"167":{},"168":{},"169":{},"171":{},"172":{},"174":{},"179":{},"180":{},"181":{},"184":{},"185":{},"203":{},"205":{},"212":{},"281":{}},"component":{}}],["grpc/http",{"_index":6376,"title":{},"name":{},"text":{"144":{}},"component":{}}],["grpcbackedsubscriptionquerymessag",{"_index":3627,"title":{},"name":{},"text":{"60":{}},"component":{}}],["grpcinternalport",{"_index":6457,"title":{},"name":{},"text":{"148":{},"185":{}},"component":{}}],["grpcport",{"_index":6459,"title":{},"name":{},"text":{"148":{},"185":{}},"component":{}}],["grpc’",{"_index":6566,"title":{},"name":{},"text":{"156":{}},"component":{}}],["guarante",{"_index":13,"title":{},"name":{},"text":{"1":{},"23":{},"31":{},"33":{},"42":{},"45":{},"62":{},"63":{},"65":{},"79":{},"80":{},"104":{},"107":{},"122":{},"140":{},"141":{},"149":{},"277":{},"282":{}},"component":{}}],["guard",{"_index":1802,"title":{},"name":{},"text":{"28":{}},"component":{}}],["gui",{"_index":628,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["guid",{"_index":56,"title":{"6":{},"17":{},"18":{},"19":{},"20":{},"196":{},"197":{},"224":{},"247":{},"266":{},"7-4":{},"15-3":{},"17-1":{},"18-1":{},"20-1":{},"21-3":{}},"name":{"265":{}},"text":{"1":{},"6":{},"7":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"30":{},"34":{},"39":{},"52":{},"55":{},"60":{},"61":{},"64":{},"67":{},"72":{},"79":{},"80":{},"86":{},"90":{},"101":{},"105":{},"111":{},"128":{},"143":{},"145":{},"182":{},"185":{},"196":{},"197":{},"198":{},"199":{},"200":{},"204":{},"224":{},"233":{},"235":{},"244":{},"247":{},"254":{},"256":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"273":{},"274":{},"277":{},"279":{},"282":{}},"component":{"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"21":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{}}}],["guidanc",{"_index":5203,"title":{},"name":{},"text":{"80":{}},"component":{}}],["guidelin",{"_index":4703,"title":{},"name":{},"text":{"71":{}},"component":{}}],["h",{"_index":379,"title":{},"name":{},"text":{"3":{},"159":{},"162":{},"166":{},"171":{},"184":{},"185":{}},"component":{}}],["h2",{"_index":707,"title":{},"name":{},"text":{"4":{},"137":{},"140":{}},"component":{}}],["ha",{"_index":7539,"title":{"217":{},"218-2":{}},"name":{"217":{}},"text":{"217":{},"218":{},"223":{}},"component":{}}],["hale",{"_index":1259,"title":{},"name":{},"text":{"23":{}},"component":{}}],["half",{"_index":2072,"title":{},"name":{},"text":{"31":{},"242":{},"270":{},"277":{}},"component":{}}],["hamcrest",{"_index":3410,"title":{},"name":{},"text":{"60":{},"66":{}},"component":{}}],["hand",{"_index":931,"title":{},"name":{},"text":{"7":{},"31":{},"35":{},"38":{},"43":{},"52":{},"60":{},"68":{},"79":{},"107":{},"254":{}},"component":{}}],["handi",{"_index":2158,"title":{},"name":{},"text":{"32":{},"126":{}},"component":{}}],["handl",{"_index":80,"title":{"41":{},"2-4":{},"32-2":{},"56-8":{},"63-2":{},"77-1":{},"79-4":{},"142-3":{},"142-4":{},"143-6":{},"177-1":{},"177-2":{},"199-3":{},"199-7":{},"199-11":{},"277-5":{},"278-7":{}},"name":{"41":{}},"text":{"2":{},"5":{},"23":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"86":{},"93":{},"94":{},"97":{},"100":{},"101":{},"109":{},"110":{},"112":{},"117":{},"122":{},"124":{},"126":{},"129":{},"138":{},"139":{},"142":{},"143":{},"146":{},"150":{},"156":{},"158":{},"172":{},"176":{},"177":{},"199":{},"208":{},"209":{},"211":{},"218":{},"239":{},"243":{},"254":{},"255":{},"270":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["handle(bikeregisteredev",{"_index":7977,"title":{},"name":{},"text":{"278":{}},"component":{}}],["handle(c",{"_index":3101,"title":{},"name":{},"text":{"56":{}},"component":{}}],["handle(createorrechargecardcommand",{"_index":1829,"title":{},"name":{},"text":{"28":{}},"component":{}}],["handle(eventa",{"_index":2435,"title":{},"name":{},"text":{"37":{}},"component":{}}],["handle(eventb",{"_index":2437,"title":{},"name":{},"text":{"37":{}},"component":{}}],["handle(eventc",{"_index":2436,"title":{},"name":{},"text":{"37":{}},"component":{}}],["handle(fetchcardsummariesqueri",{"_index":3069,"title":{},"name":{},"text":{"56":{}},"component":{}}],["handle(fetchcardsummaryqueri",{"_index":3034,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{}}],["handle(invoicepaidev",{"_index":4358,"title":{},"name":{},"text":{"62":{}},"component":{}}],["handle(issuecardcommand",{"_index":1827,"title":{},"name":{},"text":{"28":{}},"component":{}}],["handle(issueexpiringcardcommand",{"_index":5318,"title":{},"name":{},"text":{"85":{}},"component":{}}],["handle(list",{"_index":2635,"title":{},"name":{},"text":{"44":{},"122":{}},"component":{}}],["handle(ordercreatedev",{"_index":4347,"title":{},"name":{},"text":{"62":{}},"component":{}}],["handle(publishtim",{"_index":2199,"title":{},"name":{},"text":{"32":{}},"component":{}}],["handle(querya",{"_index":3171,"title":{},"name":{},"text":{"57":{}},"component":{}}],["handle(queryb",{"_index":3172,"title":{},"name":{},"text":{"57":{}},"component":{}}],["handle(queryc",{"_index":3173,"title":{},"name":{},"text":{"57":{}},"component":{}}],["handle(redeemcardcommand",{"_index":1765,"title":{},"name":{},"text":{"28":{},"29":{},"77":{},"83":{}},"component":{}}],["handle(reimbursecardcommand",{"_index":4794,"title":{},"name":{},"text":{"77":{}},"component":{}}],["handle(shippingarrivedev",{"_index":4356,"title":{},"name":{},"text":{"62":{}},"component":{}}],["handle(somecommand",{"_index":5501,"title":{},"name":{},"text":{"103":{}},"component":{}}],["handle(someev",{"_index":5502,"title":{},"name":{},"text":{"103":{}},"component":{}}],["handle(someparentcommand",{"_index":4725,"title":{},"name":{},"text":{"73":{}},"component":{}}],["handle(unitofwork",{"_index":2657,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handle_command",{"_index":6722,"title":{},"name":{},"text":{"164":{}},"component":{}}],["handle_queri",{"_index":6717,"title":{},"name":{},"text":{"164":{}},"component":{}}],["handleall(except",{"_index":2711,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleerror(errorcontext",{"_index":4882,"title":{},"name":{},"text":{"79":{}},"component":{}}],["handleex(queryb",{"_index":3175,"title":{},"name":{},"text":{"57":{}},"component":{}}],["handlefindcardqueryexcept",{"_index":2727,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handlefindcardqueryexceptions(findcardqueri",{"_index":2724,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalargumentexceptions(except",{"_index":2731,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalargumentexceptions(illegalargumentexcept",{"_index":2728,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalargumentexceptionsfromcardissu",{"_index":2735,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalargumentexceptionsfromcardissued(cardissuedev",{"_index":2732,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalstateexceptions(except",{"_index":2720,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalstateexceptions(illegalstateexcept",{"_index":2716,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalstateexceptionsfromissuecard",{"_index":2722,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleillegalstateexceptionsfromissuecard(issuecardcommand",{"_index":2721,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleissuecardexcept",{"_index":2715,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handleissuecardexceptions(issuecardcommand",{"_index":2712,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handler",{"_index":754,"title":{"28":{},"37":{},"45":{},"57":{},"93":{},"239":{},"271":{},"282":{},"5-8":{},"5-9":{},"28-1":{},"28-3":{},"28-4":{},"28-5":{},"29-4":{},"37-1":{},"41-1":{},"44-4":{},"44-8":{},"44-12":{},"44-19":{},"44-20":{},"45-1":{},"45-2":{},"45-3":{},"52-47":{},"53-1":{},"57-1":{},"57-2":{},"57-3":{},"69-1":{},"77-2":{},"79-1":{},"79-2":{},"79-3":{},"79-5":{},"79-8":{},"79-29":{},"122-16":{},"203-31":{},"208-4":{},"208-5":{},"208-6":{},"209-5":{},"209-6":{},"209-7":{},"211-4":{},"211-5":{},"211-6":{},"218-3":{},"218-4":{},"218-5":{},"239-1":{},"239-2":{},"255-4":{},"270-5":{},"270-18":{},"270-24":{},"270-28":{},"270-29":{},"270-30":{},"270-31":{},"270-32":{},"270-33":{},"270-36":{},"271-1":{},"271-4":{},"277-4":{},"278-6":{},"282-4":{}},"name":{"28":{},"37":{},"45":{},"57":{},"93":{},"239":{},"271":{}},"text":{"5":{},"17":{},"19":{},"23":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"35":{},"36":{},"37":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"49":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"69":{},"70":{},"71":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"93":{},"94":{},"95":{},"96":{},"101":{},"104":{},"107":{},"114":{},"117":{},"122":{},"124":{},"126":{},"131":{},"138":{},"142":{},"150":{},"156":{},"162":{},"172":{},"176":{},"177":{},"199":{},"200":{},"201":{},"203":{},"206":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"216":{},"217":{},"218":{},"221":{},"236":{},"239":{},"240":{},"241":{},"242":{},"243":{},"245":{},"255":{},"256":{},"267":{},"269":{},"270":{},"271":{},"277":{},"278":{},"280":{},"282":{}},"component":{"93":{},"94":{},"95":{}}}],["handler.balancing.consist",{"_index":7387,"title":{"203-58":{}},"name":{},"text":{},"component":{}}],["handler.balancing.en",{"_index":7377,"title":{"203-51":{}},"name":{},"text":{},"component":{}}],["handler.balancing.enabled=tru",{"_index":7541,"title":{},"name":{},"text":{"217":{}},"component":{}}],["handler.balancing.handl",{"_index":7385,"title":{"203-57":{}},"name":{},"text":{},"component":{}}],["handler.balancing.synaps",{"_index":7378,"title":{"203-52":{},"203-53":{},"203-54":{}},"name":{},"text":{},"component":{}}],["handler.balancing.web",{"_index":7382,"title":{"203-55":{},"203-56":{}},"name":{},"text":{},"component":{}}],["handler.subscription.retri",{"_index":7368,"title":{"203-41":{}},"name":{},"text":{},"component":{}}],["handler2",{"_index":5482,"title":{},"name":{},"text":{"101":{}},"component":{}}],["handlerattribut",{"_index":3704,"title":{},"name":{},"text":{"60":{}},"component":{}}],["handlerdefinit",{"_index":4483,"title":{},"name":{},"text":{"66":{}},"component":{}}],["handlerenhancerdefinit",{"_index":3736,"title":{},"name":{},"text":{"60":{},"66":{},"93":{}},"component":{}}],["handlerenhancerdefint",{"_index":5401,"title":{},"name":{},"text":{"93":{}},"component":{}}],["handlerexecutionexcept",{"_index":2556,"title":{},"name":{},"text":{"41":{},"60":{}},"component":{}}],["handlerexecutionexception#detail",{"_index":3906,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler’",{"_index":3151,"title":{},"name":{},"text":{"56":{},"79":{},"270":{}},"component":{}}],["handlesomestatechangeevent(mydomainev",{"_index":4691,"title":{},"name":{},"text":{"71":{}},"component":{}}],["hang",{"_index":3116,"title":{},"name":{},"text":{"56":{}},"component":{}}],["happen",{"_index":85,"title":{"2-6":{},"2-7":{},"5-9":{}},"name":{},"text":{"24":{},"25":{},"31":{},"33":{},"46":{},"52":{},"56":{},"60":{},"66":{},"75":{},"79":{},"80":{},"139":{},"142":{},"144":{},"150":{},"170":{},"185":{},"255":{},"270":{},"277":{},"278":{},"282":{}},"component":{}}],["happi",{"_index":6319,"title":{},"name":{},"text":{"144":{}},"component":{}}],["haraldk",{"_index":4238,"title":{},"name":{},"text":{"61":{}},"component":{}}],["hard",{"_index":2257,"title":{},"name":{},"text":{"33":{},"61":{},"75":{},"78":{},"91":{},"104":{},"106":{},"107":{},"119":{},"129":{},"151":{}},"component":{}}],["harder",{"_index":2360,"title":{},"name":{},"text":{"35":{},"261":{}},"component":{}}],["hardli",{"_index":4438,"title":{},"name":{},"text":{"66":{}},"component":{}}],["hash",{"_index":4706,"title":{"203-58":{}},"name":{},"text":{"71":{},"126":{},"203":{},"217":{},"218":{}},"component":{}}],["hashandlerattribut",{"_index":5398,"title":{},"name":{},"text":{"93":{}},"component":{}}],["hashicorp’",{"_index":5983,"title":{},"name":{},"text":{"128":{}},"component":{}}],["hashmap",{"_index":2613,"title":{},"name":{},"text":{"43":{},"150":{}},"component":{}}],["hashset",{"_index":4746,"title":{},"name":{},"text":{"74":{}},"component":{}}],["hashtag",{"_index":8000,"title":{},"name":{},"text":{"280":{}},"component":{}}],["hassl",{"_index":7616,"title":{},"name":{},"text":{"247":{},"253":{}},"component":{}}],["hatzlj",{"_index":3693,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["have",{"_index":2033,"title":{},"name":{},"text":{"31":{},"35":{},"52":{},"68":{},"71":{},"74":{},"80":{},"89":{},"90":{},"91":{},"104":{},"139":{},"144":{},"151":{},"272":{},"281":{}},"component":{}}],["haven’t",{"_index":1582,"title":{},"name":{},"text":{"25":{},"140":{},"167":{},"171":{},"196":{}},"component":{}}],["hdd",{"_index":6489,"title":{},"name":{},"text":{"151":{}},"component":{}}],["head",{"_index":4246,"title":{},"name":{},"text":{"61":{},"80":{},"254":{}},"component":{}}],["header",{"_index":968,"title":{},"name":{},"text":{"7":{},"61":{},"95":{},"106":{},"138":{},"159":{},"161":{},"162":{},"166":{},"199":{},"201":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"232":{},"256":{},"271":{},"277":{},"280":{}},"component":{}}],["headerutils#bytemapp",{"_index":5582,"title":{},"name":{},"text":{"106":{}},"component":{}}],["headervaluemapp",{"_index":5576,"title":{},"name":{},"text":{"106":{}},"component":{}}],["headervaluemapper(headervaluemapp",{"_index":5581,"title":{},"name":{},"text":{"106":{}},"component":{}}],["health",{"_index":823,"title":{"47":{},"47-1":{},"176-1":{}},"name":{"47":{}},"text":{"5":{},"47":{},"48":{},"51":{},"60":{},"137":{},"176":{},"178":{},"181":{},"196":{},"240":{},"243":{},"247":{},"253":{}},"component":{}}],["healthi",{"_index":4704,"title":{},"name":{},"text":{"71":{},"281":{}},"component":{}}],["heap",{"_index":4711,"title":{},"name":{},"text":{"71":{},"172":{},"255":{},"256":{}},"component":{}}],["heard",{"_index":6927,"title":{},"name":{},"text":{"172":{}},"component":{}}],["heart",{"_index":5946,"title":{},"name":{},"text":{"126":{}},"component":{}}],["heartbeat",{"_index":3399,"title":{"180":{}},"name":{"180":{}},"text":{"60":{},"61":{},"126":{},"172":{},"180":{},"181":{}},"component":{}}],["heartbeat.en",{"_index":6943,"title":{},"name":{},"text":{"172":{}},"component":{}}],["heartbeatconfig",{"_index":7154,"title":{},"name":{},"text":{"180":{}},"component":{}}],["heartbeatconfig.setenabled(fals",{"_index":7155,"title":{},"name":{},"text":{"180":{}},"component":{}}],["heino",{"_index":4148,"title":{},"name":{},"text":{"61":{}},"component":{}}],["held",{"_index":2798,"title":{},"name":{},"text":{"46":{}},"component":{}}],["help",{"_index":334,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"29":{},"30":{},"33":{},"34":{},"35":{},"39":{},"45":{},"55":{},"60":{},"61":{},"64":{},"66":{},"67":{},"68":{},"71":{},"72":{},"75":{},"79":{},"80":{},"83":{},"124":{},"137":{},"139":{},"146":{},"151":{},"171":{},"181":{},"184":{},"207":{},"247":{},"253":{},"260":{},"261":{},"262":{},"263":{},"267":{},"269":{},"270":{},"271":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["helper",{"_index":2244,"title":{},"name":{},"text":{"33":{},"46":{},"117":{},"144":{}},"component":{}}],["helper=fals",{"_index":5738,"title":{},"name":{},"text":{"117":{}},"component":{}}],["henc",{"_index":513,"title":{},"name":{},"text":{"3":{},"24":{},"29":{},"32":{},"38":{},"44":{},"45":{},"56":{},"60":{},"61":{},"79":{},"80":{},"93":{},"117":{},"129":{},"139":{},"143":{},"144":{},"169":{},"171":{},"184":{},"225":{},"226":{}},"component":{}}],["henceforth",{"_index":4752,"title":{},"name":{},"text":{"75":{}},"component":{}}],["here",{"_index":514,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"17":{},"18":{},"20":{},"23":{},"26":{},"27":{},"28":{},"31":{},"35":{},"36":{},"43":{},"44":{},"46":{},"49":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"66":{},"75":{},"78":{},"79":{},"80":{},"81":{},"97":{},"105":{},"108":{},"109":{},"110":{},"112":{},"117":{},"122":{},"143":{},"161":{},"167":{},"184":{},"197":{},"198":{},"242":{},"254":{},"255":{},"256":{},"269":{},"276":{},"282":{}},"component":{}}],["here’",{"_index":108,"title":{},"name":{},"text":{"2":{},"79":{},"93":{},"144":{},"147":{},"258":{}},"component":{}}],["hesit",{"_index":7668,"title":{},"name":{},"text":{"262":{}},"component":{}}],["hesseg",{"_index":4255,"title":{},"name":{},"text":{"61":{}},"component":{}}],["heterogen",{"_index":2091,"title":{},"name":{},"text":{"31":{},"70":{}},"component":{}}],["heurist",{"_index":3595,"title":{},"name":{},"text":{"60":{}},"component":{}}],["heutelbeck",{"_index":3683,"title":{},"name":{},"text":{"60":{}},"component":{}}],["hhd2/eventstor",{"_index":6498,"title":{},"name":{},"text":{"151":{}},"component":{}}],["hibern",{"_index":1647,"title":{},"name":{},"text":{"26":{},"35":{},"44":{},"97":{}},"component":{}}],["hibernate_sequ",{"_index":1651,"title":{},"name":{},"text":{"26":{}},"component":{}}],["hidden",{"_index":5995,"title":{},"name":{},"text":{"130":{}},"component":{}}],["hide",{"_index":7043,"title":{},"name":{},"text":{"176":{}},"component":{}}],["hierarch",{"_index":3261,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["hierarchi",{"_index":2425,"title":{},"name":{},"text":{"37":{},"52":{},"57":{},"60":{},"61":{},"74":{}},"component":{}}],["high",{"_index":521,"title":{"207":{},"218":{},"203-50":{},"217-2":{}},"name":{},"text":{"3":{},"51":{},"61":{},"80":{},"127":{},"139":{},"141":{},"151":{},"180":{},"184":{},"203":{},"217":{},"218":{},"223":{},"255":{},"271":{},"278":{}},"component":{}}],["higher",{"_index":1656,"title":{},"name":{},"text":{"26":{},"31":{},"61":{},"79":{},"80":{},"81":{},"139":{},"156":{},"176":{},"208":{},"213":{},"241":{},"254":{},"255":{},"263":{}},"component":{}}],["highest",{"_index":6477,"title":{},"name":{},"text":{"150":{},"271":{}},"component":{}}],["highli",{"_index":510,"title":{},"name":{},"text":{"3":{},"33":{},"42":{},"52":{},"61":{},"65":{},"97":{},"137":{},"154":{},"184":{},"185":{},"218":{}},"component":{}}],["highlight",{"_index":3164,"title":{},"name":{},"text":{"57":{},"80":{}},"component":{}}],["hint",{"_index":1204,"title":{},"name":{},"text":{"17":{},"19":{},"29":{},"117":{},"123":{},"124":{}},"component":{}}],["histor",{"_index":1817,"title":{},"name":{},"text":{"28":{},"61":{},"75":{}},"component":{}}],["histori",{"_index":926,"title":{},"name":{},"text":{"7":{},"38":{},"144":{},"270":{}},"component":{}}],["history=10",{"_index":410,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["hit",{"_index":1479,"title":{},"name":{},"text":{"24":{},"52":{},"71":{}},"component":{}}],["hoc",{"_index":5223,"title":{},"name":{},"text":{"80":{},"81":{},"142":{},"172":{}},"component":{}}],["hold",{"_index":1544,"title":{},"name":{},"text":{"25":{},"41":{},"79":{},"80":{},"104":{},"121":{},"149":{},"151":{},"278":{}},"component":{}}],["hole",{"_index":6486,"title":{"151-5":{}},"name":{},"text":{"151":{}},"component":{}}],["hole.condit",{"_index":6503,"title":{},"name":{},"text":{"151":{}},"component":{}}],["home",{"_index":349,"title":{},"name":{},"text":{"3":{},"184":{},"235":{},"271":{}},"component":{"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}}}],["homogen",{"_index":5944,"title":{},"name":{},"text":{"126":{}},"component":{}}],["honor",{"_index":2524,"title":{},"name":{},"text":{"38":{}},"component":{}}],["hood",{"_index":1729,"title":{},"name":{},"text":{"27":{},"79":{},"129":{},"156":{}},"component":{}}],["hook",{"_index":2882,"title":{},"name":{},"text":{"51":{},"56":{},"60":{},"80":{},"142":{}},"component":{}}],["hop",{"_index":6565,"title":{},"name":{},"text":{"156":{}},"component":{}}],["host",{"_index":676,"title":{},"name":{},"text":{"3":{},"80":{},"102":{},"141":{},"142":{},"148":{},"169":{},"171":{},"172":{},"184":{},"196":{},"205":{},"206":{},"256":{}},"component":{}}],["hostnam",{"_index":452,"title":{},"name":{},"text":{"3":{},"80":{},"141":{},"142":{},"148":{},"154":{},"163":{},"169":{},"171":{},"172":{},"174":{},"184":{},"185":{},"196":{}},"component":{}}],["hostname/port",{"_index":6111,"title":{},"name":{},"text":{"138":{}},"component":{}}],["hostname:intern",{"_index":6165,"title":{},"name":{},"text":{"141":{}},"component":{}}],["hot",{"_index":6041,"title":{},"name":{},"text":{"137":{}},"component":{}}],["hotspot",{"_index":4654,"title":{},"name":{},"text":{"71":{}},"component":{}}],["hour",{"_index":6924,"title":{},"name":{},"text":{"172":{},"195":{},"236":{}},"component":{}}],["hour(timestamp",{"_index":7208,"title":{},"name":{},"text":{"192":{}},"component":{}}],["hsqlsagaschema",{"_index":4405,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["htlo",{"_index":3232,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http",{"_index":662,"title":{"208-2":{},"208-3":{},"209-2":{},"209-3":{},"209-4":{},"211-2":{},"211-3":{},"213-1":{},"214-1":{},"214-2":{},"214-3":{},"216-1":{},"216-2":{},"278-8":{}},"name":{},"text":{"3":{},"8":{},"14":{},"137":{},"144":{},"161":{},"162":{},"166":{},"167":{},"169":{},"171":{},"172":{},"176":{},"179":{},"184":{},"185":{},"197":{},"199":{},"200":{},"203":{},"205":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"277":{},"278":{},"280":{}},"component":{}}],["http.client",{"_index":7347,"title":{"203-10":{}},"name":{},"text":{},"component":{}}],["http.port",{"_index":7346,"title":{"203-9":{}},"name":{},"text":{},"component":{}}],["http.server",{"_index":1085,"title":{},"name":{},"text":{"8":{}},"component":{}}],["http.tl",{"_index":7360,"title":{"203-28":{}},"name":{},"text":{},"component":{}}],["http.trust",{"_index":7361,"title":{"203-29":{},"203-31":{}},"name":{},"text":{},"component":{}}],["http/1.1",{"_index":7936,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["http/2",{"_index":6569,"title":{},"name":{},"text":{"156":{}},"component":{}}],["http/grpc",{"_index":6807,"title":{},"name":{},"text":{"169":{}},"component":{}}],["http2",{"_index":6567,"title":{},"name":{},"text":{"156":{}},"component":{}}],["http://127.0.0.1:8024",{"_index":8035,"title":{},"name":{},"text":{"281":{}},"component":{}}],["http://[node]:[port",{"_index":6125,"title":{},"name":{},"text":{"139":{},"146":{}},"component":{}}],["http://[server]/createcontroldbbackup",{"_index":6145,"title":{},"name":{},"text":{"140":{}},"component":{}}],["http://[server]/v1/backup/createcontroldbbackup`forc",{"_index":6146,"title":{},"name":{},"text":{"140":{}},"component":{}}],["http://[server]/v1/backup/filenam",{"_index":6149,"title":{},"name":{},"text":{"140":{}},"component":{}}],["http://keycloak",{"_index":6795,"title":{},"name":{},"text":{"165":{}},"component":{}}],["http://localhost:10100/fir",{"_index":7687,"title":{},"name":{},"text":{"267":{}},"component":{}}],["http://localhost:10101/fir",{"_index":7688,"title":{},"name":{},"text":{"267":{}},"component":{}}],["http://localhost:10102/fir",{"_index":7689,"title":{},"name":{},"text":{"267":{}},"component":{}}],["http://localhost:10103/fir",{"_index":7690,"title":{},"name":{},"text":{"267":{}},"component":{}}],["http://localhost:10106/fir",{"_index":7691,"title":{},"name":{},"text":{"267":{},"271":{}},"component":{}}],["http://localhost:8024",{"_index":6127,"title":{},"name":{},"text":{"139":{},"146":{},"161":{},"167":{},"171":{},"185":{},"196":{},"280":{},"281":{}},"component":{}}],["http://localhost:8024.th",{"_index":6826,"title":{},"name":{},"text":{"171":{}},"component":{}}],["http://localhost:8024/v1",{"_index":7176,"title":{},"name":{},"text":{"185":{}},"component":{}}],["http://localhost:8024/v1/public/context",{"_index":6576,"title":{},"name":{},"text":{"159":{},"162":{}},"component":{}}],["http://localhost:8024/v1/public/us",{"_index":6801,"title":{},"name":{},"text":{"166":{}},"component":{}}],["http://localhost:8080",{"_index":1079,"title":{},"name":{},"text":{"8":{},"199":{},"200":{}},"component":{}}],["http://localhost:8080/bik",{"_index":7913,"title":{},"name":{},"text":{"277":{}},"component":{}}],["http://localhost:8080/bikes/8427681b",{"_index":7932,"title":{},"name":{},"text":{"277":{}},"component":{}}],["http://localhost:8080/bikes/{bikeid",{"_index":7914,"title":{},"name":{},"text":{"277":{}},"component":{}}],["http://localhost:8080/bikes?biketype=city&location=utrecht",{"_index":7998,"title":{},"name":{},"text":{"280":{}},"component":{}}],["http://localhost:8080/bikes?biketype={type}&location={c",{"_index":7997,"title":{},"name":{},"text":{"280":{}},"component":{}}],["http://localhost:8080/v1/contexts/default/commands/io.axoniq.demo.giftcard.api.issuecardcommand",{"_index":7319,"title":{},"name":{},"text":{"200":{}},"component":{}}],["http://localhost:8080/v1/contexts/default/events/io.axoniq.demo.giftcard.api.cardredeemedev",{"_index":7329,"title":{},"name":{},"text":{"200":{}},"component":{}}],["http://localhost:8080/v1/contexts/default/handlers/command",{"_index":7280,"title":{},"name":{},"text":{"199":{}},"component":{}}],["http://localhost:8080/v1/contexts/default/handlers/ev",{"_index":7308,"title":{},"name":{},"text":{"199":{}},"component":{}}],["http://localhost:8080/v1/contexts/default/handlers/queri",{"_index":7298,"title":{},"name":{},"text":{"199":{}},"component":{}}],["http://localhost:8080/v1/contexts/default/queries/io.axoniq.demo.giftcard.api.fetchcardsummariesqueri",{"_index":7325,"title":{},"name":{},"text":{"200":{}},"component":{}}],["http://localhost:8081/fir",{"_index":7741,"title":{},"name":{},"text":{"271":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/command",{"_index":7520,"title":{},"name":{},"text":{"213":{},"216":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/commands/io.axoniq.demo.giftcard.api.issuecardcommand",{"_index":7516,"title":{},"name":{},"text":{"213":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/ev",{"_index":7531,"title":{},"name":{},"text":{"214":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/events/local.application.client.ev",{"_index":7523,"title":{},"name":{},"text":{"214":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/handlers/command",{"_index":7463,"title":{},"name":{},"text":{"208":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/handlers/ev",{"_index":7476,"title":{},"name":{},"text":{"209":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/handlers/queri",{"_index":7479,"title":{},"name":{},"text":{"211":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/queri",{"_index":7537,"title":{},"name":{},"text":{"216":{}},"component":{}}],["http://synapse:8080/v1/contexts/default/queries/io.axoniq.demo.giftcard.api.fetchcardsummariesqueri",{"_index":7535,"title":{},"name":{},"text":{"216":{}},"component":{}}],["http://{synaps",{"_index":7458,"title":{},"name":{},"text":{"206":{}},"component":{}}],["http:[server]/v1/backup/log/filenam",{"_index":6154,"title":{},"name":{},"text":{"140":{}},"component":{}}],["http:[server]:[port]/swagg",{"_index":6130,"title":{},"name":{},"text":{"139":{},"140":{},"146":{}},"component":{}}],["httpget",{"_index":639,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["httpport",{"_index":6458,"title":{},"name":{},"text":{"148":{},"185":{}},"component":{}}],["https://1d5cae3d",{"_index":7310,"title":{},"name":{},"text":{"199":{}},"component":{}}],["https://:@github.com",{"_index":1027,"title":{},"name":{},"text":{"8":{}},"component":{}}],["https://ac365f15",{"_index":7300,"title":{},"name":{},"text":{"199":{}},"component":{}}],["https://cb5b8a7d",{"_index":7283,"title":{},"name":{},"text":{"199":{}},"component":{}}],["https://client.application.local/v1/messag",{"_index":7465,"title":{},"name":{},"text":{"208":{},"209":{},"211":{}},"component":{}}],["https://console.axoniq.io",{"_index":7564,"title":{},"name":{},"text":{"230":{}},"component":{}}],["https://download.axoniq.io/axonserver/axon",{"_index":7272,"title":{},"name":{},"text":{"198":{},"205":{}},"component":{}}],["https://download.axoniq.io/quickstart/axonquickstart.zip",{"_index":7265,"title":{},"name":{},"text":{"198":{}},"component":{}}],["https://github.com/axoniq/axon",{"_index":6427,"title":{},"name":{},"text":{"147":{}},"component":{}}],["https://github.com/axoniq/giftcard",{"_index":1064,"title":{},"name":{},"text":{"8":{}},"component":{}}],["https://github.com/axoniq/run",{"_index":539,"title":{},"name":{},"text":{"3":{}},"component":{}}],["https://github.com/org",{"_index":1114,"title":{},"name":{},"text":{"9":{}},"component":{}}],["https://library.axoniq.io/axon",{"_index":6032,"title":{},"name":{},"text":{"137":{}},"component":{}}],["https://localhost:8024",{"_index":6596,"title":{},"name":{},"text":{"161":{},"167":{}},"component":{}}],["https://localhost:8024/v1/public/context",{"_index":6585,"title":{},"name":{},"text":{"159":{}},"component":{}}],["https://localhost:8080/fir",{"_index":7686,"title":{},"name":{},"text":{"267":{}},"component":{}}],["hub",{"_index":1001,"title":{},"name":{},"text":{"8":{}},"component":{}}],["huge",{"_index":6323,"title":{},"name":{},"text":{"144":{}},"component":{}}],["human",{"_index":1335,"title":{},"name":{},"text":{"24":{},"33":{},"35":{}},"component":{}}],["hundr",{"_index":4646,"title":{},"name":{},"text":{"71":{}},"component":{}}],["hydrat",{"_index":2985,"title":{},"name":{},"text":{"52":{}},"component":{}}],["hyphen",{"_index":6420,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["i.a.d.b.rental.rentalappl",{"_index":8025,"title":{},"name":{},"text":{"281":{}},"component":{}}],["i.o",{"_index":4263,"title":{},"name":{},"text":{"61":{}},"component":{}}],["i/o",{"_index":2075,"title":{},"name":{},"text":{"31":{},"80":{},"121":{},"255":{}},"component":{}}],["iap",{"_index":7252,"title":{},"name":{},"text":{"196":{}},"component":{}}],["icon",{"_index":6124,"title":{},"name":{},"text":{"139":{},"146":{},"158":{},"241":{},"270":{},"277":{},"280":{}},"component":{}}],["id",{"_index":270,"title":{"203-11":{},"203-20":{}},"name":{},"text":{"3":{},"5":{},"13":{},"23":{},"28":{},"29":{},"32":{},"38":{},"45":{},"49":{},"56":{},"61":{},"63":{},"70":{},"75":{},"77":{},"78":{},"80":{},"90":{},"107":{},"108":{},"112":{},"116":{},"122":{},"165":{},"184":{},"196":{},"198":{},"199":{},"200":{},"203":{},"208":{},"209":{},"211":{},"213":{},"214":{},"256":{},"273":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["idea",{"_index":5525,"title":{"277-15":{},"280-3":{}},"name":{},"text":{"104":{},"121":{},"143":{},"191":{},"218":{},"231":{},"260":{},"277":{},"278":{},"280":{}},"component":{}}],["ideal",{"_index":1351,"title":{},"name":{},"text":{"24":{},"35":{},"60":{},"66":{},"80":{},"91":{},"151":{}},"component":{}}],["idempot",{"_index":4833,"title":{"79-12":{}},"name":{},"text":{"79":{},"80":{},"85":{}},"component":{}}],["ident",{"_index":997,"title":{},"name":{},"text":{"8":{},"9":{},"38":{},"53":{},"61":{},"63":{},"66":{},"69":{},"73":{},"80":{},"96":{},"106":{}},"component":{}}],["identifi",{"_index":1198,"title":{"92":{},"80-38":{}},"name":{},"text":{"17":{},"19":{},"27":{},"28":{},"29":{},"31":{},"35":{},"36":{},"38":{},"40":{},"42":{},"43":{},"45":{},"49":{},"51":{},"52":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"71":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"89":{},"90":{},"92":{},"97":{},"106":{},"107":{},"114":{},"117":{},"137":{},"142":{},"143":{},"147":{},"191":{},"199":{},"203":{},"212":{},"239":{},"240":{},"260":{},"261":{},"262":{},"270":{},"271":{},"277":{},"278":{}},"component":{"92":{}}}],["identifierfactori",{"_index":5373,"title":{},"name":{},"text":{"92":{}},"component":{}}],["identifiermissingexcept",{"_index":4022,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ide’",{"_index":4762,"title":{},"name":{},"text":{"75":{}},"component":{}}],["idfilt",{"_index":5695,"title":{},"name":{},"text":{"112":{}},"component":{}}],["idl",{"_index":4707,"title":{"144-7":{}},"name":{},"text":{"71":{},"121":{},"144":{},"270":{},"273":{}},"component":{}}],["ifnotpres",{"_index":622,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["ifpresent(letterprocessor",{"_index":4930,"title":{},"name":{},"text":{"79":{}},"component":{}}],["ifpresent(sequenceddeadletterprocessor::processani",{"_index":4934,"title":{},"name":{},"text":{"79":{},"117":{}},"component":{}}],["ifpresent(streamingeventprocessor",{"_index":6253,"title":{},"name":{},"text":{"143":{}},"component":{}}],["ifpresent(streamingprocessor",{"_index":5197,"title":{},"name":{},"text":{"80":{}},"component":{}}],["ignor",{"_index":1469,"title":{},"name":{},"text":{"24":{},"28":{},"31":{},"37":{},"50":{},"57":{},"60":{},"61":{},"66":{},"68":{},"75":{},"79":{},"126":{},"127":{},"156":{},"236":{},"239":{},"278":{}},"component":{}}],["ignorelistingdiscoverymod",{"_index":5941,"title":{},"name":{},"text":{"126":{}},"component":{}}],["illeg",{"_index":4494,"title":{},"name":{},"text":{"66":{},"201":{}},"component":{}}],["illegalargumentexcept",{"_index":2729,"title":{},"name":{},"text":{"44":{},"61":{},"93":{}},"component":{}}],["illegalargumentexception(\"no",{"_index":4943,"title":{},"name":{},"text":{"79":{}},"component":{}}],["illegalargumentexception.class",{"_index":2730,"title":{},"name":{},"text":{"44":{}},"component":{}}],["illegalstateexcept",{"_index":2717,"title":{},"name":{},"text":{"44":{},"70":{},"77":{}},"component":{}}],["illegalstateexception(\"amount",{"_index":1783,"title":{},"name":{},"text":{"28":{},"78":{}},"component":{}}],["illegalstateexception(\"can't",{"_index":7973,"title":{},"name":{},"text":{"278":{}},"component":{}}],["illegalstateexception(\"transact",{"_index":4795,"title":{},"name":{},"text":{"77":{}},"component":{}}],["illegalstateexception(\"transactionid",{"_index":4828,"title":{},"name":{},"text":{"78":{}},"component":{}}],["illegalstateexception.class",{"_index":2719,"title":{},"name":{},"text":{"44":{}},"component":{}}],["imag",{"_index":209,"title":{"3-1":{},"3-9":{},"137-4":{},"184-1":{},"184-2":{}},"name":{},"text":{"3":{},"4":{},"7":{},"11":{},"23":{},"52":{},"79":{},"124":{},"125":{},"137":{},"184":{},"212":{},"225":{},"242":{},"243":{},"254":{},"256":{},"263":{},"266":{},"267":{},"274":{},"278":{},"281":{}},"component":{}}],["image::ac",{"_index":7745,"title":{},"name":{},"text":{"271":{}},"component":{}}],["imagepullpolici",{"_index":621,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["imagin",{"_index":1438,"title":{},"name":{},"text":{"24":{},"38":{},"62":{},"76":{},"278":{}},"component":{}}],["imaginari",{"_index":5739,"title":{},"name":{},"text":{"117":{}},"component":{}}],["immedi",{"_index":1962,"title":{},"name":{},"text":{"31":{},"44":{},"56":{},"61":{},"63":{},"65":{},"122":{},"138":{},"140":{},"143":{},"147":{},"165":{},"245":{},"271":{},"274":{},"276":{},"277":{},"282":{}},"component":{}}],["immut",{"_index":2533,"title":{},"name":{},"text":{"40":{},"42":{},"140":{},"144":{},"278":{}},"component":{}}],["impact",{"_index":1959,"title":{},"name":{},"text":{"31":{},"50":{},"52":{},"60":{},"61":{},"63":{},"71":{},"97":{},"107":{},"129":{},"139":{},"144":{},"151":{}},"component":{}}],["imped",{"_index":1382,"title":{},"name":{},"text":{"24":{}},"component":{}}],["implement",{"_index":881,"title":{"54":{},"63":{},"84":{},"85":{},"89":{},"278":{},"24-1":{},"29-15":{},"38-2":{},"43-5":{},"277-7":{},"277-8":{},"277-10":{},"277-11":{},"278-2":{},"278-4":{},"278-8":{},"278-10":{}},"name":{"54":{},"63":{},"85":{},"89":{},"278":{}},"text":{"5":{},"11":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"83":{},"84":{},"88":{},"89":{},"92":{},"93":{},"94":{},"95":{},"97":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"110":{},"111":{},"114":{},"117":{},"119":{},"122":{},"125":{},"126":{},"128":{},"131":{},"137":{},"141":{},"143":{},"144":{},"147":{},"154":{},"180":{},"204":{},"217":{},"218":{},"223":{},"251":{},"254":{},"270":{},"275":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["implementation(platform(\"org.axonframework:axon",{"_index":1319,"title":{},"name":{},"text":{"23":{}},"component":{}}],["implementation’",{"_index":2232,"title":{},"name":{},"text":{"33":{}},"component":{}}],["impli",{"_index":7840,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["implic",{"_index":3142,"title":{},"name":{},"text":{"56":{}},"component":{}}],["implicit",{"_index":1401,"title":{},"name":{},"text":{"24":{}},"component":{}}],["import",{"_index":560,"title":{},"name":{},"text":{"3":{},"5":{},"13":{},"23":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"42":{},"45":{},"46":{},"48":{},"52":{},"56":{},"57":{},"60":{},"63":{},"65":{},"66":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"85":{},"91":{},"97":{},"107":{},"109":{},"110":{},"112":{},"119":{},"123":{},"137":{},"140":{},"143":{},"147":{},"149":{},"151":{},"156":{},"172":{},"184":{},"196":{},"203":{},"204":{},"205":{},"217":{},"234":{},"241":{},"254":{},"255":{},"275":{},"276":{},"278":{}},"component":{}}],["importruntimehint",{"_index":5928,"title":{},"name":{},"text":{"124":{}},"component":{}}],["impos",{"_index":2520,"title":{},"name":{},"text":{"38":{},"61":{}},"component":{}}],["imposs",{"_index":4603,"title":{},"name":{},"text":{"68":{}},"component":{}}],["improv",{"_index":1130,"title":{"11":{},"11-1":{},"137-3":{},"137-8":{},"137-13":{},"212-3":{},"212-7":{},"212-11":{},"212-15":{},"212-19":{}},"name":{},"text":{"11":{},"17":{},"19":{},"52":{},"60":{},"61":{},"137":{},"138":{},"146":{},"151":{},"212":{},"232":{},"237":{},"254":{}},"component":{}}],["inaccessibleobjectexcept",{"_index":4124,"title":{},"name":{},"text":{"61":{}},"component":{}}],["inact",{"_index":2804,"title":{},"name":{},"text":{"47":{},"80":{},"203":{},"212":{}},"component":{}}],["inbound",{"_index":7396,"title":{},"name":{},"text":{"203":{}},"component":{}}],["incap",{"_index":1472,"title":{},"name":{},"text":{"24":{},"61":{}},"component":{}}],["incid",{"_index":7597,"title":{},"name":{},"text":{"241":{},"256":{}},"component":{}}],["incident",{"_index":6525,"title":{},"name":{},"text":{"151":{}},"component":{}}],["inclin",{"_index":4859,"title":{},"name":{},"text":{"79":{},"104":{},"117":{}},"component":{}}],["includ",{"_index":149,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"8":{},"9":{},"23":{},"25":{},"29":{},"31":{},"33":{},"35":{},"38":{},"41":{},"42":{},"44":{},"51":{},"52":{},"56":{},"60":{},"61":{},"66":{},"67":{},"72":{},"77":{},"79":{},"80":{},"86":{},"101":{},"102":{},"103":{},"128":{},"137":{},"138":{},"139":{},"140":{},"146":{},"151":{},"161":{},"171":{},"176":{},"184":{},"185":{},"191":{},"208":{},"209":{},"211":{},"228":{},"236":{},"238":{},"239":{},"240":{},"242":{},"243":{},"245":{},"255":{},"269":{},"270":{},"273":{},"276":{},"277":{}},"component":{}}],["incom",{"_index":679,"title":{"203-32":{}},"name":{},"text":{"3":{},"31":{},"40":{},"44":{},"54":{},"63":{},"70":{},"76":{},"77":{},"78":{},"122":{},"129":{},"158":{},"172":{},"184":{},"199":{},"255":{}},"component":{}}],["incompat",{"_index":5572,"title":{},"name":{},"text":{"106":{}},"component":{}}],["incompatibleaggregateexcept",{"_index":4025,"title":{},"name":{},"text":{"61":{}},"component":{}}],["incomplet",{"_index":6155,"title":{},"name":{},"text":{"140":{}},"component":{}}],["inconsist",{"_index":3902,"title":{},"name":{},"text":{"61":{},"79":{},"140":{},"142":{}},"component":{}}],["incorrect",{"_index":4096,"title":{},"name":{},"text":{"61":{},"138":{}},"component":{}}],["incorrectli",{"_index":3723,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["increas",{"_index":2046,"title":{"70-1":{},"158-1":{}},"name":{},"text":{"31":{},"51":{},"70":{},"80":{},"88":{},"97":{},"137":{},"138":{},"144":{},"147":{},"156":{},"158":{},"172":{},"245":{},"254":{},"255":{},"271":{}},"component":{}}],["increase/decreas",{"_index":4622,"title":{},"name":{},"text":{"70":{}},"component":{}}],["incred",{"_index":2934,"title":{},"name":{},"text":{"52":{},"60":{}},"component":{}}],["increment",{"_index":2457,"title":{"97-2":{}},"name":{},"text":{"38":{},"61":{},"71":{},"79":{},"80":{},"97":{},"121":{},"122":{},"135":{},"140":{}},"component":{}}],["incur",{"_index":7242,"title":{},"name":{},"text":{"196":{}},"component":{}}],["indefinit",{"_index":137,"title":{},"name":{},"text":{"2":{},"27":{},"38":{},"151":{}},"component":{}}],["indent",{"_index":8014,"title":{},"name":{},"text":{"281":{}},"component":{}}],["independ",{"_index":1092,"title":{},"name":{},"text":{"9":{},"68":{},"119":{},"137":{},"143":{},"151":{},"218":{},"276":{},"282":{}},"component":{}}],["index",{"_index":3,"title":{"146-1":{}},"name":{"1":{},"6":{},"15":{},"19":{},"21":{},"22":{},"30":{},"34":{},"39":{},"42":{},"48":{},"55":{},"59":{},"64":{},"67":{},"72":{},"79":{},"82":{},"86":{},"90":{},"92":{},"94":{},"96":{},"97":{},"99":{},"101":{},"103":{},"105":{},"111":{},"114":{},"119":{},"121":{},"124":{},"128":{},"131":{},"134":{},"145":{},"152":{},"153":{},"157":{},"168":{},"174":{},"181":{},"182":{},"184":{},"185":{},"187":{},"191":{},"196":{},"197":{},"204":{},"218":{},"221":{},"223":{},"224":{},"233":{},"247":{},"250":{},"253":{},"257":{},"263":{},"264":{},"268":{},"279":{}},"text":{"35":{},"44":{},"52":{},"61":{},"97":{},"114":{},"138":{},"140":{},"142":{},"146":{},"151":{},"172":{},"199":{},"209":{},"270":{}},"component":{}}],["index.adoc",{"_index":3208,"title":{},"name":{},"text":{"60":{}},"component":{}}],["indexoutofboundsexcept",{"_index":3586,"title":{},"name":{},"text":{"60":{}},"component":{}}],["indic",{"_index":1758,"title":{"47":{},"47-1":{}},"name":{},"text":{"27":{},"31":{},"40":{},"42":{},"45":{},"46":{},"47":{},"48":{},"51":{},"52":{},"53":{},"54":{},"56":{},"60":{},"63":{},"66":{},"76":{},"93":{},"97":{},"114":{},"142":{},"162":{},"172":{},"192":{},"199":{},"200":{},"214":{},"216":{},"241":{},"255":{},"270":{},"271":{},"273":{},"274":{},"278":{}},"component":{}}],["individu",{"_index":16,"title":{},"name":{},"text":{"1":{},"23":{},"63":{},"65":{},"106":{},"149":{},"169":{},"171":{},"172":{},"218":{},"245":{},"254":{},"255":{}},"component":{}}],["ineffici",{"_index":5704,"title":{},"name":{},"text":{"114":{},"121":{}},"component":{}}],["inertia",{"_index":7386,"title":{"203-57":{}},"name":{},"text":{"203":{}},"component":{}}],["inevit",{"_index":4863,"title":{},"name":{},"text":{"79":{}},"component":{}}],["inf",{"_index":1546,"title":{},"name":{},"text":{"25":{}},"component":{}}],["inf/orm.xml",{"_index":5443,"title":{},"name":{},"text":{"97":{}},"component":{}}],["inf/persistence.xml",{"_index":2280,"title":{},"name":{},"text":{"35":{}},"component":{}}],["inf/services/org.axonframework.common.identifierfactori",{"_index":5377,"title":{},"name":{},"text":{"92":{}},"component":{}}],["inf/services/org.axonframework.messaging.annotation.handlerenhancerdefinit",{"_index":5380,"title":{},"name":{},"text":{"93":{}},"component":{}}],["inf/services/org.axonframework.messaging.annotation.parameterresolverfactori",{"_index":5406,"title":{},"name":{},"text":{"95":{}},"component":{}}],["inf/spr",{"_index":1570,"title":{},"name":{},"text":{"25":{}},"component":{}}],["infam",{"_index":5438,"title":{},"name":{},"text":{"97":{}},"component":{}}],["infer",{"_index":5682,"title":{},"name":{},"text":{"112":{},"277":{}},"component":{}}],["infinit",{"_index":112,"title":{},"name":{},"text":{"2":{},"56":{}},"component":{}}],["inflat",{"_index":6620,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["influenc",{"_index":2268,"title":{"35-22":{}},"name":{},"text":{"38":{},"61":{},"80":{},"107":{},"149":{},"172":{}},"component":{}}],["info",{"_index":866,"title":{},"name":{},"text":{"5":{},"80":{},"140":{},"172":{},"277":{},"281":{},"282":{}},"component":{}}],["inform",{"_index":767,"title":{"7-1":{},"229-3":{},"270-3":{}},"name":{},"text":{"5":{},"7":{},"9":{},"10":{},"11":{},"23":{},"24":{},"26":{},"29":{},"31":{},"35":{},"40":{},"42":{},"43":{},"44":{},"48":{},"52":{},"53":{},"56":{},"60":{},"61":{},"63":{},"65":{},"71":{},"79":{},"80":{},"98":{},"101":{},"103":{},"113":{},"126":{},"127":{},"128":{},"137":{},"138":{},"139":{},"140":{},"141":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"155":{},"158":{},"162":{},"165":{},"171":{},"176":{},"178":{},"181":{},"185":{},"196":{},"199":{},"201":{},"203":{},"205":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"229":{},"232":{},"234":{},"235":{},"238":{},"239":{},"241":{},"242":{},"243":{},"244":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"258":{},"261":{},"262":{},"266":{},"268":{},"270":{},"271":{},"273":{},"274":{},"277":{},"278":{},"280":{}},"component":{}}],["infraconfigur",{"_index":3416,"title":{},"name":{},"text":{"60":{}},"component":{}}],["infraconfiguration.springaxonconfigur",{"_index":3892,"title":{},"name":{},"text":{"61":{}},"component":{}}],["infrastructur",{"_index":49,"title":{"31":{},"65":{},"63-4":{},"218-6":{}},"name":{"31":{},"65":{}},"text":{"1":{},"5":{},"7":{},"23":{},"24":{},"25":{},"27":{},"30":{},"31":{},"54":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"79":{},"80":{},"81":{},"107":{},"146":{},"224":{},"233":{},"247":{},"281":{}},"component":{}}],["infrequ",{"_index":6066,"title":{},"name":{},"text":{"137":{}},"component":{}}],["ing.yml",{"_index":681,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["ingest",{"_index":2821,"title":{},"name":{},"text":{"50":{},"69":{},"79":{},"151":{},"255":{},"256":{}},"component":{}}],["ingress",{"_index":667,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["ingress.networking.k8s.io/axonserv",{"_index":683,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["inherit",{"_index":4320,"title":{},"name":{},"text":{"61":{},"74":{},"156":{},"276":{}},"component":{}}],["init",{"_index":6159,"title":{},"name":{},"text":{"141":{},"171":{},"185":{}},"component":{}}],["init_clust",{"_index":6669,"title":{},"name":{},"text":{"164":{}},"component":{}}],["initi",{"_index":423,"title":{"71-9":{},"80-20":{},"80-22":{},"141-3":{},"185-7":{}},"name":{},"text":{"3":{},"25":{},"27":{},"29":{},"38":{},"42":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"75":{},"78":{},"79":{},"80":{},"81":{},"85":{},"98":{},"107":{},"117":{},"122":{},"137":{},"138":{},"140":{},"141":{},"144":{},"146":{},"147":{},"151":{},"156":{},"160":{},"163":{},"167":{},"171":{},"172":{},"184":{},"185":{},"212":{},"241":{},"254":{},"278":{},"281":{},"282":{}},"component":{}}],["initialdelay",{"_index":5364,"title":{},"name":{},"text":{"91":{}},"component":{}}],["initialdelaysecond",{"_index":641,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["initialis",{"_index":5719,"title":{},"name":{},"text":{"116":{},"117":{}},"component":{}}],["initialposit",{"_index":5289,"title":{},"name":{},"text":{"81":{}},"component":{}}],["initialresult",{"_index":3108,"title":{},"name":{},"text":{"56":{}},"component":{}}],["initialsegmentcount",{"_index":5118,"title":{},"name":{},"text":{"80":{}},"component":{}}],["initialsegmentcount(32",{"_index":5164,"title":{},"name":{},"text":{"80":{}},"component":{}}],["initialtrackingtokenconfigurermodul",{"_index":5065,"title":{},"name":{},"text":{"80":{}},"component":{}}],["initialtrackingtokensuppli",{"_index":5218,"title":{},"name":{},"text":{"80":{}},"component":{}}],["initialvalu",{"_index":7296,"title":{},"name":{},"text":{"199":{}},"component":{}}],["inject",{"_index":444,"title":{"52-14":{},"63-3":{}},"name":{},"text":{"3":{},"23":{},"29":{},"32":{},"38":{},"45":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"79":{},"80":{},"85":{},"94":{},"103":{},"116":{},"117":{},"184":{},"278":{}},"component":{}}],["injector",{"_index":4041,"title":{},"name":{},"text":{"61":{}},"component":{}}],["inlin",{"_index":5646,"title":{},"name":{},"text":{"109":{},"111":{},"112":{}},"component":{}}],["inmemoryeventstorageengin",{"_index":2371,"title":{},"name":{},"text":{"35":{},"60":{}},"component":{}}],["inmemorysagastor",{"_index":4394,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["inmemorysequenceddeadletterqueu",{"_index":4890,"title":{},"name":{},"text":{"79":{}},"component":{}}],["inmemorytoken",{"_index":5108,"title":{},"name":{},"text":{"80":{}},"component":{}}],["inmemorytokenstor",{"_index":5055,"title":{},"name":{},"text":{"80":{},"104":{}},"component":{}}],["inner",{"_index":1818,"title":{},"name":{},"text":{"28":{},"52":{},"60":{}},"component":{}}],["innov",{"_index":7262,"title":{},"name":{},"text":{"197":{}},"component":{}}],["input",{"_index":1513,"title":{"142-2":{}},"name":{},"text":{"24":{},"38":{},"80":{},"122":{},"191":{},"270":{}},"component":{}}],["inputstream",{"_index":1510,"title":{},"name":{},"text":{"24":{},"122":{}},"component":{}}],["insecur",{"_index":6589,"title":{},"name":{},"text":{"161":{},"167":{},"171":{}},"component":{}}],["insert",{"_index":2289,"title":{},"name":{},"text":{"35":{},"45":{},"61":{},"79":{},"97":{},"150":{}},"component":{}}],["insid",{"_index":1304,"title":{},"name":{},"text":{"23":{},"28":{},"31":{},"35":{},"43":{},"60":{},"63":{},"66":{},"80":{},"92":{},"93":{},"100":{},"106":{},"144":{},"194":{},"267":{},"277":{},"278":{}},"component":{}}],["insight",{"_index":116,"title":{"239":{},"270-28":{},"271-4":{}},"name":{"239":{}},"text":{"2":{},"5":{},"52":{},"185":{},"224":{},"233":{},"236":{},"238":{},"239":{},"240":{},"243":{},"247":{},"253":{},"270":{},"271":{}},"component":{}}],["inspect",{"_index":4789,"title":{},"name":{},"text":{"77":{},"177":{},"251":{}},"component":{}}],["instal",{"_index":169,"title":{"3":{},"152":{},"188":{},"196":{},"198":{},"205":{},"229":{},"8-1":{},"8-3":{},"8-4":{},"163-1":{},"165-1":{},"196-1":{},"196-8":{}},"name":{"188":{},"198":{},"205":{},"229":{}},"text":{"2":{},"3":{},"5":{},"7":{},"8":{},"18":{},"19":{},"134":{},"151":{},"152":{},"163":{},"165":{},"169":{},"171":{},"172":{},"184":{},"196":{},"198":{},"199":{},"200":{},"204":{},"205":{},"212":{},"229":{},"238":{},"242":{},"274":{},"281":{}},"component":{"3":{},"196":{}}}],["installing_as_dock",{"_index":223,"title":{},"name":{"3":{}},"text":{},"component":{}}],["instana",{"_index":6007,"title":{},"name":{},"text":{"131":{}},"component":{}}],["instanc",{"_index":279,"title":{"229":{},"57-4":{},"57-5":{},"256-2":{},"270-16":{}},"name":{"229":{}},"text":{"3":{},"5":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"36":{},"37":{},"38":{},"40":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"73":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"83":{},"84":{},"85":{},"89":{},"92":{},"95":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"117":{},"122":{},"126":{},"129":{},"137":{},"138":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"149":{},"150":{},"151":{},"154":{},"156":{},"158":{},"172":{},"173":{},"184":{},"185":{},"194":{},"196":{},"198":{},"199":{},"200":{},"201":{},"203":{},"208":{},"209":{},"211":{},"212":{},"216":{},"218":{},"221":{},"223":{},"229":{},"231":{},"234":{},"235":{},"236":{},"238":{},"242":{},"243":{},"254":{},"255":{},"256":{},"270":{},"274":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["instanceof",{"_index":2614,"title":{},"name":{},"text":{"43":{},"70":{},"79":{},"88":{}},"component":{}}],["instances/thread",{"_index":5049,"title":{},"name":{},"text":{"80":{}},"component":{}}],["instance’",{"_index":5516,"title":{},"name":{},"text":{"104":{}},"component":{}}],["instant",{"_index":2148,"title":{},"name":{},"text":{"32":{},"66":{},"79":{},"80":{},"85":{}},"component":{}}],["instant.now().getepochsecond",{"_index":7972,"title":{},"name":{},"text":{"278":{}},"component":{}}],["instant.now().plus(command.daysvalid",{"_index":5321,"title":{},"name":{},"text":{"85":{}},"component":{}}],["instanti",{"_index":1759,"title":{},"name":{},"text":{"27":{},"28":{},"29":{},"38":{},"71":{},"73":{},"75":{},"107":{}},"component":{}}],["instantli",{"_index":770,"title":{},"name":{},"text":{"5":{}},"component":{}}],["instead",{"_index":1075,"title":{},"name":{},"text":{"8":{},"23":{},"24":{},"27":{},"28":{},"29":{},"31":{},"35":{},"38":{},"40":{},"42":{},"46":{},"50":{},"52":{},"54":{},"56":{},"57":{},"60":{},"61":{},"63":{},"68":{},"71":{},"76":{},"79":{},"80":{},"81":{},"90":{},"97":{},"100":{},"103":{},"104":{},"108":{},"109":{},"112":{},"116":{},"121":{},"137":{},"144":{},"159":{},"161":{},"167":{},"171":{},"172":{},"203":{},"214":{},"273":{},"277":{}},"component":{}}],["instruct",{"_index":704,"title":{"4-4":{},"212-2":{},"212-6":{},"212-10":{},"212-14":{},"212-18":{}},"name":{},"text":{"5":{},"7":{},"8":{},"52":{},"60":{},"61":{},"137":{},"142":{},"143":{},"151":{},"172":{},"199":{},"200":{},"229":{},"234":{},"235":{},"238":{},"242":{},"260":{},"263":{},"264":{},"273":{},"274":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["instruction.result.timeout",{"_index":6913,"title":{},"name":{},"text":{"172":{}},"component":{}}],["instrument",{"_index":2912,"title":{},"name":{},"text":{"52":{},"131":{}},"component":{}}],["instrumentcommandbus(meterregistri",{"_index":2849,"title":{},"name":{},"text":{"50":{}},"component":{}}],["instrumenteventprocessors(meterregistri",{"_index":2848,"title":{},"name":{},"text":{"50":{}},"component":{}}],["instrumenteventstore(meterregistri",{"_index":2847,"title":{},"name":{},"text":{"50":{}},"component":{}}],["instrumentquerybus(meterregistri",{"_index":2850,"title":{},"name":{},"text":{"50":{}},"component":{}}],["insuffici",{"_index":5199,"title":{},"name":{},"text":{"80":{}},"component":{}}],["int",{"_index":1781,"title":{},"name":{},"text":{"28":{},"31":{},"70":{},"77":{},"78":{},"79":{},"80":{},"87":{},"88":{},"104":{},"107":{},"112":{}},"component":{}}],["intact",{"_index":2461,"title":{},"name":{},"text":{"38":{}},"component":{}}],["integ",{"_index":1787,"title":{},"name":{},"text":{"28":{},"79":{}},"component":{}}],["integr",{"_index":20,"title":{"25":{},"241-4":{},"256-4":{}},"name":{"25":{}},"text":{"1":{},"2":{},"7":{},"22":{},"23":{},"33":{},"52":{},"60":{},"61":{},"79":{},"137":{},"151":{},"162":{},"165":{},"241":{},"256":{},"271":{}},"component":{}}],["integrationtest",{"_index":3276,"title":{},"name":{},"text":{"60":{}},"component":{}}],["intellij",{"_index":7839,"title":{"277-15":{},"280-3":{}},"name":{},"text":{"277":{},"280":{}},"component":{}}],["intend",{"_index":961,"title":{"196-2":{},"224-2":{},"233-2":{}},"name":{},"text":{"7":{},"11":{},"15":{},"19":{},"21":{},"22":{},"24":{},"28":{},"29":{},"30":{},"31":{},"34":{},"38":{},"39":{},"41":{},"42":{},"55":{},"60":{},"61":{},"64":{},"67":{},"72":{},"137":{},"144":{},"196":{},"269":{},"278":{}},"component":{}}],["intent",{"_index":1389,"title":{},"name":{},"text":{"24":{},"27":{},"28":{},"31":{},"42":{},"60":{},"62":{},"76":{},"144":{},"169":{}},"component":{}}],["intention",{"_index":1754,"title":{},"name":{},"text":{"27":{},"62":{},"266":{},"269":{}},"component":{}}],["interact",{"_index":2756,"title":{},"name":{},"text":{"46":{},"63":{},"66":{},"68":{},"79":{},"80":{},"119":{},"200":{},"208":{},"209":{},"211":{},"254":{},"278":{}},"component":{}}],["intercept",{"_index":2627,"title":{"44":{}},"name":{"44":{}},"text":{"44":{},"93":{},"122":{},"147":{}},"component":{}}],["intercept(cardredeemedev",{"_index":2703,"title":{},"name":{},"text":{"44":{}},"component":{}}],["intercept(eventmessag",{"_index":2701,"title":{},"name":{},"text":{"44":{}},"component":{}}],["intercept(m",{"_index":5907,"title":{},"name":{},"text":{"122":{}},"component":{}}],["intercept(messag",{"_index":2699,"title":{},"name":{},"text":{"44":{}},"component":{}}],["intercept(mono",{"_index":5886,"title":{},"name":{},"text":{"122":{}},"component":{}}],["intercept(mono.just(message)).block",{"_index":5887,"title":{},"name":{},"text":{"122":{}},"component":{}}],["intercept(querymessag",{"_index":2705,"title":{},"name":{},"text":{"44":{}},"component":{}}],["intercept(redeemcardcommand",{"_index":2669,"title":{},"name":{},"text":{"44":{}},"component":{}}],["interceptor",{"_index":1951,"title":{"44-1":{},"44-2":{},"44-4":{},"44-6":{},"44-7":{},"44-8":{},"44-9":{},"44-10":{},"44-12":{},"49-2":{},"79-29":{},"122-14":{},"122-15":{},"122-16":{}},"name":{},"text":{"31":{},"41":{},"44":{},"52":{},"58":{},"60":{},"61":{},"79":{},"93":{},"122":{},"142":{},"147":{},"270":{}},"component":{}}],["interceptorchain",{"_index":2625,"title":{"44-17":{}},"name":{},"text":{"44":{},"45":{},"61":{}},"component":{}}],["interceptorchain#proce",{"_index":2692,"title":{},"name":{},"text":{"44":{}},"component":{}}],["interceptorchain.proce",{"_index":2664,"title":{},"name":{},"text":{"44":{}},"component":{}}],["interconnect",{"_index":434,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["interest",{"_index":1698,"title":{},"name":{},"text":{"27":{},"36":{},"42":{},"50":{},"56":{},"60":{},"61":{},"63":{},"80":{},"93":{},"104":{},"122":{},"151":{},"261":{},"266":{},"269":{},"278":{}},"component":{}}],["interfac",{"_index":821,"title":{"171":{},"146-7":{},"146-9":{}},"name":{"171":{}},"text":{"5":{},"24":{},"27":{},"29":{},"31":{},"33":{},"36":{},"38":{},"40":{},"42":{},"43":{},"44":{},"45":{},"49":{},"52":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"76":{},"79":{},"80":{},"88":{},"89":{},"93":{},"96":{},"117":{},"122":{},"137":{},"142":{},"144":{},"147":{},"149":{},"167":{},"171":{},"174":{},"198":{},"201":{},"205":{},"208":{},"209":{},"211":{},"224":{},"233":{},"251":{},"273":{},"277":{},"278":{}},"component":{}}],["intermedi",{"_index":2473,"title":{},"name":{},"text":{"38":{},"60":{},"61":{},"156":{}},"component":{}}],["intermediateeventrepresent",{"_index":2469,"title":{},"name":{},"text":{"38":{}},"component":{}}],["intermediateeventrepresentation#canconvertdatato(class",{"_index":2474,"title":{},"name":{},"text":{"38":{}},"component":{}}],["intermediaterepresent",{"_index":2504,"title":{},"name":{},"text":{"38":{}},"component":{}}],["intermediaterepresentation.gettype().equals(target_typ",{"_index":2505,"title":{},"name":{},"text":{"38":{}},"component":{}}],["intermediaterepresentation.upcastpayload",{"_index":2506,"title":{},"name":{},"text":{"38":{}},"component":{}}],["intermitt",{"_index":5249,"title":{},"name":{},"text":{"80":{}},"component":{}}],["intern",{"_index":962,"title":{"142-7":{}},"name":{},"text":{"7":{},"24":{},"27":{},"45":{},"52":{},"60":{},"61":{},"63":{},"71":{},"75":{},"80":{},"138":{},"141":{},"142":{},"147":{},"149":{},"156":{},"159":{},"162":{},"169":{},"171":{},"172":{},"180":{},"185":{},"196":{},"205":{},"212":{},"277":{},"278":{}},"component":{}}],["internal/raft/statu",{"_index":6047,"title":{},"name":{},"text":{"137":{}},"component":{}}],["internalhostnam",{"_index":6455,"title":{},"name":{},"text":{"148":{},"185":{}},"component":{}}],["internet",{"_index":7772,"title":{},"name":{},"text":{"274":{}},"component":{}}],["internod",{"_index":5986,"title":{},"name":{"129":{}},"text":{},"component":{}}],["interoper",{"_index":1366,"title":{},"name":{},"text":{"24":{},"111":{}},"component":{}}],["interpret",{"_index":2979,"title":{},"name":{},"text":{"52":{}},"component":{}}],["interrupt",{"_index":1745,"title":{},"name":{},"text":{"27":{},"31":{},"61":{},"142":{}},"component":{}}],["interruptedexcept",{"_index":1970,"title":{},"name":{},"text":{"31":{}},"component":{}}],["interv",{"_index":1944,"title":{"151-9":{},"203-41":{},"203-48":{},"203-49":{},"203-53":{},"203-54":{},"203-56":{}},"name":{},"text":{"31":{},"33":{},"68":{},"79":{},"80":{},"91":{},"108":{},"151":{},"172":{},"180":{},"203":{}},"component":{}}],["intervalretryschedul",{"_index":1943,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{}}],["intervent",{"_index":4843,"title":{},"name":{},"text":{"79":{}},"component":{}}],["intric",{"_index":819,"title":{},"name":{},"text":{"5":{}},"component":{}}],["intro",{"_index":4896,"title":{},"name":{},"text":{"79":{}},"component":{}}],["introduc",{"_index":1393,"title":{"260":{},"267":{},"197-1":{},"224-1":{},"233-1":{}},"name":{},"text":{"24":{},"26":{},"27":{},"38":{},"44":{},"60":{},"61":{},"77":{},"79":{},"80":{},"89":{},"106":{},"107":{},"108":{},"109":{},"112":{},"121":{},"139":{},"144":{},"156":{},"251":{},"262":{},"267":{},"268":{},"269":{},"270":{},"272":{},"274":{},"277":{},"278":{}},"component":{}}],["introduct",{"_index":1208,"title":{"22":{},"94":{},"119":{},"134":{},"261":{},"263":{},"279":{},"86-1":{},"90-1":{},"141-1":{},"151-1":{}},"name":{},"text":{"55":{},"60":{},"61":{},"79":{},"109":{},"114":{},"140":{},"185":{}},"component":{}}],["introspect",{"_index":3939,"title":{},"name":{},"text":{"61":{}},"component":{}}],["intrus",{"_index":1581,"title":{},"name":{},"text":{"25":{}},"component":{}}],["intuit",{"_index":6568,"title":{},"name":{},"text":{"156":{},"224":{},"233":{}},"component":{}}],["invalid",{"_index":2649,"title":{},"name":{},"text":{"44":{},"60":{},"61":{},"71":{},"142":{},"161":{},"172":{},"212":{}},"component":{}}],["invalu",{"_index":1189,"title":{},"name":{},"text":{"15":{},"21":{}},"component":{}}],["invert",{"_index":5815,"title":{},"name":{},"text":{"121":{}},"component":{}}],["investig",{"_index":2904,"title":{},"name":{},"text":{"51":{},"60":{}},"component":{}}],["invit",{"_index":7642,"title":{},"name":{},"text":{"258":{}},"component":{}}],["invite/remov",{"_index":7638,"title":{},"name":{},"text":{"258":{}},"component":{}}],["invoc",{"_index":1819,"title":{"52-47":{},"79-5":{}},"name":{},"text":{"28":{},"29":{},"31":{},"37":{},"38":{},"44":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"76":{},"77":{},"79":{},"122":{},"278":{}},"component":{}}],["invoic",{"_index":2160,"title":{},"name":{},"text":{"32":{},"33":{},"62":{},"68":{}},"component":{}}],["invoicecreatedev",{"_index":4593,"title":{},"name":{},"text":{"68":{}},"component":{}}],["invoiceid",{"_index":4351,"title":{},"name":{},"text":{"62":{}},"component":{}}],["invoicepaymentdeadlineexpiredev",{"_index":2223,"title":{},"name":{},"text":{"33":{}},"component":{}}],["invok",{"_index":716,"title":{"277-12":{},"277-13":{},"280-1":{}},"name":{"280":{}},"text":{"4":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"44":{},"45":{},"46":{},"52":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"70":{},"74":{},"78":{},"79":{},"80":{},"81":{},"91":{},"109":{},"126":{},"129":{},"144":{},"156":{},"254":{},"273":{},"277":{},"278":{},"280":{}},"component":{}}],["invokerinterceptor",{"_index":2061,"title":{},"name":{},"text":{"31":{}},"component":{}}],["invokerthreadcount",{"_index":2071,"title":{},"name":{},"text":{"31":{}},"component":{}}],["involv",{"_index":2150,"title":{},"name":{},"text":{"32":{},"71":{},"137":{},"139":{},"149":{},"151":{},"155":{},"156":{},"185":{},"217":{}},"component":{}}],["io",{"_index":6487,"title":{"151-13":{}},"name":{},"text":{"151":{}},"component":{}}],["io.axoniq",{"_index":6261,"title":{},"name":{},"text":{"143":{}},"component":{}}],["io.axoniq.axonserver.plugin.configur",{"_index":6434,"title":{},"name":{},"text":{"147":{}},"component":{}}],["io.axoniq.axonserver.plugin.configurationlisten",{"_index":6431,"title":{},"name":{},"text":{"147":{}},"component":{}}],["io.axoniq.axonserver.plugin.pluginpropertydefinit",{"_index":6435,"title":{},"name":{},"text":{"147":{}},"component":{}}],["io.axoniq.consol",{"_index":7752,"title":{},"name":{},"text":{"273":{}},"component":{}}],["io.axoniq.console:consol",{"_index":7750,"title":{},"name":{},"text":{"273":{}},"component":{}}],["io.axoniq.demo.bikerent",{"_index":7823,"title":{},"name":{},"text":{"276":{}},"component":{}}],["io.axoniq.demo.bikerental.coreapi",{"_index":7807,"title":{},"name":{},"text":{"276":{}},"component":{}}],["io.axoniq.demo.bikerental.coreapi.rent",{"_index":7849,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["io.axoniq.demo.bikerental.pay",{"_index":7703,"title":{},"name":{},"text":{"270":{}},"component":{}}],["io.axoniq.demo.bikerental.rent",{"_index":7808,"title":{},"name":{},"text":{"276":{}},"component":{}}],["io.axoniq.demo.bikerental.rental.command.biketest",{"_index":8046,"title":{},"name":{},"text":{"282":{}},"component":{}}],["io.axoniq.demo.bikerental.rental.ui",{"_index":7981,"title":{},"name":{},"text":{"278":{}},"component":{}}],["io.axoniq.demo.giftcard.api.cardissuedev",{"_index":7309,"title":{},"name":{},"text":{"199":{}},"component":{}}],["io.axoniq.demo.giftcard.api.cardredeemedev",{"_index":7331,"title":{},"name":{},"text":{"200":{}},"component":{}}],["io.axoniq.demo.giftcard.api.cardsummari",{"_index":7326,"title":{},"name":{},"text":{"200":{},"216":{}},"component":{}}],["io.axoniq.demo.giftcard.api.fetchcardsummariesqueri",{"_index":7299,"title":{},"name":{},"text":{"199":{},"200":{},"216":{}},"component":{}}],["io.axoniq.demo.giftcard.api.issuecardcommand",{"_index":7282,"title":{},"name":{},"text":{"199":{},"200":{},"213":{}},"component":{}}],["io.dropwizard.metr",{"_index":2831,"title":{},"name":{},"text":{"50":{}},"component":{}}],["io.opentracing.contrib",{"_index":6003,"title":{},"name":{},"text":{"131":{}},"component":{}}],["io.spring.depend",{"_index":1312,"title":{},"name":{},"text":{"23":{}},"component":{}}],["io.spring.gradle:depend",{"_index":1310,"title":{},"name":{},"text":{"23":{}},"component":{}}],["iop",{"_index":7255,"title":{},"name":{},"text":{"196":{}},"component":{}}],["ip",{"_index":5463,"title":{},"name":{},"text":{"101":{},"102":{},"142":{}},"component":{}}],["irrelev",{"_index":5128,"title":{},"name":{},"text":{"80":{},"137":{}},"component":{}}],["irrevers",{"_index":1872,"title":{},"name":{},"text":{"29":{}},"component":{}}],["isavail",{"_index":7967,"title":{},"name":{},"text":{"278":{}},"component":{}}],["iscaughtup",{"_index":2886,"title":{},"name":{},"text":{"51":{}},"component":{}}],["iserrorst",{"_index":2889,"title":{},"name":{},"text":{"51":{}},"component":{}}],["isexcept",{"_index":2788,"title":{},"name":{},"text":{"46":{}},"component":{}}],["isliv",{"_index":4766,"title":{},"name":{},"text":{"75":{}},"component":{}}],["ismerg",{"_index":2888,"title":{},"name":{},"text":{"51":{}},"component":{}}],["isn’t",{"_index":1109,"title":{},"name":{},"text":{"9":{},"27":{},"35":{},"43":{},"61":{},"79":{},"80":{},"84":{},"96":{},"124":{},"212":{},"223":{}},"component":{}}],["iso",{"_index":5428,"title":{},"name":{},"text":{"97":{},"212":{}},"component":{}}],["isol",{"_index":2458,"title":{},"name":{},"text":{"38":{},"79":{},"140":{}},"component":{}}],["isreplay",{"_index":2887,"title":{},"name":{},"text":{"51":{},"61":{}},"component":{}}],["issu",{"_index":710,"title":{"269":{},"212-4":{},"212-8":{},"212-12":{},"212-16":{},"212-20":{}},"name":{"269":{}},"text":{"4":{},"23":{},"31":{},"35":{},"56":{},"60":{},"61":{},"63":{},"65":{},"73":{},"80":{},"126":{},"135":{},"137":{},"138":{},"142":{},"144":{},"148":{},"166":{},"169":{},"176":{},"180":{},"199":{},"200":{},"212":{},"239":{},"240":{},"243":{},"255":{},"260":{},"263":{},"265":{},"267":{},"269":{},"271":{}},"component":{}}],["issuecardcommand",{"_index":1733,"title":{},"name":{},"text":{"27":{},"28":{},"44":{},"75":{},"78":{},"109":{},"199":{}},"component":{}}],["issuecardcommand(cardid",{"_index":1676,"title":{},"name":{},"text":{"27":{}},"component":{}}],["issuecardcommand(str",{"_index":1788,"title":{},"name":{},"text":{"28":{}},"component":{}}],["issuecardcommand(uuid.randomuuid().tostr",{"_index":1735,"title":{},"name":{},"text":{"27":{}},"component":{}}],["issuecardcommand.class",{"_index":2714,"title":{},"name":{},"text":{"44":{}},"component":{}}],["issuecmd(\"gc1",{"_index":3094,"title":{},"name":{},"text":{"56":{}},"component":{}}],["issueexpiringcardcommand(card_id",{"_index":5309,"title":{},"name":{},"text":{"83":{},"87":{}},"component":{}}],["isunencrypted(eventwithtoken.getev",{"_index":6338,"title":{},"name":{},"text":{"144":{}},"component":{}}],["it'",{"_index":4964,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["it'll",{"_index":1152,"title":{},"name":{},"text":{"13":{}},"component":{}}],["item",{"_index":3008,"title":{},"name":{},"text":{"52":{},"56":{},"60":{},"71":{},"140":{},"214":{},"247":{},"253":{},"255":{},"258":{},"277":{}},"component":{}}],["itemoutofstockev",{"_index":4647,"title":{},"name":{},"text":{"71":{}},"component":{}}],["iter",{"_index":2516,"title":{},"name":{},"text":{"38":{},"57":{},"77":{},"79":{},"277":{}},"component":{}}],["itself",{"_index":1760,"title":{},"name":{},"text":{"27":{},"28":{},"29":{},"31":{},"35":{},"36":{},"38":{},"42":{},"46":{},"49":{},"52":{},"61":{},"73":{},"79":{},"80":{},"81":{},"104":{},"108":{},"123":{},"129":{},"134":{},"137":{},"140":{},"141":{},"143":{},"144":{},"160":{},"170":{},"171":{},"176":{},"185":{},"196":{},"201":{},"223":{},"226":{},"231":{},"235":{},"245":{},"255":{},"256":{},"277":{}},"component":{}}],["it’",{"_index":834,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"11":{},"28":{},"32":{},"33":{},"35":{},"36":{},"52":{},"56":{},"60":{},"61":{},"75":{},"78":{},"79":{},"80":{},"83":{},"84":{},"85":{},"88":{},"89":{},"90":{},"91":{},"105":{},"116":{},"123":{},"124":{},"140":{},"144":{},"151":{},"156":{},"169":{},"170":{},"171":{},"180":{},"197":{},"198":{},"203":{},"205":{},"207":{},"214":{},"216":{},"218":{},"243":{},"254":{},"255":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["it’ll",{"_index":1165,"title":{},"name":{},"text":{"13":{},"144":{}},"component":{}}],["i’m",{"_index":6372,"title":{},"name":{},"text":{"144":{}},"component":{}}],["j",{"_index":3676,"title":{},"name":{},"text":{"60":{},"163":{},"165":{}},"component":{}}],["jackson",{"_index":1347,"title":{"38-5":{}},"name":{},"text":{"24":{},"35":{},"60":{}},"component":{}}],["jacksonseri",{"_index":1328,"title":{"24-12":{}},"name":{},"text":{"24":{},"35":{},"60":{},"61":{},"63":{},"65":{},"154":{}},"component":{}}],["jacksonserializer.build",{"_index":1483,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jacksonserializer.builder#defaulttyp",{"_index":1495,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jacksonserializer.builder().build",{"_index":2381,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jacksonserializer.defaultseri",{"_index":1413,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jacksonserializer’",{"_index":1494,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jackson’",{"_index":1350,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jacoco",{"_index":3839,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jaeger",{"_index":2962,"title":{},"name":{},"text":{"52":{},"131":{},"179":{}},"component":{}}],["jakarta",{"_index":1587,"title":{"26-5":{},"26-9":{}},"name":{},"text":{"26":{},"35":{},"60":{}},"component":{}}],["jakarta.persist",{"_index":1529,"title":{},"name":{},"text":{"25":{},"35":{}},"component":{}}],["jakarta.persistence.cascadetyp",{"_index":4815,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jakarta.persistence.ent",{"_index":4816,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jakarta.persistence.fetchtyp",{"_index":4817,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jakarta.persistence.id",{"_index":4818,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jakarta.persistence.joincolumn",{"_index":4819,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jakarta.persistence.onetomani",{"_index":4820,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jakarta/javax",{"_index":3971,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jangalinski",{"_index":3688,"title":{},"name":{},"text":{"60":{}},"component":{}}],["jar",{"_index":165,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"38":{},"139":{},"146":{},"147":{},"154":{},"161":{},"162":{},"163":{},"165":{},"167":{},"171":{},"172":{},"184":{},"185":{},"198":{},"205":{},"212":{}},"component":{}}],["jasperfect",{"_index":4154,"title":{},"name":{},"text":{"61":{}},"component":{}}],["java",{"_index":98,"title":{"80-6":{},"80-9":{},"80-14":{},"80-17":{},"81-5":{},"81-11":{}},"name":{},"text":{"2":{},"3":{},"5":{},"13":{},"23":{},"24":{},"31":{},"33":{},"35":{},"38":{},"40":{},"50":{},"52":{},"56":{},"60":{},"61":{},"75":{},"77":{},"80":{},"81":{},"92":{},"111":{},"121":{},"124":{},"137":{},"139":{},"143":{},"144":{},"146":{},"147":{},"161":{},"162":{},"167":{},"169":{},"171":{},"172":{},"178":{},"184":{},"197":{},"198":{},"205":{},"234":{},"255":{},"260":{},"264":{},"273":{},"275":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["java.concurr",{"_index":1716,"title":{},"name":{},"text":{"27":{}},"component":{}}],["java.lang",{"_index":4121,"title":{},"name":{},"text":{"61":{}},"component":{}}],["java.lang.long",{"_index":2747,"title":{},"name":{},"text":{"45":{}},"component":{}}],["java.lang.object",{"_index":7501,"title":{},"name":{},"text":{"212":{}},"component":{}}],["java.lang.str",{"_index":2751,"title":{},"name":{},"text":{"45":{},"56":{}},"component":{}}],["java.time.inst",{"_index":2745,"title":{},"name":{},"text":{"45":{}},"component":{}}],["java.time.temporal.tempor",{"_index":2746,"title":{},"name":{},"text":{"45":{}},"component":{}}],["java.util.arraylist",{"_index":7297,"title":{},"name":{},"text":{"199":{}},"component":{}}],["java.util.arrays.aslist",{"_index":6437,"title":{},"name":{},"text":{"147":{}},"component":{}}],["java.util.collections.singletonmap",{"_index":2545,"title":{},"name":{},"text":{"40":{}},"component":{}}],["java.util.concurrent.completablefutur",{"_index":5683,"title":{},"name":{},"text":{"112":{}},"component":{}}],["java.util.concurrent.executor",{"_index":2243,"title":{},"name":{},"text":{"33":{}},"component":{}}],["java.util.map",{"_index":6436,"title":{},"name":{},"text":{"147":{}},"component":{}}],["java.util.uuid",{"_index":5375,"title":{},"name":{},"text":{"92":{}},"component":{}}],["javadoc",{"_index":1465,"title":{},"name":{},"text":{"24":{},"31":{},"56":{},"60":{},"61":{}},"component":{}}],["javax",{"_index":1586,"title":{"26-1":{},"26-5":{}},"name":{},"text":{"26":{},"35":{},"60":{},"61":{}},"component":{}}],["javax.annot",{"_index":1644,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.cach",{"_index":1645,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.persist",{"_index":1531,"title":{},"name":{},"text":{"25":{},"35":{}},"component":{}}],["java’",{"_index":1388,"title":{},"name":{},"text":{"24":{},"85":{},"92":{},"96":{}},"component":{}}],["jcach",{"_index":4702,"title":{},"name":{},"text":{"71":{}},"component":{}}],["jcacheadapt",{"_index":3323,"title":{},"name":{},"text":{"60":{},"71":{}},"component":{}}],["jcenter",{"_index":1309,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jchannel",{"_index":5462,"title":{},"name":{},"text":{"101":{}},"component":{}}],["jchannel(\"path/to/channel/config.xml",{"_index":5471,"title":{},"name":{},"text":{"101":{}},"component":{}}],["jdbc",{"_index":2278,"title":{},"name":{},"text":{"35":{},"60":{},"61":{},"63":{},"65":{},"79":{},"80":{},"89":{},"105":{},"114":{},"125":{},"154":{}},"component":{}}],["jdbcautoconfigur",{"_index":2343,"title":{},"name":{},"text":{"35":{},"61":{}},"component":{}}],["jdbceve",{"_index":3310,"title":{},"name":{},"text":{"60":{}},"component":{}}],["jdbceventstorageengin",{"_index":2266,"title":{"35-10":{}},"name":{},"text":{"35":{},"60":{},"61":{}},"component":{}}],["jdbceventstorageengine.build",{"_index":2336,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jdbceventstorageenginestat",{"_index":2351,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jdbcsagarepositori",{"_index":4399,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["jdbcsagastor",{"_index":4359,"title":{"63-8":{},"65-6":{}},"name":{},"text":{"63":{},"65":{}},"component":{}}],["jdbcsagastore#createschema",{"_index":4436,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jdbcsagastore.build",{"_index":4430,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["jdbcsequenceddeadletterqueu",{"_index":4893,"title":{},"name":{},"text":{"79":{}},"component":{}}],["jdbctokenstor",{"_index":3661,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["jdbctokenstore#createschema(tokentablefactori",{"_index":5097,"title":{},"name":{},"text":{"80":{}},"component":{}}],["jdbctokenstore.build",{"_index":5106,"title":{},"name":{},"text":{"80":{}},"component":{}}],["jdk",{"_index":1379,"title":{},"name":{},"text":{"24":{},"137":{}},"component":{}}],["jdk16",{"_index":3417,"title":{},"name":{},"text":{"60":{}},"component":{}}],["jdk17",{"_index":3387,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["jdk21",{"_index":3256,"title":{},"name":{},"text":{"60":{}},"component":{}}],["jgroup",{"_index":17,"title":{"101":{},"23-19":{},"23-20":{}},"name":{},"text":{"1":{},"23":{},"31":{},"101":{},"102":{}},"component":{"101":{},"102":{}}}],["jgroupsconnector",{"_index":5460,"title":{},"name":{},"text":{"101":{}},"component":{}}],["jgroupsconnector.build",{"_index":5473,"title":{},"name":{},"text":{"101":{}},"component":{}}],["jgroupsconnectorfactorybean",{"_index":5484,"title":{},"name":{},"text":{"102":{}},"component":{}}],["jk",{"_index":7422,"title":{},"name":{},"text":{"203":{}},"component":{}}],["job",{"_index":1772,"title":{},"name":{},"text":{"28":{},"33":{},"60":{},"61":{},"103":{},"104":{}},"component":{}}],["jobrunr",{"_index":23,"title":{"103":{},"23-21":{},"23-22":{},"33-3":{}},"name":{},"text":{"1":{},"23":{},"32":{},"33":{},"60":{},"103":{}},"component":{"103":{}}}],["jobrunrdeadlinemanag",{"_index":2144,"title":{},"name":{},"text":{"32":{},"60":{},"84":{}},"component":{}}],["jobrunrdeadlinemanager.build",{"_index":2205,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jobrunreventschedul",{"_index":2245,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jobrunreventscheduler.build",{"_index":2263,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jobrunrpro",{"_index":1278,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jobrunrprodeadlinemanag",{"_index":5505,"title":{},"name":{},"text":{"103":{}},"component":{}}],["jobrunrprodeadlinemanager.probuild",{"_index":5506,"title":{},"name":{},"text":{"103":{}},"component":{}}],["jobschedul",{"_index":2202,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["jobscheduler(jobschedul",{"_index":2206,"title":{},"name":{},"text":{"32":{},"33":{},"103":{}},"component":{}}],["join",{"_index":5469,"title":{},"name":{},"text":{"101":{},"112":{},"141":{},"142":{},"172":{},"185":{},"232":{}},"component":{}}],["joincolumn(nam",{"_index":4825,"title":{},"name":{},"text":{"78":{}},"component":{}}],["jose",{"_index":6759,"title":{},"name":{},"text":{"165":{}},"component":{}}],["journey",{"_index":2918,"title":{},"name":{},"text":{"52":{}},"component":{}}],["jpa",{"_index":1518,"title":{"25-2":{}},"name":{},"text":{"25":{},"29":{},"35":{},"60":{},"61":{},"63":{},"65":{},"78":{},"79":{},"80":{},"89":{},"97":{},"105":{},"114":{},"117":{},"119":{},"125":{},"277":{}},"component":{}}],["jpa/jdbc",{"_index":3604,"title":{},"name":{},"text":{"60":{}},"component":{}}],["jpaautoconfigur",{"_index":3854,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jpadlq",{"_index":3987,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jpaeventstorageconfigurer(entitymanagerprovid",{"_index":2314,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jpaeventstorageengin",{"_index":2265,"title":{"35-7":{}},"name":{},"text":{"35":{},"60":{},"61":{},"97":{}},"component":{}}],["jpaeventstorageengine#asdomaineventmessage(eventmessag",{"_index":3555,"title":{},"name":{},"text":{"60":{}},"component":{}}],["jpaeventstorageengine.build",{"_index":2323,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jpaeventstoreautoconfigur",{"_index":3878,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jpaqueri",{"_index":3072,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jpaquery.setfirstresult(query.getoffset",{"_index":3077,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jpaquery.setmaxresults(query.getlimit",{"_index":3078,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jpaquery.setparameter(\"idstartswith",{"_index":3075,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jparepositori",{"_index":7835,"title":{"277-3":{}},"name":{},"text":{"277":{}},"component":{}}],["jpasagastor",{"_index":4051,"title":{"63-7":{},"65-5":{}},"name":{},"text":{"61":{},"63":{},"65":{}},"component":{}}],["jpasagastore.build",{"_index":4425,"title":{},"name":{},"text":{"63":{}},"component":{}}],["jpasequenceddeadletterqueu",{"_index":4891,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["jpasequenceddeadletterqueue.build",{"_index":4901,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["jpatokenstor",{"_index":2298,"title":{},"name":{},"text":{"35":{},"80":{}},"component":{}}],["jpatokenstore.build",{"_index":5104,"title":{},"name":{},"text":{"80":{}},"component":{}}],["jpa’",{"_index":2308,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jq",{"_index":6577,"title":{},"name":{},"text":{"159":{},"162":{},"166":{}},"component":{}}],["json",{"_index":1348,"title":{"183-1":{}},"name":{},"text":{"24":{},"35":{},"81":{},"96":{},"140":{},"146":{},"148":{},"171":{},"183":{},"192":{},"200":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"280":{}},"component":{}}],["json'",{"_index":1410,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jsoncommandhandl",{"_index":5415,"title":{},"name":{},"text":{"96":{}},"component":{}}],["jsonnod",{"_index":1516,"title":{},"name":{},"text":{"24":{},"60":{},"96":{}},"component":{}}],["jsonnode.class",{"_index":5414,"title":{},"name":{},"text":{"96":{}},"component":{}}],["jsonnode::class",{"_index":5668,"title":{},"name":{},"text":{"110":{}},"component":{}}],["jsonpath",{"_index":5290,"title":{},"name":{},"text":{"81":{},"192":{}},"component":{}}],["jsonpath(data",{"_index":7202,"title":{},"name":{},"text":{"192":{}},"component":{}}],["jsontypeinfo",{"_index":1487,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jsr",{"_index":2643,"title":{},"name":{},"text":{"44":{}},"component":{}}],["jubrunreventschedul",{"_index":2226,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jump",{"_index":7669,"title":{},"name":{},"text":{"263":{},"267":{},"277":{},"278":{}},"component":{}}],["jump_skip_index",{"_index":6391,"title":{},"name":{},"text":{"146":{},"159":{},"162":{},"172":{}},"component":{}}],["junit",{"_index":3499,"title":{},"name":{},"text":{"60":{},"66":{}},"component":{}}],["junkdog",{"_index":4204,"title":{},"name":{},"text":{"61":{}},"component":{}}],["justif",{"_index":6296,"title":{"144-1":{}},"name":{},"text":{},"component":{}}],["jvm",{"_index":1992,"title":{},"name":{},"text":{"31":{},"33":{},"35":{},"61":{},"63":{},"65":{},"69":{},"71":{},"75":{},"79":{},"80":{},"101":{},"111":{},"129":{},"172":{},"176":{},"203":{},"205":{},"255":{}},"component":{}}],["jvm’",{"_index":2086,"title":{},"name":{},"text":{"31":{},"54":{},"60":{},"80":{}},"component":{}}],["jwt",{"_index":6760,"title":{},"name":{},"text":{"165":{}},"component":{}}],["k",{"_index":5567,"title":{},"name":{},"text":{"106":{}},"component":{}}],["k8",{"_index":224,"title":{},"name":{"3":{}},"text":{"3":{},"152":{},"184":{}},"component":{}}],["k8s/4",{"_index":541,"title":{},"name":{},"text":{"3":{}},"component":{}}],["kad",{"_index":4254,"title":{},"name":{},"text":{"61":{}},"component":{}}],["kafka",{"_index":27,"title":{"104":{},"105":{},"107":{},"23-23":{},"23-24":{},"107-1":{}},"name":{},"text":{"1":{},"2":{},"23":{},"35":{},"80":{},"81":{},"104":{},"105":{},"106":{},"107":{},"108":{}},"component":{"104":{},"105":{},"106":{},"107":{},"108":{}}}],["kafkaeventconsumptionconfigur",{"_index":5512,"title":{},"name":{},"text":{"104":{}},"component":{}}],["kafkaeventpublicationconfigur",{"_index":5592,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkaeventpublish",{"_index":5586,"title":{"108-6":{}},"name":{},"text":{"107":{}},"component":{}}],["kafkaeventpublisher#default_processing_group",{"_index":5611,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkaeventpublisher(kafkapublish",{"_index":5612,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkaeventpublisher.build",{"_index":5613,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkaeventpublisher.default_processing_group",{"_index":5616,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkamessageconversationconfigur",{"_index":5574,"title":{},"name":{},"text":{"106":{}},"component":{}}],["kafkamessageconvert",{"_index":5537,"title":{},"name":{},"text":{"104":{},"106":{},"107":{}},"component":{}}],["kafkamessageconverter(seri",{"_index":5575,"title":{},"name":{},"text":{"106":{}},"component":{}}],["kafkamessagesourceconfigur",{"_index":5533,"title":{},"name":{},"text":{"104":{}},"component":{}}],["kafkamessagesourceconfigurer(configur",{"_index":5534,"title":{},"name":{},"text":{"104":{}},"component":{}}],["kafkamessagesourceconfigurer.registersubscribablesource(configur",{"_index":5548,"title":{},"name":{},"text":{"104":{}},"component":{}}],["kafkaproperti",{"_index":5638,"title":{},"name":{},"text":{"108":{}},"component":{}}],["kafkapublish",{"_index":5584,"title":{"108-5":{}},"name":{},"text":{"107":{},"108":{}},"component":{}}],["kafkapublisher(kafkapublish",{"_index":5614,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkapublisher(str",{"_index":5603,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkapublisher.build",{"_index":5605,"title":{},"name":{},"text":{"107":{}},"component":{}}],["kafkatokenstor",{"_index":5563,"title":{},"name":{},"text":{"104":{}},"component":{}}],["kafkatrackingtoken",{"_index":5561,"title":{},"name":{},"text":{"104":{}},"component":{}}],["kafka’",{"_index":5524,"title":{},"name":{},"text":{"104":{},"105":{}},"component":{}}],["kebab",{"_index":6836,"title":{},"name":{},"text":{"172":{}},"component":{}}],["keep",{"_index":352,"title":{},"name":{},"text":{"3":{},"35":{},"38":{},"50":{},"61":{},"71":{},"74":{},"79":{},"80":{},"89":{},"90":{},"101":{},"116":{},"122":{},"137":{},"140":{},"146":{},"147":{},"149":{},"151":{},"171":{},"172":{},"184":{},"185":{},"208":{},"223":{},"255":{},"260":{},"267":{},"272":{},"273":{},"276":{},"277":{},"278":{}},"component":{}}],["kept",{"_index":1857,"title":{},"name":{},"text":{"29":{},"51":{},"61":{},"80":{},"146":{},"151":{},"277":{}},"component":{}}],["key",{"_index":1420,"title":{"137-10":{},"203-24":{}},"name":{},"text":{"24":{},"28":{},"31":{},"35":{},"40":{},"43":{},"45":{},"51":{},"52":{},"57":{},"62":{},"63":{},"73":{},"77":{},"80":{},"93":{},"96":{},"106":{},"108":{},"117":{},"122":{},"137":{},"150":{},"169":{},"172":{},"201":{},"203":{},"208":{},"209":{},"211":{},"212":{},"213":{},"281":{}},"component":{}}],["key/valu",{"_index":6847,"title":{},"name":{},"text":{"172":{},"208":{},"209":{},"211":{}},"component":{}}],["keyboard",{"_index":7956,"title":{},"name":{},"text":{"278":{}},"component":{}}],["keycloak",{"_index":6742,"title":{"165-4":{}},"name":{},"text":{"165":{}},"component":{}}],["keynam",{"_index":4378,"title":{},"name":{},"text":{"63":{}},"component":{}}],["keyname=\"orderid",{"_index":4380,"title":{},"name":{},"text":{"63":{}},"component":{}}],["keystor",{"_index":6808,"title":{},"name":{},"text":{"169":{},"172":{}},"component":{}}],["keyword",{"_index":4385,"title":{},"name":{},"text":{"63":{}},"component":{}}],["kick",{"_index":6570,"title":{},"name":{},"text":{"156":{}},"component":{}}],["kind",{"_index":608,"title":{},"name":{},"text":{"3":{},"7":{},"107":{},"184":{},"261":{},"273":{}},"component":{}}],["know",{"_index":947,"title":{},"name":{},"text":{"7":{},"25":{},"28":{},"31":{},"35":{},"38":{},"42":{},"46":{},"56":{},"61":{},"62":{},"75":{},"78":{},"79":{},"80":{},"91":{},"117":{},"124":{},"162":{},"180":{},"218":{},"269":{},"270":{},"273":{},"277":{},"278":{},"282":{}},"component":{}}],["knowledg",{"_index":1119,"title":{"10":{}},"name":{},"text":{"73":{},"104":{},"266":{}},"component":{}}],["known",{"_index":1448,"title":{"212-4":{},"212-8":{},"212-12":{},"212-16":{},"212-20":{}},"name":{},"text":{"24":{},"36":{},"41":{},"44":{},"75":{},"83":{},"123":{},"126":{},"140":{},"160":{},"161":{},"165":{},"167":{},"173":{},"185":{},"203":{},"242":{},"277":{},"278":{}},"component":{}}],["kotlin",{"_index":30,"title":{"111":{},"23-25":{},"23-26":{}},"name":{},"text":{"1":{},"23":{},"60":{},"111":{},"278":{}},"component":{"109":{},"110":{},"111":{},"112":{}}}],["kotlin’",{"_index":5670,"title":{},"name":{},"text":{"110":{},"112":{}},"component":{}}],["krosenvold",{"_index":3671,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["kubectl",{"_index":587,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["kubernet",{"_index":218,"title":{"3":{},"3-11":{},"184-4":{}},"name":{},"text":{"3":{},"184":{}},"component":{}}],["kubernetes.io/ingress.class",{"_index":669,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["kudo",{"_index":4146,"title":{},"name":{},"text":{"61":{}},"component":{}}],["l.diagnostics().and(\"retri",{"_index":4970,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["label",{"_index":610,"title":{},"name":{},"text":{"3":{},"52":{},"103":{},"150":{},"184":{},"270":{}},"component":{}}],["lachja",{"_index":3284,"title":{},"name":{},"text":{"60":{}},"component":{}}],["lacinoir",{"_index":3687,"title":{},"name":{},"text":{"60":{}},"component":{}}],["lack",{"_index":2641,"title":{},"name":{},"text":{"44":{},"80":{},"245":{}},"component":{}}],["lambda",{"_index":3639,"title":{},"name":{},"text":{"60":{},"79":{},"112":{},"117":{},"144":{}},"component":{}}],["landscap",{"_index":2092,"title":{},"name":{},"text":{"31":{},"41":{},"70":{}},"component":{}}],["lang3",{"_index":6747,"title":{},"name":{},"text":{"165":{}},"component":{}}],["languag",{"_index":105,"title":{},"name":{},"text":{"2":{},"10":{},"13":{},"18":{},"19":{},"35":{},"111":{},"191":{},"197":{},"199":{},"207":{}},"component":{"190":{},"191":{},"192":{},"193":{},"194":{},"195":{}}}],["larg",{"_index":81,"title":{"2-4":{}},"name":{},"text":{"2":{},"35":{},"52":{},"56":{},"60":{},"61":{},"71":{},"77":{},"80":{},"90":{},"91":{},"137":{},"138":{},"139":{},"142":{},"144":{},"151":{},"270":{}},"component":{}}],["larger",{"_index":2376,"title":{},"name":{},"text":{"35":{},"37":{},"71":{},"139":{},"140":{},"144":{},"147":{}},"component":{}}],["largest",{"_index":5211,"title":{},"name":{},"text":{"80":{},"173":{},"270":{}},"component":{}}],["last",{"_index":355,"title":{},"name":{},"text":{"3":{},"29":{},"31":{},"36":{},"61":{},"66":{},"71":{},"79":{},"80":{},"91":{},"97":{},"135":{},"140":{},"142":{},"143":{},"144":{},"146":{},"151":{},"177":{},"184":{},"191":{},"192":{},"195":{},"209":{},"212":{},"229":{},"236":{},"244":{},"245":{},"255":{},"270":{},"271":{},"276":{},"277":{},"278":{},"280":{}},"component":{}}],["lastli",{"_index":1704,"title":{},"name":{},"text":{"27":{},"31":{},"60":{},"61":{},"75":{},"80":{},"96":{},"106":{},"107":{},"149":{}},"component":{}}],["lastsegmentbackedup",{"_index":6150,"title":{},"name":{},"text":{"140":{}},"component":{}}],["lasttoken",{"_index":6346,"title":{},"name":{},"text":{"144":{}},"component":{}}],["lasttouch",{"_index":4955,"title":{},"name":{},"text":{"79":{}},"component":{}}],["late",{"_index":2249,"title":{},"name":{},"text":{"33":{}},"component":{}}],["latenc",{"_index":859,"title":{},"name":{},"text":{"5":{},"31":{},"50":{},"51":{},"139":{},"156":{},"243":{},"254":{},"255":{},"256":{},"270":{},"271":{}},"component":{}}],["later",{"_index":2273,"title":{},"name":{},"text":{"35":{},"38":{},"52":{},"70":{},"80":{},"103":{},"104":{},"147":{},"208":{},"235":{},"241":{},"270":{},"275":{},"276":{},"277":{},"278":{}},"component":{}}],["latest",{"_index":205,"title":{},"name":{},"text":{"2":{},"23":{},"61":{},"71":{},"78":{},"80":{},"137":{},"138":{},"144":{},"146":{},"151":{},"254":{},"270":{},"277":{},"281":{}},"component":{}}],["latter",{"_index":1957,"title":{},"name":{},"text":{"31":{},"35":{},"42":{},"60":{},"63":{},"65":{},"70":{},"77":{},"128":{},"158":{}},"component":{}}],["launch",{"_index":174,"title":{},"name":{},"text":{"2":{},"229":{},"270":{},"273":{},"274":{}},"component":{}}],["layer",{"_index":1930,"title":{},"name":{},"text":{"31":{},"35":{},"57":{},"58":{},"79":{},"84":{},"169":{},"185":{},"205":{},"277":{},"278":{}},"component":{}}],["layout",{"_index":786,"title":{},"name":{},"text":{"5":{},"178":{}},"component":{}}],["lazi",{"_index":3129,"title":{},"name":{},"text":{"56":{},"61":{},"151":{}},"component":{}}],["lazili",{"_index":3649,"title":{},"name":{},"text":{"60":{}},"component":{}}],["ldap",{"_index":156,"title":{"163":{},"163-1":{},"163-2":{},"163-4":{},"163-5":{}},"name":{"163":{}},"text":{"2":{},"3":{},"4":{},"138":{},"163":{},"167":{},"168":{},"184":{}},"component":{}}],["ldaps://ldap",{"_index":6632,"title":{},"name":{},"text":{"163":{}},"component":{}}],["lead",{"_index":1360,"title":{},"name":{},"text":{"24":{},"60":{},"63":{},"70":{},"77":{},"79":{},"106":{},"124":{},"126":{},"138":{},"208":{},"237":{},"254":{}},"component":{}}],["leader",{"_index":6098,"title":{},"name":{},"text":{"138":{},"139":{},"142":{},"146":{},"149":{},"151":{},"159":{},"162":{},"170":{},"172":{},"176":{},"185":{}},"component":{}}],["leak",{"_index":3118,"title":{},"name":{},"text":{"56":{},"61":{},"255":{}},"component":{}}],["learn",{"_index":903,"title":{},"name":{},"text":{"7":{},"15":{},"21":{},"199":{},"234":{},"238":{},"270":{},"274":{},"276":{},"277":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["leav",{"_index":5470,"title":{},"name":{},"text":{"101":{},"107":{},"137":{},"139":{},"146":{},"151":{},"161":{},"167":{},"171":{},"172":{},"199":{},"278":{},"280":{}},"component":{}}],["led",{"_index":4922,"title":{},"name":{},"text":{"79":{}},"component":{}}],["left",{"_index":2344,"title":{},"name":{},"text":{"35":{},"63":{},"66":{},"79":{},"80":{},"85":{},"192":{},"198":{},"229":{},"241":{},"242":{},"243":{},"254":{},"277":{},"280":{}},"component":{}}],["legaci",{"_index":1225,"title":{"23-13":{}},"name":{},"text":{"23":{},"60":{},"61":{}},"component":{}}],["legacyjpa",{"_index":1532,"title":{},"name":{},"text":{"25":{},"35":{}},"component":{}}],["legal",{"_index":879,"title":{},"name":{},"text":{"5":{}},"component":{}}],["length",{"_index":5424,"title":{},"name":{},"text":{"97":{},"138":{},"192":{},"277":{},"280":{}},"component":{}}],["lenient",{"_index":1326,"title":{"24-10":{}},"name":{},"text":{"24":{},"60":{},"80":{}},"component":{}}],["lenientdeseri",{"_index":1482,"title":{},"name":{},"text":{"24":{}},"component":{}}],["less",{"_index":2054,"title":{},"name":{},"text":{"31":{},"60":{},"61":{},"137":{},"139":{},"151":{},"172":{},"194":{},"208":{},"241":{}},"component":{}}],["lesson",{"_index":911,"title":{},"name":{},"text":{"7":{}},"component":{}}],["let",{"_index":687,"title":{},"name":{},"text":{"3":{},"33":{},"184":{}},"component":{}}],["letter",{"_index":864,"title":{"89":{},"90":{},"91":{},"113":{},"251":{},"79-11":{},"79-12":{},"79-13":{},"79-16":{},"79-19":{},"79-20":{},"79-21":{},"79-22":{},"79-23":{},"79-24":{},"89-1":{},"89-2":{},"114-4":{},"117-8":{}},"name":{},"text":{"5":{},"45":{},"60":{},"61":{},"79":{},"88":{},"89":{},"90":{},"91":{},"113":{},"114":{},"117":{},"146":{},"171":{},"247":{},"251":{},"253":{},"258":{},"273":{}},"component":{}}],["letter.diagnostics().getordefault(\"retri",{"_index":4967,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["letter.enqueuedat().isafter(instant.now().plus(duration.ofminutes(5l",{"_index":5344,"title":{},"name":{},"text":{"88":{}},"component":{}}],["letter.message().getpayload",{"_index":4968,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["letterprocessor",{"_index":4938,"title":{},"name":{},"text":{"79":{}},"component":{}}],["letterprocessor.process",{"_index":4931,"title":{},"name":{},"text":{"79":{}},"component":{}}],["letterprocessor.process(deadlett",{"_index":4950,"title":{},"name":{},"text":{"79":{}},"component":{}}],["let’",{"_index":77,"title":{"2-4":{}},"name":{},"text":{"8":{},"44":{},"56":{},"74":{},"77":{},"83":{},"144":{},"151":{},"261":{},"265":{},"270":{},"271":{},"273":{},"277":{},"278":{},"282":{}},"component":{}}],["level",{"_index":1104,"title":{"207":{}},"name":{},"text":{"9":{},"10":{},"35":{},"37":{},"44":{},"57":{},"60":{},"61":{},"63":{},"79":{},"80":{},"107":{},"108":{},"137":{},"138":{},"147":{},"151":{},"160":{},"161":{},"165":{},"167":{},"172":{},"176":{},"180":{},"241":{},"256":{},"270":{},"278":{}},"component":{}}],["leverag",{"_index":1289,"title":{},"name":{},"text":{"23":{},"27":{},"28":{},"49":{},"60":{},"77":{},"89":{},"103":{},"151":{},"224":{},"233":{}},"component":{}}],["lfgcampo",{"_index":3682,"title":{},"name":{},"text":{"60":{}},"component":{}}],["lhe",{"_index":5800,"title":{},"name":{},"text":{"117":{}},"component":{}}],["li",{"_index":4720,"title":{},"name":{},"text":{"73":{}},"component":{}}],["lib",{"_index":6540,"title":{},"name":{},"text":{"154":{}},"component":{}}],["librari",{"_index":979,"title":{"266-3":{},"273-2":{}},"name":{},"text":{"8":{},"50":{},"52":{},"66":{},"137":{},"242":{},"262":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"273":{},"274":{},"275":{}},"component":{}}],["library’",{"_index":1110,"title":{},"name":{},"text":{"9":{}},"component":{}}],["licence/token",{"_index":579,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["licens",{"_index":5,"title":{"245-2":{}},"name":{},"text":{"1":{},"3":{},"61":{},"134":{},"135":{},"137":{},"138":{},"142":{},"171":{},"172":{},"176":{},"184":{},"185":{},"223":{},"245":{}},"component":{}}],["life",{"_index":1846,"title":{"63-1":{}},"name":{},"text":{"28":{},"57":{},"63":{},"65":{},"75":{}},"component":{}}],["lifecycl",{"_index":2184,"title":{"75-2":{}},"name":{},"text":{"32":{},"36":{},"38":{},"46":{},"60":{},"61":{},"66":{},"70":{},"104":{},"278":{}},"component":{}}],["lifecycleawar",{"_index":3565,"title":{},"name":{},"text":{"60":{}},"component":{}}],["lifetim",{"_index":4709,"title":{},"name":{},"text":{"71":{}},"component":{}}],["light",{"_index":4168,"title":{},"name":{},"text":{"61":{},"80":{},"104":{}},"component":{}}],["lightest",{"_index":6478,"title":{},"name":{},"text":{"150":{}},"component":{}}],["lightstep",{"_index":6006,"title":{},"name":{},"text":{"131":{}},"component":{}}],["likewis",{"_index":7620,"title":{},"name":{},"text":{"254":{}},"component":{}}],["limit",{"_index":251,"title":{"151-13":{}},"name":{},"text":{"3":{},"5":{},"23":{},"31":{},"52":{},"56":{},"77":{},"80":{},"95":{},"97":{},"106":{},"122":{},"123":{},"137":{},"138":{},"139":{},"142":{},"144":{},"147":{},"151":{},"166":{},"172":{},"184":{},"200":{},"216":{},"241":{},"245":{}},"component":{}}],["limitedrechargeablegiftcard",{"_index":4745,"title":{},"name":{},"text":{"74":{}},"component":{}}],["line",{"_index":982,"title":{"171":{},"146-7":{},"172-2":{},"277-14":{},"280-2":{}},"name":{"171":{}},"text":{"8":{},"11":{},"35":{},"47":{},"58":{},"60":{},"66":{},"98":{},"105":{},"137":{},"140":{},"146":{},"147":{},"149":{},"151":{},"167":{},"171":{},"172":{},"174":{},"185":{},"270":{},"277":{},"280":{},"281":{},"282":{}},"component":{}}],["link",{"_index":601,"title":{"163-4":{}},"name":{},"text":{"3":{},"7":{},"8":{},"11":{},"52":{},"58":{},"60":{},"89":{},"184":{},"232":{},"238":{},"241":{},"242":{},"244":{},"270":{},"274":{},"276":{},"277":{},"278":{},"281":{}},"component":{}}],["lint",{"_index":1128,"title":{},"name":{},"text":{"10":{}},"component":{}}],["linter",{"_index":999,"title":{"10-3":{}},"name":{},"text":{"8":{}},"component":{}}],["linux",{"_index":1053,"title":{},"name":{},"text":{"8":{},"196":{}},"component":{}}],["liquibas",{"_index":5751,"title":{},"name":{},"text":{"117":{}},"component":{}}],["list",{"_index":110,"title":{"203-3":{},"203-7":{},"209-4":{},"214-3":{}},"name":{},"text":{"2":{},"3":{},"9":{},"11":{},"13":{},"24":{},"26":{},"31":{},"37":{},"43":{},"44":{},"45":{},"52":{},"54":{},"56":{},"57":{},"60":{},"61":{},"66":{},"71":{},"77":{},"78":{},"79":{},"81":{},"97":{},"112":{},"117":{},"126":{},"130":{},"137":{},"139":{},"140":{},"142":{},"143":{},"146":{},"154":{},"156":{},"158":{},"159":{},"161":{},"162":{},"165":{},"167":{},"171":{},"172":{},"173":{},"175":{},"176":{},"177":{},"178":{},"184":{},"185":{},"196":{},"198":{},"199":{},"200":{},"203":{},"205":{},"208":{},"209":{},"211":{},"212":{},"214":{},"217":{},"223":{},"225":{},"226":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"256":{},"267":{},"269":{},"270":{},"271":{},"275":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["list/collect",{"_index":1489,"title":{},"name":{},"text":{"24":{}},"component":{}}],["list=axonserver1,axonserver2,axonserver3",{"_index":7454,"title":{},"name":{},"text":{"205":{}},"component":{}}],["list=axonserver:7124",{"_index":7455,"title":{},"name":{},"text":{"205":{}},"component":{}}],["list_app",{"_index":6670,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_backup_filenam",{"_index":6671,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_backup_logfil",{"_index":6672,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_command",{"_index":6673,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_context",{"_index":6674,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_ev",{"_index":6718,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_nod",{"_index":6675,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_plugin",{"_index":6676,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_queri",{"_index":6677,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_replication_group",{"_index":6678,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_snapshot",{"_index":6719,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_task",{"_index":6679,"title":{},"name":{},"text":{"164":{}},"component":{}}],["list_us",{"_index":6680,"title":{},"name":{},"text":{"164":{}},"component":{}}],["listdata",{"_index":7206,"title":{},"name":{},"text":{"192":{}},"component":{}}],["listen",{"_index":2234,"title":{"79-5":{}},"name":{},"text":{"33":{},"37":{},"42":{},"46":{},"52":{},"63":{},"78":{},"79":{},"126":{},"127":{},"147":{},"199":{}},"component":{}}],["listenerinvocationerrorhandl",{"_index":3737,"title":{},"name":{},"text":{"60":{},"79":{}},"component":{}}],["listing=tru",{"_index":5978,"title":{},"name":{},"text":{"127":{}},"component":{}}],["liter",{"_index":4518,"title":{},"name":{},"text":{"66":{},"80":{}},"component":{}}],["littl",{"_index":2248,"title":{},"name":{},"text":{"33":{},"41":{},"71":{},"78":{},"135":{},"144":{},"234":{},"261":{},"262":{},"267":{},"273":{},"277":{}},"component":{}}],["live",{"_index":604,"title":{},"name":{},"text":{"3":{},"35":{},"71":{},"75":{},"144":{},"184":{},"255":{},"270":{}},"component":{}}],["liveness/readi",{"_index":7034,"title":{},"name":{},"text":{"176":{}},"component":{}}],["livenessprob",{"_index":647,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["ln",{"_index":1057,"title":{},"name":{},"text":{"8":{}},"component":{}}],["load",{"_index":1841,"title":{"31-19":{},"31-28":{}},"name":{},"text":{"28":{},"29":{},"31":{},"35":{},"52":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"72":{},"74":{},"75":{},"76":{},"78":{},"80":{},"92":{},"97":{},"102":{},"114":{},"127":{},"138":{},"141":{},"147":{},"150":{},"169":{},"173":{},"180":{},"185":{},"199":{},"208":{},"217":{},"243":{},"245":{},"254":{},"255":{},"256":{},"263":{},"270":{},"271":{},"278":{}},"component":{}}],["load(identifi",{"_index":1862,"title":{},"name":{},"text":{"29":{}},"component":{}}],["loadbalanceprocessor(loadbalancerequest",{"_index":6990,"title":{},"name":{},"text":{"173":{}},"component":{}}],["loadbalancingstrategi",{"_index":6989,"title":{},"name":{},"text":{"173":{}},"component":{}}],["loader",{"_index":6422,"title":{},"name":{},"text":{"147":{}},"component":{}}],["loadfactor",{"_index":7469,"title":{},"name":{},"text":{"208":{}},"component":{}}],["loadfactorprovid",{"_index":2130,"title":{},"name":{},"text":{"31":{}},"component":{}}],["local",{"_index":419,"title":{"281":{},"8-7":{},"8-11":{},"31-7":{},"31-18":{},"31-28":{},"223-2":{},"229-1":{},"274-3":{}},"name":{},"text":{"3":{},"8":{},"9":{},"31":{},"35":{},"47":{},"52":{},"60":{},"61":{},"97":{},"101":{},"102":{},"117":{},"126":{},"129":{},"143":{},"151":{},"152":{},"176":{},"184":{},"196":{},"203":{},"223":{},"229":{},"273":{},"274":{},"277":{},"281":{}},"component":{}}],["local.application.client.command",{"_index":7464,"title":{},"name":{},"text":{"208":{}},"component":{}}],["local.application.client.ev",{"_index":7477,"title":{},"name":{},"text":{"209":{},"214":{}},"component":{}}],["local.application.client.queri",{"_index":7480,"title":{},"name":{},"text":{"211":{}},"component":{}}],["local.ev",{"_index":5640,"title":{},"name":{},"text":{"108":{}},"component":{}}],["local_get_last_ev",{"_index":6696,"title":{},"name":{},"text":{"164":{}},"component":{}}],["local_get_last_snapshot",{"_index":6697,"title":{},"name":{},"text":{"164":{}},"component":{}}],["localcommandbus(localseg",{"_index":5967,"title":{},"name":{},"text":{"127":{}},"component":{}}],["localeventstor",{"_index":7041,"title":{},"name":{},"text":{"176":{}},"component":{}}],["localhost",{"_index":1077,"title":{},"name":{},"text":{"8":{},"163":{},"203":{}},"component":{}}],["localhost:8080",{"_index":1082,"title":{},"name":{},"text":{"8":{}},"component":{}}],["localhost:8124",{"_index":7395,"title":{},"name":{},"text":{"203":{}},"component":{}}],["localhost:9092",{"_index":5635,"title":{},"name":{},"text":{"108":{}},"component":{}}],["locallink",{"_index":1035,"title":{},"name":{},"text":{"8":{}},"component":{}}],["locallinks/axonframework/doc",{"_index":1041,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["locallinks/axonframework/docs/_playbook",{"_index":1095,"title":{},"name":{},"text":{"9":{}},"component":{}}],["locallinks/axonframework/docs/playbook",{"_index":1042,"title":{},"name":{},"text":{"8":{}},"component":{}}],["locallinks/projectnam",{"_index":1113,"title":{},"name":{},"text":{"9":{}},"component":{}}],["locallinks/projectname/doc",{"_index":1111,"title":{},"name":{},"text":{"9":{}},"component":{}}],["locallinks/projectname/docs/_playbook",{"_index":1112,"title":{},"name":{},"text":{"9":{}},"component":{}}],["localseg",{"_index":2129,"title":{},"name":{},"text":{"31":{},"52":{},"101":{},"127":{}},"component":{}}],["localsegment(localseg",{"_index":2132,"title":{},"name":{},"text":{"31":{},"101":{}},"component":{}}],["localserviceinst",{"_index":5957,"title":{},"name":{},"text":{"127":{}},"component":{}}],["localserviceinstance(localserviceinst",{"_index":5961,"title":{},"name":{},"text":{"127":{}},"component":{}}],["locat",{"_index":308,"title":{"4-2":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"25":{},"26":{},"28":{},"35":{},"36":{},"42":{},"46":{},"60":{},"80":{},"89":{},"104":{},"107":{},"137":{},"138":{},"141":{},"144":{},"145":{},"146":{},"147":{},"148":{},"151":{},"154":{},"155":{},"160":{},"162":{},"169":{},"170":{},"172":{},"174":{},"176":{},"184":{},"185":{},"198":{},"205":{},"231":{},"242":{},"261":{},"263":{},"270":{},"277":{},"278":{}},"component":{}}],["location=./data",{"_index":407,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["location’",{"_index":566,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["lock",{"_index":2031,"title":{},"name":{},"text":{"31":{},"35":{},"46":{},"52":{},"60":{},"167":{},"255":{},"256":{}},"component":{}}],["lockfactori",{"_index":3471,"title":{},"name":{},"text":{"60":{}},"component":{}}],["lockingrepositori",{"_index":1894,"title":{},"name":{},"text":{"29":{}},"component":{}}],["lockingrepository.obtainlock",{"_index":2986,"title":{},"name":{},"text":{"52":{}},"component":{}}],["log",{"_index":291,"title":{"182":{},"183":{},"49-2":{},"52-22":{},"140-3":{},"196-6":{}},"name":{"183":{}},"text":{"3":{},"5":{},"8":{},"24":{},"29":{},"31":{},"35":{},"44":{},"49":{},"52":{},"60":{},"61":{},"69":{},"79":{},"80":{},"90":{},"109":{},"122":{},"137":{},"138":{},"140":{},"145":{},"165":{},"172":{},"174":{},"176":{},"178":{},"182":{},"183":{},"184":{},"185":{},"196":{},"229":{},"244":{},"281":{}},"component":{}}],["log.exit(jpaquery.getresultlist",{"_index":3079,"title":{},"name":{},"text":{"56":{}},"component":{}}],["log.trace(\"handl",{"_index":3070,"title":{},"name":{},"text":{"56":{}},"component":{}}],["log1",{"_index":486,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["log1:/axonserver/log",{"_index":455,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["log2",{"_index":492,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["log2:/axonserver/log",{"_index":466,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["log3",{"_index":498,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["log3:/axonserver/log",{"_index":472,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["log4j",{"_index":4150,"title":{},"name":{},"text":{"61":{}},"component":{}}],["logback",{"_index":7161,"title":{},"name":{},"text":{"183":{}},"component":{}}],["logback.xml",{"_index":7162,"title":{},"name":{},"text":{"183":{}},"component":{}}],["logger",{"_index":2632,"title":{},"name":{},"text":{"44":{},"109":{},"176":{}},"component":{}}],["logger.info(\"dispatch",{"_index":2636,"title":{},"name":{},"text":{"44":{}},"component":{}}],["logger.info(\"publish",{"_index":2675,"title":{},"name":{},"text":{"44":{}},"component":{}}],["logger.info(\"successfulli",{"_index":5659,"title":{},"name":{},"text":{"109":{}},"component":{}}],["logger.warn",{"_index":5661,"title":{},"name":{},"text":{"109":{}},"component":{}}],["loggerfactory.getlogger(commanddispatcher::class.java",{"_index":5654,"title":{},"name":{},"text":{"109":{}},"component":{}}],["loggerfactory.getlogger(eventloggingdispatchinterceptor.class",{"_index":2674,"title":{},"name":{},"text":{"44":{}},"component":{}}],["loggerfactory.getlogger(mycommanddispatchinterceptor.class",{"_index":2633,"title":{},"name":{},"text":{"44":{}},"component":{}}],["logging.config",{"_index":6101,"title":{},"name":{},"text":{"138":{},"183":{}},"component":{}}],["logging.config=logback.xml",{"_index":7163,"title":{},"name":{},"text":{"183":{}},"component":{}}],["logging.fil",{"_index":326,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["logging.file.max",{"_index":409,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["logging.file.nam",{"_index":6897,"title":{},"name":{},"text":{"172":{}},"component":{}}],["logging.file=./data/axonserver.log",{"_index":408,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["logging.level.io.axoniq.axonserv",{"_index":6896,"title":{},"name":{},"text":{"172":{}},"component":{}}],["logging.level.package_nam",{"_index":6895,"title":{},"name":{},"text":{"172":{}},"component":{}}],["logging.path",{"_index":6900,"title":{},"name":{},"text":{"172":{}},"component":{}}],["loggingduplicatecommandhandlerresolv",{"_index":4614,"title":{},"name":{},"text":{"69":{}},"component":{}}],["loggingerrorhandl",{"_index":4864,"title":{},"name":{},"text":{"79":{}},"component":{}}],["logginginterceptor",{"_index":2651,"title":{},"name":{},"text":{"44":{},"49":{},"109":{}},"component":{}}],["loggingspanfactori",{"_index":2914,"title":{},"name":{},"text":{"52":{},"60":{}},"component":{}}],["loggingspanfactory.inst",{"_index":2927,"title":{},"name":{},"text":{"52":{}},"component":{}}],["logic",{"_index":1464,"title":{"28-2":{},"190-2":{}},"name":{},"text":{"24":{},"27":{},"28":{},"31":{},"36":{},"41":{},"44":{},"46":{},"60":{},"61":{},"75":{},"77":{},"78":{},"79":{},"80":{},"93":{},"96":{},"109":{},"110":{},"112":{},"121":{},"122":{},"126":{},"143":{},"144":{},"185":{},"208":{},"209":{},"211":{},"231":{},"236":{},"241":{},"270":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["login",{"_index":6616,"title":{},"name":{},"text":{"162":{},"165":{},"167":{},"230":{},"244":{}},"component":{}}],["logon",{"_index":6542,"title":{},"name":{},"text":{"154":{},"155":{}},"component":{}}],["logout",{"_index":6788,"title":{},"name":{},"text":{"165":{}},"component":{}}],["long",{"_index":1216,"title":{},"name":{},"text":{"22":{},"24":{},"27":{},"31":{},"33":{},"35":{},"45":{},"51":{},"52":{},"61":{},"63":{},"64":{},"71":{},"75":{},"80":{},"81":{},"135":{},"137":{},"138":{},"142":{},"144":{},"146":{},"149":{},"151":{},"162":{},"171":{},"172":{},"218":{},"241":{},"255":{},"277":{}},"component":{}}],["longer",{"_index":203,"title":{},"name":{},"text":{"2":{},"27":{},"28":{},"56":{},"60":{},"61":{},"71":{},"75":{},"79":{},"104":{},"126":{},"137":{},"138":{},"139":{},"142":{},"144":{},"146":{},"151":{},"171":{},"172":{},"176":{},"203":{},"212":{},"255":{},"270":{},"271":{}},"component":{}}],["longest",{"_index":5243,"title":{},"name":{},"text":{"80":{}},"component":{}}],["longpollingsourc",{"_index":5248,"title":{},"name":{},"text":{"80":{}},"component":{}}],["longpollingsource(\"eventsourcea",{"_index":5257,"title":{},"name":{},"text":{"80":{}},"component":{}}],["longpollingstream",{"_index":5258,"title":{},"name":{},"text":{"80":{}},"component":{}}],["look",{"_index":393,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"19":{},"23":{},"24":{},"25":{},"33":{},"35":{},"44":{},"52":{},"56":{},"57":{},"61":{},"63":{},"71":{},"73":{},"74":{},"76":{},"80":{},"97":{},"108":{},"116":{},"127":{},"137":{},"146":{},"184":{},"196":{},"198":{},"200":{},"204":{},"255":{},"268":{},"270":{},"271":{},"273":{},"274":{},"277":{},"281":{}},"component":{}}],["lookup",{"_index":2279,"title":{},"name":{},"text":{"35":{},"61":{},"63":{},"65":{}},"component":{}}],["loop",{"_index":2173,"title":{},"name":{},"text":{"32":{},"61":{}},"component":{}}],["loos",{"_index":2562,"title":{},"name":{},"text":{"41":{},"261":{},"278":{}},"component":{}}],["loosen",{"_index":5176,"title":{},"name":{},"text":{"80":{}},"component":{}}],["lose",{"_index":3113,"title":{},"name":{},"text":{"56":{},"80":{},"142":{},"161":{},"171":{},"223":{},"270":{}},"component":{}}],["loss",{"_index":7553,"title":{},"name":{},"text":{"223":{}},"component":{}}],["lost",{"_index":2239,"title":{},"name":{},"text":{"33":{},"61":{},"63":{},"65":{},"104":{},"142":{},"151":{},"277":{}},"component":{}}],["lot",{"_index":1541,"title":{},"name":{},"text":{"25":{},"31":{},"35":{},"52":{},"71":{},"77":{},"79":{},"80":{},"124":{},"208":{},"232":{},"254":{}},"component":{}}],["love",{"_index":191,"title":{},"name":{},"text":{"2":{},"262":{}},"component":{}}],["low",{"_index":2050,"title":{},"name":{},"text":{"31":{},"255":{}},"component":{}}],["lower",{"_index":2526,"title":{},"name":{},"text":{"38":{},"60":{},"61":{},"80":{},"137":{},"192":{},"196":{},"208":{},"255":{}},"component":{}}],["lowercas",{"_index":1879,"title":{},"name":{},"text":{"29":{},"146":{},"171":{},"192":{}},"component":{}}],["lt",{"_index":1006,"title":{},"name":{},"text":{"8":{},"135":{}},"component":{}}],["lucki",{"_index":7768,"title":{},"name":{},"text":{"273":{}},"component":{}}],["luckili",{"_index":4213,"title":{},"name":{},"text":{"61":{}},"component":{}}],["m",{"_index":1084,"title":{},"name":{},"text":{"8":{},"146":{},"171":{}},"component":{}}],["m1l4n54v1c",{"_index":3685,"title":{},"name":{},"text":{"60":{}},"component":{}}],["mac",{"_index":1054,"title":{},"name":{},"text":{"8":{}},"component":{}}],["machin",{"_index":420,"title":{},"name":{},"text":{"3":{},"8":{},"31":{},"42":{},"71":{},"80":{},"151":{},"184":{},"185":{},"196":{},"274":{},"278":{}},"component":{}}],["machineri",{"_index":908,"title":{},"name":{},"text":{"7":{},"15":{},"21":{}},"component":{}}],["made",{"_index":1523,"title":{},"name":{},"text":{"25":{},"26":{},"36":{},"60":{},"61":{},"71":{},"76":{},"111":{},"137":{},"142":{},"143":{},"144":{},"150":{},"165":{},"232":{},"277":{}},"component":{}}],["magnifi",{"_index":8004,"title":{},"name":{},"text":{"280":{}},"component":{}}],["magnu",{"_index":4147,"title":{},"name":{},"text":{"61":{}},"component":{}}],["mail",{"_index":848,"title":{"244-3":{}},"name":{},"text":{"5":{},"80":{},"244":{}},"component":{}}],["main",{"_index":70,"title":{"2-2":{},"10-1":{},"23-1":{},"276-5":{},"276-7":{}},"name":{},"text":{"7":{},"11":{},"23":{},"24":{},"35":{},"71":{},"78":{},"104":{},"127":{},"141":{},"151":{},"170":{},"236":{},"255":{},"258":{},"266":{},"270":{},"271":{},"273":{},"276":{},"277":{}},"component":{}}],["main(str",{"_index":5950,"title":{},"name":{},"text":{"127":{}},"component":{}}],["mainli",{"_index":2759,"title":{},"name":{},"text":{"46":{},"63":{},"65":{}},"component":{}}],["maintain",{"_index":7,"title":{},"name":{},"text":{"1":{},"2":{},"38":{},"41":{},"61":{},"63":{},"71":{},"75":{},"79":{},"80":{},"81":{},"90":{},"104":{},"126":{},"137":{},"139":{},"146":{},"148":{},"149":{},"151":{},"154":{},"170":{},"174":{},"277":{}},"component":{}}],["maintained/suppli",{"_index":6832,"title":{},"name":{},"text":{"172":{}},"component":{}}],["mainten",{"_index":4886,"title":{"146-6":{},"196-5":{}},"name":{},"text":{"79":{},"137":{},"139":{},"145":{},"146":{},"149":{},"172":{},"175":{},"182":{},"196":{},"218":{},"254":{}},"component":{}}],["maintenance/backup",{"_index":6509,"title":{},"name":{},"text":{"151":{}},"component":{}}],["major",{"_index":103,"title":{"60":{},"137":{}},"name":{"60":{},"137":{}},"text":{"2":{},"24":{},"31":{},"36":{},"59":{},"60":{},"61":{},"63":{},"71":{},"76":{},"79":{},"80":{},"135":{},"144":{},"148":{},"149":{},"151":{},"172":{},"241":{},"256":{}},"component":{}}],["major/minor",{"_index":3185,"title":{},"name":{},"text":{"59":{}},"component":{}}],["make",{"_index":177,"title":{},"name":{},"text":{"2":{},"8":{},"9":{},"24":{},"25":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"42":{},"43":{},"44":{},"45":{},"46":{},"52":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"71":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"93":{},"99":{},"101":{},"104":{},"105":{},"106":{},"110":{},"116":{},"117":{},"121":{},"124":{},"126":{},"128":{},"129":{},"130":{},"139":{},"140":{},"143":{},"144":{},"146":{},"147":{},"150":{},"151":{},"156":{},"163":{},"171":{},"208":{},"218":{},"240":{},"254":{},"255":{},"256":{},"261":{},"266":{},"268":{},"272":{},"276":{},"277":{},"279":{},"281":{},"282":{}},"component":{}}],["making/busi",{"_index":4759,"title":{},"name":{},"text":{"75":{}},"component":{}}],["malform",{"_index":3018,"title":{},"name":{},"text":{"52":{}},"component":{}}],["malfunct",{"_index":3153,"title":{},"name":{},"text":{"56":{}},"component":{}}],["malota",{"_index":4259,"title":{},"name":{},"text":{"61":{}},"component":{}}],["manag",{"_index":26,"title":{"32":{},"228":{},"254":{},"259":{},"5-10":{},"5-11":{},"63-5":{},"65-1":{},"79-31":{},"117-9":{},"137-20":{},"203-27":{},"203-29":{},"203-31":{}},"name":{"32":{},"254":{},"259":{}},"text":{"1":{},"2":{},"3":{},"5":{},"9":{},"23":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"44":{},"46":{},"52":{},"60":{},"62":{},"63":{},"64":{},"65":{},"68":{},"71":{},"79":{},"80":{},"83":{},"85":{},"86":{},"101":{},"103":{},"116":{},"117":{},"120":{},"137":{},"138":{},"139":{},"141":{},"144":{},"145":{},"146":{},"147":{},"149":{},"151":{},"156":{},"162":{},"166":{},"169":{},"172":{},"174":{},"184":{},"185":{},"196":{},"200":{},"203":{},"212":{},"224":{},"227":{},"228":{},"229":{},"231":{},"233":{},"235":{},"237":{},"245":{},"247":{},"251":{},"253":{},"254":{},"258":{},"267":{}},"component":{}}],["management.endpoint.health.show",{"_index":7044,"title":{},"name":{},"text":{"176":{}},"component":{}}],["management.endpoint.metrics.enabled=tru",{"_index":2839,"title":{},"name":{},"text":{"50":{}},"component":{}}],["management.endpoint.prometheus.enabled=tru",{"_index":2842,"title":{},"name":{},"text":{"50":{}},"component":{}}],["management.metrics.export.prometheus.enabled=tru",{"_index":2841,"title":{},"name":{},"text":{"50":{}},"component":{}}],["managers.adoc",{"_index":4568,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mandatori",{"_index":1842,"title":{"161-2":{},"167-2":{}},"name":{},"text":{"28":{},"36":{},"56":{},"77":{},"101":{},"139":{},"146":{},"171":{},"196":{}},"component":{}}],["mani",{"_index":533,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"25":{},"29":{},"32":{},"35":{},"38":{},"46":{},"52":{},"61":{},"63":{},"77":{},"79":{},"80":{},"106":{},"131":{},"142":{},"151":{},"172":{},"180":{},"184":{},"195":{},"212":{},"223":{},"247":{},"253":{},"254":{},"261":{},"266":{}},"component":{}}],["manifest",{"_index":4721,"title":{},"name":{},"text":{"73":{},"90":{},"95":{},"147":{}},"component":{}}],["manifesto",{"_index":5811,"title":{},"name":{},"text":{"121":{}},"component":{}}],["manipul",{"_index":2197,"title":{},"name":{},"text":{"32":{},"68":{},"144":{}},"component":{}}],["manishatgit",{"_index":3234,"title":{},"name":{},"text":{"60":{}},"component":{}}],["manner",{"_index":433,"title":{},"name":{},"text":{"3":{},"38":{},"69":{},"184":{},"218":{},"261":{}},"component":{}}],["manual",{"_index":1072,"title":{"52-20":{}},"name":{},"text":{"8":{},"23":{},"26":{},"28":{},"38":{},"46":{},"61":{},"80":{},"91":{},"122":{},"141":{},"143":{},"152":{},"224":{},"233":{},"244":{},"254":{},"270":{},"271":{},"272":{},"280":{},"281":{},"282":{}},"component":{}}],["map",{"_index":329,"title":{"164":{}},"name":{},"text":{"3":{},"25":{},"35":{},"40":{},"43":{},"51":{},"52":{},"57":{},"66":{},"77":{},"78":{},"79":{},"80":{},"81":{},"104":{},"106":{},"107":{},"108":{},"122":{},"137":{},"147":{},"150":{},"162":{},"165":{},"172":{},"184":{},"194":{}},"component":{}}],["map(",{"_index":2859,"title":{},"name":{},"text":{"50":{}},"component":{}}],["map(attr",{"_index":5384,"title":{},"name":{},"text":{"93":{}},"component":{}}],["map(clientinst",{"_index":6286,"title":{},"name":{},"text":{"143":{}},"component":{}}],["map(ctx",{"_index":5904,"title":{},"name":{},"text":{"122":{}},"component":{}}],["map(eventprocessor",{"_index":4627,"title":{},"name":{},"text":{"70":{}},"component":{}}],["map(memb",{"_index":5386,"title":{},"name":{},"text":{"93":{}},"component":{}}],["map(message::getpayload",{"_index":3065,"title":{},"name":{},"text":{"56":{}},"component":{}}],["map(mp",{"_index":5777,"title":{},"name":{},"text":{"117":{}},"component":{}}],["map(p",{"_index":5776,"title":{},"name":{},"text":{"117":{}},"component":{}}],["map(sequenceddeadletterqueue::deadlett",{"_index":4942,"title":{},"name":{},"text":{"79":{}},"component":{}}],["map(uid",{"_index":2660,"title":{},"name":{},"text":{"44":{}},"component":{}}],["map.googl",{"_index":6781,"title":{},"name":{},"text":{"165":{}},"component":{}}],["map.oidccli",{"_index":6798,"title":{},"name":{},"text":{"165":{}},"component":{}}],["map`_",{"_index":2549,"title":{},"name":{},"text":{"40":{}},"component":{}}],["mapper",{"_index":2396,"title":{},"name":{},"text":{"35":{},"106":{}},"component":{}}],["marc",{"_index":6438,"title":{},"name":{},"text":{"147":{}},"component":{}}],["mark",{"_index":359,"title":{"11":{},"11-1":{}},"name":{},"text":{"3":{},"11":{},"13":{},"27":{},"41":{},"52":{},"57":{},"60":{},"61":{},"66":{},"75":{},"77":{},"127":{},"141":{},"151":{},"184":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["mark4improv",{"_index":1131,"title":{},"name":{"11":{}},"text":{},"component":{}}],["markdelet",{"_index":4768,"title":{},"name":{},"text":{"75":{}},"component":{}}],["market",{"_index":6061,"title":{},"name":{},"text":{"137":{}},"component":{}}],["marketplac",{"_index":1205,"title":{"196":{},"196-1":{}},"name":{},"text":{"18":{},"19":{},"138":{},"196":{}},"component":{"196":{}}}],["markup",{"_index":1126,"title":{},"name":{},"text":{"10":{}},"component":{}}],["master",{"_index":1177,"title":{},"name":{},"text":{"15":{},"21":{},"61":{},"146":{},"149":{},"156":{},"171":{},"172":{}},"component":{}}],["match",{"_index":582,"title":{"79-20":{},"150-3":{},"190-4":{}},"name":{},"text":{"3":{},"28":{},"31":{},"32":{},"35":{},"44":{},"45":{},"52":{},"56":{},"57":{},"60":{},"61":{},"63":{},"66":{},"68":{},"71":{},"76":{},"77":{},"79":{},"80":{},"81":{},"93":{},"108":{},"122":{},"130":{},"143":{},"146":{},"150":{},"163":{},"171":{},"184":{},"196":{},"213":{},"216":{},"234":{},"241":{},"254":{},"277":{}},"component":{}}],["matcher",{"_index":3411,"title":{},"name":{},"text":{"60":{},"61":{},"66":{},"282":{}},"component":{}}],["matchers.andnomor",{"_index":4534,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.equalto(inst",{"_index":4532,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.exactsequenceof(ev",{"_index":4529,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.listwithallof(ev",{"_index":4525,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.listwithanyof(ev",{"_index":4526,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.matches(pred",{"_index":4536,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.messagewithpayload(payload",{"_index":4538,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.noth",{"_index":4535,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.payloadsmatching(list",{"_index":4539,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.predicate(pred",{"_index":4537,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchers.sequenceof(ev",{"_index":4527,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matches(object",{"_index":4519,"title":{},"name":{},"text":{"66":{}},"component":{}}],["matchlabel",{"_index":615,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["materi",{"_index":890,"title":{"23-38":{},"275-1":{}},"name":{},"text":{"7":{},"15":{},"21":{},"23":{},"275":{}},"component":{}}],["matrix",{"_index":6615,"title":{"258-1":{}},"name":{"164":{}},"text":{"162":{},"258":{}},"component":{}}],["matter",{"_index":1106,"title":{},"name":{},"text":{"9":{},"60":{},"66":{},"71":{},"80":{},"199":{},"247":{}},"component":{}}],["maven",{"_index":1230,"title":{"23-39":{},"52-17":{}},"name":{},"text":{"23":{},"26":{},"35":{},"38":{},"60":{},"61":{},"66":{},"143":{},"198":{},"267":{},"273":{},"275":{},"276":{},"281":{},"282":{}},"component":{}}],["mavenartifactrevisionresolv",{"_index":2468,"title":{},"name":{},"text":{"38":{}},"component":{}}],["mavenbom",{"_index":1314,"title":{},"name":{},"text":{"23":{}},"component":{}}],["maverick1601",{"_index":3423,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["max",{"_index":4280,"title":{},"name":{},"text":{"61":{},"79":{},"142":{},"151":{},"156":{},"172":{},"194":{},"203":{},"239":{},"271":{}},"component":{}}],["max_short",{"_index":6193,"title":{},"name":{},"text":{"142":{}},"component":{}}],["maxclaimedseg",{"_index":5170,"title":{},"name":{},"text":{"80":{}},"component":{}}],["maxconcurr",{"_index":7470,"title":{},"name":{},"text":{"208":{},"212":{}},"component":{}}],["maxelectiontimeout",{"_index":6938,"title":{},"name":{},"text":{"172":{}},"component":{}}],["maxim",{"_index":6926,"title":{},"name":{},"text":{"172":{},"224":{},"233":{}},"component":{}}],["maximum",{"_index":763,"title":{},"name":{},"text":{"5":{},"31":{},"50":{},"52":{},"56":{},"79":{},"80":{},"122":{},"137":{},"138":{},"142":{},"147":{},"156":{},"172":{},"194":{},"208":{},"209":{},"212":{},"255":{},"258":{},"270":{},"271":{}},"component":{}}],["maxsequences(256",{"_index":4902,"title":{},"name":{},"text":{"79":{},"89":{},"113":{}},"component":{}}],["maxsequencesize(256",{"_index":4903,"title":{},"name":{},"text":{"79":{},"89":{},"113":{}},"component":{}}],["mayb",{"_index":2782,"title":{},"name":{},"text":{"46":{},"144":{}},"component":{}}],["mb",{"_index":6389,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["mbreevoort",{"_index":4247,"title":{},"name":{},"text":{"61":{}},"component":{}}],["mean",{"_index":250,"title":{"5-8":{},"144-2":{}},"name":{},"text":{"3":{},"24":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"38":{},"40":{},"42":{},"44":{},"46":{},"49":{},"50":{},"53":{},"56":{},"60":{},"63":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"76":{},"77":{},"79":{},"80":{},"81":{},"89":{},"92":{},"97":{},"104":{},"105":{},"107":{},"111":{},"114":{},"117":{},"126":{},"137":{},"139":{},"140":{},"142":{},"143":{},"144":{},"146":{},"151":{},"156":{},"162":{},"165":{},"167":{},"176":{},"184":{},"199":{},"213":{},"217":{},"218":{},"221":{},"241":{},"242":{},"244":{},"254":{},"255":{},"270":{},"271":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["meaning",{"_index":1873,"title":{},"name":{},"text":{"29":{}},"component":{}}],["meant",{"_index":431,"title":{},"name":{},"text":{"3":{},"35":{},"61":{},"66":{},"129":{},"184":{}},"component":{}}],["measur",{"_index":158,"title":{"255-1":{},"255-2":{}},"name":{},"text":{"2":{},"5":{},"48":{},"50":{},"52":{},"151":{},"255":{},"270":{}},"component":{}}],["mechan",{"_index":449,"title":{},"name":{},"text":{"3":{},"23":{},"24":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"35":{},"45":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"71":{},"77":{},"79":{},"92":{},"97":{},"101":{},"104":{},"105":{},"122":{},"126":{},"128":{},"141":{},"155":{},"170":{},"184":{},"251":{},"278":{}},"component":{}}],["media",{"_index":6065,"title":{},"name":{},"text":{"137":{},"140":{},"151":{}},"component":{}}],["median",{"_index":7590,"title":{},"name":{},"text":{"239":{},"255":{},"270":{},"271":{}},"component":{}}],["medium",{"_index":6148,"title":{},"name":{},"text":{"140":{}},"component":{}}],["meet",{"_index":5802,"title":{},"name":{},"text":{"119":{},"227":{},"229":{},"237":{}},"component":{}}],["mehtod",{"_index":7898,"title":{},"name":{},"text":{"277":{}},"component":{}}],["meks77",{"_index":3838,"title":{},"name":{},"text":{"61":{}},"component":{}}],["member",{"_index":1014,"title":{},"name":{},"text":{"8":{},"41":{},"60":{},"61":{},"66":{},"70":{},"78":{},"79":{},"93":{},"101":{},"127":{},"139":{},"140":{},"141":{},"142":{},"146":{},"149":{},"171":{},"172":{},"185":{},"258":{}},"component":{}}],["membercap",{"_index":5939,"title":{},"name":{},"text":{"126":{}},"component":{}}],["membercapabilitiescontrol",{"_index":5938,"title":{},"name":{},"text":{"126":{}},"component":{}}],["memori",{"_index":2238,"title":{"35-17":{},"137-20":{}},"name":{},"text":{"33":{},"35":{},"56":{},"60":{},"61":{},"65":{},"71":{},"79":{},"80":{},"89":{},"117":{},"137":{},"138":{},"146":{},"172":{},"178":{},"196":{},"255":{},"270":{}},"component":{}}],["mention",{"_index":1320,"title":{},"name":{},"text":{"23":{},"26":{},"31":{},"32":{},"61":{},"77":{},"80":{},"95":{},"102":{},"141":{},"157":{},"161":{},"165":{},"170":{},"171":{},"174":{},"198":{},"254":{},"267":{},"276":{}},"component":{}}],["menu",{"_index":1139,"title":{"12":{}},"name":{"12":{}},"text":{"139":{},"146":{},"151":{},"270":{},"280":{},"282":{}},"component":{}}],["mere",{"_index":2766,"title":{},"name":{},"text":{"46":{}},"component":{}}],["merg",{"_index":1956,"title":{"80-60":{},"254-3":{}},"name":{},"text":{"31":{},"51":{},"60":{},"61":{},"70":{},"80":{},"158":{},"173":{},"243":{},"254":{},"270":{}},"component":{}}],["merge_event_processor_seg",{"_index":6698,"title":{},"name":{},"text":{"164":{}},"component":{}}],["merge_us",{"_index":6681,"title":{},"name":{},"text":{"164":{}},"component":{}}],["mergecompletedposit",{"_index":2894,"title":{},"name":{},"text":{"51":{}},"component":{}}],["mergeeventprocessor(eventprocessoridentifi",{"_index":6987,"title":{},"name":{},"text":{"173":{}},"component":{}}],["mergesegment(int",{"_index":5202,"title":{},"name":{},"text":{"80":{}},"component":{}}],["mergesegmentfor(str",{"_index":5206,"title":{},"name":{},"text":{"80":{}},"component":{}}],["mesh",{"_index":7148,"title":{},"name":{},"text":{"180":{}},"component":{}}],["mess",{"_index":4751,"title":{},"name":{},"text":{"75":{}},"component":{}}],["messag",{"_index":95,"title":{"40":{},"42":{},"43":{},"44":{},"49":{},"106":{},"139":{},"199":{},"200":{},"210":{},"215":{},"240":{},"5-5":{},"5-14":{},"23-2":{},"40-2":{},"44-15":{},"44-16":{},"52-47":{},"79-30":{},"104-1":{},"104-2":{},"117-3":{},"117-12":{},"139-4":{},"146-3":{},"199-3":{},"199-7":{},"199-11":{},"201-2":{},"201-3":{},"203-8":{},"208-3":{},"209-3":{},"209-4":{},"211-3":{},"213-2":{},"214-2":{},"214-3":{},"216-2":{},"221-3":{},"270-25":{},"270-26":{},"270-34":{},"270-37":{},"270-38":{},"270-39":{},"270-40":{},"275-3":{},"277-1":{}},"name":{"40":{},"43":{},"44":{},"49":{},"106":{},"139":{},"210":{},"215":{},"219":{},"240":{}},"text":{"2":{},"5":{},"11":{},"17":{},"19":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"35":{},"36":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"66":{},"68":{},"69":{},"72":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"85":{},"88":{},"90":{},"93":{},"94":{},"99":{},"100":{},"101":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"111":{},"117":{},"121":{},"122":{},"124":{},"126":{},"127":{},"129":{},"131":{},"137":{},"138":{},"139":{},"141":{},"142":{},"145":{},"146":{},"149":{},"156":{},"157":{},"161":{},"172":{},"174":{},"176":{},"181":{},"185":{},"198":{},"199":{},"200":{},"201":{},"203":{},"205":{},"206":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{},"224":{},"227":{},"233":{},"236":{},"237":{},"239":{},"240":{},"242":{},"247":{},"251":{},"253":{},"255":{},"256":{},"263":{},"267":{},"270":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{},"280":{},"281":{}},"component":{"93":{},"94":{},"95":{}}}],["message#metadata",{"_index":5786,"title":{},"name":{},"text":{"117":{}},"component":{}}],["message.andmetadata(collections.singletonmap(tenant_correlation_key",{"_index":5734,"title":{},"name":{},"text":{"117":{}},"component":{}}],["message.getidentifi",{"_index":2878,"title":{},"name":{},"text":{"50":{}},"component":{}}],["message.getmetadata().containskey(\"author",{"_index":2615,"title":{},"name":{},"text":{"43":{}},"component":{}}],["message.getmetadata().get(\"author",{"_index":2616,"title":{},"name":{},"text":{"43":{}},"component":{}}],["message.getpayload().getfield(\"tenantnam",{"_index":5743,"title":{},"name":{},"text":{"117":{}},"component":{}}],["message.getpayloadtyp",{"_index":6407,"title":{},"name":{},"text":{"146":{}},"component":{}}],["message.getpayloadtype().getname().startswith(\"com.context.book",{"_index":6410,"title":{},"name":{},"text":{"146":{}},"component":{}}],["message.getpayloadtype().getsimplenam",{"_index":2857,"title":{},"name":{},"text":{"50":{}},"component":{}}],["message/aggreg",{"_index":2471,"title":{},"name":{},"text":{"38":{}},"component":{}}],["message_id",{"_index":5990,"title":{},"name":{},"text":{"130":{}},"component":{}}],["message_nam",{"_index":5994,"title":{},"name":{},"text":{"130":{}},"component":{}}],["message_typ",{"_index":5992,"title":{},"name":{},"text":{"130":{}},"component":{}}],["messagecapabilitiesendpoint",{"_index":5955,"title":{},"name":{},"text":{"127":{}},"component":{}}],["messageconvert",{"_index":5453,"title":{},"name":{},"text":{"100":{},"104":{}},"component":{}}],["messageconverter(kafkamessageconvert",{"_index":5609,"title":{},"name":{},"text":{"107":{}},"component":{}}],["messageconverter(messageconvert",{"_index":5545,"title":{},"name":{},"text":{"104":{}},"component":{}}],["messagecount",{"_index":2854,"title":{},"name":{},"text":{"50":{}},"component":{}}],["messagecountingmonitor",{"_index":2820,"title":{},"name":{},"text":{"50":{}},"component":{}}],["messagecountingmonitor.buildmonitor",{"_index":2855,"title":{},"name":{},"text":{"50":{}},"component":{}}],["messagedispatchinterceptor",{"_index":2630,"title":{},"name":{},"text":{"44":{},"66":{},"122":{},"131":{}},"component":{}}],["messagedispatchinterceptor#handle(list",{"_index":5888,"title":{},"name":{},"text":{"122":{}},"component":{}}],["messagehandl",{"_index":4472,"title":{},"name":{},"text":{"66":{},"93":{}},"component":{}}],["messagehandlerinterceptor",{"_index":2624,"title":{"44-13":{},"44-14":{},"44-15":{},"44-16":{},"44-17":{}},"name":{},"text":{"44":{},"60":{},"66":{},"79":{},"131":{}},"component":{}}],["messagehandlerinterceptor(messagetyp",{"_index":2700,"title":{},"name":{},"text":{"44":{}},"component":{}}],["messagehandlerinterceptor`",{"_index":2741,"title":{},"name":{},"text":{"45":{}},"component":{}}],["messagehandlerlookup",{"_index":3544,"title":{},"name":{},"text":{"60":{}},"component":{}}],["messagehandlerregistrar",{"_index":4003,"title":{},"name":{},"text":{"61":{}},"component":{}}],["messagehandlingmemb",{"_index":3701,"title":{},"name":{},"text":{"60":{},"93":{},"96":{}},"component":{}}],["messagehandlingmember.canhandlemessagetype(class",{"_index":5379,"title":{},"name":{},"text":{"93":{}},"component":{}}],["messagehandlingmember’",{"_index":5400,"title":{},"name":{},"text":{"93":{}},"component":{}}],["messageid",{"_index":2877,"title":{},"name":{},"text":{"50":{},"208":{},"209":{},"211":{},"212":{}},"component":{}}],["messageidentifi",{"_index":2739,"title":{},"name":{},"text":{"45":{}},"component":{}}],["messageidspanattributesprovid",{"_index":2940,"title":{},"name":{},"text":{"52":{}},"component":{}}],["messagemonitor",{"_index":2814,"title":{},"name":{},"text":{"50":{},"51":{},"60":{},"79":{}},"component":{}}],["messagemonitor(config.messagemonitor",{"_index":2028,"title":{},"name":{},"text":{"31":{}},"component":{}}],["messagemonitor(config.messagemonitor(simplecommandbus.class",{"_index":2003,"title":{},"name":{},"text":{"31":{}},"component":{}}],["messagemonitor(config.messagemonitor(simplequerybus.class",{"_index":3046,"title":{},"name":{},"text":{"54":{}},"component":{}}],["messagemonitor(metricregistry.registercommandbus(\"commandbu",{"_index":2012,"title":{},"name":{},"text":{"31":{}},"component":{}}],["messagemonitor(metricregistry.registereventbus(\"eventstor",{"_index":2320,"title":{},"name":{},"text":{"35":{},"115":{}},"component":{}}],["messagemonitor(metricregistry.registerquerybus(\"querybu",{"_index":3049,"title":{},"name":{},"text":{"54":{}},"component":{}}],["messagemonitorfactori",{"_index":2851,"title":{},"name":{},"text":{"50":{},"79":{}},"component":{}}],["messagenamespanattributesprovid",{"_index":2942,"title":{},"name":{},"text":{"52":{}},"component":{}}],["messageoriginprovid",{"_index":2589,"title":{"43-2":{}},"name":{},"text":{"43":{},"49":{}},"component":{}}],["messages.adoc",{"_index":1133,"title":{},"name":{},"text":{"11":{}},"component":{}}],["messages.context",{"_index":6967,"title":{},"name":{},"text":{"172":{}},"component":{}}],["messageseri",{"_index":1412,"title":{},"name":{},"text":{"24":{}},"component":{}}],["messagesourc",{"_index":5070,"title":{},"name":{},"text":{"80":{}},"component":{}}],["messagesource.createtokenat(instant.parse(\"20020",{"_index":5071,"title":{},"name":{},"text":{"80":{}},"component":{}}],["messagesource.createtokensinc",{"_index":5069,"title":{},"name":{},"text":{"80":{}},"component":{}}],["messagesource.createtokensince(duration.ofdays(31",{"_index":5076,"title":{},"name":{},"text":{"80":{}},"component":{}}],["messagetag.java",{"_index":5999,"title":{},"name":{},"text":{"130":{}},"component":{}}],["messagetim",{"_index":2864,"title":{},"name":{},"text":{"50":{}},"component":{}}],["messagetimermonitor",{"_index":2822,"title":{},"name":{},"text":{"50":{}},"component":{}}],["messagetimermonitor.buildmonitor",{"_index":2865,"title":{},"name":{},"text":{"50":{}},"component":{}}],["messagetyp",{"_index":2694,"title":{},"name":{},"text":{"44":{}},"component":{}}],["messagetypespanattributesprovid",{"_index":2944,"title":{},"name":{},"text":{"52":{}},"component":{}}],["messagewithpayload(equalto(new",{"_index":4555,"title":{},"name":{},"text":{"66":{}},"component":{}}],["message’",{"_index":2532,"title":{},"name":{},"text":{"40":{},"42":{},"43":{},"66":{},"106":{},"117":{},"122":{}},"component":{}}],["messaging.log",{"_index":6898,"title":{},"name":{},"text":{"172":{}},"component":{}}],["messaging_onli",{"_index":6133,"title":{},"name":{},"text":{"139":{},"146":{},"149":{},"171":{}},"component":{}}],["met",{"_index":2142,"title":{},"name":{},"text":{"32":{},"66":{},"80":{},"256":{},"282":{}},"component":{}}],["meta",{"_index":1200,"title":{"96":{},"40-1":{}},"name":{},"text":{"17":{},"19":{},"25":{},"31":{},"35":{},"40":{},"43":{},"49":{},"56":{},"66":{},"92":{},"93":{},"95":{},"96":{},"97":{},"117":{},"199":{}},"component":{"96":{}}}],["metadata",{"_index":609,"title":{},"name":{},"text":{"3":{},"8":{},"24":{},"27":{},"31":{},"35":{},"36":{},"38":{},"40":{},"42":{},"43":{},"44":{},"45":{},"49":{},"52":{},"60":{},"61":{},"66":{},"75":{},"79":{},"80":{},"81":{},"93":{},"97":{},"106":{},"109":{},"117":{},"122":{},"141":{},"150":{},"159":{},"162":{},"170":{},"184":{},"185":{},"196":{},"212":{},"213":{},"214":{},"216":{}},"component":{}}],["metadata.with(\"mykey",{"_index":2536,"title":{},"name":{},"text":{"40":{}},"component":{}}],["metadata.with(key",{"_index":2551,"title":{},"name":{},"text":{"40":{}},"component":{}}],["metadatakey",{"_index":5133,"title":{},"name":{},"text":{"80":{},"93":{}},"component":{}}],["metadatakey(\"mi",{"_index":2113,"title":{},"name":{},"text":{"31":{}},"component":{}}],["metadataroutingstrategi",{"_index":1921,"title":{"31-22":{}},"name":{},"text":{"31":{}},"component":{}}],["metadataroutingstrategy.build",{"_index":2112,"title":{},"name":{},"text":{"31":{}},"component":{}}],["metadatasequencingpolici",{"_index":3476,"title":{},"name":{},"text":{"60":{},"80":{},"81":{}},"component":{}}],["metadataspanattributesprovid",{"_index":2949,"title":{},"name":{},"text":{"52":{}},"component":{}}],["metadatavalu",{"_index":1954,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{}}],["metadatavalue(\"userid",{"_index":1980,"title":{},"name":{},"text":{"31":{}},"component":{}}],["meterregistri",{"_index":2815,"title":{},"name":{},"text":{"50":{}},"component":{}}],["methd",{"_index":7869,"title":{},"name":{},"text":{"277":{}},"component":{}}],["method",{"_index":829,"title":{"41-2":{},"44-14":{},"44-15":{},"44-16":{},"44-17":{},"278-6":{}},"name":{},"text":{"5":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"85":{},"88":{},"89":{},"91":{},"93":{},"96":{},"101":{},"103":{},"109":{},"111":{},"112":{},"113":{},"114":{},"115":{},"117":{},"122":{},"129":{},"143":{},"144":{},"159":{},"173":{},"212":{},"221":{},"229":{},"230":{},"238":{},"270":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["method.getparametercount",{"_index":3570,"title":{},"name":{},"text":{"60":{}},"component":{}}],["method.getparameterstypes().length",{"_index":3569,"title":{},"name":{},"text":{"60":{}},"component":{}}],["method’",{"_index":5687,"title":{},"name":{},"text":{"112":{}},"component":{}}],["metric",{"_index":844,"title":{"50":{},"177":{},"179":{},"255":{},"23-11":{},"51-2":{},"137-11":{},"151-15":{},"171-6":{},"177-1":{},"177-2":{},"177-3":{},"177-4":{},"177-5":{},"177-6":{},"255-3":{},"255-4":{},"255-5":{},"255-6":{},"256-6":{}},"name":{"50":{},"177":{},"179":{},"255":{}},"text":{"5":{},"22":{},"23":{},"48":{},"50":{},"51":{},"52":{},"60":{},"137":{},"138":{},"151":{},"171":{},"172":{},"176":{},"177":{},"178":{},"179":{},"181":{},"196":{},"231":{},"236":{},"239":{},"241":{},"247":{},"253":{},"254":{},"255":{},"256":{},"261":{},"270":{},"271":{}},"component":{}}],["metricconfigurer(meterregistri",{"_index":2846,"title":{},"name":{},"text":{"50":{}},"component":{}}],["metricregistri",{"_index":2009,"title":{},"name":{},"text":{"31":{},"35":{},"50":{},"54":{},"115":{}},"component":{}}],["metricsconfig",{"_index":2845,"title":{},"name":{},"text":{"50":{}},"component":{}}],["metricsconfigur",{"_index":2826,"title":{},"name":{},"text":{"50":{}},"component":{}}],["mgathier",{"_index":3227,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["michaelbub",{"_index":4207,"title":{},"name":{},"text":{"61":{}},"component":{}}],["micro)servic",{"_index":1330,"title":{},"name":{},"text":{"24":{}},"component":{}}],["micromet",{"_index":1224,"title":{"23-12":{},"50-4":{}},"name":{},"text":{"23":{},"50":{},"60":{},"275":{}},"component":{}}],["micronaut",{"_index":4183,"title":{},"name":{},"text":{"61":{}},"component":{}}],["microservic",{"_index":134,"title":{},"name":{},"text":{"2":{},"5":{},"52":{},"197":{},"267":{},"270":{},"273":{},"274":{},"276":{}},"component":{}}],["microservices/rent",{"_index":7685,"title":{},"name":{},"text":{"267":{},"273":{}},"component":{}}],["middl",{"_index":5222,"title":{},"name":{},"text":{"80":{}},"component":{}}],["midnight",{"_index":5329,"title":{},"name":{},"text":{"85":{}},"component":{}}],["migrat",{"_index":690,"title":{"20":{},"153":{},"4-3":{},"19-3":{},"26-10":{}},"name":{"20":{}},"text":{"3":{},"4":{},"15":{},"20":{},"21":{},"23":{},"26":{},"29":{},"60":{},"61":{},"66":{},"134":{},"138":{},"151":{},"153":{},"154":{},"155":{},"184":{},"203":{},"223":{}},"component":{}}],["migration.jar",{"_index":714,"title":{},"name":{},"text":{"4":{},"154":{}},"component":{}}],["migration:latest",{"_index":1661,"title":{},"name":{},"text":{"26":{}},"component":{}}],["mikelham",{"_index":3684,"title":{},"name":{},"text":{"60":{}},"component":{}}],["mileston",{"_index":3514,"title":{},"name":{},"text":{"60":{}},"component":{}}],["million",{"_index":7225,"title":{},"name":{},"text":{"195":{}},"component":{}}],["millisecond",{"_index":2040,"title":{},"name":{},"text":{"31":{},"63":{},"80":{},"104":{},"107":{},"151":{},"172":{},"191":{},"255":{},"270":{}},"component":{}}],["min",{"_index":6942,"title":{},"name":{},"text":{"172":{},"194":{},"239":{},"271":{}},"component":{}}],["mind",{"_index":2452,"title":{},"name":{},"text":{"38":{},"61":{},"74":{},"80":{},"101":{},"108":{},"144":{},"278":{}},"component":{}}],["mini",{"_index":953,"title":{},"name":{},"text":{"7":{}},"component":{}}],["minim",{"_index":1352,"title":{},"name":{},"text":{"24":{},"61":{},"80":{},"117":{},"137":{},"138":{},"143":{},"151":{},"172":{}},"component":{}}],["minimin",{"_index":7589,"title":{},"name":{},"text":{"239":{}},"component":{}}],["minimum",{"_index":396,"title":{},"name":{},"text":{"3":{},"172":{},"184":{},"194":{},"203":{},"255":{},"270":{},"271":{},"278":{}},"component":{}}],["minor",{"_index":3195,"title":{"61":{},"138":{}},"name":{"61":{},"138":{}},"text":{"59":{},"60":{},"61":{},"135":{},"241":{},"256":{}},"component":{}}],["minut",{"_index":2900,"title":{},"name":{},"text":{"51":{},"71":{},"88":{},"140":{},"151":{},"169":{},"177":{},"195":{},"236":{},"239":{},"241":{},"255":{},"256":{},"270":{}},"component":{}}],["minute(timestamp",{"_index":7209,"title":{},"name":{},"text":{"192":{}},"component":{}}],["mirror",{"_index":4810,"title":{},"name":{},"text":{"77":{}},"component":{}}],["misbehav",{"_index":5213,"title":{},"name":{},"text":{"80":{},"268":{}},"component":{}}],["misbehavior",{"_index":7696,"title":{},"name":{},"text":{"269":{}},"component":{}}],["misconcept",{"_index":4180,"title":{},"name":{},"text":{"61":{}},"component":{}}],["misconfigur",{"_index":3268,"title":{},"name":{},"text":{"60":{}},"component":{}}],["misfir",{"_index":2246,"title":{},"name":{},"text":{"33":{}},"component":{}}],["misinterpret",{"_index":4777,"title":{},"name":{},"text":{"77":{}},"component":{}}],["mismatch",{"_index":3409,"title":{},"name":{},"text":{"60":{},"142":{}},"component":{}}],["miss",{"_index":1801,"title":{},"name":{},"text":{"28":{},"33":{},"60":{},"61":{},"66":{},"71":{},"79":{},"80":{},"93":{},"103":{},"138":{},"140":{},"142":{},"213":{},"216":{}},"component":{}}],["mistak",{"_index":6176,"title":{},"name":{},"text":{"141":{},"170":{}},"component":{}}],["misus",{"_index":6314,"title":{},"name":{},"text":{"144":{}},"component":{}}],["mitig",{"_index":4046,"title":{},"name":{},"text":{"61":{},"107":{},"144":{}},"component":{}}],["mix",{"_index":972,"title":{"8-9":{}},"name":{},"text":{"8":{},"130":{},"144":{}},"component":{}}],["mixtur",{"_index":6320,"title":{},"name":{},"text":{"144":{}},"component":{}}],["mkdir",{"_index":365,"title":{},"name":{},"text":{"3":{},"163":{},"165":{},"184":{}},"component":{}}],["mm",{"_index":7165,"title":{},"name":{},"text":{"183":{}},"component":{}}],["mmap",{"_index":6888,"title":{},"name":{},"text":{"172":{}},"component":{}}],["mnegacz",{"_index":3663,"title":{},"name":{},"text":{"60":{}},"component":{}}],["mock",{"_index":1952,"title":{"199-2":{},"199-4":{},"199-5":{},"199-8":{},"199-9":{},"199-12":{},"199-13":{}},"name":{},"text":{"31":{},"68":{},"199":{}},"component":{}}],["mockito",{"_index":4600,"title":{},"name":{},"text":{"68":{}},"component":{}}],["mode",{"_index":673,"title":{"80-18":{},"81-7":{},"137-19":{}},"name":{},"text":{"3":{},"60":{},"61":{},"77":{},"79":{},"80":{},"98":{},"107":{},"108":{},"127":{},"137":{},"138":{},"142":{},"148":{},"171":{},"184":{},"185":{},"243":{},"270":{}},"component":{}}],["mode/ev",{"_index":6051,"title":{},"name":{},"text":{"137":{}},"component":{}}],["mode=non",{"_index":7760,"title":{},"name":{},"text":{"273":{}},"component":{}}],["model",{"_index":1221,"title":{"277":{},"23-3":{},"29-7":{},"66-1":{},"275-3":{},"278-4":{}},"name":{},"text":{"23":{},"26":{},"29":{},"30":{},"35":{},"51":{},"56":{},"57":{},"58":{},"60":{},"61":{},"66":{},"74":{},"75":{},"79":{},"80":{},"81":{},"143":{},"156":{},"254":{},"270":{},"275":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["modern",{"_index":6035,"title":{},"name":{},"text":{"137":{}},"component":{}}],["modif",{"_index":555,"title":{},"name":{},"text":{"3":{},"29":{},"31":{},"137":{},"144":{},"184":{}},"component":{}}],["modifi",{"_index":1990,"title":{},"name":{},"text":{"31":{},"40":{},"60":{},"75":{},"76":{},"90":{},"101":{},"122":{},"169":{},"270":{},"276":{},"277":{}},"component":{}}],["modul",{"_index":1099,"title":{"23":{},"23-1":{},"23-15":{},"275-2":{},"275-3":{},"276-4":{},"276-5":{},"276-7":{}},"name":{"23":{}},"text":{"9":{},"22":{},"23":{},"25":{},"26":{},"31":{},"35":{},"37":{},"47":{},"50":{},"51":{},"52":{},"60":{},"61":{},"66":{},"67":{},"68":{},"71":{},"79":{},"85":{},"99":{},"101":{},"104":{},"105":{},"121":{},"128":{},"147":{},"262":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["modular",{"_index":2441,"title":{},"name":{},"text":{"37":{},"261":{},"276":{},"278":{}},"component":{}}],["moduleconfigur",{"_index":5551,"title":{},"name":{},"text":{"104":{}},"component":{}}],["modulehandl",{"_index":4848,"title":{},"name":{},"text":{"79":{}},"component":{}}],["modules/compon",{"_index":7674,"title":{},"name":{},"text":{"266":{}},"component":{}}],["modules/depend",{"_index":1247,"title":{},"name":{},"text":{"23":{}},"component":{}}],["module’",{"_index":4314,"title":{},"name":{},"text":{"61":{},"270":{},"271":{}},"component":{}}],["moment",{"_index":2099,"title":{},"name":{},"text":{"31":{},"51":{},"68":{},"71":{},"79":{},"80":{},"95":{},"139":{},"151":{},"216":{},"255":{}},"component":{}}],["mongo",{"_index":1228,"title":{"23-27":{},"23-28":{}},"name":{},"text":{"23":{},"35":{},"79":{},"80":{},"89":{},"114":{},"116":{}},"component":{}}],["mongo.ev",{"_index":5712,"title":{},"name":{},"text":{"116":{}},"component":{}}],["mongo.saga",{"_index":5715,"title":{},"name":{},"text":{"116":{}},"component":{}}],["mongo.token",{"_index":5714,"title":{},"name":{},"text":{"116":{}},"component":{}}],["mongocli",{"_index":4407,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["mongodatabase(cli",{"_index":2369,"title":{},"name":{},"text":{"35":{}},"component":{}}],["mongodatabasefactori",{"_index":5711,"title":{},"name":{},"text":{"116":{}},"component":{}}],["mongodb",{"_index":35,"title":{"113":{},"114":{}},"name":{},"text":{"1":{},"23":{},"35":{},"63":{},"65":{},"79":{},"84":{},"114":{},"115":{},"116":{}},"component":{"113":{},"114":{},"115":{},"116":{}}}],["mongodb://localhost:27017/test",{"_index":5718,"title":{},"name":{},"text":{"116":{}},"component":{}}],["mongoeventstorageengin",{"_index":2267,"title":{"35-13":{}},"name":{},"text":{"35":{},"114":{},"115":{}},"component":{}}],["mongoeventstorageengine.build",{"_index":2365,"title":{},"name":{},"text":{"35":{},"115":{}},"component":{}}],["mongosagastor",{"_index":4360,"title":{"63-9":{},"65-7":{}},"name":{},"text":{"63":{},"65":{},"116":{}},"component":{}}],["mongosagastoreto",{"_index":4418,"title":{},"name":{},"text":{"63":{}},"component":{}}],["mongosequenceddeadletterqueu",{"_index":4894,"title":{},"name":{},"text":{"79":{}},"component":{}}],["mongosequenceddeadletterqueue.build",{"_index":5696,"title":{},"name":{},"text":{"113":{}},"component":{}}],["mongotempl",{"_index":2364,"title":{},"name":{},"text":{"35":{},"63":{},"65":{},"113":{}},"component":{}}],["mongotemplate(defaultmongotemplate.build",{"_index":2368,"title":{},"name":{},"text":{"35":{}},"component":{}}],["mongotemplate(mongotempl",{"_index":2366,"title":{},"name":{},"text":{"35":{},"113":{}},"component":{}}],["mongotemplate(springmongotemplate.build",{"_index":5706,"title":{},"name":{},"text":{"115":{}},"component":{}}],["mongotokenstor",{"_index":5102,"title":{},"name":{},"text":{"80":{},"116":{}},"component":{}}],["mongotransactionmanag",{"_index":5708,"title":{},"name":{},"text":{"116":{}},"component":{}}],["monitor",{"_index":749,"title":{"48":{},"51":{},"180":{},"181":{},"241":{},"256":{},"268":{},"5-7":{},"79-30":{},"271-6":{},"273-5":{}},"name":{"180":{},"241":{},"256":{}},"text":{"5":{},"8":{},"17":{},"19":{},"22":{},"23":{},"47":{},"48":{},"50":{},"51":{},"52":{},"58":{},"66":{},"79":{},"137":{},"144":{},"145":{},"151":{},"162":{},"164":{},"169":{},"171":{},"176":{},"180":{},"181":{},"229":{},"234":{},"235":{},"236":{},"239":{},"240":{},"241":{},"242":{},"243":{},"245":{},"255":{},"256":{},"258":{},"260":{},"261":{},"263":{},"264":{},"265":{},"266":{},"269":{},"270":{},"271":{},"272":{},"274":{}},"component":{}}],["monitor/met",{"_index":2863,"title":{},"name":{},"text":{"50":{}},"component":{}}],["mono",{"_index":3111,"title":{},"name":{},"text":{"56":{},"122":{},"143":{}},"component":{}}],["mono#empti",{"_index":5824,"title":{},"name":{},"text":{"122":{}},"component":{}}],["mono.subscribercontext",{"_index":5901,"title":{},"name":{},"text":{"122":{}},"component":{}}],["monolith",{"_index":7805,"title":{},"name":{},"text":{"276":{},"278":{},"280":{},"281":{}},"component":{}}],["monowrapp",{"_index":3567,"title":{},"name":{},"text":{"60":{}},"component":{}}],["month",{"_index":7226,"title":{},"name":{},"text":{"195":{},"245":{}},"component":{}}],["month(timestamp",{"_index":7212,"title":{},"name":{},"text":{"192":{}},"component":{}}],["monthli",{"_index":747,"title":{"5-6":{}},"name":{},"text":{"5":{}},"component":{}}],["more",{"_index":264,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"16":{},"19":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"70":{},"71":{},"73":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"85":{},"86":{},"93":{},"98":{},"101":{},"103":{},"104":{},"106":{},"117":{},"121":{},"124":{},"126":{},"130":{},"131":{},"137":{},"139":{},"142":{},"143":{},"144":{},"146":{},"147":{},"151":{},"158":{},"162":{},"172":{},"176":{},"184":{},"185":{},"192":{},"193":{},"199":{},"205":{},"213":{},"214":{},"216":{},"223":{},"229":{},"234":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"245":{},"247":{},"251":{},"253":{},"254":{},"256":{},"261":{},"266":{},"269":{},"270":{},"271":{},"274":{},"277":{},"278":{},"282":{}},"component":{}}],["moreov",{"_index":2456,"title":{},"name":{},"text":{"38":{}},"component":{}}],["morlack",{"_index":3357,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["mostli",{"_index":2138,"title":{},"name":{},"text":{"31":{},"38":{},"68":{}},"component":{}}],["motiv",{"_index":4672,"title":{},"name":{},"text":{"71":{}},"component":{}}],["mount",{"_index":274,"title":{},"name":{},"text":{"3":{},"151":{},"184":{}},"component":{}}],["mountpath",{"_index":633,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["mous",{"_index":7577,"title":{},"name":{},"text":{"232":{},"270":{}},"component":{}}],["move",{"_index":1600,"title":{"151-14":{},"254-5":{}},"name":{},"text":{"26":{},"35":{},"38":{},"52":{},"60":{},"61":{},"66":{},"68":{},"79":{},"80":{},"83":{},"112":{},"125":{},"140":{},"142":{},"144":{},"148":{},"151":{},"155":{},"172":{},"198":{},"205":{},"214":{},"240":{},"241":{},"254":{},"270":{},"276":{},"278":{},"281":{},"282":{}},"component":{}}],["move_event_processor_seg",{"_index":6699,"title":{},"name":{},"text":{"164":{}},"component":{}}],["movement",{"_index":6545,"title":{},"name":{},"text":{"155":{}},"component":{}}],["mp.fortenant(tenantdescriptor.tenantwithid(ten",{"_index":5778,"title":{},"name":{},"text":{"117":{}},"component":{}}],["ms",{"_index":4268,"title":{},"name":{},"text":{"61":{},"172":{},"256":{},"271":{},"277":{},"280":{}},"component":{}}],["msg",{"_index":5911,"title":{},"name":{},"text":{"122":{}},"component":{}}],["msg,result",{"_index":5924,"title":{},"name":{},"text":{"122":{}},"component":{}}],["msg.andmetadata(collections.singletonmap(\"key1",{"_index":5896,"title":{},"name":{},"text":{"122":{}},"component":{}}],["msgmono",{"_index":5894,"title":{},"name":{},"text":{"122":{}},"component":{}}],["msgmono.filterwhen(v",{"_index":5900,"title":{},"name":{},"text":{"122":{}},"component":{}}],["msgmono.map(msg",{"_index":5895,"title":{},"name":{},"text":{"122":{}},"component":{}}],["much",{"_index":1397,"title":{},"name":{},"text":{"24":{},"25":{},"31":{},"33":{},"35":{},"71":{},"91":{},"218":{},"241":{},"273":{},"278":{}},"component":{}}],["multi",{"_index":187,"title":{"77":{},"120":{},"146":{},"206":{},"276":{},"23-29":{},"23-30":{},"80-59":{},"117-5":{},"117-13":{},"146-5":{}},"name":{"77":{},"120":{},"146":{},"206":{}},"text":{"2":{},"23":{},"28":{},"31":{},"35":{},"42":{},"60":{},"70":{},"77":{},"80":{},"117":{},"119":{},"120":{},"137":{},"145":{},"146":{},"149":{},"185":{},"276":{}},"component":{}}],["multicast",{"_index":5464,"title":{},"name":{},"text":{"101":{}},"component":{}}],["multicorrelationdataprovid",{"_index":2591,"title":{"43-4":{}},"name":{},"text":{"43":{}},"component":{}}],["multimessagemonitor<>(messagecount",{"_index":2866,"title":{},"name":{},"text":{"50":{}},"component":{}}],["multipart/form",{"_index":6977,"title":{},"name":{},"text":{"172":{}},"component":{}}],["multipl",{"_index":335,"title":{"35-20":{},"57-5":{},"80-66":{},"146-4":{}},"name":{},"text":{"3":{},"5":{},"24":{},"29":{},"31":{},"33":{},"35":{},"38":{},"42":{},"43":{},"46":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"70":{},"71":{},"74":{},"77":{},"79":{},"80":{},"81":{},"85":{},"91":{},"104":{},"112":{},"119":{},"122":{},"137":{},"138":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"149":{},"150":{},"151":{},"154":{},"155":{},"158":{},"161":{},"165":{},"167":{},"171":{},"184":{},"185":{},"200":{},"203":{},"206":{},"208":{},"212":{},"213":{},"216":{},"217":{},"218":{},"223":{},"258":{},"270":{},"273":{},"274":{},"276":{},"278":{}},"component":{}}],["multipleinstanceof(cardsummary.class",{"_index":3134,"title":{},"name":{},"text":{"56":{}},"component":{}}],["multipleinstancesresponsetyp",{"_index":3539,"title":{},"name":{},"text":{"60":{}},"component":{}}],["multipli",{"_index":7623,"title":{},"name":{},"text":{"255":{}},"component":{}}],["multispanfactori",{"_index":2924,"title":{},"name":{},"text":{"52":{},"60":{}},"component":{}}],["multistreamablemessagesourc",{"_index":3746,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["multistreamablemessagesource.build",{"_index":5254,"title":{},"name":{},"text":{"80":{}},"component":{}}],["multit",{"_index":3443,"title":{},"name":{},"text":{"60":{}},"component":{}}],["multiten",{"_index":39,"title":{},"name":{},"text":{"1":{},"23":{},"119":{}},"component":{"117":{},"118":{},"119":{},"120":{}}}],["multitenantcommandbu",{"_index":5803,"title":{},"name":{},"text":{"120":{}},"component":{}}],["multitenantdatasourcemanag",{"_index":5808,"title":{},"name":{},"text":{"120":{}},"component":{}}],["multitenantdeadletterprocessor",{"_index":5760,"title":{},"name":{},"text":{"117":{}},"component":{}}],["multitenantdeadletterprocessor.fortenant(tenantid",{"_index":5769,"title":{},"name":{},"text":{"117":{}},"component":{}}],["multitenanteventprocessor",{"_index":5758,"title":{},"name":{},"text":{"117":{},"120":{}},"component":{}}],["multitenanteventprocessorcontrolservic",{"_index":5807,"title":{},"name":{},"text":{"120":{}},"component":{}}],["multitenanteventprocessorpred",{"_index":5798,"title":{},"name":{},"text":{"117":{}},"component":{}}],["multitenanteventschedul",{"_index":5779,"title":{},"name":{},"text":{"117":{},"120":{}},"component":{}}],["multitenanteventstor",{"_index":5804,"title":{},"name":{},"text":{"120":{}},"component":{}}],["multitenantquerybu",{"_index":5805,"title":{},"name":{},"text":{"120":{}},"component":{}}],["multitenantqueryupdateemitt",{"_index":5806,"title":{},"name":{},"text":{"120":{}},"component":{}}],["multitenantstreamablemessagesourceprovid",{"_index":5792,"title":{},"name":{},"text":{"117":{}},"component":{}}],["multitenantstreamablemessagesourceprovider(axonservereventstor",{"_index":5793,"title":{},"name":{},"text":{"117":{}},"component":{}}],["multitud",{"_index":3176,"title":{},"name":{},"text":{"57":{}},"component":{}}],["murat",{"_index":4270,"title":{},"name":{},"text":{"61":{}},"component":{}}],["murmur3_128",{"_index":7449,"title":{},"name":{},"text":{"203":{}},"component":{}}],["murmur3_32",{"_index":7448,"title":{},"name":{},"text":{"203":{}},"component":{}}],["mutat",{"_index":2535,"title":{},"name":{},"text":{"40":{},"52":{}},"component":{}}],["mvn",{"_index":1657,"title":{},"name":{},"text":{"26":{},"276":{},"282":{}},"component":{}}],["myaggreg",{"_index":4689,"title":{},"name":{},"text":{"71":{}},"component":{}}],["myannot",{"_index":5399,"title":{},"name":{},"text":{"93":{}},"component":{}}],["myapplic",{"_index":5949,"title":{},"name":{},"text":{"127":{}},"component":{}}],["myblockedqueri",{"_index":5920,"title":{},"name":{},"text":{"122":{}},"component":{}}],["mycommanddispatchinterceptor",{"_index":2631,"title":{},"name":{},"text":{"44":{}},"component":{}}],["mycommandhandlerinterceptor",{"_index":2656,"title":{},"name":{},"text":{"44":{}},"component":{}}],["mycommandmodeltest",{"_index":4549,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mycustomspanfactori",{"_index":2917,"title":{},"name":{},"text":{"52":{}},"component":{}}],["mydeadlin",{"_index":2155,"title":{},"name":{},"text":{"32":{}},"component":{}}],["mydeadlinepayload",{"_index":2180,"title":{},"name":{},"text":{"32":{}},"component":{}}],["mydomain.net",{"_index":7241,"title":{},"name":{},"text":{"196":{}},"component":{}}],["myenqueuepolici",{"_index":4974,"title":{},"name":{},"text":{"79":{}},"component":{}}],["myentitymanagerprovid",{"_index":2300,"title":{},"name":{},"text":{"35":{}},"component":{}}],["myeventhandlerinterceptor",{"_index":2680,"title":{},"name":{},"text":{"44":{}},"component":{}}],["myeventhandlingcompon",{"_index":2444,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mygateway",{"_index":1972,"title":{},"name":{},"text":{"31":{}},"component":{}}],["myhandl",{"_index":4845,"title":{},"name":{},"text":{"79":{}},"component":{}}],["myid",{"_index":2599,"title":{},"name":{},"text":{"43":{}},"component":{}}],["myid2",{"_index":2600,"title":{},"name":{},"text":{"43":{}},"component":{}}],["mynam",{"_index":6445,"title":{},"name":{},"text":{"147":{}},"component":{}}],["myname:mypropid1=myvalu",{"_index":6447,"title":{},"name":{},"text":{"147":{}},"component":{}}],["myname:mypropid2=myvalue2",{"_index":6448,"title":{},"name":{},"text":{"147":{}},"component":{}}],["myotherhandl",{"_index":4846,"title":{},"name":{},"text":{"79":{}},"component":{}}],["mypayload",{"_index":2543,"title":{},"name":{},"text":{"40":{}},"component":{}}],["mypersistenceunit",{"_index":2299,"title":{},"name":{},"text":{"35":{}},"component":{}}],["myprocessinggroup",{"_index":4953,"title":{},"name":{},"text":{"79":{}},"component":{}}],["mypropid1",{"_index":6449,"title":{},"name":{},"text":{"147":{}},"component":{}}],["mypropid2",{"_index":6451,"title":{},"name":{},"text":{"147":{}},"component":{}}],["myqueu",{"_index":5456,"title":{},"name":{},"text":{"100":{}},"component":{}}],["myqueuemessagesource(amqpmessageconvert",{"_index":5452,"title":{},"name":{},"text":{"100":{}},"component":{}}],["myresult",{"_index":3170,"title":{},"name":{},"text":{"57":{}},"component":{}}],["mysaga",{"_index":4413,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["mysaga.class",{"_index":4423,"title":{},"name":{},"text":{"63":{}},"component":{}}],["mysagaprocessor",{"_index":4414,"title":{},"name":{},"text":{"63":{}},"component":{}}],["mysagastor",{"_index":4428,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["mysagastore(datasourc",{"_index":4429,"title":{},"name":{},"text":{"63":{}},"component":{}}],["mysequencingpolici",{"_index":5135,"title":{},"name":{},"text":{"80":{}},"component":{}}],["mysql",{"_index":3856,"title":{},"name":{},"text":{"61":{}},"component":{}}],["mytokenstor",{"_index":5109,"title":{},"name":{},"text":{"80":{}},"component":{}}],["myvalu",{"_index":6450,"title":{},"name":{},"text":{"147":{}},"component":{}}],["myvalue3",{"_index":6452,"title":{},"name":{},"text":{"147":{}},"component":{}}],["n",{"_index":594,"title":{},"name":{},"text":{"3":{},"50":{},"61":{},"79":{},"139":{},"146":{},"171":{},"184":{},"192":{}},"component":{}}],["name",{"_index":272,"title":{"203-12":{},"203-13":{},"203-21":{},"203-45":{},"277-6":{}},"name":{},"text":{"3":{},"4":{},"5":{},"8":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"42":{},"43":{},"44":{},"45":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"83":{},"89":{},"91":{},"92":{},"93":{},"95":{},"96":{},"97":{},"98":{},"101":{},"102":{},"107":{},"108":{},"114":{},"116":{},"117":{},"122":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"146":{},"147":{},"148":{},"149":{},"151":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"169":{},"170":{},"171":{},"172":{},"173":{},"176":{},"177":{},"179":{},"184":{},"185":{},"196":{},"199":{},"200":{},"203":{},"205":{},"206":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"226":{},"231":{},"234":{},"242":{},"243":{},"244":{},"258":{},"270":{},"273":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["name.git",{"_index":1116,"title":{},"name":{},"text":{"9":{}},"component":{}}],["name/chang",{"_index":7646,"title":{},"name":{},"text":{"258":{}},"component":{}}],["name/repo",{"_index":1115,"title":{},"name":{},"text":{"9":{}},"component":{}}],["name=axon",{"_index":5494,"title":{},"name":{},"text":{"102":{}},"component":{}}],["name=pay",{"_index":7762,"title":{},"name":{},"text":{"273":{}},"component":{}}],["name=rent",{"_index":7758,"title":{},"name":{},"text":{"273":{}},"component":{}}],["name=valu",{"_index":6592,"title":{},"name":{},"text":{"161":{}},"component":{}}],["name].load",{"_index":5182,"title":{},"name":{},"text":{"80":{}},"component":{}}],["namespac",{"_index":590,"title":{},"name":{},"text":{"3":{},"25":{},"26":{},"35":{},"184":{}},"component":{}}],["name}.connection.act",{"_index":2806,"title":{},"name":{},"text":{"47":{}},"component":{}}],["name}={path",{"_index":6495,"title":{},"name":{},"text":{"151":{}},"component":{}}],["name}@{ten",{"_index":5757,"title":{},"name":{},"text":{"117":{}},"component":{}}],["name}]/token",{"_index":5052,"title":{},"name":{},"text":{"80":{}},"component":{}}],["narrow",{"_index":7722,"title":{},"name":{},"text":{"270":{}},"component":{}}],["nativ",{"_index":57,"title":{"123":{}},"name":{"123":{}},"text":{"1":{},"2":{},"23":{},"56":{},"60":{},"124":{}},"component":{}}],["natur",{"_index":959,"title":{},"name":{},"text":{"7":{},"24":{},"38":{},"60":{},"79":{},"121":{},"144":{},"165":{},"256":{}},"component":{}}],["navig",{"_index":850,"title":{"12":{}},"name":{},"text":{"5":{},"52":{},"139":{},"146":{},"158":{},"230":{},"256":{}},"component":{}}],["near",{"_index":7554,"title":{},"name":{},"text":{"224":{},"233":{},"247":{},"271":{}},"component":{}}],["nearest",{"_index":6473,"title":{},"name":{},"text":{"150":{}},"component":{}}],["nearli",{"_index":4771,"title":{},"name":{},"text":{"76":{}},"component":{}}],["necess",{"_index":3052,"title":{},"name":{},"text":{"56":{}},"component":{}}],["necessari",{"_index":1150,"title":{},"name":{},"text":{"13":{},"23":{},"25":{},"29":{},"31":{},"32":{},"36":{},"38":{},"42":{},"50":{},"52":{},"56":{},"58":{},"63":{},"66":{},"71":{},"73":{},"77":{},"79":{},"80":{},"95":{},"97":{},"124":{},"137":{},"144":{},"158":{},"171":{},"197":{},"198":{},"234":{},"236":{},"270":{},"273":{},"278":{}},"component":{}}],["necessarili",{"_index":550,"title":{},"name":{},"text":{"3":{},"26":{},"184":{}},"component":{}}],["need",{"_index":82,"title":{"2-4":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"15":{},"21":{},"23":{},"24":{},"25":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"46":{},"52":{},"53":{},"54":{},"56":{},"60":{},"62":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"74":{},"77":{},"79":{},"80":{},"83":{},"85":{},"86":{},"88":{},"89":{},"93":{},"94":{},"97":{},"100":{},"101":{},"103":{},"104":{},"107":{},"116":{},"117":{},"119":{},"122":{},"123":{},"124":{},"130":{},"137":{},"139":{},"140":{},"141":{},"143":{},"144":{},"146":{},"147":{},"148":{},"149":{},"151":{},"156":{},"157":{},"159":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"169":{},"170":{},"171":{},"173":{},"178":{},"179":{},"180":{},"183":{},"184":{},"185":{},"196":{},"198":{},"199":{},"200":{},"201":{},"203":{},"205":{},"206":{},"208":{},"209":{},"211":{},"217":{},"218":{},"223":{},"227":{},"229":{},"235":{},"237":{},"244":{},"251":{},"254":{},"255":{},"256":{},"263":{},"266":{},"267":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["neg",{"_index":6371,"title":{},"name":{},"text":{"144":{}},"component":{}}],["neighbor",{"_index":7729,"title":{},"name":{},"text":{"270":{}},"component":{}}],["nest",{"_index":2332,"title":{"52-10":{}},"name":{},"text":{"35":{},"46":{}},"component":{}}],["nestingspanfactori",{"_index":3407,"title":{},"name":{},"text":{"60":{}},"component":{}}],["net",{"_index":7259,"title":{},"name":{},"text":{"197":{}},"component":{}}],["netflix",{"_index":5980,"title":{},"name":{},"text":{"128":{}},"component":{}}],["netti",{"_index":4157,"title":{},"name":{},"text":{"61":{},"156":{}},"component":{}}],["network",{"_index":462,"title":{},"name":{},"text":{"3":{},"5":{},"56":{},"130":{},"148":{},"151":{},"156":{},"168":{},"169":{},"180":{},"184":{},"185":{},"196":{},"281":{}},"component":{}}],["networking.k8s.io/v1beta1",{"_index":666,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["neutral",{"_index":1266,"title":{},"name":{},"text":{"23":{},"50":{}},"component":{}}],["never",{"_index":1757,"title":{},"name":{},"text":{"27":{},"28":{},"31":{},"46":{},"60":{},"61":{},"71":{},"74":{},"80":{},"139":{},"149":{},"151":{},"208":{},"229":{},"244":{},"254":{},"273":{},"278":{}},"component":{}}],["nevertheless",{"_index":6142,"title":{},"name":{},"text":{"140":{},"275":{}},"component":{}}],["new",{"_index":175,"title":{"229":{},"276":{},"278":{},"5-12":{},"9-7":{},"137-8":{},"137-15":{},"137-25":{},"137-26":{},"138-24":{},"212-3":{},"212-7":{},"212-11":{},"212-15":{},"212-19":{},"278-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{},"9":{},"15":{},"21":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"40":{},"42":{},"43":{},"44":{},"45":{},"46":{},"50":{},"52":{},"53":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"88":{},"89":{},"93":{},"100":{},"101":{},"103":{},"104":{},"107":{},"117":{},"121":{},"122":{},"126":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"154":{},"156":{},"161":{},"169":{},"171":{},"172":{},"173":{},"180":{},"184":{},"185":{},"194":{},"196":{},"198":{},"199":{},"200":{},"203":{},"208":{},"209":{},"211":{},"212":{},"214":{},"218":{},"229":{},"241":{},"254":{},"256":{},"258":{},"270":{},"272":{},"274":{},"276":{},"277":{},"278":{},"279":{},"280":{},"282":{}},"component":{}}],["newcom",{"_index":906,"title":{},"name":{},"text":{"7":{}},"component":{}}],["newer",{"_index":4674,"title":{},"name":{},"text":{"71":{},"151":{}},"component":{}}],["newest",{"_index":5001,"title":{},"name":{},"text":{"80":{},"151":{}},"component":{}}],["newinst",{"_index":1865,"title":{},"name":{},"text":{"29":{}},"component":{}}],["newinstance(factorymethod",{"_index":1863,"title":{},"name":{},"text":{"29":{}},"component":{}}],["newli",{"_index":1866,"title":{},"name":{},"text":{"29":{},"60":{},"61":{},"62":{},"75":{},"138":{},"141":{},"144":{},"161":{},"170":{},"171":{},"185":{},"278":{}},"component":{}}],["newtransformation(\"mi",{"_index":6364,"title":{},"name":{},"text":{"144":{}},"component":{}}],["next",{"_index":421,"title":{},"name":{},"text":{"3":{},"26":{},"28":{},"31":{},"32":{},"36":{},"38":{},"42":{},"44":{},"47":{},"54":{},"58":{},"60":{},"68":{},"79":{},"80":{},"89":{},"91":{},"109":{},"135":{},"140":{},"151":{},"172":{},"177":{},"184":{},"185":{},"191":{},"199":{},"234":{},"245":{},"256":{},"260":{},"268":{},"270":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["nexu",{"_index":3642,"title":{},"name":{},"text":{"60":{}},"component":{}}],["nginx",{"_index":670,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["nginx.ingress.kubernetes.io/affin",{"_index":671,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["nice",{"_index":2379,"title":{},"name":{},"text":{"35":{},"61":{}},"component":{}}],["nicer",{"_index":2387,"title":{},"name":{},"text":{"35":{}},"component":{}}],["niceti",{"_index":5529,"title":{},"name":{},"text":{"104":{}},"component":{}}],["nil",{"_index":3680,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["nindex",{"_index":6858,"title":{},"name":{},"text":{"172":{}},"component":{}}],["nineti",{"_index":7726,"title":{},"name":{},"text":{"270":{}},"component":{}}],["ninetieth",{"_index":7599,"title":{},"name":{},"text":{"242":{},"255":{},"270":{},"271":{}},"component":{}}],["noargumentconstructorcreationpolicyaggregatefactori",{"_index":4068,"title":{},"name":{},"text":{"61":{}},"component":{}}],["node",{"_index":287,"title":{"129":{},"139":{},"5-4":{},"8-4":{},"80-59":{},"137-18":{},"139-1":{},"139-2":{},"139-3":{},"139-4":{},"139-5":{},"139-6":{},"149-1":{},"151-16":{},"151-17":{},"151-18":{},"151-20":{},"185-6":{},"185-7":{},"185-8":{}},"name":{"139":{}},"text":{"3":{},"4":{},"5":{},"23":{},"24":{},"61":{},"70":{},"80":{},"101":{},"126":{},"129":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"154":{},"155":{},"156":{},"159":{},"160":{},"162":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"176":{},"177":{},"178":{},"184":{},"185":{},"192":{},"196":{},"205":{},"218":{},"225":{},"229":{},"242":{},"243":{},"254":{},"255":{},"270":{},"271":{}},"component":{}}],["node.j",{"_index":101,"title":{},"name":{},"text":{"2":{},"8":{},"197":{}},"component":{}}],["nodeid",{"_index":5178,"title":{},"name":{},"text":{"80":{}},"component":{}}],["nodej",{"_index":1087,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nodelist",{"_index":7201,"title":{},"name":{},"text":{"192":{}},"component":{}}],["nodeoverview",{"_index":7007,"title":{},"name":{},"text":{"173":{}},"component":{}}],["node’",{"_index":5934,"title":{},"name":{},"text":{"126":{},"151":{}},"component":{}}],["nohandlerforcommandexcept",{"_index":1668,"title":{},"name":{},"text":{"27":{}},"component":{}}],["nohandlerforqueryexcept",{"_index":3053,"title":{},"name":{},"text":{"56":{}},"component":{}}],["noisi",{"_index":2968,"title":{},"name":{},"text":{"52":{}},"component":{}}],["non",{"_index":1273,"title":{"154":{},"36-2":{},"103-2":{},"185-3":{}},"name":{"154":{}},"text":{"23":{},"25":{},"29":{},"30":{},"31":{},"32":{},"35":{},"38":{},"39":{},"54":{},"55":{},"60":{},"61":{},"63":{},"64":{},"65":{},"71":{},"79":{},"86":{},"89":{},"103":{},"108":{},"114":{},"117":{},"121":{},"122":{},"129":{},"135":{},"137":{},"138":{},"142":{},"149":{},"151":{},"153":{},"162":{},"166":{},"172":{},"176":{},"180":{},"185":{},"194":{},"196":{},"197":{},"212":{},"229":{}},"component":{}}],["none",{"_index":479,"title":{},"name":{},"text":{"3":{},"29":{},"61":{},"63":{},"70":{},"76":{},"77":{},"107":{},"108":{},"117":{},"162":{},"172":{},"184":{},"270":{},"271":{}},"component":{}}],["nonetheless",{"_index":1795,"title":{},"name":{},"text":{"28":{},"61":{}},"component":{}}],["nonexist",{"_index":1901,"title":{},"name":{},"text":{"29":{}},"component":{}}],["nonnul",{"_index":2952,"title":{},"name":{},"text":{"52":{}},"component":{}}],["nonnull/nul",{"_index":3608,"title":{},"name":{},"text":{"60":{}},"component":{}}],["nonroot",{"_index":262,"title":{},"name":{},"text":{"3":{},"137":{},"184":{}},"component":{}}],["normal",{"_index":2902,"title":{"114-1":{}},"name":{},"text":{"51":{},"52":{},"61":{},"71":{},"76":{},"97":{},"104":{},"121":{},"139":{},"142":{},"144":{},"162":{},"163":{},"166":{},"218":{},"255":{}},"component":{}}],["north",{"_index":7567,"title":{},"name":{},"text":{"231":{}},"component":{}}],["nosql",{"_index":1300,"title":{},"name":{},"text":{"23":{},"33":{},"35":{},"117":{}},"component":{}}],["nosuchbeandefinitionexcept",{"_index":4056,"title":{},"name":{},"text":{"61":{}},"component":{}}],["notat",{"_index":4497,"title":{},"name":{},"text":{"66":{},"80":{},"81":{},"163":{}},"component":{}}],["note",{"_index":280,"title":{"59":{},"135":{},"212":{},"154-4":{},"155-4":{},"232-1":{}},"name":{"135":{},"212":{}},"text":{"3":{},"5":{},"13":{},"23":{},"24":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"41":{},"42":{},"44":{},"45":{},"46":{},"50":{},"52":{},"53":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"73":{},"74":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"84":{},"86":{},"89":{},"90":{},"96":{},"98":{},"100":{},"101":{},"104":{},"105":{},"106":{},"107":{},"108":{},"114":{},"117":{},"122":{},"124":{},"129":{},"135":{},"137":{},"140":{},"143":{},"144":{},"146":{},"147":{},"149":{},"151":{},"156":{},"159":{},"161":{},"163":{},"165":{},"167":{},"171":{},"172":{},"180":{},"184":{},"185":{},"208":{},"226":{},"255":{},"258":{},"262":{}},"component":{}}],["notempti",{"_index":2645,"title":{},"name":{},"text":{"44":{}},"component":{}}],["noteworthi",{"_index":3427,"title":{},"name":{},"text":{"60":{},"75":{}},"component":{}}],["noth",{"_index":1595,"title":{},"name":{},"text":{"26":{},"33":{},"144":{},"199":{}},"component":{}}],["notic",{"_index":2174,"title":{},"name":{},"text":{"32":{},"38":{},"60":{},"61":{},"89":{},"121":{},"122":{},"270":{}},"component":{}}],["notif",{"_index":2399,"title":{},"name":{},"text":{"36":{},"60":{},"68":{},"88":{},"121":{},"138":{},"151":{},"241":{},"271":{},"277":{},"278":{}},"component":{}}],["notifi",{"_index":847,"title":{},"name":{},"text":{"5":{},"27":{},"33":{},"46":{},"56":{},"68":{},"70":{},"73":{},"121":{},"241":{},"247":{},"253":{},"254":{},"256":{},"266":{},"277":{},"278":{},"280":{}},"component":{}}],["notificationev",{"_index":5343,"title":{},"name":{},"text":{"88":{}},"component":{}}],["notion",{"_index":3765,"title":{},"name":{},"text":{"60":{},"68":{},"122":{}},"component":{}}],["notoken",{"_index":3841,"title":{},"name":{},"text":{"61":{}},"component":{}}],["now",{"_index":171,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"28":{},"32":{},"52":{},"60":{},"61":{},"66":{},"79":{},"84":{},"90":{},"101":{},"104":{},"117":{},"135":{},"137":{},"138":{},"139":{},"140":{},"143":{},"159":{},"162":{},"184":{},"185":{},"196":{},"198":{},"199":{},"218":{},"229":{},"235":{},"267":{},"268":{},"270":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["npe",{"_index":3630,"title":{},"name":{},"text":{"60":{}},"component":{}}],["npm",{"_index":1003,"title":{},"name":{},"text":{"8":{}},"component":{}}],["npx",{"_index":1005,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nr",{"_index":6551,"title":{},"name":{},"text":{"156":{},"172":{}},"component":{}}],["ns",{"_index":595,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["null",{"_index":1712,"title":{},"name":{},"text":{"27":{},"31":{},"38":{},"44":{},"45":{},"51":{},"60":{},"61":{},"66":{},"71":{},"77":{},"79":{},"80":{},"81":{},"89":{},"108":{},"122":{},"159":{},"166":{},"277":{}},"component":{}}],["null/tru",{"_index":7222,"title":{},"name":{},"text":{"194":{}},"component":{}}],["nullabl",{"_index":2754,"title":{},"name":{},"text":{"45":{},"79":{}},"component":{}}],["nullpointerexcept",{"_index":3421,"title":{},"name":{},"text":{"60":{},"61":{},"79":{},"88":{}},"component":{}}],["number",{"_index":692,"title":{},"name":{},"text":{"3":{},"5":{},"23":{},"27":{},"29":{},"31":{},"35":{},"36":{},"38":{},"42":{},"45":{},"50":{},"51":{},"52":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"70":{},"71":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"97":{},"101":{},"104":{},"108":{},"114":{},"122":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"154":{},"155":{},"156":{},"158":{},"165":{},"172":{},"176":{},"177":{},"184":{},"190":{},"191":{},"192":{},"194":{},"200":{},"203":{},"205":{},"209":{},"226":{},"229":{},"239":{},"242":{},"243":{},"245":{},"251":{},"254":{},"255":{},"256":{},"261":{},"270":{},"271":{},"278":{}},"component":{}}],["numer",{"_index":574,"title":{},"name":{},"text":{"3":{},"60":{},"184":{}},"component":{}}],["o",{"_index":482,"title":{},"name":{},"text":{"3":{},"146":{},"161":{},"167":{},"171":{},"184":{}},"component":{}}],["o.s.boot.docker.compose.core.dockercli",{"_index":8033,"title":{},"name":{},"text":{"281":{}},"component":{}}],["o/",{"_index":6571,"title":{},"name":{},"text":{"157":{}},"component":{}}],["oauth",{"_index":157,"title":{"165":{},"165-1":{},"165-2":{}},"name":{},"text":{"2":{},"4":{},"165":{},"168":{},"244":{}},"component":{}}],["oauth2",{"_index":296,"title":{"244-1":{}},"name":{"165":{}},"text":{"3":{},"162":{},"165":{},"167":{},"184":{},"244":{}},"component":{}}],["oauth2/author",{"_index":6777,"title":{},"name":{},"text":{"165":{}},"component":{}}],["object",{"_index":1345,"title":{"144-1":{}},"name":{},"text":{"24":{},"27":{},"28":{},"31":{},"35":{},"36":{},"37":{},"38":{},"40":{},"42":{},"43":{},"44":{},"53":{},"57":{},"61":{},"62":{},"63":{},"66":{},"68":{},"71":{},"73":{},"75":{},"77":{},"79":{},"80":{},"93":{},"112":{},"140":{},"150":{},"163":{},"172":{},"203":{},"210":{},"213":{},"215":{},"216":{},"221":{},"236":{},"255":{},"277":{}},"component":{}}],["object#tostr",{"_index":4340,"title":{},"name":{},"text":{"62":{}},"component":{}}],["object`",{"_index":4760,"title":{},"name":{},"text":{"75":{},"78":{}},"component":{}}],["objectclass=group)(member={0",{"_index":6643,"title":{},"name":{},"text":{"163":{}},"component":{}}],["objectclass=inetorgperson)(uid={0",{"_index":6641,"title":{},"name":{},"text":{"163":{}},"component":{}}],["objectmapp",{"_index":1491,"title":{},"name":{},"text":{"24":{},"60":{}},"component":{}}],["objectnod",{"_index":1517,"title":{},"name":{},"text":{"24":{},"38":{},"60":{}},"component":{}}],["object’",{"_index":7549,"title":{},"name":{},"text":{"221":{}},"component":{}}],["observ",{"_index":115,"title":{},"name":{},"text":{"2":{},"52":{},"56":{},"97":{},"137":{},"151":{},"196":{},"208":{},"212":{},"241":{},"261":{}},"component":{}}],["obsolet",{"_index":2159,"title":{},"name":{},"text":{"32":{},"34":{}},"component":{}}],["obtain",{"_index":1234,"title":{},"name":{},"text":{"23":{},"35":{},"38":{},"46":{},"52":{},"66":{},"70":{},"143":{},"221":{}},"component":{}}],["obviou",{"_index":5054,"title":{},"name":{},"text":{"80":{}},"component":{}}],["obvious",{"_index":4235,"title":{},"name":{},"text":{"61":{}},"component":{}}],["occas",{"_index":1391,"title":{},"name":{},"text":{"24":{},"79":{}},"component":{}}],["occasion",{"_index":2416,"title":{},"name":{},"text":{"36":{},"151":{}},"component":{}}],["occupi",{"_index":6311,"title":{},"name":{},"text":{"144":{}},"component":{}}],["occur",{"_index":1475,"title":{},"name":{},"text":{"24":{},"28":{},"31":{},"33":{},"42":{},"46":{},"50":{},"61":{},"66":{},"70":{},"71":{},"76":{},"79":{},"80":{},"90":{},"97":{},"107":{},"212":{},"240":{},"241":{}},"component":{}}],["occurr",{"_index":2421,"title":{},"name":{},"text":{"37":{},"61":{}},"component":{}}],["odd",{"_index":6469,"title":{},"name":{},"text":{"149":{}},"component":{}}],["offer",{"_index":84,"title":{"2-5":{}},"name":{},"text":{"33":{},"35":{},"79":{},"83":{},"111":{},"121":{},"122":{},"137":{},"139":{},"144":{},"146":{},"234":{},"245":{},"260":{},"262":{},"265":{},"270":{},"278":{}},"component":{}}],["offset",{"_index":5562,"title":{"203-46":{}},"name":{},"text":{"104":{},"200":{},"216":{}},"component":{}}],["oftentim",{"_index":2085,"title":{},"name":{},"text":{"31":{}},"component":{}}],["oidc",{"_index":6763,"title":{},"name":{},"text":{"165":{},"244":{}},"component":{}}],["oir",{"_index":8007,"title":{},"name":{},"text":{"281":{}},"component":{}}],["ok",{"_index":6112,"title":{},"name":{},"text":{"138":{},"140":{},"277":{},"280":{}},"component":{}}],["old",{"_index":717,"title":{},"name":{},"text":{"4":{},"29":{},"35":{},"38":{},"60":{},"61":{},"71":{},"106":{},"137":{},"139":{},"144":{},"146":{},"151":{},"172":{}},"component":{}}],["older",{"_index":1267,"title":{"143-6":{}},"name":{},"text":{"23":{},"139":{},"143":{},"144":{},"151":{}},"component":{}}],["oldest",{"_index":4834,"title":{"79-20":{},"79-21":{}},"name":{},"text":{"79":{},"80":{},"151":{}},"component":{}}],["oldest/th",{"_index":4999,"title":{},"name":{},"text":{"80":{}},"component":{}}],["oldnam",{"_index":6462,"title":{},"name":{},"text":{"148":{}},"component":{}}],["olibutzki",{"_index":3355,"title":{},"name":{},"text":{"60":{}},"component":{}}],["omit",{"_index":1317,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"28":{},"29":{},"31":{},"35":{},"36":{},"37":{},"38":{},"44":{},"52":{},"54":{},"57":{},"63":{},"65":{},"71":{},"73":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"88":{},"89":{},"93":{},"113":{},"115":{},"141":{},"148":{},"159":{}},"component":{}}],["on",{"_index":244,"title":{"35-20":{}},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"9":{},"11":{},"13":{},"15":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"40":{},"42":{},"43":{},"44":{},"46":{},"47":{},"52":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"70":{},"71":{},"74":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"83":{},"85":{},"89":{},"101":{},"103":{},"104":{},"106":{},"107":{},"112":{},"117":{},"126":{},"129":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"154":{},"158":{},"162":{},"167":{},"169":{},"171":{},"172":{},"173":{},"176":{},"183":{},"184":{},"185":{},"196":{},"198":{},"199":{},"201":{},"203":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"218":{},"229":{},"234":{},"241":{},"247":{},"251":{},"254":{},"255":{},"256":{},"258":{},"265":{},"266":{},"270":{},"271":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["on(bikeregisteredev",{"_index":7863,"title":{},"name":{},"text":{"277":{}},"component":{}}],["on(cardcancelledev",{"_index":5240,"title":{},"name":{},"text":{"80":{}},"component":{}}],["on(cardissuedev",{"_index":4755,"title":{},"name":{},"text":{"75":{},"80":{}},"component":{}}],["on(cardredeemedev",{"_index":4798,"title":{},"name":{},"text":{"77":{},"80":{},"83":{}},"component":{}}],["on(cardreimbursedev",{"_index":4802,"title":{},"name":{},"text":{"77":{},"78":{}},"component":{}}],["on(ev",{"_index":5690,"title":{},"name":{},"text":{"112":{},"117":{}},"component":{}}],["on(expiringcardexpiredev",{"_index":5327,"title":{},"name":{},"text":{"85":{}},"component":{}}],["on(expiringcardissuedev",{"_index":5325,"title":{},"name":{},"text":{"85":{}},"component":{}}],["on(mydeadlinepayload",{"_index":2187,"title":{},"name":{},"text":{"32":{}},"component":{}}],["on(redeemedevt",{"_index":3082,"title":{},"name":{},"text":{"56":{}},"component":{}}],["on(someev",{"_index":2448,"title":{},"name":{},"text":{"37":{},"79":{}},"component":{}}],["onboard",{"_index":7603,"title":{"244-4":{}},"name":{},"text":{"244":{},"254":{},"273":{}},"component":{}}],["onc",{"_index":2039,"title":{},"name":{},"text":{"31":{},"33":{},"38":{},"44":{},"56":{},"60":{},"61":{},"62":{},"63":{},"66":{},"70":{},"71":{},"79":{},"80":{},"88":{},"90":{},"91":{},"99":{},"119":{},"122":{},"138":{},"139":{},"141":{},"143":{},"144":{},"151":{},"155":{},"161":{},"169":{},"170":{},"171":{},"185":{},"199":{},"203":{},"229":{},"234":{},"238":{},"254":{},"255":{},"256":{},"263":{},"264":{},"267":{},"270":{},"273":{},"275":{},"276":{},"281":{}},"component":{}}],["oncleanup",{"_index":2758,"title":{},"name":{},"text":{"46":{}},"component":{}}],["oncommit",{"_index":2795,"title":{},"name":{},"text":{"46":{}},"component":{}}],["onerror",{"_index":5660,"title":{},"name":{},"text":{"109":{}},"component":{}}],["onerror(except",{"_index":4873,"title":{},"name":{},"text":{"79":{}},"component":{}}],["onerror(throw",{"_index":3147,"title":{},"name":{},"text":{"56":{}},"component":{}}],["onetomany(fetch",{"_index":4821,"title":{},"name":{},"text":{"78":{}},"component":{}}],["one’",{"_index":1511,"title":{},"name":{},"text":{"24":{}},"component":{}}],["onfailur",{"_index":2068,"title":{},"name":{},"text":{"31":{}},"component":{}}],["onfirstinit",{"_index":6976,"title":{},"name":{},"text":{"172":{}},"component":{}}],["ongo",{"_index":6298,"title":{"144-25":{}},"name":{},"text":{"208":{}},"component":{}}],["onlin",{"_index":6467,"title":{"270-4":{}},"name":{},"text":{"149":{},"242":{},"243":{},"254":{},"255":{},"265":{},"266":{},"270":{},"271":{}},"component":{}}],["onmessage(messag",{"_index":5457,"title":{},"name":{},"text":{"100":{}},"component":{}}],["onpreparecommit",{"_index":2757,"title":{},"name":{},"text":{"46":{}},"component":{}}],["onreset(resetcontext",{"_index":5238,"title":{},"name":{},"text":{"80":{}},"component":{}}],["onresult",{"_index":1705,"title":{},"name":{},"text":{"27":{}},"component":{}}],["onresult(commandmessag",{"_index":1701,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{}}],["onrollback",{"_index":2764,"title":{},"name":{},"text":{"46":{}},"component":{}}],["onsuccess",{"_index":5657,"title":{},"name":{},"text":{"109":{}},"component":{}}],["onward",{"_index":6152,"title":{},"name":{},"text":{"140":{},"146":{},"147":{},"148":{},"150":{},"166":{}},"component":{}}],["oop",{"_index":2455,"title":{},"name":{},"text":{"38":{}},"component":{}}],["op",{"_index":1825,"title":{},"name":{},"text":{"28":{},"73":{},"196":{}},"component":{}}],["opaqu",{"_index":4566,"title":{},"name":{},"text":{"66":{}},"component":{}}],["open",{"_index":66,"title":{"221":{},"2-7":{}},"name":{},"text":{"1":{},"2":{},"23":{},"35":{},"60":{},"61":{},"63":{},"65":{},"70":{},"80":{},"104":{},"131":{},"134":{},"137":{},"138":{},"139":{},"140":{},"144":{},"146":{},"151":{},"156":{},"158":{},"172":{},"185":{},"196":{},"198":{},"205":{},"254":{},"256":{},"271":{},"273":{},"274":{},"276":{},"277":{},"280":{},"281":{},"282":{}},"component":{}}],["openapi",{"_index":7496,"title":{},"name":{},"text":{"212":{},"221":{}},"component":{}}],["opencensu",{"_index":2959,"title":{},"name":{},"text":{"52":{}},"component":{}}],["openid",{"_index":6741,"title":{"165-4":{}},"name":{},"text":{"165":{},"244":{}},"component":{}}],["openid,email,profil",{"_index":6792,"title":{},"name":{},"text":{"165":{}},"component":{}}],["openloopgiftcard",{"_index":4739,"title":{},"name":{},"text":{"74":{}},"component":{}}],["openrewrit",{"_index":1601,"title":{},"name":{},"text":{"26":{},"61":{}},"component":{}}],["openshift",{"_index":265,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["opentelemetri",{"_index":1226,"title":{"23-14":{},"52-15":{}},"name":{},"text":{"23":{},"52":{},"60":{},"61":{}},"component":{}}],["opentelemetryspanfactori",{"_index":2925,"title":{},"name":{},"text":{"52":{},"60":{}},"component":{}}],["opentelemetryspanfactory.builder().build",{"_index":2928,"title":{},"name":{},"text":{"52":{}},"component":{}}],["opentrac",{"_index":63,"title":{"52-21":{}},"name":{},"text":{"1":{},"52":{},"131":{}},"component":{}}],["oper",{"_index":784,"title":{"164":{},"75-2":{},"114-1":{},"151-14":{},"190-1":{},"190-2":{},"190-3":{}},"name":{},"text":{"5":{},"7":{},"8":{},"23":{},"27":{},"28":{},"32":{},"35":{},"40":{},"51":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"75":{},"79":{},"80":{},"81":{},"97":{},"104":{},"106":{},"114":{},"121":{},"122":{},"129":{},"137":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"145":{},"146":{},"151":{},"157":{},"161":{},"162":{},"164":{},"172":{},"173":{},"182":{},"185":{},"190":{},"199":{},"201":{},"215":{},"256":{},"270":{},"277":{}},"component":{}}],["opinion",{"_index":7656,"title":{},"name":{},"text":{"261":{}},"component":{}}],["opportun",{"_index":4240,"title":{},"name":{},"text":{"61":{},"80":{},"126":{}},"component":{}}],["opt",{"_index":278,"title":{},"name":{},"text":{"3":{},"127":{},"184":{}},"component":{}}],["optim",{"_index":1398,"title":{},"name":{},"text":{"24":{},"31":{},"35":{},"61":{},"66":{},"70":{},"71":{},"72":{},"80":{},"97":{},"114":{},"137":{},"138":{},"150":{},"151":{},"157":{},"277":{},"281":{}},"component":{}}],["option",{"_index":741,"title":{"5-1":{},"161-3":{},"167-3":{},"266-2":{},"266-3":{}},"name":{},"text":{"5":{},"7":{},"9":{},"15":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"44":{},"51":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"63":{},"65":{},"66":{},"68":{},"70":{},"75":{},"76":{},"79":{},"80":{},"81":{},"89":{},"90":{},"104":{},"107":{},"128":{},"129":{},"130":{},"134":{},"137":{},"138":{},"139":{},"140":{},"144":{},"146":{},"147":{},"149":{},"151":{},"153":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"169":{},"171":{},"172":{},"174":{},"185":{},"196":{},"199":{},"203":{},"205":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"217":{},"223":{},"225":{},"226":{},"229":{},"234":{},"241":{},"260":{},"264":{},"266":{},"270":{},"273":{},"274":{},"276":{},"277":{},"280":{}},"component":{}}],["optional.of(top",{"_index":5607,"title":{},"name":{},"text":{"107":{}},"component":{}}],["optional.ofnullable(command.getmetadata().get(\"userid",{"_index":2659,"title":{},"name":{},"text":{"44":{}},"component":{}}],["optional.ofnullable(event.getmetadata().get(\"userid",{"_index":2681,"title":{},"name":{},"text":{"44":{}},"component":{}}],["optionalletterprocessor",{"_index":4936,"title":{},"name":{},"text":{"79":{}},"component":{}}],["optionalletterprocessor.get",{"_index":4939,"title":{},"name":{},"text":{"79":{}},"component":{}}],["optionalletterprocessor.ispres",{"_index":4937,"title":{},"name":{},"text":{"79":{}},"component":{}}],["oracl",{"_index":4065,"title":{},"name":{},"text":{"61":{}},"component":{}}],["oracle11sagasqlschema",{"_index":4404,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["oracle11tokentablefactori",{"_index":5101,"title":{},"name":{},"text":{"80":{}},"component":{}}],["orchestr",{"_index":6468,"title":{},"name":{},"text":{"149":{}},"component":{}}],["order",{"_index":176,"title":{"38-8":{},"57-2":{},"79-3":{}},"name":{},"text":{"2":{},"5":{},"24":{},"25":{},"28":{},"31":{},"36":{},"38":{},"42":{},"43":{},"44":{},"45":{},"52":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"66":{},"71":{},"79":{},"80":{},"81":{},"90":{},"97":{},"101":{},"104":{},"107":{},"117":{},"122":{},"140":{},"141":{},"143":{},"144":{},"146":{},"151":{},"156":{},"163":{},"170":{},"180":{},"199":{},"200":{},"206":{},"208":{},"227":{},"228":{},"230":{},"254":{},"261":{},"266":{},"271":{},"272":{},"277":{},"278":{}},"component":{}}],["order(0",{"_index":2527,"title":{},"name":{},"text":{"38":{}},"component":{}}],["order(1",{"_index":2528,"title":{},"name":{},"text":{"38":{}},"component":{}}],["orderid",{"_index":4346,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["ordermanagementsaga",{"_index":4344,"title":{},"name":{},"text":{"62":{}},"component":{}}],["ordinari",{"_index":7322,"title":{},"name":{},"text":{"200":{}},"component":{}}],["orelse(origin",{"_index":5387,"title":{},"name":{},"text":{"93":{}},"component":{}}],["orelsethrow",{"_index":4628,"title":{},"name":{},"text":{"70":{},"79":{},"93":{}},"component":{}}],["orelsethrow(illegalcommandexception::new",{"_index":2662,"title":{},"name":{},"text":{"44":{}},"component":{}}],["orelsethrow(illegaleventexception::new",{"_index":2682,"title":{},"name":{},"text":{"44":{}},"component":{}}],["org...eventstore.jpa.domainevententri",{"_index":2283,"title":{},"name":{},"text":{"35":{}},"component":{}}],["org...eventstore.jpa.snapshotevententri",{"_index":2284,"title":{},"name":{},"text":{"35":{}},"component":{}}],["org.axonframework",{"_index":1243,"title":{},"name":{},"text":{"23":{},"31":{},"35":{},"52":{},"54":{},"275":{},"282":{}},"component":{}}],["org.axonframework.axonserver.connector.axonserverconfigur",{"_index":1573,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.commandhandling.commandhandl",{"_index":1778,"title":{},"name":{},"text":{"28":{},"73":{},"75":{},"77":{},"78":{},"278":{}},"component":{}}],["org.axonframework.commandhandling.commandmessag",{"_index":5648,"title":{},"name":{},"text":{"109":{}},"component":{}}],["org.axonframework.commandhandling.gateway.commandgateway",{"_index":5649,"title":{},"name":{},"text":{"109":{}},"component":{}}],["org.axonframework.common.jpa.entitymanagerprovid",{"_index":1606,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.common.jpa.pagingjpaqueryiter",{"_index":1608,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.common.jpa.simpleentitymanagerprovid",{"_index":1610,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.common.legacyjpa.entitymanagerprovid",{"_index":1607,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.common.legacyjpa.pagingjpaqueryiter",{"_index":1609,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.common.legacyjpa.simpleentitymanagerprovid",{"_index":1611,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.config.configur",{"_index":5314,"title":{},"name":{},"text":{"85":{},"117":{},"143":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.jpa.deadletterjpaconvert",{"_index":1612,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.jpa.eventmessagedeadletterjpaconvert",{"_index":1614,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.jpa.jpadeadlett",{"_index":1616,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.jpa.jpasequenceddeadletterqueu",{"_index":1618,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.legacyjpa.deadletterjpaconvert",{"_index":1613,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.legacyjpa.eventmessagedeadletterjpaconvert",{"_index":1615,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.legacyjpa.jpadeadlett",{"_index":1617,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.deadletter.legacyjpa.jpasequenceddeadletterqueu",{"_index":1619,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.eventhandl",{"_index":4814,"title":{},"name":{},"text":{"78":{},"112":{}},"component":{}}],["org.axonframework.eventhandling.tokenstor",{"_index":1535,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.eventhandling.tokenstore.jpa.jpatokenstor",{"_index":1620,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventhandling.tokenstore.jpa.tokenentri",{"_index":5096,"title":{},"name":{},"text":{"80":{}},"component":{}}],["org.axonframework.eventhandling.tokenstore.legacyjpa.jpatokenstor",{"_index":1621,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventsourcing.eventsourcinghandl",{"_index":4753,"title":{},"name":{},"text":{"75":{}},"component":{}}],["org.axonframework.eventsourcing.eventstore.jdbc.stat",{"_index":2352,"title":{},"name":{},"text":{"35":{}},"component":{}}],["org.axonframework.eventsourcing.eventstore.jpa",{"_index":1538,"title":{},"name":{},"text":{"25":{},"35":{}},"component":{}}],["org.axonframework.eventsourcing.eventstore.jpa.jpaeventstorageengin",{"_index":1622,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventsourcing.eventstore.jpa.sqlerrorcodesresolv",{"_index":1624,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventsourcing.eventstore.legacyjpa.jpaeventstorageengin",{"_index":1623,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.eventsourcing.eventstore.legacyjpa.sqlerrorcodesresolv",{"_index":1625,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.example.eventhandl",{"_index":4844,"title":{},"name":{},"text":{"79":{}},"component":{}}],["org.axonframework.example.eventhandling.modul",{"_index":4847,"title":{},"name":{},"text":{"79":{}},"component":{}}],["org.axonframework.example.eventhandling.module.modulehandl",{"_index":4842,"title":{},"name":{},"text":{"79":{}},"component":{}}],["org.axonframework.example.eventhandling.myhandl",{"_index":4840,"title":{},"name":{},"text":{"79":{}},"component":{}}],["org.axonframework.example.eventhandling.myotherhandl",{"_index":4841,"title":{},"name":{},"text":{"79":{}},"component":{}}],["org.axonframework.extens",{"_index":1274,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.amqp",{"_index":1275,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.cdi",{"_index":1276,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.jgroup",{"_index":1277,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.jobrunrpro",{"_index":1279,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.kafka",{"_index":1280,"title":{},"name":{},"text":{"23":{},"108":{}},"component":{}}],["org.axonframework.extensions.kotlin",{"_index":1281,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.mongo",{"_index":1282,"title":{},"name":{},"text":{"23":{},"116":{}},"component":{}}],["org.axonframework.extensions.multiten",{"_index":1283,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.reactor",{"_index":1284,"title":{},"name":{},"text":{"23":{},"122":{}},"component":{}}],["org.axonframework.extensions.spr",{"_index":1285,"title":{},"name":{},"text":{"23":{},"123":{}},"component":{}}],["org.axonframework.extensions.springcloud",{"_index":1287,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.axonframework.extensions.trac",{"_index":1288,"title":{},"name":{},"text":{"23":{},"131":{}},"component":{}}],["org.axonframework.firestart",{"_index":7681,"title":{},"name":{},"text":{"267":{}},"component":{}}],["org.axonframework.firestarter:firestart",{"_index":7680,"title":{},"name":{},"text":{"267":{}},"component":{}}],["org.axonframework.messaging.interceptors.beanvalidationinterceptor",{"_index":1626,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.messaging.interceptors.jsr303violationexcept",{"_index":1628,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.messaging.interceptors.legacyvalidation.beanvalidationinterceptor",{"_index":1627,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.messaging.interceptors.legacyvalidation.jsr303violationexcept",{"_index":1629,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.messaging.metadata",{"_index":5650,"title":{},"name":{},"text":{"109":{}},"component":{}}],["org.axonframework.modeling.command.aggregateidentifi",{"_index":7970,"title":{},"name":{},"text":{"278":{}},"component":{}}],["org.axonframework.modelling.command.aggregatecreationpolici",{"_index":1824,"title":{},"name":{},"text":{"28":{}},"component":{}}],["org.axonframework.modelling.command.aggregateidentifi",{"_index":1779,"title":{},"name":{},"text":{"28":{},"75":{},"77":{},"78":{}},"component":{}}],["org.axonframework.modelling.command.aggregatelifecycle.appli",{"_index":1780,"title":{},"name":{},"text":{"28":{},"36":{},"73":{},"75":{},"77":{}},"component":{}}],["org.axonframework.modelling.command.aggregatelifecycle.createnew",{"_index":4724,"title":{},"name":{},"text":{"73":{}},"component":{}}],["org.axonframework.modelling.command.aggregatememb",{"_index":4778,"title":{},"name":{},"text":{"77":{},"78":{}},"component":{}}],["org.axonframework.modelling.command.creationpolici",{"_index":1823,"title":{},"name":{},"text":{"28":{}},"component":{}}],["org.axonframework.modelling.command.entityid",{"_index":4779,"title":{},"name":{},"text":{"77":{}},"component":{}}],["org.axonframework.modelling.command.forwardmatchinginst",{"_index":4805,"title":{},"name":{},"text":{"77":{}},"component":{}}],["org.axonframework.modelling.command.genericjparepositori",{"_index":1630,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.modelling.command.legacyjpa.genericjparepositori",{"_index":1631,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.modelling.command.repositori",{"_index":1835,"title":{},"name":{},"text":{"28":{},"61":{}},"component":{}}],["org.axonframework.modelling.command.targetaggregateidentifi",{"_index":1786,"title":{},"name":{},"text":{"28":{},"278":{}},"component":{}}],["org.axonframework.modelling.saga.repository.jpa",{"_index":1537,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.modelling.saga.repository.jpa.jpasagastor",{"_index":1632,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.modelling.saga.repository.legacyjpa.jpasagastor",{"_index":1633,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.queryhandling.querygateway",{"_index":5676,"title":{},"name":{},"text":{"112":{}},"component":{}}],["org.axonframework.queryhandling.queryhandl",{"_index":3161,"title":{},"name":{},"text":{"57":{},"277":{}},"component":{}}],["org.axonframework.queryhandling.queryupdateemitt",{"_index":5689,"title":{},"name":{},"text":{"112":{}},"component":{}}],["org.axonframework.serialization.upcasting.event.singleeventupcast",{"_index":5663,"title":{},"name":{},"text":{"110":{}},"component":{}}],["org.axonframework.spring.stereotyp",{"_index":1149,"title":{},"name":{},"text":{"13":{},"29":{}},"component":{}}],["org.axonframework.spring.stereotype.aggreg",{"_index":1154,"title":{},"name":{},"text":{"13":{},"29":{},"278":{}},"component":{}}],["org.axonframework.spring.stereotype.saga",{"_index":4419,"title":{},"name":{},"text":{"63":{}},"component":{}}],["org.axonframework.springboot.autoconfig.axonautoconfigur",{"_index":1551,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.axonserveractuatorautoconfigur",{"_index":1563,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.axonserverautoconfigur",{"_index":1561,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.axonserverbusautoconfigur",{"_index":1564,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.axontracingautoconfigur",{"_index":1565,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.eventprocessingautoconfigur",{"_index":1550,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.infraconfigur",{"_index":1559,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.jdbcautoconfigur",{"_index":1556,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.jpaautoconfigur",{"_index":1554,"title":{},"name":{},"text":{"25":{},"26":{}},"component":{}}],["org.axonframework.springboot.autoconfig.jpaeventstoreautoconfigur",{"_index":1555,"title":{},"name":{},"text":{"25":{},"26":{}},"component":{}}],["org.axonframework.springboot.autoconfig.legacy_jpa.jpajavaxautoconfigur",{"_index":1552,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.legacy_jpa.jpajavaxeventstoreautoconfigur",{"_index":1553,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.legacyjpa.jpajavaxautoconfigur",{"_index":1634,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.springboot.autoconfig.legacyjpa.jpajavaxeventstoreautoconfigur",{"_index":1635,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.springboot.autoconfig.metricsautoconfigur",{"_index":1548,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.micrometermetricsautoconfigur",{"_index":1549,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.nooptransactionautoconfigur",{"_index":1558,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.objectmapperautoconfigur",{"_index":1560,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.opentelemetryautoconfigur",{"_index":1566,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.transactionautoconfigur",{"_index":1557,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.autoconfig.xstreamautoconfigur",{"_index":1562,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.axonframework.springboot.util.jpa.containermanagedentitymanagerprovid",{"_index":1636,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.springboot.util.legacyjpa.containermanagedentitymanagerprovid",{"_index":1637,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.axonframework.test.aggregate.aggregatetestfixtur",{"_index":4444,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework.test.aggregate.fixtureconfigur",{"_index":4445,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework.test.matchers.matchers.andnomor",{"_index":4544,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework.test.matchers.matchers.equalto",{"_index":4545,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework.test.matchers.matchers.exactsequenceof",{"_index":4546,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework.test.matchers.matchers.messagewithpayload",{"_index":4547,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework.test.matchers.matchers.payloadsmatch",{"_index":4548,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.axonframework:axon",{"_index":1315,"title":{},"name":{},"text":{"23":{},"282":{}},"component":{}}],["org.codehaus.mojo.archetyp",{"_index":7820,"title":{},"name":{},"text":{"276":{}},"component":{}}],["org.dom4j.document.class",{"_index":2508,"title":{},"name":{},"text":{"38":{}},"component":{}}],["org.openrewrite.maven:rewrit",{"_index":1658,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.sampl",{"_index":6433,"title":{},"name":{},"text":{"147":{}},"component":{}}],["org.slf4j.loggerfactori",{"_index":5651,"title":{},"name":{},"text":{"109":{}},"component":{}}],["org.springframework.boot",{"_index":7826,"title":{},"name":{},"text":{"276":{},"281":{}},"component":{}}],["org.springframework.boot.autoconfigure.autoconfiguration.import",{"_index":1569,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.springframework.boot.autoconfigure.enableautoconfigur",{"_index":1547,"title":{},"name":{},"text":{"25":{}},"component":{}}],["org.springframework.boot:spr",{"_index":7809,"title":{},"name":{},"text":{"276":{}},"component":{}}],["org.springframework.stereotype.repositori",{"_index":7862,"title":{},"name":{},"text":{"277":{}},"component":{}}],["organ",{"_index":1015,"title":{},"name":{},"text":{"8":{},"79":{},"137":{},"238":{},"258":{}},"component":{}}],["orient",{"_index":902,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{}}],["origin",{"_index":846,"title":{"203-38":{}},"name":{},"text":{"5":{},"24":{},"32":{},"36":{},"38":{},"41":{},"42":{},"43":{},"45":{},"48":{},"49":{},"52":{},"60":{},"61":{},"75":{},"80":{},"93":{},"144":{},"172":{},"203":{},"212":{},"270":{},"277":{},"280":{}},"component":{}}],["origin=fals",{"_index":6107,"title":{},"name":{},"text":{"138":{}},"component":{}}],["original.attribute(\"metadatakey",{"_index":5383,"title":{},"name":{},"text":{"93":{}},"component":{}}],["os",{"_index":1055,"title":{},"name":{},"text":{"8":{},"176":{}},"component":{}}],["os/jvm",{"_index":7159,"title":{},"name":{},"text":{"181":{}},"component":{}}],["osgi",{"_index":5407,"title":{},"name":{},"text":{"95":{},"147":{},"171":{},"172":{}},"component":{}}],["other",{"_index":1298,"title":{"35-25":{}},"name":{},"text":{"23":{},"46":{},"52":{},"61":{},"63":{},"66":{},"75":{},"79":{},"139":{},"236":{}},"component":{}}],["otherwis",{"_index":392,"title":{},"name":{},"text":{"3":{},"27":{},"28":{},"29":{},"31":{},"43":{},"45":{},"66":{},"73":{},"80":{},"106":{},"121":{},"124":{},"146":{},"184":{},"198":{},"203":{},"271":{},"281":{}},"component":{}}],["ou=people,dc=planetexpress,dc=com",{"_index":6640,"title":{},"name":{},"text":{"163":{}},"component":{}}],["out",{"_index":106,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"24":{},"29":{},"31":{},"32":{},"35":{},"38":{},"41":{},"46":{},"49":{},"52":{},"53":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"77":{},"78":{},"79":{},"80":{},"85":{},"99":{},"101":{},"108":{},"117":{},"119":{},"126":{},"128":{},"138":{},"142":{},"149":{},"161":{},"165":{},"167":{},"172":{},"178":{},"184":{},"223":{},"247":{},"253":{},"255":{},"262":{},"270":{},"271":{},"276":{},"277":{},"278":{},"279":{},"280":{}},"component":{}}],["outcom",{"_index":1699,"title":{},"name":{},"text":{"27":{},"42":{},"53":{},"61":{},"66":{},"73":{},"79":{},"80":{}},"component":{}}],["outdat",{"_index":6075,"title":{},"name":{},"text":{"137":{},"254":{}},"component":{}}],["outer",{"_index":2800,"title":{},"name":{},"text":{"46":{},"66":{}},"component":{}}],["outgo",{"_index":5885,"title":{"203-25":{},"203-30":{}},"name":{},"text":{"122":{},"203":{}},"component":{}}],["outlin",{"_index":7608,"title":{},"name":{},"text":{"245":{},"254":{}},"component":{}}],["outofmemoryexception`",{"_index":2313,"title":{},"name":{},"text":{"35":{}},"component":{}}],["outperform",{"_index":2034,"title":{},"name":{},"text":{"31":{},"35":{}},"component":{}}],["output",{"_index":1456,"title":{},"name":{},"text":{"24":{},"35":{},"38":{},"109":{},"146":{},"159":{},"161":{},"167":{},"171":{},"183":{}},"component":{}}],["outsid",{"_index":1071,"title":{},"name":{},"text":{"8":{},"51":{},"66":{},"77":{},"79":{},"105":{},"112":{},"117":{},"129":{},"151":{},"255":{},"278":{}},"component":{}}],["over",{"_index":1303,"title":{},"name":{},"text":{"23":{},"26":{},"31":{},"32":{},"38":{},"42":{},"44":{},"49":{},"50":{},"52":{},"53":{},"56":{},"60":{},"61":{},"70":{},"77":{},"79":{},"80":{},"89":{},"90":{},"97":{},"101":{},"106":{},"111":{},"129":{},"135":{},"137":{},"140":{},"146":{},"151":{},"155":{},"156":{},"172":{},"200":{},"218":{},"232":{},"236":{},"239":{},"254":{},"255":{},"270":{},"271":{},"278":{}},"component":{}}],["overal",{"_index":822,"title":{},"name":{},"text":{"5":{},"23":{},"44":{},"50":{},"79":{},"80":{},"137":{},"139":{},"151":{},"156":{},"176":{},"242":{}},"component":{}}],["overcom",{"_index":3766,"title":{},"name":{},"text":{"60":{},"144":{}},"component":{}}],["overflow",{"_index":3135,"title":{},"name":{},"text":{"56":{}},"component":{}}],["overhead",{"_index":2032,"title":{},"name":{},"text":{"31":{},"80":{},"89":{},"255":{},"270":{}},"component":{}}],["overload",{"_index":3091,"title":{},"name":{},"text":{"56":{}},"component":{}}],["overlook",{"_index":5809,"title":{},"name":{},"text":{"121":{}},"component":{}}],["overrid",{"_index":703,"title":{"4-1":{},"117-12":{},"241-3":{}},"name":{},"text":{"24":{},"25":{},"35":{},"38":{},"43":{},"44":{},"49":{},"52":{},"60":{},"61":{},"79":{},"80":{},"88":{},"93":{},"94":{},"96":{},"97":{},"100":{},"117":{},"122":{},"141":{},"146":{},"147":{},"170":{},"172":{},"241":{},"256":{},"271":{}},"component":{}}],["overridden",{"_index":1797,"title":{},"name":{},"text":{"28":{},"56":{},"98":{},"160":{}},"component":{}}],["override(",{"_index":7631,"title":{},"name":{},"text":{"256":{}},"component":{}}],["overse",{"_index":7555,"title":{},"name":{},"text":{"224":{},"233":{}},"component":{}}],["overtim",{"_index":1476,"title":{},"name":{},"text":{"24":{}},"component":{}}],["overview",{"_index":837,"title":{"207":{},"265":{},"270":{},"196-4":{},"197-2":{},"241-1":{},"270-33":{}},"name":{"189":{},"207":{},"242":{}},"text":{"5":{},"22":{},"31":{},"51":{},"54":{},"58":{},"61":{},"66":{},"137":{},"138":{},"141":{},"158":{},"161":{},"162":{},"164":{},"170":{},"171":{},"177":{},"196":{},"198":{},"217":{},"224":{},"233":{},"241":{},"245":{},"251":{},"254":{},"255":{},"268":{},"270":{},"281":{}},"component":{}}],["overwhelm",{"_index":546,"title":{},"name":{},"text":{"3":{},"56":{},"122":{},"156":{},"184":{}},"component":{}}],["overwrit",{"_index":1887,"title":{},"name":{},"text":{"29":{},"31":{},"60":{},"140":{}},"component":{}}],["overwritten",{"_index":2547,"title":{},"name":{},"text":{"40":{}},"component":{}}],["ovstetun",{"_index":4293,"title":{},"name":{},"text":{"61":{}},"component":{}}],["own",{"_index":565,"title":{},"name":{},"text":{"3":{},"70":{},"80":{},"117":{},"184":{}},"component":{}}],["owner",{"_index":567,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"66":{},"184":{},"228":{},"258":{}},"component":{}}],["ownership",{"_index":353,"title":{},"name":{},"text":{"3":{},"184":{},"258":{}},"component":{}}],["oxymoron",{"_index":6301,"title":{},"name":{},"text":{"144":{}},"component":{}}],["oyst",{"_index":4132,"title":{},"name":{},"text":{"61":{}},"component":{}}],["p",{"_index":366,"title":{},"name":{},"text":{"3":{},"8":{},"117":{},"146":{},"147":{},"167":{},"171":{},"184":{}},"component":{}}],["p86t",{"_index":7468,"title":{},"name":{},"text":{"208":{},"209":{},"211":{}},"component":{}}],["p90",{"_index":7633,"title":{},"name":{},"text":{"256":{}},"component":{}}],["pace",{"_index":6321,"title":{},"name":{},"text":{"144":{}},"component":{}}],["packag",{"_index":320,"title":{"8-3":{},"137-12":{}},"name":{},"text":{"3":{},"4":{},"8":{},"13":{},"24":{},"25":{},"26":{},"27":{},"29":{},"35":{},"38":{},"60":{},"61":{},"66":{},"79":{},"80":{},"137":{},"138":{},"147":{},"154":{},"171":{},"172":{},"184":{},"196":{},"198":{},"212":{},"254":{},"263":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["page",{"_index":766,"title":{},"name":{},"text":{"5":{},"8":{},"9":{},"10":{},"11":{},"15":{},"21":{},"24":{},"27":{},"29":{},"31":{},"36":{},"44":{},"49":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"69":{},"78":{},"79":{},"137":{},"138":{},"141":{},"142":{},"143":{},"151":{},"166":{},"170":{},"179":{},"198":{},"199":{},"200":{},"218":{},"221":{},"225":{},"229":{},"232":{},"234":{},"241":{},"242":{},"245":{},"247":{},"251":{},"253":{},"254":{},"256":{},"260":{},"267":{},"270":{},"271":{},"280":{}},"component":{}}],["pagerduti",{"_index":7747,"title":{},"name":{},"text":{"271":{}},"component":{}}],["pagin",{"_index":3141,"title":{},"name":{},"text":{"56":{}},"component":{}}],["paid",{"_index":807,"title":{},"name":{},"text":{"5":{},"32":{},"33":{},"62":{},"68":{},"245":{},"270":{},"271":{}},"component":{}}],["pair",{"_index":1741,"title":{},"name":{},"text":{"27":{},"40":{},"60":{},"61":{},"78":{},"80":{},"104":{},"107":{},"110":{},"122":{},"172":{},"208":{},"209":{},"211":{}},"component":{}}],["panel",{"_index":6177,"title":{},"name":{},"text":{"141":{},"170":{},"196":{},"229":{},"232":{},"235":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"260":{},"267":{},"270":{},"273":{},"274":{},"280":{},"281":{}},"component":{}}],["par",{"_index":1425,"title":{},"name":{},"text":{"24":{}},"component":{}}],["paradigm",{"_index":1257,"title":{},"name":{},"text":{"23":{},"78":{},"81":{}},"component":{}}],["parallel",{"_index":2898,"title":{"80-39":{}},"name":{},"text":{"51":{},"61":{},"72":{},"79":{},"80":{},"81":{},"156":{},"254":{}},"component":{}}],["param",{"_index":5349,"title":{},"name":{},"text":{"89":{},"165":{}},"component":{}}],["paramat",{"_index":7223,"title":{},"name":{},"text":{"194":{}},"component":{}}],["paramet",{"_index":967,"title":{"45":{},"95":{},"44-17":{},"45-1":{},"45-2":{},"45-3":{},"161-2":{},"161-3":{},"167-2":{},"167-3":{}},"name":{"45":{},"95":{}},"text":{"7":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"37":{},"38":{},"42":{},"44":{},"45":{},"46":{},"51":{},"53":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"71":{},"73":{},"76":{},"79":{},"80":{},"81":{},"89":{},"94":{},"95":{},"96":{},"103":{},"112":{},"117":{},"122":{},"138":{},"139":{},"143":{},"146":{},"147":{},"165":{},"171":{},"172":{},"192":{},"194":{},"205":{},"208":{},"271":{},"277":{},"278":{},"280":{}},"component":{}}],["parameter",{"_index":3212,"title":{},"name":{},"text":{"60":{}},"component":{}}],["parameterresolv",{"_index":2736,"title":{},"name":{},"text":{"45":{},"66":{},"95":{}},"component":{}}],["parameterresolver`",{"_index":2183,"title":{},"name":{},"text":{"32":{},"45":{}},"component":{}}],["parameterresolverfactori",{"_index":2737,"title":{},"name":{},"text":{"45":{},"60":{},"66":{},"95":{}},"component":{}}],["parameter’",{"_index":5242,"title":{},"name":{},"text":{"80":{}},"component":{}}],["paramount",{"_index":2517,"title":{},"name":{},"text":{"38":{}},"component":{}}],["params.prompt=select_account",{"_index":6785,"title":{},"name":{},"text":{"165":{}},"component":{}}],["parent",{"_index":2597,"title":{},"name":{},"text":{"43":{},"52":{},"56":{},"60":{},"61":{},"73":{},"74":{},"77":{},"131":{},"276":{}},"component":{}}],["parentaggreg",{"_index":4722,"title":{},"name":{},"text":{"73":{}},"component":{}}],["parenthes",{"_index":5688,"title":{},"name":{},"text":{"112":{}},"component":{}}],["park",{"_index":4885,"title":{},"name":{},"text":{"79":{}},"component":{}}],["pars",{"_index":7511,"title":{},"name":{},"text":{"212":{}},"component":{}}],["part",{"_index":1194,"title":{"234-1":{},"234-2":{},"234-3":{}},"name":{},"text":{"16":{},"17":{},"19":{},"23":{},"26":{},"31":{},"33":{},"38":{},"42":{},"50":{},"52":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"71":{},"75":{},"77":{},"79":{},"80":{},"85":{},"91":{},"93":{},"124":{},"131":{},"141":{},"143":{},"146":{},"147":{},"171":{},"185":{},"204":{},"206":{},"235":{},"243":{},"247":{},"253":{},"254":{},"255":{},"256":{},"268":{},"270":{},"274":{},"276":{},"277":{}},"component":{}}],["partak",{"_index":2390,"title":{},"name":{},"text":{"35":{}},"component":{}}],["parti",{"_index":12,"title":{},"name":{},"text":{"1":{},"8":{},"57":{},"80":{},"122":{},"197":{},"221":{},"278":{}},"component":{}}],["partial",{"_index":3713,"title":{},"name":{},"text":{"60":{},"80":{},"137":{}},"component":{}}],["particip",{"_index":6120,"title":{},"name":{},"text":{"139":{},"149":{}},"component":{}}],["particular",{"_index":552,"title":{},"name":{},"text":{"3":{},"70":{},"79":{},"80":{},"139":{},"142":{},"149":{},"150":{},"184":{},"236":{},"239":{},"242":{},"270":{},"271":{}},"component":{}}],["particularli",{"_index":43,"title":{},"name":{},"text":{"1":{},"3":{},"38":{},"137":{},"151":{},"184":{},"240":{}},"component":{}}],["partit",{"_index":5530,"title":{"107-2":{}},"name":{},"text":{"104":{},"107":{}},"component":{}}],["pass",{"_index":1463,"title":{"159-1":{},"159-2":{}},"name":{},"text":{"24":{},"29":{},"31":{},"37":{},"40":{},"43":{},"45":{},"60":{},"66":{},"71":{},"76":{},"81":{},"86":{},"87":{},"93":{},"106":{},"108":{},"142":{},"143":{},"146":{},"159":{},"201":{},"212":{},"213":{},"214":{},"216":{},"240":{},"255":{},"277":{},"282":{}},"component":{}}],["passiv",{"_index":6115,"title":{"139-3":{}},"name":{},"text":{"139":{}},"component":{}}],["passive_backup",{"_index":6126,"title":{},"name":{},"text":{"139":{},"146":{},"149":{},"171":{}},"component":{}}],["password",{"_index":772,"title":{"162-4":{},"203-35":{},"244-3":{}},"name":{},"text":{"5":{},"154":{},"159":{},"162":{},"163":{},"165":{},"166":{},"167":{},"169":{},"171":{},"172":{},"196":{},"201":{},"203":{},"244":{}},"component":{}}],["past",{"_index":4441,"title":{},"name":{},"text":{"66":{},"71":{},"75":{},"79":{},"80":{},"144":{},"273":{},"277":{}},"component":{}}],["pat",{"_index":1018,"title":{},"name":{},"text":{"8":{}},"component":{}}],["patch",{"_index":3825,"title":{},"name":{},"text":{"61":{},"135":{},"138":{},"143":{}},"component":{}}],["path",{"_index":317,"title":{"203-10":{}},"name":{},"text":{"3":{},"4":{},"8":{},"24":{},"26":{},"52":{},"61":{},"140":{},"141":{},"151":{},"170":{},"172":{},"176":{},"183":{},"184":{},"185":{},"203":{},"213":{},"214":{},"216":{},"264":{},"265":{},"277":{},"278":{}},"component":{}}],["path=./data",{"_index":405,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pathvariable(\"bikeid",{"_index":7912,"title":{},"name":{},"text":{"277":{}},"component":{}}],["pattern",{"_index":825,"title":{},"name":{},"text":{"5":{},"23":{},"24":{},"42":{},"44":{},"54":{},"56":{},"60":{},"61":{},"107":{},"122":{},"163":{},"213":{},"214":{},"216":{},"277":{},"278":{},"282":{}},"component":{}}],["paus",{"_index":6258,"title":{"147-6":{},"151-14":{},"254-2":{}},"name":{},"text":{"143":{},"147":{},"151":{},"171":{},"173":{},"243":{},"254":{},"270":{}},"component":{}}],["pause_event_processor",{"_index":6700,"title":{},"name":{},"text":{"164":{}},"component":{}}],["pauseeventprocessor",{"_index":6269,"title":{},"name":{},"text":{"143":{}},"component":{}}],["pauseeventprocessor(eventprocessoridentifi",{"_index":6985,"title":{},"name":{},"text":{"173":{}},"component":{}}],["pay",{"_index":744,"title":{"5-6":{}},"name":{},"text":{"32":{}},"component":{}}],["payload",{"_index":760,"title":{"5-14":{},"44-16":{}},"name":{},"text":{"5":{},"7":{},"24":{},"27":{},"31":{},"32":{},"36":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"46":{},"50":{},"52":{},"53":{},"56":{},"57":{},"66":{},"68":{},"77":{},"81":{},"96":{},"106":{},"117":{},"122":{},"130":{},"142":{},"191":{},"192":{},"199":{},"200":{},"210":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{}},"component":{}}],["payload_typ",{"_index":5993,"title":{},"name":{},"text":{"130":{}},"component":{}}],["payloadclass",{"_index":3026,"title":{},"name":{},"text":{"52":{}},"component":{}}],["payloaddata",{"_index":7197,"title":{},"name":{},"text":{"191":{},"192":{}},"component":{}}],["payloadlessdeadlin",{"_index":2192,"title":{},"name":{},"text":{"32":{}},"component":{}}],["payloadrevis",{"_index":7196,"title":{},"name":{},"text":{"191":{}},"component":{}}],["payloadtyp",{"_index":2696,"title":{},"name":{},"text":{"44":{},"50":{},"60":{},"96":{},"190":{},"191":{},"199":{},"200":{},"208":{},"211":{},"213":{},"216":{}},"component":{}}],["payloadtypemessagemonitorwrapp",{"_index":2824,"title":{},"name":{},"text":{"50":{}},"component":{}}],["payloadtypespanattributesprovid",{"_index":2947,"title":{},"name":{},"text":{"52":{}},"component":{}}],["payment",{"_index":2219,"title":{},"name":{},"text":{"33":{},"90":{},"146":{},"245":{},"267":{},"270":{},"271":{},"273":{},"274":{}},"component":{}}],["payment/pom.xml",{"_index":7683,"title":{},"name":{},"text":{"267":{},"273":{}},"component":{}}],["payment/src/main/java/resources/application.properti",{"_index":7761,"title":{},"name":{},"text":{"273":{}},"component":{}}],["paymentconfirmedev",{"_index":7714,"title":{},"name":{},"text":{"270":{}},"component":{}}],["paymentpreparedev",{"_index":7715,"title":{},"name":{},"text":{"270":{}},"component":{}}],["paymentrejectedev",{"_index":7716,"title":{},"name":{},"text":{"270":{}},"component":{}}],["paymentsaga",{"_index":7717,"title":{},"name":{},"text":{"270":{}},"component":{}}],["paymentstatusproject",{"_index":7718,"title":{},"name":{},"text":{"270":{}},"component":{}}],["pckuyer",{"_index":3230,"title":{},"name":{},"text":{"60":{}},"component":{}}],["peak",{"_index":7653,"title":{},"name":{},"text":{"261":{}},"component":{}}],["peer",{"_index":6919,"title":{},"name":{},"text":{"172":{}},"component":{}}],["pem",{"_index":6809,"title":{},"name":{},"text":{"169":{}},"component":{}}],["pend",{"_index":6955,"title":{},"name":{},"text":{"172":{},"241":{}},"component":{}}],["pendingsinc",{"_index":6579,"title":{},"name":{},"text":{"159":{},"162":{},"185":{}},"component":{}}],["peopl",{"_index":3461,"title":{},"name":{},"text":{"60":{}},"component":{}}],["pepperbob",{"_index":4225,"title":{},"name":{},"text":{"61":{}},"component":{}}],["per",{"_index":293,"title":{},"name":{},"text":{"3":{},"8":{},"25":{},"26":{},"27":{},"31":{},"37":{},"50":{},"51":{},"57":{},"60":{},"61":{},"71":{},"79":{},"80":{},"117":{},"122":{},"126":{},"138":{},"139":{},"146":{},"147":{},"151":{},"156":{},"162":{},"169":{},"171":{},"172":{},"176":{},"177":{},"178":{},"184":{},"185":{},"236":{},"239":{},"254":{},"255":{},"256":{},"270":{}},"component":{}}],["percent",{"_index":7727,"title":{},"name":{},"text":{"270":{}},"component":{}}],["percentag",{"_index":6865,"title":{},"name":{},"text":{"172":{},"208":{},"239":{},"243":{},"255":{},"256":{},"267":{},"270":{},"274":{}},"component":{}}],["percentil",{"_index":7600,"title":{},"name":{},"text":{"242":{},"255":{},"270":{},"271":{}},"component":{}}],["perfect",{"_index":4887,"title":{},"name":{},"text":{"79":{}},"component":{}}],["perfectli",{"_index":5565,"title":{},"name":{},"text":{"105":{},"111":{}},"component":{}}],["perform",{"_index":147,"title":{"125":{},"157":{}},"name":{"125":{}},"text":{"2":{},"3":{},"5":{},"17":{},"19":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"38":{},"41":{},"44":{},"45":{},"46":{},"51":{},"52":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"72":{},"75":{},"77":{},"79":{},"80":{},"81":{},"92":{},"93":{},"97":{},"106":{},"107":{},"110":{},"114":{},"126":{},"134":{},"137":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"146":{},"147":{},"151":{},"156":{},"157":{},"161":{},"162":{},"172":{},"174":{},"184":{},"185":{},"192":{},"199":{},"205":{},"212":{},"217":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"254":{},"255":{},"260":{},"261":{},"263":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"274":{},"277":{}},"component":{}}],["perhap",{"_index":1935,"title":{},"name":{},"text":{"31":{},"38":{}},"component":{}}],["period",{"_index":840,"title":{},"name":{},"text":{"5":{},"24":{},"31":{},"61":{},"70":{},"80":{},"81":{},"135":{},"137":{},"151":{},"176":{},"245":{},"254":{},"270":{},"271":{}},"component":{}}],["periodsecond",{"_index":643,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["perman",{"_index":6073,"title":{},"name":{},"text":{"137":{},"144":{},"151":{},"171":{}},"component":{}}],["permiss",{"_index":1022,"title":{},"name":{},"text":{"8":{},"137":{},"138":{},"142":{},"196":{}},"component":{}}],["permit",{"_index":4186,"title":{},"name":{},"text":{"61":{},"156":{},"172":{}},"component":{}}],["persist",{"_index":674,"title":{"25-2":{},"81-8":{},"137-2":{}},"name":{},"text":{"3":{},"25":{},"29":{},"33":{},"35":{},"46":{},"60":{},"61":{},"63":{},"65":{},"79":{},"80":{},"81":{},"83":{},"84":{},"137":{},"138":{},"144":{},"147":{},"172":{},"184":{},"277":{}},"component":{}}],["persistence.xml",{"_index":1653,"title":{},"name":{},"text":{"26":{}},"component":{}}],["persistencecontext(unitnam",{"_index":2302,"title":{},"name":{},"text":{"35":{}},"component":{}}],["persistenceexceptionresolv",{"_index":2293,"title":{},"name":{},"text":{"35":{}},"component":{}}],["persistenceexceptionresolver(persistenceexceptionresolv",{"_index":2325,"title":{},"name":{},"text":{"35":{}},"component":{}}],["persistenceexceptiontransl",{"_index":2294,"title":{},"name":{},"text":{"35":{}},"component":{}}],["persistentstreammessagesourc",{"_index":5284,"title":{},"name":{},"text":{"81":{}},"component":{}}],["persistentstreammessagesourcedefinit",{"_index":5293,"title":{},"name":{},"text":{"81":{}},"component":{}}],["persistentstreamproperti",{"_index":5285,"title":{},"name":{},"text":{"81":{}},"component":{}}],["persistentstreamscheduledexecutorbuild",{"_index":3832,"title":{},"name":{},"text":{"61":{}},"component":{}}],["person",{"_index":1017,"title":{},"name":{},"text":{"8":{},"61":{}},"component":{}}],["perspect",{"_index":1120,"title":{},"name":{},"text":{"10":{},"24":{},"61":{},"80":{},"104":{},"199":{}},"component":{}}],["phase",{"_index":162,"title":{"66-3":{},"66-4":{},"66-5":{}},"name":{},"text":{"2":{},"44":{},"46":{},"60":{},"61":{},"66":{},"68":{},"169":{},"282":{}},"component":{}}],["phase’",{"_index":4504,"title":{},"name":{},"text":{"66":{}},"component":{}}],["php",{"_index":1088,"title":{},"name":{},"text":{"8":{}},"component":{}}],["physic",{"_index":4420,"title":{},"name":{},"text":{"63":{},"65":{},"119":{},"146":{},"151":{},"270":{}},"component":{}}],["pick",{"_index":1428,"title":{},"name":{},"text":{"24":{},"52":{},"60":{},"61":{},"74":{},"80":{},"117":{},"141":{},"150":{},"170":{},"218":{}},"component":{}}],["pictur",{"_index":7604,"title":{},"name":{},"text":{"244":{},"278":{}},"component":{}}],["pid",{"_index":289,"title":{},"name":{},"text":{"3":{},"172":{},"184":{},"281":{}},"component":{}}],["piec",{"_index":1206,"title":{},"name":{},"text":{"19":{},"31":{},"61":{},"276":{}},"component":{}}],["ping",{"_index":7042,"title":{},"name":{},"text":{"176":{}},"component":{}}],["pipe",{"_index":7195,"title":{},"name":{},"text":{"191":{}},"component":{}}],["pipelin",{"_index":6349,"title":{"193":{}},"name":{"193":{}},"text":{"144":{},"191":{},"193":{},"195":{}},"component":{}}],["pivotal’",{"_index":5817,"title":{},"name":{},"text":{"121":{}},"component":{}}],["pkcs12",{"_index":6812,"title":{},"name":{},"text":{"169":{},"172":{},"203":{}},"component":{}}],["place",{"_index":295,"title":{},"name":{},"text":{"3":{},"4":{},"8":{},"23":{},"28":{},"29":{},"31":{},"38":{},"43":{},"44":{},"51":{},"52":{},"56":{},"60":{},"61":{},"66":{},"71":{},"75":{},"77":{},"79":{},"80":{},"90":{},"96":{},"107":{},"108":{},"122":{},"126":{},"137":{},"139":{},"151":{},"154":{},"163":{},"172":{},"184":{},"218":{},"221":{},"270":{},"271":{},"276":{},"278":{}},"component":{}}],["plain",{"_index":777,"title":{},"name":{},"text":{"5":{},"10":{},"24":{},"63":{},"65":{},"122":{},"129":{},"234":{},"273":{}},"component":{}}],["plaintext",{"_index":5642,"title":{},"name":{},"text":{"108":{}},"component":{}}],["plan",{"_index":182,"title":{"5-12":{},"229-2":{}},"name":{},"text":{"2":{},"3":{},"5":{},"22":{},"117":{},"184":{},"196":{},"229":{},"245":{},"247":{},"253":{},"254":{},"256":{},"258":{},"260":{},"266":{},"270":{},"271":{},"275":{}},"component":{}}],["plan(",{"_index":7645,"title":{},"name":{},"text":{"258":{}},"component":{}}],["platform",{"_index":1093,"title":{"10-1":{}},"name":{"10":{}},"text":{"9":{},"10":{},"13":{},"16":{},"23":{},"156":{},"203":{},"224":{},"232":{},"233":{},"247":{},"258":{}},"component":{}}],["platformtransactionmanag",{"_index":2262,"title":{},"name":{},"text":{"33":{},"79":{}},"component":{}}],["play",{"_index":1296,"title":{},"name":{},"text":{"23":{},"29":{},"139":{},"185":{},"231":{},"262":{},"270":{},"277":{},"280":{}},"component":{}}],["playbook",{"_index":990,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["playbook.yaml",{"_index":992,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["pleas",{"_index":806,"title":{},"name":{},"text":{"5":{},"9":{},"10":{},"23":{},"26":{},"35":{},"52":{},"61":{},"71":{},"80":{},"89":{},"90":{},"101":{},"104":{},"107":{},"124":{},"128":{},"144":{},"161":{},"180":{},"185":{},"196":{},"199":{},"200":{},"203":{},"205":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"245":{},"262":{},"274":{}},"component":{}}],["plu",{"_index":4305,"title":{},"name":{},"text":{"61":{},"258":{}},"component":{}}],["plugin",{"_index":298,"title":{"147":{},"142-5":{},"147-1":{},"147-2":{},"147-3":{},"147-4":{},"147-5":{},"147-6":{},"147-7":{},"147-8":{},"171-11":{}},"name":{"147":{}},"text":{"3":{},"23":{},"138":{},"142":{},"145":{},"147":{},"161":{},"162":{},"163":{},"166":{},"171":{},"172":{},"184":{},"280":{}},"component":{}}],["plugin:0.5.1.releas",{"_index":1311,"title":{},"name":{},"text":{"23":{}},"component":{}}],["plugin:4.40.0:run",{"_index":1659,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pluginpropertydefinition.newbuilder(\"mypropid1",{"_index":6442,"title":{},"name":{},"text":{"147":{}},"component":{}}],["pluginpropertydefinition.newbuilder(\"mypropid2",{"_index":6444,"title":{},"name":{},"text":{"147":{}},"component":{}}],["plugins/bundl",{"_index":6424,"title":{},"name":{},"text":{"147":{},"172":{}},"component":{}}],["plugins/cach",{"_index":6425,"title":{},"name":{},"text":{"147":{},"172":{}},"component":{}}],["point",{"_index":350,"title":{"56-2":{}},"name":{},"text":{"3":{},"8":{},"11":{},"27":{},"31":{},"35":{},"36":{},"44":{},"52":{},"53":{},"54":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"75":{},"77":{},"78":{},"80":{},"81":{},"104":{},"140":{},"141":{},"144":{},"151":{},"156":{},"171":{},"176":{},"183":{},"184":{},"185":{},"198":{},"254":{},"262":{},"265":{},"267":{},"268":{},"270":{},"274":{},"276":{},"278":{}},"component":{}}],["pointer",{"_index":6156,"title":{},"name":{},"text":{"140":{}},"component":{}}],["pointless",{"_index":4965,"title":{},"name":{},"text":{"79":{}},"component":{}}],["pois",{"_index":6069,"title":{},"name":{},"text":{"137":{}},"component":{}}],["pojo",{"_index":2570,"title":{},"name":{},"text":{"42":{},"57":{}},"component":{}}],["polici",{"_index":1761,"title":{"28-4":{},"79-24":{}},"name":{},"text":{"28":{},"31":{},"44":{},"60":{},"61":{},"79":{},"80":{},"81":{},"88":{},"106":{},"117":{},"172":{},"185":{}},"component":{}}],["policy=mysequencingpolici",{"_index":5143,"title":{},"name":{},"text":{"80":{}},"component":{}}],["poll",{"_index":2252,"title":{},"name":{},"text":{"33":{},"80":{},"104":{},"108":{},"203":{}},"component":{}}],["polltimeout(timeoutmilli",{"_index":5521,"title":{},"name":{},"text":{"104":{}},"component":{}}],["polymorph",{"_index":1492,"title":{"74":{}},"name":{"74":{}},"text":{"24":{},"60":{},"61":{},"74":{}},"component":{}}],["pom",{"_index":1306,"title":{},"name":{},"text":{"23":{},"31":{},"61":{},"275":{},"276":{}},"component":{}}],["pom.xml",{"_index":3657,"title":{},"name":{},"text":{"60":{},"267":{},"273":{},"275":{},"276":{},"281":{}},"component":{}}],["pool",{"_index":2020,"title":{"80-10":{},"80-25":{},"80-26":{},"80-30":{},"80-31":{},"80-42":{},"80-43":{},"80-54":{},"80-58":{},"80-69":{},"80-70":{}},"name":{},"text":{"31":{},"61":{},"80":{},"104":{},"107":{},"129":{},"137":{},"163":{},"254":{}},"component":{}}],["pooledstreamingeventprocessor",{"_index":3202,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["pooledstreamingprocessorconfigur",{"_index":5040,"title":{},"name":{},"text":{"80":{}},"component":{}}],["pooledstreamingprocessorconfigurermodul",{"_index":5037,"title":{},"name":{},"text":{"80":{}},"component":{}}],["poor",{"_index":1203,"title":{},"name":{},"text":{"17":{},"19":{},"241":{},"261":{},"269":{},"270":{}},"component":{}}],["poorli",{"_index":7739,"title":{},"name":{},"text":{"271":{}},"component":{}}],["pop",{"_index":6137,"title":{},"name":{},"text":{"139":{}},"component":{}}],["popul",{"_index":2482,"title":{},"name":{},"text":{"38":{},"43":{},"49":{},"61":{},"278":{}},"component":{}}],["popular",{"_index":1080,"title":{},"name":{},"text":{"8":{},"15":{},"21":{},"105":{},"200":{}},"component":{}}],["popup",{"_index":8005,"title":{},"name":{},"text":{"280":{}},"component":{}}],["port",{"_index":361,"title":{},"name":{},"text":{"3":{},"60":{},"102":{},"141":{},"142":{},"148":{},"154":{},"159":{},"161":{},"163":{},"167":{},"169":{},"171":{},"172":{},"174":{},"179":{},"184":{},"185":{},"196":{},"198":{},"200":{},"203":{},"205":{},"281":{}},"component":{}}],["port=7800",{"_index":5492,"title":{},"name":{},"text":{"102":{}},"component":{}}],["port=localhost:8024",{"_index":7253,"title":{},"name":{},"text":{"196":{}},"component":{}}],["portend",{"_index":5813,"title":{},"name":{},"text":{"121":{}},"component":{}}],["portion",{"_index":2095,"title":{},"name":{},"text":{"31":{}},"component":{}}],["portray",{"_index":4675,"title":{},"name":{},"text":{"71":{}},"component":{}}],["port}/v1/contexts/finance/commands/{command",{"_index":7461,"title":{},"name":{},"text":{"206":{}},"component":{}}],["port}/v1/contexts/orders/handlers/command",{"_index":7459,"title":{},"name":{},"text":{"206":{}},"component":{}}],["pose",{"_index":1486,"title":{},"name":{},"text":{"24":{},"71":{}},"component":{}}],["posibl",{"_index":7952,"title":{},"name":{},"text":{"277":{}},"component":{}}],["posit",{"_index":860,"title":{},"name":{},"text":{"5":{},"38":{},"51":{},"60":{},"61":{},"79":{},"80":{},"122":{},"140":{},"143":{},"172":{},"241":{},"254":{},"270":{}},"component":{}}],["possibl",{"_index":1059,"title":{},"name":{},"text":{"8":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"34":{},"35":{},"36":{},"41":{},"43":{},"44":{},"45":{},"46":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"65":{},"66":{},"68":{},"70":{},"71":{},"75":{},"77":{},"79":{},"80":{},"83":{},"87":{},"88":{},"89":{},"90":{},"91":{},"104":{},"105":{},"107":{},"110":{},"116":{},"130":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"146":{},"150":{},"151":{},"156":{},"162":{},"170":{},"171":{},"172":{},"203":{},"218":{},"223":{},"241":{},"251":{},"254":{},"255":{},"256":{},"258":{},"262":{},"278":{}},"component":{}}],["post",{"_index":3516,"title":{},"name":{},"text":{"60":{},"129":{},"140":{},"142":{},"199":{},"200":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"278":{},"280":{}},"component":{}}],["postconstruct",{"_index":5697,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["postgr",{"_index":3660,"title":{},"name":{},"text":{"60":{}},"component":{}}],["postgres/mysql",{"_index":6541,"title":{},"name":{},"text":{"154":{}},"component":{}}],["postgressagasqlschema",{"_index":4403,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["postgrestokentablefactori",{"_index":5100,"title":{},"name":{},"text":{"80":{}},"component":{}}],["postman",{"_index":7277,"title":{"199":{},"200":{},"199-2":{},"200-3":{},"200-4":{},"200-5":{}},"name":{"199":{},"200":{}},"text":{"199":{},"200":{}},"component":{}}],["postman’",{"_index":7278,"title":{},"name":{},"text":{"199":{},"200":{}},"component":{}}],["postmap",{"_index":5831,"title":{},"name":{},"text":{"122":{},"278":{}},"component":{}}],["postmapping(\"/bik",{"_index":7990,"title":{},"name":{},"text":{"278":{}},"component":{}}],["postmapping(path",{"_index":5772,"title":{},"name":{},"text":{"117":{}},"component":{}}],["postpon",{"_index":2799,"title":{},"name":{},"text":{"46":{}},"component":{}}],["potenti",{"_index":1344,"title":{},"name":{},"text":{"24":{},"35":{},"56":{},"61":{},"71":{},"74":{},"76":{},"101":{},"138":{},"142":{},"156":{},"157":{},"212":{},"239":{},"240":{},"255":{},"263":{},"270":{}},"component":{}}],["pottenti",{"_index":7662,"title":{},"name":{},"text":{"262":{}},"component":{}}],["power",{"_index":1197,"title":{},"name":{},"text":{"16":{},"31":{},"33":{},"137":{},"185":{},"197":{},"262":{},"266":{},"268":{},"270":{},"274":{}},"component":{}}],["pr",{"_index":3390,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["practic",{"_index":1180,"title":{},"name":{},"text":{"15":{},"21":{},"27":{},"30":{},"31":{},"42":{},"46":{},"55":{},"60":{},"66":{},"80":{},"94":{},"96":{},"137":{},"167":{},"185":{},"231":{}},"component":{}}],["pre",{"_index":2077,"title":{"143-6":{},"154-1":{},"155-1":{},"196-3":{}},"name":{},"text":{"31":{},"63":{},"80":{},"114":{},"117":{},"138":{},"139":{},"143":{},"146":{},"156":{},"203":{},"231":{}},"component":{}}],["precaut",{"_index":1812,"title":{},"name":{},"text":{"28":{}},"component":{}}],["preced",{"_index":4319,"title":{},"name":{},"text":{"61":{},"89":{}},"component":{}}],["precis",{"_index":4770,"title":{},"name":{},"text":{"76":{},"80":{}},"component":{}}],["predefin",{"_index":2467,"title":{},"name":{},"text":{"38":{},"43":{},"108":{},"141":{},"170":{},"172":{}},"component":{}}],["predic",{"_index":2378,"title":{},"name":{},"text":{"35":{},"56":{},"66":{},"76":{},"79":{},"112":{},"117":{},"126":{}},"component":{}}],["predica",{"_index":1383,"title":{},"name":{},"text":{"24":{},"61":{},"79":{},"81":{}},"component":{}}],["predict",{"_index":4607,"title":{},"name":{},"text":{"68":{},"137":{}},"component":{}}],["preemptiv",{"_index":4265,"title":{},"name":{},"text":{"61":{}},"component":{}}],["prefer",{"_index":728,"title":{},"name":{},"text":{"4":{},"5":{},"23":{},"24":{},"26":{},"28":{},"42":{},"44":{},"61":{},"66":{},"71":{},"79":{},"89":{},"101":{},"172":{},"197":{},"198":{},"205":{},"229":{},"230":{},"244":{},"260":{},"264":{},"270":{},"273":{},"276":{},"278":{}},"component":{}}],["prefetch",{"_index":5839,"title":{},"name":{},"text":{"122":{},"156":{},"172":{}},"component":{}}],["prefetch}*5",{"_index":6555,"title":{},"name":{},"text":{"156":{},"172":{}},"component":{}}],["prefix",{"_index":3498,"title":{},"name":{},"text":{"60":{},"102":{},"107":{},"108":{},"172":{},"196":{}},"component":{}}],["premis",{"_index":944,"title":{},"name":{},"text":{"7":{}},"component":{}}],["premium",{"_index":758,"title":{"5-12":{},"245-1":{}},"name":{},"text":{"5":{},"245":{},"247":{},"253":{},"254":{},"270":{}},"component":{}}],["prepar",{"_index":1331,"title":{"273":{}},"name":{"273":{}},"text":{"24":{},"35":{},"80":{},"144":{},"196":{},"235":{},"238":{},"260":{},"264":{},"265":{},"273":{},"274":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["preparepaymentcommand",{"_index":7709,"title":{},"name":{},"text":{"270":{}},"component":{}}],["prepareshippingcommand",{"_index":4355,"title":{},"name":{},"text":{"62":{}},"component":{}}],["preprocess",{"_index":7724,"title":{},"name":{},"text":{"270":{}},"component":{}}],["prerequisit",{"_index":1118,"title":{"10":{},"198-1":{},"199-1":{},"200-1":{},"218-1":{}},"name":{},"text":{"196":{},"266":{}},"component":{}}],["prescrib",{"_index":1861,"title":{},"name":{},"text":{"29":{},"31":{},"66":{}},"component":{}}],["presenc",{"_index":238,"title":{},"name":{},"text":{"3":{},"43":{},"94":{},"135":{},"137":{},"184":{},"185":{}},"component":{}}],["present",{"_index":776,"title":{},"name":{},"text":{"5":{},"23":{},"28":{},"29":{},"31":{},"35":{},"43":{},"44":{},"45":{},"52":{},"56":{},"58":{},"61":{},"70":{},"71":{},"74":{},"77":{},"79":{},"80":{},"91":{},"126":{},"135":{},"140":{},"141":{},"154":{},"155":{},"170":{},"203":{},"229":{},"230":{},"234":{},"260":{},"261":{},"264":{},"269":{},"273":{},"277":{}},"component":{}}],["preserv",{"_index":6136,"title":{},"name":{},"text":{"139":{},"146":{},"171":{}},"component":{}}],["pressur",{"_index":3051,"title":{"56-6":{}},"name":{},"text":{"56":{}},"component":{}}],["pretti",{"_index":394,"title":{},"name":{},"text":{"3":{},"33":{},"184":{}},"component":{}}],["prev",{"_index":6359,"title":{},"name":{},"text":{"144":{}},"component":{}}],["prevent",{"_index":1324,"title":{"24-8":{}},"name":{},"text":{"31":{},"33":{},"35":{},"44":{},"45":{},"52":{},"56":{},"60":{},"63":{},"66":{},"71":{},"80":{},"89":{},"90":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"146":{},"149":{},"151":{},"156":{},"218":{},"251":{}},"component":{}}],["preview",{"_index":6027,"title":{},"name":{},"text":{"137":{},"258":{}},"component":{}}],["previou",{"_index":711,"title":{},"name":{},"text":{"4":{},"35":{},"36":{},"38":{},"42":{},"49":{},"51":{},"60":{},"63":{},"66":{},"68":{},"79":{},"80":{},"106":{},"122":{},"137":{},"140":{},"141":{},"144":{},"146":{},"159":{},"170":{},"199":{},"200":{},"212":{},"274":{},"277":{},"278":{},"282":{}},"component":{}}],["previous",{"_index":235,"title":{},"name":{},"text":{"3":{},"32":{},"56":{},"61":{},"135":{},"137":{},"151":{},"184":{},"185":{},"198":{},"278":{}},"component":{}}],["price",{"_index":765,"title":{},"name":{},"text":{"5":{},"245":{},"247":{},"253":{}},"component":{}}],["primari",{"_index":5969,"title":{},"name":{},"text":{"127":{},"137":{},"139":{},"140":{},"141":{},"146":{},"149":{},"151":{},"159":{},"162":{},"170":{},"171":{},"172":{},"185":{},"218":{},"277":{}},"component":{}}],["primarili",{"_index":2578,"title":{},"name":{},"text":{"42":{},"137":{},"155":{}},"component":{}}],["primary/messaging_only/active_backup/passive_backup/secondari",{"_index":6831,"title":{},"name":{},"text":{"171":{}},"component":{}}],["primit",{"_index":2534,"title":{},"name":{},"text":{"40":{},"57":{},"60":{}},"component":{}}],["principl",{"_index":4897,"title":{"191":{}},"name":{},"text":{"79":{},"278":{}},"component":{}}],["print",{"_index":3058,"title":{},"name":{},"text":{"56":{},"280":{}},"component":{}}],["println",{"_index":3127,"title":{},"name":{},"text":{"56":{}},"component":{}}],["prior",{"_index":1949,"title":{},"name":{},"text":{"31":{},"44":{},"60":{},"61":{},"66":{},"71":{},"78":{},"137":{},"139":{},"143":{}},"component":{}}],["priorit",{"_index":5260,"title":{},"name":{},"text":{"80":{}},"component":{}}],["prioriti",{"_index":522,"title":{},"name":{},"text":{"3":{},"60":{},"61":{},"79":{},"121":{},"184":{},"208":{},"213":{},"241":{}},"component":{}}],["prioritizedrunn",{"_index":3511,"title":{},"name":{},"text":{"60":{}},"component":{}}],["prioritya",{"_index":5253,"title":{},"name":{},"text":{"80":{}},"component":{}}],["prioritytask",{"_index":3512,"title":{},"name":{},"text":{"60":{}},"component":{}}],["pristin",{"_index":6099,"title":{},"name":{},"text":{"138":{}},"component":{}}],["privaci",{"_index":876,"title":{},"name":{},"text":{"5":{}},"component":{}}],["privat",{"_index":971,"title":{"8-6":{}},"name":{},"text":{"8":{},"13":{},"27":{},"28":{},"29":{},"35":{},"36":{},"38":{},"43":{},"44":{},"50":{},"57":{},"62":{},"66":{},"75":{},"77":{},"78":{},"79":{},"80":{},"85":{},"87":{},"91":{},"93":{},"109":{},"112":{},"117":{},"122":{},"143":{},"147":{},"169":{},"172":{},"277":{},"278":{},"282":{}},"component":{}}],["private/protect",{"_index":4076,"title":{},"name":{},"text":{"61":{}},"component":{}}],["privileg",{"_index":7562,"title":{},"name":{},"text":{"228":{}},"component":{}}],["pro",{"_index":24,"title":{"103":{},"23-21":{},"23-22":{}},"name":{},"text":{"1":{},"2":{},"23":{},"32":{},"80":{},"103":{},"245":{}},"component":{"103":{}}}],["probabl",{"_index":1451,"title":{},"name":{},"text":{"24":{},"35":{},"77":{},"97":{},"103":{},"282":{}},"component":{}}],["probe",{"_index":605,"title":{},"name":{},"text":{"3":{},"138":{},"176":{},"184":{}},"component":{}}],["problem",{"_index":75,"title":{"2-4":{}},"name":{},"text":{"5":{},"7":{},"24":{},"46":{},"51":{},"60":{},"61":{},"71":{},"79":{},"80":{},"85":{},"138":{},"142":{},"144":{},"151":{},"176":{},"217":{},"241":{},"254":{},"255":{},"256":{},"261":{},"262":{},"263":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"274":{}},"component":{}}],["problemat",{"_index":1387,"title":{},"name":{},"text":{"24":{},"79":{}},"component":{}}],["proce",{"_index":2190,"title":{},"name":{},"text":{"32":{},"33":{},"44":{},"79":{},"80":{},"199":{},"260":{},"268":{}},"component":{}}],["procedur",{"_index":737,"title":{},"name":{},"text":{"4":{},"46":{},"63":{},"65":{},"140":{},"144":{}},"component":{}}],["proceed",{"_index":7234,"title":{},"name":{},"text":{"196":{}},"component":{}}],["process",{"_index":232,"title":{"58":{},"69":{},"70":{},"246":{},"5-13":{},"5-14":{},"35-22":{},"79-5":{},"79-19":{},"79-20":{},"79-21":{},"79-22":{},"80-39":{},"80-45":{},"80-59":{},"89-2":{},"141-2":{},"142-1":{},"154-1":{},"154-2":{},"155-1":{},"155-2":{},"278-2":{}},"name":{"58":{},"69":{},"70":{},"158":{},"246":{}},"text":{"3":{},"5":{},"8":{},"10":{},"11":{},"15":{},"21":{},"23":{},"24":{},"27":{},"28":{},"31":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"46":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"58":{},"60":{},"61":{},"63":{},"65":{},"68":{},"69":{},"70":{},"71":{},"72":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"88":{},"89":{},"90":{},"91":{},"92":{},"97":{},"100":{},"106":{},"107":{},"108":{},"110":{},"113":{},"116":{},"117":{},"121":{},"124":{},"135":{},"137":{},"138":{},"140":{},"141":{},"142":{},"144":{},"146":{},"149":{},"151":{},"155":{},"156":{},"158":{},"161":{},"172":{},"176":{},"177":{},"178":{},"184":{},"185":{},"191":{},"196":{},"199":{},"203":{},"205":{},"208":{},"213":{},"214":{},"216":{},"234":{},"236":{},"239":{},"242":{},"243":{},"244":{},"251":{},"254":{},"255":{},"261":{},"262":{},"265":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["process(pred",{"_index":4925,"title":{},"name":{},"text":{"79":{}},"component":{}}],["process(sequencefilt",{"_index":5770,"title":{},"name":{},"text":{"117":{}},"component":{}}],["processani",{"_index":4924,"title":{},"name":{},"text":{"79":{},"91":{}},"component":{}}],["processdeadlettercompon",{"_index":5359,"title":{},"name":{},"text":{"91":{}},"component":{}}],["processdeadlettercomponent(eventprocessingconfigur",{"_index":5360,"title":{},"name":{},"text":{"91":{}},"component":{}}],["processdeadlettersequencefortenant(str",{"_index":5766,"title":{},"name":{},"text":{"117":{}},"component":{}}],["processing.adoc#_increasing_and_decreasing_segment_count",{"_index":7706,"title":{},"name":{},"text":{"270":{}},"component":{}}],["processingconfigur",{"_index":4866,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"89":{}},"component":{}}],["processingconfiguration.eventprocessor(processornam",{"_index":5195,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registerdeadletterqueu",{"_index":4900,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["processingconfigurer.registerdeadletterqueueprovid",{"_index":4910,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processingconfigurer.registerdefaulterrorhandler(conf",{"_index":4877,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processingconfigurer.registerdefaultlistenerinvocationerrorhandl",{"_index":4871,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processingconfigurer.registerdefaultlistenerinvocationerrorhandler(conf",{"_index":4867,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processingconfigurer.registerdefaultsequencingpolicy(config",{"_index":5139,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registerpooledstreamingeventprocessor",{"_index":5264,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registerpooledstreamingeventprocessor(\"mi",{"_index":5035,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registerpooledstreamingeventprocessorconfigur",{"_index":5077,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registerpooledstreamingeventprocessorconfiguration(\"mi",{"_index":5074,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registerpooledstreamingeventprocessorconfiguration(psepconfig",{"_index":5042,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registersubscribingeventprocessor",{"_index":5292,"title":{},"name":{},"text":{"81":{}},"component":{}}],["processingconfigurer.registersubscribingeventprocessor(\"mi",{"_index":5275,"title":{},"name":{},"text":{"81":{}},"component":{}}],["processingconfigurer.registertokenstore(conf",{"_index":5111,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertokenstore(config",{"_index":5105,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertokenstore(processornam",{"_index":5107,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertrackingeventprocessor",{"_index":5262,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertrackingeventprocessor(\"mi",{"_index":5016,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertrackingeventprocessorconfigur",{"_index":5067,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertrackingeventprocessorconfiguration(\"mi",{"_index":5064,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.registertrackingeventprocessorconfiguration(config",{"_index":5025,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.usingpooledstreamingeventprocessor",{"_index":5029,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processingconfigurer.usingsubscribingeventprocessor",{"_index":5271,"title":{},"name":{},"text":{"81":{}},"component":{}}],["processingconfigurer.usingtrackingeventprocessor",{"_index":5009,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processinggroup",{"_index":4264,"title":{},"name":{},"text":{"61":{},"79":{},"89":{},"91":{},"107":{},"114":{},"117":{}},"component":{}}],["processinggroup(\"card",{"_index":5235,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processinggroup(\"mi",{"_index":4849,"title":{},"name":{},"text":{"79":{},"89":{},"113":{}},"component":{}}],["processinggroup(\"modul",{"_index":4850,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processinggroup(processinggroup",{"_index":4913,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["processinggrouperrorhandlingconfigurermodul",{"_index":4870,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processingstatu",{"_index":2885,"title":{},"name":{},"text":{"51":{}},"component":{}}],["processor",{"_index":858,"title":{"51":{},"79":{},"80":{},"81":{},"143":{},"243":{},"254":{},"52-30":{},"52-31":{},"52-32":{},"79-1":{},"79-3":{},"79-8":{},"79-27":{},"79-28":{},"80-2":{},"80-10":{},"80-23":{},"80-24":{},"80-25":{},"80-26":{},"80-28":{},"80-29":{},"80-30":{},"80-31":{},"80-40":{},"80-41":{},"80-42":{},"80-43":{},"80-50":{},"80-54":{},"80-67":{},"80-68":{},"80-69":{},"80-70":{},"89-1":{},"117-13":{},"143-1":{},"173-1":{},"243-1":{},"243-2":{},"254-1":{},"254-2":{},"255-3":{},"270-8":{},"270-13":{},"270-14":{},"270-15":{},"270-20":{},"271-3":{}},"name":{"51":{},"143":{},"243":{}},"text":{"5":{},"25":{},"31":{},"35":{},"38":{},"39":{},"44":{},"48":{},"50":{},"51":{},"52":{},"60":{},"61":{},"63":{},"65":{},"70":{},"79":{},"80":{},"81":{},"89":{},"90":{},"91":{},"97":{},"100":{},"104":{},"107":{},"108":{},"114":{},"116":{},"117":{},"137":{},"138":{},"142":{},"143":{},"146":{},"151":{},"154":{},"158":{},"162":{},"172":{},"173":{},"178":{},"203":{},"212":{},"236":{},"241":{},"242":{},"243":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"258":{},"267":{},"270":{},"271":{},"274":{}},"component":{}}],["processor.automat",{"_index":5186,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.dlq.en",{"_index":4920,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processor.initi",{"_index":5153,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.initialsegmentcount=32",{"_index":5125,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.load",{"_index":5189,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.mode=pool",{"_index":5038,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.mode=subscrib",{"_index":5278,"title":{},"name":{},"text":{"81":{}},"component":{}}],["processor.mode=track",{"_index":5020,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.sequenc",{"_index":5142,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.source=eventbu",{"_index":5279,"title":{},"name":{},"text":{"81":{}},"component":{}}],["processor.source=eventstor",{"_index":5021,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.source=mi",{"_index":5294,"title":{},"name":{},"text":{"81":{}},"component":{}}],["processor.source=multistreamablemessagesourc",{"_index":5265,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor.thread",{"_index":5151,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processor[{processor",{"_index":5051,"title":{},"name":{},"text":{"80":{}},"component":{}}],["processordefaultconfigurermodul",{"_index":5010,"title":{},"name":{},"text":{"80":{},"81":{}},"component":{}}],["processorerrorhandlingconfigurermodul",{"_index":4879,"title":{},"name":{},"text":{"79":{}},"component":{}}],["processornam",{"_index":2869,"title":{},"name":{},"text":{"50":{},"70":{},"80":{},"104":{},"117":{}},"component":{}}],["processorname.equals(\"extern",{"_index":5799,"title":{},"name":{},"text":{"117":{}},"component":{}}],["processornotificationr",{"_index":4282,"title":{},"name":{},"text":{"61":{}},"component":{}}],["processortype}[${processorname}](${eventclass",{"_index":2990,"title":{},"name":{},"text":{"52":{}},"component":{}}],["processortype}[${processorname}].process(${eventclass",{"_index":2991,"title":{},"name":{},"text":{"52":{}},"component":{}}],["processor’",{"_index":3755,"title":{},"name":{},"text":{"60":{},"79":{},"80":{},"243":{},"254":{},"270":{},"271":{}},"component":{}}],["prod",{"_index":5313,"title":{},"name":{},"text":{"83":{}},"component":{}}],["produc",{"_index":974,"title":{"108-3":{}},"name":{},"text":{"8":{},"24":{},"31":{},"35":{},"43":{},"52":{},"56":{},"61":{},"71":{},"106":{},"107":{},"108":{},"117":{},"151":{},"156":{},"171":{},"239":{},"267":{},"270":{},"271":{},"277":{},"282":{}},"component":{}}],["producercaches",{"_index":5595,"title":{},"name":{},"text":{"107":{}},"component":{}}],["producercachesize(producercaches",{"_index":5599,"title":{},"name":{},"text":{"107":{}},"component":{}}],["producerconfigur",{"_index":5596,"title":{},"name":{},"text":{"107":{}},"component":{}}],["producerfactori",{"_index":5585,"title":{},"name":{},"text":{"107":{},"108":{}},"component":{}}],["producerfactory(dur",{"_index":5593,"title":{},"name":{},"text":{"107":{}},"component":{}}],["producerfactory(producerfactori",{"_index":5608,"title":{},"name":{},"text":{"107":{}},"component":{}}],["producerrecord",{"_index":5570,"title":{},"name":{},"text":{"106":{}},"component":{}}],["producertyp",{"_index":2048,"title":{},"name":{},"text":{"31":{}},"component":{}}],["product",{"_index":854,"title":{"8-5":{},"16-1":{},"137-22":{}},"name":{},"text":{"5":{},"8":{},"10":{},"15":{},"19":{},"21":{},"23":{},"35":{},"71":{},"79":{},"80":{},"84":{},"90":{},"102":{},"106":{},"134":{},"137":{},"144":{},"167":{},"185":{},"196":{},"227":{},"229":{},"231":{},"237":{},"245":{},"262":{},"263":{},"269":{},"270":{},"279":{}},"component":{}}],["profil",{"_index":3910,"title":{},"name":{},"text":{"61":{},"165":{},"244":{},"281":{}},"component":{}}],["profit",{"_index":1433,"title":{},"name":{},"text":{"24":{}},"component":{}}],["program",{"_index":104,"title":{},"name":{},"text":{"2":{},"31":{},"38":{},"111":{},"121":{},"197":{}},"component":{}}],["programmat",{"_index":1522,"title":{},"name":{},"text":{"25":{},"46":{},"251":{},"254":{}},"component":{}}],["progress",{"_index":2792,"title":{},"name":{},"text":{"46":{},"51":{},"66":{},"68":{},"80":{},"97":{},"104":{},"137":{},"142":{},"151":{},"172":{},"203":{},"254":{},"278":{}},"component":{}}],["project",{"_index":50,"title":{"194":{},"276":{},"9-3":{},"9-6":{},"9-7":{},"117-5":{},"117-7":{},"276-1":{},"276-2":{},"276-4":{},"277-2":{},"277-5":{},"277-8":{}},"name":{"194":{},"276":{},"277":{}},"text":{"1":{},"5":{},"7":{},"8":{},"9":{},"10":{},"23":{},"26":{},"33":{},"38":{},"47":{},"56":{},"60":{},"61":{},"80":{},"84":{},"89":{},"105":{},"108":{},"109":{},"112":{},"116":{},"117":{},"119":{},"121":{},"122":{},"128":{},"143":{},"144":{},"156":{},"191":{},"194":{},"196":{},"234":{},"267":{},"270":{},"273":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{}},"component":{}}],["project.groupid",{"_index":7832,"title":{},"name":{},"text":{"276":{}},"component":{}}],["project.vers",{"_index":7833,"title":{},"name":{},"text":{"276":{}},"component":{}}],["project.yml",{"_index":3440,"title":{},"name":{},"text":{"60":{}},"component":{}}],["project=your_project_id",{"_index":7247,"title":{},"name":{},"text":{"196":{}},"component":{}}],["projection’",{"_index":7953,"title":{},"name":{},"text":{"277":{}},"component":{}}],["projector",{"_index":2626,"title":{"44-20":{}},"name":{},"text":{},"component":{}}],["project’",{"_index":1070,"title":{},"name":{},"text":{"8":{},"9":{},"105":{},"275":{},"276":{},"282":{}},"component":{}}],["prometheu",{"_index":2838,"title":{},"name":{},"text":{"50":{},"51":{},"176":{},"179":{}},"component":{}}],["promin",{"_index":2913,"title":{},"name":{},"text":{"52":{}},"component":{}}],["prompt",{"_index":6783,"title":{},"name":{},"text":{"165":{},"167":{},"171":{},"196":{}},"component":{}}],["prone",{"_index":4524,"title":{},"name":{},"text":{"66":{},"154":{}},"component":{}}],["proof",{"_index":1424,"title":{},"name":{},"text":{"24":{}},"component":{}}],["prop",{"_index":6412,"title":{},"name":{},"text":{"146":{},"147":{},"161":{},"171":{}},"component":{}}],["propag",{"_index":2964,"title":{},"name":{},"text":{"52":{},"56":{},"60":{},"61":{},"79":{},"156":{},"173":{},"212":{}},"component":{}}],["propagatingerrorhandl",{"_index":4876,"title":{},"name":{},"text":{"79":{}},"component":{}}],["proper",{"_index":4710,"title":{},"name":{},"text":{"71":{},"77":{},"102":{},"140":{},"155":{},"278":{}},"component":{}}],["properli",{"_index":782,"title":{},"name":{},"text":{"5":{},"8":{},"31":{},"61":{},"71":{},"104":{},"107":{},"144":{},"180":{}},"component":{}}],["properti",{"_index":310,"title":{"172":{},"24-4":{},"80-7":{},"80-15":{},"80-44":{},"80-48":{},"80-53":{},"80-57":{},"80-71":{},"81-6":{},"81-12":{},"108-11":{},"172-5":{},"203-1":{}},"name":{},"text":{"3":{},"4":{},"24":{},"25":{},"26":{},"28":{},"31":{},"33":{},"35":{},"43":{},"44":{},"45":{},"50":{},"52":{},"60":{},"61":{},"62":{},"63":{},"66":{},"70":{},"71":{},"77":{},"79":{},"80":{},"81":{},"89":{},"96":{},"98":{},"104":{},"108":{},"114":{},"116":{},"117":{},"118":{},"130":{},"137":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"154":{},"156":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"169":{},"170":{},"172":{},"173":{},"174":{},"176":{},"177":{},"179":{},"180":{},"181":{},"183":{},"184":{},"185":{},"196":{},"199":{},"201":{},"203":{},"205":{},"212":{},"217":{},"223":{},"225":{},"241":{},"251":{},"270":{},"273":{},"275":{},"276":{},"278":{},"281":{}},"component":{}}],["properties.setdriverclassname(\"org.postgresql.driv",{"_index":5747,"title":{},"name":{},"text":{"117":{}},"component":{}}],["properties.setpassword(\"postgr",{"_index":5749,"title":{},"name":{},"text":{"117":{}},"component":{}}],["properties.seturl(\"jdbc:postgresql://localhost:5432/\"+tenant.tenantid",{"_index":5746,"title":{},"name":{},"text":{"117":{}},"component":{}}],["properties.setusername(\"postgr",{"_index":5748,"title":{},"name":{},"text":{"117":{}},"component":{}}],["properties/.yml",{"_index":1576,"title":{},"name":{},"text":{"25":{}},"component":{}}],["property\").build",{"_index":6443,"title":{},"name":{},"text":{"147":{}},"component":{}}],["propertyname(\"myproperti",{"_index":5138,"title":{},"name":{},"text":{"80":{}},"component":{}}],["propertysequencingpolici",{"_index":4184,"title":{},"name":{},"text":{"61":{},"80":{},"81":{}},"component":{}}],["propertysequencingpolicy.builder(someevent.class",{"_index":5136,"title":{},"name":{},"text":{"80":{}},"component":{}}],["propos",{"_index":3985,"title":{},"name":{},"text":{"61":{},"262":{}},"component":{}}],["prorat",{"_index":7613,"title":{},"name":{},"text":{"245":{}},"component":{}}],["prose",{"_index":998,"title":{"10-3":{}},"name":{},"text":{"8":{},"10":{}},"component":{}}],["protect",{"_index":512,"title":{"5-15":{}},"name":{},"text":{"3":{},"5":{},"35":{},"38":{},"56":{},"60":{},"71":{},"75":{},"78":{},"80":{},"143":{},"184":{},"201":{},"278":{}},"component":{}}],["protocol",{"_index":626,"title":{},"name":{},"text":{"3":{},"8":{},"31":{},"101":{},"149":{},"180":{},"184":{},"244":{}},"component":{}}],["prototyp",{"_index":1902,"title":{},"name":{},"text":{"29":{}},"component":{}}],["prove",{"_index":1182,"title":{},"name":{},"text":{"15":{},"21":{},"51":{},"244":{}},"component":{}}],["proven",{"_index":7799,"title":{},"name":{},"text":{"275":{}},"component":{}}],["provid",{"_index":10,"title":{"38-2":{},"43-1":{},"43-5":{},"52-11":{},"79-16":{},"244-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"11":{},"13":{},"15":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"85":{},"89":{},"93":{},"94":{},"96":{},"97":{},"99":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"111":{},"112":{},"114":{},"117":{},"119":{},"121":{},"122":{},"126":{},"129":{},"131":{},"134":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"146":{},"147":{},"149":{},"150":{},"151":{},"155":{},"158":{},"159":{},"160":{},"161":{},"163":{},"165":{},"167":{},"168":{},"170":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"180":{},"181":{},"184":{},"185":{},"197":{},"201":{},"203":{},"205":{},"206":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"218":{},"221":{},"224":{},"225":{},"226":{},"229":{},"233":{},"234":{},"235":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"260":{},"261":{},"263":{},"264":{},"266":{},"267":{},"269":{},"270":{},"273":{},"274":{},"275":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["provideformessage(@nonnul",{"_index":2953,"title":{},"name":{},"text":{"52":{}},"component":{}}],["provider’",{"_index":6471,"title":{},"name":{},"text":{"150":{},"165":{}},"component":{}}],["provis",{"_index":3912,"title":{"185-6":{}},"name":{},"text":{"61":{},"106":{},"154":{},"155":{},"185":{}},"component":{}}],["proxi",{"_index":5759,"title":{},"name":{},"text":{"117":{},"180":{},"218":{}},"component":{}}],["psep",{"_index":3926,"title":{},"name":{},"text":{"61":{},"80":{}},"component":{}}],["psepconfig",{"_index":5034,"title":{},"name":{},"text":{"80":{}},"component":{}}],["psep’",{"_index":5168,"title":{},"name":{},"text":{"80":{}},"component":{}}],["psqlexcept",{"_index":3921,"title":{},"name":{},"text":{"61":{}},"component":{}}],["public",{"_index":1155,"title":{"107-1":{},"107-2":{}},"name":{},"text":{"13":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"43":{},"44":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"88":{},"89":{},"91":{},"93":{},"96":{},"100":{},"103":{},"104":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"122":{},"127":{},"137":{},"146":{},"147":{},"169":{},"172":{},"180":{},"255":{},"277":{},"278":{},"281":{}},"component":{}}],["publicli",{"_index":7755,"title":{},"name":{},"text":{"273":{}},"component":{}}],["publicuseraccount",{"_index":1905,"title":{},"name":{},"text":{"29":{}},"component":{}}],["publish",{"_index":789,"title":{"107":{},"66-7":{},"122-13":{},"200-5":{}},"name":{"107":{}},"text":{"5":{},"23":{},"25":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"42":{},"43":{},"44":{},"45":{},"51":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"66":{},"73":{},"75":{},"78":{},"79":{},"80":{},"81":{},"83":{},"86":{},"87":{},"98":{},"104":{},"105":{},"107":{},"108":{},"117":{},"122":{},"126":{},"151":{},"162":{},"176":{},"197":{},"200":{},"212":{},"214":{},"218":{},"255":{},"281":{}},"component":{}}],["publish_ev",{"_index":6610,"title":{},"name":{},"text":{"162":{},"164":{},"171":{}},"component":{}}],["publisheracktimeout",{"_index":5604,"title":{},"name":{},"text":{"107":{}},"component":{}}],["publisheracktimeout(publisheracktimeout",{"_index":5610,"title":{},"name":{},"text":{"107":{}},"component":{}}],["publisherinterceptor",{"_index":2062,"title":{},"name":{},"text":{"31":{}},"component":{}}],["publisherthreadcount",{"_index":2073,"title":{},"name":{},"text":{"31":{}},"component":{}}],["publishev",{"_index":5881,"title":{},"name":{},"text":{"122":{}},"component":{}}],["publishing/dispatch",{"_index":2689,"title":{},"name":{},"text":{"44":{}},"component":{}}],["publishing/handl",{"_index":2825,"title":{},"name":{},"text":{"50":{}},"component":{}}],["pull",{"_index":2472,"title":{},"name":{},"text":{"38":{},"56":{},"60":{},"61":{},"79":{},"274":{}},"component":{}}],["purchas",{"_index":843,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pure",{"_index":2225,"title":{},"name":{},"text":{"33":{},"60":{},"66":{},"71":{}},"component":{}}],["purg",{"_index":6052,"title":{},"name":{},"text":{"137":{},"171":{}},"component":{}}],["purpos",{"_index":528,"title":{"196-2":{},"224-2":{},"233-2":{}},"name":{},"text":{"3":{},"7":{},"22":{},"24":{},"30":{},"34":{},"35":{},"39":{},"42":{},"44":{},"45":{},"46":{},"48":{},"52":{},"55":{},"57":{},"60":{},"61":{},"63":{},"64":{},"66":{},"67":{},"71":{},"72":{},"75":{},"79":{},"103":{},"105":{},"114":{},"134":{},"141":{},"145":{},"151":{},"152":{},"162":{},"166":{},"168":{},"170":{},"171":{},"173":{},"175":{},"182":{},"184":{},"199":{},"207":{},"261":{},"270":{},"271":{}},"component":{}}],["push",{"_index":418,"title":{},"name":{},"text":{"3":{},"38":{},"128":{},"154":{},"184":{}},"component":{}}],["put",{"_index":286,"title":{},"name":{},"text":{"3":{},"44":{},"51":{},"60":{},"74":{},"75":{},"78":{},"79":{},"80":{},"88":{},"92":{},"107":{},"114":{},"184":{},"193":{},"212":{}},"component":{}}],["pwd}/data1",{"_index":481,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/data2",{"_index":489,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/data3",{"_index":495,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/events1",{"_index":485,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/events2",{"_index":491,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/events3",{"_index":497,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/log1",{"_index":487,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/log2",{"_index":493,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["pwd}/log3",{"_index":499,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["python",{"_index":100,"title":{},"name":{},"text":{"2":{},"8":{},"197":{}},"component":{}}],["python3",{"_index":1083,"title":{},"name":{},"text":{"8":{}},"component":{}}],["q",{"_index":68,"title":{"2-1":{},"2-2":{},"2-3":{},"2-4":{},"2-5":{},"2-6":{},"2-7":{},"5-1":{},"5-2":{},"5-3":{},"5-4":{},"5-5":{},"5-6":{},"5-7":{},"5-8":{},"5-9":{},"5-10":{},"5-11":{},"5-12":{},"5-13":{},"5-14":{},"5-15":{}},"name":{},"text":{"122":{}},"component":{}}],["q.getqueryname().equals(\"myblockedqueri",{"_index":5922,"title":{},"name":{},"text":{"122":{}},"component":{}}],["quadrant",{"_index":897,"title":{},"name":{},"text":{"7":{}},"component":{}}],["qualifi",{"_index":1763,"title":{},"name":{},"text":{"28":{},"31":{},"38":{},"45":{},"56":{},"61":{},"92":{},"93":{},"95":{}},"component":{}}],["qualifier(\"eventseri",{"_index":2203,"title":{},"name":{},"text":{"32":{},"33":{},"35":{},"89":{}},"component":{}}],["qualifier(\"localseg",{"_index":2134,"title":{},"name":{},"text":{"31":{},"127":{}},"component":{}}],["qualifier(\"messageseri",{"_index":1419,"title":{},"name":{},"text":{"24":{}},"component":{}}],["quartz",{"_index":2214,"title":{"33-6":{}},"name":{},"text":{"33":{},"60":{},"61":{}},"component":{}}],["quartzdeadlinemanag",{"_index":2145,"title":{},"name":{},"text":{"32":{},"60":{},"61":{}},"component":{}}],["quartzeventschedul",{"_index":2227,"title":{},"name":{},"text":{"33":{},"60":{}},"component":{}}],["quartzeventschedulerfactorybean",{"_index":2260,"title":{},"name":{},"text":{"33":{},"60":{}},"component":{}}],["queri",{"_index":800,"title":{"55":{},"56":{},"57":{},"58":{},"112":{},"211":{},"216":{},"277":{},"42-3":{},"44-9":{},"44-10":{},"44-12":{},"45-3":{},"52-36":{},"52-37":{},"52-40":{},"52-43":{},"52-46":{},"53-1":{},"54-1":{},"54-2":{},"56-1":{},"56-2":{},"56-3":{},"56-4":{},"56-5":{},"57-1":{},"57-2":{},"57-3":{},"117-6":{},"122-5":{},"122-6":{},"122-8":{},"142-4":{},"156-1":{},"177-2":{},"199-7":{},"199-9":{},"200-4":{},"211-4":{},"211-5":{},"211-6":{},"218-5":{},"277-5":{},"277-6":{},"277-7":{},"277-8":{},"277-9":{},"277-10":{},"277-11":{},"277-12":{},"277-13":{}},"name":{"56":{},"57":{},"58":{},"112":{},"211":{},"216":{}},"text":{"5":{},"18":{},"19":{},"22":{},"23":{},"24":{},"25":{},"27":{},"29":{},"35":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"66":{},"80":{},"81":{},"92":{},"93":{},"97":{},"111":{},"112":{},"114":{},"117":{},"122":{},"130":{},"131":{},"137":{},"138":{},"142":{},"143":{},"146":{},"147":{},"150":{},"154":{},"155":{},"156":{},"162":{},"163":{},"172":{},"176":{},"177":{},"185":{},"191":{},"197":{},"199":{},"200":{},"210":{},"211":{},"212":{},"213":{},"215":{},"216":{},"218":{},"221":{},"239":{},"240":{},"255":{},"256":{},"267":{},"270":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{"190":{},"191":{},"192":{},"193":{},"194":{},"195":{}}}],["queries.wait",{"_index":7039,"title":{},"name":{},"text":{"176":{}},"component":{}}],["query'",{"_index":5844,"title":{},"name":{},"text":{"122":{}},"component":{}}],["query(str",{"_index":3054,"title":{},"name":{},"text":{"56":{}},"component":{}}],["query.getfilter().getidstartswith",{"_index":3076,"title":{},"name":{},"text":{"56":{}},"component":{}}],["query.limit",{"_index":6883,"title":{},"name":{},"text":{"172":{}},"component":{}}],["query.timeout",{"_index":6964,"title":{},"name":{},"text":{"172":{}},"component":{}}],["query1(str",{"_index":3062,"title":{},"name":{},"text":{"56":{}},"component":{}}],["query2(str",{"_index":3063,"title":{},"name":{},"text":{"56":{}},"component":{}}],["querya",{"_index":3167,"title":{},"name":{},"text":{"57":{}},"component":{}}],["queryb",{"_index":3166,"title":{},"name":{},"text":{"57":{}},"component":{}}],["querybu",{"_index":2688,"title":{},"name":{},"text":{"44":{},"46":{},"50":{},"52":{},"54":{},"56":{},"57":{},"61":{},"117":{},"242":{},"255":{},"270":{}},"component":{}}],["querybus(globalmetricregistri",{"_index":3047,"title":{},"name":{},"text":{"54":{}},"component":{}}],["querybus.query(query).thenaccept(system.out::println",{"_index":3059,"title":{},"name":{},"text":{"56":{}},"component":{}}],["querybus.scattergather(queri",{"_index":3064,"title":{},"name":{},"text":{"56":{}},"component":{}}],["queryc",{"_index":3168,"title":{},"name":{},"text":{"57":{}},"component":{}}],["querydispatcher(priv",{"_index":5677,"title":{},"name":{},"text":{"112":{}},"component":{}}],["querydispatchinterceptor`",{"_index":3042,"title":{},"name":{},"text":{"54":{}},"component":{}}],["queryexecutionexcept",{"_index":2558,"title":{},"name":{},"text":{"41":{}},"component":{}}],["queryexecutionexception`with",{"_index":2566,"title":{},"name":{},"text":{"41":{}},"component":{}}],["querygateway",{"_index":3040,"title":{"112-1":{}},"name":{},"text":{"54":{},"56":{},"60":{},"61":{},"112":{},"122":{},"131":{},"277":{},"278":{}},"component":{}}],["querygateway#streamingqueri",{"_index":3913,"title":{},"name":{},"text":{"61":{}},"component":{}}],["querygateway.queri",{"_index":7896,"title":{},"name":{},"text":{"277":{}},"component":{}}],["querygateway.query(bikestatusnamedqueries.find_on",{"_index":7909,"title":{},"name":{},"text":{"277":{}},"component":{}}],["querygateway.query(countcardsummariesqueri",{"_index":5684,"title":{},"name":{},"text":{"112":{}},"component":{}}],["querygateway.query(find_all_queri",{"_index":7903,"title":{},"name":{},"text":{"277":{}},"component":{}}],["querygateway.query(queri",{"_index":5680,"title":{},"name":{},"text":{"112":{}},"component":{}}],["querygateway.streamingquery(queri",{"_index":3131,"title":{},"name":{},"text":{"56":{}},"component":{}}],["querygateway.subscriptionqueri",{"_index":3098,"title":{},"name":{},"text":{"56":{}},"component":{}}],["queryhandl",{"_index":2698,"title":{},"name":{},"text":{"44":{},"45":{},"53":{},"56":{},"57":{},"58":{},"60":{},"61":{},"277":{}},"component":{}}],["queryhandler(querynam",{"_index":3061,"title":{},"name":{},"text":{"56":{},"277":{}},"component":{}}],["querymani",{"_index":5686,"title":{},"name":{},"text":{"112":{}},"component":{}}],["querymessag",{"_index":1371,"title":{},"name":{},"text":{"24":{},"40":{},"44":{},"45":{},"61":{}},"component":{}}],["querymessage.class",{"_index":2704,"title":{},"name":{},"text":{"44":{}},"component":{}}],["querynam",{"_index":3025,"title":{},"name":{},"text":{"52":{},"53":{},"56":{},"61":{},"122":{},"211":{},"277":{}},"component":{}}],["queryopt",{"_index":5685,"title":{},"name":{},"text":{"112":{}},"component":{}}],["queryprocessingtask(${querynam",{"_index":3010,"title":{},"name":{},"text":{"52":{}},"component":{}}],["queryrequest",{"_index":4214,"title":{},"name":{},"text":{"61":{}},"component":{}}],["queryrespons",{"_index":2592,"title":{},"name":{},"text":{"43":{}},"component":{}}],["queryresult",{"_index":3123,"title":{},"name":{},"text":{"56":{}},"component":{}}],["queryresult.handl",{"_index":3124,"title":{},"name":{},"text":{"56":{}},"component":{}}],["queryupd",{"_index":5822,"title":{"122-11":{}},"name":{},"text":{},"component":{}}],["queryupdateemitt",{"_index":3021,"title":{"112-2":{}},"name":{},"text":{"52":{},"54":{},"56":{},"61":{},"112":{},"117":{}},"component":{}}],["queryupdateemitter(updateemitt",{"_index":3050,"title":{},"name":{},"text":{"54":{}},"component":{}}],["queryupdateemitter.emit(fetchcardsummariesquery.class",{"_index":3087,"title":{},"name":{},"text":{"56":{}},"component":{}}],["query’",{"_index":3007,"title":{},"name":{},"text":{"52":{},"53":{},"57":{}},"component":{}}],["question",{"_index":948,"title":{"14-3":{}},"name":{},"text":{"7":{},"14":{},"54":{},"57":{},"70":{},"80":{},"178":{},"232":{}},"component":{}}],["queu",{"_index":2987,"title":{},"name":{},"text":{"52":{},"56":{},"90":{},"177":{},"270":{}},"component":{}}],["queue",{"_index":865,"title":{"89":{},"90":{},"100":{},"113":{},"251":{},"79-11":{},"79-12":{},"79-13":{},"79-16":{},"79-21":{},"79-22":{},"89-1":{},"89-2":{},"114-4":{},"117-8":{}},"name":{},"text":{"5":{},"35":{},"60":{},"61":{},"79":{},"80":{},"88":{},"89":{},"90":{},"91":{},"98":{},"99":{},"100":{},"113":{},"117":{},"142":{},"172":{},"247":{},"251":{},"253":{},"258":{},"273":{}},"component":{}}],["quick",{"_index":515,"title":{"197":{},"171-1":{},"198-2":{}},"name":{},"text":{"3":{},"7":{},"14":{},"23":{},"24":{},"35":{},"61":{},"171":{},"184":{},"185":{},"197":{},"198":{},"204":{},"270":{},"272":{},"277":{},"281":{}},"component":{"197":{},"198":{},"199":{},"200":{}}}],["quickest",{"_index":1246,"title":{},"name":{},"text":{"23":{},"131":{}},"component":{}}],["quickli",{"_index":4271,"title":{},"name":{},"text":{"61":{},"80":{},"101":{},"151":{},"198":{},"229":{},"266":{},"280":{}},"component":{}}],["quit",{"_index":1337,"title":{},"name":{},"text":{"24":{},"35":{},"63":{},"71":{},"124":{},"127":{}},"component":{}}],["quota",{"_index":756,"title":{"5-9":{}},"name":{},"text":{},"component":{}}],["r",{"_index":382,"title":{},"name":{},"text":{"3":{},"80":{},"122":{},"139":{},"146":{},"161":{},"162":{},"167":{},"171":{},"184":{}},"component":{}}],["r.getpayload().equ",{"_index":5916,"title":{},"name":{},"text":{"122":{}},"component":{}}],["r.getpayload().equals(\"blockedpayload",{"_index":5913,"title":{},"name":{},"text":{"122":{}},"component":{}}],["rabbitlistener(queu",{"_index":5455,"title":{},"name":{},"text":{"100":{}},"component":{}}],["rabbitmq",{"_index":5450,"title":{},"name":{},"text":{"99":{}},"component":{}}],["race",{"_index":6056,"title":{},"name":{},"text":{"137":{},"138":{},"212":{}},"component":{}}],["rafaesp",{"_index":4228,"title":{},"name":{},"text":{"61":{}},"component":{}}],["raft",{"_index":6046,"title":{},"name":{},"text":{"137":{},"138":{},"149":{},"172":{},"176":{}},"component":{}}],["raft_clean_log",{"_index":6682,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_get_statu",{"_index":6683,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_list_appl",{"_index":6684,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_list_context",{"_index":6686,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_list_context_memb",{"_index":6685,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_start_context",{"_index":6687,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_stepdown",{"_index":6688,"title":{},"name":{},"text":{"164":{}},"component":{}}],["raft_stop_context",{"_index":6689,"title":{},"name":{},"text":{"164":{}},"component":{}}],["rais",{"_index":2573,"title":{},"name":{},"text":{"42":{},"71":{},"79":{},"80":{},"139":{}},"component":{}}],["random",{"_index":1690,"title":{},"name":{},"text":{"27":{},"31":{},"267":{}},"component":{}}],["random_key",{"_index":2104,"title":{},"name":{},"text":{"31":{}},"component":{}}],["randomli",{"_index":5374,"title":{},"name":{},"text":{"92":{},"196":{},"263":{}},"component":{}}],["rang",{"_index":2978,"title":{},"name":{},"text":{"52":{},"134":{},"241":{},"245":{},"270":{}},"component":{}}],["range(eventchannelprovid",{"_index":6344,"title":{},"name":{},"text":{"144":{}},"component":{}}],["rank",{"_index":3531,"title":{},"name":{},"text":{"60":{}},"component":{}}],["rare",{"_index":995,"title":{},"name":{},"text":{"8":{},"61":{},"137":{},"144":{},"172":{}},"component":{}}],["rate",{"_index":862,"title":{"151-13":{},"255-2":{},"270-34":{}},"name":{},"text":{"5":{},"151":{},"156":{},"172":{},"208":{},"232":{},"236":{},"239":{},"255":{},"256":{},"267":{},"270":{},"271":{}},"component":{}}],["rate=0",{"_index":6510,"title":{},"name":{},"text":{"151":{}},"component":{}}],["rate=5",{"_index":6507,"title":{},"name":{},"text":{"151":{}},"component":{}}],["ratio",{"_index":5173,"title":{},"name":{},"text":{"80":{}},"component":{}}],["rational",{"_index":4735,"title":{},"name":{},"text":{"73":{},"74":{}},"component":{}}],["raw",{"_index":7289,"title":{"208-2":{},"209-2":{},"211-2":{},"213-1":{},"214-1":{},"216-1":{},"221-4":{}},"name":{"220":{}},"text":{"199":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"221":{}},"component":{}}],["rdbm",{"_index":74,"title":{"97":{},"2-4":{}},"name":{},"text":{"17":{},"19":{},"61":{},"80":{},"105":{},"114":{},"154":{},"185":{}},"component":{"97":{}}}],["re",{"_index":4386,"title":{},"name":{},"text":{"63":{},"71":{},"90":{},"180":{},"218":{},"223":{}},"component":{}}],["re)seri",{"_index":4712,"title":{},"name":{},"text":{"71":{}},"component":{}}],["reach",{"_index":1746,"title":{},"name":{},"text":{"27":{},"37":{},"51":{},"57":{},"71":{},"79":{},"80":{},"142":{},"143":{},"156":{},"172":{},"178":{},"276":{},"278":{}},"component":{}}],["react",{"_index":1811,"title":{"122-15":{}},"name":{},"text":{"28":{},"31":{},"37":{},"41":{},"44":{},"60":{},"61":{},"69":{},"79":{},"80":{},"104":{},"261":{},"262":{},"267":{},"278":{}},"component":{}}],["reaction",{"_index":1814,"title":{},"name":{},"text":{"28":{},"73":{}},"component":{}}],["reactiv",{"_index":3109,"title":{},"name":{},"text":{"56":{},"121":{},"122":{}},"component":{}}],["reactivecardrepository.findal",{"_index":3139,"title":{},"name":{},"text":{"56":{}},"component":{}}],["reactivecardrepository.findall().timeout(duration.ofseconds(5",{"_index":3154,"title":{},"name":{},"text":{"56":{}},"component":{}}],["reactivecommandgateway",{"_index":5830,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivecommandgateway.send(command",{"_index":5834,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivecommandgateway.sendall(inputstream",{"_index":5838,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactiveeventgateway",{"_index":5875,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactiveeventgateway.publish(\"ev",{"_index":5882,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactiveeventgateway.registerdispatchinterceptor",{"_index":5876,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivegateway",{"_index":5892,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivegateway.registerdispatchinterceptor",{"_index":5893,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivegateway.registerresulthandlerinterceptor",{"_index":5910,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway",{"_index":5843,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.query(queri",{"_index":5825,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.queryupdates(\"criteriaqueri",{"_index":5870,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.registerresulthandlerinterceptor",{"_index":5914,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.scattergather(queri",{"_index":5848,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.subscriptionquery(\"criteriaqueri",{"_index":5854,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.subscriptionquery(queri",{"_index":5858,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactivequerygateway.subscriptionquerymany(\"criteriaqueri",{"_index":5865,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactor",{"_index":47,"title":{"121":{},"122":{},"23-31":{},"23-32":{},"122-2":{},"122-5":{},"122-12":{},"122-16":{}},"name":{"122":{}},"text":{"1":{},"23":{},"56":{},"60":{},"121":{},"122":{},"156":{},"275":{}},"component":{"121":{},"122":{}}}],["reactor'",{"_index":3110,"title":{},"name":{},"text":{"56":{}},"component":{}}],["reactorcommandgateway",{"_index":5827,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactorconfigur",{"_index":5890,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactoreventgateway",{"_index":5874,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactormessagedispatchinterceptor",{"_index":5883,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactormessagedispatchinterceptor#intercept(mono",{"_index":5889,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactorquerygateway",{"_index":5842,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactorresulthandlerinterceptor",{"_index":5884,"title":{},"name":{},"text":{"122":{}},"component":{}}],["reactor’",{"_index":3138,"title":{},"name":{},"text":{"56":{},"122":{}},"component":{}}],["read",{"_index":571,"title":{"100":{},"146-4":{}},"name":{"100":{}},"text":{"3":{},"8":{},"24":{},"35":{},"36":{},"38":{},"42":{},"45":{},"57":{},"60":{},"61":{},"71":{},"75":{},"81":{},"97":{},"99":{},"100":{},"108":{},"123":{},"141":{},"142":{},"143":{},"144":{},"147":{},"151":{},"154":{},"162":{},"164":{},"170":{},"171":{},"172":{},"177":{},"184":{},"196":{},"200":{},"205":{},"209":{},"234":{},"254":{},"255":{},"260":{},"261":{},"264":{},"270":{},"276":{},"282":{}},"component":{}}],["read,admin",{"_index":6594,"title":{},"name":{},"text":{"161":{},"167":{},"171":{}},"component":{}}],["read/admin",{"_index":6829,"title":{},"name":{},"text":{"171":{}},"component":{}}],["read/chang",{"_index":7244,"title":{},"name":{},"text":{"196":{}},"component":{}}],["read_ev",{"_index":6611,"title":{},"name":{},"text":{"162":{},"164":{},"171":{}},"component":{}}],["read_highest_seqnr",{"_index":6721,"title":{},"name":{},"text":{"164":{}},"component":{}}],["readabl",{"_index":1336,"title":{},"name":{},"text":{"24":{},"33":{},"35":{},"66":{},"192":{}},"component":{}}],["reader",{"_index":930,"title":{},"name":{},"text":{"7":{},"15":{},"19":{},"21":{}},"component":{}}],["readi",{"_index":241,"title":{"273-5":{}},"name":{},"text":{"3":{},"24":{},"46":{},"56":{},"80":{},"84":{},"102":{},"138":{},"142":{},"172":{},"184":{},"199":{},"234":{},"238":{},"265":{},"266":{},"267":{},"273":{},"274":{},"275":{},"277":{},"278":{}},"component":{}}],["readinessprob",{"_index":638,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["readme.md",{"_index":4007,"title":{},"name":{},"text":{"61":{}},"component":{}}],["readonli",{"_index":634,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["readwriteonc",{"_index":653,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["real",{"_index":113,"title":{},"name":{},"text":{"2":{},"5":{},"57":{},"137":{},"139":{},"151":{},"240":{},"266":{},"268":{},"274":{},"277":{}},"component":{}}],["realiti",{"_index":4898,"title":{},"name":{},"text":{"79":{}},"component":{}}],["realiz",{"_index":6304,"title":{},"name":{},"text":{"144":{}},"component":{}}],["realli",{"_index":1435,"title":{},"name":{},"text":{"24":{},"29":{},"31":{},"35":{},"42":{},"48":{},"63":{},"70":{}},"component":{}}],["realm",{"_index":6786,"title":{},"name":{},"text":{"165":{}},"component":{}}],["realm’",{"_index":6794,"title":{},"name":{},"text":{"165":{}},"component":{}}],["rearrang",{"_index":7737,"title":{},"name":{},"text":{"270":{}},"component":{}}],["reason",{"_index":734,"title":{},"name":{},"text":{"4":{},"24":{},"31":{},"35":{},"44":{},"46":{},"56":{},"61":{},"71":{},"79":{},"81":{},"139":{},"140":{},"144":{},"151":{},"180":{},"183":{},"203":{},"261":{},"270":{},"271":{},"275":{},"278":{}},"component":{}}],["rebal",{"_index":3201,"title":{},"name":{},"text":{"60":{}},"component":{}}],["rebalanc",{"_index":6949,"title":{},"name":{},"text":{"172":{}},"component":{}}],["rebalance_processor",{"_index":6701,"title":{},"name":{},"text":{"164":{}},"component":{}}],["rebas",{"_index":1640,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rebuild",{"_index":2883,"title":{},"name":{},"text":{"51":{},"71":{}},"component":{}}],["rebuilt",{"_index":8006,"title":{},"name":{},"text":{"280":{}},"component":{}}],["recal",{"_index":7841,"title":{},"name":{},"text":{"277":{}},"component":{}}],["recap",{"_index":6380,"title":{},"name":{},"text":{"146":{}},"component":{}}],["receipt",{"_index":6524,"title":{},"name":{},"text":{"151":{},"270":{}},"component":{}}],["receiv",{"_index":1399,"title":{"199":{},"208":{},"209":{},"210":{},"211":{},"201-3":{}},"name":{"199":{},"208":{},"209":{},"210":{},"211":{}},"text":{"24":{},"28":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"46":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"66":{},"70":{},"77":{},"79":{},"80":{},"81":{},"100":{},"104":{},"105":{},"106":{},"107":{},"122":{},"126":{},"129":{},"135":{},"137":{},"138":{},"139":{},"142":{},"143":{},"144":{},"146":{},"156":{},"172":{},"177":{},"197":{},"199":{},"201":{},"203":{},"208":{},"209":{},"210":{},"211":{},"214":{},"218":{},"240":{},"244":{},"256":{},"270":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["recent",{"_index":1381,"title":{},"name":{},"text":{"24":{},"33":{},"61":{},"137":{},"139":{},"140":{},"142":{},"149":{},"151":{},"172":{},"176":{},"195":{}},"component":{}}],["recept",{"_index":7879,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["rechargeablegiftcard",{"_index":4740,"title":{},"name":{},"text":{"74":{}},"component":{}}],["recip",{"_index":920,"title":{},"name":{},"text":{"7":{},"15":{},"21":{},"26":{},"61":{}},"component":{}}],["reclaim",{"_index":5814,"title":{},"name":{},"text":{"121":{},"137":{}},"component":{}}],["recogn",{"_index":2388,"title":{},"name":{},"text":{"35":{},"60":{},"63":{},"71":{},"142":{},"276":{}},"component":{}}],["recommend",{"_index":511,"title":{"172-4":{},"196-4":{}},"name":{},"text":{"3":{},"8":{},"23":{},"24":{},"26":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"52":{},"56":{},"57":{},"61":{},"63":{},"65":{},"66":{},"71":{},"77":{},"79":{},"80":{},"97":{},"104":{},"105":{},"107":{},"108":{},"114":{},"122":{},"129":{},"139":{},"141":{},"146":{},"154":{},"155":{},"157":{},"158":{},"169":{},"170":{},"172":{},"184":{},"196":{},"244":{},"254":{},"255":{},"273":{},"280":{}},"component":{}}],["reconnect",{"_index":4327,"title":{"137-17":{}},"name":{},"text":{"61":{},"137":{},"138":{},"141":{},"185":{},"203":{},"212":{},"218":{}},"component":{}}],["reconnect_cli",{"_index":6702,"title":{},"name":{},"text":{"164":{}},"component":{}}],["reconsid",{"_index":4956,"title":{},"name":{},"text":{"79":{}},"component":{}}],["reconstruct",{"_index":1436,"title":{},"name":{},"text":{"24":{},"28":{},"29":{},"31":{},"60":{},"63":{},"71":{}},"component":{}}],["record",{"_index":1094,"title":{},"name":{},"text":{"9":{},"68":{},"106":{},"108":{},"138":{},"277":{},"278":{}},"component":{}}],["record’",{"_index":5623,"title":{},"name":{},"text":{"108":{}},"component":{}}],["recov",{"_index":4015,"title":{},"name":{},"text":{"61":{},"140":{},"151":{}},"component":{}}],["recover",{"_index":7149,"title":{},"name":{},"text":{"180":{}},"component":{}}],["recoveri",{"_index":6379,"title":{"148":{}},"name":{"148":{}},"text":{"145":{},"148":{},"172":{},"174":{}},"component":{}}],["recovery.json",{"_index":6453,"title":{},"name":{},"text":{"148":{},"172":{}},"component":{}}],["recoveryfil",{"_index":6973,"title":{},"name":{},"text":{"172":{}},"component":{}}],["recreat",{"_index":1108,"title":{},"name":{},"text":{"9":{},"28":{},"61":{},"71":{},"75":{},"146":{},"155":{},"203":{}},"component":{}}],["rectifi",{"_index":4292,"title":{},"name":{},"text":{"61":{},"137":{}},"component":{}}],["red",{"_index":801,"title":{},"name":{},"text":{"5":{}},"component":{}}],["redeem",{"_index":3080,"title":{},"name":{},"text":{"56":{},"200":{}},"component":{}}],["redeemcardcommand",{"_index":1766,"title":{},"name":{},"text":{"28":{},"66":{}},"component":{}}],["redeemcardcommand(\"cardid",{"_index":4452,"title":{},"name":{},"text":{"66":{}},"component":{}}],["redeemcardcommand(card_id",{"_index":5310,"title":{},"name":{},"text":{"83":{}},"component":{}}],["redeemcardcommand(str",{"_index":1793,"title":{},"name":{},"text":{"28":{}},"component":{}}],["redeemcmd",{"_index":3126,"title":{},"name":{},"text":{"56":{}},"component":{}}],["redeemcmd(\"gc1",{"_index":3106,"title":{},"name":{},"text":{"56":{}},"component":{}}],["redeemedevt",{"_index":3081,"title":{},"name":{},"text":{"56":{}},"component":{}}],["redesign",{"_index":3546,"title":{},"name":{},"text":{"60":{},"137":{}},"component":{}}],["redirect",{"_index":4389,"title":{},"name":{},"text":{"63":{},"65":{},"138":{},"165":{}},"component":{}}],["redistribut",{"_index":6094,"title":{},"name":{},"text":{"138":{}},"component":{}}],["reduc",{"_index":3606,"title":{},"name":{},"text":{"60":{},"61":{},"71":{},"80":{},"81":{},"137":{},"138":{},"139":{},"151":{},"255":{}},"component":{}}],["reduce(boolean::logicaland",{"_index":6288,"title":{},"name":{},"text":{"143":{}},"component":{}}],["reduct",{"_index":6527,"title":{},"name":{},"text":{"151":{}},"component":{}}],["redund",{"_index":3508,"title":{},"name":{},"text":{"60":{}},"component":{}}],["reevalu",{"_index":4959,"title":{},"name":{},"text":{"79":{}},"component":{}}],["ref",{"_index":1134,"title":{},"name":{},"text":{"11":{}},"component":{}}],["refactor",{"_index":2361,"title":{},"name":{},"text":{"35":{},"38":{},"60":{},"61":{}},"component":{}}],["refer",{"_index":18,"title":{"16":{},"204":{},"247":{},"15-1":{},"21-1":{}},"name":{"16":{}},"text":{"1":{},"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"15":{},"16":{},"21":{},"22":{},"26":{},"28":{},"30":{},"31":{},"34":{},"35":{},"37":{},"39":{},"42":{},"43":{},"52":{},"55":{},"57":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"67":{},"72":{},"75":{},"77":{},"79":{},"80":{},"101":{},"105":{},"117":{},"128":{},"139":{},"143":{},"144":{},"145":{},"146":{},"165":{},"166":{},"171":{},"182":{},"184":{},"185":{},"196":{},"203":{},"204":{},"205":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"217":{},"218":{},"223":{},"239":{},"243":{},"245":{},"270":{},"273":{},"275":{},"277":{},"281":{},"282":{}},"component":{"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"244":{},"245":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{}}}],["referenc",{"_index":1747,"title":{},"name":{},"text":{"27":{},"151":{},"212":{}},"component":{}}],["reference:tuning:ev",{"_index":7705,"title":{},"name":{},"text":{"270":{}},"component":{}}],["referr",{"_index":6660,"title":{},"name":{},"text":{"163":{}},"component":{}}],["reflect",{"_index":1385,"title":{},"name":{},"text":{"24":{},"51":{},"60":{},"61":{},"66":{},"79":{},"236":{}},"component":{}}],["refresh",{"_index":4640,"title":{},"name":{},"text":{"70":{},"173":{},"276":{},"278":{},"280":{}},"component":{}}],["refreshtoken(applicationid",{"_index":7020,"title":{},"name":{},"text":{"173":{}},"component":{}}],["refus",{"_index":6246,"title":{},"name":{},"text":{"142":{}},"component":{}}],["regard",{"_index":1199,"title":{},"name":{},"text":{"17":{},"19":{},"23":{},"28":{},"31":{},"36":{},"48":{},"53":{},"60":{},"61":{},"63":{},"75":{},"97":{},"105":{},"114":{},"180":{},"218":{},"236":{}},"component":{}}],["regardless",{"_index":1493,"title":{},"name":{},"text":{"24":{},"28":{},"31":{},"38":{},"44":{},"52":{},"56":{},"60":{},"61":{},"68":{},"80":{},"104":{},"107":{},"126":{},"245":{},"255":{}},"component":{}}],["regener",{"_index":7019,"title":{},"name":{},"text":{"173":{},"278":{}},"component":{}}],["region",{"_index":6472,"title":{},"name":{},"text":{"150":{},"231":{}},"component":{}}],["regist",{"_index":1153,"title":{"280":{},"29-4":{},"37-1":{},"53-1":{},"74-1":{},"89-1":{},"161-1":{},"208-4":{},"208-5":{},"208-6":{},"209-5":{},"209-6":{},"209-7":{},"211-4":{},"211-5":{},"211-6":{},"244-1":{},"244-3":{},"278-2":{},"278-10":{},"280-4":{}},"name":{},"text":{"13":{},"25":{},"29":{},"31":{},"35":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"74":{},"79":{},"80":{},"81":{},"85":{},"89":{},"93":{},"101":{},"104":{},"117":{},"122":{},"138":{},"141":{},"142":{},"144":{},"146":{},"147":{},"150":{},"161":{},"162":{},"165":{},"167":{},"171":{},"185":{},"199":{},"201":{},"206":{},"208":{},"209":{},"210":{},"211":{},"213":{},"216":{},"218":{},"221":{},"244":{},"260":{},"262":{},"277":{},"278":{},"280":{}},"component":{}}],["registeraggregatefactori",{"_index":4470,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerannotatedcommandhandl",{"_index":4463,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerbik",{"_index":7991,"title":{},"name":{},"text":{"278":{}},"component":{}}],["registerbikecommand",{"_index":7959,"title":{},"name":{},"text":{"278":{},"280":{},"282":{}},"component":{}}],["registerbikecommand(\"bikeid",{"_index":8043,"title":{},"name":{},"text":{"282":{}},"component":{}}],["registerbikecommand(@targetaggregateidentifi",{"_index":7963,"title":{},"name":{},"text":{"278":{}},"component":{}}],["registerbikecommand`",{"_index":7995,"title":{},"name":{},"text":{"278":{}},"component":{}}],["registercommanddispatchinterceptor",{"_index":4475,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registercommandgateway(class",{"_index":4604,"title":{},"name":{},"text":{"68":{}},"component":{}}],["registercommandhandl",{"_index":4471,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registercommandhandler(conf",{"_index":1855,"title":{},"name":{},"text":{"29":{}},"component":{}}],["registercommandhandlerinterceptor",{"_index":4476,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registercommandtargetresolv",{"_index":4485,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registercomponent(axonserverconfiguration.class",{"_index":4638,"title":{},"name":{},"text":{"70":{}},"component":{}}],["registercomponent(targetcontextresolver.class",{"_index":6406,"title":{},"name":{},"text":{"146":{}},"component":{}}],["registerdeadletterpolicy(\"mi",{"_index":4976,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registerdeadletterqueu",{"_index":5356,"title":{},"name":{},"text":{"89":{}},"component":{}}],["registerdeadletterqueue(str",{"_index":5348,"title":{},"name":{},"text":{"89":{}},"component":{}}],["registerdeadletterqueueprovid",{"_index":3331,"title":{},"name":{},"text":{"60":{},"89":{}},"component":{}}],["registerdeadlinedispatchinterceptor",{"_index":4477,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerdeadlinehandlerinterceptor",{"_index":4479,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerdefaulthandlerinterceptor(bifunct",{"_index":4984,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registerdispatchinterceptor(reactorcommandgateway",{"_index":5891,"title":{},"name":{},"text":{"122":{}},"component":{}}],["registerdispatchinterceptor(reactoreventgateway",{"_index":5899,"title":{},"name":{},"text":{"122":{}},"component":{}}],["registererrorhandl",{"_index":4880,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registererrorhandler(\"mi",{"_index":4878,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registereventhandler(config",{"_index":2447,"title":{},"name":{},"text":{"37":{}},"component":{}}],["registereventprocessor(str",{"_index":4982,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registereventprocessorfactory(eventprocessorbuild",{"_index":4981,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registereventupcaster(config",{"_index":2523,"title":{},"name":{},"text":{"38":{}},"component":{}}],["registerexamplehandlerdefinition(configur",{"_index":5403,"title":{},"name":{},"text":{"93":{}},"component":{}}],["registerextens",{"_index":4457,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerfieldfilt",{"_index":4480,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerhandlerdefinit",{"_index":4482,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerhandlerenhancerdefinit",{"_index":4484,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerhandlerinterceptor",{"_index":3974,"title":{},"name":{},"text":{"61":{}},"component":{}}],["registerhandlerinterceptor(\"mi",{"_index":2687,"title":{},"name":{},"text":{"44":{}},"component":{}}],["registerhandlerinterceptor(str",{"_index":4985,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registerignoredfield",{"_index":4481,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerinjectableresourc",{"_index":4473,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerlistenerinvocationerrorhandl",{"_index":4872,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registerlistenerinvocationerrorhandler(\"mi",{"_index":4868,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registermessagehandler(conf",{"_index":1856,"title":{},"name":{},"text":{"29":{},"53":{}},"component":{}}],["registermessagemonitor(str",{"_index":4986,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registermessagemonitorfactory(str",{"_index":4987,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registerparameterresolverfactori",{"_index":4474,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerpooledstreamingeventprocessor",{"_index":5036,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registerpooledstreamingeventprocessorconfigur",{"_index":5044,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registerpooledstreamingeventprocessorconfiguration(\"mi",{"_index":5043,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registerpooledstreamingprocessor",{"_index":5031,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registerpooledstreamingprocessorconfig(eventprocessingconfigur",{"_index":5041,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registerpublishertoeventprocessor(eventprocessingconfigur",{"_index":5615,"title":{},"name":{},"text":{"107":{}},"component":{}}],["registerqueryhandler(conf",{"_index":3035,"title":{},"name":{},"text":{"53":{}},"component":{}}],["registerrepositori",{"_index":4466,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerrepositoryprovid",{"_index":4467,"title":{},"name":{},"text":{"66":{}},"component":{}}],["registerresultinterceptor(reactorcommandgateway",{"_index":5923,"title":{},"name":{},"text":{"122":{}},"component":{}}],["registerresultinterceptor(reactorquerygateway",{"_index":5909,"title":{},"name":{},"text":{"122":{}},"component":{}}],["registerrollbackconfiguration(str",{"_index":4994,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registersaga(mysaga.class",{"_index":4433,"title":{},"name":{},"text":{"65":{}},"component":{}}],["registersequencingpolicy(\"mi",{"_index":5140,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registerspanattributeprovid",{"_index":3618,"title":{},"name":{},"text":{"60":{}},"component":{}}],["registersubscribingeventprocessor",{"_index":5273,"title":{},"name":{},"text":{"81":{},"107":{}},"component":{}}],["registersubscribingeventprocessor(\"mi",{"_index":5276,"title":{},"name":{},"text":{"81":{}},"component":{}}],["registersubscribingeventprocessor(processinggroup",{"_index":5621,"title":{},"name":{},"text":{"107":{}},"component":{}}],["registertokenstore(\"mi",{"_index":5112,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registertokenstore(eventprocessingconfigur",{"_index":5103,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registertrackingeventprocessor",{"_index":5012,"title":{},"name":{},"text":{"80":{},"107":{}},"component":{}}],["registertrackingeventprocessor(\"mi",{"_index":2686,"title":{},"name":{},"text":{"44":{}},"component":{}}],["registertrackingeventprocessorconfigur",{"_index":5027,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registertrackingeventprocessorconfiguration(\"mi",{"_index":5026,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registertrackingprocessorconfig(eventprocessingconfigur",{"_index":5024,"title":{},"name":{},"text":{"80":{}},"component":{}}],["registertransactionmanager(str",{"_index":4992,"title":{},"name":{},"text":{"79":{}},"component":{}}],["registr",{"_index":1853,"title":{"69-1":{},"244-4":{}},"name":{},"text":{"29":{},"35":{},"43":{},"44":{},"53":{},"60":{},"61":{},"69":{},"79":{},"81":{},"104":{},"126":{},"127":{},"128":{},"141":{},"146":{},"160":{},"171":{},"199":{},"208":{}},"component":{}}],["registri",{"_index":2837,"title":{},"name":{},"text":{"50":{}},"component":{}}],["regress",{"_index":4048,"title":{},"name":{},"text":{"61":{}},"component":{}}],["regular",{"_index":1762,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"36":{},"40":{},"44":{},"45":{},"57":{},"61":{},"63":{},"66":{},"70":{},"71":{},"75":{},"79":{},"80":{},"100":{},"122":{},"146":{},"154":{},"171":{},"172":{},"180":{},"185":{},"196":{},"199":{}},"component":{}}],["regularli",{"_index":4634,"title":{},"name":{},"text":{"70":{},"71":{},"73":{}},"component":{}}],["reifi",{"_index":1297,"title":{},"name":{},"text":{"23":{},"111":{}},"component":{}}],["reimburs",{"_index":4784,"title":{},"name":{},"text":{"77":{}},"component":{}}],["reinstal",{"_index":6426,"title":{},"name":{},"text":{"147":{}},"component":{}}],["reintroduc",{"_index":4035,"title":{},"name":{},"text":{"61":{}},"component":{}}],["reiter",{"_index":3712,"title":{},"name":{},"text":{"60":{}},"component":{}}],["reject",{"_index":4773,"title":{},"name":{},"text":{"76":{},"142":{},"278":{}},"component":{}}],["rejectpaymentcommand",{"_index":7711,"title":{},"name":{},"text":{"270":{}},"component":{}}],["rel",{"_index":2119,"title":{},"name":{},"text":{"31":{},"60":{},"63":{},"65":{},"71":{},"172":{},"208":{},"270":{}},"component":{}}],["relat",{"_index":1540,"title":{"203-37":{}},"name":{},"text":{"25":{},"26":{},"31":{},"35":{},"45":{},"52":{},"58":{},"61":{},"63":{},"66":{},"75":{},"84":{},"87":{},"89":{},"97":{},"140":{},"142":{},"143":{},"153":{},"157":{},"173":{},"177":{},"178":{},"203":{},"208":{},"209":{},"211":{},"234":{},"239":{},"241":{},"270":{},"278":{}},"component":{}}],["relationship",{"_index":5130,"title":{},"name":{},"text":{"80":{},"141":{}},"component":{}}],["relay",{"_index":7323,"title":{},"name":{},"text":{"200":{}},"component":{}}],["releas",{"_index":8,"title":{"59":{},"60":{},"61":{},"135":{},"137":{},"138":{},"212":{},"60-1":{},"60-6":{},"60-12":{},"60-17":{},"60-22":{},"60-27":{},"60-30":{},"60-33":{},"60-36":{},"60-39":{},"60-42":{},"61-1":{},"61-2":{},"61-6":{},"61-7":{},"61-11":{},"61-14":{},"61-19":{},"61-20":{},"61-24":{},"61-28":{},"61-32":{},"61-33":{},"61-37":{},"61-40":{},"61-44":{},"61-48":{},"61-53":{},"61-56":{},"61-57":{},"61-61":{},"61-64":{},"61-67":{},"61-70":{},"61-73":{},"61-77":{},"61-82":{},"61-85":{},"61-86":{},"61-89":{},"61-91":{},"61-95":{},"61-97":{},"61-100":{},"61-101":{},"61-102":{},"61-103":{},"61-104":{},"61-105":{},"61-106":{},"61-107":{},"61-108":{},"61-109":{},"61-110":{},"61-111":{},"61-112":{},"61-113":{},"61-114":{},"61-115":{},"61-116":{},"61-117":{},"61-118":{},"61-119":{},"61-120":{},"61-121":{},"61-122":{},"61-123":{},"61-124":{},"61-125":{},"61-126":{},"61-127":{},"61-128":{},"61-129":{},"61-130":{},"61-131":{},"61-132":{},"61-133":{},"61-134":{},"61-135":{},"61-136":{},"137-1":{},"137-6":{},"137-9":{},"137-14":{},"137-24":{},"137-25":{},"138-1":{},"138-2":{},"138-3":{},"138-4":{},"138-5":{},"138-6":{},"138-7":{},"138-8":{},"138-9":{},"138-10":{},"138-11":{},"138-12":{},"138-13":{},"138-14":{},"138-15":{},"138-16":{},"138-17":{},"138-18":{},"138-20":{},"138-21":{},"138-23":{}},"name":{"60":{},"61":{},"135":{},"137":{},"138":{},"212":{}},"text":{"1":{},"3":{},"4":{},"46":{},"59":{},"60":{},"61":{},"79":{},"80":{},"111":{},"114":{},"134":{},"135":{},"137":{},"138":{},"143":{},"177":{},"184":{},"185":{},"203":{},"256":{},"270":{},"276":{}},"component":{}}],["releasedur",{"_index":5184,"title":{},"name":{},"text":{"80":{}},"component":{}}],["releaseseg",{"_index":5191,"title":{},"name":{},"text":{"80":{}},"component":{}}],["releasesegment(int",{"_index":5183,"title":{},"name":{},"text":{"80":{}},"component":{}}],["releasesegmentfor(str",{"_index":5193,"title":{},"name":{},"text":{"80":{}},"component":{}}],["relev",{"_index":977,"title":{},"name":{},"text":{"8":{},"25":{},"27":{},"71":{},"116":{},"140":{},"141":{},"143":{},"151":{},"178":{},"208":{},"209":{},"210":{},"211":{},"215":{},"221":{},"255":{},"271":{}},"component":{}}],["reli",{"_index":1033,"title":{},"name":{},"text":{"8":{},"31":{},"32":{},"33":{},"35":{},"43":{},"56":{},"97":{},"203":{},"213":{},"261":{},"278":{},"281":{}},"component":{}}],["reliabl",{"_index":1294,"title":{},"name":{},"text":{"23":{},"33":{},"42":{},"70":{},"105":{},"158":{},"245":{}},"component":{}}],["reload",{"_index":6820,"title":{},"name":{},"text":{"169":{},"276":{}},"component":{}}],["remain",{"_index":197,"title":{},"name":{},"text":{"2":{},"26":{},"28":{},"38":{},"61":{},"66":{},"68":{},"78":{},"83":{},"137":{},"144":{},"146":{},"148":{},"151":{},"156":{},"172":{},"218":{},"226":{},"245":{}},"component":{}}],["remaind",{"_index":1368,"title":{},"name":{},"text":{"24":{},"79":{}},"component":{}}],["remainingvalu",{"_index":1782,"title":{},"name":{},"text":{"28":{},"77":{},"78":{},"83":{},"199":{}},"component":{}}],["remark",{"_index":2548,"title":{},"name":{},"text":{"40":{}},"component":{}}],["remedi",{"_index":4251,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rememb",{"_index":5441,"title":{},"name":{},"text":{"97":{},"107":{},"144":{},"169":{},"271":{},"277":{},"278":{}},"component":{}}],["remot",{"_index":1007,"title":{},"name":{},"text":{"8":{},"31":{},"126":{},"171":{}},"component":{}}],["remov",{"_index":1013,"title":{"137-18":{},"151-8":{}},"name":{},"text":{"8":{},"24":{},"26":{},"31":{},"60":{},"61":{},"62":{},"91":{},"111":{},"117":{},"118":{},"126":{},"137":{},"138":{},"139":{},"141":{},"142":{},"146":{},"151":{},"171":{},"173":{},"177":{},"223":{},"225":{},"226":{},"245":{},"251":{},"254":{},"258":{},"271":{},"278":{}},"component":{}}],["remove_node_from_clust",{"_index":6690,"title":{},"name":{},"text":{"164":{}},"component":{}}],["removed/deleted/clos",{"_index":4769,"title":{},"name":{},"text":{"75":{}},"component":{}}],["removenodefromreplicationgroup(leavereplicationgroup",{"_index":7011,"title":{},"name":{},"text":{"173":{}},"component":{}}],["renam",{"_index":3616,"title":{},"name":{},"text":{"60":{},"61":{},"137":{}},"component":{}}],["render",{"_index":1138,"title":{},"name":{},"text":{"11":{},"13":{},"52":{},"270":{}},"component":{}}],["renew_app_token",{"_index":6691,"title":{},"name":{},"text":{"164":{}},"component":{}}],["rent",{"_index":7842,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["rental",{"_index":1191,"title":{"274":{},"275-2":{},"276-5":{},"276-7":{}},"name":{"272":{}},"text":{"15":{},"21":{},"234":{},"235":{},"238":{},"260":{},"261":{},"263":{},"264":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["rental.queri",{"_index":7857,"title":{},"name":{},"text":{"277":{}},"component":{}}],["rental/pom.xml",{"_index":7684,"title":{},"name":{},"text":{"267":{},"273":{},"275":{},"276":{},"282":{}},"component":{}}],["rental/src/main/java/io/axoniq/demo/bikerental/rental/command/bike.java",{"_index":7966,"title":{},"name":{},"text":{"278":{}},"component":{}}],["rental/src/main/java/io/axoniq/demo/bikerental/rental/iu/rentalcontroller.java",{"_index":7893,"title":{},"name":{},"text":{"277":{}},"component":{}}],["rental/src/main/java/io/axoniq/demo/bikerental/rental/query/bikestatusprojection.java",{"_index":7858,"title":{},"name":{},"text":{"277":{}},"component":{}}],["rental/src/main/java/io/axoniq/demo/bikerental/rental/ui/rentalcontroller.java",{"_index":7982,"title":{},"name":{},"text":{"278":{}},"component":{}}],["rental/src/main/java/resources/application.properti",{"_index":7756,"title":{},"name":{},"text":{"273":{}},"component":{}}],["rental/src/test/java/io/axoniq/demo/bikerental/rental/command/biketest.java",{"_index":8038,"title":{},"name":{},"text":{"282":{}},"component":{}}],["rentalappl",{"_index":8026,"title":{},"name":{},"text":{"281":{}},"component":{}}],["rentalcommand",{"_index":7720,"title":{},"name":{},"text":{"270":{}},"component":{}}],["rentalcontrol",{"_index":7892,"title":{},"name":{},"text":{"277":{},"278":{},"280":{}},"component":{}}],["rentalcontroller(commandgateway",{"_index":7984,"title":{},"name":{},"text":{"278":{}},"component":{}}],["rentalstatu",{"_index":7847,"title":{},"name":{},"text":{"277":{}},"component":{}}],["rentalstatus.avail",{"_index":7883,"title":{},"name":{},"text":{"277":{}},"component":{}}],["rental}}/bik",{"_index":7934,"title":{},"name":{},"text":{"277":{}},"component":{}}],["rental}}/bikes/8427681b",{"_index":7935,"title":{},"name":{},"text":{"277":{}},"component":{}}],["renter",{"_index":7846,"title":{},"name":{},"text":{"277":{}},"component":{}}],["reoccur",{"_index":5237,"title":{},"name":{},"text":{"80":{}},"component":{}}],["reopen",{"_index":5046,"title":{},"name":{},"text":{"80":{}},"component":{}}],["repeat",{"_index":736,"title":{},"name":{},"text":{"4":{},"143":{},"185":{},"272":{}},"component":{}}],["repetit",{"_index":4540,"title":{},"name":{},"text":{"66":{}},"component":{}}],["replac",{"_index":163,"title":{"137-10":{}},"name":{},"text":{"2":{},"3":{},"4":{},"8":{},"23":{},"26":{},"40":{},"46":{},"57":{},"60":{},"61":{},"71":{},"79":{},"88":{},"89":{},"97":{},"107":{},"113":{},"122":{},"135":{},"137":{},"140":{},"141":{},"144":{},"147":{},"155":{},"169":{},"170":{},"177":{},"184":{},"185":{},"212":{}},"component":{}}],["replay",{"_index":1816,"title":{"80-61":{},"80-65":{},"254-4":{}},"name":{},"text":{"28":{},"35":{},"45":{},"51":{},"60":{},"61":{},"75":{},"78":{},"79":{},"80":{},"81":{},"143":{},"254":{},"278":{}},"component":{}}],["replaycontext",{"_index":5233,"title":{},"name":{},"text":{"80":{}},"component":{}}],["replaystatu",{"_index":2755,"title":{},"name":{},"text":{"45":{},"60":{},"61":{},"80":{}},"component":{}}],["replaystatus#replay",{"_index":3240,"title":{},"name":{},"text":{"60":{}},"component":{}}],["replaytoken",{"_index":3237,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["replaytoken.replaycontext",{"_index":5232,"title":{},"name":{},"text":{"80":{}},"component":{}}],["replenish",{"_index":6556,"title":{},"name":{},"text":{"156":{},"172":{}},"component":{}}],["repli",{"_index":7293,"title":{},"name":{},"text":{"199":{},"277":{},"278":{}},"component":{}}],["replic",{"_index":294,"title":{"149":{},"149-3":{},"171-9":{},"173-3":{}},"name":{"149":{}},"text":{"3":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"149":{},"151":{},"160":{},"162":{},"170":{},"171":{},"172":{},"173":{},"174":{},"176":{},"178":{},"184":{},"185":{}},"component":{}}],["replica",{"_index":613,"title":{},"name":{},"text":{"3":{},"142":{},"151":{},"156":{},"172":{},"176":{},"184":{},"256":{}},"component":{}}],["replicas=3",{"_index":696,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["replication.flow",{"_index":6917,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.forc",{"_index":6920,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.heartbeat",{"_index":6921,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.index",{"_index":6863,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.initi",{"_index":6923,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.log",{"_index":6851,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.max",{"_index":6925,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.min",{"_index":6930,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.primari",{"_index":6931,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.secondari",{"_index":6932,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.seg",{"_index":6933,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.snapshot",{"_index":6935,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.sync",{"_index":6936,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.us",{"_index":6939,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replication.wait",{"_index":6937,"title":{},"name":{},"text":{"172":{}},"component":{}}],["replicationgroup",{"_index":6175,"title":{},"name":{},"text":{"141":{},"159":{},"162":{},"170":{}},"component":{}}],["replicationgroupadminservic",{"_index":7002,"title":{},"name":{},"text":{"173":{}},"component":{}}],["replicationgroupoverview",{"_index":7004,"title":{},"name":{},"text":{"173":{}},"component":{}}],["repons",{"_index":7900,"title":{},"name":{},"text":{"277":{}},"component":{}}],["reponsetypes#instanceof(class",{"_index":3180,"title":{},"name":{},"text":{"57":{}},"component":{}}],["reponsetypes#multipleinstancesof(class",{"_index":3182,"title":{},"name":{},"text":{"57":{}},"component":{}}],["report",{"_index":2292,"title":{},"name":{},"text":{"35":{},"42":{},"60":{},"61":{},"66":{},"79":{},"224":{},"231":{},"233":{},"247":{},"255":{}},"component":{}}],["repositori",{"_index":341,"title":{"8-6":{},"29-7":{},"29-10":{},"29-11":{},"63-6":{},"65-4":{}},"name":{},"text":{"3":{},"8":{},"9":{},"23":{},"28":{},"29":{},"31":{},"35":{},"52":{},"53":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"78":{},"105":{},"184":{},"273":{},"277":{},"279":{},"281":{}},"component":{}}],["repositories/servic",{"_index":2723,"title":{},"name":{},"text":{"44":{}},"component":{}}],["repository#load(str",{"_index":1844,"title":{},"name":{},"text":{"28":{}},"component":{}}],["repository/axonserver:2023.1",{"_index":441,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["repository/axonserver:2023.1.1",{"_index":416,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["repositoryclass}.load",{"_index":2984,"title":{},"name":{},"text":{"52":{}},"component":{}}],["repositoryforgiftcard",{"_index":1885,"title":{},"name":{},"text":{"29":{}},"component":{}}],["repositoryforgiftcard(eventstor",{"_index":1882,"title":{},"name":{},"text":{"29":{}},"component":{}}],["repositoryprovid",{"_index":4468,"title":{},"name":{},"text":{"66":{}},"component":{}}],["repository’",{"_index":4661,"title":{},"name":{},"text":{"71":{}},"component":{}}],["repres",{"_index":793,"title":{},"name":{},"text":{"5":{},"7":{},"28":{},"35":{},"40":{},"56":{},"62":{},"63":{},"66":{},"68":{},"80":{},"93":{},"96":{},"117":{},"144":{},"213":{},"214":{},"216":{},"241":{},"258":{},"270":{},"277":{},"278":{}},"component":{}}],["represent",{"_index":1515,"title":{},"name":{},"text":{"24":{},"38":{},"62":{},"79":{},"141":{},"144":{},"149":{},"151":{},"185":{},"212":{},"223":{},"240":{}},"component":{}}],["reprocess",{"_index":5056,"title":{},"name":{},"text":{"80":{}},"component":{}}],["reproduc",{"_index":2576,"title":{},"name":{},"text":{"42":{},"223":{}},"component":{}}],["request",{"_index":655,"title":{"142-1":{},"277-9":{},"280-4":{}},"name":{},"text":{"3":{},"5":{},"7":{},"24":{},"40":{},"42":{},"47":{},"52":{},"54":{},"56":{},"60":{},"61":{},"62":{},"71":{},"131":{},"138":{},"140":{},"142":{},"143":{},"144":{},"147":{},"150":{},"156":{},"161":{},"165":{},"171":{},"172":{},"173":{},"177":{},"184":{},"196":{},"199":{},"200":{},"201":{},"206":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"267":{},"270":{},"272":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["requestbikecommand",{"_index":7719,"title":{},"name":{},"text":{"270":{}},"component":{}}],["requestmap",{"_index":7894,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["requestmessag",{"_index":7723,"title":{},"name":{},"text":{"270":{}},"component":{}}],["requestparam",{"_index":5774,"title":{},"name":{},"text":{"117":{}},"component":{}}],["requestparam(\"biketyp",{"_index":7992,"title":{},"name":{},"text":{"278":{}},"component":{}}],["requestparam(\"loc",{"_index":7993,"title":{},"name":{},"text":{"278":{}},"component":{}}],["requests.http",{"_index":7933,"title":{},"name":{},"text":{"277":{},"280":{}},"component":{}}],["request’",{"_index":7291,"title":{},"name":{},"text":{"199":{},"208":{},"209":{},"211":{},"214":{},"278":{}},"component":{}}],["requeu",{"_index":5345,"title":{},"name":{},"text":{"88":{}},"component":{}}],["requir",{"_index":37,"title":{"8-1":{},"119-1":{},"196-4":{}},"name":{"266":{}},"text":{"1":{},"3":{},"4":{},"5":{},"7":{},"9":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"38":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"52":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"70":{},"71":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"84":{},"85":{},"90":{},"92":{},"95":{},"97":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"114":{},"119":{},"123":{},"124":{},"126":{},"127":{},"129":{},"135":{},"139":{},"140":{},"143":{},"144":{},"146":{},"151":{},"154":{},"155":{},"158":{},"162":{},"165":{},"166":{},"167":{},"168":{},"169":{},"171":{},"184":{},"185":{},"195":{},"196":{},"201":{},"205":{},"212":{},"213":{},"214":{},"216":{},"223":{},"245":{},"247":{},"254":{},"261":{},"270":{},"275":{},"276":{},"277":{},"278":{},"280":{}},"component":{}}],["requisit",{"_index":7228,"title":{"196-3":{},"274-1":{},"281-1":{}},"name":{},"text":{},"component":{}}],["reschedul",{"_index":2066,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{}}],["reschedule_ev",{"_index":6712,"title":{},"name":{},"text":{"164":{}},"component":{}}],["reschedulecommandsoncorruptst",{"_index":2065,"title":{},"name":{},"text":{"31":{}},"component":{}}],["resembl",{"_index":1808,"title":{},"name":{},"text":{"28":{},"73":{},"79":{}},"component":{}}],["reserv",{"_index":4064,"title":{},"name":{},"text":{"61":{},"104":{},"270":{}},"component":{}}],["reservationconfirm",{"_index":7969,"title":{},"name":{},"text":{"278":{}},"component":{}}],["reservedbi",{"_index":7968,"title":{},"name":{},"text":{"278":{}},"component":{}}],["reset",{"_index":2819,"title":{"80-62":{},"80-63":{},"80-64":{},"117-7":{},"143-1":{}},"name":{},"text":{"50":{},"51":{},"60":{},"61":{},"80":{},"104":{},"117":{},"138":{},"143":{},"154":{},"243":{},"247":{},"253":{},"254":{},"270":{}},"component":{}}],["resetcontext",{"_index":3433,"title":{},"name":{},"text":{"60":{},"80":{}},"component":{}}],["resethandl",{"_index":4253,"title":{},"name":{},"text":{"61":{},"80":{},"254":{},"270":{}},"component":{}}],["resettoken",{"_index":5215,"title":{},"name":{},"text":{"80":{},"143":{}},"component":{}}],["resettokens(funct",{"_index":5217,"title":{},"name":{},"text":{"80":{}},"component":{}}],["resettokens(r",{"_index":5216,"title":{},"name":{},"text":{"80":{}},"component":{}}],["resettokens(trackingtoken",{"_index":5219,"title":{},"name":{},"text":{"80":{}},"component":{}}],["resettokensfor(str",{"_index":5224,"title":{},"name":{},"text":{"80":{}},"component":{}}],["resid",{"_index":2572,"title":{},"name":{},"text":{"42":{},"80":{}},"component":{}}],["resili",{"_index":5002,"title":{},"name":{},"text":{"80":{},"121":{}},"component":{}}],["resolut",{"_index":1753,"title":{"76":{}},"name":{"76":{}},"text":{"27":{},"29":{},"36":{},"45":{},"60":{},"61":{},"63":{},"93":{},"137":{}},"component":{}}],["resolv",{"_index":1449,"title":{"95":{},"117-4":{}},"name":{"95":{}},"text":{"24":{},"26":{},"27":{},"29":{},"31":{},"37":{},"38":{},"44":{},"45":{},"56":{},"57":{},"60":{},"61":{},"69":{},"75":{},"79":{},"80":{},"95":{},"117":{},"142":{},"151":{}},"component":{}}],["resourc",{"_index":654,"title":{"63-3":{},"144-14":{},"196-6":{}},"name":{},"text":{"3":{},"8":{},"15":{},"21":{},"29":{},"32":{},"44":{},"45":{},"46":{},"56":{},"60":{},"61":{},"63":{},"66":{},"68":{},"80":{},"90":{},"121":{},"137":{},"144":{},"151":{},"175":{},"184":{},"196":{},"203":{},"244":{},"256":{}},"component":{}}],["resourceinjector",{"_index":4381,"title":{},"name":{},"text":{"63":{}},"component":{}}],["respect",{"_index":589,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"24":{},"25":{},"26":{},"27":{},"28":{},"31":{},"35":{},"38":{},"41":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"77":{},"79":{},"80":{},"104":{},"108":{},"126":{},"128":{},"150":{},"184":{},"208":{},"209":{},"211":{},"244":{},"273":{}},"component":{}}],["respond",{"_index":2709,"title":{},"name":{},"text":{"44":{},"68":{},"79":{},"142":{},"143":{},"149":{},"172":{},"180":{},"199":{},"211":{},"216":{},"277":{}},"component":{}}],["respons",{"_index":988,"title":{"258-1":{},"277-1":{}},"name":{},"text":{"8":{},"24":{},"27":{},"31":{},"32":{},"35":{},"40":{},"43":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"70":{},"71":{},"117":{},"121":{},"122":{},"137":{},"138":{},"141":{},"149":{},"158":{},"172":{},"177":{},"185":{},"199":{},"200":{},"208":{},"212":{},"216":{},"258":{},"277":{},"278":{},"280":{}},"component":{}}],["responsecardin",{"_index":7327,"title":{},"name":{},"text":{"200":{}},"component":{}}],["responsecount",{"_index":7534,"title":{},"name":{},"text":{"216":{}},"component":{}}],["responseprocessingtask",{"_index":3013,"title":{},"name":{},"text":{"52":{}},"component":{}}],["responsetyp",{"_index":1372,"title":{},"name":{},"text":{"24":{},"57":{},"112":{},"122":{},"200":{},"212":{},"216":{}},"component":{}}],["responsetype.class).retry(5",{"_index":5826,"title":{},"name":{},"text":{"122":{}},"component":{}}],["responsetypes.instanceof(cardsummary.class",{"_index":3100,"title":{},"name":{},"text":{"56":{}},"component":{}}],["responsetypes.instanceof(responsetyp",{"_index":5867,"title":{},"name":{},"text":{"122":{}},"component":{}}],["responsetypes.instanceof(void.class",{"_index":5871,"title":{},"name":{},"text":{"122":{}},"component":{}}],["responsetypes.multipleinstanceof(bikestatus.class",{"_index":7904,"title":{},"name":{},"text":{"277":{}},"component":{}}],["responsetypes.multipleinstancesof(bikestatus.class",{"_index":7897,"title":{},"name":{},"text":{"277":{}},"component":{}}],["responsetypes.multipleinstancesof(cardsummary.class",{"_index":3099,"title":{},"name":{},"text":{"56":{}},"component":{}}],["responsetypes.multipleinstancesof(responsetyp",{"_index":5866,"title":{},"name":{},"text":{"122":{}},"component":{}}],["responsetypes.multipleinstancesof(string.class",{"_index":3057,"title":{},"name":{},"text":{"56":{}},"component":{}}],["rest",{"_index":963,"title":{"136":{},"159":{},"175":{},"143-4":{},"146-10":{},"159-1":{},"159-2":{},"278-8":{}},"name":{"136":{},"175":{}},"text":{"7":{},"52":{},"61":{},"73":{},"79":{},"117":{},"122":{},"127":{},"129":{},"137":{},"139":{},"140":{},"142":{},"143":{},"146":{},"158":{},"159":{},"161":{},"162":{},"166":{},"167":{},"174":{},"175":{},"185":{},"203":{},"221":{},"231":{},"232":{},"245":{},"262":{},"270":{},"271":{},"272":{},"273":{},"277":{},"278":{},"280":{}},"component":{}}],["restart",{"_index":6042,"title":{},"name":{},"text":{"137":{},"138":{},"143":{},"147":{},"155":{},"169":{},"172":{},"196":{},"243":{}},"component":{}}],["restcapabilitydiscoverymod",{"_index":5936,"title":{},"name":{},"text":{"126":{}},"component":{}}],["restcapabilitydiscoverymode.build",{"_index":5953,"title":{},"name":{},"text":{"127":{}},"component":{}}],["restcontrol",{"_index":7891,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["restoper",{"_index":5965,"title":{},"name":{},"text":{"127":{},"129":{}},"component":{}}],["restoperations(restoper",{"_index":5968,"title":{},"name":{},"text":{"127":{}},"component":{}}],["restor",{"_index":1896,"title":{},"name":{},"text":{"29":{},"60":{}},"component":{}}],["restrict",{"_index":5405,"title":{"119-2":{}},"name":{},"text":{"94":{},"142":{},"172":{},"212":{}},"component":{}}],["restructur",{"_index":3762,"title":{},"name":{},"text":{"60":{}},"component":{}}],["resttempl",{"_index":5937,"title":{},"name":{},"text":{"126":{},"127":{},"129":{}},"component":{}}],["resttemplate(resttempl",{"_index":5954,"title":{},"name":{},"text":{"127":{}},"component":{}}],["result",{"_index":939,"title":{"27-3":{},"66-6":{},"122-16":{}},"name":{},"text":{"7":{},"8":{},"24":{},"27":{},"28":{},"31":{},"32":{},"35":{},"36":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"66":{},"68":{},"71":{},"75":{},"78":{},"79":{},"80":{},"89":{},"90":{},"97":{},"109":{},"122":{},"129":{},"135":{},"142":{},"143":{},"144":{},"151":{},"156":{},"172":{},"191":{},"199":{},"212":{},"223":{},"277":{},"278":{},"279":{},"280":{},"282":{}},"component":{}}],["result.clos",{"_index":5863,"title":{},"name":{},"text":{"122":{}},"component":{}}],["result.equals(tru",{"_index":6290,"title":{},"name":{},"text":{"143":{}},"component":{}}],["result.get",{"_index":7905,"title":{},"name":{},"text":{"277":{}},"component":{}}],["result.initialresult",{"_index":5860,"title":{},"name":{},"text":{"122":{}},"component":{}}],["result.upd",{"_index":5872,"title":{},"name":{},"text":{"122":{}},"component":{}}],["resultflux",{"_index":5853,"title":{},"name":{},"text":{"122":{}},"component":{}}],["resultmessag",{"_index":2786,"title":{},"name":{},"text":{"46":{},"122":{}},"component":{}}],["results.filter(it",{"_index":5921,"title":{},"name":{},"text":{"122":{}},"component":{}}],["results.filter(r",{"_index":5912,"title":{},"name":{},"text":{"122":{}},"component":{}}],["results.flatmap(r",{"_index":5915,"title":{},"name":{},"text":{"122":{}},"component":{}}],["results.log().take(5",{"_index":5926,"title":{},"name":{},"text":{"122":{}},"component":{}}],["results.timeout(duration.ofseconds(30",{"_index":5925,"title":{},"name":{},"text":{"122":{}},"component":{}}],["resultstreampublisher<>(adminchannel::eventprocessor",{"_index":6279,"title":{},"name":{},"text":{"143":{}},"component":{}}],["resulttyp",{"_index":7200,"title":{},"name":{},"text":{"192":{}},"component":{}}],["resulttype.class",{"_index":5855,"title":{},"name":{},"text":{"122":{}},"component":{}}],["resultvalid",{"_index":4461,"title":{},"name":{},"text":{"66":{}},"component":{}}],["resum",{"_index":6511,"title":{},"name":{},"text":{"151":{},"212":{}},"component":{}}],["retain",{"_index":6116,"title":{},"name":{},"text":{"139":{},"143":{},"270":{}},"component":{}}],["retent",{"_index":6134,"title":{"151-9":{},"151-10":{},"151-11":{}},"name":{},"text":{"139":{},"146":{},"151":{},"172":{},"185":{},"245":{}},"component":{}}],["retention(retentionpolicy.runtim",{"_index":5409,"title":{},"name":{},"text":{"96":{}},"component":{}}],["rethrow",{"_index":2783,"title":{},"name":{},"text":{"46":{},"79":{},"80":{},"81":{}},"component":{}}],["rethrown",{"_index":4196,"title":{},"name":{},"text":{"61":{},"79":{}},"component":{}}],["retri",{"_index":871,"title":{"91":{}},"name":{"91":{}},"text":{"5":{},"31":{},"60":{},"61":{},"70":{},"79":{},"80":{},"88":{},"89":{},"90":{},"91":{},"108":{},"117":{},"122":{},"172":{},"203":{},"218":{},"247":{},"251":{},"253":{}},"component":{}}],["retriev",{"_index":869,"title":{"80-38":{}},"name":{},"text":{"5":{},"23":{},"27":{},"28":{},"35":{},"36":{},"38":{},"46":{},"50":{},"51":{},"53":{},"57":{},"60":{},"61":{},"63":{},"65":{},"71":{},"79":{},"80":{},"91":{},"104":{},"107":{},"115":{},"116":{},"117":{},"126":{},"127":{},"140":{},"143":{},"144":{},"151":{},"181":{},"203":{},"205":{},"277":{},"281":{}},"component":{}}],["retrievestorageidentifi",{"_index":5113,"title":{},"name":{},"text":{"80":{}},"component":{}}],["retrievetrackingprocessor(axonconfig",{"_index":4631,"title":{},"name":{},"text":{"70":{}},"component":{}}],["retrievetrackingprocessor(org.axonframework.config.configur",{"_index":4623,"title":{},"name":{},"text":{"70":{}},"component":{}}],["retry/delet",{"_index":7644,"title":{},"name":{},"text":{"258":{}},"component":{}}],["retryabl",{"_index":3740,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["retryallsequences(str",{"_index":4935,"title":{},"name":{},"text":{"79":{}},"component":{}}],["retryanysequence(str",{"_index":4933,"title":{},"name":{},"text":{"79":{}},"component":{}}],["retrydlq(@requestparam",{"_index":5773,"title":{},"name":{},"text":{"117":{}},"component":{}}],["retryerroreventsequence(str",{"_index":4928,"title":{},"name":{},"text":{"79":{}},"component":{}}],["retryschedul",{"_index":1914,"title":{"31-3":{}},"name":{},"text":{"31":{},"60":{},"61":{}},"component":{}}],["retrywhen(retry.fixeddelay(3",{"_index":6292,"title":{},"name":{},"text":{"143":{}},"component":{}}],["return",{"_index":1418,"title":{"57-3":{},"57-4":{},"57-5":{},"57-6":{},"277-7":{}},"name":{},"text":{"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"50":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"88":{},"89":{},"93":{},"100":{},"104":{},"106":{},"107":{},"112":{},"113":{},"115":{},"117":{},"122":{},"127":{},"129":{},"138":{},"140":{},"142":{},"143":{},"144":{},"146":{},"147":{},"161":{},"171":{},"173":{},"176":{},"180":{},"191":{},"192":{},"195":{},"199":{},"200":{},"208":{},"212":{},"216":{},"241":{},"254":{},"277":{},"278":{}},"component":{}}],["returnvalu",{"_index":1978,"title":{},"name":{},"text":{"31":{}},"component":{}}],["reus",{"_index":2021,"title":{},"name":{},"text":{"31":{},"46":{},"60":{},"129":{},"280":{}},"component":{}}],["revamp",{"_index":6034,"title":{},"name":{},"text":{"137":{}},"component":{}}],["revers",{"_index":3862,"title":{},"name":{},"text":{"61":{},"218":{}},"component":{}}],["revert",{"_index":4029,"title":{},"name":{},"text":{"61":{},"138":{}},"component":{}}],["review",{"_index":7743,"title":{"280-5":{},"280-6":{}},"name":{},"text":{"271":{}},"component":{}}],["revis",{"_index":1439,"title":{},"name":{},"text":{"24":{},"38":{},"60":{},"71":{},"110":{},"212":{}},"component":{}}],["revision(\"1",{"_index":4687,"title":{},"name":{},"text":{"71":{}},"component":{}}],["revision(\"1.0",{"_index":2492,"title":{},"name":{},"text":{"38":{}},"component":{}}],["revision(\"2.0",{"_index":2495,"title":{},"name":{},"text":{"38":{}},"component":{}}],["revisionresolv",{"_index":2462,"title":{},"name":{},"text":{"38":{}},"component":{}}],["revisions(\"0",{"_index":5669,"title":{},"name":{},"text":{"110":{}},"component":{}}],["revisionsnapshotfilt",{"_index":4201,"title":{},"name":{},"text":{"61":{},"71":{}},"component":{}}],["revolv",{"_index":2784,"title":{},"name":{},"text":{"46":{},"60":{},"80":{},"126":{}},"component":{}}],["rid",{"_index":6308,"title":{},"name":{},"text":{"144":{}},"component":{}}],["right",{"_index":570,"title":{},"name":{},"text":{"3":{},"25":{},"35":{},"61":{},"63":{},"71":{},"97":{},"104":{},"117":{},"162":{},"166":{},"184":{},"192":{},"198":{},"232":{},"236":{},"239":{},"242":{},"243":{},"254":{},"256":{},"267":{},"270":{},"271":{},"276":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["rightfulli",{"_index":4120,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ring",{"_index":2045,"title":{},"name":{},"text":{"31":{}},"component":{}}],["rise",{"_index":7627,"title":{},"name":{},"text":{"255":{},"271":{}},"component":{}}],["risk",{"_index":6118,"title":{},"name":{},"text":{"139":{}},"component":{}}],["rn",{"_index":6026,"title":{},"name":{"137":{},"138":{}},"text":{},"component":{}}],["robin",{"_index":6969,"title":{},"name":{},"text":{"172":{}},"component":{}}],["robust",{"_index":150,"title":{},"name":{},"text":{"2":{},"23":{},"227":{},"237":{}},"component":{}}],["role",{"_index":119,"title":{"164":{},"258":{},"139-6":{},"149-1":{},"162-3":{},"163-4":{},"165-5":{},"258-1":{}},"name":{"258":{}},"text":{"2":{},"23":{},"24":{},"29":{},"81":{},"137":{},"139":{},"141":{},"142":{},"144":{},"145":{},"146":{},"149":{},"151":{},"155":{},"159":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"170":{},"171":{},"173":{},"185":{},"196":{},"201":{},"205":{},"231":{},"258":{}},"component":{}}],["role@context",{"_index":6593,"title":{},"name":{},"text":{"161":{}},"component":{}}],["role_name}@{context_nam",{"_index":6830,"title":{},"name":{},"text":{"171":{}},"component":{}}],["role`@`context",{"_index":6604,"title":{},"name":{},"text":{"162":{}},"component":{}}],["roles/context",{"_index":6548,"title":{},"name":{},"text":{"155":{}},"component":{}}],["roll",{"_index":733,"title":{},"name":{},"text":{"4":{},"24":{},"31":{},"44":{},"46":{},"60":{},"61":{},"63":{},"71":{},"80":{},"97":{},"142":{}},"component":{}}],["rollback",{"_index":1932,"title":{},"name":{},"text":{"31":{},"46":{},"56":{},"60":{},"71":{},"79":{},"80":{},"107":{}},"component":{}}],["rollbackconfigur",{"_index":2063,"title":{},"name":{},"text":{"31":{},"71":{},"79":{}},"component":{}}],["rollbackconfigurationtype.any_throw",{"_index":2770,"title":{},"name":{},"text":{"46":{}},"component":{}}],["rollbackconfigurationtype.nev",{"_index":2769,"title":{},"name":{},"text":{"46":{}},"component":{}}],["rollbackconfigurationtype.runtime_except",{"_index":2772,"title":{},"name":{},"text":{"46":{}},"component":{}}],["rollbackconfigurationtype.unchecked_except",{"_index":2771,"title":{},"name":{},"text":{"46":{}},"component":{}}],["roomavailabilityhandler.on(roomaddedev",{"_index":3030,"title":{},"name":{},"text":{"52":{}},"component":{}}],["root",{"_index":246,"title":{"276-2":{}},"name":{},"text":{"3":{},"9":{},"13":{},"27":{},"29":{},"43":{},"44":{},"46":{},"52":{},"61":{},"75":{},"77":{},"78":{},"169":{},"184":{},"267":{},"273":{},"275":{},"276":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["rotat",{"_index":5370,"title":{},"name":{},"text":{"91":{}},"component":{}}],["roughli",{"_index":1821,"title":{},"name":{},"text":{"28":{},"66":{},"79":{},"80":{},"97":{},"111":{}},"component":{}}],["round",{"_index":6929,"title":{},"name":{},"text":{"172":{},"262":{}},"component":{}}],["roundtrip",{"_index":2358,"title":{},"name":{},"text":{"35":{}},"component":{}}],["rout",{"_index":22,"title":{"126":{},"31-20":{},"117-3":{},"150-1":{}},"name":{"126":{}},"text":{"1":{},"2":{},"28":{},"31":{},"61":{},"63":{},"69":{},"71":{},"77":{},"96":{},"117":{},"126":{},"128":{},"129":{},"139":{},"150":{},"172":{},"185":{},"199":{},"208":{},"212":{},"213":{},"277":{},"278":{},"281":{}},"component":{}}],["router",{"_index":96,"title":{},"name":{},"text":{"2":{},"126":{},"172":{}},"component":{}}],["routin",{"_index":1186,"title":{},"name":{},"text":{"15":{},"21":{}},"component":{}}],["routingkey",{"_index":1775,"title":{},"name":{},"text":{"28":{},"31":{},"77":{},"96":{},"208":{},"213":{}},"component":{}}],["routingservers(new",{"_index":6328,"title":{},"name":{},"text":{"144":{}},"component":{}}],["routingstrategi",{"_index":1776,"title":{},"name":{},"text":{"28":{},"31":{},"126":{}},"component":{}}],["routingstrategy(new",{"_index":5960,"title":{},"name":{},"text":{"127":{}},"component":{}}],["row",{"_index":2329,"title":{},"name":{},"text":{"35":{},"142":{},"236":{},"243":{},"251":{},"254":{},"256":{},"270":{},"271":{},"280":{}},"component":{}}],["rpc",{"_index":6979,"title":{},"name":{},"text":{"173":{}},"component":{}}],["rule",{"_index":675,"title":{"79-2":{}},"name":{},"text":{"3":{},"8":{},"9":{},"37":{},"57":{},"61":{},"63":{},"75":{},"77":{},"79":{},"83":{},"122":{},"144":{},"184":{},"236":{},"239":{},"242":{},"243":{},"245":{},"270":{},"278":{}},"component":{}}],["run",{"_index":245,"title":{"280":{},"281":{},"8-11":{},"198-3":{},"198-4":{},"198-6":{},"203-57":{},"205-3":{},"274-3":{},"277-12":{},"281-4":{},"281-5":{}},"name":{"281":{}},"text":{"3":{},"5":{},"7":{},"8":{},"13":{},"22":{},"23":{},"24":{},"25":{},"26":{},"31":{},"45":{},"47":{},"60":{},"61":{},"63":{},"64":{},"71":{},"80":{},"90":{},"93":{},"106":{},"107":{},"114":{},"117":{},"123":{},"124":{},"131":{},"137":{},"138":{},"141":{},"142":{},"143":{},"144":{},"147":{},"150":{},"151":{},"154":{},"157":{},"160":{},"170":{},"171":{},"172":{},"173":{},"176":{},"184":{},"185":{},"196":{},"198":{},"205":{},"208":{},"212":{},"218":{},"226":{},"229":{},"234":{},"235":{},"238":{},"242":{},"243":{},"244":{},"247":{},"254":{},"255":{},"260":{},"261":{},"263":{},"264":{},"265":{},"266":{},"267":{},"270":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["runasus",{"_index":618,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["runnabl",{"_index":2414,"title":{},"name":{},"text":{"36":{},"61":{}},"component":{}}],["runtim",{"_index":1251,"title":{"137-10":{}},"name":{},"text":{"23":{},"29":{},"31":{},"32":{},"46":{},"60":{},"66":{},"70":{},"77":{},"80":{},"117":{},"124":{},"137":{},"151":{},"158":{},"281":{}},"component":{}}],["runtimeexcept",{"_index":1942,"title":{},"name":{},"text":{"31":{},"143":{}},"component":{}}],["runtimeexception(\"no",{"_index":5918,"title":{},"name":{},"text":{"122":{}},"component":{}}],["rust",{"_index":7261,"title":{},"name":{},"text":{"197":{}},"component":{}}],["s",{"_index":375,"title":{},"name":{},"text":{"3":{},"8":{},"46":{},"126":{},"137":{},"139":{},"146":{},"147":{},"161":{},"162":{},"166":{},"167":{},"171":{},"184":{},"277":{},"282":{}},"component":{}}],["s.b.d.c.l.dockercomposelifecyclemanag",{"_index":8031,"title":{},"name":{},"text":{"281":{}},"component":{}}],["s.getvalue().tostr",{"_index":2861,"title":{},"name":{},"text":{"50":{}},"component":{}}],["saa",{"_index":7615,"title":{},"name":{},"text":{"247":{}},"component":{}}],["sabartiu",{"_index":3758,"title":{},"name":{},"text":{"60":{}},"component":{}}],["safe",{"_index":1597,"title":{},"name":{},"text":{"26":{},"42":{},"46":{},"61":{},"66":{},"92":{},"140":{},"151":{}},"component":{}}],["safer",{"_index":6504,"title":{},"name":{},"text":{"151":{}},"component":{}}],["safest",{"_index":7471,"title":{},"name":{},"text":{"208":{}},"component":{}}],["safeti",{"_index":4395,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["saga",{"_index":1215,"title":{"64":{},"68":{},"52-35":{},"63-4":{},"63-5":{},"63-6":{},"63-11":{},"65-1":{},"65-4":{},"114-3":{}},"name":{"68":{}},"text":{"22":{},"23":{},"24":{},"25":{},"28":{},"32":{},"33":{},"34":{},"35":{},"44":{},"45":{},"52":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"67":{},"68":{},"79":{},"80":{},"84":{},"86":{},"97":{},"103":{},"114":{},"116":{},"270":{}},"component":{}}],["saga(sagastor",{"_index":4427,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["sagaconfigur",{"_index":4415,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["sagaconfigurer.configuresagastor",{"_index":4424,"title":{},"name":{},"text":{"63":{}},"component":{}}],["sagaconfigurer.configuresagastore(c",{"_index":4434,"title":{},"name":{},"text":{"65":{}},"component":{}}],["sagaentri",{"_index":1642,"title":{},"name":{},"text":{"26":{}},"component":{}}],["sagaeventhandl",{"_index":4334,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["sagaeventhandler(associationproperti",{"_index":4345,"title":{},"name":{},"text":{"62":{}},"component":{}}],["sagaeventhandler(associationproperty=\"orderid",{"_index":4373,"title":{},"name":{},"text":{"63":{}},"component":{}}],["sagaeventhandler(associationproperty=\"sellorderid",{"_index":4379,"title":{},"name":{},"text":{"63":{}},"component":{}}],["sagafixturetest",{"_index":3968,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sagaid",{"_index":5423,"title":{},"name":{},"text":{"97":{}},"component":{}}],["sagaidentifi",{"_index":3005,"title":{},"name":{},"text":{"52":{},"114":{}},"component":{}}],["sagalifecycle.associatewith(\"invoiceid",{"_index":4354,"title":{},"name":{},"text":{"62":{}},"component":{}}],["sagalifecycle.associatewith(\"shipmentid",{"_index":4353,"title":{},"name":{},"text":{"62":{}},"component":{}}],["sagalifecycle.associatewith(str",{"_index":4335,"title":{},"name":{},"text":{"62":{}},"component":{}}],["sagalifecycle.associationvalu",{"_index":3448,"title":{},"name":{},"text":{"60":{},"62":{}},"component":{}}],["sagalifecycle.end",{"_index":4357,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["sagalifecycle.removeassociationwith(str",{"_index":4337,"title":{},"name":{},"text":{"62":{}},"component":{}}],["sagamanag",{"_index":4390,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["sagamanager[${sagatypename}].invokesaga",{"_index":3004,"title":{},"name":{},"text":{"52":{}},"component":{}}],["sagamanager[${sagatypename}].startnewsaga",{"_index":3006,"title":{},"name":{},"text":{"52":{}},"component":{}}],["sagamethodmessagehandlerdefinit",{"_index":3965,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sagarepositori",{"_index":4382,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["sagasqlschema",{"_index":4401,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["sagastor",{"_index":3381,"title":{},"name":{},"text":{"60":{},"63":{},"65":{}},"component":{}}],["sagatestfixtur",{"_index":3366,"title":{},"name":{},"text":{"60":{},"61":{},"87":{}},"component":{}}],["sagatestfixture<>(invoicingsaga.class",{"_index":4591,"title":{},"name":{},"text":{"68":{}},"component":{}}],["sagatyp",{"_index":5421,"title":{},"name":{},"text":{"97":{},"114":{}},"component":{}}],["saga’",{"_index":3001,"title":{},"name":{},"text":{"52":{},"63":{},"65":{},"79":{},"80":{},"116":{}},"component":{}}],["sajjad",{"_index":3231,"title":{},"name":{},"text":{"60":{}},"component":{}}],["sake",{"_index":7989,"title":{},"name":{},"text":{"278":{},"280":{}},"component":{}}],["sale",{"_index":7612,"title":{},"name":{},"text":{"245":{}},"component":{}}],["same",{"_index":263,"title":{},"name":{},"text":{"3":{},"4":{},"7":{},"9":{},"13":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"37":{},"40":{},"41":{},"44":{},"49":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"71":{},"74":{},"75":{},"76":{},"77":{},"79":{},"80":{},"81":{},"84":{},"85":{},"88":{},"89":{},"90":{},"97":{},"101":{},"104":{},"107":{},"117":{},"121":{},"124":{},"126":{},"131":{},"138":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"160":{},"161":{},"165":{},"169":{},"171":{},"172":{},"184":{},"185":{},"194":{},"195":{},"196":{},"200":{},"201":{},"203":{},"208":{},"213":{},"214":{},"255":{},"258":{},"273":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["sameorigin",{"_index":6105,"title":{},"name":{},"text":{"138":{}},"component":{}}],["sampl",{"_index":1136,"title":{},"name":{},"text":{"11":{},"24":{},"29":{},"31":{},"37":{},"43":{},"44":{},"50":{},"56":{},"57":{},"66":{},"68":{},"71":{},"79":{},"80":{},"105":{},"108":{},"109":{},"112":{},"143":{},"146":{},"148":{},"171":{},"185":{},"190":{},"198":{},"200":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"261":{},"276":{}},"component":{}}],["sampleconfigurationlisten",{"_index":6440,"title":{},"name":{},"text":{"147":{}},"component":{}}],["samples/bik",{"_index":8029,"title":{},"name":{},"text":{"281":{}},"component":{}}],["sandjelkov",{"_index":3674,"title":{},"name":{},"text":{"60":{}},"component":{}}],["saratri",{"_index":3667,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["sascha",{"_index":3677,"title":{},"name":{},"text":{"60":{}},"component":{}}],["satisfi",{"_index":1050,"title":{},"name":{},"text":{"8":{},"151":{},"277":{}},"component":{}}],["save",{"_index":1023,"title":{},"name":{},"text":{"8":{},"29":{},"31":{},"63":{},"65":{},"78":{},"79":{},"80":{},"97":{},"144":{},"256":{},"267":{},"271":{},"274":{},"277":{},"280":{}},"component":{}}],["saw",{"_index":4224,"title":{},"name":{},"text":{"61":{}},"component":{}}],["say",{"_index":7740,"title":{},"name":{},"text":{"271":{}},"component":{}}],["sbloom",{"_index":6860,"title":{},"name":{},"text":{"172":{}},"component":{}}],["scalabl",{"_index":76,"title":{"2-4":{}},"name":{},"text":{"2":{},"35":{},"80":{}},"component":{}}],["scale",{"_index":79,"title":{"2-4":{},"254-6":{}},"name":{},"text":{"2":{},"3":{},"42":{},"70":{},"80":{},"117":{},"119":{},"137":{},"158":{},"184":{},"247":{},"253":{},"254":{},"261":{},"263":{},"270":{},"271":{},"276":{},"277":{},"278":{}},"component":{}}],["scan",{"_index":3032,"title":{},"name":{},"text":{"53":{},"60":{},"63":{},"96":{}},"component":{}}],["scatter",{"_index":2907,"title":{"52-43":{},"56-3":{}},"name":{},"text":{"52":{},"54":{},"56":{},"58":{},"61":{},"216":{}},"component":{}}],["scattergath",{"_index":3858,"title":{"122-7":{}},"name":{},"text":{"61":{}},"component":{}}],["scenario",{"_index":1478,"title":{},"name":{},"text":{"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"41":{},"50":{},"53":{},"60":{},"61":{},"66":{},"70":{},"71":{},"73":{},"79":{},"80":{},"81":{},"137":{},"140":{},"144":{},"150":{},"151":{},"231":{},"267":{},"269":{},"271":{},"279":{}},"component":{}}],["scenario’",{"_index":4560,"title":{},"name":{},"text":{"66":{}},"component":{}}],["schanana",{"_index":3287,"title":{},"name":{},"text":{"60":{}},"component":{}}],["schedul",{"_index":1940,"title":{"33":{},"32-1":{},"33-1":{},"33-2":{},"33-3":{},"33-4":{},"33-5":{},"33-6":{},"117-10":{},"137-25":{},"177-4":{}},"name":{"33":{}},"text":{"31":{},"32":{},"33":{},"34":{},"45":{},"46":{},"52":{},"60":{},"61":{},"66":{},"68":{},"79":{},"83":{},"85":{},"86":{},"91":{},"117":{},"137":{},"142":{},"144":{},"177":{},"185":{}},"component":{}}],["schedule(ev",{"_index":5789,"title":{},"name":{},"text":{"117":{}},"component":{}}],["schedule_ev",{"_index":6713,"title":{},"name":{},"text":{"164":{}},"component":{}}],["scheduled(fixeddelay",{"_index":5362,"title":{},"name":{},"text":{"91":{}},"component":{}}],["scheduledexecutorservic",{"_index":2237,"title":{},"name":{},"text":{"33":{},"80":{},"85":{}},"component":{}}],["scheduledtoken",{"_index":5782,"title":{},"name":{},"text":{"117":{}},"component":{}}],["scheduleid",{"_index":2994,"title":{},"name":{},"text":{"52":{}},"component":{}}],["schedulemydeadlin",{"_index":2152,"title":{},"name":{},"text":{"32":{}},"component":{}}],["schedulemydeadlinewithpayload",{"_index":2177,"title":{},"name":{},"text":{"32":{}},"component":{}}],["scheduler(schedul",{"_index":2211,"title":{},"name":{},"text":{"32":{}},"component":{}}],["scheduler’",{"_index":2256,"title":{},"name":{},"text":{"33":{}},"component":{}}],["schedulesnapshot",{"_index":4651,"title":{},"name":{},"text":{"71":{}},"component":{}}],["scheduletoken",{"_index":2224,"title":{},"name":{},"text":{"33":{}},"component":{}}],["scheduling/trigg",{"_index":2149,"title":{},"name":{},"text":{"32":{}},"component":{}}],["schedulingexecutorservic",{"_index":2242,"title":{},"name":{},"text":{"33":{}},"component":{}}],["schema",{"_index":2340,"title":{},"name":{},"text":{"35":{},"60":{},"65":{},"80":{},"117":{},"209":{},"214":{}},"component":{}}],["scheme",{"_index":3380,"title":{},"name":{},"text":{"60":{},"71":{},"79":{},"135":{}},"component":{}}],["scope",{"_index":2167,"title":{},"name":{},"text":{"32":{},"35":{},"36":{},"45":{},"52":{},"61":{},"75":{},"78":{},"79":{},"85":{},"101":{},"105":{},"165":{},"244":{}},"component":{}}],["scopeawareprovid",{"_index":2204,"title":{},"name":{},"text":{"32":{}},"component":{}}],["scopeawareprovider(provid",{"_index":5316,"title":{},"name":{},"text":{"85":{}},"component":{}}],["scopeawareprovider(scopeawareprovid",{"_index":2207,"title":{},"name":{},"text":{"32":{},"103":{}},"component":{}}],["scopedescriptor",{"_index":2168,"title":{},"name":{},"text":{"32":{},"45":{},"60":{}},"component":{}}],["scopedescriptor`",{"_index":3754,"title":{},"name":{},"text":{"60":{}},"component":{}}],["scrape",{"_index":2895,"title":{},"name":{},"text":{"51":{},"176":{}},"component":{}}],["scratch",{"_index":1175,"title":{},"name":{},"text":{"14":{},"247":{},"279":{}},"component":{}}],["screen",{"_index":6037,"title":{},"name":{},"text":{"137":{},"139":{},"146":{},"158":{},"199":{},"229":{},"230":{},"234":{},"235":{},"242":{},"244":{},"254":{},"256":{},"270":{},"273":{}},"component":{}}],["screenshot",{"_index":7269,"title":{},"name":{},"text":{"198":{},"199":{},"200":{},"270":{}},"component":{}}],["script",{"_index":1927,"title":{},"name":{},"text":{"31":{},"171":{},"273":{}},"component":{}}],["scroll",{"_index":6572,"title":{},"name":{},"text":{"158":{},"270":{}},"component":{}}],["sdk",{"_index":6764,"title":{},"name":{},"text":{"165":{}},"component":{}}],["se",{"_index":311,"title":{"166":{},"166-1":{},"166-2":{}},"name":{"166":{}},"text":{"3":{},"134":{},"140":{},"155":{},"160":{},"161":{},"162":{},"166":{},"167":{},"169":{},"171":{},"172":{},"176":{},"184":{},"203":{}},"component":{}}],["se/e",{"_index":6144,"title":{},"name":{},"text":{"140":{},"145":{},"167":{},"169":{},"171":{},"181":{}},"component":{}}],["seamless",{"_index":1602,"title":{},"name":{},"text":{"26":{}},"component":{}}],["seamlessli",{"_index":178,"title":{},"name":{},"text":{"2":{},"31":{}},"component":{}}],["search",{"_index":1500,"title":{"270-30":{}},"name":{},"text":{"24":{},"31":{},"32":{},"37":{},"57":{},"61":{},"103":{},"137":{},"138":{},"142":{},"163":{},"195":{},"200":{},"262":{},"270":{},"280":{}},"component":{}}],["search_ev",{"_index":6720,"title":{},"name":{},"text":{"164":{}},"component":{}}],["second",{"_index":347,"title":{},"name":{},"text":{"3":{},"24":{},"27":{},"31":{},"33":{},"35":{},"38":{},"39":{},"52":{},"56":{},"66":{},"68":{},"69":{},"73":{},"76":{},"79":{},"80":{},"81":{},"84":{},"91":{},"107":{},"117":{},"122":{},"131":{},"137":{},"143":{},"144":{},"147":{},"172":{},"177":{},"184":{},"185":{},"199":{},"205":{},"254":{},"255":{},"260":{},"262":{},"264":{},"276":{},"277":{},"278":{}},"component":{}}],["secondari",{"_index":6067,"title":{"139-5":{},"151-16":{},"151-17":{},"151-18":{},"151-20":{}},"name":{},"text":{"137":{},"139":{},"146":{},"149":{},"151":{},"171":{}},"component":{}}],["secondev",{"_index":4552,"title":{},"name":{},"text":{"66":{}},"component":{}}],["secondli",{"_index":4993,"title":{},"name":{},"text":{"79":{},"80":{}},"component":{}}],["secret",{"_index":220,"title":{"3-12":{},"184-5":{}},"name":{},"text":{"3":{},"165":{},"184":{},"196":{}},"component":{}}],["secret/axonserv",{"_index":596,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["secretnam",{"_index":650,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["section",{"_index":225,"title":{},"name":{},"text":{"3":{},"8":{},"11":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"45":{},"48":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"64":{},"67":{},"68":{},"72":{},"77":{},"79":{},"80":{},"89":{},"103":{},"106":{},"108":{},"109":{},"110":{},"111":{},"112":{},"117":{},"122":{},"134":{},"137":{},"143":{},"145":{},"146":{},"149":{},"152":{},"159":{},"162":{},"166":{},"167":{},"168":{},"171":{},"176":{},"177":{},"182":{},"184":{},"185":{},"196":{},"199":{},"200":{},"205":{},"208":{},"225":{},"226":{},"235":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"245":{},"256":{},"260":{},"267":{},"268":{},"270":{},"271":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["secur",{"_index":83,"title":{"161":{},"168":{},"2-5":{},"196-8":{},"203-16":{},"203-37":{}},"name":{},"text":{"2":{},"3":{},"24":{},"42":{},"44":{},"61":{},"75":{},"122":{},"134":{},"137":{},"144":{},"161":{},"163":{},"165":{},"167":{},"168":{},"171":{},"172":{},"174":{},"184":{},"196":{},"203":{},"205":{},"245":{}},"component":{}}],["security.protocol",{"_index":5641,"title":{},"name":{},"text":{"108":{}},"component":{}}],["security.requir",{"_index":6810,"title":{},"name":{},"text":{"169":{},"172":{}},"component":{}}],["security/.token",{"_index":6586,"title":{},"name":{},"text":{"160":{},"162":{}},"component":{}}],["security/secur",{"_index":6805,"title":{},"name":{},"text":{"169":{},"185":{}},"component":{}}],["securitycontext",{"_index":617,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["see",{"_index":388,"title":{"5-5":{}},"name":{},"text":{"3":{},"5":{},"7":{},"24":{},"29":{},"31":{},"33":{},"35":{},"38":{},"42":{},"44":{},"45":{},"49":{},"52":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"68":{},"79":{},"80":{},"106":{},"113":{},"117":{},"122":{},"126":{},"137":{},"144":{},"147":{},"149":{},"151":{},"156":{},"162":{},"171":{},"184":{},"198":{},"199":{},"200":{},"203":{},"205":{},"208":{},"210":{},"218":{},"221":{},"223":{},"229":{},"232":{},"234":{},"235":{},"236":{},"238":{},"239":{},"242":{},"243":{},"245":{},"251":{},"254":{},"255":{},"256":{},"258":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["seek",{"_index":6064,"title":{},"name":{},"text":{"137":{},"224":{},"233":{}},"component":{}}],["seem",{"_index":4038,"title":{},"name":{},"text":{"61":{},"278":{}},"component":{}}],["seen",{"_index":2181,"title":{},"name":{},"text":{"32":{},"33":{},"46":{},"60":{},"78":{},"146":{},"203":{},"270":{}},"component":{}}],["segement",{"_index":3465,"title":{},"name":{},"text":{"60":{}},"component":{}}],["segment",{"_index":955,"title":{"158":{},"31-18":{},"31-28":{},"70-1":{},"70-2":{},"80-60":{},"117-14":{},"140-2":{},"140-3":{},"158-1":{},"158-2":{},"254-3":{},"254-5":{},"270-17":{}},"name":{},"text":{"7":{},"31":{},"51":{},"60":{},"61":{},"70":{},"72":{},"80":{},"81":{},"101":{},"102":{},"116":{},"117":{},"126":{},"127":{},"129":{},"138":{},"140":{},"142":{},"143":{},"144":{},"146":{},"151":{},"156":{},"157":{},"158":{},"172":{},"173":{},"243":{},"254":{},"255":{},"256":{},"258":{},"270":{}},"component":{}}],["segmentcountconfigurermodul",{"_index":5122,"title":{},"name":{},"text":{"80":{}},"component":{}}],["segmentid",{"_index":4629,"title":{},"name":{},"text":{"70":{},"80":{}},"component":{}}],["segment’",{"_index":7617,"title":{},"name":{},"text":{"254":{}},"component":{}}],["segreg",{"_index":5672,"title":{},"name":{},"text":{"111":{}},"component":{}}],["select",{"_index":1021,"title":{"223-1":{},"270-11":{}},"name":{},"text":{"8":{},"23":{},"35":{},"38":{},"56":{},"61":{},"80":{},"117":{},"144":{},"150":{},"151":{},"158":{},"173":{},"185":{},"192":{},"194":{},"196":{},"199":{},"203":{},"209":{},"214":{},"217":{},"218":{},"223":{},"229":{},"236":{},"239":{},"241":{},"242":{},"243":{},"254":{},"270":{},"273":{}},"component":{}}],["select(.context==\"default",{"_index":6602,"title":{},"name":{},"text":{"162":{}},"component":{}}],["select(jsonpath(payloaddata",{"_index":7216,"title":{},"name":{},"text":{"192":{}},"component":{}}],["select_account",{"_index":6784,"title":{},"name":{},"text":{"165":{}},"component":{}}],["selector",{"_index":614,"title":{},"name":{},"text":{"3":{},"172":{},"184":{},"270":{}},"component":{}}],["selector.min",{"_index":6970,"title":{},"name":{},"text":{"172":{}},"component":{}}],["self",{"_index":556,"title":{},"name":{},"text":{"3":{},"38":{},"161":{},"167":{},"169":{},"184":{}},"component":{}}],["sell",{"_index":4374,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["sellorderid",{"_index":4377,"title":{},"name":{},"text":{"63":{}},"component":{}}],["semant",{"_index":4533,"title":{},"name":{},"text":{"66":{},"80":{},"144":{}},"component":{}}],["send",{"_index":856,"title":{"129":{},"200":{},"213":{},"214":{},"215":{},"216":{},"122-3":{},"146-3":{},"199-5":{},"199-9":{},"199-13":{},"200-3":{},"200-4":{},"201-2":{}},"name":{"200":{},"213":{},"214":{},"215":{},"216":{}},"text":{"5":{},"27":{},"31":{},"33":{},"42":{},"52":{},"54":{},"56":{},"62":{},"68":{},"70":{},"76":{},"80":{},"81":{},"85":{},"98":{},"122":{},"124":{},"129":{},"142":{},"144":{},"146":{},"149":{},"150":{},"156":{},"161":{},"167":{},"171":{},"172":{},"197":{},"199":{},"200":{},"201":{},"206":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"218":{},"221":{},"241":{},"254":{},"256":{},"270":{},"272":{},"273":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["send(object",{"_index":1726,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sendal",{"_index":5819,"title":{"122-4":{}},"name":{},"text":{"122":{}},"component":{}}],["sendandforget(mycommand",{"_index":5835,"title":{},"name":{},"text":{"122":{}},"component":{}}],["sendandwait",{"_index":1720,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sendcommand",{"_index":1721,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sendcommand(@requestbodi",{"_index":5832,"title":{},"name":{},"text":{"122":{}},"component":{}}],["sendcommand(mypayloadtyp",{"_index":1975,"title":{},"name":{},"text":{"31":{}},"component":{}}],["sendcommandandwait(mypayloadtyp",{"_index":1983,"title":{},"name":{},"text":{"31":{}},"component":{}}],["sendcommandandwaitforaresult(mypayloadtyp",{"_index":1979,"title":{},"name":{},"text":{"31":{}},"component":{}}],["sendcommandandwaitonresult",{"_index":1732,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sender",{"_index":2571,"title":{},"name":{},"text":{"42":{},"156":{},"172":{},"212":{},"213":{},"214":{},"216":{}},"component":{}}],["sendsubscriptionquery(somequeri",{"_index":5857,"title":{},"name":{},"text":{"122":{}},"component":{}}],["sens",{"_index":1508,"title":{},"name":{},"text":{"24":{},"26":{},"31":{},"45":{},"130":{},"146":{},"185":{}},"component":{}}],["sensibl",{"_index":1692,"title":{},"name":{},"text":{"27":{},"44":{},"50":{},"51":{},"63":{},"65":{},"71":{},"102":{},"197":{},"281":{}},"component":{}}],["sensit",{"_index":6307,"title":{},"name":{},"text":{"144":{},"167":{},"185":{},"196":{},"203":{}},"component":{}}],["sent",{"_index":759,"title":{"5-13":{},"5-14":{}},"name":{},"text":{"5":{},"27":{},"31":{},"36":{},"38":{},"42":{},"52":{},"56":{},"60":{},"68":{},"101":{},"122":{},"129":{},"142":{},"146":{},"161":{},"165":{},"167":{},"172":{},"176":{},"177":{},"180":{},"212":{},"240":{},"270":{},"273":{},"277":{},"278":{},"280":{}},"component":{}}],["separ",{"_index":236,"title":{},"name":{},"text":{"3":{},"24":{},"27":{},"35":{},"47":{},"52":{},"58":{},"60":{},"66":{},"70":{},"71":{},"75":{},"79":{},"80":{},"81":{},"89":{},"102":{},"115":{},"117":{},"119":{},"131":{},"135":{},"137":{},"141":{},"146":{},"154":{},"158":{},"161":{},"165":{},"167":{},"170":{},"171":{},"184":{},"185":{},"203":{},"205":{},"223":{},"231":{},"273":{},"278":{},"280":{}},"component":{}}],["sequenc",{"_index":1648,"title":{"91":{},"79-13":{},"79-16":{},"79-19":{},"79-20":{},"79-21":{},"79-22":{},"97-2":{}},"name":{},"text":{"26":{},"35":{},"36":{},"42":{},"45":{},"60":{},"61":{},"66":{},"79":{},"80":{},"81":{},"89":{},"90":{},"91":{},"97":{},"106":{},"114":{},"142":{},"172":{},"191":{},"199":{},"200":{},"251":{}},"component":{}}],["sequence.iter",{"_index":4945,"title":{},"name":{},"text":{"79":{}},"component":{}}],["sequenceddeadletterprocessor",{"_index":4923,"title":{},"name":{},"text":{"79":{},"91":{},"117":{}},"component":{}}],["sequenceddeadletterprocessor#process",{"_index":4949,"title":{},"name":{},"text":{"79":{}},"component":{}}],["sequenceddeadletterprocessor(processinggroup",{"_index":5775,"title":{},"name":{},"text":{"117":{}},"component":{}}],["sequenceddeadletterprocessor::processani",{"_index":5368,"title":{},"name":{},"text":{"91":{}},"component":{}}],["sequenceddeadletterqueu",{"_index":4889,"title":{},"name":{},"text":{"79":{},"89":{}},"component":{}}],["sequenceddeadletterqueue#deadlettersequence(str",{"_index":3900,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sequenceddeadletterqueuefactori",{"_index":3338,"title":{},"name":{},"text":{"60":{}},"component":{}}],["sequenceeventstorageengin",{"_index":2374,"title":{},"name":{},"text":{"35":{},"61":{}},"component":{}}],["sequencefilt",{"_index":5768,"title":{},"name":{},"text":{"117":{}},"component":{}}],["sequenceidentifi",{"_index":5703,"title":{},"name":{},"text":{"114":{}},"component":{}}],["sequenceindex",{"_index":4070,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sequenceiter",{"_index":4944,"title":{},"name":{},"text":{"79":{}},"component":{}}],["sequenceiterator.next",{"_index":4947,"title":{},"name":{},"text":{"79":{}},"component":{}}],["sequencenumb",{"_index":2405,"title":{},"name":{},"text":{"36":{},"45":{},"97":{},"114":{},"200":{},"209":{},"212":{},"214":{}},"component":{}}],["sequence’",{"_index":4926,"title":{},"name":{},"text":{"79":{}},"component":{}}],["sequencingpolici",{"_index":3478,"title":{},"name":{},"text":{"60":{},"61":{},"80":{},"104":{},"106":{},"107":{}},"component":{}}],["sequencingpolicy(sequencingpolici",{"_index":5579,"title":{},"name":{},"text":{"106":{}},"component":{}}],["sequencingpolicyconfigurermodule(sequencingpolici",{"_index":5141,"title":{},"name":{},"text":{"80":{}},"component":{}}],["sequencingpolicynam",{"_index":5287,"title":{},"name":{},"text":{"81":{}},"component":{}}],["sequencingpolicyparamet",{"_index":5288,"title":{},"name":{},"text":{"81":{}},"component":{}}],["sequenti",{"_index":4997,"title":{"80-45":{}},"name":{},"text":{"80":{},"122":{}},"component":{}}],["sequentialperaggregatepolici",{"_index":5126,"title":{},"name":{},"text":{"80":{},"106":{}},"component":{}}],["sequentialpolici",{"_index":5131,"title":{},"name":{},"text":{"80":{}},"component":{}}],["seral",{"_index":2231,"title":{},"name":{},"text":{"33":{}},"component":{}}],["seri",{"_index":912,"title":{},"name":{},"text":{"7":{},"29":{},"176":{}},"component":{}}],["serial",{"_index":1218,"title":{"24":{},"24-1":{},"24-6":{},"24-8":{},"24-9":{},"35-22":{},"35-25":{},"38-4":{},"38-5":{}},"name":{"24":{}},"text":{"22":{},"24":{},"31":{},"32":{},"33":{},"35":{},"38":{},"60":{},"61":{},"63":{},"65":{},"71":{},"81":{},"89":{},"101":{},"106":{},"127":{},"129":{},"154":{},"191":{},"192":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"270":{}},"component":{}}],["seriali",{"_index":3504,"title":{},"name":{},"text":{"60":{}},"component":{}}],["serializ",{"_index":1899,"title":{},"name":{},"text":{"29":{},"42":{},"71":{}},"component":{}}],["serializationawar",{"_index":1462,"title":{},"name":{},"text":{"24":{},"31":{}},"component":{}}],["serializer(config.seri",{"_index":4905,"title":{},"name":{},"text":{"79":{},"89":{},"113":{}},"component":{}}],["serializer(seri",{"_index":2208,"title":{},"name":{},"text":{"32":{},"33":{},"101":{},"103":{},"106":{},"127":{}},"component":{}}],["serializerconfigur",{"_index":1403,"title":{},"name":{},"text":{"24":{}},"component":{}}],["serializerconfiguration(configur",{"_index":1405,"title":{},"name":{},"text":{"24":{}},"component":{}}],["serializerthreadcount",{"_index":2076,"title":{},"name":{},"text":{"31":{}},"component":{}}],["serializer’",{"_index":1468,"title":{},"name":{},"text":{"24":{}},"component":{}}],["serialversionuid",{"_index":2465,"title":{},"name":{},"text":{"38":{}},"component":{}}],["serialversionuidrevisionresolv",{"_index":2464,"title":{},"name":{},"text":{"38":{}},"component":{}}],["serv",{"_index":1081,"title":{},"name":{},"text":{"8":{},"38":{},"79":{},"80":{},"81":{},"119":{},"139":{},"140":{},"146":{},"149":{},"171":{},"176":{},"185":{},"224":{},"233":{}},"component":{}}],["server",{"_index":46,"title":{"2":{},"3":{},"4":{},"18":{},"132":{},"133":{},"136":{},"147":{},"154":{},"162":{},"163":{},"165":{},"166":{},"177":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"196":{},"229":{},"249":{},"2-1":{},"2-2":{},"2-3":{},"2-4":{},"2-5":{},"2-6":{},"2-7":{},"3-13":{},"5-4":{},"19-2":{},"23-7":{},"33-5":{},"35-3":{},"47-1":{},"52-27":{},"52-28":{},"52-38":{},"52-39":{},"52-41":{},"52-42":{},"52-44":{},"52-45":{},"137-23":{},"140-3":{},"143-5":{},"144-18":{},"144-27":{},"150-5":{},"151-2":{},"158-2":{},"161-1":{},"162-1":{},"162-2":{},"163-4":{},"166-1":{},"166-2":{},"184-6":{},"185-2":{},"185-6":{},"196-1":{},"196-7":{},"198-3":{},"199-2":{},"199-4":{},"199-5":{},"199-8":{},"199-9":{},"199-12":{},"199-13":{},"203-2":{},"203-6":{},"203-9":{},"203-10":{},"203-28":{},"203-29":{},"218-7":{},"223-3":{},"229-1":{},"229-2":{},"229-3":{},"245-2":{},"280-4":{}},"name":{"18":{},"154":{},"177":{},"249":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"23":{},"25":{},"28":{},"31":{},"33":{},"35":{},"52":{},"54":{},"56":{},"60":{},"61":{},"70":{},"80":{},"81":{},"84":{},"97":{},"99":{},"101":{},"102":{},"105":{},"108":{},"114":{},"117":{},"119":{},"128":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"182":{},"183":{},"184":{},"185":{},"191":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"203":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"224":{},"225":{},"227":{},"228":{},"229":{},"231":{},"232":{},"233":{},"234":{},"235":{},"238":{},"245":{},"247":{},"253":{},"256":{},"261":{},"270":{},"274":{},"277":{},"279":{},"280":{},"281":{}},"component":{"3":{},"4":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{}}}],["server'",{"_index":1173,"title":{},"name":{},"text":{"14":{}},"component":{}}],["server.loc",{"_index":6633,"title":{},"name":{},"text":{"163":{}},"component":{}}],["server.max",{"_index":7345,"title":{"203-8":{}},"name":{},"text":{"212":{}},"component":{}}],["server.port",{"_index":6846,"title":{},"name":{},"text":{"172":{},"205":{}},"component":{}}],["server.port=8081",{"_index":7270,"title":{},"name":{},"text":{"198":{}},"component":{}}],["server.serv",{"_index":7344,"title":{"203-7":{}},"name":{},"text":{"212":{}},"component":{}}],["server.ssl.key",{"_index":6811,"title":{},"name":{},"text":{"169":{},"172":{}},"component":{}}],["server.tl",{"_index":7358,"title":{"203-26":{}},"name":{},"text":{"212":{}},"component":{}}],["server.trust",{"_index":7359,"title":{"203-27":{}},"name":{},"text":{"212":{}},"component":{}}],["server/tree/master/3",{"_index":540,"title":{},"name":{},"text":{"3":{}},"component":{}}],["serveraddress(\"localhost",{"_index":6329,"title":{},"name":{},"text":{"144":{}},"component":{}}],["serverauthenticationid",{"_index":7504,"title":{},"name":{},"text":{"212":{}},"component":{}}],["serverconfig",{"_index":7156,"title":{},"name":{},"text":{"180":{}},"component":{}}],["serverconfig.setheartbeat(heartbeatconfig",{"_index":7157,"title":{},"name":{},"text":{"180":{}},"component":{}}],["server’",{"_index":1580,"title":{},"name":{},"text":{"25":{},"35":{},"47":{},"61":{},"137":{},"163":{},"168":{},"169":{},"172":{},"198":{},"200":{},"203":{},"281":{}},"component":{}}],["servic",{"_index":436,"title":{},"name":{},"text":{"3":{},"5":{},"24":{},"31":{},"38":{},"52":{},"78":{},"79":{},"80":{},"90":{},"101":{},"126":{},"127":{},"128":{},"129":{},"137":{},"138":{},"147":{},"149":{},"163":{},"167":{},"173":{},"179":{},"180":{},"184":{},"185":{},"196":{},"208":{},"209":{},"211":{},"227":{},"234":{},"265":{},"266":{},"274":{},"278":{},"280":{},"281":{}},"component":{}}],["service/axonserv",{"_index":682,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["serviceinst",{"_index":5933,"title":{},"name":{},"text":{"126":{},"127":{}},"component":{}}],["serviceinstancefilt",{"_index":5963,"title":{},"name":{},"text":{"127":{}},"component":{}}],["serviceload",{"_index":5376,"title":{},"name":{},"text":{"92":{}},"component":{}}],["servicenam",{"_index":612,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["serviceport",{"_index":678,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["session",{"_index":5372,"title":{},"name":{},"text":{"91":{},"159":{},"165":{}},"component":{}}],["set",{"_index":354,"title":{"228":{},"5-4":{},"151-13":{},"163-3":{},"185-2":{},"203-2":{},"203-37":{},"229-1":{},"234-1":{},"234-2":{},"260-1":{}},"name":{"228":{},"234":{}},"text":{"3":{},"5":{},"8":{},"9":{},"13":{},"23":{},"24":{},"25":{},"27":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"44":{},"45":{},"49":{},"50":{},"52":{},"54":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"70":{},"71":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"84":{},"85":{},"88":{},"89":{},"97":{},"98":{},"102":{},"104":{},"105":{},"107":{},"108":{},"116":{},"123":{},"126":{},"130":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"146":{},"147":{},"148":{},"150":{},"151":{},"154":{},"156":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"172":{},"173":{},"176":{},"177":{},"179":{},"181":{},"184":{},"185":{},"196":{},"198":{},"203":{},"205":{},"208":{},"217":{},"218":{},"223":{},"225":{},"228":{},"229":{},"234":{},"243":{},"245":{},"247":{},"253":{},"254":{},"256":{},"258":{},"260":{},"263":{},"264":{},"269":{},"270":{},"273":{},"274":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["set_event_processor_strategi",{"_index":6703,"title":{},"name":{},"text":{"164":{}},"component":{}}],["setautoloadbalancestrategy(loadbalancerequest",{"_index":6992,"title":{},"name":{},"text":{"173":{}},"component":{}}],["setcallbackbehavior",{"_index":4598,"title":{},"name":{},"text":{"68":{}},"component":{}}],["setdeadlinemanager(deadlinemanag",{"_index":5503,"title":{},"name":{},"text":{"103":{}},"component":{}}],["setentitymanager(entitymanag",{"_index":2303,"title":{},"name":{},"text":{"35":{}},"component":{}}],["setreportillegalstatechang",{"_index":4495,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setter",{"_index":1370,"title":{},"name":{},"text":{"24":{},"38":{},"63":{},"68":{}},"component":{}}],["settext(\"no",{"_index":2511,"title":{},"name":{},"text":{"38":{}},"component":{}}],["setup",{"_index":698,"title":{"233":{},"234":{},"66-2":{},"141-2":{},"185-5":{},"229-3":{}},"name":{},"text":{"3":{},"24":{},"38":{},"61":{},"66":{},"70":{},"80":{},"87":{},"128":{},"141":{},"146":{},"151":{},"154":{},"155":{},"161":{},"169":{},"170":{},"172":{},"174":{},"184":{},"185":{},"223":{},"229":{},"260":{},"264":{},"282":{}},"component":{}}],["sever",{"_index":688,"title":{},"name":{},"text":{"3":{},"8":{},"13":{},"17":{},"19":{},"23":{},"24":{},"31":{},"33":{},"35":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"53":{},"56":{},"60":{},"61":{},"62":{},"66":{},"70":{},"71":{},"78":{},"79":{},"80":{},"97":{},"104":{},"107":{},"111":{},"112":{},"117":{},"122":{},"126":{},"131":{},"137":{},"144":{},"151":{},"161":{},"162":{},"173":{},"184":{},"196":{},"199":{},"235":{},"238":{},"241":{},"255":{},"265":{},"270":{},"273":{}},"component":{}}],["se’",{"_index":7188,"title":{},"name":{},"text":{"185":{}},"component":{}}],["sg",{"_index":3691,"title":{},"name":{},"text":{"60":{}},"component":{}}],["sgrimm",{"_index":3690,"title":{},"name":{},"text":{"60":{}},"component":{}}],["sha256",{"_index":7450,"title":{},"name":{},"text":{"203":{}},"component":{}}],["sha512",{"_index":7451,"title":{},"name":{},"text":{"203":{}},"component":{}}],["shall",{"_index":577,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["shape",{"_index":4440,"title":{},"name":{},"text":{"66":{},"194":{}},"component":{}}],["share",{"_index":1365,"title":{},"name":{},"text":{"24":{},"31":{},"35":{},"47":{},"57":{},"60":{},"61":{},"74":{},"79":{},"80":{},"104":{},"105":{},"141":{},"143":{},"151":{},"165":{},"170":{},"185":{},"203":{},"212":{},"218":{},"223":{},"262":{},"273":{},"274":{},"277":{}},"component":{}}],["shareabl",{"_index":5589,"title":{},"name":{},"text":{"107":{}},"component":{}}],["shared/glob",{"_index":2397,"title":{},"name":{},"text":{"35":{}},"component":{}}],["shed",{"_index":5093,"title":{},"name":{},"text":{"80":{},"104":{}},"component":{}}],["shell",{"_index":252,"title":{},"name":{},"text":{"3":{},"171":{},"184":{}},"component":{}}],["shi",{"_index":7667,"title":{},"name":{},"text":{"262":{}},"component":{}}],["shift",{"_index":7595,"title":{},"name":{},"text":{"241":{}},"component":{}}],["ship",{"_index":4342,"title":{},"name":{},"text":{"62":{}},"component":{}}],["ship_crew",{"_index":6655,"title":{},"name":{},"text":{"163":{}},"component":{}}],["shipment",{"_index":4332,"title":{},"name":{},"text":{"62":{},"71":{}},"component":{}}],["shipmentid",{"_index":4349,"title":{},"name":{},"text":{"62":{}},"component":{}}],["shippingid",{"_index":4348,"title":{},"name":{},"text":{"62":{}},"component":{}}],["shopid",{"_index":1677,"title":{},"name":{},"text":{"27":{},"36":{}},"component":{}}],["short",{"_index":109,"title":{},"name":{},"text":{"2":{},"35":{},"52":{},"55":{},"56":{},"61":{},"63":{},"65":{},"71":{},"80":{},"81":{},"171":{},"185":{},"254":{},"277":{}},"component":{}}],["short.max",{"_index":5171,"title":{},"name":{},"text":{"80":{}},"component":{}}],["shortcut",{"_index":8009,"title":{},"name":{},"text":{"281":{},"282":{}},"component":{}}],["shorten",{"_index":1343,"title":{},"name":{},"text":{"24":{},"35":{}},"component":{}}],["shorter",{"_index":1429,"title":{},"name":{},"text":{"24":{},"97":{},"110":{},"192":{}},"component":{}}],["shortest",{"_index":1501,"title":{},"name":{},"text":{"24":{}},"component":{}}],["shorthand",{"_index":5647,"title":{},"name":{},"text":{"109":{},"166":{}},"component":{}}],["shouldn’t",{"_index":994,"title":{},"name":{},"text":{"8":{},"31":{}},"component":{}}],["show",{"_index":529,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"9":{},"27":{},"43":{},"44":{},"47":{},"50":{},"52":{},"56":{},"66":{},"68":{},"71":{},"77":{},"78":{},"79":{},"80":{},"138":{},"143":{},"163":{},"169":{},"171":{},"176":{},"184":{},"185":{},"199":{},"200":{},"229":{},"235":{},"236":{},"238":{},"241":{},"243":{},"254":{},"255":{},"256":{},"260":{},"261":{},"263":{},"266":{},"267":{},"269":{},"270":{},"271":{},"274":{},"276":{},"277":{},"278":{},"279":{},"280":{}},"component":{}}],["shown",{"_index":1145,"title":{},"name":{},"text":{"13":{},"24":{},"27":{},"28":{},"29":{},"31":{},"43":{},"44":{},"47":{},"57":{},"61":{},"66":{},"77":{},"79":{},"80":{},"106":{},"122":{},"141":{},"143":{},"146":{},"147":{},"161":{},"185":{},"200":{},"225":{},"232":{},"234":{},"235":{},"236":{},"241":{},"242":{},"243":{},"245":{},"251":{},"254":{},"270":{},"271":{},"277":{}},"component":{}}],["shubhojitr",{"_index":4155,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shut",{"_index":2023,"title":{},"name":{},"text":{"31":{},"33":{},"61":{},"80":{},"102":{},"104":{},"155":{}},"component":{}}],["shutdown",{"_index":2024,"title":{},"name":{},"text":{"31":{},"60":{},"61":{},"63":{},"80":{},"107":{},"138":{},"143":{},"172":{}},"component":{}}],["shutdownhandl",{"_index":3600,"title":{},"name":{},"text":{"60":{}},"component":{}}],["side",{"_index":2560,"title":{},"name":{},"text":{"41":{},"46":{},"56":{},"61":{},"66":{},"68":{},"79":{},"80":{},"81":{},"106":{},"108":{},"119":{},"150":{},"167":{},"169":{},"198":{},"229":{},"236":{},"239":{},"241":{},"242":{},"243":{},"261":{},"270":{},"280":{}},"component":{}}],["sidebar",{"_index":7279,"title":{},"name":{},"text":{"199":{}},"component":{}}],["sign",{"_index":557,"title":{},"name":{},"text":{"3":{},"5":{},"161":{},"167":{},"169":{},"184":{},"230":{},"244":{},"264":{},"269":{},"273":{},"274":{}},"component":{}}],["signal",{"_index":3150,"title":{},"name":{},"text":{"56":{},"60":{},"70":{},"137":{},"156":{},"172":{}},"component":{}}],["signatur",{"_index":1764,"title":{},"name":{},"text":{"28":{}},"component":{}}],["signifi",{"_index":4363,"title":{},"name":{},"text":{"63":{}},"component":{}}],["signific",{"_index":797,"title":{},"name":{},"text":{"5":{},"80":{},"144":{},"151":{}},"component":{}}],["significantli",{"_index":5175,"title":{},"name":{},"text":{"80":{},"151":{}},"component":{}}],["similar",{"_index":395,"title":{},"name":{},"text":{"3":{},"11":{},"23":{},"33":{},"35":{},"44":{},"52":{},"57":{},"60":{},"63":{},"65":{},"66":{},"68":{},"79":{},"80":{},"89":{},"104":{},"117":{},"122":{},"150":{},"156":{},"184":{},"256":{},"270":{},"277":{},"278":{}},"component":{}}],["similarli",{"_index":2539,"title":{},"name":{},"text":{"40":{},"79":{},"89":{},"150":{},"163":{},"199":{}},"component":{}}],["simpl",{"_index":181,"title":{"33-2":{},"44-14":{}},"name":{},"text":{"2":{},"7":{},"8":{},"24":{},"28":{},"29":{},"33":{},"35":{},"36":{},"40":{},"49":{},"56":{},"61":{},"62":{},"71":{},"73":{},"77":{},"80":{},"81":{},"97":{},"121":{},"143":{},"232":{},"277":{},"278":{},"279":{},"281":{}},"component":{}}],["simplecommandbu",{"_index":1917,"title":{"31-8":{}},"name":{},"text":{"31":{},"117":{}},"component":{}}],["simplecommandbus(transactionmanag",{"_index":2006,"title":{},"name":{},"text":{"31":{}},"component":{}}],["simplecommandbus.build",{"_index":2000,"title":{},"name":{},"text":{"31":{}},"component":{}}],["simplecommandbus.builder().build",{"_index":2639,"title":{},"name":{},"text":{"44":{},"101":{},"127":{}},"component":{}}],["simplecorrelationdataprovid",{"_index":2590,"title":{"43-3":{}},"name":{},"text":{"43":{}},"component":{}}],["simplecorrelationdataprovider(\"myid",{"_index":2602,"title":{},"name":{},"text":{"43":{}},"component":{}}],["simplecorrelationdataprovider(\"somekey",{"_index":2604,"title":{},"name":{},"text":{"43":{}},"component":{}}],["simpledeadlinemanag",{"_index":2143,"title":{},"name":{},"text":{"32":{},"61":{},"84":{},"85":{}},"component":{}}],["simpleentitymanagerprovid",{"_index":2296,"title":{},"name":{},"text":{"35":{}},"component":{}}],["simpleeventbu",{"_index":2271,"title":{},"name":{},"text":{"35":{}},"component":{}}],["simpleeventschedul",{"_index":2241,"title":{},"name":{},"text":{"33":{}},"component":{}}],["simpleeventschedulerfactorybean",{"_index":2261,"title":{},"name":{},"text":{"33":{}},"component":{}}],["simplequerybu",{"_index":3039,"title":{"54-6":{}},"name":{},"text":{"54":{},"61":{},"117":{}},"component":{}}],["simplequerybus.build",{"_index":3045,"title":{},"name":{},"text":{"54":{}},"component":{}}],["simplequerybus.query(${querynam",{"_index":3011,"title":{},"name":{},"text":{"52":{}},"component":{}}],["simplequerybus.scattergather(${querynam",{"_index":3017,"title":{},"name":{},"text":{"52":{}},"component":{}}],["simplequerybus.streamingquery(${querynam",{"_index":3015,"title":{},"name":{},"text":{"52":{}},"component":{}}],["simplequeryupdateemitt",{"_index":3020,"title":{},"name":{},"text":{"52":{},"60":{}},"component":{}}],["simplequeryupdateemitter.emit",{"_index":3024,"title":{},"name":{},"text":{"52":{}},"component":{}}],["simplequeryupdateemitter.emit(${payloadclass",{"_index":3022,"title":{},"name":{},"text":{"52":{}},"component":{}}],["simpler",{"_index":3756,"title":{},"name":{},"text":{"60":{},"62":{},"66":{},"278":{}},"component":{}}],["simpleresourceinjector",{"_index":4384,"title":{},"name":{},"text":{"63":{}},"component":{}}],["simpleserializedtyp",{"_index":2499,"title":{},"name":{},"text":{"38":{}},"component":{}}],["simpleserializedtype(complaintevent.class.gettypenam",{"_index":2501,"title":{},"name":{},"text":{"38":{}},"component":{}}],["simpleserializedtype(target_type.getnam",{"_index":2507,"title":{},"name":{},"text":{"38":{}},"component":{}}],["simplest",{"_index":684,"title":{},"name":{},"text":{"3":{},"29":{},"31":{},"144":{},"184":{}},"component":{}}],["simplfi",{"_index":2672,"title":{},"name":{},"text":{"44":{}},"component":{}}],["simpli",{"_index":783,"title":{},"name":{},"text":{"5":{},"24":{},"25":{},"28":{},"29":{},"30":{},"31":{},"35":{},"36":{},"37":{},"39":{},"46":{},"50":{},"53":{},"54":{},"55":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"76":{},"77":{},"79":{},"80":{},"90":{},"122":{},"140":{},"143":{},"144":{},"151":{},"183":{},"185":{},"218":{},"229":{},"260":{},"264":{},"267":{},"271":{},"272":{},"277":{},"278":{},"281":{}},"component":{}}],["simplic",{"_index":1655,"title":{},"name":{},"text":{"26":{},"71":{},"79":{},"278":{}},"component":{}}],["simplicity’",{"_index":7999,"title":{},"name":{},"text":{"280":{}},"component":{}}],["simplifi",{"_index":42,"title":{},"name":{},"text":{"1":{},"3":{},"60":{},"61":{},"66":{},"102":{},"110":{},"112":{},"135":{},"137":{},"138":{},"184":{},"185":{},"247":{}},"component":{}}],["simul",{"_index":2198,"title":{"272":{}},"name":{"272":{}},"text":{"32":{},"66":{},"87":{},"199":{},"261":{},"273":{}},"component":{}}],["simulator.properti",{"_index":7767,"title":{},"name":{},"text":{"273":{}},"component":{}}],["simulatorconfigcontrol",{"_index":7766,"title":{},"name":{},"text":{"273":{}},"component":{}}],["simultan",{"_index":4772,"title":{},"name":{},"text":{"76":{}},"component":{}}],["sindex",{"_index":6862,"title":{},"name":{},"text":{"172":{}},"component":{}}],["singl",{"_index":164,"title":{"57-4":{}},"name":{},"text":{"2":{},"3":{},"5":{},"23":{},"26":{},"27":{},"28":{},"29":{},"31":{},"35":{},"37":{},"38":{},"40":{},"43":{},"46":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"69":{},"70":{},"71":{},"75":{},"77":{},"79":{},"80":{},"81":{},"98":{},"104":{},"107":{},"110":{},"117":{},"122":{},"135":{},"137":{},"139":{},"140":{},"142":{},"149":{},"151":{},"155":{},"161":{},"165":{},"172":{},"176":{},"184":{},"185":{},"192":{},"196":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"224":{},"233":{},"236":{},"245":{},"254":{},"271":{},"276":{},"277":{},"278":{},"281":{}},"component":{}}],["singleeventupcast",{"_index":2476,"title":{},"name":{},"text":{"38":{},"110":{}},"component":{}}],["singleton",{"_index":544,"title":{},"name":{},"text":{"3":{},"53":{},"63":{},"65":{},"79":{},"184":{}},"component":{}}],["singletonmap",{"_index":2550,"title":{},"name":{},"text":{"40":{}},"component":{}}],["site",{"_index":893,"title":{},"name":{},"text":{"7":{},"8":{},"9":{}},"component":{}}],["site.git",{"_index":984,"title":{},"name":{},"text":{"8":{}},"component":{}}],["site/build/sit",{"_index":1076,"title":{},"name":{},"text":{"8":{}},"component":{}}],["site/locallink",{"_index":1036,"title":{},"name":{},"text":{"8":{}},"component":{}}],["site/locallinks/axonframework",{"_index":1052,"title":{},"name":{},"text":{"8":{}},"component":{}}],["site/locallinks/axonframework/doc",{"_index":1045,"title":{},"name":{},"text":{"8":{}},"component":{}}],["site/locallinks/axonframework/docs/playbook",{"_index":1047,"title":{},"name":{},"text":{"8":{}},"component":{}}],["situat",{"_index":553,"title":{},"name":{},"text":{"3":{},"24":{},"28":{},"31":{},"35":{},"61":{},"63":{},"65":{},"77":{},"80":{},"129":{},"138":{},"144":{},"151":{},"180":{},"184":{},"255":{},"267":{}},"component":{}}],["sixteen",{"_index":5123,"title":{},"name":{},"text":{"80":{}},"component":{}}],["size",{"_index":1354,"title":{"151-11":{},"203-8":{},"203-40":{}},"name":{},"text":{"24":{},"31":{},"56":{},"61":{},"80":{},"89":{},"138":{},"142":{},"144":{},"146":{},"147":{},"151":{},"154":{},"156":{},"172":{},"203":{},"209":{},"212":{},"236":{},"255":{},"256":{},"270":{}},"component":{}}],["size=100",{"_index":5299,"title":{},"name":{},"text":{"81":{}},"component":{}}],["size=10mb",{"_index":411,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["skip",{"_index":1598,"title":{},"name":{},"text":{"26":{},"61":{},"79":{},"122":{},"135":{},"260":{},"264":{},"273":{},"274":{},"282":{}},"component":{}}],["skywalk",{"_index":6008,"title":{},"name":{},"text":{"131":{}},"component":{}}],["slack",{"_index":3428,"title":{"256-5":{}},"name":{},"text":{"60":{},"61":{},"256":{},"271":{}},"component":{}}],["slash",{"_index":6095,"title":{},"name":{},"text":{"138":{},"271":{}},"component":{}}],["slate",{"_index":5239,"title":{},"name":{},"text":{"80":{}},"component":{}}],["sleepingwaitstrategi",{"_index":2056,"title":{},"name":{},"text":{"31":{}},"component":{}}],["slf4j",{"_index":2810,"title":{},"name":{},"text":{"49":{},"52":{},"61":{}},"component":{}}],["slight",{"_index":2350,"title":{},"name":{},"text":{"35":{},"218":{}},"component":{}}],["slightli",{"_index":2097,"title":{},"name":{},"text":{"31":{},"117":{}},"component":{}}],["slot",{"_index":2044,"title":{},"name":{},"text":{"31":{}},"component":{}}],["slow",{"_index":5050,"title":{"271":{},"271-1":{}},"name":{"271":{}},"text":{"80":{},"122":{},"138":{},"142":{},"156":{},"254":{},"255":{},"269":{},"271":{}},"component":{}}],["slow_disk",{"_index":6497,"title":{},"name":{},"text":{"151":{}},"component":{}}],["slower",{"_index":2096,"title":{},"name":{},"text":{"31":{},"35":{},"151":{}},"component":{}}],["slowest",{"_index":5169,"title":{"270-5":{}},"name":{},"text":{"80":{},"242":{},"270":{},"271":{}},"component":{}}],["sm",{"_index":5236,"title":{},"name":{},"text":{"80":{}},"component":{}}],["small",{"_index":917,"title":{},"name":{},"text":{"7":{},"31":{},"38":{},"60":{},"61":{},"66":{},"70":{},"121":{},"138":{},"151":{},"185":{},"260":{},"268":{},"270":{}},"component":{}}],["smaller",{"_index":1411,"title":{},"name":{},"text":{"24":{},"56":{},"242":{},"270":{}},"component":{}}],["smallest",{"_index":5212,"title":{},"name":{},"text":{"80":{},"173":{},"270":{}},"component":{}}],["smart",{"_index":4676,"title":{},"name":{},"text":{"71":{}},"component":{}}],["smartlifecycl",{"_index":3205,"title":{},"name":{},"text":{"60":{}},"component":{}}],["smcvb",{"_index":3226,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["snake",{"_index":3349,"title":{},"name":{},"text":{"60":{}},"component":{}}],["snake_cas",{"_index":6838,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot",{"_index":1358,"title":{"71":{},"52-34":{},"71-1":{},"71-2":{},"71-5":{},"71-6":{},"71-9":{},"114-2":{}},"name":{"71":{}},"text":{"24":{},"35":{},"52":{},"60":{},"61":{},"71":{},"72":{},"97":{},"114":{},"137":{},"138":{},"140":{},"142":{},"146":{},"147":{},"151":{},"154":{},"155":{},"162":{},"165":{},"172":{},"176":{},"177":{},"185":{},"242":{},"255":{},"276":{}},"component":{}}],["snapshot.bloom",{"_index":6859,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.ev",{"_index":6861,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.forc",{"_index":6877,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.index",{"_index":6400,"title":{},"name":{},"text":{"146":{},"159":{},"162":{},"172":{}},"component":{}}],["snapshot.jar",{"_index":6743,"title":{},"name":{},"text":{"165":{}},"component":{}}],["snapshot.max",{"_index":6401,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["snapshot.memori",{"_index":6882,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.primari",{"_index":6878,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.read",{"_index":6959,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.retent",{"_index":6402,"title":{},"name":{},"text":{"146":{},"151":{}},"component":{}}],["snapshot.secondari",{"_index":6879,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.seg",{"_index":6399,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["snapshot.storag",{"_index":6397,"title":{},"name":{},"text":{"146":{},"172":{}},"component":{}}],["snapshot.storage=[loc",{"_index":6414,"title":{},"name":{},"text":{"146":{}},"component":{}}],["snapshot.sync",{"_index":6880,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.us",{"_index":6960,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshot.valid",{"_index":6881,"title":{},"name":{},"text":{"172":{}},"component":{}}],["snapshotdata",{"_index":4680,"title":{},"name":{},"text":{"71":{}},"component":{}}],["snapshotev",{"_index":5700,"title":{},"name":{},"text":{"114":{}},"component":{}}],["snapshotevententri",{"_index":2282,"title":{},"name":{},"text":{"35":{},"97":{}},"component":{}}],["snapshoteventstor",{"_index":4655,"title":{},"name":{},"text":{"71":{}},"component":{}}],["snapshotfilt",{"_index":3526,"title":{},"name":{},"text":{"60":{},"61":{},"71":{}},"component":{}}],["snapshotserializer(config.seri",{"_index":2337,"title":{},"name":{},"text":{"35":{}},"component":{}}],["snapshotserializer(seri",{"_index":2324,"title":{},"name":{},"text":{"35":{}},"component":{}}],["snapshott",{"_index":2998,"title":{},"name":{},"text":{"52":{},"60":{},"61":{},"71":{}},"component":{}}],["snapshotterclass}.createsnapshot($aggregateclass",{"_index":2999,"title":{},"name":{},"text":{"52":{}},"component":{}}],["snapshottriggerdefinit",{"_index":1886,"title":{},"name":{},"text":{"29":{},"61":{},"71":{}},"component":{}}],["sneak",{"_index":4202,"title":{},"name":{},"text":{"61":{}},"component":{}}],["snippet",{"_index":1480,"title":{},"name":{},"text":{"24":{},"25":{},"28":{},"38":{},"43":{},"44":{},"50":{},"53":{},"56":{},"63":{},"70":{},"71":{},"75":{},"77":{},"78":{},"80":{},"137":{},"143":{},"144":{},"276":{}},"component":{}}],["social",{"_index":925,"title":{},"name":{},"text":{"7":{}},"component":{}}],["socket",{"_index":6806,"title":{},"name":{},"text":{"169":{},"172":{},"185":{}},"component":{}}],["socket.platform",{"_index":7383,"title":{"203-55":{}},"name":{},"text":{},"component":{}}],["socket.reconnect",{"_index":7384,"title":{"203-56":{}},"name":{},"text":{},"component":{}}],["softwar",{"_index":1178,"title":{},"name":{},"text":{"15":{},"21":{},"38":{},"41":{},"52":{},"121":{},"207":{},"263":{},"273":{}},"component":{}}],["sold",{"_index":4645,"title":{},"name":{},"text":{"71":{}},"component":{}}],["sole",{"_index":2258,"title":{},"name":{},"text":{"33":{},"44":{},"60":{},"104":{},"126":{}},"component":{}}],["solid",{"_index":1192,"title":{},"name":{},"text":{"15":{},"19":{},"21":{}},"component":{}}],["solut",{"_index":129,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"15":{},"21":{},"23":{},"29":{},"31":{},"33":{},"35":{},"38":{},"49":{},"60":{},"61":{},"71":{},"73":{},"79":{},"80":{},"81":{},"84":{},"107":{},"111":{},"137":{},"143":{},"144":{},"156":{},"207":{},"256":{}},"component":{}}],["solv",{"_index":709,"title":{},"name":{},"text":{"4":{},"7":{},"19":{},"60":{},"61":{},"144":{}},"component":{}}],["somebodi",{"_index":4172,"title":{},"name":{},"text":{"61":{}},"component":{}}],["someclass(paramet",{"_index":2309,"title":{},"name":{},"text":{"35":{}},"component":{}}],["somekeycorrelationprovid",{"_index":2622,"title":{},"name":{},"text":{"43":{}},"component":{}}],["someon",{"_index":4249,"title":{},"name":{},"text":{"61":{},"261":{}},"component":{}}],["someparentcommand",{"_index":4734,"title":{},"name":{},"text":{"73":{}},"component":{}}],["somepredicate.test(messag",{"_index":3146,"title":{},"name":{},"text":{"56":{}},"component":{}}],["someresponsetype.class",{"_index":5849,"title":{},"name":{},"text":{"122":{}},"component":{}}],["someth",{"_index":934,"title":{},"name":{},"text":{"7":{},"9":{},"26":{},"28":{},"33":{},"42":{},"52":{},"56":{},"60":{},"73":{},"80":{},"88":{},"91":{},"103":{},"124":{},"146":{},"241":{},"247":{},"253":{},"254":{},"256":{},"277":{},"278":{},"279":{}},"component":{}}],["sometim",{"_index":1484,"title":{},"name":{},"text":{"24":{},"25":{},"38":{},"52":{},"63":{},"66":{},"73":{},"77":{},"79":{},"86":{},"139":{},"261":{},"270":{},"277":{}},"component":{}}],["somewhat",{"_index":942,"title":{},"name":{},"text":{"7":{}},"component":{}}],["somewher",{"_index":2383,"title":{},"name":{},"text":{"35":{},"65":{},"69":{},"80":{},"263":{}},"component":{}}],["sonar",{"_index":3386,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["soon",{"_index":1771,"title":{},"name":{},"text":{"28":{},"35":{},"61":{},"68":{},"91":{},"104":{},"149":{},"199":{},"271":{},"272":{}},"component":{}}],["sort",{"_index":5437,"title":{},"name":{},"text":{"97":{},"271":{}},"component":{}}],["sortedkafkamessagebuff",{"_index":5558,"title":{},"name":{},"text":{"104":{}},"component":{}}],["sortedkafkamessagebuffer<>(buffercapac",{"_index":5557,"title":{},"name":{},"text":{"104":{}},"component":{}}],["sound",{"_index":6300,"title":{},"name":{},"text":{"144":{}},"component":{}}],["sourc",{"_index":89,"title":{"9":{},"2-7":{},"8-2":{},"8-8":{},"8-9":{},"9-2":{},"9-3":{},"9-4":{},"9-5":{},"9-6":{},"13-2":{},"23-4":{},"28-3":{},"29-11":{},"77-2":{},"80-66":{},"104-1":{},"104-2":{},"117-12":{},"270-25":{},"270-37":{}},"name":{"9":{}},"text":{"2":{},"3":{},"5":{},"8":{},"9":{},"10":{},"11":{},"13":{},"22":{},"23":{},"24":{},"28":{},"29":{},"31":{},"35":{},"36":{},"38":{},"42":{},"44":{},"45":{},"52":{},"60":{},"61":{},"66":{},"71":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"98":{},"100":{},"104":{},"105":{},"117":{},"122":{},"134":{},"137":{},"146":{},"151":{},"184":{},"236":{},"239":{},"263":{},"270":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["sourceid",{"_index":2752,"title":{},"name":{},"text":{"45":{}},"component":{}}],["sources.jar",{"_index":6622,"title":{},"name":{},"text":{"163":{}},"component":{}}],["source’",{"_index":1105,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sown",{"_index":7294,"title":{},"name":{},"text":{"199":{}},"component":{}}],["space",{"_index":1353,"title":{},"name":{},"text":{"24":{},"137":{},"144":{},"151":{},"167":{},"171":{},"176":{},"196":{},"273":{},"281":{}},"component":{}}],["span",{"_index":2905,"title":{"52-1":{},"52-9":{},"52-10":{},"52-11":{}},"name":{},"text":{"52":{},"60":{},"63":{},"65":{},"130":{},"131":{}},"component":{}}],["spanattributesprovid",{"_index":2936,"title":{},"name":{},"text":{"52":{}},"component":{}}],["spanfactori",{"_index":2010,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"52":{},"54":{},"60":{},"61":{}},"component":{}}],["spanfactory(config.spanfactori",{"_index":2002,"title":{},"name":{},"text":{"31":{}},"component":{}}],["spanfactory(defaultdeadlinemanagerspanfactory.build",{"_index":2212,"title":{},"name":{},"text":{"32":{}},"component":{}}],["spanfactory(spanfactori",{"_index":2013,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"35":{},"54":{},"103":{},"115":{}},"component":{}}],["spanfactory.registerspanattributeprovider(new",{"_index":2958,"title":{},"name":{},"text":{"52":{}},"component":{}}],["spanfactory.registerspanattributeprovider(provid",{"_index":2937,"title":{},"name":{},"text":{"52":{}},"component":{}}],["spanfactory.registertagprovid",{"_index":3617,"title":{},"name":{},"text":{"60":{}},"component":{}}],["sparingli",{"_index":4862,"title":{},"name":{},"text":{"79":{}},"component":{}}],["spars",{"_index":1756,"title":{},"name":{},"text":{"27":{}},"component":{}}],["spawn",{"_index":4469,"title":{},"name":{},"text":{"66":{}},"component":{}}],["speak",{"_index":1748,"title":{},"name":{},"text":{"27":{},"35":{}},"component":{}}],["spec",{"_index":603,"title":{},"name":{},"text":{"3":{},"106":{},"184":{}},"component":{}}],["specfic",{"_index":7800,"title":{},"name":{},"text":{"275":{}},"component":{}}],["special",{"_index":568,"title":{"149-3":{}},"name":{},"text":{"3":{},"28":{},"29":{},"50":{},"52":{},"63":{},"65":{},"66":{},"71":{},"94":{},"149":{},"165":{},"184":{},"228":{},"255":{}},"component":{}}],["specif",{"_index":48,"title":{"9-3":{},"40-2":{},"89-2":{},"117-3":{},"117-13":{},"163-3":{},"256-2":{},"270-30":{}},"name":{},"text":{"1":{},"3":{},"5":{},"7":{},"9":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"31":{},"32":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"45":{},"50":{},"52":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"88":{},"89":{},"91":{},"93":{},"96":{},"101":{},"104":{},"107":{},"108":{},"109":{},"117":{},"121":{},"122":{},"124":{},"126":{},"131":{},"137":{},"139":{},"140":{},"142":{},"143":{},"144":{},"146":{},"147":{},"149":{},"151":{},"154":{},"161":{},"162":{},"166":{},"167":{},"171":{},"172":{},"184":{},"185":{},"196":{},"199":{},"201":{},"205":{},"212":{},"221":{},"223":{},"235":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"254":{},"255":{},"256":{},"269":{},"270":{},"271":{},"273":{},"274":{},"275":{},"277":{},"278":{},"282":{}},"component":{}}],["specifi",{"_index":363,"title":{},"name":{},"text":{"3":{},"9":{},"23":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"37":{},"38":{},"43":{},"44":{},"45":{},"51":{},"52":{},"53":{},"57":{},"60":{},"61":{},"63":{},"66":{},"68":{},"75":{},"77":{},"79":{},"80":{},"81":{},"89":{},"93":{},"96":{},"97":{},"101":{},"108":{},"117":{},"122":{},"137":{},"138":{},"141":{},"142":{},"144":{},"146":{},"147":{},"150":{},"151":{},"161":{},"167":{},"169":{},"171":{},"172":{},"173":{},"184":{},"192":{},"201":{},"203":{},"205":{},"208":{},"209":{},"211":{},"212":{},"214":{},"216":{},"221":{},"223":{},"231":{},"235":{},"236":{},"239":{},"241":{},"254":{},"267":{},"270":{},"275":{},"277":{},"280":{},"282":{}},"component":{}}],["speed",{"_index":4861,"title":{},"name":{},"text":{"79":{},"80":{},"105":{},"114":{},"137":{},"151":{}},"component":{}}],["spel",{"_index":4160,"title":{},"name":{},"text":{"61":{}},"component":{}}],["spend",{"_index":2648,"title":{},"name":{},"text":{"44":{},"71":{},"270":{}},"component":{}}],["spent",{"_index":2074,"title":{},"name":{},"text":{"31":{},"50":{},"255":{},"270":{}},"component":{}}],["spike",{"_index":6506,"title":{},"name":{},"text":{"151":{}},"component":{}}],["split",{"_index":226,"title":{"80-60":{},"254-3":{}},"name":{},"text":{"3":{},"51":{},"52":{},"60":{},"70":{},"80":{},"81":{},"124":{},"156":{},"158":{},"172":{},"173":{},"184":{},"242":{},"243":{},"254":{},"267":{},"270":{},"273":{},"276":{},"278":{}},"component":{}}],["split/merg",{"_index":5209,"title":{},"name":{},"text":{"80":{},"258":{}},"component":{}}],["split_event_processor_seg",{"_index":6704,"title":{},"name":{},"text":{"164":{}},"component":{}}],["spliteventprocessor(eventprocessoridentifi",{"_index":6986,"title":{},"name":{},"text":{"173":{}},"component":{}}],["splitsegment(int",{"_index":5201,"title":{},"name":{},"text":{"80":{}},"component":{}}],["splitsegmentfor(str",{"_index":5204,"title":{},"name":{},"text":{"80":{}},"component":{}}],["splunk",{"_index":752,"title":{"5-7":{}},"name":{},"text":{"5":{}},"component":{}}],["spot",{"_index":4140,"title":{},"name":{},"text":{"61":{},"79":{},"81":{}},"component":{}}],["spread",{"_index":2931,"title":{},"name":{},"text":{"52":{},"53":{},"70":{},"77":{},"158":{}},"component":{}}],["spring",{"_index":52,"title":{"25":{},"99":{},"113":{},"115":{},"124":{},"128":{},"23-8":{},"23-9":{},"23-17":{},"23-20":{},"23-22":{},"23-24":{},"23-28":{},"23-30":{},"23-32":{},"23-33":{},"23-34":{},"23-35":{},"23-37":{},"24-3":{},"24-4":{},"24-5":{},"25-3":{},"25-4":{},"25-5":{},"25-6":{},"29-3":{},"29-6":{},"29-9":{},"31-10":{},"31-13":{},"31-16":{},"31-24":{},"31-27":{},"31-30":{},"33-7":{},"35-5":{},"35-9":{},"35-12":{},"35-15":{},"35-19":{},"35-24":{},"37-3":{},"38-8":{},"38-9":{},"47-1":{},"50-3":{},"50-7":{},"50-8":{},"52-3":{},"52-7":{},"52-13":{},"52-14":{},"52-19":{},"52-24":{},"53-3":{},"54-5":{},"54-8":{},"63-13":{},"63-15":{},"65-3":{},"69-3":{},"70-5":{},"71-4":{},"71-8":{},"71-12":{},"79-7":{},"79-10":{},"79-15":{},"79-18":{},"79-26":{},"80-4":{},"80-6":{},"80-7":{},"80-9":{},"80-12":{},"80-14":{},"80-15":{},"80-17":{},"80-24":{},"80-26":{},"80-29":{},"80-31":{},"80-37":{},"80-41":{},"80-43":{},"80-44":{},"80-47":{},"80-48":{},"80-52":{},"80-53":{},"80-56":{},"80-57":{},"80-68":{},"80-70":{},"80-71":{},"81-3":{},"81-5":{},"81-6":{},"81-11":{},"81-12":{},"103-1":{},"103-2":{},"277-3":{}},"name":{"25":{},"113":{},"115":{}},"text":{"1":{},"5":{},"13":{},"22":{},"23":{},"25":{},"26":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"43":{},"45":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"60":{},"61":{},"62":{},"63":{},"65":{},"70":{},"71":{},"74":{},"79":{},"80":{},"81":{},"85":{},"89":{},"91":{},"93":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"108":{},"116":{},"119":{},"121":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"131":{},"146":{},"150":{},"169":{},"176":{},"180":{},"183":{},"234":{},"267":{},"273":{},"275":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{}}}],["spring.datasource.url",{"_index":723,"title":{},"name":{},"text":{"4":{}},"component":{}}],["spring.datasource.url=jdbc:h2:./data/axonserv",{"_index":725,"title":{},"name":{},"text":{"4":{}},"component":{}}],["spring.factori",{"_index":1545,"title":{},"name":{},"text":{"25":{}},"component":{}}],["spring.jpa.properties.hibernate.id.db_structure_naming_strategy=legaci",{"_index":1654,"title":{},"name":{},"text":{"26":{}},"component":{}}],["spring.security.oauth2.client.provider.keycloak.issu",{"_index":6793,"title":{},"name":{},"text":{"165":{}},"component":{}}],["spring.security.oauth2.client.registration.google.cli",{"_index":6778,"title":{},"name":{},"text":{"165":{}},"component":{}}],["spring.security.oauth2.client.registration.google.scop",{"_index":6779,"title":{},"name":{},"text":{"165":{}},"component":{}}],["spring.security.oauth2.client.registration.oidcclient.cli",{"_index":6789,"title":{},"name":{},"text":{"165":{}},"component":{}}],["spring.security.oauth2.client.registration.oidcclient.provid",{"_index":6790,"title":{},"name":{},"text":{"165":{}},"component":{}}],["spring.security.oauth2.client.registration.oidcclient.scop",{"_index":6791,"title":{},"name":{},"text":{"165":{}},"component":{}}],["spring.servlet.multipart.max",{"_index":6430,"title":{},"name":{},"text":{"147":{},"172":{}},"component":{}}],["spring:4.33.0,org.axonframework:axon",{"_index":1664,"title":{},"name":{},"text":{"26":{}},"component":{}}],["springaggregatelookup",{"_index":3383,"title":{},"name":{},"text":{"60":{}},"component":{}}],["springaggregatesnapshott",{"_index":4660,"title":{},"name":{},"text":{"71":{}},"component":{}}],["springamqpmessagesourc",{"_index":5451,"title":{},"name":{},"text":{"100":{}},"component":{}}],["springamqpmessagesource(messageconvert",{"_index":5454,"title":{},"name":{},"text":{"100":{}},"component":{}}],["springamqppublish",{"_index":5445,"title":{},"name":{},"text":{"98":{}},"component":{}}],["springapplication.run(myapplication.class",{"_index":5951,"title":{},"name":{},"text":{"127":{}},"component":{}}],["springaxonautoconfigur",{"_index":3995,"title":{},"name":{},"text":{"61":{}},"component":{}}],["springaxonconfigur",{"_index":3403,"title":{},"name":{},"text":{"60":{}},"component":{}}],["springboot",{"_index":5402,"title":{"102":{},"108":{},"116":{},"122-1":{},"276-3":{},"278-9":{},"281-4":{}},"name":{"102":{},"108":{},"116":{}},"text":{"93":{},"275":{},"276":{},"278":{},"281":{}},"component":{}}],["springbootappl",{"_index":4178,"title":{},"name":{},"text":{"61":{},"127":{}},"component":{}}],["springboot’",{"_index":8008,"title":{},"name":{},"text":{"281":{}},"component":{}}],["springcloud",{"_index":1286,"title":{},"name":{},"text":{"23":{},"31":{},"127":{},"128":{}},"component":{}}],["springcloudcommandrout",{"_index":5929,"title":{},"name":{},"text":{"126":{},"128":{}},"component":{}}],["springcloudcommandrouter(discoverycli",{"_index":5956,"title":{},"name":{},"text":{"127":{}},"component":{}}],["springcloudcommandrouter.build",{"_index":5958,"title":{},"name":{},"text":{"127":{}},"component":{}}],["springcommandcontrol",{"_index":5829,"title":{},"name":{},"text":{"122":{}},"component":{}}],["springconfigur",{"_index":3404,"title":{},"name":{},"text":{"60":{}},"component":{}}],["springconfigurer.componentloc",{"_index":3883,"title":{},"name":{},"text":{"61":{}},"component":{}}],["springdatasourceconnectionprovid",{"_index":2348,"title":{},"name":{},"text":{"35":{}},"component":{}}],["springhttpcommandbusconnector",{"_index":5985,"title":{},"name":{},"text":{"128":{},"129":{}},"component":{}}],["springhttpcommandbusconnector(@qualifier(\"localseg",{"_index":5964,"title":{},"name":{},"text":{"127":{}},"component":{}}],["springhttpcommandbusconnector.build",{"_index":5966,"title":{},"name":{},"text":{"127":{}},"component":{}}],["springmongotempl",{"_index":5710,"title":{},"name":{},"text":{"116":{}},"component":{}}],["springmongotransactionmanag",{"_index":5709,"title":{},"name":{},"text":{"116":{}},"component":{}}],["springprototypeaggregatefactori",{"_index":1849,"title":{"29-14":{}},"name":{},"text":{"29":{},"61":{}},"component":{}}],["springquerycontrol",{"_index":5841,"title":{},"name":{},"text":{"122":{}},"component":{}}],["springresourceinjector",{"_index":4383,"title":{},"name":{},"text":{"63":{}},"component":{}}],["springtransactionmanag",{"_index":4989,"title":{},"name":{},"text":{"79":{}},"component":{}}],["spring’",{"_index":1525,"title":{},"name":{},"text":{"25":{},"38":{},"61":{},"63":{},"79":{},"277":{}},"component":{}}],["spuriou",{"_index":3610,"title":{},"name":{},"text":{"60":{}},"component":{}}],["sql",{"_index":2250,"title":{"97-1":{}},"name":{},"text":{"33":{},"35":{},"61":{},"63":{},"65":{},"117":{},"119":{},"277":{}},"component":{}}],["squar",{"_index":3669,"title":{},"name":{},"text":{"60":{}},"component":{}}],["src",{"_index":7806,"title":{},"name":{},"text":{"276":{}},"component":{}}],["src/main/resources/application.properti",{"_index":7763,"title":{},"name":{},"text":{"273":{}},"component":{}}],["src/test/java/io/axoniq/demo/bikerental/rental/command",{"_index":8037,"title":{},"name":{},"text":{"282":{}},"component":{}}],["srmppn",{"_index":3670,"title":{},"name":{},"text":{"60":{}},"component":{}}],["ssd",{"_index":6488,"title":{},"name":{},"text":{"151":{}},"component":{}}],["ssh",{"_index":7248,"title":{},"name":{},"text":{"196":{}},"component":{}}],["ssl",{"_index":507,"title":{"169":{},"185-12":{}},"name":{"169":{}},"text":{"3":{},"161":{},"167":{},"168":{},"169":{},"171":{},"172":{},"174":{},"184":{},"185":{}},"component":{}}],["ssl,tl",{"_index":6827,"title":{},"name":{},"text":{"171":{}},"component":{}}],["ssl.cert",{"_index":6904,"title":{},"name":{},"text":{"172":{}},"component":{}}],["ssl.enabl",{"_index":6823,"title":{},"name":{},"text":{"169":{},"172":{}},"component":{}}],["ssl.intern",{"_index":6818,"title":{},"name":{},"text":{"169":{},"172":{}},"component":{}}],["ssl.privat",{"_index":6905,"title":{},"name":{},"text":{"172":{}},"component":{}}],["sst",{"_index":542,"title":{},"name":{},"text":{"3":{}},"component":{}}],["st",{"_index":695,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["stabil",{"_index":7542,"title":{},"name":{},"text":{"217":{}},"component":{}}],["stack",{"_index":814,"title":{},"name":{},"text":{"5":{},"38":{},"60":{},"101":{}},"component":{}}],["stackoverflowerror",{"_index":7500,"title":{},"name":{},"text":{"212":{}},"component":{}}],["stacktrac",{"_index":3582,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["stage",{"_index":336,"title":{},"name":{},"text":{"3":{},"35":{},"45":{},"46":{},"61":{},"63":{},"65":{},"66":{},"70":{},"71":{},"104":{},"184":{},"279":{}},"component":{}}],["stale",{"_index":4705,"title":{},"name":{},"text":{"71":{},"80":{},"137":{},"138":{},"144":{}},"component":{}}],["stall",{"_index":4884,"title":{},"name":{},"text":{"79":{}},"component":{}}],["stamp",{"_index":5434,"title":{},"name":{},"text":{"97":{}},"component":{}}],["stanc",{"_index":4677,"title":{},"name":{},"text":{"71":{}},"component":{}}],["stand",{"_index":5569,"title":{},"name":{},"text":{"106":{},"227":{},"237":{}},"component":{}}],["standalon",{"_index":422,"title":{},"name":{},"text":{"3":{},"137":{},"138":{},"171":{},"184":{},"197":{},"198":{},"229":{}},"component":{}}],["standard",{"_index":86,"title":{"155":{},"2-6":{},"29-10":{}},"name":{"155":{}},"text":{"2":{},"3":{},"23":{},"29":{},"52":{},"63":{},"65":{},"80":{},"81":{},"121":{},"131":{},"134":{},"135":{},"137":{},"147":{},"166":{},"169":{},"184":{},"185":{},"198":{},"201":{}},"component":{}}],["start",{"_index":172,"title":{"197":{},"224":{},"5-2":{},"198-2":{},"247-1":{},"254-2":{},"270-1":{},"271-5":{}},"name":{"274":{}},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"14":{},"15":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"31":{},"35":{},"36":{},"38":{},"43":{},"44":{},"46":{},"52":{},"58":{},"60":{},"61":{},"63":{},"66":{},"68":{},"71":{},"79":{},"80":{},"83":{},"86":{},"101":{},"102":{},"104":{},"107":{},"125":{},"131":{},"135":{},"138":{},"139":{},"141":{},"143":{},"144":{},"146":{},"147":{},"148":{},"151":{},"162":{},"170":{},"171":{},"172":{},"173":{},"177":{},"180":{},"183":{},"184":{},"185":{},"196":{},"197":{},"198":{},"200":{},"204":{},"205":{},"209":{},"212":{},"232":{},"234":{},"235":{},"238":{},"241":{},"245":{},"247":{},"253":{},"254":{},"256":{},"260":{},"261":{},"262":{},"264":{},"267":{},"268":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{"197":{},"198":{},"199":{},"200":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{}}}],["start/compose.yaml",{"_index":8032,"title":{},"name":{},"text":{"281":{}},"component":{}}],["start/rental/target/class",{"_index":8030,"title":{},"name":{},"text":{"281":{}},"component":{}}],["start/stop",{"_index":5229,"title":{},"name":{},"text":{"80":{}},"component":{}}],["start/stop/pause/reset",{"_index":7643,"title":{},"name":{},"text":{"258":{}},"component":{}}],["start=fals",{"_index":5500,"title":{},"name":{},"text":{"102":{}},"component":{}}],["start_event_processor",{"_index":6705,"title":{},"name":{},"text":{"164":{}},"component":{}}],["start_path",{"_index":1040,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["starter",{"_index":185,"title":{"23-9":{},"23-17":{},"23-20":{},"23-22":{},"23-24":{},"23-28":{},"23-30":{},"23-32":{},"23-35":{},"23-37":{},"25-3":{}},"name":{},"text":{"2":{},"3":{},"23":{},"25":{},"26":{},"31":{},"32":{},"33":{},"35":{},"54":{},"60":{},"61":{},"101":{},"102":{},"103":{},"108":{},"116":{},"122":{},"127":{},"128":{},"131":{},"165":{},"184":{},"229":{},"245":{},"261":{},"267":{},"271":{},"273":{},"275":{},"276":{},"282":{}},"component":{}}],["starteventprocessor",{"_index":6270,"title":{},"name":{},"text":{"143":{}},"component":{}}],["starteventprocessor(eventprocessoridentifi",{"_index":6983,"title":{},"name":{},"text":{"173":{}},"component":{}}],["starthandl",{"_index":3598,"title":{},"name":{},"text":{"60":{}},"component":{}}],["startposit",{"_index":5220,"title":{},"name":{},"text":{"80":{}},"component":{}}],["startreceivingcommands(flux",{"_index":5837,"title":{},"name":{},"text":{"122":{}},"component":{}}],["startsaga",{"_index":4333,"title":{},"name":{},"text":{"62":{},"63":{},"103":{}},"component":{}}],["startscheduler(fals",{"_index":2213,"title":{},"name":{},"text":{"32":{}},"component":{}}],["startswith(\"com.context.book",{"_index":6409,"title":{},"name":{},"text":{"146":{}},"component":{}}],["startup",{"_index":1520,"title":{"25-6":{}},"name":{},"text":{"61":{},"80":{},"141":{},"142":{},"148":{},"154":{},"170":{},"172":{},"205":{},"212":{}},"component":{}}],["state",{"_index":576,"title":{"78":{},"28-2":{},"66-8":{},"144-6":{},"144-10":{},"144-13":{}},"name":{"78":{}},"text":{"3":{},"28":{},"29":{},"31":{},"36":{},"38":{},"42":{},"44":{},"51":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"85":{},"121":{},"126":{},"138":{},"140":{},"143":{},"144":{},"151":{},"154":{},"172":{},"177":{},"178":{},"184":{},"223":{},"277":{},"278":{},"282":{}},"component":{}}],["statediagram",{"_index":6316,"title":{},"name":{},"text":{"144":{}},"component":{}}],["statefulset",{"_index":545,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["statefulset.apps/axonserv",{"_index":661,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["stateless",{"_index":4839,"title":{},"name":{},"text":{"79":{}},"component":{}}],["statement",{"_index":1603,"title":{},"name":{},"text":{"26":{},"35":{},"60":{},"61":{},"63":{},"65":{},"80":{}},"component":{}}],["static",{"_index":975,"title":{"117-1":{}},"name":{},"text":{"8":{},"28":{},"29":{},"31":{},"33":{},"36":{},"38":{},"42":{},"44":{},"60":{},"66":{},"73":{},"75":{},"77":{},"78":{},"85":{},"87":{},"93":{},"127":{},"144":{},"147":{},"277":{},"278":{}},"component":{}}],["static_key",{"_index":2105,"title":{},"name":{},"text":{"31":{}},"component":{}}],["statist",{"_index":857,"title":{"270-10":{},"270-20":{},"270-21":{},"270-27":{},"270-32":{}},"name":{},"text":{"5":{},"236":{},"240":{},"243":{},"254":{},"258":{},"270":{},"271":{}},"component":{}}],["statu",{"_index":816,"title":{"51-1":{}},"name":{"277":{}},"text":{"5":{},"47":{},"48":{},"51":{},"60":{},"61":{},"80":{},"103":{},"137":{},"171":{},"172":{},"176":{},"178":{},"198":{},"205":{},"208":{},"229":{},"238":{},"241":{},"243":{},"254":{},"255":{},"270":{},"277":{},"278":{}},"component":{}}],["status",{"_index":7868,"title":{},"name":{},"text":{"277":{}},"component":{}}],["status.cod",{"_index":4197,"title":{},"name":{},"text":{"61":{}},"component":{}}],["stay",{"_index":841,"title":{},"name":{},"text":{"5":{},"26":{},"56":{},"137":{}},"component":{}}],["stdout",{"_index":6899,"title":{},"name":{},"text":{"172":{}},"component":{}}],["steal",{"_index":4995,"title":{"80-32":{},"80-34":{}},"name":{},"text":{"80":{},"255":{}},"component":{}}],["stefanmirkov",{"_index":3969,"title":{},"name":{},"text":{"61":{}},"component":{}}],["step",{"_index":346,"title":{"26-1":{},"26-2":{},"26-3":{},"26-4":{},"26-5":{},"26-6":{},"26-7":{},"26-8":{},"26-9":{},"144-20":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"22":{},"26":{},"36":{},"46":{},"60":{},"61":{},"107":{},"121":{},"143":{},"158":{},"172":{},"184":{},"185":{},"191":{},"193":{},"198":{},"199":{},"200":{},"205":{},"212":{},"217":{},"229":{},"234":{},"256":{},"260":{},"264":{},"265":{},"266":{},"268":{},"269":{},"270":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"281":{},"282":{}},"component":{}}],["stereotyp",{"_index":3636,"title":{},"name":{},"text":{"60":{}},"component":{}}],["stick",{"_index":1349,"title":{},"name":{},"text":{"24":{},"26":{},"35":{},"40":{},"46":{},"84":{}},"component":{}}],["still",{"_index":200,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"31":{},"35":{},"40":{},"52":{},"61":{},"66":{},"79":{},"80":{},"81":{},"96":{},"98":{},"101":{},"127":{},"129":{},"137":{},"139":{},"140":{},"143":{},"147":{},"151":{},"160":{},"165":{},"171":{},"172":{},"177":{},"180":{},"203":{},"213":{},"214":{},"216":{},"261":{},"271":{},"277":{},"278":{}},"component":{}}],["stock",{"_index":4644,"title":{},"name":{},"text":{"71":{}},"component":{}}],["stolen",{"_index":4996,"title":{"80-33":{}},"name":{},"text":{"80":{}},"component":{}}],["stop",{"_index":735,"title":{"5-6":{}},"name":{},"text":{"4":{},"5":{},"31":{},"61":{},"68":{},"73":{},"79":{},"80":{},"90":{},"91":{},"104":{},"122":{},"138":{},"142":{},"143":{},"144":{},"147":{},"171":{},"172":{},"177":{},"196":{},"212":{},"247":{},"253":{},"254":{},"281":{}},"component":{}}],["storag",{"_index":38,"title":{"151":{},"223":{},"2-4":{},"35-17":{},"137-27":{},"151-2":{},"151-4":{},"151-17":{},"185-10":{},"203-42":{},"217-1":{},"223-1":{},"223-2":{},"223-3":{},"223-4":{}},"name":{"151":{}},"text":{"1":{},"2":{},"3":{},"23":{},"24":{},"25":{},"28":{},"29":{},"31":{},"35":{},"36":{},"57":{},"60":{},"61":{},"63":{},"65":{},"78":{},"80":{},"84":{},"115":{},"137":{},"138":{},"139":{},"140":{},"141":{},"144":{},"145":{},"149":{},"151":{},"157":{},"172":{},"174":{},"176":{},"184":{},"185":{},"203":{},"212":{},"217":{},"218":{},"223":{},"277":{}},"component":{}}],["storage.event.max",{"_index":6928,"title":{},"name":{},"text":{"172":{}},"component":{}}],["storage/messag",{"_index":7181,"title":{},"name":{},"text":{"185":{}},"component":{}}],["storagecontextnam",{"_index":7180,"title":{},"name":{},"text":{"185":{}},"component":{}}],["storageengin",{"_index":2317,"title":{},"name":{},"text":{"35":{},"115":{}},"component":{}}],["storageengine(eventstorageengin",{"_index":2678,"title":{},"name":{},"text":{"44":{}},"component":{}}],["storageengine(mongocli",{"_index":2367,"title":{},"name":{},"text":{"35":{}},"component":{}}],["storageengine(mongodatabasefactori",{"_index":5705,"title":{},"name":{},"text":{"115":{}},"component":{}}],["storageengine(seri",{"_index":2345,"title":{},"name":{},"text":{"35":{}},"component":{}}],["storageengine(storageengin",{"_index":2319,"title":{},"name":{},"text":{"35":{},"115":{}},"component":{}}],["storageengine.createschema(eventtablefactori",{"_index":2342,"title":{},"name":{},"text":{"35":{}},"component":{}}],["storageengine.createschema(tablefactori",{"_index":2347,"title":{},"name":{},"text":{"35":{}},"component":{}}],["storageprovider(storageprovid",{"_index":5507,"title":{},"name":{},"text":{"103":{}},"component":{}}],["storagestrategi",{"_index":2354,"title":{},"name":{},"text":{"35":{},"116":{}},"component":{}}],["storagetyp",{"_index":5667,"title":{},"name":{},"text":{"110":{}},"component":{}}],["store",{"_index":73,"title":{"35":{},"78":{},"115":{},"2-3":{},"35-2":{},"35-3":{},"35-6":{},"35-16":{},"35-20":{},"35-21":{},"63-6":{},"65-4":{},"71-5":{},"80-35":{},"80-38":{},"140-2":{},"144-6":{},"144-10":{},"144-23":{},"177-3":{},"203-34":{},"203-35":{},"203-36":{}},"name":{"35":{},"78":{}},"text":{"2":{},"3":{},"4":{},"23":{},"24":{},"25":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"39":{},"42":{},"49":{},"52":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"71":{},"77":{},"78":{},"79":{},"80":{},"81":{},"84":{},"97":{},"100":{},"104":{},"105":{},"107":{},"114":{},"115":{},"116":{},"117":{},"119":{},"122":{},"126":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"149":{},"151":{},"154":{},"155":{},"160":{},"162":{},"167":{},"169":{},"171":{},"172":{},"174":{},"176":{},"184":{},"185":{},"191":{},"195":{},"196":{},"203":{},"209":{},"214":{},"218":{},"223":{},"251":{},"254":{},"255":{},"274":{},"277":{},"280":{},"281":{}},"component":{}}],["store.en",{"_index":5713,"title":{},"name":{},"text":{"116":{}},"component":{}}],["store/ev",{"_index":1577,"title":{},"name":{},"text":{"25":{}},"component":{}}],["store’",{"_index":6386,"title":{},"name":{},"text":{"146":{}},"component":{}}],["storm",{"_index":7965,"title":{},"name":{},"text":{"278":{}},"component":{}}],["straight",{"_index":3184,"title":{},"name":{},"text":{"58":{}},"component":{}}],["straightforward",{"_index":44,"title":{},"name":{},"text":{"1":{},"4":{},"31":{},"54":{},"60":{},"62":{},"63":{},"79":{},"126":{},"232":{}},"component":{}}],["strategi",{"_index":1777,"title":{"31-20":{}},"name":{},"text":{"28":{},"31":{},"46":{},"56":{},"60":{},"61":{},"79":{},"80":{},"137":{},"140":{},"172":{},"173":{},"254":{}},"component":{}}],["strategy=threadnumb",{"_index":5190,"title":{},"name":{},"text":{"80":{}},"component":{}}],["stream",{"_index":29,"title":{"80":{},"52-31":{},"52-40":{},"56-5":{},"56-6":{},"80-10":{},"80-25":{},"80-26":{},"80-30":{},"80-31":{},"80-42":{},"80-43":{},"80-54":{},"80-58":{},"80-69":{},"80-70":{},"81-8":{},"137-2":{},"156-1":{},"254-1":{}},"name":{"80":{}},"text":{"1":{},"23":{},"24":{},"29":{},"35":{},"38":{},"42":{},"51":{},"52":{},"56":{},"57":{},"60":{},"61":{},"70":{},"71":{},"79":{},"80":{},"81":{},"104":{},"105":{},"107":{},"121":{},"122":{},"137":{},"138":{},"140":{},"144":{},"146":{},"151":{},"156":{},"158":{},"172":{},"173":{},"191":{},"194":{},"203":{},"212":{},"254":{},"255":{},"270":{}},"component":{}}],["stream.batch",{"_index":5298,"title":{},"name":{},"text":{"81":{}},"component":{}}],["stream.initi",{"_index":5300,"title":{},"name":{},"text":{"81":{}},"component":{}}],["stream.name=mi",{"_index":5297,"title":{},"name":{},"text":{"81":{}},"component":{}}],["streamabl",{"_index":3750,"title":{"104-2":{}},"name":{},"text":{"60":{},"104":{},"107":{}},"component":{}}],["streamablbemessagesourc",{"_index":3749,"title":{},"name":{},"text":{"60":{}},"component":{}}],["streamablekafkamessagesourc",{"_index":5508,"title":{"108-10":{}},"name":{},"text":{"104":{},"108":{}},"component":{}}],["streamablekafkamessagesource(list",{"_index":5553,"title":{},"name":{},"text":{"104":{}},"component":{}}],["streamablekafkamessagesource.build",{"_index":5555,"title":{},"name":{},"text":{"104":{}},"component":{}}],["streamablemessagesourc",{"_index":4998,"title":{},"name":{},"text":{"80":{},"117":{}},"component":{}}],["streamablemessagesource#createtokenat(inst",{"_index":4242,"title":{},"name":{},"text":{"61":{}},"component":{}}],["streamablemessagesource’",{"_index":5221,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingeventprocessor",{"_index":2750,"title":{},"name":{},"text":{"45":{},"51":{},"60":{},"61":{},"80":{},"143":{}},"component":{}}],["streamingeventprocessor#maxcapac",{"_index":3651,"title":{},"name":{},"text":{"60":{}},"component":{}}],["streamingeventprocessor#resettoken",{"_index":5231,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingeventprocessor.claimseg",{"_index":3271,"title":{},"name":{},"text":{"60":{}},"component":{}}],["streamingeventprocessor.class",{"_index":5196,"title":{},"name":{},"text":{"80":{},"143":{}},"component":{}}],["streamingeventprocessor.resettoken",{"_index":6256,"title":{},"name":{},"text":{"143":{}},"component":{}}],["streamingeventprocessor.shutdown",{"_index":6255,"title":{},"name":{},"text":{"143":{}},"component":{}}],["streamingeventprocessor.start",{"_index":6257,"title":{},"name":{},"text":{"143":{}},"component":{}}],["streamingeventprocessor.supportsreset",{"_index":6254,"title":{},"name":{},"text":{"143":{}},"component":{}}],["streamingprocessor.mergesegment(segmentid",{"_index":5207,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessor.releasesegment(segmentid",{"_index":5198,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessor.resettoken",{"_index":5226,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessor.resettokens(resetcontext",{"_index":5228,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessor.shutdown",{"_index":5225,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessor.splitsegment(segmentid",{"_index":5205,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessor.start",{"_index":5227,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessorcontrol",{"_index":5208,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingprocessorservic",{"_index":5192,"title":{},"name":{},"text":{"80":{}},"component":{}}],["streamingqueri",{"_index":3128,"title":{},"name":{},"text":{"56":{}},"component":{}}],["streamingquery(queri",{"_index":3136,"title":{},"name":{},"text":{"56":{}},"component":{}}],["streamlin",{"_index":6072,"title":{},"name":{},"text":{"137":{}},"component":{}}],["streamnam",{"_index":5286,"title":{},"name":{},"text":{"81":{}},"component":{}}],["streams.mi",{"_index":5296,"title":{},"name":{},"text":{"81":{}},"component":{}}],["strengthen",{"_index":5526,"title":{},"name":{},"text":{"104":{}},"component":{}}],["stress",{"_index":5369,"title":{},"name":{},"text":{"91":{},"267":{},"269":{}},"component":{}}],["strict",{"_index":6143,"title":{},"name":{},"text":{"140":{}},"component":{}}],["strike",{"_index":6529,"title":{},"name":{},"text":{"151":{}},"component":{}}],["string",{"_index":1158,"title":{},"name":{},"text":{"13":{},"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"38":{},"40":{},"43":{},"44":{},"45":{},"57":{},"61":{},"62":{},"63":{},"66":{},"70":{},"75":{},"77":{},"78":{},"79":{},"80":{},"85":{},"87":{},"93":{},"96":{},"104":{},"106":{},"107":{},"108":{},"110":{},"112":{},"117":{},"122":{},"143":{},"192":{},"208":{},"209":{},"211":{},"277":{},"278":{}},"component":{}}],["string.class",{"_index":5137,"title":{},"name":{},"text":{"80":{}},"component":{}}],["string.format(\"bik",{"_index":7855,"title":{},"name":{},"text":{"277":{}},"component":{}}],["string/numb",{"_index":4336,"title":{},"name":{},"text":{"62":{}},"component":{}}],["strip",{"_index":3497,"title":{},"name":{},"text":{"60":{}},"component":{}}],["strive",{"_index":5358,"title":{},"name":{},"text":{"91":{}},"component":{}}],["stroke",{"_index":7733,"title":{},"name":{},"text":{"270":{}},"component":{}}],["strong",{"_index":1937,"title":{},"name":{},"text":{"31":{},"144":{},"146":{},"185":{}},"component":{}}],["strongli",{"_index":547,"title":{},"name":{},"text":{"3":{},"26":{},"40":{},"79":{},"80":{},"144":{},"184":{}},"component":{}}],["structur",{"_index":304,"title":{"265":{},"44-3":{},"44-11":{},"75-1":{},"276-1":{}},"name":{"265":{}},"text":{"3":{},"9":{},"25":{},"28":{},"35":{},"38":{},"40":{},"42":{},"44":{},"60":{},"74":{},"75":{},"77":{},"78":{},"97":{},"106":{},"149":{},"184":{},"185":{},"208":{},"209":{},"211":{},"221":{},"276":{},"277":{},"278":{},"282":{}},"component":{}}],["sts.yml",{"_index":659,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["stub",{"_index":4602,"title":{},"name":{},"text":{"68":{}},"component":{}}],["stubaggregatelifecycleextens",{"_index":4455,"title":{},"name":{},"text":{"66":{}},"component":{}}],["stubeventschedul",{"_index":4611,"title":{},"name":{},"text":{"68":{}},"component":{}}],["stubschedul",{"_index":4608,"title":{},"name":{},"text":{"68":{}},"component":{}}],["stuck",{"_index":4960,"title":{},"name":{},"text":{"79":{},"263":{}},"component":{}}],["studi",{"_index":548,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["style",{"_index":1143,"title":{},"name":{},"text":{"13":{},"35":{},"108":{},"117":{},"137":{}},"component":{}}],["sub",{"_index":228,"title":{},"name":{},"text":{"3":{},"22":{},"30":{},"34":{},"39":{},"40":{},"42":{},"55":{},"64":{},"67":{},"72":{},"134":{},"145":{},"149":{},"152":{},"168":{},"184":{},"276":{}},"component":{}}],["subclass",{"_index":2453,"title":{},"name":{},"text":{"38":{},"60":{},"74":{},"96":{}},"component":{}}],["subdirectori",{"_index":307,"title":{},"name":{},"text":{"3":{},"146":{},"163":{},"165":{},"172":{},"184":{}},"component":{}}],["subhandl",{"_index":3169,"title":{},"name":{},"text":{"57":{}},"component":{}}],["subject",{"_index":549,"title":{},"name":{},"text":{"3":{},"111":{},"184":{},"282":{}},"component":{}}],["sublisten",{"_index":2433,"title":{},"name":{},"text":{"37":{}},"component":{}}],["submit",{"_index":3000,"title":{},"name":{},"text":{"52":{},"177":{}},"component":{}}],["submodul",{"_index":7802,"title":{},"name":{},"text":{"275":{},"276":{}},"component":{}}],["subnetwork",{"_index":7233,"title":{},"name":{},"text":{"196":{}},"component":{}}],["suboptim",{"_index":4158,"title":{},"name":{},"text":{"61":{}},"component":{}}],["subproject",{"_index":7804,"title":{"276-6":{}},"name":{},"text":{"276":{}},"component":{}}],["subqueryhandl",{"_index":3174,"title":{},"name":{},"text":{"57":{}},"component":{}}],["subscrib",{"_index":824,"title":{"81":{},"52-32":{},"104-1":{}},"name":{"81":{}},"text":{"5":{},"35":{},"52":{},"56":{},"60":{},"61":{},"63":{},"79":{},"80":{},"81":{},"98":{},"104":{},"107":{},"108":{},"112":{},"122":{},"137":{},"173":{},"177":{},"203":{},"245":{},"277":{}},"component":{}}],["subscribablekafkamessagesourc",{"_index":5523,"title":{},"name":{},"text":{"104":{},"108":{}},"component":{}}],["subscribablekafkamessagesource#start",{"_index":5532,"title":{},"name":{},"text":{"104":{}},"component":{}}],["subscribablekafkamessagesource(list",{"_index":5536,"title":{},"name":{},"text":{"104":{}},"component":{}}],["subscribablekafkamessagesource.build",{"_index":5539,"title":{},"name":{},"text":{"104":{}},"component":{}}],["subscribablekafkamessagesource.builder#autostart",{"_index":5552,"title":{},"name":{},"text":{"104":{}},"component":{}}],["subscribablemessagesourc",{"_index":5004,"title":{},"name":{},"text":{"80":{},"81":{},"98":{},"100":{},"104":{}},"component":{}}],["subscribe_command_handl",{"_index":6612,"title":{},"name":{},"text":{"162":{},"164":{},"171":{},"201":{}},"component":{}}],["subscribe_query_handl",{"_index":6613,"title":{},"name":{},"text":{"162":{},"164":{},"171":{}},"component":{}}],["subscribecontextupdates(google.protobuf.empti",{"_index":7000,"title":{},"name":{},"text":{"173":{}},"component":{}}],["subscribingeventprocessor",{"_index":5266,"title":{},"name":{},"text":{"81":{},"104":{},"108":{}},"component":{}}],["subscribingprocessorsconfigurermodul",{"_index":5277,"title":{},"name":{},"text":{"81":{}},"component":{}}],["subscript",{"_index":748,"title":{"5-6":{},"52-46":{},"56-4":{},"122-8":{},"245-3":{}},"name":{},"text":{"5":{},"44":{},"52":{},"56":{},"58":{},"61":{},"104":{},"122":{},"138":{},"142":{},"162":{},"177":{},"216":{},"234":{},"245":{},"258":{},"271":{}},"component":{}}],["subscription.retri",{"_index":7375,"title":{"203-48":{}},"name":{},"text":{},"component":{}}],["subscriptionqueri",{"_index":5820,"title":{"122-9":{}},"name":{},"text":{},"component":{}}],["subscriptionquerymani",{"_index":5821,"title":{"122-10":{}},"name":{},"text":{},"component":{}}],["subscriptionqueryresult",{"_index":3096,"title":{},"name":{},"text":{"56":{}},"component":{}}],["subscriptionqueryresult#handl",{"_index":3827,"title":{},"name":{},"text":{"61":{}},"component":{}}],["subscriptionqueryresult#handle(consum",{"_index":3114,"title":{},"name":{},"text":{"56":{}},"component":{}}],["subscriptionqueryresult::clos",{"_index":3125,"title":{},"name":{},"text":{"56":{}},"component":{}}],["subscriptionquerysend",{"_index":5856,"title":{},"name":{},"text":{"122":{}},"component":{}}],["subsect",{"_index":1213,"title":{},"name":{},"text":{"22":{},"34":{},"39":{},"48":{},"52":{},"134":{},"152":{}},"component":{}}],["subsequ",{"_index":2794,"title":{},"name":{},"text":{"46":{},"52":{},"56":{},"79":{},"140":{},"156":{},"165":{},"172":{}},"component":{}}],["subset",{"_index":4141,"title":{},"name":{},"text":{"61":{}},"component":{}}],["substitut",{"_index":6839,"title":{},"name":{},"text":{"172":{}},"component":{}}],["substr",{"_index":7207,"title":{},"name":{},"text":{"192":{}},"component":{}}],["subtyp",{"_index":2584,"title":{"74-1":{}},"name":{},"text":{"42":{},"45":{},"57":{},"60":{},"61":{},"74":{}},"component":{}}],["subtypes.add(openloopgiftcard.class",{"_index":4747,"title":{},"name":{},"text":{"74":{}},"component":{}}],["subtypes.add(rechargeablegiftcard.class",{"_index":4748,"title":{},"name":{},"text":{"74":{}},"component":{}}],["succe",{"_index":1945,"title":{},"name":{},"text":{"31":{},"46":{},"66":{},"79":{},"165":{}},"component":{}}],["succeed",{"_index":4135,"title":{},"name":{},"text":{"61":{},"80":{}},"component":{}}],["success",{"_index":1708,"title":{"235":{}},"name":{"235":{}},"text":{"27":{},"36":{},"50":{},"60":{},"66":{},"80":{},"83":{},"109":{},"139":{},"143":{},"185":{},"234":{}},"component":{}}],["successfulli",{"_index":1749,"title":{},"name":{},"text":{"27":{},"56":{},"60":{},"61":{},"66":{},"79":{},"91":{},"123":{},"124":{},"143":{},"151":{},"185":{},"198":{},"235":{},"238":{},"244":{},"274":{},"278":{},"282":{}},"component":{}}],["successor",{"_index":2911,"title":{},"name":{},"text":{"52":{}},"component":{}}],["successthreshold",{"_index":649,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["such",{"_index":151,"title":{"5-7":{}},"name":{},"text":{"2":{},"3":{},"5":{},"9":{},"11":{},"15":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"33":{},"35":{},"37":{},"38":{},"41":{},"42":{},"44":{},"45":{},"46":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"75":{},"79":{},"80":{},"90":{},"99":{},"101":{},"104":{},"106":{},"107":{},"108":{},"109":{},"117":{},"121":{},"122":{},"124":{},"130":{},"135":{},"137":{},"140":{},"142":{},"146":{},"151":{},"158":{},"159":{},"160":{},"162":{},"163":{},"168":{},"180":{},"184":{},"196":{},"197":{},"199":{},"201":{},"208":{},"209":{},"211":{},"214":{},"221":{},"231":{},"239":{},"242":{},"243":{},"245":{},"255":{},"264":{},"270":{},"271":{},"280":{}},"component":{}}],["sudden",{"_index":4016,"title":{},"name":{},"text":{"61":{},"271":{}},"component":{}}],["suddent",{"_index":7652,"title":{},"name":{},"text":{"261":{}},"component":{}}],["sudo",{"_index":7256,"title":{},"name":{},"text":{"196":{}},"component":{}}],["suffic",{"_index":1897,"title":{},"name":{},"text":{"29":{},"35":{},"61":{},"63":{},"79":{},"80":{},"97":{},"180":{}},"component":{}}],["suffici",{"_index":1392,"title":{},"name":{},"text":{"24":{},"29":{},"37":{},"43":{},"53":{},"60":{},"79":{},"80":{},"98":{},"144":{},"229":{},"260":{},"270":{}},"component":{}}],["suffix",{"_index":693,"title":{},"name":{},"text":{"3":{},"29":{},"172":{},"184":{}},"component":{}}],["suggest",{"_index":1989,"title":{},"name":{},"text":{"31":{},"33":{},"45":{},"69":{},"80":{},"97":{},"114":{},"127":{},"129":{},"139":{},"165":{},"232":{},"269":{}},"component":{}}],["suit",{"_index":1851,"title":{},"name":{},"text":{"29":{},"31":{},"66":{},"197":{}},"component":{}}],["suitabl",{"_index":1467,"title":{},"name":{},"text":{"24":{},"29":{},"31":{},"35":{},"37":{},"57":{},"63":{},"73":{},"79":{},"80":{},"93":{},"144":{},"151":{}},"component":{}}],["sum",{"_index":830,"title":{},"name":{},"text":{"5":{},"144":{}},"component":{}}],["summar",{"_index":901,"title":{},"name":{},"text":{"7":{},"71":{},"185":{},"270":{}},"component":{}}],["summari",{"_index":1212,"title":{"171-1":{},"270-15":{}},"name":{},"text":{"22":{},"30":{},"34":{},"39":{},"48":{},"55":{},"56":{},"60":{},"64":{},"67":{},"72":{},"80":{},"134":{},"145":{},"152":{},"157":{},"162":{},"168":{},"171":{},"174":{},"229":{},"235":{},"238":{},"241":{},"243":{},"270":{},"278":{}},"component":{}}],["summaris",{"_index":4642,"title":{},"name":{},"text":{"71":{}},"component":{}}],["summary.setremainingvalue(summary.getremainingvalu",{"_index":3085,"title":{},"name":{},"text":{"56":{}},"component":{}}],["super",{"_index":3165,"title":{},"name":{},"text":{"57":{},"74":{},"235":{}},"component":{}}],["super(deleg",{"_index":5392,"title":{},"name":{},"text":{"93":{}},"component":{}}],["super.canhandle(messag",{"_index":5396,"title":{},"name":{},"text":{"93":{}},"component":{}}],["super.onmessage(messag",{"_index":5458,"title":{},"name":{},"text":{"100":{}},"component":{}}],["superclass",{"_index":2438,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["superior",{"_index":138,"title":{},"name":{},"text":{"2":{}},"component":{}}],["supersed",{"_index":65,"title":{},"name":{},"text":{"1":{}},"component":{}}],["supertyp",{"_index":2429,"title":{},"name":{},"text":{"37":{}},"component":{}}],["suppli",{"_index":578,"title":{},"name":{},"text":{"3":{},"28":{},"80":{},"139":{},"142":{},"143":{},"146":{},"161":{},"167":{},"171":{},"172":{},"184":{}},"component":{}}],["supplier",{"_index":2410,"title":{},"name":{},"text":{"36":{},"61":{}},"component":{}}],["support",{"_index":54,"title":{"45":{},"120":{},"45-1":{},"45-2":{},"45-3":{},"57-4":{},"57-5":{},"275-3":{},"277-8":{},"281-4":{},"282-1":{}},"name":{"45":{}},"text":{"1":{},"5":{},"7":{},"23":{},"24":{},"25":{},"26":{},"29":{},"31":{},"32":{},"33":{},"35":{},"38":{},"41":{},"44":{},"45":{},"46":{},"48":{},"52":{},"57":{},"60":{},"61":{},"63":{},"64":{},"65":{},"68":{},"71":{},"77":{},"79":{},"80":{},"81":{},"95":{},"99":{},"100":{},"101":{},"106":{},"117":{},"119":{},"120":{},"122":{},"126":{},"131":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"145":{},"149":{},"151":{},"169":{},"171":{},"178":{},"180":{},"185":{},"197":{},"198":{},"208":{},"209":{},"210":{},"211":{},"212":{},"215":{},"216":{},"218":{},"223":{},"224":{},"233":{},"244":{},"245":{},"256":{},"261":{},"276":{},"277":{},"278":{},"281":{},"282":{}},"component":{}}],["suppos",{"_index":6121,"title":{},"name":{},"text":{"139":{},"274":{}},"component":{}}],["suppress",{"_index":3241,"title":{},"name":{},"text":{"60":{}},"component":{}}],["suppresswarnings(\"unuseddeclar",{"_index":4764,"title":{},"name":{},"text":{"75":{}},"component":{}}],["sure",{"_index":518,"title":{"232-1":{}},"name":{},"text":{"3":{},"8":{},"25":{},"26":{},"29":{},"31":{},"35":{},"42":{},"43":{},"52":{},"61":{},"63":{},"71":{},"75":{},"79":{},"80":{},"83":{},"96":{},"99":{},"101":{},"103":{},"105":{},"106":{},"116":{},"117":{},"121":{},"126":{},"128":{},"143":{},"144":{},"151":{},"184":{},"218":{},"232":{},"254":{},"255":{},"276":{},"277":{},"281":{}},"component":{}}],["surpris",{"_index":5090,"title":{},"name":{},"text":{"80":{}},"component":{}}],["surround",{"_index":2306,"title":{},"name":{},"text":{"35":{}},"component":{}}],["sut",{"_index":8040,"title":{},"name":{},"text":{"282":{}},"component":{}}],["swagger",{"_index":6377,"title":{},"name":{},"text":{"144":{},"158":{}},"component":{}}],["swallow",{"_index":3599,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["switch",{"_index":519,"title":{"223-4":{}},"name":{},"text":{"3":{},"26":{},"31":{},"33":{},"52":{},"60":{},"61":{},"66":{},"80":{},"83":{},"97":{},"137":{},"184":{},"223":{},"277":{}},"component":{}}],["switchifempty(mono.error(new",{"_index":6291,"title":{},"name":{},"text":{"143":{}},"component":{}}],["symbol",{"_index":6423,"title":{},"name":{},"text":{"147":{}},"component":{}}],["symlink",{"_index":1034,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["synaps",{"_index":943,"title":{"197":{},"204":{},"197-1":{},"197-2":{},"198-5":{},"198-6":{},"199-5":{},"199-9":{},"199-13":{},"200-3":{},"200-4":{},"200-5":{},"201-1":{},"203-37":{},"205-1":{},"205-3":{},"208-5":{},"208-6":{},"209-6":{},"209-7":{},"211-5":{},"211-6":{},"218-2":{},"218-8":{},"221-1":{}},"name":{"222":{}},"text":{"7":{},"14":{},"16":{},"197":{},"198":{},"199":{},"200":{},"201":{},"203":{},"204":{},"205":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"221":{},"223":{}},"component":{"197":{},"198":{},"199":{},"200":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{}}}],["synapse.auth.en",{"_index":7333,"title":{"203-22":{}},"name":{},"text":{"201":{},"212":{}},"component":{}}],["synapse.auth.sensit",{"_index":7357,"title":{"203-24":{}},"name":{},"text":{},"component":{}}],["synapse.auth.token",{"_index":7356,"title":{"203-23":{}},"name":{},"text":{"205":{}},"component":{}}],["synapse.axon",{"_index":7343,"title":{"203-7":{},"203-8":{},"203-9":{},"203-10":{},"203-26":{},"203-27":{},"203-28":{},"203-29":{}},"name":{},"text":{"212":{}},"component":{}}],["synapse.axonserver.serv",{"_index":7388,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse.axonserver.tlsen",{"_index":7390,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse.axonserver.trustmanagerfil",{"_index":7392,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse.certif",{"_index":7342,"title":{"203-5":{}},"name":{},"text":{"212":{}},"component":{}}],["synapse.cli",{"_index":7348,"title":{"203-11":{},"203-13":{}},"name":{},"text":{},"component":{}}],["synapse.compon",{"_index":7349,"title":{"203-12":{}},"name":{},"text":{},"component":{}}],["synapse.connect",{"_index":7350,"title":{"203-14":{}},"name":{},"text":{},"component":{}}],["synapse.default",{"_index":7351,"title":{"203-15":{}},"name":{},"text":{},"component":{}}],["synapse.ev",{"_index":7367,"title":{"203-41":{},"203-51":{},"203-52":{},"203-53":{},"203-54":{},"203-55":{},"203-56":{},"203-57":{},"203-58":{}},"name":{},"text":{"217":{}},"component":{}}],["synapse.event.streaming.buff",{"_index":7366,"title":{"203-40":{}},"name":{},"text":{},"component":{}}],["synapse.http",{"_index":7352,"title":{"203-17":{}},"name":{},"text":{},"component":{}}],["synapse.http.handlers.event.list.cont",{"_index":7507,"title":{},"name":{},"text":{"212":{}},"component":{}}],["synapse.i",{"_index":7514,"title":{},"name":{},"text":{"212":{}},"component":{}}],["synapse.internal.cli",{"_index":7354,"title":{"203-20":{}},"name":{},"text":{},"component":{}}],["synapse.internal.compon",{"_index":7355,"title":{"203-21":{}},"name":{},"text":{},"component":{}}],["synapse.internal.context",{"_index":7353,"title":{"203-19":{}},"name":{},"text":{},"component":{}}],["synapse.jar",{"_index":7274,"title":{},"name":{},"text":{"198":{},"205":{}},"component":{}}],["synapse.mv.db",{"_index":7552,"title":{},"name":{},"text":{"223":{}},"component":{}}],["synapse.security.cor",{"_index":7365,"title":{"203-38":{}},"name":{},"text":{},"component":{}}],["synapse.serv",{"_index":7340,"title":{"203-3":{}},"name":{},"text":{"205":{},"212":{}},"component":{}}],["synapse.server.key",{"_index":7364,"title":{"203-34":{},"203-35":{},"203-36":{}},"name":{},"text":{},"component":{}}],["synapse.server.tl",{"_index":7363,"title":{"203-33":{}},"name":{},"text":{},"component":{}}],["synapse.storage.compon",{"_index":7371,"title":{"203-45":{}},"name":{},"text":{},"component":{}}],["synapse.storage.context",{"_index":7370,"title":{"203-44":{}},"name":{},"text":{"223":{}},"component":{}}],["synapse.storage.initi",{"_index":7374,"title":{"203-48":{}},"name":{},"text":{},"component":{}}],["synapse.storage.min",{"_index":7372,"title":{"203-46":{}},"name":{},"text":{},"component":{}}],["synapse.storage.subscription.retri",{"_index":7376,"title":{"203-49":{}},"name":{},"text":{},"component":{}}],["synapse.storage.token",{"_index":7373,"title":{"203-47":{}},"name":{},"text":{"223":{}},"component":{}}],["synapse.storage.typ",{"_index":7369,"title":{"203-43":{}},"name":{},"text":{"217":{},"223":{}},"component":{}}],["synapse.storage.type=axonserv",{"_index":7540,"title":{},"name":{},"text":{"217":{},"223":{}},"component":{}}],["synapse.storage.type=loc",{"_index":7550,"title":{},"name":{},"text":{"223":{}},"component":{}}],["synapse.synaps",{"_index":7362,"title":{"203-31":{}},"name":{},"text":{},"component":{}}],["synapse.us",{"_index":7341,"title":{"203-4":{}},"name":{},"text":{"205":{}},"component":{}}],["synapse.zip",{"_index":7273,"title":{},"name":{},"text":{"198":{},"205":{}},"component":{}}],["synapse_auth_en",{"_index":7413,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_auth_sensitivedataencryptionkey",{"_index":7415,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_auth_token",{"_index":7414,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserver_maxmessages",{"_index":7397,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserver_serverlist",{"_index":7394,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserver_tlsen",{"_index":7416,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserver_trustmanagerfil",{"_index":7417,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserverhttp_clientsforcomponentendpointspath",{"_index":7400,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserverhttp_port",{"_index":7399,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserverhttp_tlsen",{"_index":7418,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_axonserverhttp_trustmanagerfil",{"_index":7419,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_certificatechain",{"_index":7393,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_clientcomponentnam",{"_index":7404,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_clientid",{"_index":7402,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_componentnam",{"_index":7403,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_connectiontimeout",{"_index":7405,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_defaultcontext",{"_index":7406,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_event_streaming_buffers",{"_index":7427,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_consistenthashingfunct",{"_index":7452,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_en",{"_index":7437,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_handlerrunintertia",{"_index":7446,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_synapsediscovery_pollinterv",{"_index":7441,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_synapsediscovery_retryinterv",{"_index":7440,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_synapsediscovery_timeout",{"_index":7438,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_websocket_platformendpoint",{"_index":7444,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_balancing_websocket_reconnectinterv",{"_index":7445,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_eventhandler_subscriptionretryinterv",{"_index":7428,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_httpendpoint",{"_index":7407,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_internal_clientid",{"_index":7409,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_internal_componentnam",{"_index":7412,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_internal_context",{"_index":7408,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_security_corsallowedorigin",{"_index":7426,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_server_keystorefil",{"_index":7423,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_server_keystorepassword",{"_index":7424,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_server_keystoretyp",{"_index":7425,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_server_tlsen",{"_index":7421,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_serverlist",{"_index":7389,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_componentnam",{"_index":7432,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_context",{"_index":7431,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_initialsubscription_retryinterv",{"_index":7435,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_mintokenoffset",{"_index":7433,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_subscription_retryinterv",{"_index":7436,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_token",{"_index":7434,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_storage_typ",{"_index":7430,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_synapsehandlershttp_trustmanagerfil",{"_index":7420,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse_usetl",{"_index":7391,"title":{},"name":{},"text":{"203":{}},"component":{}}],["synapse’",{"_index":7275,"title":{},"name":{},"text":{"198":{},"199":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{}},"component":{}}],["sync",{"_index":1002,"title":{},"name":{},"text":{"8":{},"172":{},"267":{}},"component":{}}],["synchron",{"_index":1731,"title":{},"name":{},"text":{"27":{},"31":{},"52":{},"54":{},"61":{},"84":{},"131":{},"138":{},"140":{},"151":{},"156":{},"163":{},"165":{}},"component":{}}],["synonym",{"_index":3121,"title":{},"name":{},"text":{"56":{}},"component":{}}],["syntax",{"_index":1140,"title":{"13-1":{}},"name":{},"text":{"151":{}},"component":{}}],["system",{"_index":583,"title":{"7":{},"172":{},"7-2":{},"258-1":{},"278-2":{}},"name":{"7":{}},"text":{"3":{},"5":{},"7":{},"8":{},"17":{},"19":{},"23":{},"24":{},"31":{},"35":{},"43":{},"49":{},"50":{},"52":{},"56":{},"57":{},"66":{},"68":{},"70":{},"71":{},"75":{},"90":{},"91":{},"93":{},"101":{},"105":{},"112":{},"117":{},"121":{},"126":{},"137":{},"144":{},"151":{},"158":{},"161":{},"162":{},"172":{},"174":{},"176":{},"178":{},"183":{},"184":{},"185":{},"196":{},"198":{},"199":{},"200":{},"203":{},"224":{},"227":{},"232":{},"233":{},"236":{},"237":{},"239":{},"240":{},"243":{},"254":{},"255":{},"258":{},"261":{},"262":{},"263":{},"266":{},"267":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["system.out::println",{"_index":3103,"title":{},"name":{},"text":{"56":{}},"component":{}}],["systemat",{"_index":4284,"title":{},"name":{},"text":{"61":{},"137":{}},"component":{}}],["systemctl",{"_index":7258,"title":{},"name":{},"text":{"196":{}},"component":{}}],["system’",{"_index":7594,"title":{},"name":{},"text":{"240":{},"266":{},"278":{}},"component":{}}],["t",{"_index":6129,"title":{},"name":{},"text":{"139":{},"146":{},"160":{},"161":{},"167":{},"171":{},"277":{},"282":{}},"component":{}}],["tab",{"_index":774,"title":{"13":{},"228":{},"236":{},"239":{},"240":{},"241":{},"242":{},"243":{},"13-2":{},"270-1":{},"270-2":{},"270-13":{},"270-22":{},"271-2":{},"271-3":{},"271-4":{},"271-5":{},"271-6":{}},"name":{"13":{},"228":{},"236":{},"239":{},"240":{},"241":{},"242":{},"243":{}},"text":{"5":{},"13":{},"52":{},"163":{},"198":{},"199":{},"228":{},"229":{},"232":{},"235":{},"236":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"245":{},"254":{},"256":{},"262":{},"270":{},"271":{},"273":{},"274":{},"281":{}},"component":{}}],["tab.png[alt=\"screenshot",{"_index":7746,"title":{},"name":{},"text":{"271":{}},"component":{}}],["tabl",{"_index":899,"title":{},"name":{},"text":{"7":{},"26":{},"33":{},"35":{},"49":{},"52":{},"60":{},"79":{},"80":{},"97":{},"135":{},"138":{},"145":{},"154":{},"164":{},"171":{},"229":{},"232":{},"236":{},"242":{},"243":{},"254":{},"256":{},"270":{},"280":{}},"component":{}}],["tablefactori",{"_index":2346,"title":{},"name":{},"text":{"35":{}},"component":{}}],["tab’",{"_index":7701,"title":{},"name":{},"text":{"270":{}},"component":{}}],["tag",{"_index":415,"title":{"150":{},"50-5":{},"50-6":{},"50-7":{},"50-8":{},"150-1":{},"150-3":{},"150-4":{}},"name":{"150":{}},"text":{"3":{},"24":{},"50":{},"60":{},"61":{},"117":{},"130":{},"137":{},"145":{},"150":{},"165":{},"172":{},"183":{},"184":{},"276":{}},"component":{}}],["tag.of(s.getkey",{"_index":2860,"title":{},"name":{},"text":{"50":{}},"component":{}}],["tag/dimens",{"_index":2843,"title":{},"name":{},"text":{"50":{}},"component":{}}],["tags.of",{"_index":2870,"title":{},"name":{},"text":{"50":{}},"component":{}}],["tags.of(tagsutil.payload_type_tag",{"_index":2856,"title":{},"name":{},"text":{"50":{}},"component":{}}],["tagsconfigur",{"_index":6481,"title":{},"name":{},"text":{"150":{}},"component":{}}],["tagsconfiguration(tag",{"_index":6483,"title":{},"name":{},"text":{"150":{}},"component":{}}],["tagsutil.payload_type_tag",{"_index":2871,"title":{},"name":{},"text":{"50":{}},"component":{}}],["tagsutil.processor_name_tag",{"_index":2872,"title":{},"name":{},"text":{"50":{}},"component":{}}],["tail",{"_index":4243,"title":{},"name":{},"text":{"61":{},"80":{},"254":{}},"component":{}}],["tailor",{"_index":333,"title":{},"name":{},"text":{"3":{},"61":{},"143":{},"184":{}},"component":{}}],["taint",{"_index":7676,"title":{},"name":{},"text":{"267":{},"271":{}},"component":{}}],["take",{"_index":266,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"11":{},"24":{},"27":{},"28":{},"31":{},"32":{},"33":{},"38":{},"44":{},"52":{},"56":{},"57":{},"60":{},"61":{},"63":{},"65":{},"66":{},"70":{},"71":{},"72":{},"74":{},"77":{},"79":{},"80":{},"81":{},"91":{},"96":{},"107":{},"121":{},"125":{},"126":{},"127":{},"130":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"151":{},"158":{},"184":{},"198":{},"199":{},"203":{},"216":{},"218":{},"236":{},"241":{},"242":{},"251":{},"254":{},"255":{},"256":{},"262":{},"267":{},"270":{},"271":{},"273":{},"274":{}},"component":{}}],["take(100",{"_index":3144,"title":{},"name":{},"text":{"56":{}},"component":{}}],["taken",{"_index":1813,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"32":{},"38":{},"46":{},"60":{},"61":{},"63":{},"68":{},"69":{},"78":{},"79":{},"80":{},"144":{},"244":{},"256":{},"270":{},"271":{}},"component":{}}],["takeuntil(messag",{"_index":3145,"title":{},"name":{},"text":{"56":{}},"component":{}}],["talk",{"_index":503,"title":{},"name":{},"text":{"3":{},"24":{},"144":{},"184":{}},"component":{}}],["tan",{"_index":7587,"title":{},"name":{},"text":{"238":{}},"component":{}}],["tap",{"_index":5230,"title":{},"name":{},"text":{"80":{}},"component":{}}],["target",{"_index":456,"title":{},"name":{},"text":{"3":{},"28":{},"31":{},"60":{},"66":{},"75":{},"142":{},"154":{},"158":{},"171":{},"184":{},"277":{}},"component":{}}],["target({elementtype.method",{"_index":5410,"title":{},"name":{},"text":{"96":{}},"component":{}}],["target_typ",{"_index":2500,"title":{},"name":{},"text":{"38":{}},"component":{}}],["targetaggregateidentifi",{"_index":1769,"title":{},"name":{},"text":{"28":{},"31":{},"278":{}},"component":{}}],["targetaggregatevers",{"_index":1800,"title":{},"name":{},"text":{"28":{},"76":{},"101":{}},"component":{}}],["targetcontextresolv",{"_index":3748,"title":{},"name":{},"text":{"60":{},"146":{}},"component":{}}],["targetcontextresolver(targetcontextresolv",{"_index":2133,"title":{},"name":{},"text":{"31":{}},"component":{}}],["targetport",{"_index":664,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["targettenantresolv",{"_index":5740,"title":{},"name":{},"text":{"117":{}},"component":{}}],["task",{"_index":1187,"title":{},"name":{},"text":{"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"31":{},"32":{},"33":{},"41":{},"46":{},"52":{},"58":{},"60":{},"80":{},"117":{},"126":{},"137":{},"142":{},"144":{},"172":{},"177":{},"185":{},"205":{},"261":{},"270":{},"272":{},"277":{},"278":{}},"component":{}}],["tast",{"_index":7721,"title":{},"name":{},"text":{"270":{}},"component":{}}],["tcp",{"_index":627,"title":{},"name":{},"text":{"3":{},"101":{},"184":{}},"component":{}}],["teach",{"_index":916,"title":{},"name":{},"text":{"7":{}},"component":{}}],["team",{"_index":852,"title":{"259":{}},"name":{"259":{}},"text":{"5":{},"79":{},"94":{},"96":{},"141":{},"170":{},"178":{},"196":{},"234":{},"237":{},"245":{},"258":{},"261":{}},"component":{}}],["technic",{"_index":957,"title":{},"name":{},"text":{"7":{},"10":{},"15":{},"21":{},"26":{},"42":{},"79":{},"80":{},"81":{},"214":{}},"component":{}}],["techniqu",{"_index":6528,"title":{},"name":{},"text":{"151":{},"278":{}},"component":{}}],["technolog",{"_index":1176,"title":{},"name":{},"text":{"14":{},"224":{},"227":{},"233":{},"234":{},"247":{},"261":{},"276":{}},"component":{}}],["tediou",{"_index":4523,"title":{},"name":{},"text":{"66":{},"272":{}},"component":{}}],["telemetri",{"_index":67,"title":{},"name":{},"text":{"1":{},"23":{},"60":{},"261":{},"273":{}},"component":{}}],["tell",{"_index":443,"title":{},"name":{},"text":{"3":{},"24":{},"35":{},"38":{},"62":{},"66":{},"71":{},"75":{},"77":{},"78":{},"80":{},"117":{},"137":{},"161":{},"165":{},"167":{},"184":{},"198":{},"217":{},"247":{},"253":{}},"component":{}}],["templat",{"_index":616,"title":{"170":{},"141-4":{}},"name":{"170":{}},"text":{"3":{},"49":{},"141":{},"160":{},"167":{},"170":{},"174":{},"184":{},"185":{},"199":{}},"component":{}}],["template.yml",{"_index":6172,"title":{},"name":{},"text":{"141":{},"170":{}},"component":{}}],["temporari",{"_index":6023,"title":{"137-19":{}},"name":{},"text":{},"component":{}}],["temporarili",{"_index":1292,"title":{},"name":{},"text":{"23":{},"90":{},"137":{},"143":{},"147":{},"171":{}},"component":{}}],["temurin",{"_index":249,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["temurin:11",{"_index":256,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["ten",{"_index":7699,"title":{},"name":{},"text":{"270":{}},"component":{}}],["tenanc",{"_index":1229,"title":{"23-29":{},"23-30":{},"117-13":{},"146-5":{}},"name":{},"text":{"23":{},"117":{},"119":{},"146":{},"185":{}},"component":{}}],["tenancy.enabled=fals",{"_index":5801,"title":{},"name":{},"text":{"118":{}},"component":{}}],["tenancy.us",{"_index":5737,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenant",{"_index":3457,"title":{"120":{},"117-1":{},"117-2":{},"117-3":{},"117-5":{},"117-14":{}},"name":{"120":{}},"text":{"60":{},"117":{},"119":{},"120":{},"146":{},"185":{}},"component":{}}],["tenantcommandsegmentfactori",{"_index":5720,"title":{"117-15":{}},"name":{},"text":{},"component":{}}],["tenantconfiguration.tenant_correlation_key",{"_index":5733,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantconnectpred",{"_index":5729,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantdatasourceresolv",{"_index":5744,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantdescriptor",{"_index":5796,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantdescriptor.tenantid().startswith(\"ten",{"_index":5797,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantdescriptor.tenantwithid",{"_index":5742,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantdescriptor.tenantwithid(tenantnam",{"_index":5790,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenanteventprocessorcontrolsegmentfactori",{"_index":5724,"title":{"117-19":{}},"name":{},"text":{},"component":{}}],["tenanteventschedulersegmentfactori",{"_index":5723,"title":{"117-18":{}},"name":{},"text":{},"component":{}}],["tenanteventsegmentfactori",{"_index":5722,"title":{"117-17":{}},"name":{},"text":{},"component":{}}],["tenantfilterpred",{"_index":5730,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantid",{"_index":5767,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantquerysegmentfactori",{"_index":5721,"title":{"117-16":{}},"name":{},"text":{},"component":{}}],["tenantwrappedtransactionmanag",{"_index":5787,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tenantwrappedtransactionmanager.getcurrentten",{"_index":5750,"title":{},"name":{},"text":{"117":{}},"component":{}}],["tend",{"_index":2515,"title":{},"name":{},"text":{"38":{},"71":{}},"component":{}}],["tep",{"_index":5005,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tepconfig",{"_index":5014,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tep’",{"_index":5167,"title":{},"name":{},"text":{"80":{}},"component":{}}],["term",{"_index":1442,"title":{},"name":{},"text":{"24":{},"33":{},"35":{},"66":{},"80":{},"104":{},"107":{},"135":{},"137":{},"142":{}},"component":{}}],["termin",{"_index":3148,"title":{},"name":{},"text":{"56":{},"60":{},"143":{},"180":{},"198":{},"205":{},"274":{},"276":{},"280":{}},"component":{}}],["terminolog",{"_index":2906,"title":{"52-4":{}},"name":{},"text":{"137":{}},"component":{}}],["terraform",{"_index":7235,"title":{},"name":{},"text":{"196":{}},"component":{}}],["test",{"_index":516,"title":{"67":{},"87":{},"282":{},"23-5":{},"23-26":{},"66-1":{},"66-2":{},"66-4":{},"282-1":{},"282-4":{},"282-5":{}},"name":{"87":{},"282":{}},"text":{"3":{},"22":{},"23":{},"28":{},"31":{},"32":{},"35":{},"57":{},"60":{},"61":{},"66":{},"67":{},"68":{},"79":{},"80":{},"83":{},"86":{},"87":{},"90":{},"102":{},"114":{},"116":{},"144":{},"165":{},"184":{},"199":{},"231":{},"267":{},"269":{},"275":{},"277":{},"280":{},"282":{}},"component":{}}],["test:8090",{"_index":6796,"title":{},"name":{},"text":{"165":{}},"component":{}}],["test:8090/realms/test",{"_index":6797,"title":{},"name":{},"text":{"165":{}},"component":{}}],["testabl",{"_index":5328,"title":{},"name":{},"text":{"85":{}},"component":{}}],["testament",{"_index":7560,"title":{},"name":{},"text":{"227":{},"237":{}},"component":{}}],["testcardexpiredafterthirtyoneday",{"_index":5337,"title":{},"name":{},"text":{"87":{}},"component":{}}],["testcardnotexpiringifnothingleft",{"_index":5307,"title":{},"name":{},"text":{"83":{}},"component":{}}],["testclass",{"_index":3506,"title":{},"name":{},"text":{"60":{}},"component":{}}],["testexecutor",{"_index":3572,"title":{},"name":{},"text":{"60":{},"66":{}},"component":{}}],["testfixtur",{"_index":5334,"title":{},"name":{},"text":{"87":{}},"component":{}}],["testfixture.givennoprioract",{"_index":5308,"title":{},"name":{},"text":{"83":{},"87":{}},"component":{}}],["testng",{"_index":4439,"title":{},"name":{},"text":{"66":{}},"component":{}}],["testredeemcardcommand",{"_index":4449,"title":{},"name":{},"text":{"66":{}},"component":{}}],["testsubject",{"_index":4458,"title":{},"name":{},"text":{"66":{}},"component":{}}],["testsubject.getappliedevents().s",{"_index":4460,"title":{},"name":{},"text":{"66":{}},"component":{}}],["testwithmatch",{"_index":4550,"title":{},"name":{},"text":{"66":{}},"component":{}}],["text",{"_index":1125,"title":{},"name":{},"text":{"10":{},"56":{},"171":{},"214":{},"270":{},"280":{}},"component":{}}],["text/plain;charset=utf",{"_index":8001,"title":{},"name":{},"text":{"280":{}},"component":{}}],["th",{"_index":7592,"title":{},"name":{},"text":{"239":{}},"component":{}}],["thank",{"_index":3225,"title":{},"name":{},"text":{"60":{},"61":{},"262":{},"274":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["tharoldd",{"_index":3235,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["that’",{"_index":1339,"title":{},"name":{},"text":{"24":{},"33":{},"89":{},"151":{},"169":{},"180":{}},"component":{}}],["the_${axon_ee_server_home}/data/default_",{"_index":6547,"title":{},"name":{},"text":{"155":{}},"component":{}}],["the`@revis",{"_index":4662,"title":{},"name":{},"text":{"71":{}},"component":{}}],["the`message`seri",{"_index":1373,"title":{},"name":{},"text":{"24":{}},"component":{}}],["the`segment#mergeablesegmentid",{"_index":5210,"title":{},"name":{},"text":{"80":{}},"component":{}}],["theme",{"_index":6039,"title":{},"name":{},"text":{"137":{}},"component":{}}],["themselv",{"_index":4396,"title":{},"name":{},"text":{"63":{},"65":{},"71":{},"80":{},"139":{},"218":{}},"component":{}}],["thencompose(activetransform",{"_index":6365,"title":{},"name":{},"text":{"144":{}},"component":{}}],["thencompose(activetransformation::startappli",{"_index":6367,"title":{},"name":{},"text":{"144":{}},"component":{}}],["thenreturn(result.success",{"_index":6294,"title":{},"name":{},"text":{"143":{}},"component":{}}],["thenrun",{"_index":6273,"title":{},"name":{},"text":{"143":{}},"component":{}}],["thenrun(eventprocessor::resettoken",{"_index":6272,"title":{},"name":{},"text":{"143":{}},"component":{}}],["theoret",{"_index":1184,"title":{},"name":{},"text":{"15":{},"21":{},"35":{},"98":{}},"component":{}}],["therebi",{"_index":7548,"title":{},"name":{},"text":{"218":{}},"component":{}}],["therefor",{"_index":809,"title":{},"name":{},"text":{"5":{},"8":{},"24":{},"25":{},"28":{},"35":{},"44":{},"52":{},"68":{},"71":{},"80":{},"81":{},"85":{},"96":{},"141":{},"150":{},"170":{},"180":{},"196":{},"198":{},"199":{},"231":{},"232":{}},"component":{}}],["thereof",{"_index":7619,"title":{},"name":{},"text":{"254":{}},"component":{}}],["thereon",{"_index":6161,"title":{},"name":{},"text":{"141":{}},"component":{}}],["there’",{"_index":2929,"title":{},"name":{},"text":{"52":{},"79":{},"90":{},"137":{}},"component":{}}],["they’r",{"_index":1188,"title":{},"name":{},"text":{"15":{},"21":{},"61":{},"91":{},"169":{},"199":{}},"component":{}}],["they’v",{"_index":5047,"title":{},"name":{},"text":{"80":{}},"component":{}}],["thick",{"_index":804,"title":{},"name":{},"text":{"5":{}},"component":{}}],["thicker",{"_index":7734,"title":{},"name":{},"text":{"270":{}},"component":{}}],["thing",{"_index":561,"title":{},"name":{},"text":{"3":{},"24":{},"25":{},"26":{},"33":{},"52":{},"56":{},"66":{},"80":{},"83":{},"97":{},"126":{},"169":{},"184":{},"243":{},"261":{},"266":{},"267":{},"270":{},"271":{},"272":{},"277":{},"278":{},"282":{}},"component":{}}],["think",{"_index":3177,"title":{},"name":{},"text":{"57":{},"94":{}},"component":{}}],["thinner",{"_index":7735,"title":{},"name":{},"text":{"270":{}},"component":{}}],["third",{"_index":11,"title":{},"name":{},"text":{"1":{},"8":{},"35":{},"55":{},"56":{},"66":{},"80":{},"122":{},"137":{},"197":{},"221":{},"254":{},"278":{}},"component":{}}],["thirdev",{"_index":4541,"title":{},"name":{},"text":{"66":{}},"component":{}}],["thirti",{"_index":2220,"title":{},"name":{},"text":{"33":{},"122":{}},"component":{}}],["this.amount",{"_index":1790,"title":{},"name":{},"text":{"28":{}},"component":{}}],["this.bikeid",{"_index":7978,"title":{},"name":{},"text":{"278":{}},"component":{}}],["this.bikerentaldatagener",{"_index":7987,"title":{},"name":{},"text":{"278":{}},"component":{}}],["this.bikestatusrepositori",{"_index":7861,"title":{},"name":{},"text":{"277":{}},"component":{}}],["this.cardid",{"_index":1789,"title":{},"name":{},"text":{"28":{}},"component":{}}],["this.cardsummaryid",{"_index":3160,"title":{},"name":{},"text":{"57":{}},"component":{}}],["this.commandgateway",{"_index":7985,"title":{},"name":{},"text":{"278":{}},"component":{}}],["this.config",{"_index":5361,"title":{},"name":{},"text":{"91":{}},"component":{}}],["this.deadlinemanag",{"_index":5504,"title":{},"name":{},"text":{"103":{}},"component":{}}],["this.entitymanag",{"_index":2304,"title":{},"name":{},"text":{"35":{}},"component":{}}],["this.getclass",{"_index":2426,"title":{},"name":{},"text":{"37":{},"57":{}},"component":{}}],["this.isavail",{"_index":7980,"title":{},"name":{},"text":{"278":{}},"component":{}}],["this.multitenantdeadletterprocessor",{"_index":5765,"title":{},"name":{},"text":{"117":{}},"component":{}}],["this.otherst",{"_index":4695,"title":{},"name":{},"text":{"71":{}},"component":{}}],["this.querygateway",{"_index":7986,"title":{},"name":{},"text":{"278":{}},"component":{}}],["this.remainingvalu",{"_index":4830,"title":{},"name":{},"text":{"78":{}},"component":{}}],["this.somest",{"_index":4693,"title":{},"name":{},"text":{"71":{}},"component":{}}],["this.state.equals(command.getst",{"_index":2670,"title":{},"name":{},"text":{"44":{}},"component":{}}],["this.transactionid",{"_index":1794,"title":{},"name":{},"text":{"28":{},"77":{}},"component":{}}],["this.transactionvalu",{"_index":4786,"title":{},"name":{},"text":{"77":{}},"component":{}}],["this.usernameprovid",{"_index":2610,"title":{},"name":{},"text":{"43":{}},"component":{}}],["thorough",{"_index":1806,"title":{},"name":{},"text":{"28":{},"61":{}},"component":{}}],["thoroughli",{"_index":1239,"title":{},"name":{},"text":{"23":{},"75":{}},"component":{}}],["those",{"_index":732,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"15":{},"21":{},"24":{},"26":{},"28":{},"29":{},"31":{},"32":{},"38":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"74":{},"79":{},"80":{},"105":{},"106":{},"122":{},"124":{},"139":{},"144":{},"149":{},"150":{},"156":{},"205":{},"221":{},"235":{},"243":{},"256":{},"261":{},"268":{},"270":{},"275":{},"277":{},"278":{}},"component":{}}],["though",{"_index":2577,"title":{},"name":{},"text":{"42":{},"61":{},"63":{},"80":{},"151":{},"156":{},"213":{},"216":{},"277":{}},"component":{}}],["thousand",{"_index":3133,"title":{},"name":{},"text":{"56":{},"90":{}},"component":{}}],["thread",{"_index":1713,"title":{"80-49":{},"80-50":{},"80-54":{}},"name":{},"text":{"27":{},"31":{},"33":{},"35":{},"42":{},"44":{},"46":{},"50":{},"51":{},"54":{},"60":{},"61":{},"70":{},"71":{},"79":{},"80":{},"81":{},"92":{},"104":{},"107":{},"129":{},"137":{},"138":{},"142":{},"158":{},"172":{},"178":{},"254":{},"255":{},"256":{},"270":{},"277":{}},"component":{}}],["threadcountconfigurermodul",{"_index":5150,"title":{},"name":{},"text":{"80":{}},"component":{}}],["threadfactori",{"_index":5145,"title":{},"name":{},"text":{"80":{}},"component":{}}],["threadnumb",{"_index":5188,"title":{},"name":{},"text":{"80":{}},"component":{}}],["threadpoolexecutor",{"_index":4656,"title":{},"name":{},"text":{"71":{}},"component":{}}],["three",{"_index":826,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"24":{},"26":{},"29":{},"31":{},"35":{},"50":{},"58":{},"61":{},"63":{},"65":{},"66":{},"68":{},"80":{},"122":{},"129":{},"135":{},"137":{},"139":{},"140":{},"151":{},"162":{},"172":{},"185":{},"196":{},"199":{},"201":{},"209":{},"210":{},"214":{},"215":{},"241":{},"242":{},"243":{},"244":{},"245":{},"255":{},"256":{},"270":{},"274":{},"277":{},"280":{}},"component":{}}],["threshold",{"_index":4648,"title":{},"name":{},"text":{"71":{},"79":{},"80":{},"151":{},"156":{},"172":{},"176":{},"241":{},"256":{},"266":{},"271":{}},"component":{}}],["threw",{"_index":1966,"title":{},"name":{},"text":{"31":{},"56":{},"61":{}},"component":{}}],["through",{"_index":425,"title":{"70-2":{},"158-2":{}},"name":{},"text":{"3":{},"7":{},"23":{},"24":{},"27":{},"28":{},"31":{},"33":{},"35":{},"36":{},"38":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"70":{},"71":{},"77":{},"79":{},"80":{},"86":{},"90":{},"101":{},"104":{},"105":{},"107":{},"117":{},"122":{},"123":{},"126":{},"127":{},"131":{},"137":{},"138":{},"142":{},"143":{},"144":{},"146":{},"147":{},"150":{},"151":{},"158":{},"162":{},"167":{},"171":{},"175":{},"184":{},"185":{},"195":{},"199":{},"201":{},"208":{},"209":{},"211":{},"212":{},"213":{},"214":{},"216":{},"224":{},"233":{},"234":{},"236":{},"238":{},"240":{},"244":{},"261":{},"262":{},"265":{},"268":{},"269":{},"270":{},"271":{},"274":{},"276":{},"277":{},"278":{},"279":{},"280":{}},"component":{}}],["throughout",{"_index":1395,"title":{},"name":{},"text":{"24":{},"48":{},"79":{},"80":{},"122":{},"266":{}},"component":{}}],["throughput",{"_index":139,"title":{},"name":{},"text":{"2":{},"5":{},"31":{},"80":{},"256":{},"270":{}},"component":{}}],["throw",{"_index":1752,"title":{},"name":{},"text":{"27":{},"28":{},"31":{},"40":{},"41":{},"44":{},"46":{},"60":{},"61":{},"66":{},"69":{},"76":{},"77":{},"78":{},"79":{},"90":{},"100":{},"142":{},"278":{}},"component":{}}],["throwabl",{"_index":1683,"title":{},"name":{},"text":{"27":{},"46":{},"51":{},"79":{},"88":{},"109":{}},"component":{}}],["thrown",{"_index":1669,"title":{},"name":{},"text":{"27":{},"28":{},"31":{},"35":{},"41":{},"44":{},"56":{},"60":{},"61":{},"73":{},"76":{},"77":{},"79":{},"251":{}},"component":{}}],["thu",{"_index":1032,"title":{},"name":{},"text":{"8":{},"23":{},"24":{},"27":{},"28":{},"31":{},"32":{},"35":{},"38":{},"41":{},"44":{},"50":{},"52":{},"61":{},"63":{},"70":{},"73":{},"75":{},"77":{},"79":{},"80":{},"81":{},"104":{},"106":{},"111":{},"121":{},"122":{},"126":{},"128":{},"129":{},"131":{},"141":{},"156":{},"185":{},"254":{},"275":{},"277":{},"278":{},"282":{}},"component":{}}],["ti",{"_index":2400,"title":{},"name":{},"text":{"36":{},"61":{},"104":{}},"component":{}}],["tie",{"_index":2653,"title":{},"name":{},"text":{"44":{},"71":{},"104":{}},"component":{}}],["tier",{"_index":6024,"title":{"151":{},"137-27":{},"151-2":{},"151-5":{},"151-17":{}},"name":{"151":{}},"text":{"137":{},"138":{},"139":{},"145":{},"151":{},"245":{},"270":{},"271":{}},"component":{}}],["till",{"_index":3977,"title":{},"name":{},"text":{"61":{}},"component":{}}],["time",{"_index":114,"title":{"124":{},"195":{},"234":{},"5-6":{},"23-33":{},"32-3":{},"151-10":{},"270-12":{},"270-35":{},"270-36":{}},"name":{"195":{}},"text":{"2":{},"3":{},"5":{},"8":{},"9":{},"11":{},"23":{},"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"38":{},"40":{},"45":{},"46":{},"50":{},"51":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"68":{},"71":{},"77":{},"79":{},"80":{},"86":{},"87":{},"88":{},"91":{},"93":{},"97":{},"103":{},"106":{},"122":{},"123":{},"125":{},"135":{},"137":{},"138":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"151":{},"154":{},"163":{},"172":{},"176":{},"180":{},"184":{},"191":{},"195":{},"196":{},"203":{},"212":{},"234":{},"236":{},"238":{},"239":{},"240":{},"241":{},"242":{},"244":{},"245":{},"247":{},"251":{},"253":{},"254":{},"255":{},"256":{},"260":{},"264":{},"267":{},"270":{},"271":{},"273":{},"274":{},"276":{},"277":{},"280":{},"282":{}},"component":{}}],["time=10d",{"_index":6530,"title":{},"name":{},"text":{"151":{}},"component":{}}],["timeout",{"_index":1740,"title":{"203-14":{}},"name":{},"text":{"27":{},"31":{},"54":{},"56":{},"60":{},"61":{},"80":{},"108":{},"142":{},"172":{},"203":{},"212":{},"255":{}},"component":{}}],["timeout(valu",{"_index":1976,"title":{},"name":{},"text":{"31":{}},"component":{}}],["timeoutexcept",{"_index":1968,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{}}],["timeoutmilli",{"_index":5519,"title":{},"name":{},"text":{"104":{}},"component":{}}],["timeoutsecond",{"_index":644,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["timepublishedevent(genericeventmessage.clock.inst",{"_index":2200,"title":{},"name":{},"text":{"32":{}},"component":{}}],["timer",{"_index":2823,"title":{"255-1":{}},"name":{},"text":{"50":{},"255":{}},"component":{}}],["timespan",{"_index":3155,"title":{},"name":{},"text":{"56":{}},"component":{}}],["timestamp",{"_index":2201,"title":{},"name":{},"text":{"32":{},"38":{},"40":{},"42":{},"45":{},"50":{},"61":{},"66":{},"68":{},"80":{},"97":{},"114":{},"169":{},"191":{},"192":{},"195":{}},"component":{}}],["timeunit",{"_index":1960,"title":{},"name":{},"text":{"31":{},"80":{}},"component":{}}],["timeunit.millisecond",{"_index":1738,"title":{},"name":{},"text":{"27":{},"80":{}},"component":{}}],["timeunit.second",{"_index":1977,"title":{},"name":{},"text":{"31":{},"56":{}},"component":{}}],["timezon",{"_index":5431,"title":{},"name":{},"text":{"97":{},"192":{}},"component":{}}],["timofry",{"_index":3851,"title":{},"name":{},"text":{"61":{}},"component":{}}],["timtebeek",{"_index":3228,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["tip",{"_index":2647,"title":{"125":{}},"name":{},"text":{"44":{},"63":{},"68":{}},"component":{}}],["titl",{"_index":7218,"title":{},"name":{},"text":{"192":{},"229":{}},"component":{}}],["tl",{"_index":6021,"title":{"137-10":{},"203-4":{},"203-25":{},"203-30":{},"203-32":{}},"name":{},"text":{"137":{},"138":{},"161":{},"163":{},"167":{},"169":{},"203":{},"205":{},"212":{}},"component":{}}],["tls/ssl",{"_index":6804,"title":{},"name":{},"text":{"169":{},"185":{},"196":{}},"component":{}}],["tls[the",{"_index":543,"title":{},"name":{},"text":{"3":{}},"component":{}}],["to",{"_index":951,"title":{},"name":{},"text":{"7":{}},"component":{}}],["to/from",{"_index":3468,"title":{},"name":{},"text":{"60":{}},"component":{}}],["togeth",{"_index":1599,"title":{},"name":{},"text":{"26":{},"38":{},"43":{},"52":{},"61":{},"119":{},"122":{},"131":{},"193":{},"215":{},"275":{},"278":{}},"component":{}}],["toggl",{"_index":3735,"title":{},"name":{},"text":{"60":{},"104":{},"108":{}},"component":{}}],["token",{"_index":445,"title":{"225":{},"5-10":{},"80-19":{},"80-20":{},"80-21":{},"80-22":{},"80-27":{},"80-32":{},"80-33":{},"80-34":{},"80-35":{},"80-38":{},"143-1":{},"159-2":{},"162-1":{},"166-1":{},"203-46":{}},"name":{"225":{}},"text":{"3":{},"5":{},"8":{},"24":{},"33":{},"43":{},"45":{},"51":{},"60":{},"61":{},"79":{},"80":{},"81":{},"116":{},"117":{},"137":{},"138":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"154":{},"155":{},"159":{},"160":{},"161":{},"162":{},"166":{},"167":{},"170":{},"171":{},"172":{},"173":{},"184":{},"190":{},"191":{},"201":{},"203":{},"205":{},"212":{},"223":{},"225":{},"227":{},"228":{},"254":{},"255":{},"270":{},"273":{}},"component":{}}],["token=${generated_token",{"_index":525,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["token_entri",{"_index":5091,"title":{},"name":{},"text":{"80":{},"154":{}},"component":{}}],["tokenclaiminterv",{"_index":5078,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tokenclaimvaluesconfigurermodul",{"_index":5085,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tokenentri",{"_index":1638,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tokenstor",{"_index":1536,"title":{},"name":{},"text":{"25":{},"60":{},"61":{},"80":{},"89":{},"104":{}},"component":{}}],["tokenstore#retrievestorageidentifi",{"_index":3844,"title":{},"name":{},"text":{"61":{}},"component":{}}],["tokenstoreconfigurermodul",{"_index":5110,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tokenstoreid",{"_index":5114,"title":{},"name":{},"text":{"80":{},"143":{}},"component":{}}],["tokenstoreidentifi",{"_index":6268,"title":{},"name":{},"text":{"143":{}},"component":{}}],["tokentablefactori",{"_index":5098,"title":{},"name":{},"text":{"80":{}},"component":{}}],["token’",{"_index":2491,"title":{},"name":{},"text":{"38":{},"80":{}},"component":{}}],["told",{"_index":7693,"title":{},"name":{},"text":{"267":{}},"component":{}}],["toler",{"_index":7544,"title":{},"name":{},"text":{"218":{}},"component":{}}],["tomcat",{"_index":6819,"title":{},"name":{},"text":{"169":{},"277":{}},"component":{}}],["tomcat’",{"_index":7906,"title":{},"name":{},"text":{"277":{}},"component":{}}],["tomdeback",{"_index":3424,"title":{},"name":{},"text":{"60":{}},"component":{}}],["took",{"_index":2910,"title":{},"name":{},"text":{"52":{},"61":{},"71":{},"270":{}},"component":{}}],["tool",{"_index":750,"title":{"10":{},"266":{},"5-7":{},"8-1":{}},"name":{"266":{}},"text":{"5":{},"8":{},"10":{},"35":{},"51":{},"52":{},"60":{},"137":{},"145":{},"154":{},"159":{},"162":{},"166":{},"198":{},"200":{},"227":{},"234":{},"237":{},"241":{},"247":{},"260":{},"261":{},"266":{},"270":{},"271":{},"274":{},"275":{},"276":{},"278":{},"281":{}},"component":{}}],["toolbelt",{"_index":7663,"title":{},"name":{},"text":{"262":{}},"component":{}}],["toolkit",{"_index":1295,"title":{"198-2":{}},"name":{},"text":{"23":{},"198":{}},"component":{}}],["tooltip",{"_index":7572,"title":{"232-1":{}},"name":{},"text":{},"component":{}}],["top",{"_index":586,"title":{},"name":{},"text":{"3":{},"9":{},"23":{},"25":{},"37":{},"40":{},"57":{},"121":{},"184":{},"232":{},"236":{},"242":{},"243":{},"245":{},"256":{},"270":{},"271":{}},"component":{}}],["topic",{"_index":1090,"title":{"107-2":{}},"name":{},"text":{"9":{},"24":{},"35":{},"45":{},"104":{},"106":{},"107":{},"108":{},"182":{},"277":{}},"component":{}}],["topicresolver(m",{"_index":5606,"title":{},"name":{},"text":{"107":{}},"component":{}}],["topics(top",{"_index":5540,"title":{},"name":{},"text":{"104":{}},"component":{}}],["toplisten",{"_index":2434,"title":{},"name":{},"text":{"37":{}},"component":{}}],["toplistener'",{"_index":2439,"title":{},"name":{},"text":{"37":{}},"component":{}}],["topolog",{"_index":2098,"title":{},"name":{},"text":{"31":{},"70":{},"141":{},"158":{},"203":{},"218":{}},"component":{}}],["tostr",{"_index":1693,"title":{},"name":{},"text":{"27":{},"28":{},"57":{}},"component":{}}],["total",{"_index":2817,"title":{"270-35":{}},"name":{},"text":{"50":{},"80":{},"151":{},"172":{},"177":{},"236":{},"255":{},"270":{},"271":{}},"component":{}}],["touch",{"_index":2518,"title":{},"name":{},"text":{"38":{},"79":{},"144":{},"245":{},"278":{}},"component":{}}],["tougher",{"_index":5172,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tour",{"_index":7697,"title":{},"name":{},"text":{"270":{}},"component":{}}],["toward",{"_index":1272,"title":{},"name":{},"text":{"23":{},"27":{},"28":{},"31":{},"37":{},"54":{},"56":{},"60":{},"61":{},"66":{},"71":{},"79":{},"80":{},"255":{}},"component":{}}],["to’",{"_index":3209,"title":{},"name":{},"text":{"60":{}},"component":{}}],["trace",{"_index":62,"title":{"52":{},"131":{},"23-14":{},"23-36":{},"23-37":{},"52-25":{}},"name":{"52":{}},"text":{"1":{},"23":{},"42":{},"48":{},"49":{},"52":{},"60":{},"61":{},"130":{},"131":{}},"component":{"130":{},"131":{}}}],["traceid",{"_index":2596,"title":{},"name":{},"text":{"43":{}},"component":{}}],["tracer",{"_index":6005,"title":{},"name":{},"text":{"131":{}},"component":{}}],["traces/stat",{"_index":7146,"title":{},"name":{},"text":{"179":{}},"component":{}}],["tracinghandlerenhancerdefinit",{"_index":3027,"title":{},"name":{},"text":{"52":{}},"component":{}}],["track",{"_index":2272,"title":{"49":{},"80-2":{},"80-19":{},"80-20":{},"80-23":{},"80-24":{},"80-28":{},"80-29":{},"80-40":{},"80-41":{},"80-50":{},"80-58":{},"80-67":{},"80-68":{}},"name":{"49":{}},"text":{"35":{},"38":{},"42":{},"44":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"60":{},"61":{},"63":{},"70":{},"79":{},"80":{},"81":{},"97":{},"100":{},"104":{},"107":{},"108":{},"114":{},"116":{},"137":{},"151":{},"154":{},"172":{},"208":{},"254":{},"270":{},"278":{}},"component":{}}],["trackedeventcomparator(prioritya",{"_index":5259,"title":{},"name":{},"text":{"80":{}},"component":{}}],["tracker",{"_index":2807,"title":{"51-1":{}},"name":{},"text":{"48":{},"51":{},"60":{},"61":{},"172":{}},"component":{}}],["trackingeventprocessor",{"_index":3482,"title":{},"name":{},"text":{"60":{},"61":{},"70":{},"80":{},"104":{},"108":{},"117":{}},"component":{}}],["trackingeventprocessor#mergesegment(int",{"_index":4285,"title":{},"name":{},"text":{"61":{}},"component":{}}],["trackingeventprocessor#processingstatu",{"_index":3738,"title":{},"name":{},"text":{"60":{}},"component":{}}],["trackingeventprocessor#resettoken",{"_index":5531,"title":{},"name":{},"text":{"104":{}},"component":{}}],["trackingeventprocessor.class",{"_index":5756,"title":{},"name":{},"text":{"117":{}},"component":{}}],["trackingeventprocessorconfigur",{"_index":3716,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["trackingeventprocessorconfiguration.forparallelprocessing(2",{"_index":5120,"title":{},"name":{},"text":{"80":{}},"component":{}}],["trackingeventprocessorconfiguration.forparallelprocessing(4",{"_index":5148,"title":{},"name":{},"text":{"80":{}},"component":{}}],["trackingeventprocessorconfiguration.forsinglethreadedprocess",{"_index":5015,"title":{},"name":{},"text":{"80":{}},"component":{}}],["trackingprocessor",{"_index":4630,"title":{},"name":{},"text":{"70":{}},"component":{}}],["trackingprocessor.mergesegment(segmentid",{"_index":4633,"title":{},"name":{},"text":{"70":{}},"component":{}}],["trackingprocessor.splitsegment(segmentid",{"_index":4632,"title":{},"name":{},"text":{"70":{}},"component":{}}],["trackingprocessorconfigurermodul",{"_index":5018,"title":{},"name":{},"text":{"80":{}},"component":{}}],["trackingtoken",{"_index":2749,"title":{},"name":{},"text":{"45":{},"51":{},"60":{},"61":{},"80":{},"104":{}},"component":{}}],["traffic",{"_index":680,"title":{},"name":{},"text":{"3":{},"168":{},"169":{},"184":{},"185":{}},"component":{}}],["transact",{"_index":1217,"title":{"79-31":{}},"name":{},"text":{"22":{},"31":{},"33":{},"35":{},"44":{},"46":{},"56":{},"60":{},"61":{},"62":{},"63":{},"64":{},"71":{},"77":{},"78":{},"79":{},"89":{},"97":{},"98":{},"107":{},"108":{},"116":{},"117":{},"139":{},"141":{},"142":{},"149":{},"151":{},"172":{},"177":{},"270":{}},"component":{}}],["transactionalidprefix(transactionidprefix",{"_index":5602,"title":{},"name":{},"text":{"107":{}},"component":{}}],["transactionid",{"_index":1792,"title":{},"name":{},"text":{"28":{},"66":{},"77":{}},"component":{}}],["transactionid.equals(event.gettransactionid",{"_index":4803,"title":{},"name":{},"text":{"77":{}},"component":{}}],["transactionidprefix",{"_index":5597,"title":{},"name":{},"text":{"107":{}},"component":{}}],["transactionmanag",{"_index":2007,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"35":{},"44":{},"46":{},"54":{},"61":{},"79":{},"89":{},"115":{}},"component":{}}],["transactionmanager#starttransact",{"_index":4991,"title":{},"name":{},"text":{"79":{}},"component":{}}],["transactionmanager(config.getcompon",{"_index":4916,"title":{},"name":{},"text":{"79":{}},"component":{}}],["transactionmanager(config.getcomponent(transactionmanager.class",{"_index":2001,"title":{},"name":{},"text":{"31":{},"35":{},"54":{},"79":{},"89":{},"113":{}},"component":{}}],["transactionmanager(transactionmanag",{"_index":2011,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"35":{},"54":{},"89":{},"103":{},"115":{}},"component":{}}],["transactionmanager.class",{"_index":4917,"title":{},"name":{},"text":{"79":{}},"component":{}}],["transactionmanaginginterceptor",{"_index":2654,"title":{},"name":{},"text":{"44":{}},"component":{}}],["transactions.add(new",{"_index":4799,"title":{},"name":{},"text":{"77":{},"78":{}},"component":{}}],["transactions.stream().map(giftcardtransaction::gettransactionid).anymatch(cmd.gettransactionid()::equ",{"_index":4827,"title":{},"name":{},"text":{"78":{}},"component":{}}],["transactionvalu",{"_index":4783,"title":{},"name":{},"text":{"77":{}},"component":{}}],["transfer",{"_index":390,"title":{},"name":{},"text":{"3":{},"7":{},"35":{},"56":{},"99":{},"151":{},"184":{},"258":{}},"component":{}}],["transform",{"_index":2454,"title":{"144":{},"137-16":{},"144-2":{},"144-3":{},"144-4":{},"144-8":{},"144-11":{},"144-13":{},"144-14":{},"144-17":{},"144-20":{},"144-22":{},"144-25":{},"144-27":{}},"name":{"144":{}},"text":{"38":{},"137":{},"144":{},"145":{}},"component":{}}],["transform(\"encrypt",{"_index":6339,"title":{},"name":{},"text":{"144":{}},"component":{}}],["transform(\"transform",{"_index":6356,"title":{},"name":{},"text":{"144":{}},"component":{}}],["transform_admin",{"_index":6369,"title":{},"name":{},"text":{"144":{}},"component":{}}],["transformation.enabled=fals",{"_index":6378,"title":{},"name":{},"text":{"144":{}},"component":{}}],["transformer#transform(append",{"_index":6351,"title":{},"name":{},"text":{"144":{}},"component":{}}],["transienc",{"_index":3579,"title":{},"name":{},"text":{"60":{}},"component":{}}],["transient",{"_index":1941,"title":{},"name":{},"text":{"31":{},"60":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["transit",{"_index":1248,"title":{},"name":{},"text":{"23":{},"74":{},"77":{},"80":{},"111":{},"137":{},"144":{},"151":{}},"component":{}}],["translat",{"_index":2290,"title":{},"name":{},"text":{"35":{},"44":{},"80":{},"104":{},"163":{}},"component":{}}],["transmiss",{"_index":6549,"title":{},"name":{},"text":{"156":{}},"component":{}}],["transpar",{"_index":2568,"title":{},"name":{},"text":{"42":{},"79":{},"261":{},"278":{}},"component":{}}],["transport",{"_index":2087,"title":{},"name":{},"text":{"31":{},"43":{},"169":{},"185":{},"205":{}},"component":{}}],["travel",{"_index":7712,"title":{},"name":{},"text":{"270":{}},"component":{}}],["travers",{"_index":5000,"title":{},"name":{},"text":{"80":{}},"component":{}}],["treat",{"_index":2569,"title":{},"name":{},"text":{"42":{},"71":{},"236":{}},"component":{}}],["tree",{"_index":1096,"title":{},"name":{},"text":{"9":{}},"component":{}}],["trend",{"_index":7725,"title":{},"name":{},"text":{"270":{}},"component":{}}],["trhough",{"_index":7659,"title":{},"name":{},"text":{"262":{}},"component":{}}],["tri",{"_index":773,"title":{},"name":{},"text":{"5":{},"24":{},"25":{},"35":{},"42":{},"46":{},"56":{},"61":{},"68":{},"79":{},"80":{},"88":{},"90":{},"91":{},"103":{},"138":{},"142":{},"144":{},"150":{},"185":{},"199":{},"203":{},"247":{},"253":{},"255":{},"260":{},"262":{},"263":{},"264":{},"280":{}},"component":{}}],["trial",{"_index":7605,"title":{"245-4":{}},"name":{},"text":{"245":{}},"component":{}}],["trigger",{"_index":1852,"title":{"80-62":{},"254-4":{}},"name":{},"text":{"29":{},"31":{},"32":{},"42":{},"49":{},"50":{},"52":{},"56":{},"60":{},"61":{},"63":{},"66":{},"71":{},"77":{},"79":{},"80":{},"85":{},"86":{},"87":{},"104":{},"126":{},"158":{},"165":{},"236":{},"239":{},"241":{},"242":{},"243":{},"254":{},"256":{},"270":{},"271":{},"277":{},"278":{}},"component":{}}],["troubl",{"_index":259,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["troubleshoot",{"_index":6297,"title":{"144-24":{}},"name":{},"text":{"240":{}},"component":{}}],["troublesom",{"_index":4185,"title":{},"name":{},"text":{"61":{}},"component":{}}],["troughput",{"_index":7588,"title":{},"name":{},"text":{"239":{}},"component":{}}],["true",{"_index":635,"title":{},"name":{},"text":{"3":{},"24":{},"27":{},"31":{},"45":{},"46":{},"50":{},"52":{},"62":{},"63":{},"77":{},"79":{},"80":{},"85":{},"102":{},"103":{},"108":{},"116":{},"117":{},"137":{},"138":{},"139":{},"144":{},"162":{},"163":{},"165":{},"166":{},"172":{},"183":{},"184":{},"185":{},"190":{},"205":{},"208":{},"209":{},"211":{},"278":{},"281":{}},"component":{}}],["truncat",{"_index":3918,"title":{},"name":{},"text":{"61":{}},"component":{}}],["trust",{"_index":1010,"title":{},"name":{},"text":{"8":{},"138":{},"169":{},"172":{},"203":{}},"component":{}}],["truth",{"_index":7951,"title":{},"name":{},"text":{"277":{},"278":{}},"component":{}}],["ttl",{"_index":6908,"title":{},"name":{},"text":{"172":{}},"component":{}}],["tune",{"_index":143,"title":{"72":{},"97":{},"24-6":{},"70-2":{},"158-2":{},"163-5":{}},"name":{"158":{}},"text":{"2":{},"17":{},"19":{},"22":{},"29":{},"44":{},"60":{},"69":{},"70":{},"72":{},"80":{},"97":{},"134":{},"157":{},"163":{},"270":{},"271":{}},"component":{"93":{},"94":{},"95":{},"97":{}}}],["tunnel",{"_index":7251,"title":{},"name":{},"text":{"196":{}},"component":{}}],["tupl",{"_index":6275,"title":{},"name":{},"text":{"143":{}},"component":{}}],["turn",{"_index":1402,"title":{},"name":{},"text":{"24":{},"31":{},"43":{},"44":{},"52":{},"56":{},"57":{},"60":{},"70":{},"79":{},"80":{},"107":{},"116":{},"126":{},"130":{},"156":{},"200":{},"223":{},"262":{}},"component":{}}],["tutori",{"_index":886,"title":{"7-3":{},"14-2":{}},"name":{},"text":{"7":{},"14":{},"18":{},"19":{},"27":{},"30":{},"55":{},"56":{},"86":{},"90":{},"260":{},"261":{},"265":{},"267":{},"269":{},"270":{},"271":{},"273":{},"274":{},"276":{},"277":{},"278":{},"279":{},"282":{}},"component":{}}],["tweak",{"_index":2042,"title":{},"name":{},"text":{"31":{},"35":{},"61":{},"71":{},"94":{}},"component":{}}],["twice",{"_index":1432,"title":{},"name":{},"text":{"24":{},"61":{},"80":{},"144":{}},"component":{}}],["two",{"_index":242,"title":{},"name":{},"text":{"3":{},"8":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"35":{},"36":{},"40":{},"42":{},"43":{},"44":{},"52":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"71":{},"76":{},"77":{},"79":{},"80":{},"89":{},"104":{},"126":{},"134":{},"139":{},"141":{},"144":{},"147":{},"150":{},"151":{},"156":{},"163":{},"166":{},"169":{},"171":{},"173":{},"184":{},"198":{},"199":{},"201":{},"208":{},"209":{},"210":{},"211":{},"213":{},"215":{},"216":{},"221":{},"223":{},"236":{},"241":{},"242":{},"255":{},"264":{},"270":{},"271":{},"272":{},"276":{},"277":{},"278":{}},"component":{}}],["txt,json",{"_index":6590,"title":{},"name":{},"text":{"161":{},"167":{},"171":{}},"component":{}}],["type",{"_index":243,"title":{"5-13":{},"7-1":{},"24-13":{},"44-15":{},"44-16":{},"52-9":{},"203-36":{},"208-1":{},"209-1":{},"211-1":{},"223-1":{},"223-4":{}},"name":{},"text":{"3":{},"5":{},"7":{},"13":{},"19":{},"24":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"71":{},"73":{},"74":{},"76":{},"77":{},"79":{},"80":{},"81":{},"93":{},"97":{},"101":{},"107":{},"111":{},"112":{},"114":{},"117":{},"121":{},"122":{},"126":{},"127":{},"129":{},"130":{},"135":{},"137":{},"139":{},"140":{},"146":{},"147":{},"151":{},"154":{},"162":{},"163":{},"165":{},"169":{},"172":{},"184":{},"191":{},"197":{},"199":{},"200":{},"201":{},"203":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"218":{},"221":{},"223":{},"236":{},"238":{},"240":{},"241":{},"255":{},"256":{},"261":{},"269":{},"270":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["type=appl",{"_index":7508,"title":{},"name":{},"text":{"212":{}},"component":{}}],["typedqueri",{"_index":3071,"title":{},"name":{},"text":{"56":{}},"component":{}}],["typescript",{"_index":7260,"title":{},"name":{},"text":{"197":{}},"component":{}}],["typic",{"_index":1185,"title":{},"name":{},"text":{"15":{},"21":{},"23":{},"24":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"46":{},"53":{},"60":{},"63":{},"66":{},"70":{},"71":{},"75":{},"76":{},"80":{},"104":{},"144":{},"150":{},"151":{},"158":{},"163":{},"165":{}},"component":{}}],["typo",{"_index":3281,"title":{},"name":{},"text":{"60":{}},"component":{}}],["u",{"_index":378,"title":{},"name":{},"text":{"3":{},"26":{},"159":{},"162":{},"167":{},"171":{},"184":{}},"component":{}}],["ui",{"_index":956,"title":{"208-5":{},"209-6":{},"211-5":{}},"name":{},"text":{"7":{},"27":{},"56":{},"60":{},"137":{},"138":{},"139":{},"141":{},"144":{},"146":{},"147":{},"151":{},"158":{},"159":{},"160":{},"161":{},"162":{},"165":{},"166":{},"167":{},"170":{},"185":{},"196":{},"199":{},"200":{},"208":{},"209":{},"211":{},"260":{},"264":{},"267":{},"274":{},"278":{}},"component":{}}],["ui.html",{"_index":6131,"title":{},"name":{},"text":{"139":{},"140":{},"146":{}},"component":{}}],["ui/api",{"_index":7957,"title":{},"name":{},"text":{"278":{}},"component":{}}],["ui/index.html",{"_index":7031,"title":{},"name":{},"text":{"175":{}},"component":{}}],["uid",{"_index":2661,"title":{},"name":{},"text":{"44":{}},"component":{}}],["ultim",{"_index":1450,"title":{},"name":{},"text":{"24":{},"101":{},"114":{}},"component":{}}],["un",{"_index":3834,"title":{},"name":{},"text":{"61":{},"258":{}},"component":{}}],["un*distribut",{"_index":2124,"title":{},"name":{},"text":{"31":{}},"component":{}}],["unabl",{"_index":6229,"title":{},"name":{},"text":{"142":{},"216":{}},"component":{}}],["unabletoclaimtokenexcept",{"_index":5088,"title":{},"name":{},"text":{"80":{}},"component":{}}],["unaffect",{"_index":1646,"title":{},"name":{},"text":{"26":{}},"component":{}}],["unassign",{"_index":7547,"title":{},"name":{},"text":{"218":{}},"component":{}}],["unauthent",{"_index":6635,"title":{},"name":{},"text":{"163":{}},"component":{}}],["unavail",{"_index":1293,"title":{},"name":{},"text":{"23":{},"90":{},"151":{}},"component":{}}],["unavoid",{"_index":6049,"title":{},"name":{},"text":{"137":{},"144":{},"218":{}},"component":{}}],["unblock",{"_index":1730,"title":{},"name":{},"text":{"27":{},"79":{},"80":{}},"component":{}}],["unbound",{"_index":2019,"title":{},"name":{},"text":{"31":{}},"component":{}}],["unchang",{"_index":6318,"title":{},"name":{},"text":{"144":{}},"component":{}}],["uncheck",{"_index":2064,"title":{},"name":{},"text":{"31":{},"46":{},"71":{}},"component":{}}],["unclean",{"_index":6875,"title":{},"name":{},"text":{"172":{}},"component":{}}],["uncommit",{"_index":6244,"title":{},"name":{},"text":{"142":{}},"component":{}}],["uncommon",{"_index":3037,"title":{},"name":{},"text":{"53":{},"107":{}},"component":{}}],["uncondition",{"_index":2598,"title":{},"name":{},"text":{"43":{}},"component":{}}],["unconfirm",{"_index":6918,"title":{},"name":{},"text":{"172":{}},"component":{}}],["uncov",{"_index":4274,"title":{},"name":{},"text":{"61":{}},"component":{}}],["undefin",{"_index":4855,"title":{},"name":{},"text":{"79":{}},"component":{}}],["under",{"_index":569,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"27":{},"42":{},"47":{},"60":{},"61":{},"66":{},"79":{},"80":{},"108":{},"129":{},"134":{},"154":{},"155":{},"156":{},"176":{},"177":{},"184":{},"185":{},"236":{},"239":{},"241":{},"242":{},"243":{},"251":{},"255":{},"267":{},"270":{},"271":{},"273":{},"276":{},"282":{}},"component":{}}],["underestim",{"_index":6303,"title":{},"name":{},"text":{"144":{}},"component":{}}],["undergo",{"_index":6196,"title":{},"name":{},"text":{"142":{}},"component":{}}],["undergon",{"_index":3426,"title":{},"name":{},"text":{"60":{}},"component":{}}],["underli",{"_index":1867,"title":{},"name":{},"text":{"29":{},"33":{},"63":{},"65":{},"71":{},"77":{},"80":{},"101":{}},"component":{}}],["underlin",{"_index":3092,"title":{},"name":{},"text":{"56":{}},"component":{}}],["underneath",{"_index":1719,"title":{},"name":{},"text":{"27":{}},"component":{}}],["underperform",{"_index":7596,"title":{},"name":{},"text":{"241":{}},"component":{}}],["underscor",{"_index":6421,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["understand",{"_index":905,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"15":{},"16":{},"19":{},"21":{},"25":{},"33":{},"38":{},"80":{},"144":{},"180":{},"239":{},"240":{},"243":{},"261":{},"270":{}},"component":{}}],["undertak",{"_index":2628,"title":{},"name":{},"text":{"44":{}},"component":{}}],["undertaken",{"_index":6055,"title":{},"name":{},"text":{"137":{}},"component":{}}],["underway",{"_index":4287,"title":{},"name":{},"text":{"61":{}},"component":{}}],["undesir",{"_index":4236,"title":{},"name":{},"text":{"61":{},"73":{},"79":{}},"component":{}}],["undon",{"_index":7621,"title":{},"name":{},"text":{"254":{}},"component":{}}],["unequ",{"_index":5179,"title":{},"name":{},"text":{"80":{}},"component":{}}],["unexpect",{"_index":3238,"title":{},"name":{},"text":{"60":{},"61":{},"80":{},"137":{},"138":{},"263":{}},"component":{}}],["unfortun",{"_index":1589,"title":{},"name":{},"text":{"26":{}},"component":{}}],["unidirect",{"_index":2557,"title":{},"name":{},"text":{"41":{}},"component":{}}],["unifi",{"_index":230,"title":{"137-23":{}},"name":{},"text":{"3":{},"135":{},"184":{},"185":{}},"component":{}}],["uniformli",{"_index":7499,"title":{},"name":{},"text":{"212":{}},"component":{}}],["uniniti",{"_index":1908,"title":{},"name":{},"text":{"29":{},"185":{}},"component":{}}],["unintend",{"_index":5003,"title":{},"name":{},"text":{"80":{}},"component":{}}],["unintent",{"_index":1804,"title":{},"name":{},"text":{"28":{},"80":{}},"component":{}}],["unintention",{"_index":3744,"title":{},"name":{},"text":{"60":{},"61":{},"80":{}},"component":{}}],["uniqu",{"_index":1691,"title":{},"name":{},"text":{"27":{},"29":{},"35":{},"42":{},"61":{},"63":{},"65":{},"78":{},"79":{},"80":{},"97":{},"107":{},"114":{},"151":{},"172":{},"191":{},"199":{},"208":{},"209":{},"211":{},"223":{},"256":{},"278":{}},"component":{}}],["unit",{"_index":1742,"title":{"46":{}},"name":{"46":{},"282":{}},"text":{"27":{},"31":{},"33":{},"35":{},"43":{},"44":{},"45":{},"46":{},"56":{},"60":{},"63":{},"65":{},"66":{},"67":{},"71":{},"75":{},"79":{},"80":{},"107":{},"151":{},"280":{},"282":{}},"component":{}}],["unitin",{"_index":7583,"title":{},"name":{},"text":{"236":{}},"component":{}}],["unitofwork",{"_index":2331,"title":{},"name":{},"text":{"35":{},"44":{},"45":{},"46":{},"60":{},"61":{}},"component":{}}],["unitofwork.execute(runn",{"_index":2774,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unitofwork.executewithresult(cal",{"_index":2775,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unitofwork.getmessag",{"_index":2658,"title":{},"name":{},"text":{"44":{}},"component":{}}],["unitofwork.getorcomputeresourc",{"_index":2763,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unitofwork.getresourc",{"_index":2801,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unitofwork.oncommit",{"_index":2768,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unitofwork.root",{"_index":2802,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unitofworkawareconnectionproviderwrapp",{"_index":4398,"title":{},"name":{},"text":{"63":{},"65":{}},"component":{}}],["unitofworkfactori",{"_index":2236,"title":{},"name":{},"text":{"33":{}},"component":{}}],["unix",{"_index":7194,"title":{},"name":{},"text":{"191":{}},"component":{}}],["unknown",{"_index":1470,"title":{},"name":{},"text":{"24":{},"38":{},"142":{},"165":{},"277":{}},"component":{}}],["unless",{"_index":1509,"title":{},"name":{},"text":{"24":{},"31":{},"68":{},"91":{},"144":{},"146":{},"167":{},"172":{},"185":{}},"component":{}}],["unlik",{"_index":128,"title":{},"name":{},"text":{"2":{},"3":{},"28":{},"31":{},"32":{},"38":{},"40":{},"44":{},"46":{},"57":{},"63":{},"65":{},"97":{},"140":{},"184":{}},"component":{}}],["unlock",{"_index":7606,"title":{},"name":{},"text":{"245":{}},"component":{}}],["unmatch",{"_index":4528,"title":{},"name":{},"text":{"66":{}},"component":{}}],["unnam",{"_index":5643,"title":{},"name":{},"text":{"108":{}},"component":{}}],["unnecessari",{"_index":2037,"title":{},"name":{},"text":{"31":{},"61":{},"89":{},"276":{}},"component":{}}],["unpack",{"_index":6617,"title":{},"name":{},"text":{"163":{},"165":{}},"component":{}}],["unprocess",{"_index":5146,"title":{},"name":{},"text":{"80":{},"90":{}},"component":{}}],["unreach",{"_index":6157,"title":{},"name":{},"text":{"141":{},"185":{}},"component":{}}],["unread",{"_index":2932,"title":{},"name":{},"text":{"52":{}},"component":{}}],["unreason",{"_index":6824,"title":{},"name":{},"text":{"169":{}},"component":{}}],["unregist",{"_index":4010,"title":{"147-7":{}},"name":{},"text":{"61":{},"137":{},"147":{},"171":{}},"component":{}}],["unregister_plugin",{"_index":6692,"title":{},"name":{},"text":{"164":{}},"component":{}}],["unresolv",{"_index":2106,"title":{},"name":{},"text":{"31":{}},"component":{}}],["unresolvedroutingkeypolici",{"_index":2103,"title":{},"name":{},"text":{"31":{}},"component":{}}],["unrespons",{"_index":6295,"title":{},"name":{},"text":{"143":{}},"component":{}}],["unseen",{"_index":4775,"title":{},"name":{},"text":{"76":{}},"component":{}}],["unspecifi",{"_index":3036,"title":{},"name":{},"text":{"53":{},"56":{}},"component":{}}],["unspecifiedsynapseinst",{"_index":7410,"title":{},"name":{},"text":{"203":{}},"component":{}}],["unsubscrib",{"_index":5852,"title":{},"name":{},"text":{"122":{}},"component":{}}],["unsuccessfulli",{"_index":5357,"title":{},"name":{},"text":{"90":{}},"component":{}}],["unsuit",{"_index":2240,"title":{},"name":{},"text":{"33":{},"79":{}},"component":{}}],["unsupport",{"_index":3156,"title":{"57-6":{}},"name":{},"text":{"142":{}},"component":{}}],["unsupportedoperationexcept",{"_index":2552,"title":{},"name":{},"text":{"40":{},"73":{}},"component":{}}],["until",{"_index":810,"title":{},"name":{},"text":{"5":{},"27":{},"28":{},"31":{},"46":{},"56":{},"61":{},"79":{},"80":{},"90":{},"107":{},"111":{},"122":{},"135":{},"137":{},"139":{},"143":{},"144":{},"156":{},"172":{},"177":{},"185":{},"245":{},"254":{},"275":{},"277":{}},"component":{}}],["unus",{"_index":4763,"title":{},"name":{},"text":{"75":{},"172":{},"270":{}},"component":{}}],["unwant",{"_index":5053,"title":{},"name":{},"text":{"80":{},"251":{}},"component":{}}],["unwieldi",{"_index":4341,"title":{},"name":{},"text":{"62":{}},"component":{}}],["unzip",{"_index":6618,"title":{},"name":{},"text":{"163":{},"165":{},"198":{}},"component":{}}],["uow",{"_index":2776,"title":{},"name":{},"text":{"46":{}},"component":{}}],["uow.commit",{"_index":2780,"title":{},"name":{},"text":{"46":{}},"component":{}}],["uow.executewithresult",{"_index":2779,"title":{},"name":{},"text":{"46":{}},"component":{}}],["uow.rollback(",{"_index":2781,"title":{},"name":{},"text":{"46":{}},"component":{}}],["up",{"_index":300,"title":{"5-4":{},"185-2":{},"229-1":{},"234-1":{},"234-2":{},"260-1":{}},"name":{"234":{}},"text":{"3":{},"24":{},"25":{},"27":{},"28":{},"29":{},"31":{},"44":{},"46":{},"47":{},"49":{},"51":{},"52":{},"54":{},"56":{},"60":{},"61":{},"66":{},"70":{},"71":{},"74":{},"75":{},"79":{},"80":{},"81":{},"84":{},"97":{},"104":{},"105":{},"107":{},"108":{},"117":{},"123":{},"126":{},"137":{},"138":{},"139":{},"140":{},"141":{},"144":{},"146":{},"149":{},"151":{},"155":{},"156":{},"163":{},"170":{},"172":{},"176":{},"184":{},"185":{},"196":{},"198":{},"200":{},"212":{},"218":{},"223":{},"229":{},"234":{},"242":{},"244":{},"247":{},"253":{},"254":{},"255":{},"256":{},"258":{},"260":{},"261":{},"264":{},"269":{},"270":{},"273":{},"274":{},"277":{},"278":{},"280":{},"281":{}},"component":{}}],["upcast",{"_index":1437,"title":{"38-1":{},"38-2":{},"38-3":{},"38-6":{},"110-1":{}},"name":{},"text":{"24":{},"35":{},"38":{},"61":{},"106":{},"110":{}},"component":{}}],["upcastedrevis",{"_index":2490,"title":{},"name":{},"text":{"38":{}},"component":{}}],["upcasterchain",{"_index":5577,"title":{},"name":{},"text":{"106":{}},"component":{}}],["upcasterchain(upcasterchain",{"_index":5580,"title":{},"name":{},"text":{"106":{}},"component":{}}],["upcom",{"_index":7955,"title":{},"name":{},"text":{"277":{}},"component":{}}],["updat",{"_index":206,"title":{"117-6":{},"137-5":{},"137-7":{},"137-22":{},"196-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"28":{},"31":{},"36":{},"38":{},"42":{},"44":{},"52":{},"56":{},"57":{},"60":{},"61":{},"79":{},"80":{},"81":{},"112":{},"114":{},"117":{},"122":{},"126":{},"135":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"147":{},"148":{},"154":{},"169":{},"171":{},"172":{},"173":{},"175":{},"177":{},"184":{},"185":{},"196":{},"203":{},"243":{},"254":{},"267":{},"270":{},"273":{},"277":{}},"component":{}}],["update.initi",{"_index":6966,"title":{},"name":{},"text":{"172":{}},"component":{}}],["update.r",{"_index":6965,"title":{},"name":{},"text":{"172":{}},"component":{}}],["update_context_properti",{"_index":6693,"title":{},"name":{},"text":{"164":{}},"component":{}}],["updatecontextproperties(updatecontextpropertiesrequest",{"_index":6999,"title":{},"name":{},"text":{"173":{}},"component":{}}],["updated(str",{"_index":6446,"title":{},"name":{},"text":{"147":{}},"component":{}}],["updateemitt",{"_index":3048,"title":{},"name":{},"text":{"54":{},"60":{}},"component":{}}],["updatehandlerregistration#complet",{"_index":4090,"title":{},"name":{},"text":{"61":{}},"component":{}}],["updatesonli",{"_index":5869,"title":{},"name":{},"text":{"122":{}},"component":{}}],["upgrad",{"_index":168,"title":{"4":{},"26":{},"4-4":{},"26-1":{},"26-5":{},"26-9":{},"61-17":{},"137-12":{},"154-1":{},"154-2":{},"155-1":{},"155-2":{},"212-2":{},"212-6":{},"212-10":{},"212-14":{},"212-18":{}},"name":{"26":{}},"text":{"2":{},"4":{},"18":{},"19":{},"22":{},"24":{},"26":{},"60":{},"61":{},"137":{},"138":{},"212":{},"245":{},"271":{}},"component":{"4":{}}}],["upgrade/upgrading_as_2024.html",{"_index":6033,"title":{},"name":{},"text":{"137":{}},"component":{}}],["upgrading_as_2024",{"_index":706,"title":{},"name":{"4":{}},"text":{},"component":{}}],["upload",{"_index":297,"title":{"147-3":{}},"name":{},"text":{"3":{},"147":{},"171":{},"172":{},"184":{}},"component":{}}],["upload_licens",{"_index":6694,"title":{},"name":{},"text":{"164":{}},"component":{}}],["upon",{"_index":855,"title":{},"name":{},"text":{"5":{},"28":{},"29":{},"31":{},"52":{},"53":{},"60":{},"61":{},"73":{},"75":{},"78":{},"104":{},"106":{},"107":{},"109":{},"141":{},"146":{},"154":{},"235":{},"254":{},"277":{},"278":{}},"component":{}}],["upper",{"_index":6835,"title":{},"name":{},"text":{"172":{},"192":{},"270":{}},"component":{}}],["uppercas",{"_index":6418,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["upstream",{"_index":3149,"title":{},"name":{},"text":{"56":{},"218":{}},"component":{}}],["uri",{"_index":5717,"title":{},"name":{},"text":{"116":{},"126":{},"165":{}},"component":{}}],["url",{"_index":1039,"title":{},"name":{},"text":{"8":{},"9":{},"138":{},"143":{},"154":{},"161":{},"163":{},"165":{},"167":{},"171":{},"175":{},"176":{},"178":{},"206":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"218":{},"230":{},"267":{},"271":{},"277":{},"278":{},"280":{}},"component":{}}],["url=\"/mi",{"_index":5976,"title":{},"name":{},"text":{"127":{}},"component":{}}],["us",{"_index":34,"title":{"13":{},"83":{},"88":{},"228":{},"266":{},"274":{},"5-7":{},"32-3":{},"114-1":{},"143-3":{},"143-4":{},"143-5":{},"144-26":{},"151-7":{},"151-20":{},"161-1":{},"167-1":{},"196-1":{},"223-1":{},"244-1":{},"244-3":{},"277-6":{},"277-15":{},"280-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"114":{},"116":{},"117":{},"118":{},"119":{},"121":{},"122":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"154":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"169":{},"170":{},"171":{},"172":{},"173":{},"176":{},"178":{},"180":{},"183":{},"184":{},"185":{},"191":{},"192":{},"194":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"203":{},"205":{},"206":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"221":{},"223":{},"225":{},"227":{},"229":{},"230":{},"231":{},"232":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"247":{},"253":{},"254":{},"255":{},"256":{},"258":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{}},"component":{}}],["usabl",{"_index":4700,"title":{},"name":{},"text":{"71":{},"137":{}},"component":{}}],["usag",{"_index":701,"title":{"5-8":{},"5-9":{},"103-1":{},"103-2":{},"141-5":{},"146-2":{},"170-1":{}},"name":{},"text":{"3":{},"5":{},"7":{},"11":{},"15":{},"21":{},"23":{},"27":{},"46":{},"52":{},"56":{},"60":{},"61":{},"66":{},"97":{},"103":{},"104":{},"109":{},"122":{},"127":{},"131":{},"137":{},"138":{},"143":{},"144":{},"151":{},"161":{},"167":{},"184":{},"245":{},"255":{},"256":{},"257":{},"270":{},"271":{}},"component":{}}],["use_context",{"_index":6614,"title":{},"name":{},"text":{"162":{},"164":{},"171":{},"201":{}},"component":{}}],["use_context@context",{"_index":7338,"title":{},"name":{},"text":{"201":{}},"component":{}}],["usebinarypojo",{"_index":2255,"title":{},"name":{},"text":{"33":{}},"component":{}}],["useless",{"_index":3741,"title":{},"name":{},"text":{"60":{},"144":{}},"component":{}}],["user",{"_index":123,"title":{"5-12":{},"146-9":{},"159-1":{},"162-2":{},"166-2":{},"167-1":{},"171-5":{},"173-5":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"8":{},"16":{},"31":{},"32":{},"33":{},"35":{},"38":{},"42":{},"52":{},"57":{},"60":{},"61":{},"66":{},"71":{},"76":{},"80":{},"101":{},"104":{},"107":{},"121":{},"122":{},"137":{},"138":{},"141":{},"142":{},"144":{},"151":{},"155":{},"159":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"167":{},"170":{},"171":{},"173":{},"174":{},"175":{},"176":{},"184":{},"196":{},"201":{},"224":{},"227":{},"228":{},"232":{},"233":{},"234":{},"235":{},"237":{},"243":{},"245":{},"251":{},"258":{},"277":{},"278":{}},"component":{}}],["user:password",{"_index":6575,"title":{},"name":{},"text":{"159":{}},"component":{}}],["useradminservic",{"_index":7021,"title":{},"name":{},"text":{"173":{}},"component":{}}],["userid",{"_index":1981,"title":{},"name":{},"text":{"31":{},"44":{}},"component":{}}],["usernam",{"_index":6096,"title":{},"name":{},"text":{"138":{},"154":{},"159":{},"162":{},"163":{},"165":{},"166":{},"167":{},"171":{},"201":{},"244":{}},"component":{}}],["username/password",{"_index":7334,"title":{},"name":{},"text":{"201":{},"203":{}},"component":{}}],["usernameprovid",{"_index":2607,"title":{},"name":{},"text":{"43":{}},"component":{}}],["usernameprovider.apply(token",{"_index":2618,"title":{},"name":{},"text":{"43":{}},"component":{}}],["useroverview",{"_index":7023,"title":{},"name":{},"text":{"173":{}},"component":{}}],["userprovid",{"_index":2609,"title":{},"name":{},"text":{"43":{}},"component":{}}],["users/dgomezg/projects/axon/cod",{"_index":8028,"title":{},"name":{},"text":{"281":{}},"component":{}}],["user’",{"_index":4774,"title":{"165-5":{}},"name":{},"text":{"76":{},"104":{},"162":{}},"component":{}}],["usingpooledstreamingeventprocessor",{"_index":5028,"title":{},"name":{},"text":{"80":{}},"component":{}}],["usingsubscribingeventprocessor",{"_index":5270,"title":{},"name":{},"text":{"81":{}},"component":{}}],["usingtrackingeventprocessor",{"_index":5007,"title":{},"name":{},"text":{"80":{}},"component":{}}],["usual",{"_index":715,"title":{},"name":{},"text":{"4":{},"10":{},"29":{},"38":{},"43":{},"57":{},"63":{},"71":{},"75":{},"80":{},"151":{},"195":{},"261":{},"278":{},"280":{}},"component":{}}],["utc",{"_index":5430,"title":{},"name":{},"text":{"97":{}},"component":{}}],["util",{"_index":1196,"title":{"35-16":{}},"name":{},"text":{"16":{},"33":{},"35":{},"56":{},"60":{},"61":{},"66":{},"70":{},"79":{},"104":{},"107":{},"109":{},"121":{},"122":{},"137":{},"144":{},"146":{},"158":{},"171":{},"185":{},"196":{},"223":{},"231":{},"243":{}},"component":{}}],["utmost",{"_index":4888,"title":{},"name":{},"text":{"79":{}},"component":{}}],["utrecht",{"_index":7921,"title":{},"name":{},"text":{"277":{}},"component":{}}],["uuid",{"_index":5425,"title":{},"name":{},"text":{"97":{},"280":{}},"component":{}}],["uuid.randomuuid().tostr",{"_index":1674,"title":{},"name":{},"text":{"27":{},"87":{},"278":{}},"component":{}}],["v",{"_index":5568,"title":{},"name":{},"text":{"106":{},"147":{},"171":{},"185":{}},"component":{}}],["v1",{"_index":663,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["v1/applic",{"_index":7026,"title":{},"name":{},"text":{"175":{}},"component":{}}],["v1/backup/eventstor",{"_index":6153,"title":{},"name":{},"text":{"140":{}},"component":{}}],["v1/cluster",{"_index":7029,"title":{},"name":{},"text":{"175":{}},"component":{}}],["v1/components/cli",{"_index":7401,"title":{},"name":{},"text":{"203":{}},"component":{}}],["v1/components/{component}/processors/{processor}/pause?context={context}&tokenstoreidentifier={tokenstoreid",{"_index":6259,"title":{},"name":{},"text":{"143":{}},"component":{}}],["v1/components/{component}/processors/{processor}/start?context={context}&tokenstoreidentifier={tokenstoreid",{"_index":6260,"title":{},"name":{},"text":{"143":{}},"component":{}}],["v1/context",{"_index":7028,"title":{},"name":{},"text":{"175":{}},"component":{}}],["v1/context/[contextname]/command",{"_index":7519,"title":{},"name":{},"text":{"213":{}},"component":{}}],["v1/context/[contextname]/commands/[commandnam",{"_index":7515,"title":{},"name":{},"text":{"213":{}},"component":{}}],["v1/context/[contextname]/ev",{"_index":7530,"title":{},"name":{},"text":{"214":{}},"component":{}}],["v1/context/[contextname]/events/[eventnam",{"_index":7522,"title":{},"name":{},"text":{"214":{}},"component":{}}],["v1/context/[contextname]/queri",{"_index":7536,"title":{},"name":{},"text":{"216":{}},"component":{}}],["v1/context/[contextname]/queries/[querynam",{"_index":7533,"title":{},"name":{},"text":{"216":{}},"component":{}}],["v1/contexts/default/command",{"_index":7321,"title":{},"name":{},"text":{"200":{}},"component":{}}],["v1/contexts/default/ev",{"_index":7330,"title":{},"name":{},"text":{"200":{}},"component":{}}],["v1/contexts/default/handlers/command",{"_index":7290,"title":{},"name":{},"text":{"199":{}},"component":{}}],["v1/contexts/default/handlers/ev",{"_index":7315,"title":{},"name":{},"text":{"199":{}},"component":{}}],["v1/contexts/default/handlers/queri",{"_index":7305,"title":{},"name":{},"text":{"199":{}},"component":{}}],["v1/contexts/default/queri",{"_index":7328,"title":{},"name":{},"text":{"200":{}},"component":{}}],["v1/contexts/{context}/ev",{"_index":7506,"title":{},"name":{},"text":{"212":{}},"component":{}}],["v1/diagnose/download",{"_index":7139,"title":{},"name":{},"text":{"178":{}},"component":{}}],["v1/public/context",{"_index":7182,"title":{},"name":{},"text":{"185":{}},"component":{}}],["v1/public/m",{"_index":7177,"title":{},"name":{},"text":{"185":{}},"component":{}}],["v1/user",{"_index":7027,"title":{},"name":{},"text":{"175":{}},"component":{}}],["v2",{"_index":6317,"title":{},"name":{},"text":{"144":{}},"component":{}}],["v3.1",{"_index":8017,"title":{},"name":{},"text":{"281":{}},"component":{}}],["v3.2.1",{"_index":8024,"title":{},"name":{},"text":{"281":{}},"component":{}}],["v4.4",{"_index":6169,"title":{},"name":{},"text":{"141":{}},"component":{}}],["val",{"_index":5653,"title":{},"name":{},"text":{"109":{},"112":{}},"component":{}}],["vale",{"_index":970,"title":{"8-3":{}},"name":{},"text":{"8":{},"10":{}},"component":{}}],["vale’",{"_index":1000,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["valid",{"_index":559,"title":{"44-3":{},"44-11":{},"66-5":{},"66-6":{},"66-7":{},"66-8":{},"66-9":{}},"name":{},"text":{"3":{},"24":{},"28":{},"29":{},"31":{},"38":{},"44":{},"60":{},"61":{},"63":{},"66":{},"77":{},"78":{},"79":{},"80":{},"83":{},"85":{},"122":{},"126":{},"138":{},"141":{},"142":{},"147":{},"149":{},"151":{},"155":{},"161":{},"162":{},"165":{},"166":{},"170":{},"171":{},"172":{},"184":{},"190":{},"201":{},"203":{},"223":{},"230":{},"255":{},"256":{},"278":{},"280":{},"282":{}},"component":{}}],["validation.initi",{"_index":6941,"title":{},"name":{},"text":{"172":{}},"component":{}}],["validation.r",{"_index":6940,"title":{},"name":{},"text":{"172":{}},"component":{}}],["valu",{"_index":309,"title":{"232":{},"5-7":{},"57-3":{},"57-4":{},"57-5":{},"57-6":{}},"name":{},"text":{"3":{},"11":{},"24":{},"27":{},"28":{},"29":{},"31":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"50":{},"51":{},"53":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"88":{},"93":{},"96":{},"97":{},"104":{},"106":{},"107":{},"108":{},"122":{},"130":{},"138":{},"139":{},"142":{},"143":{},"146":{},"147":{},"150":{},"151":{},"154":{},"159":{},"161":{},"162":{},"163":{},"165":{},"172":{},"176":{},"179":{},"184":{},"185":{},"190":{},"192":{},"194":{},"196":{},"199":{},"200":{},"203":{},"208":{},"209":{},"211":{},"213":{},"223":{},"241":{},"242":{},"255":{},"256":{},"270":{},"271":{},"277":{},"278":{},"282":{}},"component":{}}],["valuabl",{"_index":1183,"title":{},"name":{},"text":{"15":{},"21":{},"240":{},"262":{},"278":{}},"component":{}}],["value1",{"_index":5897,"title":{},"name":{},"text":{"122":{}},"component":{}}],["var",{"_index":5315,"title":{},"name":{},"text":{"85":{},"277":{},"278":{}},"component":{}}],["var/log",{"_index":6901,"title":{},"name":{},"text":{"172":{}},"component":{}}],["vari",{"_index":1499,"title":{},"name":{},"text":{"24":{},"38":{},"79":{},"154":{},"255":{},"277":{},"280":{},"282":{}},"component":{}}],["variabl",{"_index":442,"title":{"172-3":{}},"name":{},"text":{"3":{},"60":{},"97":{},"137":{},"142":{},"151":{},"172":{},"184":{},"205":{},"277":{}},"component":{}}],["variant",{"_index":3533,"title":{},"name":{},"text":{"60":{},"66":{},"79":{},"112":{}},"component":{}}],["variat",{"_index":4530,"title":{},"name":{},"text":{"66":{},"122":{},"271":{}},"component":{}}],["varieti",{"_index":4465,"title":{},"name":{},"text":{"66":{},"71":{},"185":{},"247":{},"253":{}},"component":{}}],["variou",{"_index":768,"title":{},"name":{},"text":{"5":{},"16":{},"22":{},"24":{},"30":{},"34":{},"39":{},"48":{},"55":{},"60":{},"64":{},"67":{},"72":{},"117":{},"134":{},"137":{},"140":{},"141":{},"142":{},"145":{},"149":{},"151":{},"152":{},"162":{},"168":{},"171":{},"174":{},"176":{},"180":{},"185":{},"197":{},"229":{},"239":{},"241":{},"245":{},"256":{},"258":{},"262":{},"263":{},"267":{},"270":{},"271":{},"274":{},"279":{},"280":{}},"component":{}}],["varying(255",{"_index":3922,"title":{},"name":{},"text":{"61":{}},"component":{}}],["vast",{"_index":2415,"title":{},"name":{},"text":{"36":{}},"component":{}}],["vendor",{"_index":1265,"title":{},"name":{},"text":{"23":{},"50":{},"63":{},"65":{}},"component":{}}],["verbos",{"_index":1375,"title":{},"name":{},"text":{"24":{}},"component":{}}],["verdockercomposeconnectiondetailsfactori",{"_index":8034,"title":{},"name":{},"text":{"281":{}},"component":{}}],["verif",{"_index":4561,"title":{"154-3":{},"155-3":{}},"name":{},"text":{"66":{},"244":{}},"component":{}}],["verifi",{"_index":1707,"title":{},"name":{},"text":{"27":{},"61":{},"66":{},"68":{},"75":{},"97":{},"147":{},"172":{},"201":{},"244":{}},"component":{}}],["vermorkentech",{"_index":3686,"title":{},"name":{},"text":{"60":{}},"component":{}}],["versa",{"_index":4367,"title":{},"name":{},"text":{"63":{},"139":{}},"component":{}}],["versatil",{"_index":7565,"title":{},"name":{},"text":{"231":{}},"component":{}}],["version",{"_index":90,"title":{"38":{},"2-7":{},"143-6":{},"270-9":{}},"name":{"38":{}},"text":{"2":{},"3":{},"4":{},"8":{},"23":{},"24":{},"26":{},"28":{},"29":{},"32":{},"38":{},"39":{},"44":{},"45":{},"52":{},"59":{},"60":{},"61":{},"65":{},"66":{},"71":{},"76":{},"81":{},"103":{},"106":{},"117":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"156":{},"163":{},"165":{},"166":{},"169":{},"171":{},"172":{},"176":{},"178":{},"180":{},"184":{},"185":{},"191":{},"212":{},"242":{},"245":{},"251":{},"260":{},"264":{},"266":{},"267":{},"270":{},"273":{},"274":{},"275":{},"276":{},"277":{}},"component":{}}],["version.axon",{"_index":1305,"title":{},"name":{},"text":{"23":{},"31":{}},"component":{}}],["version}.jar",{"_index":7268,"title":{},"name":{},"text":{"198":{}},"component":{}}],["versu",{"_index":1928,"title":{},"name":{},"text":{"31":{}},"component":{}}],["via",{"_index":580,"title":{"200-3":{},"200-4":{},"200-5":{},"208-5":{},"208-6":{},"209-6":{},"209-7":{},"211-5":{},"211-6":{}},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"18":{},"19":{},"31":{},"33":{},"52":{},"56":{},"70":{},"74":{},"79":{},"117":{},"119":{},"137":{},"141":{},"146":{},"151":{},"161":{},"170":{},"172":{},"184":{},"185":{},"199":{},"203":{},"208":{},"209":{},"210":{},"211":{},"215":{},"218":{},"221":{},"266":{},"278":{}},"component":{}}],["viabl",{"_index":3879,"title":{},"name":{},"text":{"61":{},"81":{}},"component":{}}],["vice",{"_index":4366,"title":{},"name":{},"text":{"63":{},"139":{}},"component":{}}],["video",{"_index":1913,"title":{},"name":{},"text":{"30":{},"55":{}},"component":{}}],["view",{"_index":820,"title":{},"name":{},"text":{"5":{},"51":{},"56":{},"63":{},"65":{},"80":{},"137":{},"162":{},"171":{},"176":{},"198":{},"199":{},"226":{},"231":{},"236":{},"239":{},"240":{},"241":{},"243":{},"255":{},"258":{},"261":{},"263":{},"266":{},"270":{},"271":{},"277":{}},"component":{}}],["view_configur",{"_index":6606,"title":{},"name":{},"text":{"162":{},"164":{},"171":{},"205":{}},"component":{}}],["view_configuration@_admin",{"_index":7336,"title":{},"name":{},"text":{"201":{}},"component":{}}],["viewer",{"_index":7636,"title":{},"name":{},"text":{"258":{}},"component":{}}],["violat",{"_index":2288,"title":{},"name":{},"text":{"35":{},"56":{}},"component":{}}],["virtual",{"_index":1377,"title":{},"name":{},"text":{"24":{},"35":{},"60":{}},"component":{}}],["visibl",{"_index":2921,"title":{},"name":{},"text":{"52":{},"97":{},"138":{},"227":{},"271":{}},"component":{}}],["visit",{"_index":1244,"title":{},"name":{},"text":{"23":{},"24":{},"31":{},"35":{},"198":{},"281":{}},"component":{}}],["visual",{"_index":6000,"title":{},"name":{},"text":{"131":{},"138":{},"141":{},"149":{},"151":{},"240":{},"247":{},"253":{}},"component":{}}],["visualt",{"_index":2963,"title":{},"name":{},"text":{"52":{}},"component":{}}],["vital",{"_index":4895,"title":{},"name":{},"text":{"79":{},"80":{},"181":{}},"component":{}}],["vitko",{"_index":3866,"title":{},"name":{},"text":{"61":{}},"component":{}}],["vm",{"_index":7229,"title":{"196-6":{}},"name":{},"text":{"196":{}},"component":{}}],["vmware",{"_index":6011,"title":{},"name":{},"text":{"131":{}},"component":{}}],["vm’",{"_index":7240,"title":{},"name":{},"text":{"196":{}},"component":{}}],["void",{"_index":1404,"title":{},"name":{},"text":{"24":{},"27":{},"28":{},"29":{},"31":{},"32":{},"35":{},"36":{},"37":{},"38":{},"43":{},"44":{},"50":{},"52":{},"54":{},"56":{},"62":{},"63":{},"66":{},"71":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"88":{},"89":{},"91":{},"93":{},"100":{},"103":{},"104":{},"107":{},"117":{},"122":{},"127":{},"146":{},"147":{},"180":{},"277":{},"278":{},"282":{}},"component":{}}],["volatil",{"_index":2274,"title":{},"name":{},"text":{"35":{}},"component":{}}],["volum",{"_index":146,"title":{"3-2":{}},"name":{},"text":{"2":{},"3":{},"137":{},"184":{},"281":{}},"component":{}}],["volumeclaimtempl",{"_index":651,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["volumemount",{"_index":632,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["vote",{"_index":6465,"title":{},"name":{},"text":{"149":{}},"component":{}}],["vpc",{"_index":7232,"title":{},"name":{},"text":{"196":{}},"component":{}}],["vs",{"_index":966,"title":{"35-25":{},"151-17":{}},"name":{},"text":{"7":{}},"component":{}}],["w",{"_index":7695,"title":{},"name":{"269":{}},"text":{},"component":{}}],["wacki",{"_index":3664,"title":{},"name":{},"text":{"60":{}},"component":{}}],["wait",{"_index":1024,"title":{},"name":{},"text":{"8":{},"27":{},"31":{},"54":{},"61":{},"80":{},"90":{},"91":{},"107":{},"121":{},"122":{},"142":{},"143":{},"144":{},"172":{},"176":{},"199":{},"203":{},"234":{},"255":{},"273":{},"274":{},"277":{},"278":{},"281":{}},"component":{}}],["wait_for_ack",{"_index":5588,"title":{},"name":{},"text":{"107":{}},"component":{}}],["waitstrategi",{"_index":2049,"title":{},"name":{},"text":{"31":{}},"component":{}}],["walk",{"_index":941,"title":{},"name":{},"text":{"7":{},"262":{},"265":{},"268":{}},"component":{}}],["want",{"_index":373,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"24":{},"26":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"44":{},"45":{},"50":{},"51":{},"52":{},"56":{},"57":{},"60":{},"63":{},"66":{},"70":{},"71":{},"73":{},"79":{},"80":{},"86":{},"88":{},"89":{},"91":{},"93":{},"96":{},"102":{},"103":{},"113":{},"117":{},"122":{},"126":{},"139":{},"144":{},"147":{},"148":{},"149":{},"150":{},"151":{},"161":{},"163":{},"167":{},"171":{},"180":{},"183":{},"184":{},"185":{},"192":{},"196":{},"223":{},"225":{},"231":{},"236":{},"239":{},"242":{},"243":{},"245":{},"247":{},"251":{},"254":{},"256":{},"261":{},"264":{},"267":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"276":{},"277":{},"278":{},"280":{},"281":{},"282":{}},"component":{}}],["warn",{"_index":1858,"title":{},"name":{},"text":{"29":{},"47":{},"52":{},"60":{},"61":{},"69":{},"75":{},"80":{},"137":{},"138":{},"172":{},"176":{},"241":{},"271":{}},"component":{}}],["warrant",{"_index":2903,"title":{},"name":{},"text":{"51":{}},"component":{}}],["wasn’t",{"_index":4278,"title":{},"name":{},"text":{"61":{}},"component":{}}],["wast",{"_index":4368,"title":{},"name":{},"text":{"63":{},"80":{}},"component":{}}],["wavefront",{"_index":6010,"title":{},"name":{},"text":{"131":{}},"component":{}}],["way",{"_index":530,"title":{"144-20":{}},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"23":{},"24":{},"26":{},"31":{},"32":{},"33":{},"35":{},"37":{},"46":{},"49":{},"51":{},"52":{},"57":{},"60":{},"62":{},"63":{},"66":{},"68":{},"70":{},"71":{},"79":{},"80":{},"85":{},"89":{},"91":{},"105":{},"112":{},"114":{},"116":{},"122":{},"126":{},"128":{},"139":{},"141":{},"143":{},"144":{},"151":{},"158":{},"172":{},"184":{},"185":{},"196":{},"197":{},"199":{},"201":{},"208":{},"209":{},"211":{},"213":{},"214":{},"216":{},"218":{},"223":{},"244":{},"255":{},"256":{},"261":{},"265":{},"266":{},"267":{},"270":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"280":{},"282":{}},"component":{}}],["we'd",{"_index":1409,"title":{},"name":{},"text":{"24":{}},"component":{}}],["weakreferencecach",{"_index":4697,"title":{},"name":{},"text":{"71":{}},"component":{}}],["web",{"_index":849,"title":{},"name":{},"text":{"5":{},"8":{},"31":{},"131":{},"172":{},"200":{},"208":{},"209":{},"211":{}},"component":{}}],["webflux",{"_index":5828,"title":{},"name":{},"text":{"122":{}},"component":{}}],["webpag",{"_index":1137,"title":{},"name":{},"text":{"11":{}},"component":{}}],["webserv",{"_index":3206,"title":{},"name":{},"text":{"60":{}},"component":{}}],["websit",{"_index":900,"title":{"8-2":{}},"name":{},"text":{"7":{},"8":{},"9":{},"23":{},"24":{},"35":{}},"component":{}}],["websocket",{"_index":6849,"title":{},"name":{},"text":{"172":{},"203":{}},"component":{}}],["week",{"_index":845,"title":{},"name":{},"text":{"5":{},"33":{},"63":{},"195":{}},"component":{}}],["week(timestamp",{"_index":7211,"title":{},"name":{},"text":{"192":{}},"component":{}}],["weight",{"_index":7462,"title":{},"name":{},"text":{"208":{}},"component":{}}],["weird",{"_index":3849,"title":{},"name":{},"text":{"61":{}},"component":{}}],["welcom",{"_index":883,"title":{},"name":{},"text":{"6":{},"197":{},"204":{}},"component":{}}],["well",{"_index":99,"title":{},"name":{},"text":{"2":{},"3":{},"24":{},"25":{},"28":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"41":{},"42":{},"44":{},"45":{},"50":{},"51":{},"52":{},"54":{},"57":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"74":{},"81":{},"96":{},"111":{},"137":{},"144":{},"146":{},"149":{},"151":{},"165":{},"167":{},"169":{},"176":{},"184":{},"185":{},"226":{},"241":{},"242":{},"245":{},"247":{},"253":{},"254":{},"255":{},"275":{}},"component":{}}],["went",{"_index":2790,"title":{},"name":{},"text":{"46":{}},"component":{}}],["weren’t",{"_index":4193,"title":{},"name":{},"text":{"61":{}},"component":{}}],["we’d",{"_index":3224,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["we’ll",{"_index":584,"title":{},"name":{},"text":{"3":{},"38":{},"56":{},"184":{}},"component":{}}],["we’r",{"_index":1430,"title":{},"name":{},"text":{"24":{}},"component":{}}],["we’v",{"_index":234,"title":{},"name":{},"text":{"3":{},"60":{},"79":{},"135":{},"137":{},"184":{},"185":{},"232":{}},"component":{}}],["whatev",{"_index":986,"title":{},"name":{},"text":{"8":{},"46":{},"61":{},"71":{}},"component":{}}],["what’",{"_index":738,"title":{"189":{},"5-1":{}},"name":{},"text":{"35":{},"38":{},"80":{},"91":{}},"component":{}}],["when(new",{"_index":4451,"title":{},"name":{},"text":{"66":{},"282":{}},"component":{}}],["when(object",{"_index":4496,"title":{},"name":{},"text":{"66":{}},"component":{}}],["whenconstruct",{"_index":3361,"title":{},"name":{},"text":{"60":{},"66":{}},"component":{}}],["whenconstructing(cal",{"_index":4502,"title":{},"name":{},"text":{"66":{}},"component":{}}],["whenev",{"_index":2391,"title":{},"name":{},"text":{"35":{},"52":{},"60":{},"61":{},"66":{},"79":{},"80":{},"81":{},"144":{},"277":{},"280":{}},"component":{}}],["wheninvok",{"_index":3362,"title":{},"name":{},"text":{"60":{}},"component":{}}],["wheninvoking(str",{"_index":4503,"title":{},"name":{},"text":{"66":{}},"component":{}}],["whentimeadvancesto",{"_index":4501,"title":{},"name":{},"text":{"66":{}},"component":{}}],["whentimeadvancesto(inst",{"_index":4500,"title":{},"name":{},"text":{"66":{}},"component":{}}],["whentimeadvanceto",{"_index":4610,"title":{},"name":{},"text":{"68":{}},"component":{}}],["whentimeelaps",{"_index":4499,"title":{},"name":{},"text":{"66":{},"68":{}},"component":{}}],["whentimeelapses(dur",{"_index":4498,"title":{},"name":{},"text":{"66":{}},"component":{}}],["whentimeelapses(duration.ofdays(31",{"_index":4594,"title":{},"name":{},"text":{"68":{}},"component":{}}],["whentimeelapses(duration.ofdays(31l",{"_index":5311,"title":{},"name":{},"text":{"83":{},"87":{}},"component":{}}],["wherea",{"_index":2217,"title":{},"name":{},"text":{"33":{},"35":{},"60":{},"61":{},"79":{},"80":{},"104":{},"126":{},"151":{}},"component":{}}],["wherein",{"_index":5117,"title":{},"name":{},"text":{"80":{}},"component":{}}],["whether",{"_index":1571,"title":{},"name":{},"text":{"25":{},"27":{},"28":{},"31":{},"35":{},"38":{},"42":{},"45":{},"47":{},"51":{},"52":{},"53":{},"54":{},"56":{},"61":{},"66":{},"71":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"92":{},"107":{},"126":{},"127":{},"144":{},"169":{},"172":{},"180":{},"203":{},"208":{},"209":{},"211":{},"234":{},"243":{},"254":{},"264":{},"270":{},"273":{},"274":{},"277":{}},"component":{}}],["whilst",{"_index":1703,"title":{},"name":{},"text":{"27":{},"28":{},"44":{},"61":{},"75":{},"218":{},"223":{}},"component":{}}],["whole",{"_index":5371,"title":{},"name":{},"text":{"91":{},"151":{},"192":{},"254":{},"261":{}},"component":{}}],["whose",{"_index":1262,"title":{},"name":{},"text":{"23":{},"33":{},"50":{},"79":{},"104":{},"270":{},"277":{},"278":{},"282":{}},"component":{}}],["wich",{"_index":1202,"title":{},"name":{},"text":{"17":{},"19":{}},"component":{}}],["wide",{"_index":4464,"title":{},"name":{},"text":{"66":{},"79":{},"137":{},"236":{},"239":{}},"component":{}}],["width",{"_index":3919,"title":{},"name":{},"text":{"61":{}},"component":{}}],["wildcard",{"_index":3178,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["win",{"_index":1427,"title":{},"name":{},"text":{"24":{},"25":{},"149":{},"218":{}},"component":{}}],["window",{"_index":4239,"title":{"270-12":{}},"name":{},"text":{"61":{},"135":{},"142":{},"165":{},"172":{},"198":{},"199":{},"205":{},"270":{}},"component":{}}],["wipe",{"_index":7551,"title":{},"name":{},"text":{"223":{}},"component":{}}],["wire",{"_index":1583,"title":{},"name":{},"text":{"25":{},"31":{},"44":{},"45":{},"60":{},"63":{},"79":{},"80":{},"101":{},"103":{}},"component":{}}],["wise",{"_index":4990,"title":{},"name":{},"text":{"79":{},"130":{}},"component":{}}],["wisest",{"_index":1453,"title":{},"name":{},"text":{"24":{}},"component":{}}],["wish",{"_index":987,"title":{},"name":{},"text":{"8":{},"25":{},"32":{},"35":{},"66":{},"98":{},"117":{},"118":{},"119":{},"137":{},"162":{},"166":{}},"component":{}}],["within",{"_index":125,"title":{"5-4":{},"5-5":{},"79-3":{}},"name":{},"text":{"2":{},"5":{},"7":{},"22":{},"23":{},"24":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"46":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"68":{},"69":{},"71":{},"73":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"94":{},"107":{},"109":{},"117":{},"122":{},"126":{},"137":{},"139":{},"140":{},"141":{},"142":{},"145":{},"146":{},"149":{},"151":{},"154":{},"155":{},"162":{},"165":{},"169":{},"171":{},"172":{},"176":{},"185":{},"197":{},"206":{},"227":{},"231":{},"236":{},"241":{},"258":{},"267":{},"270":{},"274":{},"276":{},"278":{}},"component":{}}],["withmetadata",{"_index":2544,"title":{},"name":{},"text":{"40":{}},"component":{}}],["withmetadata(singletonmap(\"mykey",{"_index":2541,"title":{},"name":{},"text":{"40":{}},"component":{}}],["without",{"_index":140,"title":{"50-5":{},"50-7":{},"52-28":{},"52-39":{},"52-42":{},"52-45":{},"80-63":{},"162-4":{}},"name":{},"text":{"2":{},"3":{},"23":{},"24":{},"28":{},"31":{},"32":{},"52":{},"56":{},"60":{},"61":{},"62":{},"63":{},"66":{},"75":{},"79":{},"80":{},"108":{},"112":{},"118":{},"122":{},"137":{},"139":{},"140":{},"141":{},"143":{},"144":{},"146":{},"151":{},"160":{},"162":{},"165":{},"167":{},"169":{},"171":{},"184":{},"185":{},"196":{},"200":{},"203":{},"208":{},"212":{},"218":{},"236":{},"239":{},"247":{},"253":{},"255":{},"267":{},"272":{},"275":{},"278":{},"280":{},"281":{}},"component":{}}],["withsubtypes(subtyp",{"_index":4749,"title":{},"name":{},"text":{"74":{}},"component":{}}],["won’t",{"_index":2286,"title":{},"name":{},"text":{"35":{},"76":{},"80":{},"97":{},"106":{},"163":{},"212":{},"282":{}},"component":{}}],["word",{"_index":1485,"title":{},"name":{},"text":{"24":{},"35":{},"37":{},"38":{},"61":{},"78":{},"144":{}},"component":{}}],["work",{"_index":72,"title":{"46":{},"2-3":{},"199-6":{},"199-10":{},"199-14":{}},"name":{"46":{}},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"15":{},"21":{},"24":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"40":{},"43":{},"44":{},"45":{},"46":{},"50":{},"52":{},"56":{},"60":{},"61":{},"63":{},"65":{},"66":{},"71":{},"79":{},"80":{},"86":{},"95":{},"97":{},"101":{},"104":{},"107":{},"111":{},"117":{},"119":{},"121":{},"124":{},"137":{},"138":{},"143":{},"144":{},"151":{},"160":{},"162":{},"163":{},"165":{},"172":{},"173":{},"184":{},"197":{},"201":{},"205":{},"208":{},"217":{},"218":{},"247":{},"255":{},"256":{},"261":{},"263":{},"264":{},"265":{},"266":{},"270":{},"274":{},"275":{},"277":{},"278":{},"282":{}},"component":{}}],["work/axon",{"_index":1048,"title":{},"name":{},"text":{"8":{}},"component":{}}],["workdir",{"_index":368,"title":{},"name":{},"text":{"3":{},"184":{}},"component":{}}],["worker",{"_index":3924,"title":{},"name":{},"text":{"61":{},"80":{},"277":{}},"component":{}}],["workerexecutor(workerexecutorbuild",{"_index":5163,"title":{},"name":{},"text":{"80":{}},"component":{}}],["workerexecutorbuild",{"_index":5159,"title":{},"name":{},"text":{"80":{}},"component":{}}],["workerlaunch",{"_index":4189,"title":{},"name":{},"text":{"61":{}},"component":{}}],["workflow",{"_index":3576,"title":{},"name":{},"text":{"60":{}},"component":{}}],["worklaunch",{"_index":4088,"title":{},"name":{},"text":{"61":{}},"component":{}}],["workload",{"_index":5527,"title":{},"name":{},"text":{"104":{},"261":{},"273":{}},"component":{}}],["workpackag",{"_index":5155,"title":{},"name":{},"text":{"80":{}},"component":{}}],["workspac",{"_index":757,"title":{"257":{},"5-11":{},"234-2":{},"273-1":{}},"name":{},"text":{"5":{},"228":{},"229":{},"234":{},"235":{},"236":{},"238":{},"244":{},"245":{},"256":{},"257":{},"258":{},"273":{},"274":{}},"component":{}}],["workspace’",{"_index":7749,"title":{},"name":{},"text":{"273":{}},"component":{}}],["work’",{"_index":2767,"title":{},"name":{},"text":{"46":{}},"component":{}}],["world",{"_index":7571,"title":{},"name":{},"text":{"231":{},"278":{}},"component":{}}],["worri",{"_index":1596,"title":{},"name":{},"text":{"26":{},"144":{},"238":{},"261":{},"266":{},"270":{}},"component":{}}],["worth",{"_index":4131,"title":{},"name":{},"text":{"61":{},"77":{},"282":{}},"component":{}}],["worthi",{"_index":1774,"title":{},"name":{},"text":{"28":{},"33":{}},"component":{}}],["wrap",{"_index":1696,"title":{},"name":{},"text":{"27":{},"31":{},"36":{},"41":{},"42":{},"56":{},"61":{},"63":{},"65":{},"66":{},"71":{},"93":{},"116":{},"117":{}},"component":{}}],["wraphandl",{"_index":5378,"title":{},"name":{},"text":{"93":{}},"component":{}}],["wraphandler(messagehandlingmemb",{"_index":5382,"title":{},"name":{},"text":{"93":{}},"component":{}}],["wrappedmessagehandlingmemb",{"_index":5389,"title":{},"name":{},"text":{"93":{}},"component":{}}],["wrapper",{"_index":1301,"title":{},"name":{},"text":{"23":{},"29":{},"35":{},"60":{},"122":{}},"component":{}}],["writabl",{"_index":275,"title":{},"name":{},"text":{"3":{},"172":{},"184":{}},"component":{}}],["write",{"_index":283,"title":{"38-3":{},"57-1":{}},"name":{},"text":{"3":{},"7":{},"10":{},"24":{},"35":{},"38":{},"57":{},"60":{},"63":{},"65":{},"68":{},"71":{},"86":{},"96":{},"121":{},"138":{},"140":{},"141":{},"142":{},"151":{},"162":{},"164":{},"170":{},"172":{},"184":{},"196":{},"201":{},"255":{},"278":{},"280":{},"282":{}},"component":{}}],["writeabl",{"_index":6974,"title":{},"name":{},"text":{"172":{}},"component":{}}],["writer",{"_index":6972,"title":{},"name":{},"text":{"172":{}},"component":{}}],["written",{"_index":292,"title":{},"name":{},"text":{"3":{},"10":{},"15":{},"21":{},"38":{},"60":{},"80":{},"81":{},"110":{},"111":{},"140":{},"142":{},"144":{},"172":{},"184":{},"197":{}},"component":{}}],["wrong",{"_index":2791,"title":{},"name":{},"text":{"46":{},"60":{},"61":{},"91":{},"143":{},"247":{},"253":{},"254":{},"256":{}},"component":{}}],["wrongfulli",{"_index":4209,"title":{},"name":{},"text":{"61":{}},"component":{}}],["wrote",{"_index":4291,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ws",{"_index":7443,"title":{},"name":{},"text":{"203":{}},"component":{}}],["x",{"_index":1502,"title":{},"name":{},"text":{"24":{},"32":{},"38":{},"76":{},"138":{},"195":{},"201":{},"212":{},"256":{},"277":{},"280":{}},"component":{}}],["xml",{"_index":1333,"title":{},"name":{},"text":{"24":{},"35":{},"81":{},"183":{},"192":{},"200":{},"213":{},"216":{}},"component":{}}],["xml’",{"_index":1396,"title":{},"name":{},"text":{"24":{}},"component":{}}],["xom",{"_index":1514,"title":{},"name":{},"text":{"24":{}},"component":{}}],["xpath",{"_index":5291,"title":{},"name":{},"text":{"81":{},"192":{}},"component":{}}],["xpath(data",{"_index":7199,"title":{},"name":{},"text":{"192":{}},"component":{}}],["xpath(payloaddata",{"_index":7214,"title":{},"name":{},"text":{"192":{}},"component":{}}],["xref",{"_index":3222,"title":{},"name":{},"text":{"60":{},"172":{}},"component":{}}],["xref:../deadlines/deadlin",{"_index":4567,"title":{},"name":{},"text":{"66":{}},"component":{}}],["xref:axon",{"_index":7704,"title":{},"name":{},"text":{"270":{}},"component":{}}],["xref:monitoring/index.adoc",{"_index":7672,"title":{},"name":{},"text":{"264":{}},"component":{}}],["xstream",{"_index":1332,"title":{"38-4":{}},"name":{},"text":{"24":{},"35":{},"60":{},"61":{}},"component":{}}],["xstream(xstream",{"_index":1408,"title":{},"name":{},"text":{"24":{}},"component":{}}],["xstreamseri",{"_index":1323,"title":{"24-7":{},"24-11":{}},"name":{},"text":{"24":{},"35":{},"60":{},"61":{},"63":{},"65":{},"71":{},"108":{},"154":{}},"component":{}}],["xstreamserializer#defaultseri",{"_index":4045,"title":{},"name":{},"text":{"61":{}},"component":{}}],["xstreamserializer.build",{"_index":1407,"title":{},"name":{},"text":{"24":{}},"component":{}}],["xstreamserializer.builder().build",{"_index":5472,"title":{},"name":{},"text":{"101":{}},"component":{}}],["xstreamserializer’",{"_index":2385,"title":{},"name":{},"text":{"35":{}},"component":{}}],["xstream’",{"_index":1384,"title":{},"name":{},"text":{"24":{},"61":{}},"component":{}}],["y",{"_index":1503,"title":{},"name":{},"text":{"24":{},"196":{}},"component":{}}],["yaml",{"_index":1322,"title":{"24-5":{}},"name":{},"text":{"141":{},"147":{},"170":{},"179":{},"281":{}},"component":{}}],["ye",{"_index":144,"title":{},"name":{},"text":{"2":{},"5":{},"28":{},"45":{},"52":{},"256":{}},"component":{}}],["year",{"_index":558,"title":{},"name":{},"text":{"3":{},"135":{},"137":{},"184":{},"195":{}},"component":{}}],["year(timestamp",{"_index":7213,"title":{},"name":{},"text":{"192":{}},"component":{}}],["yellow",{"_index":802,"title":{},"name":{},"text":{"5":{}},"component":{}}],["yield",{"_index":1506,"title":{},"name":{},"text":{"24":{}},"component":{}}],["yieldingwaitstrategi",{"_index":2055,"title":{},"name":{},"text":{"31":{}},"component":{}}],["you'r",{"_index":4685,"title":{},"name":{},"text":{"71":{}},"component":{}}],["your_instance_nam",{"_index":7249,"title":{},"name":{},"text":{"196":{}},"component":{}}],["yourroutingstrategi",{"_index":2117,"title":{},"name":{},"text":{"31":{}},"component":{}}],["yourself",{"_index":724,"title":{},"name":{},"text":{"4":{},"5":{},"24":{},"46":{},"52":{},"71":{},"80":{},"109":{},"143":{},"160":{},"171":{},"234":{},"254":{}},"component":{}}],["you’d",{"_index":2287,"title":{},"name":{},"text":{"35":{}},"component":{}}],["you’ll",{"_index":785,"title":{},"name":{},"text":{"5":{},"93":{},"159":{},"161":{},"165":{},"167":{},"197":{},"199":{},"200":{},"232":{}},"component":{}}],["you’r",{"_index":97,"title":{},"name":{},"text":{"2":{},"5":{},"23":{},"24":{},"35":{},"61":{},"77":{},"151":{},"198":{},"200":{}},"component":{}}],["you’v",{"_index":7276,"title":{},"name":{},"text":{"198":{},"200":{}},"component":{}}],["yvonneceeli",{"_index":3665,"title":{},"name":{},"text":{"60":{}},"component":{}}],["yyyi",{"_index":7164,"title":{},"name":{},"text":{"183":{}},"component":{}}],["z][a",{"_index":6416,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["z_",{"_index":6417,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["za",{"_index":6415,"title":{},"name":{},"text":{"146":{},"171":{}},"component":{}}],["zero",{"_index":93,"title":{},"name":{},"text":{"2":{},"7":{},"26":{},"38":{},"61":{},"79":{},"92":{},"135":{},"151":{},"176":{},"196":{},"203":{},"216":{},"224":{},"233":{},"247":{}},"component":{}}],["zip",{"_index":6147,"title":{},"name":{},"text":{"140":{},"163":{},"165":{},"178":{},"185":{},"198":{},"205":{}},"component":{}}],["zone",{"_index":6139,"title":{},"name":{},"text":{"140":{},"196":{}},"component":{}}],["zone=your_zon",{"_index":7250,"title":{},"name":{},"text":{"196":{}},"component":{}}],["zoom",{"_index":7736,"title":{},"name":{},"text":{"270":{}},"component":{}}],["zpage",{"_index":7145,"title":{},"name":{},"text":{"179":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Extensions may have different licenses than the core framework. While some extensions are maintained and released by AxonIQ, some may be provided by a third party. AxonIQ cannot guarantee compatibility for extensions with each individual Axon Framework release. JGroups Extension Reference Extension adding JGroups integration for command routing JobRunr Pro Extension Reference Extensions adding JobRunr Pro integration for deadline management Kafka Extension Reference Extension adding Kafka integration for event streaming Kotlin Extension Reference Extension enhancing the development experience when using Kotlin MongoDB Extension Reference Extension adding MongoDB integration for all Axon Framework components requiring storage Multitenancy Extension Reference Extension adding building blocks to simplify multitenancy, particularly straightforward in combination with Axon Server Reactor Extension Reference Extension providing Axon Framework-specific infrastructure components using the Project Reactor API Spring AMQP Reference Extension adding AMQP support for event streaming Spring AOT Extension Guide Extension providing native compilation for Axon and Spring-based applications Spring Cloud Extension Guide Extension adding Spring Cloud integration for command routing Tracing Extension Guide Extension adding OpenTracing integration to Axon's infrastructure components, superseded by integrated Open Telemetry support","title":"Axon Framework Extensions","component":"axon-framework-extensions","version":"","name":"index","url":"/axon-framework-extensions/","titles":[{"text":"Extensions","id":1}]},"2":{"id":2,"text":"Answer: Axon Server is a zero-configuration message router and event store. If you’re a Java developer, it works well with Axon Framework-based applications. However, if you’re using Python, Node.js, C# (or any other major programming language), it provides out-of-the-box message routing and event storage. Answer: Here’s a short list of features of the Axon Server: Out of the box, zero configuration Message Routing Event sourcing capabilities with an infinitely scalable Event Store Real-time observability and insights into the messages exchanged between your applications Role-based Access Control for both users and applications Easy to scale-out and configure within a clustered environment Answer: Unlike other messaging solutions like Apache Kafka, which only natively provides message routing, Axon Server works as both a message router and an Event Store. As a dedicated Event Store, Axon Server is designed to store events to enable your microservices applications to be event-sourced. This ensures that events are stored durably and indefinitely and provides superior scalability and throughput without complex database tuning. Answer: Yes, Axon Server is built to handle large-scale event storage needs with its infinitely scalable event store, which can manage large volumes of events without performance degradation. Answer: Axon Server includes robust security features such as authentication, authorization, and the ability to integrate with external security providers like LDAP and OAuth for enhanced security measures. Answer: Back in 2023, we decided to phase out the Standard edition and replaced it with a single Axon Server JAR. This enabled our customers to easily upgrade to \"Enterprise Features\" without installing a different artifact. Now, starting in 2024, we have launched new features and capabilities for the Axon Server. In order to make Axon Server to seamlessly grow according to the needs of our customers, we now have for simple plans: Developer plan (formerly called the “Axon Server Standard Edition”) Starter plan (adds the capability for Clustering) Pro plan (adds the capability for Multi-context and additional authentication features ) Enterprise plan We love our active developer community. So developers can feel comfortable that our Axon Server Developer plan is and will always remain free. Answer: Although the Open Source version of Axon Server is still available, it has been deprecated and is no longer maintained. We encourage our Open Source users to get started with the Developer plan in order to get the latest updates and to have compatibility with future versions of Axon Framework.","title":"FAQ for Axon Server","component":"as-faq","version":"master","name":"as-faq","url":"/as-faq/as-faq/","titles":[{"text":"Q: So, what exactly is Axon Server?","hash":"_q_so_what_exactly_is_axon_server","id":1},{"text":"Q: What are some of the main features of Axon Server?","hash":"_q_what_are_some_of_the_main_features_of_axon_server","id":2},{"text":"Q: How does Axon Server work as an Event Store?","hash":"_q_how_does_axon_server_work_as_an_event_store","id":3},{"text":"Q: Since RDBMs have problems with scalability, let’s discuss scale. Can Axon Server handle large-scale event storage needs?","hash":"_q_since_rdbms_have_problems_with_scalability_lets_discuss_scale_can_axon_server_handle_large_scale_event_storage_needs","id":4},{"text":"Q: What security features does Axon Server offer?","hash":"_q_what_security_features_does_axon_server_offer","id":5},{"text":"Q: What happened to the Standard and Enterprise editions of Axon Server?","hash":"_q_what_happened_to_the_standard_and_enterprise_editions_of_axon_server","id":6},{"text":"Q:  What happened to the Open Source version of Axon Server?","hash":"_q_what_happened_to_the_open_source_version_of_axon_server","id":7}]},"3":{"id":3,"text":"This section is split into 4 sub-sections. The Axon Server Docker Image Construction of the Axon Server Docker Image Deployment using Docker Compose Deployment using Kubernetes Unified Axon Server Artifact In an effort to simplify the deployment process, since 2023.1 version we’ve updated Axon Server to release a single artifact, replacing the previously separate artifacts for the Standard and Enterprise edition. Depending on the presence of a license, Axon Server will now automatically adjust. AxonIQ provides ready to use Axon Server images. There are two types of images available: one with Axon Server running as the user “root” and one with Axon Server running as user “axonserver”. Both images are based on Eclipse Temurin, which means they include a (limited) shell that allows you to connect \"into\" the running image and perform some commands. The “root” image of version 2023.1 is available as “axoniq/axonserver:2023.1” and is based on “eclipse-temurin:11-focal”. This image is particularly useful for running in Docker Desktop, as it will not have any trouble creating files and directories as user “root”. The axonserver image of version 2023.1 is available as “axoniq/axonserver:2023.1-nonroot” and is based on the same Eclipse Temurin image. This image is more secure and useful in Kubernetes and OpenShift clusters. You should take care to declare the user- and group-id, both of which are 1001 and are named “axonserver”. Doing this will ensure that any mounted volumes will be writable by the user running Axon Server. The images export the following volumes: This is where you can add configuration files, such as an additional axonserver.properties and the license file. However, you can also opt to use, for instance, Kubernetes, or Docker-compose secrets. Note that Axon Server EE assumes it can write to the directory configured with “axoniq.axonserver.enterprise.licenseDirectory”, so you don’t have to put the license on all nodes. This is where the ControlDB, the PID file, and a copy of the application logs are written to. In this volume the Event Store is created, with a single directory per context. In this volume the Replication Logs are created, with a single directory per Replication Group. In this volume you can place Extension JAR-files, such as the LDAP and OAuth2 extensions. In this volume Axon Server will place all uploaded plugins. Using the axoniq/axonserver:latest image Up to release 2023.2.0 the default Axon Server image (axoniq/axonserver:latest) was using Axon Server Standard Edition version 4.6.11. There is a difference in the directory structure between version 4.6.11 and the current version. One change is that the working directory has changed from / to /axonserver. All files and directories created by Axon Server are stored in this directory (or subdirectories). The following locations have new default values: Property Axon Server SE 4.6.11 Axon Server 2023.2 axoniq.axonserver.event.storage /eventdata /axonserver/events axoniq.axonserver.snapshot.storage /eventdata /axonserver/events axoniq.axonserver.controldb-path /data /axonserver/data axoniq.axonserver.plugin-package-directory /data/plugins/bundles /axonserver/plugins/bundles axoniq.axonserver.plugin-cache-directory /data/plugins/cache /axonserver/plugins/cache logging.file /data/axonserver.log /axonserver/data/axonserver.log As these locations have changed you need to update the volume mappings that you use in the container. The mapping for /eventdata must be changed to /axonserver/events, and the mapping for /data must be changed to /axonserver/data. A starter Dockerfile is included below which can be tailored as per your requirements. The starter file helps create the image in multiple stages, The image will be based on a compact image from Google’s distroless base images at the gcr.io repository, in this case gcr.io/distroless/java:11. The first stage creates the directories that will become our volumes. This step cannot be performed in the Distroless image, because that image does not provide a shell. The second stage begins by copying the home directory with its volume mount points, carefully keeping ownership set to the new user. The last steps copy the executable jar named axonserver.jar and a common set of properties. It marks the volume mounting points and exposed ports and finally specifies the command to start Axon Server EE. FROM busybox as source RUN mkdir -p /axonserver/config /axonserver/data /axonserver/events /axonserver/log /axonserver/exts FROM gcr.io/distroless/java:11 COPY --from=source /axonserver /axonserver COPY axonserver.jar axonserver.properties /axonserver/ WORKDIR /axonserver VOLUME [ \"/axonserver/config\", \"/axonserver/data\", \"/axonserver/events\", \"/axonserver/log\", \"/axonserver/exts\", \"/axonserver/plugins\" ] EXPOSE 8024/tcp 8124/tcp 8224/tcp ENTRYPOINT [ \"java\", \"-jar\", \"./axonserver.jar\" ] If you want to build a \"nonroot\" version, you need to adjust this as follows: FROM busybox as source RUN addgroup -S -g 1001 axonserver \\ && adduser -S -u 1001 -G axonserver -h /axonserver -D axonserver \\ && mkdir -p /axonserver/config /axonserver/data /axonserver/events /axonserver/log /axonserver/exts \\ && chown -R axonserver:axonserver /axonserver FROM gcr.io/distroless/java:11 COPY --from=source /etc/passwd /etc/group /etc/ COPY --from=source --chown=axonserver /axonserver /axonserver COPY --chown=axonserver axonserver.jar axonserver.properties /axonserver/ USER axonserver WORKDIR /axonserver VOLUME [ \"/axonserver/config\", \"/axonserver/data\", \"/axonserver/events\", \"/axonserver/log\", \"/axonserver/exts\", \"/axonserver/plugins\" ] EXPOSE 8024/tcp 8124/tcp 8224/tcp ENTRYPOINT [ \"java\", \"-jar\", \"./axonserver.jar\" ] As you can see this will start by creating the user “axonserver” belonging to a group with the same name. When copying the directory, we now have to ensure that ownership transfers correctly and specify the user to run as, but otherwise it looks pretty similar. For the common properties (axonserver.properties), the minimum set can be added to ensure that the volumes get mounted and logs generated. Again these can be tailored as per the deployment requirements. axoniq.axonserver.event.storage=./events axoniq.axonserver.snapshot.storage=./events axoniq.axonserver.replication.log-storage-folder=./log axoniq.axonserver.enterprise.licenseDirectory=./config #axoniq.axonserver.accesscontrol.systemtokenfile=./config/axonserver.token axoniq.axonserver.controldb-path=./data axoniq.axonserver.pid-file-location=./data logging.file=./data/axonserver.log logging.file.max-history=10 logging.file.max-size=10MB Place the Dockerfile, the Axon Server jar file (axonserver.jar), the Axon Server client jar file (axonserver-cli.jar) and the axonserver.properties in the current directory. Assuming we are building version 2023.1.1, the image can be constructed using the following command: $ docker build --tag my-repository/axonserver:2023.1.1. This completes the construction of the Docker image. The image can pushed to your local repository or you could keep it local if you only want to run it on your development machine. The next step is to run it either using Docker Compose or Kubernetes. If you want to run the docker image for a standalone instance of Axon Server and have it initialized automatically, you can start it with the axoniq.axonserver.standalone property set through the environment, for instance: $ docker run -dit -e axoniq.axonserver.standalone=true -p 8024:8024 -p 8124:8124 my-repository/axonserver:2023.1.1 Axon Server is meant to be run in a distributed manner, as a cluster where there will be multiple instances of Axon Server nodes running all interconnected to each other. The installation process assumes that Docker Compose will be used to run a 3-node Axon Server cluster, that is running 3 services of the same container image we built above. Let us designate these services as \"axonserver-1\", \"axonserver-2\" and \"axonserver-3\". We will also give a tag to the image that we constructed above as my-repository/axonserver:2023.1. Each container instance will use separate volumes for data, events, and log. An environment variable is added to tell Axon Server about the location of the license file. We will use \"secrets\" to inject the license file, tokens as well as the cluster/context definitions using the autocluster mechanism. The complete docker-compose file is depicted below. version: '3.3' services: axonserver-1: image: my-repository/axonserver:2023.1 hostname: axonserver-1 volumes: - axonserver-data1:/axonserver/data - axonserver-events1:/axonserver/events - axonserver-log1:/axonserver/log secrets: - source: axoniq-license target: /axonserver/config/axoniq.license - source: axonserver-properties target: /axonserver/config/axonserver.properties - source: axonserver-token target: /axonserver/config/axonserver.token environment: - AXONIQ_LICENSE=/axonserver/config/axoniq.license ports: - '8024:8024' - '8124:8124' - '8224:8224' networks: - axon-demo axonserver-2: image: my-repository/axonserver:2023.1 hostname: axonserver-2 volumes: - axonserver-data2:/axonserver/data - axonserver-events2:/axonserver/events - axonserver-log2:/axonserver/log secrets: - source: axoniq-license target: /axonserver/config/axoniq.license - source: axonserver-properties target: /axonserver/config/axonserver.properties - source: axonserver-token target: /axonserver/config/axonserver.token environment: - AXONIQ_LICENSE=/axonserver/config/axoniq.license ports: - '8025:8024' - '8125:8124' - '8225:8224' networks: - axon-demo axonserver-3: image: my-repository/axonserver:2023.1 hostname: axonserver-3 volumes: - axonserver-data3:/axonserver/data - axonserver-events3:/axonserver/events - axonserver-log3:/axonserver/log secrets: - source: axoniq-license target: /axonserver/config/axoniq.license - source: axonserver-properties target: /axonserver/config/axonserver.properties - source: axonserver-token target: /axonserver/config/axonserver.token environment: - AXONIQ_LICENSE=/axonserver/config/axoniq.license ports: - '8026:8024' - '8126:8124' - '8226:8224' networks: - axon-demo volumes: axonserver-data1: driver: local driver_opts: type: none device: ${PWD}/data1 o: bind axonserver-events1: driver: local driver_opts: type: none device: ${PWD}/events1 o: bind axonserver-log1: driver: local driver_opts: type: none device: ${PWD}/log1 o: bind axonserver-data2: driver: local driver_opts: type: none device: ${PWD}/data2 o: bind axonserver-events2: driver: local driver_opts: type: none device: ${PWD}/events2 o: bind axonserver-log2: driver: local driver_opts: type: none device: ${PWD}/log2 o: bind axonserver-data3: driver: local driver_opts: type: none device: ${PWD}/data3 o: bind axonserver-events3: driver: local driver_opts: type: none device: ${PWD}/events3 o: bind axonserver-log3: driver: local driver_opts: type: none device: ${PWD}/log3 o: bind networks: axon-demo: secrets: axonserver-properties: file: ./axonserver.properties axoniq-license: file: ./axoniq.license axonserver-token: file: ./axonserver.token The axonserver-token secret is used to allow the CLI to talk with nodes. The access control section details the generation of these tokens. A similar approach can be used to configure more secrets for the certificates, and so enable SSL. The axonserver.properties properties file referred to in the secrets’ definition section is depicted below. axoniq.axonserver.autocluster.first=axonserver-1 axoniq.axonserver.autocluster.contexts=_admin,default # We highly recommend protecting your installations at all time, hence why access control is enabled here. # For quick testing, you can disable this, but be sure to switch it big with high priority. axoniq.axonserver.accesscontrol.enabled=true axoniq.axonserver.accesscontrol.internal-token=${generated_token} axoniq.axonserver.accesscontrol.systemtokenfile=/axonserver/config/axonserver.tok Starting Axon Server using the docker-compose command is depicted below. $ docker-compose up For example purposes only The examples below show only one of the ways you could deploy Axon Server to Kubernetes. As discussed in this Blog article, there are many aspects that you need to carefully plan ahaead for. A complete set of examples can be found in the Running Axon Server GitHub repository. We especially recommend using https://github.com/AxonIQ/running-axon-server/tree/master/3-k8s/4-k8s-ssts-tls[the \"Singleton StatefulSet\" approach]. Although the complexity of deploying any application to Kubernetes can be overwhelming, we strongly recommend you to study this subject carefully. The examples we provide are not necessarily the best approach for your particular situation, so be careful about copying them without any further modifications, if only because they generate self-signed certificates that have a one-year validity. An important thing to consider is the use of a \"nonroot\" image. This is due to the fact that volumes are mounted as owned by the mount location’s owner in Docker, while Kubernetes uses a special security context, defaulting to root. Since a \"nonroot\" image runs Axon Server under its own user, it has no rights on the mounted volume other than read. The context can be specified, but only through the user or group’s ID, and not using their name as we did in the image, because that name does not exist in the k8s management context. So we have to adjust the first stage to specify a specific numeric value (here we have given 1001) , and then use that value in the security context of the Stateful set which we shall see below. We would need to supply a licence/token file (for client applications) and cluster/context definitions via an axonserver.properties file. Unlike Docker Compose, Kubernetes mounts Secrets and ConfigMaps as directories rather than files, so we need to split license and configuration to two separate locations. For the license secret we can use a new location /axonserver/license/axoniq.license and adjust the environment variable to match. For the system token we’ll use /axonserver/security/token.txt, and for the properties file we’ll use a ConfigMap that we mount on top of the /axonserver/config directory. These can be created using kubectl directly from their respective file as depicted below. It is recommended to create a dedicated namespace before creating the secrets and the config maps. $ kubectl create secret generic axonserver-license --from-file=./axoniq.license -n ${axonserver-ns} secret/axonserver-license created $ kubectl create secret generic axonserver-token --from-file=./axoniq.token -n ${axonserver-ns} secret/axonserver-token created $ kubectl create configmap axonserver-properties --from-file=./axonserver.properties -n ${axonserver-ns} configmap/axonserver-properties created $ In the descriptor we now have to declare the secret, add a volume for it, and mount the secret on the volume. Then a list of volumes has to be added to link the actual license and properties. The complete spec for the Axon Server Stateful set is given below. This includes the security context, the volume mounts, the readiness and liveness probes and finally the volumes. apiVersion: apps/v1 kind: StatefulSet metadata: name: axonserver labels: app: axonserver spec: serviceName: axonserver replicas: 1 selector: matchLabels: app: axonserver template: metadata: labels: app: axonserver spec: securityContext: runAsUser: 1001 fsGroup: 1001 containers: - name: axonserver image: axoniq/axonserver:latest-dev-nonroot imagePullPolicy: IfNotPresent ports: - name: grpc containerPort: 8124 protocol: TCP - name: gui containerPort: 8024 protocol: TCP env: - name: AXONIQ_LICENSE value: /axonserver/license/axoniq.license volumeMounts: - name: data mountPath: /axonserver/data - name: events mountPath: /axonserver/events - name: log mountPath: /axonserver/log - name: config mountPath: /axonserver/config readOnly: true - name: system-token mountPath: /axonserver/security readOnly: true - name: license mountPath: /axonserver/license readOnly: true readinessProbe: httpGet: path: /actuator/info port: 8024 initialDelaySeconds: 5 periodSeconds: 5 timeoutSeconds: 1 failureThreshold: 30 livenessProbe: httpGet: path: /actuator/info port: 8024 initialDelaySeconds: 5 periodSeconds: 10 successThreshold: 1 failureThreshold: 3 volumes: - name: config configMap: name: axonserver-properties - name: system-token secret: secretName: axonserver-token - name: license secret: secretName: axonserver-license volumeClaimTemplates: - metadata: name: events spec: accessModes: [ ReadWriteOnce ] resources: requests: storage: 5Gi - metadata: name: log spec: accessModes: [ ReadWriteOnce ] resources: requests: storage: 1Gi - metadata: name: data spec: accessModes: [ ReadWriteOnce ] resources: requests: storage: 1Gi The StatefulSet can be applied using the following command (assuming that the StatefulSet spec is stored in the file axonserver-sts.yml). $ kubectl apply -f axonserver-sts.yml -n ${axonserver-ns} statefulset.apps/axonserver created The next step would be to create the two services required for Axon Server, that is axonserver-gui on 8024 (HTTP) and axonserver on 8124 (gRPC). --- apiVersion: v1 kind: Service metadata: name: axonserver-gui labels: app: axonserver spec: ports: - name: gui port: 8024 targetPort: 8024 selector: app: axonserver type: ClusterIP --- apiVersion: v1 kind: Service metadata: name: axonserver labels: app: axonserver spec: ports: - name: grpc port: 8124 targetPort: 8124 clusterIP: None selector: app: axonserver --- apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: name: axonserver annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent spec: rules: - host: axonserver http: paths: - backend: serviceName: axonserver-gui servicePort: 8024 --- The services use an Ingress to allow incoming traffic and can be deployed with the following command (assuming that the Service specs are stored in the file axonserver-ing.yml). $ kubectl apply -f axonserver-ing.yml -n ${axonserver-ns} service/axonserver-gui created service/axonserver created ingress.networking.k8s.io/axonserver created The final step is to scale out the cluster. The simplest approach, and most often correct one, is to use a scaling factor other than 1, letting Kubernetes take care of deploying several instances. This means we will get several nodes that Kubernetes can dynamically manage and migrate as needed, while at the same time fixing the name and storage. We will get a number suffixed to the name starting at 0, so a scaling factor of 3 gives us axonserver-0 through axonserver-2. $ kubectl scale sts axonserver -n ${axonserver-ns} --replicas=3 statefulset.apps/axonserver scaled This completes a basic setup to help install Axon Server on Kubernetes. The customer can choose to tailor the entire setup based on their requirements and usage of Kubernetes.","title":"Installing Axon Server for Docker and Kubernetes","component":"axon-server-installation","version":"master","name":"installing_as_docker-k8s","url":"/axon-server-installation/installing_as_docker-k8s/","titles":[{"text":"Docker image","hash":"docker-image","id":1},{"text":"Exported volumes","hash":"_exported_volumes","id":2},{"text":"/axonserver/config","hash":"_axonserverconfig","id":3},{"text":"/axonserver/data","hash":"_axonserverdata","id":4},{"text":"/axonserver/events","hash":"_axonserverevents","id":5},{"text":"/axonserver/log","hash":"_axonserverlog","id":6},{"text":"/axonserver/exts","hash":"_axonserverexts","id":7},{"text":"/axonserver/plugins","hash":"_axonserverplugins","id":8},{"text":"Building you own image","hash":"build-image","id":9},{"text":"Docker compose","hash":"docker-compose","id":10},{"text":"Kubernetes","hash":"kubernetes","id":11},{"text":"Creating the Secrets and ConfigMap","hash":"_creating_the_secrets_and_configmap","id":12},{"text":"Deploying Axon Server","hash":"_deploying_axon_server","id":13}]},"4":{"id":4,"text":"Axon Server 2024.0.0 uses an updated version of the H2 database to store the Control DB. This is required to solve some issues in the H2 version used in previous Axon Server versions. When you download Axon Server 2024.0, the package contains a new jar file controldb-migration.jar. For Axon Server to upgrade the Control DB, you need to place this jar file in the working directory of Axon Server (usually the same directory as the axonserver.jar file). When you start Axon Server, it invokes the controldb-migration.jar to migrate the Control DB. After the migration, a new DB file is in the same directory as the old Control DB. This new DB is called axonserver-configdb, the filename is axonserver-configdb.mv.db. The docker image axoniq/axonserver already contains the controldb-migration.jar. If you have configured the property spring.datasource.url in axonserver.properties yourself, you must update the database name before starting Axon Server. Change the name from axonserver-controldb to axonserver-configdb. For example: spring.datasource.url=jdbc:h2:./data/axonserver-controldb;DEFRAG_ALWAYS=true Should now look like this: spring.datasource.url=jdbc:h2:./data/axonserver-configdb;DEFRAG_ALWAYS=true The preferred property to define the location of the configuration database is changed to axoniq.axonserver.configdb-path. The property axoniq.axonserver.controldb-path is deprecated, but still works for this version. If you use the OAuth or LDAP extension for Axon Server, replace the jar files in the exts directory with those included in the new extension. The 2024.0.0 release is still compatible with previous releases, so you may do a rolling upgrade. The upgrade should be reasonably straightforward: stop the node replace axon server jar do the steps from above for the Control DB migration and extensions start the node repeat the procedure for every node in the cluster","title":"Upgrading to Axon Server 2024.0.0","component":"axon-server-upgrade","version":"master","name":"upgrading_as_2024","url":"/axon-server-upgrade/upgrading_as_2024/","titles":[{"text":"Datasource override","hash":"_datasource_override","id":1},{"text":"Configuring the database location","hash":"_configuring_the_database_location","id":2},{"text":"Migration of extensions","hash":"_migration_of_extensions","id":3},{"text":"Upgrade instructions","hash":"_upgrade_instructions","id":4}]},"5":{"id":5,"text":"Answer: Yes! AxonIQ Console is free (no credit card required), and you are limited to a maximum of 100 handlers for your environment, however, we also have “Premium” and “Enterprise” plans to easily allow you to support more handlers. See the AxonIQ Console pricing page for more information. Answer: We give developers various options to get started with AxonIQ Console. If you already have a Google or GitHub account, you can single-sign on instantly and start using AxonIQ Console. You can also create a new account with us by clicking the \"Sign in with Password\" option. Sign in to AxonIQ Console now to try it out for yourself. Answer: In order to connect your apps to AxonIQ Console, click on the Applications tab. If you’re using AxonIQ Console for the first time, then no applications will be displayed. However, you will be presented with installation instructions that will allow you to configure your Plain Java projects or Spring Boot applications so that they can be discovered by AxonIQ Console. You can also find instructions on how to install a Demo Application that has everything already configured and will allow you to see activity instantly in AxonIQ Console. After your first application has been configured properly, the Applications tab will display all discovered applications. Feel free to also try out the AxonIQ Console client project on GitHub. Answer: In order to install an instance of Axon Server, simply click on the Axon Server Cluster tab. Here, you will be presented with various options for installing Axon Server, depending on your operating system or environment. Answer: One of the most requested features within AxonIQ Console is the ability to see the flow of messages between applications. After clicking the Message Flow tab, you’ll see a layout graph of your environment’s publishers and consumers (dispatchers and handlers). Each “dot” in the graph represents an application, and the arrow shows the source and destination of the message. The color of the arrow is significant and represents the following: Blue arrow: Command Messages Green arrow: Query Messages Red arrow: Event Messages Yellow arrow: Deadline Messages The arrow’s thickness represents the amount of messages sent to the Handler. Answer: Yes, no problem! Please note that subscriptions are paid ahead monthly. Therefore, if you choose to stop, you still have access to AxonIQ Console until the end of the billing cycle. Answer: Tools such as the ELK Stack and Splunk are great for monitoring the status of your network infrastructure. However, AxonIQ Console was explicitly designed for developers to analyze and manage your Axon Framework applications more intricately. AxonIQ Console also enables developers to view the real-time activity of a cluster of Axon Server nodes within a single interface. Therefore, AxonIQ Console can provide insights into the overall health and status of your applications and services in ways that the ELK Stack or Splunk were not designed for. Answer: The Axon Framework enables developers to create microservice-based applications using the publish and subscribe pattern. We support three Message types so you can build evolutionary applications. For all three types of messages, you can create a Handler within an application to handle a specific message (or a group of messages, if you prefer). So, how does the Handler Usage count work? Each method annotated with a handler annotation counts as a handler. If you have multiple instances of an application, that will be summed. For example, if you have an application with 20 handlers, and run 4 instances, that will count as 80 handlers. When determining the number of handlers you want in your Workspace, it’s important to also account for the extra handlers that will be needed during deployments. You can view an overview of detailed handler usage on the Subscription page. Answer: Your subscription determines how many handlers we accept data from. We check periodically to see if you stay within this amount and block handlers until the amount is within your subscription again. Before we block handlers, there is a grace period to allow for the purchase of extra handlers before we stop showing metrics. grace period of a week. After the grace period, we will only allow the original amount in your subscription. You will be notified via logs in your application, e-mail, and AxonIQ Console Web Interface. Answer: To manage any of your Access Tokens, navigate to Settings → Environment → Access Tokens Answer: Like with your Access Tokens, Workspace management can also be performed within the Setting tab. Navigate to Settings → Workspace → General. Answer: If you have a Premium or Enterprise plan, and you are an Admin or Workspace owner, navigate to Settings → Workspace → Team in order to add a new user. Answer: AxonIQ Console was designed to allow developers to log in anywhere and manage their Axon Framework applications and Axon Server instances. Therefore, as a cloud-based product, your applications will periodically (or upon request) send statistical information to the servers of AxonIQ, such as: Generic event processor information (name, latency, status, position) Generic handler statistics (name, latency, throughput, error rates) Dead Letter Queue Information (name, error info, event payload), which is disabled by default Answer: No. By default, neither your message payloads nor IDs are sent to AxonIQ servers for processing within AxonIQ Console. If you decide to enable the Dead Letter Queue functionality, then your DLQ IDs and event payload are retrieved and presented to you in the user interface. This allows you to determine if the dead letter should be deleted or retried. Answer: AxonIQ and AxonIQ Console fully comply with the GDPR and California Consumer Privacy Act (CCPA). Please check our legal documentation for the measures we implement to protect your data.","title":"FAQ for AxonIQ Console","component":"axoniq-console-faq","version":"master","name":"console_faq","url":"/axoniq-console-faq/console_faq/","titles":[{"text":"Q: What’s the cost of AxonIQ Console, and is there a free option?","hash":"_q_whats_the_cost_of_axoniq_console_and_is_there_a_free_option","id":1},{"text":"Q: How can I create an account to get started?","hash":"_q_how_can_i_create_an_account_to_get_started","id":2},{"text":"Q: How do I connect my Applications to AxonIQ Console?","hash":"_q_how_do_i_connect_my_applications_to_axoniq_console","id":3},{"text":"Q: How do I set up Axon Server Nodes within AxonIQ Console?","hash":"_q_how_do_i_set_up_axon_server_nodes_within_axoniq_console","id":4},{"text":"Q:  How can I see the flow of messages for my applications within AxonIQ Console?","hash":"_q_how_can_i_see_the_flow_of_messages_for_my_applications_within_axoniq_console","id":5},{"text":"Q: I am paying with my credit card monthly. Can I stop my monthly subscription at any time?","hash":"_q_i_am_paying_with_my_credit_card_monthly_can_i_stop_my_monthly_subscription_at_any_time","id":6},{"text":"Q: We are already using monitoring tooling such as ELK or Splunk. What is the added value of using another tool, AxonIQ Console?","hash":"_q_we_are_already_using_monitoring_tooling_such_as_elk_or_splunk_what_is_the_added_value_of_using_another_tool_axoniq_console","id":7},{"text":"Q: What is a Handler, and what does “Handler Usage” mean?","hash":"_q_what_is_a_handler_and_what_does_handler_usage_mean","id":8},{"text":"Q: What happens if I exceed my Handler Usage Quota?","hash":"_q_what_happens_if_i_exceed_my_handler_usage_quota","id":9},{"text":"Q: Where can I manage my Access Tokens?","hash":"_q_where_can_i_manage_my_access_tokens","id":10},{"text":"Q: How can I manage my Workspaces?","hash":"_q_how_can_i_manage_my_workspaces","id":11},{"text":"Q: I have a Premium plan, so how can I add a New User?","hash":"_q_i_have_a_premium_plan_so_how_can_i_add_a_new_user","id":12},{"text":"Q: What data types are sent to AxonIQ Console for processing?","hash":"_q_what_data_types_are_sent_to_axoniq_console_for_processing","id":13},{"text":"Q: Are my Message Payloads being sent for processing in AxonIQ Console?","hash":"_q_are_my_message_payloads_being_sent_for_processing_in_axoniq_console","id":14},{"text":"Q: How does AxonIQ Console protect my data?","hash":"_q_how_does_axoniq_console_protect_my_data","id":15}]},"6":{"id":6,"text":"Welcome to the AxonIQ contribution guide. Here, you will find everything you need to contribute.","title":"AxonIQ Contribution Guide","component":"contibution-guide","version":"master","name":"index","url":"/contibution-guide/","titles":[]},"7":{"id":7,"text":"AxonIQ Documentation closely follows the diataxis system, where all materials fall into one of the following groups: tutorials, how-to guides, documentation, and explanations. The site linked above provides a concise yet complete description and some examples. Figure 1. The documentation types quadrant As you can see in the above image, there are four types of information: tutorials, how-to guides, documentation, and explanations. They represent different purposes and require different approaches to their creation. The following table (copied from the website linked above) summarizes how those differ. Table 1. The main differences between the four types Tutorials How-to guides Documentation Explanations oriented to learning a goal information understanding must allow the newcomer to get started show how to solve a specific problem describe the machinery explain its form a lesson a series of steps dry description discursive explanation analogy teaching a small child how to cook a recipe in a cookery book a reference encyclopedia article an article on culinary social history The AxonIQ Documentation contains three of the four content types: tutorials, how-to guides, and reference documentation. The fourth type, explanations, is embedded within the other three. These materials take the reader by the hand and help them complete a project of some kind. The goal is to show a beginner they can achieve something with it. It doesn’t have too detailed or exhaustive. There may be more (and even better) ways to achieve the same result. The following are some examples of content that you should write as tutorials. Building a Gift Card application Walks the reader through creating a somewhat simple application. Axon Synapse quick start guide Walks the reader through the basics of using Axon Synapse Axon Server installation guide Basic instructions on how to run Axon Server on-premises, in Docker, and on the Cloud. These are recipes and directions to achieve a specific end. The goal is to have a working, complete, and correct solution at the end. Those are different from tutorials and must be distinct. A tutorial is what a beginner needs to know. A how-to guide answers a question only a user with some experience could formulate. The following are some examples of content that you should write as how-to guides. How to integrate Axon Framework with Detailed instructions from zero to a working integration. How to run Axon Server on AWS Detailed instructions on how to run Axon Server on AWS infrastructure. AxonIQ Cloud How-Tos A collection of mini how-to materials explaining how to achieve certain goals (transfer an account, configure segments, …​) via the UI. These are technical descriptions of the machinery and how to operate it. The goal is to understand how something works, what problem it solves, the design considerations, etc. Naturally, documentation must use examples to demonstrate intended usage. However, it’s not a tutorial or a how-to guide. The following are examples of content that you should write as documentation. Axon Framework documentation Detailed information on the internals of the framework, its design considerations, and intended usage. Axon Server documentation Detailed information on the APIs (gRPC, REST, …​) used to communicate with the server. Axon Synapse documentation Detailed information on the endpoints, their purpose, supported encodings and payload types, required vs. optional request parameters and headers, etc.","title":"Diataxis System","component":"contibution-guide","version":"master","name":"doc-system","url":"/contibution-guide/design/doc-system/","titles":[{"text":"Four types of information","hash":"_four_types_of_information","id":1},{"text":"Applying the system in AxonIQ Documentation","hash":"_applying_the_system_in_axoniq_documentation","id":2},{"text":"Tutorials","hash":"_tutorials","id":3},{"text":"How-to guides","hash":"_how_to_guides","id":4},{"text":"Documentation","hash":"_documentation","id":5}]},"8":{"id":8,"text":"Below are the steps to aggregate all content from all sources and produce the final static website for AxonIQ Documentation. Install Antora by following the instructions relevant to your system. Install Vale by following the instructions relevant to your system. Start by cloning the AxonIQ library repository using your favorite Git client. A command line, as the one below, works too. $ git clone git@github.com:AxonIQ/axoniq-library-site.git You can give the local folder whatever name you wish, but this document refers to it as axoniq-library-site. The code in this project is responsible for generating the AxonIQ Library website. What content the site generator includes and where it gets it from depends on the playbook file used. In the codebase, there are two playbooks: playbook.yaml - this is the production build playbook playbook-dev.yaml - this is the playbook configured for building a local development version of the site You shouldn’t need to change any of those files. In the rare cases when you may need to, change both accordingly to ensure identical results in both environments. The prose linter uses rules from third parties distributed via Vale’s Package Hub. To install those packages, run the following command in the axoniq-library-site folder. $ vale sync Before building the docs, especially the first time, it is recommended to install the dependencies used by Antora and some of the extensions. To install those dependencies, run the following command in the axoniq-library-site folder. --- $ npm install --- You can build AxonIQ Documentation locally with the production configuration to ensure you have all the tooling in place and properly configured. To do so, go to the axoniq-library-site folder and run the following command. $ npx antora playbook.yaml As described in the instructions to install Antora, make sure you are running a LTS version of Node.js The above uses the playbook.yaml, where the locations of the content sources are remote Git repositories. Therefore the build may take a while as the site generator needs to fetch all remote repositories containing content sources. Some of the content sources are private repositories that need authentication. You likely only have access to those if you are an AxonIQ employee or a trusted collaborator. If you aren’t, you can still build most of the AxonIQ Documentation locally by making a copy of playbook.yaml and removing all the private content sources. If you are a member of the AxonIQ Organization on GitHub, you must grant the build tool access to private repositories. To do so, you must create a Personal Access Token (PAT). log in to GitHub go to Settings Developer settings Personal access tokens Fine-grained personal access tokens page and create a new PAT in Resource owner select AxonIQ in Repository access select All repositories in Repository permissions select read-only access to Contents and Metadata save the PAT and wait for AxonIQ Organizations admins to approve it Then you need to configure Git to use the PAT. Create or edit the ~/.git-credentials file and add the following line https://:@github.com Replace with your user name and with the full PAT you created (starting with github_pat_). With that in place, you can fetch content from private repositories and build the AxonIQ Documentation locally from the production playbook. For alternative ways to configure access to content sources, check Antora’s Private Repository Authentication page In the playbook-dev.yaml, the locations of the content sources are the local Git clones of the respective projects. Thus users need to configure the correct locations for their local machines. The configuration relies on symlinks in a dedicated folder named localLinks. This way, playbook-dev.yaml doesn’t need to change per user. When you first clone the repository, the axoniq-library-site/localLinks folder should be empty. You need to create the respective symlinks to the local Git clones of the projects containing content sources. It’s best to explain with an example. Consider the following fragment from playbook-dev.yaml. - url: . start_paths: ['localLinks/AxonFramework/docs/*', '!localLinks/AxonFramework/docs/playbook'] The site builder thus expects all folders under axoniq-library-site/localLinks/AxonFramework/docs except axoniq-library-site/localLinks/AxonFramework/docs/playbook to be content sources. Let’s assume your local Git clone of Axon Framework is in the ~/work/axon-framework/ folder. Thus the actual path to the content sources on your machine is ~/work/axon-framework/docs. To satisfy the site builder’s expectations, you must create a symlink axoniq-library-site/localLinks/AxonFramework that points to ~/work/axon-framework/. You can do so on Linux and Mac OS with the following command. $ cd axoniq-library-site/localLinks $ ln -s ~/work/axon-framework/ AxonFramework It’s possible that you don’t have local clones of all repositories containing content sources. If you want to avoid cloning more projects than you work on, you can create a custom playbook and mix the content sources configuration. The process is simple. make a copy of playbook-dev.yaml. For this document, let’s assume the new name is my-playbook.yaml add my-playbook.yaml to .gitignore create the symlinks for the repositories you have local clones edit the sources section of my-playbook.yaml and replace each entry for which you don’t have a local clone with the equivalent from the playbook.yaml file The following fragment shows a mixed configuration. - url: . start_paths: ['localLinks/AxonFramework/docs/*', '!localLinks/AxonFramework/docs/playbook'] - url: https://github.com/AxonIQ/giftcard-demo.git start_paths: ['docs/*', '!docs/playbook'] In this playbook, Axon Framework’s content sources come from a local clone, while the giftcard-demo project’s content sources come from a remote repository. When you use a custom playbook outside version control, you must monitor playbook-dev.yaml and manually apply any changes to your custom playbook. To build AxonIQ Documentation locally with the development configuration, go to the axoniq-library-site folder and run Antora with the desired playbook. $ npx antora playbook-dev.yaml The above uses the playbook-dev.yaml. You can, of course, use my-playbook.yaml or any other instead. Antora generates a static site in axoniq-library-site/build/site folder. It doesn’t have a web server to run the site on localhost. You may access it from your browser via the file:// protocol, but some links may not work. You must have a web server running on your machine to access the site on a URL like http://localhost:8080. You can use any of the popular solutions available on your operating system. You can also start a simple web server from the axoniq-library-site/build/site folder in several different ways. Below are some examples. Using Python to serve AxonIQ Documentation on localhost:8080 python3 -m http.server 8080 Using NodeJS to serve AxonIQ Documentation on localhost:8080 npm install -g http-server http-server -p 8080 Using PHP to serve AxonIQ Documentation on localhost:8080 php -S localhost:8080","title":"Build AxonIQ Documentation","component":"contibution-guide","version":"master","name":"build","url":"/contibution-guide/overview/build/","titles":[{"text":"Install required tools","hash":"_install_required_tools","id":1},{"text":"Get the website source code","hash":"_get_the_website_source_code","id":2},{"text":"Install Vale packages","hash":"_install_vale_packages","id":3},{"text":"Install node dependencies","hash":"_install_node_dependencies","id":4},{"text":"Build with production configuration","hash":"_build_with_production_configuration","id":5},{"text":"Access to private repositories","hash":"_access_to_private_repositories","id":6},{"text":"Build with local development configuration","hash":"_build_with_local_development_configuration","id":7},{"text":"Configure content sources","hash":"_configure_content_sources","id":8},{"text":"Mixing content sources","hash":"_mixing_content_sources","id":9},{"text":"Build","hash":"_build","id":10},{"text":"Run AxonIQ Documentation locally","hash":"_run_axoniq_documentation_locally","id":11}]},"9":{"id":9,"text":"Content sources are the locations where the site builder finds the content to include in the website. Please refer to Antora’s documentation for more information. Before adding new ones or making any changes to existing content sources, please take time to understand the convention you need to comply with. The documentation website repository contains content sources for all the generic topics. Every folder under the content folder is a content source as specified by the following configuration in playbook.yaml and playbook-dev.yaml files. - url: . start_paths: content/* Each project manages its own set of content sources. By convention, the location for those is the docs folder in the root of the three. The exception is the docs/_playbook folder which contains the playbooks to build the project’s documentation independently of the AxonIQ Documentation platform. For every such project, there is a respective entry in the playbooks. The example below shows the record for Axon Framework in playbook-dev.yaml. - url: . start_paths: ['localLinks/AxonFramework/docs/*', '!localLinks/AxonFramework/docs/_playbook'] The project’s content sources must follow the tree structure, rules, and conventions. The following listing shows how a project applies to those. 📒 Project 📒 ... 📂 docs (1) 📁 _playbook (2) 📄 playbook.yaml 📂 source-one (3) 📄 antora.yml (4) 📂 modules (5) 📂 ROOT (6) 📁 pages (7) 📄 ... 📄 ... 📁 ... 📂 ...(8) 📁 ... (9) 📒 ... 1 The docs folder on the top level containing all content sources 2 An optional _playbook folder for project-specific playbooks 3 The source-one folder contains the first content source 4 The antora.yml file contains the configuration for the first content source 5 The modules folder contains all modules for the content source 6 The required ROOT module for the content source 7 The pages folder contains the content files 8 More modules following the same folder structure as in the ROOT folder 9 More content sources following the same folder structure as in the source-one folder How one adds a new content source depends on the source’s location and the existing configuration. As generic content sources are already configured in the website project, adding a new one is a matter of creating a new folder under the content folder. Follow the folder structure from any existing content source, configure the antora.yml accordingly, and add content to the pages folder in the desired modules. If AxonIQ Documentation’s playbook already contains an entry for the project, the rule is identical to the one for generic content sources. Create a new folder in the project’s docs folder, recreate the expected folder structure, configure the antora.yml file accordingly, and start adding content. If the project isn’t yet in AxonIQ Library’s playbook, you must add it. You must edit both playbook.yaml and playbook-dev.yaml files and add the respective entries specifying the project’s Git repository location. For playbook-dev.yaml, you must add something like the following. - url: . start_paths: ['localLinks/ProjectName/docs/*', '!localLinks/ProjectName/docs/_playbook'] Then create a symlink from localLinks/ProjectName to the folder with your local clone of that repository. For playbook.yaml, you must add something like the following. - url: https://github.com/ORG-NAME/REPO-NAME.git start_paths: ['docs/*', '!docs/playbook']","title":"Content Sources","component":"contibution-guide","version":"master","name":"content-sources","url":"/contibution-guide/overview/content-sources/","titles":[{"text":"AxonIQ Documentation convention","hash":"_axoniq_documentation_convention","id":1},{"text":"Generic content sources","hash":"_generic_content_sources","id":2},{"text":"Project-specific content sources","hash":"_project_specific_content_sources","id":3},{"text":"Adding a content source","hash":"_adding_a_content_source","id":4},{"text":"Adding a generic content source","hash":"_adding_a_generic_content_source","id":5},{"text":"Adding a project content source","hash":"_adding_a_project_content_source","id":6},{"text":"Configuring new project","hash":"_configuring_new_project","id":7}]},"10":{"id":10,"text":"From technical perspective, the AxonIQ Documentation platform is a content aggregator. While most content editors usually don’t need to deal with that level of complexity, it helps to understand and familiarize with the tools used to build the final product. This project uses Antora to aggregate content from many different sources and display it on the AxonIQ Documentation pages. Please refer to Antora’s documentation for more information. Antora processes content written in AsciiDoc. AsciiDoc is a plain text markup language for writing technical content. Please refer to the AsciiDoc Language Documentation for more information. This project uses Vale which bring code-like linting to prose. Please consult the Vale’s documentation for more information","title":"Prerequisite Tools and Knowledge","component":"contibution-guide","version":"master","name":"platform","url":"/contibution-guide/overview/platform/","titles":[{"text":"The main platform","hash":"_the_main_platform","id":1},{"text":"The content format","hash":"_the_content_format","id":2},{"text":"Prose linter","hash":"_prose_linter","id":3}]},"11":{"id":11,"text":"Often content has value even if it’s not complete or needs improvements. In such cases, one can use dedicated page attribute entries to mark given content as needing improvement. The main attribute is :page-needs-improvement: which takes a list of other attributes pointing to detailed information. Consider the following example. Listing 1. First lines of Messages.adoc = Messages :page-needs-improvement: considerations, usage, ref :page-needs-considerations: Design considerations needs details about messages characteristics :page-needs-usage: Usage section needs detailed examples :page-needs-ref: Reference section need more links to samples, source code, etc. This document provides information about the design, implementation, and intended usage of generic messaging in Axon Framework. During build time, Antora processes this document and generates a webpage that looks similar to the following image Figure 1. An example of rendered page \"Messages\"","title":"Mark Content for Improvement","component":"contibution-guide","version":"master","name":"mark4improvement","url":"/contibution-guide/writing/mark4improvement/","titles":[{"text":"Marking a document for improvements","hash":"_marking_a_document_for_improvements","id":1}]},"12":{"id":12,"text":"","title":"Navigation Menu","component":"contibution-guide","version":"master","name":"menu","url":"/contibution-guide/writing/menu/","titles":[]},"13":{"id":13,"text":"When you need to provide several alternatives of the same content (say for different languages, settings, environments, etc.) you can use tabs. You can construct tabs from a description list (dlist) enclosed in an example block annotated with the tabs style. An example of tabs [tabs] ==== Tab A:: Contents of Tab A. Tab B:: + Contents of Tab B. Tab C:: + -- Contents of Tab C. Contains more than one block. -- ==== The platform renders the above code as shown below. Tab A Tab B Tab C Contents of Tab A. Contents of Tab B. Contents of Tab C. Contains more than one block. You can add of course source code in tabs. An example of tabs [tabs] ==== Configuration API:: + --- [source, java] ---- Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureAggregate(GiftCard.class); } ---- --- Spring Boot AutoConfiguration:: + --- Use the `@Aggregate` annotation (from `org.axonframework.spring.stereotype` package) to mark the necessary components. When the Spring auto-configuration runs, it'll register the annotated types as aggregates. Note that only the aggregate root needs the annotation. [source, java] ---- // ... import org.axonframework.spring.stereotype.Aggregate; // ... @Aggregate public class GiftCard { @AggregateIdentifier private String id; @CommandHandler public GiftCard(IssueCardCommand cmd) { apply(new CardIssuedEvent(cmd.getCardId(), cmd.getAmount())); } } ---- --- ==== The platform renders the above code as shown below. Configuration API Spring Boot AutoConfiguration Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureAggregate(GiftCard.class); } Use the @Aggregate annotation (from org.axonframework.spring.stereotype package) to mark the necessary components. When the Spring auto-configuration runs, it’ll register the annotated types as aggregates. Note that only the aggregate root needs the annotation. // ... import org.axonframework.spring.stereotype.Aggregate; // ... @Aggregate public class GiftCard { @AggregateIdentifier private String id; @CommandHandler public GiftCard(IssueCardCommand cmd) { apply(new CardIssuedEvent(cmd.getCardId(), cmd.getAmount())); } }","title":"Using Tabs","component":"contibution-guide","version":"master","name":"tabs","url":"/contibution-guide/writing/tabs/","titles":[{"text":"General syntax","hash":"_general_syntax","id":1},{"text":"Tabs containing source code","hash":"_tabs_containing_source_code","id":2}]},"14":{"id":14,"text":"Axon Framework Fundamentals A tutorial covering Axon Framework's fundamental components and features. Axon Server Fundamentals A tutorial covering Axon Server's fundamental components and features. Axon Synapse Quick Start The quick start guide for using Axon Synapse as HTTP bridge to Axon Server AxonIQ Console Getting Started A tutorial to help you getting started with AxonIQ Console. Building An Axon Framework Application From Scratch Getting started with designing, building, and deploying Axon Technology based applications. FAQ for Axon Server Questions and Answers for Axon Server FAQ for AxonIQ Console Questions and Answers for AxonIQ Console","title":"Basics","component":"home","version":"master","name":"basics","url":"/home/basics/","titles":[{"text":"Concepts explained (101)","id":1},{"text":"Tutorials","id":2},{"text":"Frequently asked questions","id":3}]},"15":{"id":15,"text":"AxonIQ Docs is a collection of written resources designed to help developers learn and master the products AxonIQ and the software design and development concepts those products assist with. Those are practical technical descriptions of the machinery behind the products. They prove valuable when you work with a product and need to check for the intended usage, available functionality, or configuration options. The Reference page contains all such materials. Some of the most popular ones are: Axon Framework Reference Guide Axon Server Reference Guide Those theoretical materials provide examples of achieving typical goals or explain the process of completing routine tasks. They’re invaluable when learning how to use the products to design and develop new solutions. The Basics page contains all such materials. Some of the most popular ones are: Building A Bike Rental Application AxonIQ Console Getting Started Guide Guides are recipes and directions for achieving a specific end. They are intended for readers with a solid understanding. The guides cover: Axon Framework Axon Server Migration","title":"AxonIQ Docs","component":"home","version":"master","name":"index","url":"/home/","titles":[{"text":"Reference","hash":"_reference","id":1},{"text":"Basics","hash":"_basics","id":2},{"text":"Guides","hash":"_guides","id":3}]},"16":{"id":16,"text":"Axon Framework The Axon Framework former reference guide Axon Framework Extensions Axon Framework Extensions Axon Server Axon Server reference documentation Axon Synapse Axon Synapse reference documentation AxonIQ Console This documentation helps users understand various parts of the AxonIQ Console in more depth to best utilize this powerful platform.","title":"Reference","component":"home","version":"master","name":"reference","url":"/home/reference/","titles":[{"text":"Core products","id":1},{"text":"Extensions","id":2}]},"17":{"id":17,"text":"Here you can find a collection of the guides that help you with specific tasks when using Axon Framework. Axon Framework Identifier Generation Guide Guide that covers several considerations in regards to identifier generation in Axon Framework-based applications. Axon Framework Message Handler Tuning Guide Guide that covers the message handler tuning in your Axon Framework applications. Axon Framework Meta Annotations Guide Guide that covers several considerations in regards to creating Meta Annotations for Axon Framework-based applications. Axon Framework RDBMS tuning Guide Guide that covers several considerations in regards to tuning the database for events. Monitoring your AxonFramework Application with AxonIQ Console Monitor your Axon application with AxonIQ Console, helping you to detect wich parts of your system have a poor performance and get some hints on what can be improved.","title":"Axon Framework Guides","component":"home","version":"master","name":"axon-framework","url":"/home/guides/axon-framework/","titles":[{"text":"Guide directory","id":1}]},"18":{"id":18,"text":"Here you can find a collection of the guides that help you with specific tasks when using Axon Server. Axon Server Google Marketplace Installation Guide A tutorial to help you installing Axon Server Google via Marketplace. Axon Server Installation Guides Axon Server Installation guides Axon Server Query Language Guide Guide that covers the axon server query language. Axon Server Upgrade Guides Axon Server upgrade guides","title":"Axon Server Guides","component":"home","version":"master","name":"axon-server","url":"/home/guides/axon-server/","titles":[{"text":"Guide directory","id":1}]},"19":{"id":19,"text":"Guides are pieces of documentations that help you to achieve a specific task. They are intended for readers with a solid understanding of the basic concepts that are looking for directions on how to perform a specific task. We have grouped the guides depending on the product or specific type of tasks they help to solve. These are the guides that we have available so far, but more will be added in the future. Axon Framework Identifier Generation Guide Guide that covers several considerations in regards to identifier generation in Axon Framework-based applications. Axon Framework Message Handler Tuning Guide Guide that covers the message handler tuning in your Axon Framework applications. Axon Framework Meta Annotations Guide Guide that covers several considerations in regards to creating Meta Annotations for Axon Framework-based applications. Axon Framework RDBMS tuning Guide Guide that covers several considerations in regards to tuning the database for events. Monitoring your AxonFramework Application with AxonIQ Console Monitor your Axon application with AxonIQ Console, helping you to detect wich parts of your system have a poor performance and get some hints on what can be improved. Axon Server Google Marketplace Installation Guide A tutorial to help you installing Axon Server Google via Marketplace. Axon Server Installation Guides Axon Server Installation guides Axon Server Query Language Guide Guide that covers the axon server query language. Axon Server Upgrade Guides Axon Server upgrade guides","title":"Guides","component":"home","version":"master","name":"index","url":"/home/guides/","titles":[{"text":"Axon Framework","id":1},{"text":"Axon Server","id":2},{"text":"Migration","id":3}]},"20":{"id":20,"text":"Here you can find a collection of the guides that help you with specific tasks when using Migrating to Axon Framework or Axon Server.","title":"Migration Guides","component":"home","version":"master","name":"migration","url":"/home/guides/migration/","titles":[{"text":"Guide directory","id":1}]},"21":{"id":21,"text":"AxonIQ Docs is a collection of written resources designed to help developers learn and master the products AxonIQ and the software design and development concepts those products assist with. Those are practical technical descriptions of the machinery behind the products. They prove valuable when you work with a product and need to check for the intended usage, available functionality, or configuration options. The Reference page contains all such materials. Some of the most popular ones are: Axon Framework Reference Guide Axon Server Reference Guide Those theoretical materials provide examples of achieving typical goals or explain the process of completing routine tasks. They’re invaluable when learning how to use the products to design and develop new solutions. The Basics page contains all such materials. Some of the most popular ones are: Building A Bike Rental Application AxonIQ Console Getting Started Guide Guides are recipes and directions for achieving a specific end. They are intended for readers with a solid understanding. The guides cover: Axon Framework Axon Server Migration","title":"AxonIQ Docs","component":"reference-guide","version":"master","name":"index","url":"/reference-guide/","titles":[{"text":"Reference","hash":"_reference","id":1},{"text":"Basics","hash":"_basics","id":2},{"text":"Guides","hash":"_guides","id":3}]},"22":{"id":22,"text":"This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help build applications based on Domain-Driven Design, CQRS, and Event-Sourcing. A summary of the various subsections is given below. Sub-Section Purpose Messaging Concepts Conceptual overview of \"Messages\" within the Axon Framework Commands Command Message Development using the Axon Framework Events Event Message Development using the Axon Framework Queries Query Message Development using the Axon Framework Sagas Long Running Transaction development using the Axon Framework Testing Testing capabilities provided by the Axon Framework Serialization Details on the serialization capabilities provided by the Axon Framework Tuning Tuning capabilities provided by the Axon Framework Monitoring and Metrics Monitoring and Metric capabilities provided by the Axon Framework Spring Boot Integration Axon Framework integration with Spring Boot Upgrading to 4.7 Step-by-step plan explaining how to upgrade to Axon Framework 4.7 from 4.6 Modules Modules provided by the Axon Framework","title":"Introduction","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/","titles":[]},"23":{"id":23,"text":"Axon Framework consists of a number of modules that provide specific capabilities. Depending on the exact needs of your project, you will need to include one or more of these modules. There are currently two ways of obtaining the module binaries: either download the binaries from our website or preferably configure a repository for your build system (Maven, Gradle). To not be bothered with version compatibility issues between framework and the extensions, it is recommended to use the BOM. Axon modules are available on Maven Central. Axon 'Main Modules' are the modules that have been thoroughly tested and are robust enough to use in demanding production environments. The maven groupId of all these modules is org.axonframework. Visit Maven Central Repository to copy coordinates for the version you need. Quick start an Axon Application The Axon Spring Boot Starter module is the quickest start in to an Axon project as it will retrieve all the required modules/dependencies transitively. Alternatively, you can manually select individual modules for a customized configuration. Module Artifact Id Group Id Maven Central Axon messaging axon-messaging org.axonframework available Axon modelling axon-modelling org.axonframework available Axon Event Sourcing axon-eventsourcing org.axonframework available Axon Configuration axon-configuration org.axonframework available Axon test axon-test org.axonframework available Axon Server Connector axon-server-connector org.axonframework available Axon Spring axon-spring org.axonframework available Axon Spring Boot Starter axon-spring-boot-starter org.axonframework available Axon Disruptor axon-disruptor org.axonframework available Axon Metrics axon-metrics org.axonframework available Axon Micrometer axon-micrometer org.axonframework available Axon legacy axon-legacy org.axonframework available Axon Tracing OpenTelemetry axon-tracing-opentelemetry org.axonframework available This module contains all necessary components and building blocks to support command, event and query messaging. This module contains the necessary components to create domain models, like Aggregates and Sagas. This module contains all necessary infrastructure components to support Event Sourcing, Command and Query Models. This module contains test fixtures that you can use to test Axon based components, such as your Command Handlers, Aggregates and Sagas. You typically do not need this module at runtime and will only need to be added to the classpath for running tests. This module contains all the necessary components to configure an Axon application. This module provides infrastructure components that connect to Axon Server. This module allows Axon Framework components to be configured in the Spring Application context. It also provides a number of building block implementations specific to Spring Framework, such as an adapter for publishing and retrieving Axon Events on a Spring Messaging Channel. This module provides Spring Boot auto-configuration for your project. It is by far the easiest option to get started as it automatically configures all Axon components. It is explained in more details here. This module contains a specific CommandBus and Command Handling solution based on the Disruptor paradigm. This module provides basic implementations based on Coda Hale to collect the monitoring information. This module provides basic implementations based on Micrometer to collect the monitoring information. Micrometer is a dimensional-first metrics collection facade whose aim is to allow you to time, count, and gauge your code with a vendor neutral API. This module contains components that enable migration of older Axon projects to use the latest Axon version. This module contains the components needed to enable tracing with OpenTelemetry. Besides main modules, there are several extension modules which complement Axon Framework. They address distribution concerns of Axon Framework towards non-Axon Server solutions. The maven groupId of these extensions starts with org.axonframework.extensions.*. Visit Maven Central Repository to copy coordinates for the version you need. Module Artifact Id Group Id Maven Central GitHub Axon AMQP axon-amqp org.axonframework.extensions.amqp available available Axon AMQP Spring Boot Starter axon-amqp-spring-boot-starter org.axonframework.extensions.amqp available available Axon CDI axon-cdi org.axonframework.extensions.cdi available available Axon JGroups axon-jgroups org.axonframework.extensions.jgroups available available Axon JGroups Spring Boot Starter axon-jgroups-spring-boot-starter org.axonframework.extensions.jgroups available available Axon JobRunr Pro axon-jobrunrpro org.axonframework.extensions.jobrunrpro available available Axon JobRunr Pro Spring Boot Starter axon-jobrunrpro-spring-boot-starter org.axonframework.extensions.jobrunrpro available available Axon Kafka axon-kafka org.axonframework.extensions.kafka available available Axon Kafka Spring Boot Starter axon-kafka-spring-boot-starter org.axonframework.extensions.kafka available available Axon Kotlin axon-kotlin org.axonframework.extensions.kotlin available available Axon Kotlin Test axon-kotlin-test org.axonframework.extensions.kotlin available available Axon Mongo axon-mongo org.axonframework.extensions.mongo available available Axon Mongo Spring Boot Starter axon-mongo-spring-boot-starter org.axonframework.extensions.mongo available available Axon Multi Tenancy axon-multitenancy org.axonframework.extensions.multitenancy available available Axon Multi Tenancy Spring Boot Starter axon-multitenancy-spring-boot-starter org.axonframework.extensions.multitenancy available available Axon Reactor axon-reactor org.axonframework.extensions.reactor available available Axon Reactor Spring Boot Starter axon-reactor-spring-boot-starter org.axonframework.extensions.reactor available available Axon Spring ahead of time axon-spring-aot org.axonframework.extensions.spring-aot available available Axon Spring Cloud axon-springcloud org.axonframework.extensions.springcloud available available Axon Spring Cloud Spring Boot Starter axon-springcloud-spring-boot-starter org.axonframework.extensions.springcloud available available Axon Tracing axon-tracing org.axonframework.extensions.tracing available available Axon Tracing Spring Boot Starter axon-tracing-spring-boot-starter org.axonframework.extensions.tracing available available This module provides components that allow you leverage an AMQP-based message broker as an Event Message distribution mechanism. This allows for guaranteed-delivery, even when the Event Handler node is temporarily unavailable. This module provides Spring auto-configuration on top of the axon-amqp module. This module provides support for Contexts and Dependency Injection (CDI) for the Java EE platform. This module provides integration with JGroups for command distribution. JGroups should be regarded as a reliable messaging toolkit. This module provides Spring auto-configuration on top of the axon-jgroups module This module provides integration with JobRunr Pro. This module provides Spring auto-configuration on top of the axon-jobrunrpro module This module provides integration with Kafka for event distribution. As such it plays a similar role as the Axon AMQP extension and thus is not a replacement Event Storage mechanism. Kafka is a distributed message streaming platform. This module provides Spring auto-configuration on top of the axon-kafka module. This module provides a set of reified operations, among others, to allow a cleaner Kotlin coding experience when using Axon. This module provides a set of reified operations, among others, to allow a cleaner Kotlin coding experience when testing Axon applications. This module provides event and saga store implementations that store event streams and sagas in a MongoDB database. MongoDB is a document based NoSQL database. This module provides Spring auto-configuration on top of the axon-mongo module. This module provides distinct wrappers for Axon Framework’s infrastructure components to support multi tenancy within a single application. Use of this extension is most easily achieved with Axon Server, through using its multi-context feature, albeit not limited to this. This module provides Spring auto-configuration on top of the axon-multitenancy module. Note that this assumes an active Axon Server connection be present. This module provides integration with Project Reactor. This module provides Spring auto-configuration on top of the axon-reactor module. This module provides integration with Spring Ahead of Time. Spring AOT processing is part of creating a native image from a Spring (Boot) application. This module provides integration with Spring Cloud for command distribution. Spring Cloud provides an API for common distributed system patterns. This module provides Spring auto-configuration on top of the axon-springcloud module This module provides support for distributed tracing of Axon applications. The Open Tracing standard is used to provide the tracing capabilities. If you’re looking for Open Telemetry support, please check our documentation for that over here. This module provides Spring auto-configuration on top of the axon-tracing module In addition to the main framework modules and the extensions, Axon also has a Bill of Materials, or BOM. The BOM is provided to ensure the use of compatible framework and extension dependencies inside an Axon application. As such, it is the recommended approach towards defining the overall Axon version used inside of an application. Module Artifact Id Group Id Maven Central GitHub Axon Bill of Materials axon-bom org.axonframework available available For using the BOM, you would add the axon-bom dependency to your dependency management system: org.axonframework axon-bom ${version.axon} pom import ... For usage with Gradle Version 4.x and below, apply the dependency-management-plugin like so: buildscript { repositories { jcenter() } dependencies { classpath \"io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE\" } } apply plugin: \"io.spring.dependency-management\" After this, import the Axon BOM: dependencyManagement { imports { mavenBom 'org.axonframework:axon-bom:' } } Beginning with Gradle version 5.0, you can also omit the dependency-management plugin and instead use the platform dependency DSL to import maven BOMs: implementation(platform(\"org.axonframework:axon-bom:\")) After that is in place, you can add any of the mentioned dependencies from framework and the extensions without specifying versions. Furthermore, you will be guaranteed that the provided versions in the BOM are compatible with one another.","title":"Modules","component":"axon-framework-reference","version":"4.10","name":"modules","url":"/axon-framework-reference/4.10/modules/","titles":[{"text":"Main modules","hash":"_main_modules","id":1},{"text":"Axon messaging","hash":"_axon_messaging","id":2},{"text":"Axon modelling","hash":"_axon_modelling","id":3},{"text":"Axon Event Sourcing","hash":"_axon_event_sourcing","id":4},{"text":"Axon test","hash":"_axon_test","id":5},{"text":"Axon Configuration","hash":"_axon_configuration","id":6},{"text":"Axon Server Connector","hash":"_axon_server_connector","id":7},{"text":"Axon Spring","hash":"_axon_spring","id":8},{"text":"Axon Spring Boot Starter","hash":"_axon_spring_boot_starter","id":9},{"text":"Axon Disruptor","hash":"_axon_disruptor","id":10},{"text":"Axon Metrics","hash":"_axon_metrics","id":11},{"text":"Axon Micrometer","hash":"_axon_micrometer","id":12},{"text":"Axon legacy","hash":"_axon_legacy","id":13},{"text":"Axon Tracing OpenTelemetry","hash":"_axon_tracing_opentelemetry","id":14},{"text":"Extension modules","hash":"_extension_modules","id":15},{"text":"Axon AMQP","hash":"_axon_amqp","id":16},{"text":"Axon AMQP Spring Boot Starter","hash":"_axon_amqp_spring_boot_starter","id":17},{"text":"Axon CDI","hash":"_axon_cdi","id":18},{"text":"Axon JGroups","hash":"_axon_jgroups","id":19},{"text":"Axon JGroups Spring Boot Starter","hash":"_axon_jgroups_spring_boot_starter","id":20},{"text":"Axon JobRunr Pro","hash":"_axon_jobrunr_pro","id":21},{"text":"Axon JobRunr Pro Spring Boot Starter","hash":"_axon_jobrunr_pro_spring_boot_starter","id":22},{"text":"Axon Kafka","hash":"_axon_kafka","id":23},{"text":"Axon Kafka Spring Boot Starter","hash":"_axon_kafka_spring_boot_starter","id":24},{"text":"Axon Kotlin","hash":"_axon_kotlin","id":25},{"text":"Axon Kotlin Test","hash":"_axon_kotlin_test","id":26},{"text":"Axon Mongo","hash":"_axon_mongo","id":27},{"text":"Axon Mongo Spring Boot Starter","hash":"_axon_mongo_spring_boot_starter","id":28},{"text":"Axon Multi Tenancy","hash":"_axon_multi_tenancy","id":29},{"text":"Axon Multi Tenancy Spring Boot Starter","hash":"_axon_multi_tenancy_spring_boot_starter","id":30},{"text":"Axon Reactor","hash":"_axon_reactor","id":31},{"text":"Axon Reactor Spring Boot Starter","hash":"_axon_reactor_spring_boot_starter","id":32},{"text":"Axon Spring ahead of time","hash":"_axon_spring_ahead_of_time","id":33},{"text":"Axon Spring Cloud","hash":"_axon_spring_cloud","id":34},{"text":"Axon Spring Cloud Spring Boot Starter","hash":"_axon_spring_cloud_spring_boot_starter","id":35},{"text":"Axon Tracing","hash":"_axon_tracing","id":36},{"text":"Axon Tracing Spring Boot Starter","hash":"_axon_tracing_spring_boot_starter","id":37},{"text":"Axon Bill of Materials","hash":"_axon_bill_of_materials","id":38},{"text":"Maven","hash":"_maven","id":39},{"text":"Gradle","hash":"_gradle","id":40}]},"24":{"id":24,"text":"The flow of messages between (micro)services and storage of events requires preparation of the messages through serialization. Axon uses the XStreamSerializer by default, which uses XStream to serialize into and deserialize from XML. XStream is reasonably fast, and the result of serialization is human-readable. This makes it quite useful for logging and debugging purposes. The XStreamSerializer allows further customization if that’s required. You can, for example, define aliases for specific packages, classes, or even fields. In addition to being an excellent way to shorten potentially long names, you can also use aliases when class definitions of the serialized objects change. For more information about aliases, visit the XStream website. Additionally, Axon provides the JacksonSerializer. This Serializer implementation uses Jackson to serialize objects into and deserialize from JSON. It produces a more compact serialized form, while requiring those classes to stick to Jackson’s conventions (or configuration). The compact format makes it ideal for events, commands, and queries, as it minimizes the storage space and package size. You may also implement your own serializer simply by creating a class that implements Serializer and setting it within Axon’s configuration for the desired infrastructure components. Serializers come in several flavors in Axon Framework and are used for various things. Currently, you can choose between the XStreamSerializer and JacksonSerializer to serialize messages (commands/queries/events), tokens, snapshots, deadlines and sagas in an Axon application. As there are several objects to be serialized, it is typically desired to chose which serializer handles which object. To that end, the Configuration API allows you to define default, message and event serializers, which lead to the following object-serialization break down: The Event Serializer is in charge of (de)serializing event message payload and metadata. Events are typically stored in an event store for a long period of time. This is the main driver for choosing the event serializer implementation. The Message Serializer is in charge of (de)serializing the command and query message payload and metadata (used in a distributed application setup). Messages are shared between nodes and typically need to be interoperable and/or compact. Take this into account when choosing the message serializer implementation. The default Serializer is in charge of (de)serializing the remainder, being the messages (except the payload and metadata), tokens, snapshots, deadlines and sagas. These objects are generally not shared between different applications, and most of these classes aren’t expected to have some of the getters and setters that are, for example, typically required by Jackson based serializers. For example, a QueryMessage consists of a payload and ResponseType, which will respectively be (de)serialized using the message and the default serializer, the query request and response payload will be (de)serialized using the`message`serializer. A flexible, general-purpose serializer like XStream is ideal for this purpose. By default, all three Serializer flavors are set to use the XStreamSerializer, which internally uses XStream to serialize objects to an XML format. XML is verbose, but XStream has the major benefit of being able to serialize virtually anything. XStream and JDK 17 Although XStream can \"serialize virtually anything,\" more recent versions of the JDK impede its flexibility. This predicament comes down to XStream’s reflective approach to finding out how to de-/serialize any object, which has become problematic with Java’s intent to secure its internals. Hence, if you’re using JDK 17, the chances are that objects (for example, your sagas) intended for serialization require additional configuration. On some occasions configuring XStream’s security settings is sufficient. Other times you will have to introduce custom Converters to de-/serialize specific types. If you prefer not to deal with specific XStream settings, it might be better to use the JacksonSerializer throughout your Axon application. XML’s verbosity is typically fine when storing tokens, sagas, or snapshots, but for messages (and specifically events) XML might cost too much due to its serialized size. Thus for optimization reasons you can configure different serializers for your messages. Another valid reason for customizing serializers is to achieve interoperability between different (Axon) applications, where the receiving end potentially enforces a specific serialized format. There is an implicit ordering between the configurable serializer. If no event Serializer is configured, the event de-/serialization will be performed by the message Serializer. In turn, if no message Serializer is configured, the default Serializer will take that role. See the following example on how to configure each serializer specifically, were we use the XStreamSerializer as the default and the JacksonSerializer for all our messages: public class SerializerConfiguration { public void serializerConfiguration(Configurer configurer) { // By default, we want the XStreamSerializer XStream xStream = new XStream(); // Set the secure types on the xStream instance XStreamSerializer defaultSerializer = XStreamSerializer.builder() .xStream(xStream) .build(); // But for all our messages we'd prefer the JacksonSerializer due to JSON's smaller format JacksonSerializer messageSerializer = JacksonSerializer.defaultSerializer(); configurer.configureSerializer(configuration -> defaultSerializer) .configureMessageSerializer(configuration -> messageSerializer) .configureEventSerializer(configuration -> messageSerializer); } } @Configuration public class SerializerConfiguration { // By default, we want the XStreamSerializer @Bean public Serializer defaultSerializer() { // Set the secure types on the xStream instance XStream xStream = new XStream(); return XStreamSerializer.builder() .xStream(xStream) .build(); } // But for all our messages we'd prefer the JacksonSerializer due to JSON's smaller format @Bean @Qualifier(\"messageSerializer\") public Serializer messageSerializer() { return JacksonSerializer.defaultSerializer(); } } # Possible values for these keys are `default`, `xstream`, `java`, and `jackson`. axon.serializer.general axon.serializer.events axon.serializer.messages # Possible values for these keys are `default`, `xstream`, `java`, and `jackson`. axon: serializer: general: events: messages: Several things might be considered when the serialization process proofs to not be up to par with the expectations. XStream is extremely configurable and extensible. If you just use a plain XStreamSerializer, there are some quick wins ready to pick up. XStream allows you to configure aliases for package names and event class names. Aliases are typically much shorter (especially if you have long package names), making the serialized form of an event smaller. And since we’re talking XML, each character removed from XML is twice the profit (one for the start tag, and one for the end tag). A more advanced topic in XStream is creating custom converters. The default reflection based converters are simple, but do not generate the most compact XML. Always look carefully at the generated XML and see if all the information there is really needed to reconstruct the original instance. Avoid the use of upcasters when possible. XStream allows aliases to be used for fields, when they have changed name. Imagine revision 0 of an event, that used a field called \"clientId\". The business prefers the term \"customer\", so revision 1 was created with a field called \"customerId\". This can be configured completely in XStream, using field aliases. You need to configure two aliases, in the following order: alias \"customerId\" to \"clientId\" and then alias \"customerId\" to \"customerId\". This will tell XStream that if it encounters a field called \"customerId\", it will call the corresponding XML element \"customerId\" (the second alias overrides the first). If XStream encounters an XML element called \"clientId\", it is a known alias and will be resolved to field name \"customerId\". Check out the XStream documentation for more information. For ultimate performance, you’re probably better off without reflection based mechanisms altogether. In that case, it is probably wisest to create a custom serialization mechanism. The DataInputStream and DataOutputStream allow you to easily write the contents of the events to an output stream. The ByteArrayOutputStream and ByteArrayInputStream allow writing to and reading from byte arrays. Especially in distributed systems, event messages need to be serialized on multiple occasions. Axon’s components are aware of this and have support for SerializationAware messages. If a SerializationAware message is detected, its methods are used to serialize an object, instead of simply passing the payload to a serializer. This allows for performance optimizations. When you serialize messages yourself, and want to benefit from the SerializationAware optimization, use the MessageSerializer class to serialize the payload and metadata of messages. All optimization logic is implemented in that class. See the JavaDoc of the MessageSerializer for more details. When using event sourcing, serialized events can stick around for a long time. Therefore, consider the format to which they are serialized, carefully. Consider configuring a separate serializer for events, carefully optimized for the way they are stored. The JSON format generated by Jackson is generally more suitable for the long term than XStream’s XML format. \"Being lenient\" from the Serializer’s perspective means the Serializer can ignore unknown properties. If it thus was handling a format to deserialize, it would not fail when it is incapable of finding a field / setter / constructor parameter for a given field in the serialized format. Enabling lenient serialization can be especially helpful to accommodate different message versions. This situation would occur naturally when using an event store, as the format of the events would change overtime. This might also happen between commands and queries if several distinct versions of an application are run concurrently. A scenario when you would hit this is when going for a rolling upgrade pattern to deploying a new service. To accommodate more closely with the desire to ignore unknown fields, both the XStreamSerializer and JacksonSerializer can be enabled as such. How to achieve this is shown in the following snippet: public class SerializerConfiguration { public Serializer buildSerializer() { return XStreamSerializer.builder() .lenientDeserialization() .build(); } } public class SerializerConfiguration { public Serializer buildSerializer() { return JacksonSerializer.builder() .lenientDeserialization() .build(); } } Sometimes the objects serialized by Axon will contain lists or collections of data. In other words, objects containing generics. For XStream, this poses no problem, as it will automatically add the type information to the serialized format. Jackson does not do this out of the box, however. The recommended approach by Jackson is to use the @JsonTypeInfo to define type information. Doing so will attach the object type to your, for example, serialized list/collection. This approach ensures that the other end can reconstruct the concrete type for you. Additionally, you can configure the ObjectMapper to add default typing information directly. However, note that this may not be a secure approach, as is described on Jackson’s Polymorphic Deserialization page. If you prefer to enable default typing regardless, the JacksonSerializer’s builder provides a method to allow this for you. With JacksonSerializer.Builder#defaultTyping, you will automatically enable the addition of types to the serialized format for lists and collections. Consider the following sample on how to enable default typing for the JacksonSerializer: public class SerializerConfiguration { // ... public Serializer buildSerializer() { return JacksonSerializer.builder() .defaultTyping() .build(); } } An upcaster works on a given content type (for example, dom4j Document). To provide extra flexibility between upcasters, content types between chained upcasters may vary. Axon will try to convert between the content types automatically by using a ContentTypeConverter. It will search for the shortest path from type x to type y, perform the conversion and pass the converted value into the requested upcaster. For performance reasons, conversion will only be performed if the canUpcast method on the receiving upcaster yields true. The ContentTypeConverter may depend on the type of serializer used. Attempting to convert a byte[] to a dom4j Document will not make any sense unless a Serializer was used that writes an event as XML. Axon Framework will only use the generic content type converters (such as the one converting a String to byte[] or a byte[] to InputStream) and the converters configured on the Serializer that will be used to deserialize the message. That means if you use a JSON based serializer, you would be able to convert to and from JSON-specific formats. ContentTypeConverters and Upcasting To achieve the best performance, ensure that all upcasters in the same chain (where one’s output is another chain’s input) work on the same content type. If Axon does not provide the content type conversion that you need, you can always write one yourself by implementing the ContentTypeConverter interface. The XStreamSerializer supports dom4j as well as XOM as XML document representations. The JacksonSerializer supports Jackson’s JsonNode and ObjectNode.","title":"Serialization","component":"axon-framework-reference","version":"4.10","name":"serialization","url":"/axon-framework-reference/4.10/serialization/","titles":[{"text":"Serializer Implementations","hash":"_serializer_implementations","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot - configuration class","hash":"_spring_boot_configuration_class","id":3},{"text":"Spring Boot - properties file","hash":"_spring_boot_properties_file","id":4},{"text":"Spring Boot - YAML file","hash":"_spring_boot_yaml_file","id":5},{"text":"Serializer tuning","hash":"_serializer_tuning","id":6},{"text":"XStreamSerializer","hash":"_xstreamserializer","id":7},{"text":"Preventing duplicate serialization","hash":"_preventing_duplicate_serialization","id":8},{"text":"Different serializer for events","hash":"different-serializer-for-events","id":9},{"text":"Lenient Deserialization","hash":"_lenient_deserialization","id":10},{"text":"XStreamSerializer","hash":"_xstreamserializer_2","id":11},{"text":"JacksonSerializer","hash":"_jacksonserializer","id":12},{"text":"Generic types","hash":"_generic_types","id":13},{"text":"ContentTypeConverters","hash":"_contenttypeconverters","id":14}]},"25":{"id":25,"text":"Axon Framework provides extensive support for Spring, but does not require you to use Spring in order to use Axon. All components can be configured programmatically and do not require Spring on the classpath. However, if you do use Spring, much of the configuration is made easier with the use of Spring’s annotation support. Axon provides Spring Boot starters on the top of that, so you can benefit from auto-configuration as well. Axon’s Spring Boot auto-configuration is by far the easiest option to get started configuring your Axon components. By simply declaring dependency to axon-spring-boot-starter, Axon will automatically configure the infrastructure components (command bus, event bus, query bus), as well as any component required to run and store aggregates and sagas. With Spring Data-JPA, a JPA Persistence Context is automatically configured. Axon’s Spring Boot Autoconfiguration module will make sure Axon’s JPA Entities are automatically registered with this default context. Since 4.6.0. we use the jakarta.persistence namespace by default, for backwards compatibility classes using the javax.persistence are available in the new legacyjpa namespace. However, when you explicitly include certain packages, for example using an @EntityScan annotation, this autoconfiguration will not happen anymore. If you then wish to use JPA based components from Axon, you will need to make sure the right Entities are registered. To register Axon’s JPA Entities, include the relevant packages, as described below: org.axonframework.eventhandling.tokenstore contains the entities necessary for the TokenStore used by Event Processors. org.axonframework.modelling.saga.repository.jpa contains the entities necessary to persist Sagas org.axonframework.eventsourcing.eventstore.jpa contains the entities necessary for the JPA Event Storage engine, when using a relational database as the Event Store. With a lot of things happening in the background, it sometimes becomes difficult to understand how an annotation or just including a dependency enables so many features. axon-spring-boot-starter follows general Spring boot convention in structuring the starter. It depends on axon-spring-boot-autoconfigure which holds concrete implementation of Axon auto-configuration. When Axon Spring Boot application starts up, it looks for a file named spring.factories in the classpath. This file is located in the META-INF directory of axon-spring-boot-autoconfigure module: org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ org.axonframework.springboot.autoconfig.MetricsAutoConfiguration,\\ org.axonframework.springboot.autoconfig.MicrometerMetricsAutoConfiguration,\\ org.axonframework.springboot.autoconfig.EventProcessingAutoConfiguration,\\ org.axonframework.springboot.autoconfig.AxonAutoConfiguration,\\ org.axonframework.springboot.autoconfig.legacy_jpa.JpaJavaxAutoConfiguration,\\ org.axonframework.springboot.autoconfig.legacy_jpa.JpaJavaxEventStoreAutoConfiguration,\\ org.axonframework.springboot.autoconfig.JpaAutoConfiguration,\\ org.axonframework.springboot.autoconfig.JpaEventStoreAutoConfiguration,\\ org.axonframework.springboot.autoconfig.JdbcAutoConfiguration,\\ org.axonframework.springboot.autoconfig.TransactionAutoConfiguration,\\ org.axonframework.springboot.autoconfig.NoOpTransactionAutoConfiguration,\\ org.axonframework.springboot.autoconfig.InfraConfiguration,\\ org.axonframework.springboot.autoconfig.ObjectMapperAutoConfiguration,\\ org.axonframework.springboot.autoconfig.AxonServerAutoConfiguration,\\ org.axonframework.springboot.autoconfig.XStreamAutoConfiguration,\\ org.axonframework.springboot.autoconfig.AxonServerActuatorAutoConfiguration,\\ org.axonframework.springboot.autoconfig.AxonServerBusAutoConfiguration, \\ org.axonframework.springboot.autoconfig.AxonTracingAutoConfiguration, \\ org.axonframework.springboot.autoconfig.OpenTelemetryAutoConfiguration This file maps different configuration classes which an Axon Spring Boot application will try to apply. So, as per this snippet, Spring Boot will try to apply all the configuration classes for AxonServerAutoConfiguration, AxonAutoConfiguration, … axon-spring-boot-starter follows general Spring boot convention in structuring the starter. It depends on axon-spring-boot-autoconfigure which holds concrete implementation of Axon auto-configuration. When Axon Spring Boot application starts up, it looks for a file named org.springframework.boot.autoconfigure.AutoConfiguration.imports in the classpath. This file is located in the META-INF/spring directory of axon-spring-boot-autoconfigure module: org.axonframework.springboot.autoconfig.AxonAutoConfiguration org.axonframework.springboot.autoconfig.AxonServerActuatorAutoConfiguration org.axonframework.springboot.autoconfig.AxonServerAutoConfiguration org.axonframework.springboot.autoconfig.AxonServerBusAutoConfiguration org.axonframework.springboot.autoconfig.AxonTracingAutoConfiguration org.axonframework.springboot.autoconfig.EventProcessingAutoConfiguration org.axonframework.springboot.autoconfig.InfraConfiguration org.axonframework.springboot.autoconfig.JdbcAutoConfiguration org.axonframework.springboot.autoconfig.legacy_jpa.JpaJavaxAutoConfiguration org.axonframework.springboot.autoconfig.legacy_jpa.JpaJavaxEventStoreAutoConfiguration org.axonframework.springboot.autoconfig.JpaAutoConfiguration org.axonframework.springboot.autoconfig.JpaEventStoreAutoConfiguration org.axonframework.springboot.autoconfig.MetricsAutoConfiguration org.axonframework.springboot.autoconfig.MicrometerMetricsAutoConfiguration org.axonframework.springboot.autoconfig.NoOpTransactionAutoConfiguration org.axonframework.springboot.autoconfig.ObjectMapperAutoConfiguration org.axonframework.springboot.autoconfig.OpenTelemetryAutoConfiguration org.axonframework.springboot.autoconfig.TransactionAutoConfiguration org.axonframework.springboot.autoconfig.XStreamAutoConfiguration This file maps different configuration classes which an Axon Spring Boot application will try to apply. So, as per this snippet, Spring Boot will try to apply all the configuration classes for AxonServerAutoConfiguration, AxonAutoConfiguration, … Whether these configuration classes will be applied or not, it will depend on conditions defined on these classes: AxonServerAutoConfiguration configures Axon Server as implementation for the Command Bus, Query Bus and Event Store. It will be applied before AxonAutoConfiguration, and it will be applied only if the org.axonframework.axonserver.connector.AxonServerConfiguration class is available in the classpath. Axon Server auto configuration can be disabled by setting the axon.axonserver.enabled property to false in the .properties/.yml file. AxonAutoConfiguration configures a 'non-axon-server' implementation of Command Bus, Query Bus, Event Store/Event Bus and other Axon components. These components will be initialized only if they are not in the Spring Application context already, eg. @ConditionalOnMissingBean(EventBus.class). As AxonAutoConfiguration will be applied after AxonServerAutoConfiguration these Axon components will be in the Spring Application Context already, and therefore Axon Server’s implementation of Command Bus, Query Bus and Event Store/Event Bus will win. Axon Spring Boot auto-configuration is not intrusive. It will define only Spring components that you haven’t already explicitly defined in the application context. This allows you to completely override the auto-configured beans by defining your own in one of the @Configuration classes. Specific Axon (Spring) component configurations will be explained in detail in the following sections of this guide. When using Spring to automatically wire everything, sometimes there is a need to know when all the (Command, Event and Query) handlers have been registered to their respective buses. To support this an AxonStartedEvent Spring event is published when the Configuration module has fully started.","title":"Spring Boot Integration","component":"axon-framework-reference","version":"4.10","name":"spring-boot-integration","url":"/axon-framework-reference/4.10/spring-boot-integration/","titles":[{"text":"Auto-configuration","hash":"_auto_configuration","id":1},{"text":"JPA and persistence contexts","hash":"_jpa_and_persistence_contexts","id":2},{"text":"Demystifying Axon Spring Boot Starter","hash":"_demystifying_axon_spring_boot_starter","id":3},{"text":"Auto configuration with Spring Boot 2","hash":"_auto_configuration_with_spring_boot_2","id":4},{"text":"Auto configuration with Spring Boot","hash":"_auto_configuration_with_spring_boot","id":5},{"text":"Spring event on startup finished","hash":"_spring_event_on_startup_finished","id":6}]},"26":{"id":26,"text":"Unfortunately, but necessarily, Axon Framework 4.7.0 introduces a few breaking changes. If you migrate from 4.6.x (or earlier) versions, you may need to make some adjustments to your code. If you start a greenfield Axon Framework project, there is nothing to worry about. You may safely skip the following information. The breaking changes are related to the migration from javax to jakarta packages both in Axon Framework and other frameworks often used together with Axon. Depending on what you were using with 4.6.x version, there are three possible migration paths: From javax to javax: This is what you may want if you don’t want Spring 6 and Spring Boot 3 support and expect things to stay the same. From javax to jakarta: This is what you will want if you also upgrade to Spring 6, Spring Boot 3, or another framework that depends on jakarta packages. From jakarta to jakarta: This is what you will want if you have already moved to the optional [module-name]-jakarta modules in Axon Framework 4.6.x. Next to the full scenario descriptions, you are also able to use OpenRewrite migration recipes provided by the Framework. Please go to the Migration automation section for more details. From jakarta to javax While technically possible, the jakarta to javax migration is not something you should do. If you have already made an effort to switch to the new packages, it makes no sense to go back. Zero Axon configuration If you don’t have any manual configuration and use the framework’s axon-spring-boot-starter, than the upgrade to 4.7 is seamless. Adjust packages in import statements and FQCNs according to the new locations mentioned below: Axon 4.6.x Axon 4.7.x org.axonframework.common.jpa.EntityManagerProvider org.axonframework.common.legacyjpa.EntityManagerProvider org.axonframework.common.jpa.PagingJpaQueryIterable org.axonframework.common.legacyjpa.PagingJpaQueryIterable org.axonframework.common.jpa.SimpleEntityManagerProvider org.axonframework.common.legacyjpa.SimpleEntityManagerProvider org.axonframework.eventhandling.deadletter.jpa.DeadLetterJpaConverter org.axonframework.eventhandling.deadletter.legacyjpa.DeadLetterJpaConverter org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore org.axonframework.eventsourcing.eventstore.jpa.JpaEventStorageEngine org.axonframework.eventsourcing.eventstore.legacyjpa.JpaEventStorageEngine org.axonframework.eventsourcing.eventstore.jpa.SQLErrorCodesResolver org.axonframework.eventsourcing.eventstore.legacyjpa.SQLErrorCodesResolver org.axonframework.messaging.interceptors.BeanValidationInterceptor org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor org.axonframework.messaging.interceptors.JSR303ViolationException org.axonframework.messaging.interceptors.legacyvalidation.JSR303ViolationException org.axonframework.modelling.command.GenericJpaRepository org.axonframework.modelling.command.legacyjpa.GenericJpaRepository org.axonframework.modelling.saga.repository.jpa.JpaSagaStore org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore org.axonframework.springboot.autoconfig.JpaAutoConfiguration org.axonframework.springboot.autoconfig.legacyjpa.JpaJavaxAutoConfiguration org.axonframework.springboot.autoconfig.JpaEventStoreAutoConfiguration org.axonframework.springboot.autoconfig.legacyjpa.JpaJavaxEventStoreAutoConfiguration org.axonframework.springboot.util.jpa.ContainerManagedEntityManagerProvider org.axonframework.springboot.util.legacyjpa.ContainerManagedEntityManagerProvider If you have customized the TokenEntry or AbstractTokenEntry, rebase your changes on the current TokenEntry. This is required since the AbstractTokenEntry has been deprecated in favor of the TokenEntry. If you have customized the SagaEntry or AbstractSagaEntry, rebase your changes on the current SagaEntry. This is required since the AbstractSagaEntry has been deprecated in favor of the SagaEntry. Remove most mentions of javax in your codebase and replace them with respective jakarta ones. Note that not every reference of javax is deprecated as part of the Javax-to-Jakarta switch, such as some javax.annotation and javax.cache mentions. You can find an exhaustive list of unaffected packages here. If you are using any other frameworks together with Axon Framework (such as Spring, Hibernate, etc.) make sure to upgrade those to the respective versions supporting jakarta namespace. If you migrate to Hibernate 6 and did not customize the sequence generator of the Framework’s domain_event_entry and association_value_entry, you need to deal with Hibernates adjusted default sequence generator. In this case, your environment uses a so-called hibernate_sequence that is used for all your tables. However, Hibernate 6 will construct dedicated sequences per table using a sequence generator. Although we strongly recommend that you use a dedicated sequence generator per table, the easiest way forward to switch back this new default of Hibernate: persistence.xml configuration Spring Boot - properties file spring.jpa.properties.hibernate.id.db_structure_naming_strategy=legacy #omitting other properties for simplicity... In your dependency configuration (Maven, Gradle, etc.) replace the jakarta-specific Axon Framework modules with the default ones: Axon 4.6.x Axon 4.7.x axon-configuration-jakarta axon-configuration axon-eventsourcing-jakarta axon-eventsourcing axon-messaging-jakarta axon-messaging axon-modelling-jakarta axon-modelling The steps above explain in detail what you need to do to upgrade to Axon Framework 4.7 or higher. If you want to automate some of these steps, there are two OpenRewrite migration recipes you can use: Upgrade to Axon Framework 4.7+ Jakarta - A recipe to upgrade from an Axon Framework Javax-specific project to Jakarta. Upgrade to Axon Framework 4.7+ Javax - A recipe to upgrade an Axon Framework Javax-specific project and remain on Javax. For example, if you want to upgrade to 4.7 and stick with Javax, you can run the following command: mvn -U org.openrewrite.maven:rewrite-maven-plugin:4.40.0:run \\ -Drewrite.recipeArtifactCoordinates=org.axonframework:axon-migration:LATEST \\ -DactiveRecipes=org.axonframework.migration.UpgradeAxonFramework_4_7_Javax If you prefer Gradle over Maven, refer to the OpenRewrite documentation to resolve this. Combining recipes The mentioned recipes above only allow you to upgrade Axon Framework-specific code. However, you can combine recipes into a single command to, for example, upgrade to Spring Boot 3 and Axon Framework 4.7 in one go: mvn -U org.openrewrite.maven:rewrite-maven-plugin:4.40.0:run \\ -Drewrite.recipeArtifactCoordinates=org.openrewrite.recipe:rewrite-spring:4.33.0,org.axonframework:axon-migration:LATEST \\ -DactiveRecipes=org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0,org.axonframework.migration.UpgradeAxonFramework_4_7_Jakarta","title":"Upgrading to Axon Framework 4.7","component":"axon-framework-reference","version":"4.10","name":"upgrading-to-4-7","url":"/axon-framework-reference/4.10/upgrading-to-4-7/","titles":[{"text":"Steps to upgrade from javax to javax","hash":"_steps_to_upgrade_from_javax_to_javax","id":1},{"text":"Step 1","hash":"_step_1","id":2},{"text":"Step 2","hash":"_step_2","id":3},{"text":"Step 3","hash":"_step_3","id":4},{"text":"Steps to upgrade from javax to jakarta","hash":"_steps_to_upgrade_from_javax_to_jakarta","id":5},{"text":"Step 1","hash":"_step_1_2","id":6},{"text":"Step 2","hash":"_step_2_2","id":7},{"text":"Step 3","hash":"_step_3_2","id":8},{"text":"Steps to upgrade from jakarta to jakarta","hash":"_steps_to_upgrade_from_jakarta_to_jakarta","id":9},{"text":"Migration automation","hash":"_migration_automation","id":10}]},"27":{"id":27,"text":"The Command Handlers pages provide the background on how to handle command messages in your application. The dispatching process is the starting point of such a command message. Axon provides two interfaces you can use to send the commands to your command handlers, being: The Command Bus, and The Command Gateway This page will show how and when to use the command gateway and bus. How to configure and specifics on the command gateway and bus implementations are discussed in the infrastructure section. The 'Command Bus' is the mechanism that dispatches commands to their respective command handlers. As such, it is the infrastructure component that is aware of which component can handle which command. Each command is always sent to exactly one command handler. If no command handler is available for the dispatched command, a NoHandlerForCommandException exception is thrown. The CommandBus provides two methods to dispatch commands to their respective handler, being the dispatch(CommandMessage) and dispatch(CommandMessage, CommandCallback) methods: private CommandBus commandBus; // 1. public void dispatchCommands() { String cardId = UUID.randomUUID().toString(); // 2. // 3. & 4. commandBus.dispatch(GenericCommandMessage.asCommandMessage(new IssueCardCommand(cardId, 100, \"shopId\"))); // 5. & 6. commandBus.dispatch( GenericCommandMessage.asCommandMessage(new IssueCardCommand(cardId, 100, \"shopId\")), (CommandCallback) (cmdMsg, cmdResultMsg) -> { // 7. if (cmdResultMsg.isExceptional()) { Throwable throwable = cmdResultMsg.exceptionResult(); } else { String commandResult = cmdResultMsg.getPayload(); } } ); } // omitted class, constructor and result usage The CommandDispatcher described above exemplifies a couple of important aspects and capabilities of the dispatching commands: The CommandBus interface providing the functionality to dispatch command messages. The aggregate identifier is, per best practice, initialized as the String of a random unique identifier. Typed identifier objects are also possible, as long as the object implements a sensible toString() function. The GenericCommandMessage#asCommandMessage(Object) method is used to create a CommandMessage. To be able to dispatch a command on the CommandBus, you are required to wrap your own command object (for example, the 'command message payload') in a CommandMessage. The CommandMessage also allows the addition of MetaData to the Command Message. The CommandBus#dispatch(CommandMessage) function will dispatch the provided CommandMessage on the bus, for delivery to a command handler. If an application isn’t directly interested in the outcome of a command, this method can be used. If the outcome of command handling is relevant for your application, the optional second parameter can be provided, the CommandCallback. The CommandCallback allows the dispatching component to be notified when command handling is completed. The Command Callback has one function, onResult(CommandMessage, CommandResultMessage), which is called when command handling has finished. The first parameter is the dispatched command, whilst the second is execution result of the dispatched command. Lastly, the CommandCallback is a 'functional interface' due to onResult being its only method. As such, commandBus.dispatch(commandMessage, (cmdMsg, commandResultMessage) -> { /* …​ */ }) would also be possible. The CommandResultMessage provides the API to verify whether command execution was exceptional or successful. If CommandResultMessage#isExceptional returns true, you can assume that the CommandResultMessage#exceptionResult will return a Throwable instance containing the actual exception. Otherwise, the CommandResultMessage#getPayload method may provide you with an actual result or null, as further specified here. Command Callback consideration In the case that dispatch(CommandMessage, CommandCallback) is used, the calling component may not assume that the callback is invoked in the same thread that dispatched the command. If the calling thread depends on the result before continuing, you can use the FutureCallback. The FutureCallback is a combination of a Future (as defined in the java.concurrent package) and Axon’s CommandCallback. Alternatively, consider using a CommandGateway. The 'Command Gateway' is a convenience approach towards dispatching commands. It does so by abstracting certain aspects for you when dispatching a command on the CommandBus. It this uses the CommandBus underneath to perform the actual dispatching of the message. While you are not required to use a gateway to dispatch commands, it is generally the easiest option to do so. The CommandGateway interface can be separated in two sets of methods, namely send and sendAndWait: private CommandGateway commandGateway; // 1. public void sendCommand() { String cardId = UUID.randomUUID().toString(); // 2. // 3. CompletableFuture futureResult = commandGateway.send(new IssueCardCommand(cardId, 100, \"shopId\")); } // omitted class, constructor and result usage The send API as shown above introduces a couple of concepts, marked with numbered comments: The CommandGateway interface providing the functionality to dispatch command messages. It does so by internally leveraging the CommandBus interface dispatch messages. The aggregate identifier is, per best practice, initialized as the String of a random unique identifier. Typed identifier objects are also possible, as long as the object implements a sensible toString() function. The send(Object) function requires a single parameter, the command object. This is an asynchronous approach to dispatching commands. As such the response of the send method is a CompletableFuture. This allows for chaining of follow-up operations after the command result has been returned. Callback when using send(Object) The CommandGateway#send(Object) method uses the FutureCallback under the hood to unblock the command dispatching thread from the command handling thread. A synchronous approach to sending messages can also be achieved, by using the sendAndWait methods: private CommandGateway commandGateway; public void sendCommandAndWaitOnResult() { IssueCardCommand commandPayload = new IssueCardCommand(UUID.randomUUID().toString(), 100, \"shopId\"); // 1. String result = commandGateway.sendAndWait(commandPayload); // 2. result = commandGateway.sendAndWait(commandPayload, 1000, TimeUnit.MILLISECONDS); } // omitted class, constructor and result usage The CommandGateway#sendAndWait(Object) function takes in a single parameter, your command object. It will wait indefinitely until the command dispatching and handling process has been resolved. The result returned by this method can either be successful or exceptional, as will be explained here. If waiting indefinitely is not desirable, a 'timeout' paired with the 'time unit' can be provided alongside the command object. Doing so will ensure that the command dispatching thread will not wait longer than specified. If command dispatching/handling was interrupted or the timeout was reached whilst using this approach, the command result will be null. In all other scenarios, the result follows the referenced approach. Dispatching commands will, generally speaking, have two possible outcomes: Command handled successfully, and command handled exceptionally The outcome to some extent depends on the dispatching process, but more so on the implementation of the command handler. Thus, if the @CommandHandler annotated function throws an exception due to some business logic, it will be that exception which will be the result of dispatching the command. The successful resolution of command handling intentionally should not provide any return objects. Thus, if the CommandBus/CommandGateway provides a response (either directly or through the CommandResultMessage), then you should assume the result of successful command handling to return null. While it is possible to return results from command handlers, this should be used sparsely. The intent of the Command should never be to retrieve a value, as that would be an indication that the message should be designed as a Query Message. Exceptions to this would be the identifier of the Aggregate Root, or identifiers of entities the Aggregate Root has instantiated. The framework has one such exception build in, on the @CommandHandler annotated constructor of an Aggregate. In case the 'command handling constructor' has executed successfully, instead of the Aggregate itself, the value of the @AggregateIdentifier annotated field will be returned. Axon Coding Tutorial #5: - Connecting the UI","title":"Command Dispatchers","component":"axon-framework-reference","version":"4.10","name":"command-dispatchers","url":"/axon-framework-reference/4.10/axon-framework-commands/command-dispatchers/","titles":[{"text":"The CommandBus","hash":"the-command-bus","id":1},{"text":"The CommandGateway","hash":"_the_commandgateway","id":2},{"text":"Command dispatching results","hash":"_command_dispatching_results","id":3}]},"28":{"id":28,"text":"Although Command Handlers can be placed in regular components, it is recommended to define the Command Handlers directly on the Aggregate that contains the state to process this command. To define a Command Handler in an Aggregate, simply annotate the method which should handle the command with @CommandHandler. The @CommandHandler annotated method will become a Command Handler for Command Messages where the command name matches fully qualified class name of the first parameter of that method. Thus, a method signature of void handle(RedeemCardCommand cmd) annotated with @CommandHandler, will be the Command Handler of the RedeemCardCommand Command Messages. Command Messages can also be dispatched with different command names. To be able to handle those correctly, the String commandName value can be specified in the @CommandHandler annotation. In order for Axon to know which instance of an Aggregate type should handle the Command Message, the property carrying the Aggregate Identifier in the command object must be annotated with @TargetAggregateIdentifier. The annotation may be placed on either the field or an accessor method (for example, a getter) in the Command object. Routing in a distributed environment Regardless of the type of command, as soon as you start distributing your application (through Axon Server, for example), it is recommended to specify a routing key on the command. This is the job of the @TargetAggregateIdentifier, but in absence of a field worthy of the annotation, the @RoutingKey annotation should be added to ensure the command can be routed. If neither annotation works for your use case, a different RoutingStrategy can be configured, as is explained in the Routing Strategy section. Taking the GiftCard Aggregate as an example, we can identify two Command Handlers on the Aggregate: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.modelling.command.AggregateIdentifier; import static org.axonframework.modelling.command.AggregateLifecycle.apply; public class GiftCard { @AggregateIdentifier private String id; private int remainingValue; @CommandHandler public GiftCard(IssueCardCommand cmd) { apply(new CardIssuedEvent(cmd.getCardId(), cmd.getAmount())); } @CommandHandler public void handle(RedeemCardCommand cmd) { if (cmd.getAmount() remainingValue) { throw new IllegalStateException(\"amount > remaining value\"); } apply(new CardRedeemedEvent(id, cmd.getTransactionId(), cmd.getAmount())); } // omitted event sourcing handlers } The Command objects, IssueCardCommand and RedeemCardCommand, which GiftCard handles have the following format: import org.axonframework.modelling.command.TargetAggregateIdentifier; public class IssueCardCommand { @TargetAggregateIdentifier private final String cardId; private final Integer amount; public IssueCardCommand(String cardId, Integer amount) { this.cardId = cardId; this.amount = amount; } // omitted getters, equals/hashCode, toString functions } public class RedeemCardCommand { @TargetAggregateIdentifier private final String cardId; private final String transactionId; private final Integer amount; public RedeemCardCommand(String cardId, String transactionId, Integer amount) { this.cardId = cardId; this.transactionId = transactionId; this.amount = amount; } // omitted getters, equals/hashCode, toString functions } The cardId present in both commands is the reference to a GiftCard instance and thus is annotated with the @TargetAggregateIdentifier annotation. Commands that create an Aggregate instance do not need to identify the target aggregate identifier, as there is no Aggregate in existence yet. It is nonetheless recommended for consistency to annotate the Aggregate Identifier on them as well. If you prefer to use another mechanism for routing commands, the behavior can be overridden by supplying a custom CommandTargetResolver. This class should return the Aggregate Identifier and expected version (if any) based on a given command. Aggregate Creation Command Handlers When the @CommandHandler annotation is placed on an aggregate’s constructor, the respective command will create a new instance of that aggregate and add it to the repository. Those commands do not require targeting a specific aggregate instance. Therefore, those commands need neither the @TargetAggregateIdentifier nor the @TargetAggregateVersion annotation. Furthermore, a custom CommandTargetResolver will not be invoked for these commands. Within an Aggregate there is a specific location to perform business logic validation and Aggregate state changes. The Command Handlers should decide whether the Aggregate is in the correct state. If yes, an Event is published. If not, the Command might be ignored or an exception could be thrown, depending on the needs of the domain. State changes should not occur in any Command Handling function. The Event Sourcing Handlers should be the only methods where the Aggregate’s state is updated. Failing to do so means the Aggregate would miss state changes when it is being sourced from its events. The Aggregate Test Fixture will guard against unintentional state changes in Command Handling functions. It is thus advised to provide thorough test cases for any Aggregate implementation. When to handle an Event The only state an Aggregate requires is the state it needs to make a decision. Handling an Event published by the Aggregate is thus only required if the state change the Event resembles is needed to drive future validation. In some cases, especially when the Aggregate structure grows beyond just a couple of Entities, it is cleaner to react on events being published in other Entities of the same Aggregate (multi Entity Aggregates are explained in more detail here). However, since the Event Handling methods are also invoked when reconstructing Aggregate state, special precautions must be taken. It is possible to apply() new events inside an Event Sourcing Handler method. This makes it possible for an Entity 'B' to apply an event in reaction to Entity 'A' doing something. Axon will ignore the apply()`invocation when replaying historic events upon sourcing the given Aggregate. Do note that in the scenario where Event Messages are published from an Event Sourcing Handler, the Event of the inner `apply() invocation is only published to the entities after all entities have received the first event. If more events need to be published, based on the state of an entity after applying an inner event, use apply(…​).andThenApply(…​). Reacting to other Events An Aggregate cannot handle events from other sources then itself. This is intentional as the Event Sourcing Handlers are used to recreate the state of the Aggregate. For this it only needs it’s own events as those represent it’s state changes. To make an Aggregate react on events from other Aggregate instances, Sagas or Event Handling Components should be leveraged Up until now, we have depicted the GiftCard aggregate with roughly two types of command handlers: @CommandHandler annotated constructors @CommandHandler annotated methods Option 1 will always expect to be the instantiation of the GiftCard aggregate, whilst option 2 expects to be targeted towards an existing aggregate instance. Although this may be the default, there is the option to define a creation policy on a command handler. This can be achieved by adding the @CreationPolicy annotation to a command handler annotated method, like so: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.modelling.command.CreationPolicy; import org.axonframework.modelling.command.AggregateCreationPolicy; public class GiftCard { public GiftCard() { // Required no-op constructor } @CommandHandler @CreationPolicy(AggregateCreationPolicy.ALWAYS) public void handle(IssueCardCommand cmd) { // An `IssueCardCommand`-handler which will create a `GiftCard` aggregate } @CommandHandler @CreationPolicy(AggregateCreationPolicy.CREATE_IF_MISSING) public void handle(CreateOrRechargeCardCommand cmd) { // A 'CreateOrRechargeCardCommand'-handler which creates a `GiftCard` aggregate if it did not exist // Otherwise, it will update an existing `GiftCard` aggregate. } // omitted aggregate state, command handling logic and event sourcing handlers } As is shown above, the @CreationPolicy annotation requires stating the AggregateCreationPolicy. This enumeration has the following options available: ALWAYS - A creation policy of \"always\" will expect to instantiate the aggregate. This effectively works like a command handler annotated constructor. Without defining a return type, the aggregate identifier used during the creation will be returned. Through this approach, it is possible to return other results next to the aggregate identifier. CREATE_IF_MISSING - A creation policy of \"create if missing\" can either create an aggregate or act on an existing instance. This policy should be regarded as a create or update approach of an aggregate. NEVER - A creation policy of \"never\" will be handled on an existing aggregate instance. This effectively works like any regular command handler annotated method. Command handling functions are most often directly placed on the Aggregate (as described in more detail here). There are situations, however, where it is not possible nor desired to route a command directly to an Aggregate instance. Message handling functions, like Command Handlers, can, however, be placed on any object. It is thus possible to instantiate a 'Command Handling Object'. A Command Handling Object is a simple (regular) object, which has @CommandHandler annotated methods. Unlike with Aggregates, there is only a single instance of a Command Handling Object, which handles all commands of the types it declares in its methods: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.modelling.command.Repository; public class GiftCardCommandHandler { // 1. private final Repository giftCardRepository; @CommandHandler public void handle(RedeemCardCommand cmd) { giftCardRepository.load(cmd.getCardId()) // 2. .execute(giftCard -> giftCard.handle(cmd)); // 3. } // omitted constructor } In the above snippet we have decided that the RedeemCardCommand should no longer be directly handled on the GiftCard. Instead, we load the GiftCard manually and execute the desired method on it: The Repository for the GiftCard Aggregate, used for retrieval and storage of an Aggregate. If @CommandHandler methods are placed directly on the Aggregate, Axon will automatically know to call the Repository to load a given instance. It is thus not mandatory to directly access the Repository, but a design choice. To load the intended GiftCard Aggregate instance, the Repository#load(String) method is used. The provided parameter should be the Aggregate identifier. After that Aggregate has been loaded, the Aggregate#execute(Consumer) function should be invoked to perform an operation on the Aggregate. Using the execute function ensure that the Aggregate life cycle is correctly started.","title":"Command Handlers","component":"axon-framework-reference","version":"4.10","name":"command-handlers","url":"/axon-framework-reference/4.10/axon-framework-commands/command-handlers/","titles":[{"text":"Aggregate command handlers","hash":"_aggregate_command_handlers","id":1},{"text":"Business logic and state changes","hash":"_business_logic_and_state_changes","id":2},{"text":"Applying events from event-sourcing handlers","hash":"_applying_events_from_event_sourcing_handlers","id":3},{"text":"Aggregate command handler creation policy","hash":"_aggregate_command_handler_creation_policy","id":4},{"text":"External command handlers","hash":"external_command_handlers","id":5}]},"29":{"id":29,"text":"This page aims to describe the suite of options for configuring the Command Model. Core concepts within the Command Model are the Aggregates which are implemented. To instantiate a default Aggregate configuration you simply do the following: Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureAggregate(GiftCard.class); The @Aggregate annotation (in the org.axonframework.spring.stereotype package) triggers auto configuration to set up the necessary components to use the annotated type as an aggregate. Note that only the aggregate root needs to be annotated. Axon will automatically register all the @CommandHandler annotated methods with the command bus and set up a repository if none is present. // ... import org.axonframework.spring.stereotype.Aggregate; // ... @Aggregate public class GiftCard { @AggregateIdentifier private String id; @CommandHandler public GiftCard(IssueCardCommand cmd) { apply(new CardIssuedEvent(cmd.getCardId(), cmd.getAmount())); } } Often times the command handler functions are placed directly on the aggregate. When this approach is taken, simply registering the Aggregate as described above is sufficient for all its command handler methods to be registered too. External Command Handlers however do require direct registration as being a command handler, which is shown in the following sample: Given the existence of the following Command Handler: public class GiftCardCommandHandler { private final Repository giftCardRepository; @CommandHandler public void handle(RedeemCardCommand cmd) { giftCardRepository.load(cmd.getCardId()) .execute(giftCard -> giftCard.handle(cmd)); } // omitted constructor } The following is needed to register a GiftCardCommandHandler as being a Command Handler: Configurer axonConfigurer = DefaultConfigurer.defaultConfiguration() .registerCommandHandler(conf -> new GiftCardCommandHandler()); Or, a more general approach to registering all types of message handlers in a component can be used: Configurer axonConfigurer = DefaultConfigurer.defaultConfiguration() .registerMessageHandler(conf -> new GiftCardCommandHandler()); When using Spring Boot, simply specifying the Command Handler as a bean is sufficient: @Component public class GiftCardCommandHandler { private final Repository giftCardRepository; @CommandHandler public void handle(RedeemCardCommand cmd) { giftCardRepository.load(cmd.getCardId()) .execute(giftCard -> giftCard.handle(cmd)); } // omitted constructor } Duplicate Command Handling Functions As specified in the Messaging Concepts section, a command always has exactly one destination. That means there should only be a single Command Handler method for any given command. By default, when a duplicate Command Handler method is registered, the last registration will be kept and a warning is logged. This behaviour can be adjusted by specifying a different DuplicateCommandHandlerResolver, as is described in the Runtime Tuning section. The repository is the mechanism that provides access to aggregates. The repository acts as a gateway to the actual storage mechanism used to persist the data. In CQRS, repositories only need to be able to find aggregates based on their unique identifier. Any other types of queries should be performed against the query database. In Axon Framework, all repositories must implement the Repository interface. This interface prescribes three methods: load(identifier, version), load(identifier) and newInstance(factoryMethod). The load methods allows you to load aggregates from the repository. The optional version parameter is used to detect concurrent modifications (see Conflict resolution). newInstance is used to register newly created aggregates in the repository. Depending on your underlying persistence storage and auditing needs, there are a number of base implementations that provide basic functionality needed by most repositories. Axon Framework makes a distinction between repositories that save the current state of the aggregate (see Standard repositories), and those that store the events of an aggregate (see Event Sourcing repositories). Note that the Repository interface does not prescribe a delete(identifier) method. Deleting aggregates is done by invoking the AggregateLifecycle.markDeleted() method from within an aggregate. Deleting an aggregate is a state migration like any other, with the only difference that it is irreversible in many cases. You should create your own meaningful method on your aggregate which sets the aggregate’s state to \"deleted\". This also allows you to register any events that you would like to have published. Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureAggregate( AggregateConfigurer.defaultConfiguration(GiftCard.class) .configureRepository(c -> EventSourcingRepository.builder(GiftCard.class) .eventStore(c.eventStore()) .build()) ); To fully customize the repository used, you can define one in the application context. For Axon Framework to use this repository for the intended aggregate, define the bean name of the repository in the repository attribute on @Aggregate Annotation. Alternatively, specify the bean name of the repository to be the aggregate’s name, (first character lowercase), suffixed with Repository. So on a class of type GiftCard, the default repository name is giftCardRepository. If no bean with that name is found, Axon will define an EventSourcingRepository (which fails if no EventStore is available). @Bean public Repository repositoryForGiftCard(EventStore eventStore) { return EventSourcingRepository.builder(GiftCard.class).eventStore(eventStore).build(); } @Aggregate(repository = \"repositoryForGiftCard\") public class GiftCard { /*...*/ } Note that this requires full configuration of the Repository, including any SnapshotTriggerDefinition or AggregateFactory that may otherwise have been configured automatically. Standard repositories store the actual state of an aggregate. Upon each change, the new state will overwrite the old. This makes it possible for the query components of the application to use the same information the command component also uses. This could, depending on the type of application you are creating, be the simplest solution. If that is the case, Axon provides some building blocks that help you implement such a repository. Axon provides one out-of-the-box implementation for a standard Repository: the GenericJpaRepository. It expects the Aggregate to be a valid JPA Entity. It is configured with an EntityManagerProvider which provides the EntityManager to manage the actual persistence, and a class specifying the actual type of aggregate stored in the repository. You also pass in the EventBus to which events are to be published when the aggregate invokes the static AggregateLifecycle.apply() method. You can also easily implement your own repository. In that case, it is best to extend from the abstract LockingRepository. As aggregate wrapper type, it is recommended to use the AnnotatedAggregate. See the sources of GenericJpaRepository for an example. Aggregate roots that are able to reconstruct their state based on events may also be configured to be loaded by an event sourcing repository. Those repositories do not store the aggregate itself, but the series of events generated by the aggregate. Based on these events, the state of an aggregate can be restored at any time. The EventSourcingRepository implementation provides the basic functionality needed by any event sourcing repository in the Axon Framework. It depends on an EventStore (see Event store implementations), which abstracts the actual storage mechanism for the events. The AggregateFactory specifies how an aggregate instance is created based on a given event stream. This makes the AggregateFactory a configurable component for the EventSourcingRepository only. Furthermore, it is only invoked for existing aggregate event streams, as an event stream is required. Hence, the command constructing the aggregate will not trigger an AggregateFactory invocation. Axon Framework comes with two AggregateFactory implementations that you may use. If they do not suffice, it is really easy to create your own implementation. The GenericAggregateFactory is a special AggregateFactory implementation that can be used for any type of event sourced aggregate root. The GenericAggregateFactory creates an instance of the aggregate type the repository manages. The aggregate class must be non-abstract and declare a default no-arg constructor that does no initialization at all. The GenericAggregateFactory is suitable for most scenarios where aggregates do not need special injection of non-serializable resources. Depending on your architectural choices, it might be useful to inject dependencies into your aggregates using Spring. You could, for example, inject query repositories into your aggregate to ensure the existence (or nonexistence) of certain values. To inject dependencies into your aggregates, you need to configure a prototype bean of your aggregate root in the Spring context that also defines the SpringPrototypeAggregateFactory. Instead of creating regular instances of using a constructor, it uses the Spring Application Context to instantiate your aggregates. This will also inject any dependencies in your aggregate. Note that although you can inject dependencies as global fields of an aggregate, you can also inject them as parameters. When it comes to parameters added to message handling methods, Axon uses the so-called Parameter Resolver support to inject your beans. As such, the SpringPrototypeAggregateFactory does not play any role to inject dependencies to message handling methods. In some cases, the GenericAggregateFactory just doesn’t deliver what you need. For example, you could have an abstract aggregate type with multiple implementations for different scenarios (for example, PublicUserAccount and BackOfficeAccount both extending an Account). Instead of creating different repositories for each of the aggregates, you could use a single repository, and configure an AggregateFactory that is aware of the different implementations. The bulk of the work the aggregate factory does is creating uninitialized aggregate instances. It must do so using a given aggregate identifier and the first event from the stream. Usually, this event is a creation event which contains hints about the expected type of aggregate. You can use this information to choose an implementation and invoke its constructor. Make sure no events are applied by that constructor; the aggregate must be uninitialized. Initializing aggregates based on the events can be a time-consuming effort, compared to the direct aggregate loading of the simple repository implementations. The CachingEventSourcingRepository provides a cache from which aggregates can be loaded if available.","title":"Configuration","component":"axon-framework-reference","version":"4.10","name":"configuration","url":"/axon-framework-reference/4.10/axon-framework-commands/configuration/","titles":[{"text":"Aggregate configuration","hash":"_aggregate_configuration","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3},{"text":"Registering a command handler","hash":"registering-a-command-handler","id":4},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":5},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":6},{"text":"Command model repositories","hash":"_command_model_repositories","id":7},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":8},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":9},{"text":"Standard repositories","hash":"standard-repositories","id":10},{"text":"Event Sourcing repositories","hash":"event-sourcing-repositories","id":11},{"text":"Aggregate factories","hash":"_aggregate_factories","id":12},{"text":"GenericAggregateFactory","hash":"_genericaggregatefactory","id":13},{"text":"SpringPrototypeAggregateFactory","hash":"_springprototypeaggregatefactory","id":14},{"text":"Implementing your own AggregateFactory","hash":"_implementing_your_own_aggregatefactory","id":15}]},"30":{"id":30,"text":"The first type of \"Messages\" that an Axon application is associated with are *Command Messages (or simply Commands).* This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help facilitate Command Message Development. A summary of the various sub-sections is given below. Sub-Section Purpose Modeling Axon Framework provided components to address Aggregate Modeling concerns Command Dispatchers/ Command Handlers Functional Development concerns for Command Messages using the Axon Framework Infrastructure Non-Functional Development concerns for Command Messages using the Axon Framework Configuration Configuration concerns for Command Messages using the Axon Framework This guide is complemented by a video tutorial which gives a practical demonstration of the concepts explained in this section. The tutorial is available at -> Axon Coding Tutorial - Command Messages","title":"Commands","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/axon-framework-commands/","titles":[]},"31":{"id":31,"text":"Command dispatching, as exemplified in the Dispatching Commands page, has a number of advantages. Firstly, it constructs an object that clearly describes the intent of the client. By logging the command, you store both the intent and the related data for future reference. Command handling also makes it easy to expose your command processing components to remote clients, via web services for example. Testing also becomes a lot easier. You could define test scripts by just defining the starting situation (given), command to execute (when) and expected results (then) by listing a number of events and commands (see Testing for more on this). The last major advantage is that it is really easy to switch between synchronous and asynchronous, as well as local versus distributed command processing. This does not mean command dispatching using explicit command objects is the only way to do it. The goal of Axon is not to prescribe a specific way of working, but to support you doing it your way, while providing best practices as the default behavior. It is still possible to use a service layer that you can invoke to execute commands. The method will just need to start a unit of work (see Unit of Work) and perform a commit or rollback on it when the method is finished. The next sections provide an overview of the tasks related to setting up a command dispatching infrastructure with the Axon Framework. The API-friendlier CommandGateway is mentioned, as well as the CommandBus in both a local and distributed environment. The CommandGateway is a convenient interface towards the command dispatching mechanism. While you are not required to use a gateway to dispatch commands, it is generally the easiest option to do so. There are two ways to use a Command Gateway. The first is to use the CommandGateway interface and the DefaultCommandGateway implementation provided by Axon. The command gateway provides a number of methods that allow you to send a command and wait for a result either synchronously, with a timeout or asynchronously. The other option is perhaps the most flexible of all. You can turn almost any interface into a command gateway using the CommandGatewayFactory. This allows you to define your application’s interface using strong typing and declaring your own (checked) business exceptions. Axon will automatically generate an implementation for that interface at runtime. Both your custom Command Gateway and the one provided by Axon need to at least be configured with a Command Bus. In addition, the Command Gateway can be configured with a RetryScheduler, `CommandDispatchInterceptor`s, and `CommandCallback`s. The RetryScheduler is capable of scheduling retries when command execution has failed. When a command fails due to an exception that is explicitly non-transient, no retries are done at all. Note that the retry scheduler is only invoked when a command fails due to a RuntimeException. Checked exceptions are regarded as a \"business exception\" and will never trigger a retry. Currently, two implementations exist: The IntervalRetryScheduler will retry a given command at set intervals until it succeeds, or a maximum number of retries has taken place. The ExponentialBackOffIntervalRetryScheduler retries failed commands with an exponential back-off interval until it succeeds, or a maximum number of retries has taken place. `CommandDispatchInterceptor`s allow modification of `CommandMessage`s prior to dispatching them to the Command Bus. In contrast to `CommandDispatchInterceptor`s configured on the Command Bus, these interceptors are only invoked when messages are sent through this Gateway. For example, these interceptors could be used to attach metadata to a command or perform validation. A CommandCallback can be provided to the Command Gateway upon a regular send, specifying what to do with the command handling result. It works with the CommandMessage and CommandResultMessage classes, thus allowing for some generic behavior for all Commands sent through this gateway regardless of their type. Axon allows a custom interface to be used as a CommandGateway. The behavior of each method declared in the interface is based on the parameter types, return type and declared exception. Using this gateway is not only convenient, it makes testing a lot easier by allowing you to mock your interface where needed. This is how parameters affect the behavior of the command gateway: The first parameter is expected to be the actual command object to dispatch. Parameters annotated with @MetaDataValue will have their value assigned to the metadata field with the identifier passed as annotation parameter. Parameters of type MetaData will be merged with the MetaData on the CommandMessage. Metadata defined by latter parameters will overwrite the metadata of earlier parameters, if their key is equal. Parameters of type CommandCallback will have their onResult(CommandMessage, CommandResultMessage) invoked after the command has been handled. Although the CommandCallback provides a means to deal with the result of command handling, this is no impact on whether you can define a return type on the custom command gateway. In case both a callback and return type are defined, the invocations of the callback will always match with the return value (or exception). Lastly, know that you may pass in several CommandCallback instances, which all will be invoked in order. The last two parameters indicate a timeout and may be of types long (or int) and TimeUnit. The method will block at most as long as these parameters indicate. How the method reacts to a timeout depends on the exceptions declared on the method (see below). Note that if other properties of the method prevent blocking altogether, a timeout will never occur. The declared return value of a method will also affect its behavior: A void return type will cause the method to return immediately, unless there are other indications on the method that one would want to wait, such as a timeout or declared exceptions. Return types of Future, CompletionStage and CompletableFuture will cause the method to return immediately (granted you have configured a CommandBus using its own threads!). You can access the result of the command handler using the CompletableFuture instance returned from the method. Exceptions and timeouts declared on the method are ignored. Any other return type will cause the method to block until a result is available. The result is cast to the return type (causing a ClassCastException if the types do not match). Exceptions have the following effect: Any declared checked exception will be thrown if the command handler (or an interceptor) threw one of that type. If a checked exception is thrown that has not been declared, it is wrapped in a CommandExecutionException, which is a RuntimeException. When a timeout occurs, the default behavior is to return null from the method. This can be changed by declaring a TimeoutException. If this exception is declared, a TimeoutException is thrown instead. When a thread is interrupted while waiting for a result, the default behavior is to return null. In that case, the interrupted flag is set back on the thread. By declaring an InterruptedException on the method, this behavior is changed to throw that exception instead. The interrupt flag is removed when the exception is thrown, consistent with the java specification. Other runtime exceptions may be declared on the method, but will not have any effect other than clarification to the API user. Finally, there is the possibility to use annotations: As specified in the parameter section, the @MetaDataValue annotation on a parameter will have the value of that parameter added as metadata value. The key of the metadata entry is provided as parameter to the annotation. Methods annotated with @Timeout will block at most the indicated amount of time. This annotation is ignored if the method declares timeout parameters. Classes annotated with @Timeout will cause all methods declared in that class to block at most the indicated amount of time, unless they are annotated with their own @Timeout annotation or specify timeout parameters. public interface MyGateway { // fire and forget void sendCommand(MyPayloadType command); // method that attaches metadata and will wait for a result for 10 seconds @Timeout(value = 10, unit = TimeUnit.SECONDS) ReturnValue sendCommandAndWaitForAResult(MyPayloadType command, @MetaDataValue(\"userId\") String userId); // alternative that throws exceptions on timeout @Timeout(value = 20, unit = TimeUnit.SECONDS) ReturnValue sendCommandAndWaitForAResult(MyPayloadType command) throws TimeoutException, InterruptedException; // this method will also wait, caller decides how long void sendCommandAndWait(MyPayloadType command, long timeout, TimeUnit unit) throws TimeoutException, InterruptedException; } // To configure a gateway: public class AxonConfig { // omitting other configuration methods... public MyGateway customCommandGateway(CommandBus commandBus) { CommandGatewayFactory factory = CommandGatewayFactory.builder() .commandBus(commandBus) .build(); return factory.createGateway(MyGateway.class); } } The local command bus is the mechanism that dispatches commands to their respective command handlers within an Axon application. Suggestions on how to use the CommandBus can be found here. Several flavors of the command bus, with differing characteristics, exist within the framework. The SimpleCommandBus is, as the name suggests, the simplest implementation. It does straightforward processing of commands in the thread that dispatches them. After a command is processed, the modified aggregates are saved and generated events are published in that same thread. In most scenarios, such as web applications, this implementation will suit your needs. Like most CommandBus implementations, the SimpleCommandBus allows interceptors to be configured. `CommandDispatchInterceptor`s are invoked when a command is dispatched on the command bus. The `CommandHandlerInterceptor`s are invoked before the actual command handler method is, allowing you to do modify or block the command. See Command Interceptors for more information. Since all command processing is done in the same thread, this implementation is limited to the JVMs boundaries. The performance of this implementation is good, but not extraordinary. To cross JVM boundaries, or to get the most out of your CPU cycles, check out the other CommandBus implementations. public class AxonConfig { // omitting other configuration methods... public void configureSimpleCommandBus(Configurer configurer) { configurer.configureCommandBus( config -> { CommandBus commandBus = SimpleCommandBus.builder() .transactionManager(config.getComponent(TransactionManager.class)) .spanFactory(config.spanFactory()) .messageMonitor(config.messageMonitor(SimpleCommandBus.class, \"commandBus\")) // ... .build(); commandBus.registerHandlerInterceptor( new CorrelationDataInterceptor<>(config.correlationDataProviders()) ); return commandBus; } ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public CommandBus simpleCommandBus(TransactionManager transactionManager, GlobalMetricRegistry metricRegistry, SpanFactory spanFactory) { return SimpleCommandBus.builder() .transactionManager(transactionManager) .messageMonitor(metricRegistry.registerCommandBus(\"commandBus\")) .spanFactory(spanFactory) // ... .build(); } @Bean public ConfigurerModule commandBusCorrelationConfigurerModule() { return configurer -> configurer.onInitialize( config -> config.commandBus().registerHandlerInterceptor( new CorrelationDataInterceptor<>(config.correlationDataProviders()) ) ); } } As the name suggest, the AsynchronousCommandBus implementation executes commands asynchronously from the thread that dispatches them. It uses an Executor to perform the actual handling logic on a different Thread. By default, the AsynchronousCommandBus uses an unbounded cached thread pool. This means a thread is created when a command is dispatched. Threads that have finished processing a command are reused for new commands. Threads are stopped if they have not processed a command for 60 seconds. Alternatively, an Executor instance may be provided to configure a different threading strategy. Note that the AsynchronousCommandBus should be shut down when stopping the application, to make sure any waiting threads are properly shut down. To shut down, call the shutdown() method. This will also shut down any provided Executor instance, if it implements the ExecutorService interface. public class AxonConfig { // omitting other configuration methods... public void configureAsynchronousCommandBus(Configurer configurer) { configurer.configureCommandBus( config -> { CommandBus commandBus = AsynchronousCommandBus.builder() .transactionManager(config.getComponent(TransactionManager.class)) .spanFactory(config.spanFactory()) .messageMonitor(config.messageMonitor( AsynchronousCommandBus.class, \"commandBus\" )) // ... .build(); commandBus.registerHandlerInterceptor( new CorrelationDataInterceptor<>(config.correlationDataProviders()) ); return commandBus; } ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public CommandBus asynchronousCommandBus(TransactionManager transactionManager, GlobalMetricRegistry metricRegistry, SpanFactory spanFactory) { return AsynchronousCommandBus.builder() .transactionManager(transactionManager) .messageMonitor(metricRegistry.registerCommandBus(\"commandBus\")) .spanFactory(spanFactory) // ... .build(); } @Bean public ConfigurerModule commandBusCorrelationConfigurerModule() { return configurer -> configurer.onInitialize( config -> config.commandBus().registerHandlerInterceptor( new CorrelationDataInterceptor<>(config.correlationDataProviders()) ) ); } } The SimpleCommandBus has reasonable performance characteristics. The fact that the SimpleCommandBus needs locking to prevent multiple threads from concurrently accessing the same aggregate causes processing overhead and lock contention. The DisruptorCommandBus takes a different approach to multi-threaded processing. Instead of having multiple threads each doing the same process, there are multiple threads, each taking care of a piece of the process. The DisruptorCommandBus uses the Disruptor, a small framework for concurrent programming, to achieve much better performance, by just taking a different approach to multi-threading. Instead of doing the processing in the calling thread, the tasks are handed off to two groups of threads, that each take care of a part of the processing. The first group of threads will execute the command handler, changing an aggregate’s state. The second group will store and publish the events to the event store. While the DisruptorCommandBus easily outperforms the SimpleCommandBus by a factor of 4(!), there are a few limitations: The DisruptorCommandBus only supports event sourced aggregates. This Command Bus also acts as a Repository for the aggregates processed by the Disruptor. To get a reference to the Repository, use createRepository(AggregateFactory). A command can only result in a state change in a single aggregate instance. When using a cache, it allows only a single aggregate for a given identifier. This means it is not possible to have two aggregates of different types with the same identifier. Commands should generally not cause a failure that requires a rollback of the unit of work. When a rollback occurs, the DisruptorCommandBus cannot guarantee that commands are processed in the order they were dispatched. Furthermore, it requires a retry of a number of other commands, causing unnecessary computations. When creating a new aggregate instance, commands updating that created instance may not all happen in the exact order as provided. Once the aggregate is created, all commands will be executed exactly in the order they were dispatched. To ensure the order, use a callback on the creating command to wait for the aggregate being created. It shouldn’t take more than a few milliseconds. To construct a DisruptorCommandBus instance, you need an EventStore. This component is explained in the Event Bus and Event Store section. Optionally, you can provide a DisruptorConfiguration instance, which allows you to tweak the configuration to optimize performance for your specific environment: Buffer size - the number of slots on the ring buffer to register incoming commands. Higher values may increase throughput, but also cause higher latency. Must always be a power of 2. Defaults to 4096. ProducerType - indicates whether the entries are produced by a single thread, or multiple. Defaults to multiple. WaitStrategy - the strategy to use when the processor threads (the three threads taking care of the actual processing) need to wait for each other. The best wait strategy depends on the number of cores available in the machine, and the number of other processes running. If low latency is crucial, and the DisruptorCommandBus may claim cores for itself, you can use the BusySpinWaitStrategy. To make the command bus claim less of the CPU and allow other threads to do processing, use the YieldingWaitStrategy. Finally, you can use the SleepingWaitStrategy and BlockingWaitStrategy to allow other processes a fair share of CPU. The latter is suitable if the Command Bus is not expected to be processing full-time. Defaults to the BlockingWaitStrategy. Executor - sets the Executor that provides the Threads for the DisruptorCommandBus. This executor must be able to provide at least four threads. Three of the threads are claimed by the processing components of the DisruptorCommandBus. Extra threads are used to invoke callbacks and to schedule retries in case an Aggregate’s state is detected to be corrupt. Defaults to a CachedThreadPool that provides threads from a thread group called \"DisruptorCommandBus\". TransactionManager - defines the transaction manager that should ensure that the storage and publication of events are executed within a transaction. InvokerInterceptors - defines the `CommandHandlerInterceptor`s that are to be used in the invocation process. This is the process that calls the actual Command Handler method. PublisherInterceptors - defines the `CommandHandlerInterceptor`s that are to be used in the publication process. This is the process that stores and publishes the generated events. RollbackConfiguration - defines on which Exceptions a Unit of Work should be rolled back. Defaults to a configuration that rolls back on unchecked exceptions. RescheduleCommandsOnCorruptState - indicates whether Commands that have been executed against an Aggregate that has been corrupted (for example, because a Unit of Work was rolled back) should be rescheduled. If false the callback’s onFailure() method will be invoked. If true (the default), the command will be rescheduled instead. CoolingDownPeriod - sets the number of seconds to wait to make sure all commands are processed. During the cooling down period, no new commands are accepted, but existing commands are processed, and rescheduled when necessary. The cooling down period ensures that threads are available for rescheduling the commands and calling callbacks. Defaults to 1000 (1 second). Cache - sets the cache that stores aggregate instances that have been reconstructed from the Event Store. The cache is used to store aggregate instances that are not in active use by the disruptor. InvokerThreadCount - the number of threads to assign to the invocation of command handlers. A good starting point is half the number of cores in the machine. PublisherThreadCount - the number of threads to use to publish events. A good starting point is half the number of cores, and could be increased if a lot of time is spent on I/O. SerializerThreadCount - the number of threads to use to pre-serialize events. This defaults to 1, but is ignored if no serializer is configured. Serializer - the serializer to perform pre-serialization with. When a serializer is configured, the DisruptorCommandBus will wrap all generated events in a SerializationAware message. The serialized form of the payload and metadata is attached before they are published to the Event Store. public class AxonConfig { // omitting other configuration methods... public void configureDisruptorCommandBus(Configurer configurer) { configurer.configureCommandBus(config -> { CommandBus commandBus = DisruptorCommandBus.builder() .transactionManager(config.getComponent(TransactionManager.class)) .messageMonitor(config.messageMonitor( DisruptorCommandBus.class, \"commandBus\" )) .bufferSize(4096) // ... .build(); commandBus.registerHandlerInterceptor(new CorrelationDataInterceptor<>(config.correlationDataProviders())); return commandBus; }); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public CommandBus disruptorCommandBus(TransactionManager transactionManager, GlobalMetricRegistry metricRegistry) { return DisruptorCommandBus.builder() .transactionManager(transactionManager) .messageMonitor(metricRegistry.registerCommandBus(\"commandBus\")) .bufferSize(4096) // ... .build(); } @Bean public ConfigurerModule commandBusCorrelationConfigurerModule() { return configurer -> configurer.onInitialize( config -> config.commandBus().registerHandlerInterceptor( new CorrelationDataInterceptor<>(config.correlationDataProviders()) ) ); } } Oftentimes you would want multiple instances of command buses in different JVMs to act as one. Commands dispatched on one JVM’s command bus should be seamlessly transported to a command handler in another JVM while sending back any results. That is where the concept of 'distributing the command bus' comes in. There are a couple of concepts that are configurable, regardless of the type of distributed command bus that is being used: Unlike the local CommandBus implementations, the distributed command buses do not invoke any handlers at all. All they do is form a \"bridge\" between command bus implementations on different JVMs, delegating any received commands to the so-called local segment. By default, this local segment is the SimpleCommandBus. You can configure the local segment to be any of the other local command buses too, like the AsynchronousCommandBus and DisruptorCommandBus. The details of how to configure the local segment are shown in the implementation sections. The load factor defines the amount of load an Axon application would carry compared to other instances. For example, if you have a two machine set up, each with a load factor of 100, they will both carry an equal amount of load. Increasing the load factor to 200 on both would still mean that both machines receive the same amount of load. This points out that the load factor will only change the load amongst systems if the values are not equal. Doing so would make sense in a heterogeneous application landscape, where the faster machines should deal with a bigger portion of command handling than the slower machines. The default load factor set for the distributed CommandBus implementations is 100. The configuration changes slightly per distributed implementation and as such will be covered in those sections. Commands should be routed consistently to the same application, especially those targeted towards a specific Aggregate. This ensures a single instance is in charge of the targeted aggregate, resolving the concurrent access issue and allowing for optimization like caching to work as designed. The component dealing with the consistent routing in an Axon application is the RoutingStrategy. The RoutingStrategy receives a CommandMessage and based on the message returns the routing key to use. Two commands with the same routing key will always be routed to the same segment, as long as there is no topology change in the distributed set-up. At the moment, there are five implementations of the RoutingStrategy. Three of these are intended to be fallback solutions, in case the routing key cannot be resolved: The AnnotationRoutingStrategy - the default routing strategy expects the TargetAggregateIdentifier or RoutingKey annotation to be present on a field inside the command class. The annotated field or getter is searched, and the contents will be returned as the routing key for that command. The MetaDataRoutingStrategy - uses a property defined during creation of this strategy to fetch the routing key from the CommandMessage’s `MetaData. The ERROR UnresolvedRoutingKeyPolicy - the default fallback that will cause an exception to be thrown when the routing key cannot be resolved from the given CommandMessage. The RANDOM_KEY UnresolvedRoutingKeyPolicy - will return a random value when a routing key cannot be resolved from the CommandMessage. This means that those commands will be routed to a random segment of the command bus. The STATIC_KEY UnresolvedRoutingKeyPolicy - will return a static key (named \"unresolved\") for unresolved routing keys. This policy routes all commands to the same segment, as long as the configuration of segments does not change. The AnnotationRoutingStrategy and MetaDataRoutingStrategy are considered the full implementations to configure. The ERROR, RANDOM_KEY and STATIC_KEY are fallback routing strategies that should be configured on the annotation or meta-data implementations. To get a grasp how these are constructed, consider the following sample: // A custom annotation can be used to drive the AnnotationRoutingStrategy @interface CustomRoutingAnnotation { } public class AxonConfig { // omitting other configuration methods... public RoutingStrategy routingStrategy() { return AnnotationRoutingStrategy.builder() .annotationType(CustomRoutingAnnotation.class) .fallbackRoutingStrategy(UnresolvedRoutingKeyPolicy.STATIC_KEY) .build(); } } public class AxonConfig { // omitting other configuration methods... public RoutingStrategy routingStrategy() { return MetaDataRoutingStrategy.builder() .metaDataKey(\"my-routing-key\") .fallbackRoutingStrategy(UnresolvedRoutingKeyPolicy.RANDOM_KEY) .build(); } } Of course, a custom implementation of the RoutingStrategy can also be provided when necessary. When we need to deviate from the default AnnotationRoutingStrategy, we should configure it like so: public class AxonConfig { // omitting other configuration methods... public void configureRoutingStrategy(Configurer configurer, YourRoutingStrategy yourRoutingStrategy) { configurer.registerComponent(RoutingStrategy.class, config -> yourRoutingStrategy); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public RoutingStrategy routingStrategy() { return /* construct your routing strategy */; } } The AxonServerCommandBus is the default distributed CommandBus implementation that is set by the framework. It connects to AxonServer, with which it can send and receive commands. As it is the default, configuring it is relatively straightforward: Declare dependencies: org.axonframework axon-bom ${version.axon} pom import org.axonframework axon-server-connector org.axonframework axon-configuration Configure your application: public class AxonConfig { public void configure() { // The AxonServerCommandBus is configured as Command Bus by default when constructing a DefaultConfigurer. Configurer configurer = DefaultConfigurer.defaultConfiguration(); // ... } } By simply including the axon-spring-boot-starter dependency, Axon will automatically configure the AxonServerCommandBus: org.axonframework axon-spring-boot-starter ${axon.version} Disabling Axon Server There are two options to disable Axon Framework’s default of using the AxonServerCommandBus: By setting axon.server.enabled to false when Spring Boot is used. By excluding the axon-server-connector dependency. When doing any of these, Axon will fall back to the *un*distributed SimpleCommandBus, unless configured otherwise. The load factor for the AxonServerCommandBus is defined through the CommandLoadFactorProvider. This interface allows us to distinguish between commands to, for example, use a different load factor per command message. This might be useful if some commands are routed more often towards one instance in favour of the other. The following should be done to configure a custom local segment and/or load factor: public class AxonConfig { // omitting other configuration methods... public CommandBus axonServerCommandBus(CommandBus localSegment, CommandLoadFactorProvider loadFactorProvider) { return AxonServerCommandBus.builder() .localSegment(localSegment) .targetContextResolver(targetContextResolver) // All required configuration components are specified in the JavaDoc of the Builder .build(); } } @Configuration public class AxonConfig { // The Qualifier annotation specifying \"localSegment\" will make this CommandBus the local segment @Bean @Qualifier(\"localSegment\") public CommandBus localSegment() { return /* construct your local segment */; } @Bean public CommandLoadFactorProvider loadFactorProvider() { return /* construct your load factor provider */; } } The alternative to the AxonServerCommandBus is the DistributedCommandBus. Each instance of the DistributedCommandBus on each JVM is referred to as a \"Segment\". The DistributedCommandBus relies on two components: The CommandBusConnector - implements the communication protocol between the JVM’s to send the command over the wire and to receive the response. The CommandRouter - chooses the destination for each incoming command. It defines which segment of the DistributedCommandBus should be given a command, based on a routing key calculated by the routing strategy. You can choose different flavors of these components that are available as extension modules. Currently, Axon provides two extensions to that end, which are: The SpringCloud extension The JGroups extension Configuring a distributed command bus can (mostly) be done without any modifications in configuration files. The most straightforward approach to this is to include the Spring Boot starter dependency of either the Spring Cloud or JGroups extension. With that in place, a single property needs to be added to the application context, to enable the DistributedCommandBus: axon.distributed.enabled=true It is recommended to visit the respective extension pages on how to configure JGroups or Spring Cloud for the DistributedCommandBus.","title":"Infrastructure","component":"axon-framework-reference","version":"4.10","name":"infrastructure","url":"/axon-framework-reference/4.10/axon-framework-commands/infrastructure/","titles":[{"text":"The CommandGateway","hash":"the-command-gateway","id":1},{"text":"Configuring the CommandGateway","hash":"_configuring_the_commandgateway","id":2},{"text":"RetryScheduler","hash":"_retryscheduler","id":3},{"text":"CommandDispatchInterceptor","hash":"_commanddispatchinterceptor","id":4},{"text":"CommandCallback","hash":"_commandcallback","id":5},{"text":"Creating a custom command gateway - CommandGatewayFactory","hash":"_creating_a_custom_command_gateway_commandgatewayfactory","id":6},{"text":"The command bus - local","hash":"the-command-bus-local","id":7},{"text":"SimpleCommandBus","hash":"SimpleCommandBus","id":8},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":9},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":10},{"text":"AsynchronousCommandBus","hash":"AsynchronousCommandBus","id":11},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":12},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":13},{"text":"DisruptorCommandBus","hash":"DisruptorCommandBus","id":14},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":15},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":16},{"text":"The command bus - distributed","hash":"the-command-bus-distributed","id":17},{"text":"Local segment","hash":"_local_segment","id":18},{"text":"Load factor","hash":"_load_factor","id":19},{"text":"Routing strategy","hash":"routing-strategy","id":20},{"text":"AnnotationRoutingStrategy","hash":"AnnotationRoutingStrategy","id":21},{"text":"MetaDataRoutingStrategy","hash":"MetaDataRoutingStrategy","id":22},{"text":"Axon Configuration API","hash":"_axon_configuration_api_4","id":23},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_4","id":24},{"text":"AxonServerCommandBus","hash":"AxonServerCommandBus","id":25},{"text":"Axon Configuration API","hash":"_axon_configuration_api_5","id":26},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_5","id":27},{"text":"Local segment and load factor configuration","hash":"_local_segment_and_load_factor_configuration","id":28},{"text":"Axon Configuration API","hash":"_axon_configuration_api_6","id":29},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_6","id":30},{"text":"DistributedCommandBus","hash":"DistributedCommandBus","id":31}]},"32":{"id":32,"text":"Deadlines can be scheduled from sagas and aggregates. The DeadlineManager component is responsible for scheduling deadlines and invoking @DeadlineHandler`when the deadline is met. The `DeadlineManager can be injected as a resource. It has four flavors: SimpleDeadlineManager, JobRunrDeadlineManager, QuartzDeadlineManager and DbSchedulerDeadlineManager. A deadline can be scheduled by providing a Duration after which it will be triggered (or an Instant at which it will be triggered) and a deadline name. Scheduled Events or Scheduled Deadlines Unlike Event Scheduling, when a deadline is triggered there will be no storing of the published message. Scheduling/Triggering a deadline does not involve an EventBus (or EventStore), hence the message is not stored. class DeadlineSchedulingComponent { void scheduleMyDeadline() { String deadlineId = deadlineManager.schedule(Duration.ofMillis(500), \"myDeadline\"); // For example store the `deadlineId` } } As a result we receive a deadlineId which can be used to cancel the deadline. In most cases, storing this deadlineId as a field within your Aggregate/Saga is the most convenient. Cancelling a deadline could come in handy when a certain event means that the previously scheduled deadline has become obsolete (for example, there is a deadline for paying the invoice, but the client paid the amount which means that the deadline is obsolete and can be canceled). class DeadlineCancelingComponent { void cancelMyDeadline(String deadlineId) { deadlineManager.cancelSchedule(\"myDeadline\", deadlineId); } } Note that there are more options to cancel a deadline next to the previously mentioned: cancelAll(String deadlineName) - Cancels every scheduled deadline matching the given deadlineName. Note that this thus also cancels deadlines from other aggregate and/or saga instances matching the name. cancelAllWithinScope(String deadlineName) - Cancels a scheduled deadline matching the given deadlineName, within the Scope the method is invoked in. For example, if this operation is performed from within \"aggregate instance X\", the ScopeDescriptor from \"aggregate instance X\" will be used to cancel. cancelAllWithinScope(String deadlineName, ScopeDescriptor scope) - Cancels a scheduled deadline matching the given deadlineName and ScopeDescriptor. This allows canceling a deadline by name from differing scopes then the one it’s executed in. Caveats for the JobRunr implementation. Since the non-Pro version of JobRunr has no way to search for deadlines, besides by id, all of the cancelAll methods are not implemented for the JobRunrDeadlineManager. The JobRunr Pro extension does support those but requires the Pro version of JobRunr. Caveats for the DbScheduler implementation. Db-scheduler has no way to filter out tasks. This means that the cancelAll implementation will need to serialize all the task data, looping over it. If you have many active deadlines, this might take noticeable time and resources. If you need contextual data about the deadline when the deadline is being handled, you can attach a deadline payload when scheduling a deadline: class DeadlineSchedulingWithPayloadComponent { void scheduleMyDeadlineWithPayload() { String deadlineId = deadlineManager.schedule( Duration.ofMillis(500), \"myDeadline\", new MyDeadlinePayload(/* some user specific parameters */) ); // For example store the `deadlineId` } } We have now seen how to schedule a deadline. When the scheduled time is met, the corresponding @DeadlineHandler is invoked. A @DeadlineHandler is a message handler like any other in Axon - it is possible to inject parameters for which `ParameterResolver`s exist. The Scope of a Deadline When scheduling a deadline, the context from where it was scheduled is taken into account. This means a scheduled deadline will only be triggered in its originating context. Thus, any @DeadlineHandler annotated function you wish to be called on a met deadline, must be in the same Aggregate/Saga from which it was scheduled. Axon calls this context a Scope. If necessary, implementing and providing your own Scope will allow you to schedule deadlines in your custom, 'scoped' components. A Saga can end its lifecycle when @EndSaga is added on a deadline handler. A @DeadlineHandler is matched based on the deadline name and the deadline payload. @DeadlineHandler(deadlineName = \"myDeadline\") public void on(MyDeadlinePayload deadlinePayload) { // handle the deadline } If the deadline’s name is not defined in the @DeadlineHandler, matching will proceed based on the deadline payload alone. @DeadlineHandler public void on(MyDeadlinePayload deadlinePayload) { // handle the deadline } If we scheduled a deadline without a specific payload, the @DeadlineHandler does not have to specify the payload. @DeadlineHandler(deadlineName = \"payloadlessDeadline\") public void on() { // handle the deadline } In cases where applications need to access the clock, they can take advantage of the clock used in the EventMessage, by accessing GenericEventMessage.clock. This clock is set to Clock.systemUTC at runtime, and manipulated to simulate time during testing. public void handle(PublishTime cmd) { apply(new TimePublishedEvent(GenericEventMessage.clock.instant())); } Note that the current timestamp is automatically added to the EventMessage. If handlers only need to rely on the timestamp the event was published, they can access that timestamp directly, as described in Handling Events. Spring Boot users will need to define a DeadlineManager bean using one of the available implementations. Spring Boot users who want to use the JobRunr deadline manager can add either jobrunr-spring-boot-2-starter or jobrunr-spring-boot-3-starter as a dependency. Depending on which version of Spring Boot is used. Doing so will make a JobScheduler bean available, which the auto-configuration can use to create a JobRunrDeadlineManager. Alternatively. the bean can be configured like this: @Bean public DeadlineManager deadlineManager( @Qualifier(\"eventSerializer\") final Serializer serializer, final JobScheduler jobScheduler, final ScopeAwareProvider scopeAwareProvider, final TransactionManager transactionManager, final Spanfactory spanfactory ) { return JobRunrDeadlineManager.builder() .jobScheduler(jobScheduler) .scopeAwareProvider(scopeAwareProvider) .serializer(serializer) .transactionManager(transactionManager) .spanFactory(spanfactory) .build(); } Spring Boot users who want to use the db-scheduler deadline manager can add db-scheduler-spring-boot-starter as a dependency. This will make a Scheduler bean available, which the auto-configuration can use to create a DbSchedulerDeadlineManager. Alternatively, the bean can be configured like this: @Bean public DeadlineManager deadlineManager( Scheduler scheduler, Configuration configuration, @Qualifier(\"eventSerializer\") Serializer serializer, TransactionManager transactionManager, SpanFactory spanFactory) { ScopeAwareProvider scopeAwareProvider = new ConfigurationScopeAwareProvider(configuration); return DbSchedulerDeadlineManager.builder() .scheduler(scheduler) .scopeAwareProvider(scopeAwareProvider) .serializer(serializer) .transactionManager(transactionManager) .spanFactory(DefaultDeadlineManagerSpanFactory.builder() .spanFactory(spanFactory) .build()) .startScheduler(false) .build(); }","title":"Deadline Managers","component":"axon-framework-reference","version":"4.10","name":"deadline-managers","url":"/axon-framework-reference/4.10/deadlines/deadline-managers/","titles":[{"text":"Scheduling a deadline","hash":"_scheduling_a_deadline","id":1},{"text":"Handling a deadline","hash":"_handling_a_deadline","id":2},{"text":"Using time in your application","hash":"_using_time_in_your_application","id":3},{"text":"Configuration","hash":"_configuration","id":4}]},"33":{"id":33,"text":"This section will proceed with a suggested course of action when utilizing the EventScheduler for dealing with deadlines. To help understand this better lets take the scenario of a saga: It is easy to make a saga take action when something happens. After all, there is an event to notify the saga. That said, what if you want your saga to do something when nothing happens? That’s what deadlines are used for. For invoices, that is typically several weeks, whereas the confirmation of a credit card payment should occur within a few seconds. In Axon, you can use an EventScheduler to schedule an event for publication. In the example of an invoice, you would expect the invoice to be paid within thirty days. A saga would, after sending the CreateInvoiceCommand, schedule an InvoicePaymentDeadlineExpiredEvent to be published in 30 days. The EventScheduler returns a ScheduleToken after scheduling an event. This token can be used to cancel the schedule, for example when a payment of an Invoice has been received. Axon provides four EventScheduler implementations: Pure Java JobRunr db-scheduler Axon Server Quartz It is important to note that the JubRunrEventScheduler, QuartzEventScheduler, AxonServerEventScheduler and DbSchedulerEventSerializer all should use the event Serializer to serialize and deserialize the scheduled event. If the Serializer used by the scheduler does not align with the Seralizer used by the event store, exceptional scenarios should be expected. The Quartz implementation’s Serializer can be set by defining a different EventJobDataBinder, whereas the JobRunr, Axon Server and db-scheduler implementations allows defining the used Serializer directly through the builder. One or more components will be listening for scheduled Events. These components might rely on a transaction bound to the thread that invokes them. Scheduled events are published by threads managed by the EventScheduler. To manage transactions on these threads, you can configure a TransactionManager or a UnitOfWorkFactory that creates a transaction bound unit of work. The pure-Java implementation of the EventScheduler uses a ScheduledExecutorService to schedule event publication. Although the timing of this scheduler is highly reliable, it is a pure in-memory implementation. Once the JVM is shut down, all schedules are lost. This makes this implementation unsuitable for long-term schedules. The SimpleEventScheduler needs to be configured with an EventBus and a SchedulingExecutorService (see the static methods on the java.util.concurrent.Executors class for helper methods). The JobRunrEventScheduler is a more reliable and enterprise-worthy implementation based on JobRunr. It offers several ways to persist the scheduled jobs, and has good integration with Spring Boot. Using JobRunr as underlying scheduling mechanism, it provides more powerful features, such as clustering, misfire management as well as an optional dashboard. This means event publication is guaranteed. It might be a little late, but it will be published. JobRunr supports both SQL and some NoSQL databases. It needs to be configured with a JobRunr JobScheduler, an EventBus and a Serializer. The DbSchedulerEventScheduler is similar in convenience compared to the JobRunr- and the Axon Server EventScheduler implementations, based on the db-scheduler project. It offers several ways to persist the scheduled jobs, and has good integration with Spring Boot. It’s pretty simple, as it only needs one table. For most sql databases the sql to set the table is available Compared to JobRunr, it lets you set a poll interval for new tasks more freely. Another advantage compared to JobRunr is that adding a task will become part of the current transaction when a TransactionManager is set. The biggest things missing compared to JobRunr are a dashboard, and support for multiple NoSQL databases. The DbSchedulerEventScheduler needs to be configured with a db-scheduler Scheduler, an EventBus, and a Serializer. The data for an event can be serialized in either a binary format or in a human-readable format. Switching between these formats is done via the useBinaryPojo property on the scheduler’s builder. Depending on this property, the correct task should be added in the constructor of the Scheduler. The AxonServerEventScheduler uses Axon Server to schedule events for publication. As such, it is a hard requirement to use Axon Server as your Event Store solution to utilize this event scheduler. Just as the QuartzEventScheduler, the AxonServerEventScheduler is a reliable and enterprise-worthy implementation of the EventScheduler interface. Creating a AxonServerEventScheduler can be done through its builder, whose sole requirement is the AxonServerConnectionManager. The QuartzEventScheduler is an alternative enterprise-worthy implementation based on Quartz, but the project has not seen much recent activity. Using Quartz as underlying scheduling mechanism, it provides features, such as persistence, clustering and misfire management. It needs to be configured with a Quartz Scheduler and an EventBus. Optionally, you may set the name of the group that Quartz jobs are scheduled in, which defaults to \"AxonFramework-Events\". Spring users can use the QuartzEventSchedulerFactoryBean or SimpleEventSchedulerFactoryBean for easier configuration. It allows you to set the PlatformTransactionManager directly. Spring Boot users which rely on Axon Server do not have to define anything. The auto-configuration will automatically create a AxonServerEventScheduler for them. Spring Boot users who want to use the JobRunr event scheduler can add jobrunr-spring-boot-starter as a dependency. In addition, an EventScheduler bean configuration needs to be added. This should look like: @Bean public EventScheduler eventScheduler( @Qualifier(\"eventSerializer\") final Serializer serializer, final JobScheduler jobScheduler, final EventBus eventBus, final TransactionManager transactionManager, final Spanfactory spanfactory ) { return JobRunrEventScheduler.builder() .jobScheduler(jobScheduler) .serializer(serializer) .eventBus(eventBus) .transactionManager(transactionManager) .spanFactory(spanfactory) .build(); } For both JobRunr and db-scheduler, auto-configuration is included via the axon-spring-boot-starter. This means that if you don’t have an EventScheduler configured in the application, but you do have a JobScheduler bean (in the case of JobRunr) or a Scheduler bean (in the case of db-scheduler), an EventScheduler will be auto-configured for you. In these cases, it is recommended to set the axon.axonserver.enabled property to false to prevent the creation of the AxonServerEventScheduler.","title":"Event Schedulers","component":"axon-framework-reference","version":"4.10","name":"event-schedulers","url":"/axon-framework-reference/4.10/deadlines/event-schedulers/","titles":[{"text":"Scheduled events as deadlines","hash":"_scheduled_events_as_deadlines","id":1},{"text":"Simple event scheduler","hash":"_simple_event_scheduler","id":2},{"text":"JobRunr event scheduler","hash":"_jobrunr_event_scheduler","id":3},{"text":"Db-scheduler event scheduler","hash":"_db_scheduler_event_scheduler","id":4},{"text":"Axon Server event scheduler","hash":"_axon_server_event_scheduler","id":5},{"text":"Quartz event scheduler","hash":"_quartz_event_scheduler","id":6},{"text":"Spring configuration","hash":"_spring_configuration","id":7}]},"34":{"id":34,"text":"The 'Deadline' concept in Axon Framework is a mechanism which enables certain actions to be executed after a certain amount of time. The context of this execution is an *aggregate or a saga* in which the deadline was scheduled. If the deadline becomes obsolete there is the possibility to cancel it as well. This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help with scheduling and dealing of deadlines. A summary of the various subsections is given below. Sub-Section Purpose Deadline Managers Deadline Handling using Deadline Managers Event Schedulers Deadline Handling using Event Schedulers","title":"Deadlines","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/deadlines/","titles":[]},"35":{"id":35,"text":"The EventBus is the mechanism that dispatches events to the subscribed event handlers. Axon provides three implementations of the Event Bus: AxonServerEventStore, EmbeddedEventStore and SimpleEventBus. All three implementations support subscribing and tracking processors (see Event Processors). However, the AxonServerEventStore and EmbeddedEventStore persist events (see Event Store), which allows you to replay them at a later stage. The SimpleEventBus has a volatile storage and 'forgets' events as soon as they have been published to subscribed components. An AxonServerEventStore event bus/store is configured by default. Event sourcing repositories need an event store to store and load events from aggregates. An event store offers the functionality of an event bus. Additionally, it persists published events and is able to retrieve previous events based on a given aggregate identifier. Axon provides an event store out of the box, the AxonServerEventStore. It connects to the AxonIQ AxonServer Server to store and retrieve Events. Declare dependencies: org.axonframework axon-server-connector ${axon.version} org.axonframework axon-configuration ${axon.version} Configure your application: // Returns a Configurer instance with default components configured. // `AxonServerEventStore` is configured as Event Store by default. Configurer configurer = DefaultConfigurer.defaultConfiguration(); By simply declaring a dependency on axon-spring-boot-starter, Axon will automatically configure the event bus/event store: org.axonframework axon-spring-boot-starter ${axon.version} Excluding the Axon Server Connector If you exclude the axon-server-connector dependency from axon-spring-boot-starter the EmbeddedEventStore will be auto-configured for you, if a concrete implementation of EventStorageEngine is available. If JPA or JDBC is detected on the classpath, a JpaEventStorageEngine or JdbcEventStorageEngine will respectively be auto-configured as the EventStorageEngine. In absence of either, the auto configuration falls back to the SimpleEventBus. Alternatively, Axon provides a non-axon-server option, the EmbeddedEventStore. It delegates the actual storage and retrieval of events to an EventStorageEngine. There are multiple EventStorageEngine implementations available: The JpaEventStorageEngine stores events in a JPA-compatible data source. The JPA event store stores events in entries. These entries contain the serialized form of an event, as well as some fields where metadata is stored for fast lookup of these entries. To use the JpaEventStorageEngine, you must have the JPA (jakarta.persistence) annotations on your classpath. The old, javax JPA (javax.persistence) annotations are also still supported. This will use an instance of the JpaEventStorageEngine using the legacyjpa namespace. By default, the event store needs you to configure your persistence context (for example, as defined in the META-INF/persistence.xml file) to contain the classes DomainEventEntry and SnapshotEventEntry (both of these classes are located in the org.axonframework.eventsourcing.eventstore.jpa package). Below is an example configuration of a persistence context configuration: (1) org...eventstore.jpa.DomainEventEntry (2) org...eventstore.jpa.SnapshotEventEntry In this example, there is a specific persistence unit for the event store. You may, however, choose to add the third line to any other persistence unit configuration. This line registers the DomainEventEntry (the class used by the JpaEventStorageEngine) with the persistence context. Unique Key Constraint Consideration Axon uses locking to prevent two threads from accessing the same aggregate. However, if you have multiple JVMs using the same database, this won’t help you. In that case, you’d have to rely on the database to detect conflicts. Concurrent access to the event store will result in a Key Constraint Violation, as the table only allows a single event for a given aggregate and sequence number. Therefore, inserting a second event for an existing aggregate with an existing sequence number will result in an error. The JpaEventStorageEngine can detect this error and translate it to a ConcurrencyException. However, each database system reports this violation differently. If you register your DataSource with the JpaEventStorageEngine, it will try to detect the type of database and figure out which error codes represent a Key Constraint Violation. Alternatively, you may provide a PersistenceExceptionResolver instance, which can tell if a given exception represents a key constraint violation. If no DataSource or PersistenceExceptionTranslator is provided, exceptions from the database driver are thrown as-is. By default, the JpaEventStorageEngine requires an EntityManagerProvider implementation that returns the EntityManager instance for the EventStorageEngine to use. This also allows application managed persistence contexts to be used. It is the EntityManagerProvider’s responsibility to provide a correct instance of the `EntityManager. There are a few implementations of the EntityManagerProvider available, each for different needs. The SimpleEntityManagerProvider simply returns the EntityManager instance which is given to it at construction time. This makes the implementation a simple option for container managed contexts. Alternatively, there is the ContainerManagedEntityManagerProvider, which returns the default persistence context, and is used by default by the JPA event store. Move from javax.persistence to jakarta.persistence Since 4.6.0 we moved to using jakarta by default. This means some classes like the JpaTokenStore are duplicated to accommodate for the javax to jakarta namespace change. If you have a persistence unit called \"myPersistenceUnit\" which you wish to use in the JpaEventStorageEngine, the EntityManagerProvider implementation could look like this: public class MyEntityManagerProvider implements EntityManagerProvider { private EntityManager entityManager; @Override public EntityManager getEntityManager() { return entityManager; } @PersistenceContext(unitName = \"myPersistenceUnit\") public void setEntityManager(EntityManager entityManager) { this.entityManager = entityManager; } By default, the JPA event store stores entries in DomainEventEntry and SnapshotEventEntry entities. While this will suffice in many cases, you might encounter a situation where the metadata provided by these entities is not enough. It is also possible that you might want to store events for different aggregate types in different tables. If that is the case, you can extend the JpaEventStorageEngine. It contains a number of protected methods that you can override to tweak its behavior. Note that persistence providers, such as Hibernate, use a first-level cache in their EntityManager implementation. Typically, this means that all entities used or returned in queries are attached to the EntityManager. They are only cleared when the surrounding transaction is committed or an explicit \"clear\" is performed inside the transaction. This is especially the case when the queries are executed in the context of a transaction. To work around this issue, make sure to exclusively query for non-entity objects. You can use JPA’s SELECT new SomeClass(parameters) FROM …​ style queries to work around this issue. Alternatively, call EntityManager.flush() and EntityManager.clear() after fetching a batch of events. Failure to do so might result in `OutOfMemoryException`s when loading large streams of events. public class AxonConfig { // omitting other configuration methods... public Configurer jpaEventStorageConfigurer(EntityManagerProvider entityManagerProvider, TransactionManager transactionManager) { return DefaultConfigurer.jpaConfiguration(entityManagerProvider, transactionManager); } } @Configuration public class AxonConfig { // omitting other configuration methods... // The EmbeddedEventStore delegates actual storage and retrieval of events to an EventStorageEngine. @Bean public EventStore eventStore(EventStorageEngine storageEngine, GlobalMetricRegistry metricRegistry) { return EmbeddedEventStore.builder() .storageEngine(storageEngine) .messageMonitor(metricRegistry.registerEventBus(\"eventStore\")) .spanFactory(spanFactory) // ... .build(); } // The JpaEventStorageEngine stores events in a JPA-compatible data source. @Bean public EventStorageEngine eventStorageEngine(Serializer serializer, PersistenceExceptionResolver persistenceExceptionResolver, @Qualifier(\"eventSerializer\") Serializer eventSerializer, EntityManagerProvider entityManagerProvider, TransactionManager transactionManager) { return JpaEventStorageEngine.builder() .snapshotSerializer(serializer) .persistenceExceptionResolver(persistenceExceptionResolver) .eventSerializer(eventSerializer) .entityManagerProvider(entityManagerProvider) .transactionManager(transactionManager) // ... .build(); } } The JDBC event storage engine uses a JDBC Connection to store events in a JDBC compatible data storage. Typically, these are relational databases. Theoretically, anything that has a JDBC driver could be used to back the JdbcEventStorageEngine. Similar to its JPA counterpart, the JDBCEventStorageEngine stores events in entries. By default, each event is stored in a single entry, which corresponds with a row in a table. The storage engine uses one table for events and another for snapshots. The JdbcEventStorageEngine uses a ConnectionProvider to obtain connections. Typically, the engine can obtain these connections directly from a DataSource. However, Axon will bind these connections to a UnitOfWork to use a single connection within a unit of work. This approach ensures that the framework uses a single transaction to store all events, even when multiple units of work are nested in the same thread. public class AxonConfig { // omitting other configuration methods... public void configureJdbcEventStorage(Configurer configurer, ConnectionProvider connectionProvider, EventTableFactory eventTableFactory) { configurer.configureEmbeddedEventStore( config -> { JdbcEventStorageEngine storageEngine = JdbcEventStorageEngine.builder() .snapshotSerializer(config.serializer()) .connectionProvider(connectionProvider) .transactionManager(config.getComponent(TransactionManager.class)) .eventSerializer(config.eventSerializer()) // ... .build(); // If the schema has not been constructed yet, the createSchema method can be used: storageEngine.createSchema(eventTableFactory); return storageEngine; } ); } } By having JDBC on the classpath, Axon’s JdbcAutoConfiguration will automatically generate the JdbcEventStorageEngine for you. All that might be left is the creation of the schema. Axon can help you here with the createSchema operation: @Configuration public class AxonConfig { // omitting other configuration methods... // The EmbeddedEventStore delegates actual storage and retrieval of events to an EventStorageEngine. @Bean public EventStore eventStore(EventStorageEngine storageEngine, GlobalMetricRegistry metricRegistry) { return EmbeddedEventStore.builder() .storageEngine(storageEngine) .messageMonitor(metricRegistry.registerEventBus(\"eventStore\")) .spanFactory(spanFactory) // ... .build(); } // The JdbcEventStorageEngine stores events in a JDBC-compatible data source. @Bean public EventStorageEngine storageEngine(Serializer serializer, ConnectionProvider connectionProvider, @Qualifier(\"eventSerializer\") Serializer eventSerializer, TransactionManager transactionManager, EventTableFactory tableFactory) { JdbcEventStorageEngine storageEngine = JdbcEventStorageEngine.builder() .snapshotSerializer(serializer) .connectionProvider(connectionProvider) .eventSerializer(eventSerializer) .transactionManager(transactionManager) // ... .build(); // If the schema has not been constructed yet, the createSchema method can be used: storageEngine.createSchema(tableFactory); return storageEngine; } } Data sources providers with Spring We recommend that Spring users use the SpringDataSourceConnectionProvider to attach a connection from a DataSource to an existing transaction. SQL Statement Customizability Databases have slight deviations from what’s the optimal SQL statement to perform in differing scenarios. Since optimizing for all possibilities out there is beyond the framework’s scope, you can adjust the default statements used by the storage engine. Check the JdbcEventStorageEngineStatements utility class for the default statements used by the JdbcEventStorageEngine. Furthermore, the org.axonframework.eventsourcing.eventstore.jdbc.statements package contains the set of adjustable statements. Each of these statement-builders can be customized through the JdbcEventStorageEngine.Builder. MongoDB is a document based NoSQL store. Its scalability characteristics make it suitable for use as an event store. Axon provides the MongoEventStorageEngine, which uses MongoDB as a backing database. It is contained in the Axon Mongo module (Maven artifactId axon-mongo). Events are stored in two separate collections: one for the event streams and one for snapshots. By default, the MongoEventStorageEngine stores each event in a separate document. It is, however, possible to change the StorageStrategy used. The alternative provided by Axon is the DocumentPerCommitStorageStrategy, which creates a single document for all events that have been stored in a single commit (that is, in the same DomainEventStream). The advantage of storing an entire commit in a single document is that commit is stored atomically. Furthermore, it requires only a single roundtrip for any number of events. The disadvantage is that it becomes harder to query events directly in the database. For example, when refactoring the domain model it is harder to \"transfer\" events from one aggregate to another if they are included in a \"commit document\". The MongoEventStorageEngine does not require a lot of configuration. All it needs is a reference to the collections to store the events in, and you’re set to go. For production environments, you may want to double check the indexes on your collections. If you want transactions to be handled correctly, it’s important to set a TransactionManager. Please note that there are several other optional configuration properties, like the serializers and an (optional) upcaster chain. public class AxonConfig { // omitting other configuration methods... public void configureMongoEventStorage(Configurer configurer, MongoTemplate mongoTemplate) { configurer.configureEmbeddedEventStore( config -> MongoEventStorageEngine.builder() .mongoTemplate(mongoTemplate) // ... .build() ); } } @Configuration public class AxonConfig { // omitting other configuration methods... // The EmbeddedEventStore delegates actual storage and retrieval of events to an EventStorageEngine. @Bean public EventStore eventStore(EventStorageEngine storageEngine, GlobalMetricRegistry metricRegistry) { return EmbeddedEventStore.builder() .storageEngine(storageEngine) .messageMonitor(metricRegistry.registerEventBus(\"eventStore\")) .spanFactory(spanFactory) // ... .build(); } // The MongoEventStorageEngine stores each event in a separate MongoDB document. @Bean public EventStorageEngine storageEngine(MongoClient client) { return MongoEventStorageEngine.builder() .mongoTemplate(DefaultMongoTemplate.builder() .mongoDatabase(client) .build()) // ... .build(); } } Axon provides a number of Event Storage Engines that may be useful in certain circumstances. The InMemoryEventStorageEngine keeps stored events in memory. While it probably outperforms any other event store out there, it is not really meant for long-term production use. However, it is useful in short-lived tools or tests that require an event store. public class AxonConfig { // omitting other configuration methods... public void configureInMemoryEventStorage(Configurer configurer) { configurer.configureEmbeddedEventStore(config -> new InMemoryEventStorageEngine()); } } @Configuration public class AxonConfig { // omitting other configuration methods... // The EmbeddedEventStore delegates actual storage and retrieval of events to an EventStorageEngine. @Bean public EventStore eventStore(EventStorageEngine storageEngine, GlobalMetricRegistry metricRegistry) { return EmbeddedEventStore.builder() .storageEngine(storageEngine) .messageMonitor(metricRegistry.registerEventBus(\"eventStore\")) .spanFactory(spanFactory) // ... .build(); } // The InMemoryEventStorageEngine stores each event in memory. @Bean public EventStorageEngine storageEngine() { return new InMemoryEventStorageEngine(); } } The SequenceEventStorageEngine is a wrapper around two other event storage engines. When reading, it returns the events from both event storage engines. Appended events are only appended to the second event storage engine. This is useful in cases where two different implementations of event storage are used for performance reasons, for example. The first would be a larger, but slower event store, while the second is optimized for quick reading and writing. The FilteringEventStorageEngine allows events to be filtered based on a predicate. Only events that match the given predicate will be stored. Note that event processors that use the event store as a source of events may not receive these events because they are not being stored. Event stores need a way to serialize the event to prepare it for storage. By default, Axon uses the XStreamSerializer, which uses XStream to serialize events into XML. XStream is reasonably fast and is more flexible than Java Serialization. Furthermore, the result of XStream serialization is human readable. This makes it quite useful for logging and debugging purposes. The XStreamSerializer can be configured. You can define aliases it should use for certain packages, classes or even fields. Besides being a nice way to shorten potentially long names, aliases can also be used when class definitions of events change. For more information about aliases, visit the XStream website. Alternatively, Axon also provides the JacksonSerializer, which uses Jackson to serialize events into JSON. While it produces a more compact serialized form, it does require that classes stick to the conventions (or configuration) required by Jackson. You may also implement your own serializer, simply by creating a class that implements Serializer, and configuring the event store to use that implementation instead of the default. // Returns a Configurer instance with default components configured. // We explicitly set `JacksonSerializer` as desired event serializer. Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureEventSerializer(c -> JacksonSerializer.builder().build()); You can specify a serializer in your application.properties: # somewhere in your `application.properties` axon.serializer.events=jackson # possible values: java, xstream, jackson Alternatively, you can explicitly define your Serializer in the Spring context: // somewhere in your `@Configuration` class @Qualifier(\"eventSerializer\") @Bean public Serializer eventSerializer() { return JacksonSerializer.builder().build(); } It is possible to use a different serializer for the storage of events, than all other objects that Axon needs to serialize (such as commands, snapshots, sagas, etc). While the XStreamSerializer’s capability to serialize virtually anything makes it a decent default, its output is not always a form that makes it nice to share with other applications. The `JacksonSerializer creates much nicer output, but requires a certain structure in the objects to serialize. This structure is typically present in events, making it a suitable event serializer. If no explicit eventSerializer is configured, events are serialized using the main serializer that has been configured (which defaults to the XStreamSerializer). To distribute events between applications, it is important to know whether the applications belong to the same bounded context. If you don’t recognize this concept, we recommend reading the Bounded Context section first. Applications within the same context \"speak the same language.\" In other words, they communicate using the same set of messages and thus events. As such, we can share the EventStore’s data source between these applications. We may thus achieve distribution by utilizing the source itself. You can use both the EmbeddedEventStore and Axon Server for this. The former would require the applications to point to the same data source, whereas the latter would require the applications to partake in the same context. However, sharing the entire event API is not recommended whenever the applications do not belong to the same context. Instead, we should protect the boundary of the contexts, except for some clearly defined cross-boundary messages. Since accessing the same source isn’t an option, we require a different solution to share events. To distribute events between bounded contexts, you can use Axon Server’s Multi-Context solution, for example. The multi-context support requires application registration to specific contexts. Then, you can open a stream to another context through the AxonServerEventStore#createStreamableMessageSourceForContext(String) operation. With this source in hand, you can configure a Streaming Processor to start reading from it. Alternatively, you can use a message broker to distribute events between contexts. Axon provides a good bunch of these as extension modules, for example Spring AMQP or Kafka. Although this allows further event distribution, we still recommend consciously sharing the correct events. Ideally, we add a form of context mapping, like an anti-corruption layer, between the contexts. In other words, we recommend using a separate component that maps the events from the local context to a shared language right before distribution. For example, this mapper would publish the messages on the AMQP queue or Kafka topic. When it comes to Axon Server, we could, for example, use a distinct shared/global context to contain the shared language.","title":"Event Bus & Event Store","component":"axon-framework-reference","version":"4.10","name":"event-bus-and-event-store","url":"/axon-framework-reference/4.10/events/event-bus-and-event-store/","titles":[{"text":"Event bus","hash":"_event_bus","id":1},{"text":"Event store","hash":"event-store","id":2},{"text":"Axon Server as an event store","hash":"_axon_server_as_an_event_store","id":3},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":4},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":5},{"text":"Embedded event store","hash":"embedded-event-store","id":6},{"text":"JpaEventStorageEngine","hash":"JpaEventStorageEngine","id":7},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":8},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":9},{"text":"JdbcEventStorageEngine","hash":"JdbcEventStorageEngine","id":10},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":11},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":12},{"text":"MongoEventStorageEngine","hash":"MongoEventStorageEngine","id":13},{"text":"Axon Configuration API","hash":"_axon_configuration_api_4","id":14},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_4","id":15},{"text":"Event store utilities","hash":"_event_store_utilities","id":16},{"text":"In-Memory event storage","hash":"_in_memory_event_storage","id":17},{"text":"Axon Configuration API","hash":"_axon_configuration_api_5","id":18},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_5","id":19},{"text":"Combining multiple event stores into one","hash":"_combining_multiple_event_stores_into_one","id":20},{"text":"Filtering stored events","hash":"_filtering_stored_events","id":21},{"text":"Influencing the serialization process","hash":"_influencing_the_serialization_process","id":22},{"text":"Axon Configuration API","hash":"_axon_configuration_api_6","id":23},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_6","id":24},{"text":"Serializing events vs 'the others'","hash":"_serializing_events_vs_the_others","id":25},{"text":"Distributing events","hash":"_distributing_events","id":26}]},"36":{"id":36,"text":"Event publication can originate from a couple of locations within your Axon Framework application. In general, these can be grouped in two major areas: Dispatching events from an Aggregate, and Dispatching events from regular components This page will describe how to get an event message on the event bus from both locations. For more specifics regarding event publication and storage implementations in Axon Framework, read this section. The Aggregate or it’s Entities are typically the starting point of all event messages. The Event Message simply is the notification that a decision has been made; a successful resolution of handling a command message. To publish an event from an Aggregate, it is required to do this from the lifecycle of the Aggregate instance. This is mandatory as we want the Aggregate identifier to be tied to the Event message. It is also of the essence that the events originate in order. This is achieved by adding a sequence number to every event from an Aggregate. The AggregateLifecycle provides a simple means to achieve the above: import static org.axonframework.modelling.command.AggregateLifecycle.apply; public class GiftCard { @CommandHandler public GiftCard(IssueCardCommand cmd) { AggregateLifecycle.apply(new CardIssuedEvent(cmd.getCardId(), cmd.getAmount())); } // omitted state, command and event sourcing handlers } The AggregateLifecycle#apply(Object) will go through a number of steps: The current scope of the Aggregate is retrieved. The last known sequence number of the Aggregate is used to set the sequence number of the event to publish. The provided Event payload, the Object, will be wrapped in an EventMessage. The EventMessage will also receive the sequenceNumber from the previous step, as well as the Aggregate its identifier. The Event Message will be published from here on. The event will first be sent to all the Event Handlers in the Aggregate which are interested. This is necessary for Event Sourcing, to update the Aggregate’s state accordingly. After the Aggregate itself has handled the event, it will be published on the EventBus. MetaData in Aggregate Event Messages The AggregateLifecycle also provides an apply(Object, MetaData) function. This can be used to attach command-handler specific MetaData. The AggregateLifecycle#apply method returns an implementation of the ApplyMore interface. This interface provides the following methods: .andThenApply(Supplier) - Applies a next event resulting from the given Supplier in order. .andThen(Runnable) - To execute some logic after the event has been applied .andThenApplyIf(Supplier, Supplier) - To apply a next event in the correct order, depending on a certain condition .andThenIf(Supplier, Runnable runnable) - To execute some logic after the event has been applied, depending on a certain condition In the vast majority of cases, the Aggregates will publish events by applying them. However, occasionally, it is necessary to publish an event (possibly from within another component), directly to the Event Gateway: private EventGateway eventGateway; public void dispatchEvent() { eventGateway.publish(new CardIssuedEvent(\"cardId\", 100, \"shopId\")); } // omitted class and constructor","title":"Event Dispatchers","component":"axon-framework-reference","version":"4.10","name":"event-dispatchers","url":"/axon-framework-reference/4.10/events/event-dispatchers/","titles":[{"text":"Dispatching events from an Aggregate","hash":"_dispatching_events_from_an_aggregate","id":1},{"text":"Dispatching events from a Non-Aggregate","hash":"_dispatching_events_from_a_non_aggregate","id":2}]},"37":{"id":37,"text":"An Event Handler is a method that is capable of handling an EventMessage. As such, the method will react to the occurrences within an application. In Axon, an object may declare several event handlers by annotating them with @EventHandler. This object is most often referred to as an Event Handling Component, or simply an Event Handler. When drafting an @EventHandler annotated method, the declared parameters of the method define which events it will receive. Arguably the most important parameter of an event handler is the first parameter which refers to the payload of an EventMessage. If the event handler does not need access to the payload of the message, you can specify the expected payload type on the @EventHandler annotation. Do not configure the payload type on the annotation if you want the payload to be passed as a parameter. For a complete list of all parameters, we refer to this section. In all circumstances, at most one event handler method is invoked per listener instance. Axon will search for the most specific method to invoke, using the following rules: On the actual instance level of the class hierarchy (as returned by this.getClass()), all annotated methods are evaluated. If the framework finds one or more methods for which it can resolve all parameters to a value, the method with the most specific type is chosen and invoked. If the framework finds no methods on this level of the class hierarchy, the supertype is evaluated the same way. When it reaches the top level of the hierarchy and no suitable event handler is found, the event is ignored. Consider the following Event Handling Component sample to explain the event handler invocation rules further: // assume EventB extends EventA // and EventC extends EventB // and a single instance of SubListener is registered public class TopListener { @EventHandler public void handle(EventA event) { } @EventHandler public void handle(EventC event) { } } public class SubListener extends TopListener { @EventHandler public void handle(EventB event) { } } In the example above, Axon will invoke the handler methods of SubListener for all instances of EventB and EventC (as it extends EventB). In other words, the handler methods of TopListener will not receive any invocations for EventC at all. Since EventA is not assignable to EventB (it is its superclass), the TopListener's handler method will process them. Event handling Components are defined using an EventProcessingConfigurer, which can be accessed from the global Axon Configurer. EventProcessingConfigurer is used to configure an EventProcessingConfiguration. Typically, an application will have a single EventProcessingConfiguration defined, but larger, more modular applications may define one per module. To register objects with @EventHandler methods, consider the following samples: The Configurer exposes several options towards registering an Event Handling Component: public class AxonConfig { // omitting other configuration methods... public void configureEventHandler(Configurer configurer) { configurer.registerEventHandler(config -> new MyEventHandlingComponent()); // or, when the handling component contains several message handler types: configurer.registerMessageHandler(config -> new MyEventHandlingComponent()); // or, directly on the EventProcessingConfigurer: configurer.eventProcessing() .registerEventHandler(config -> new MyEventHandlingComponent()); } } In a Spring Boot environment, simply adding the Event Handling Components to the Application Context is sufficient: @Component public class MyEventHandlingComponent { @EventHandler public void on(SomeEvent event) { // ... } }","title":"Event Handlers","component":"axon-framework-reference","version":"4.10","name":"event-handlers","url":"/axon-framework-reference/4.10/events/event-handlers/","titles":[{"text":"Registering event handlers","hash":"registering-event-handlers","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3}]},"38":{"id":38,"text":"In the lifecycle of an Axon application events will typically change their format. As events are stored indefinitely the application should be able to cope with several versions of an event. This chapter will discuss what to keep in mind when creating your events, for backwards (and forwards) compatibility. It will also explain the upcasting process. Due to the ever-changing nature of software applications it is likely that event definitions will also change over time. Since the Event Store is considered a read and append-only data source, your application must be able to read all events, regardless of when they were added. This is where upcasting comes in. Originally a concept of object-oriented programming, where \"a subclass gets cast to its superclass automatically when needed\", the concept of upcasting can also be applied to event sourcing. To upcast an event means to transform it from its original structure to its new structure. Unlike OOP upcasting, event upcasting cannot be done in full automation because the structure of the new event is unknown to the old event. Manually written upcasters have to be provided to specify how to upcast the old structure to the new structure. Upcasters are classes that take one input event of revision x and output zero or more new events of revision x + 1. Moreover, upcasters are processed in a chain, meaning that the output of one upcaster is sent to the input of the next. This allows you to update events in an incremental manner, writing an upcaster for each new event revision, making them small, isolated, and easy to understand. Upcasting Benefit Perhaps the greatest benefit of upcasting is that it allows you to do non-destructive refactoring. In other words, the complete event history remains intact. In this section we’ll explain how to write an upcaster, describe the different (abstract) implementations of the Upcaster that come with Axon, and explain how the serialized representations of events affects how upcasters are written. To allow an upcaster to see what version of serialized object they are receiving, the Event Store stores a revision number as well as the fully qualified name of the Event. This revision number is generated by a RevisionResolver, configured in the serializer. Axon provides several implementations of the RevisionResolver: The AnnotationRevisionResolver checks for an @Revision annotation on the Event payload. The SerialVersionUIDRevisionResolver uses the serialVersionUID as defined by Java Serialization API. The FixedValueRevisionResolver always returns a predefined value. This is particularly useful when injecting the current application version. It would allow you to see which version of the application generated a specific event. Maven users can use the MavenArtifactRevisionResolver to automatically use the project version. It is initialized using the groupId and artifactId of the project to obtain the version for. Since this only works in JAR files created by Maven, the version cannot always be resolved by an IDE. If a version cannot be resolved, null is returned. Axon’s upcasters do not work with the EventMessage directly, but with an IntermediateEventRepresentation. The IntermediateEventRepresentation provides functionality to retrieve all necessary fields to construct an EventMessage (and thus a upcasted EventMessage too), together with the actual upcast functions. These upcast functions by default only allow the adjustment of the event’s payload, payload type and additions to the event’s metadata. The actual representation of the events in the upcast function may vary based on the event serializer used or the desired form to work with, so the upcast function of the IntermediateEventRepresentation allows the selection of the expected representation type. The other fields, for example the message/aggregate identifier, aggregate type, timestamp etc. are not adjustable by the IntermediateEventRepresentation. Adjusting those fields is not the intended work for an upcaster. As such, those options are not provided by the provided IntermediateEventRepresentation implementations. The basic Upcaster interface for events in the Axon Framework works on a Stream of IntermediateEventRepresentations and returns a Stream of IntermediateEventRepresentations. The upcasting process thus does not directly return the end result of the introduced upcast functions, but chains every upcasting function from one revision to another together by stacking IntermediateEventRepresentations. Once this process has taken place and the end result is pulled from them, that is when the actual upcasting function is performed on the serialized event. Conversion Notice Sometimes the event store can contain events in different serialized formats, since differing Serializer implementations where used. During upcasting it is important to note what the format is of the IntermediateEventRepresentation, as it influences the upcaster solution provided. To validate if the intermediate representation supports a given type, you can invoke IntermediateEventRepresentation#canConvertDataTo(Class). As described earlier, the Upcaster interface does not upcast a single event; it requires a Stream and returns one. However, an upcaster is usually written to adjust a single event out of this stream. More elaborate upcasting setups are also imaginable. For example from one event to multiple, or an upcaster which pulls state from an earlier event and pushes it in a later one. This section describes the currently provided (abstract) implementations of event upcasters which a user can extend to add their own desired upcast functionality. SingleEventUpcaster - a one-to-one implementation of an event upcaster. Extending from this implementation requires one to implement a canUpcast and doUpcast function, which respectively check whether the event at hand is to be upcasted, and if so how it should be upcasted. This is most likely the implementation to extend from, as most event adjustments are based on self contained data and are one to one. EventMultiUpcaster - a one-to-many implementation of an event upcaster. It is mostly identical to a SingleEventUpcaster, with the exception that the doUpcast function returns a Stream instead of a single IntermediateEventRepresentation. As such, this upcaster allows you to convert a single event to several events. This might be useful if you for example have figured out you want more fine grained events from a fat event. ContextAwareSingleEventUpcaster - a one-to-one implementation of an upcaster, which can store context of events during the process. Next to the canUpcast and doUpcast, the context aware upcaster requires one to implement a buildContext function, which is used to instantiate a context which is carried between events going through the upcaster. The canUpcast and doUpcast functions receive the context as a second parameter, next to the IntermediateEventRepresentation. The context can then be used within the upcasting process to pull fields from earlier events and populate other events. It thus allows you to move a field from one event to a completely different event. ContextAwareEventMultiUpcaster - a one-to-many implementation of an upcaster, which can store context of events during the process. This abstract implementation is a combination of the EventMultiUpcaster and ContextAwareSingleEventUpcaster, and thus services the goal of keeping context of IntermediateEventRepresentations and upcasting one such representation to several. This implementation is useful if you not only want to copy a field from one event to another, but have the requirement to generate several new events in the process. EventTypeUpcaster - a full upcaster implementation dedicated to changing the event type. The EventTypeUpcaster is an implementation of the SingleEventUpcaster with predefined canUpcast and doUpcast functions to be able to change an event from one event type to another. This can be used to for example change the class or package name of an event with ease. To create an EventTypeUpcaster, it is recommended to use the EventTypeUpcaster#from(String expectedPayloadType, expectedRevision) and EventTypeUpcaster.Builder#to(upcastedPayloadType, upcastedRevision) methods. What’s a part of the context in a Context-Aware Upcasters? A context-aware upcaster allows you to collect state from previous events. As upcasters work on a stream of events, all that can ever belong to the context, is the state from that stream. However, this \"stream of events\" is not identical at all times. For example, when an aggregate is event-sourced, the event stream consists of aggregate instance-specific events. Furthermore, the stream of events starts from the tracking token’s position for a Streaming Event Processor. Hence, the context contains different state depending on what’s included in the event stream. The following Java snippets will serve as a basic example of a one-to-one upcaster (the SingleEventUpcaster). Old version of the event: @Revision(\"1.0\") public class ComplaintEvent { private String id; private String companyName; // Constructor, getter, setter... } New version of the event: @Revision(\"2.0\") public class ComplaintEvent { private String id; private String companyName; private String description; // New field // Constructor, getter, setter... } Upcaster from 1.0 revision to 2.0 revision: public class ComplaintEvent1_to_2Upcaster extends SingleEventUpcaster { private static final SimpleSerializedType TARGET_TYPE = new SimpleSerializedType(ComplaintEvent.class.getTypeName(), \"1.0\"); @Override protected boolean canUpcast(IntermediateEventRepresentation intermediateRepresentation) { return intermediateRepresentation.getType().equals(TARGET_TYPE); } @Override protected IntermediateEventRepresentation doUpcast( IntermediateEventRepresentation intermediateRepresentation ) { return intermediateRepresentation.upcastPayload( new SimpleSerializedType(TARGET_TYPE.getName(), \"2.0\"), org.dom4j.Document.class, document -> { document.getRootElement() .addElement(\"description\") .setText(\"no complaint description\"); // Default value return document; } ); } } public class ComplaintEvent1_to_2Upcaster extends SingleEventUpcaster { // upcaster implementation... private static final SimpleSerializedType TARGET_TYPE = new SimpleSerializedType(ComplaintEvent.class.getTypeName(), \"1.0\"); @Override protected boolean canUpcast(IntermediateEventRepresentation intermediateRepresentation) { return intermediateRepresentation.getType().equals(TARGET_TYPE); } @Override protected IntermediateEventRepresentation doUpcast( IntermediateEventRepresentation intermediateRepresentation ) { return intermediateRepresentation.upcastPayload( new SimpleSerializedType(TARGET_TYPE.getName(), \"2.0\"), com.fasterxml.jackson.databind.JsonNode.class, event -> { ((ObjectNode) event).put(\"description\", \"no complaint description\"); return event; } ); } } After choosing an upcaster type and constructing your first instance, it is time to configure it in your application. Important in the configuration is knowing that upcasters need to be invoked in order. Events tend to move through several format iterations, each with its own upcasting requirements. Since an upcaster only adjusts an event from one version to another, it is paramount to maintain the ordering of the upcasters. The component in charge of that ordering is the EventUpcasterChain. The upcaster chain is what the EventStore uses to attach all the upcast functions to the event stream. When configuring your upcasters, most scenarios will not require you to touch the EventUpcasterChain directly. Instead, consider the following snippets when it comes to registering upcasters: @Configuration public class AxonConfig { // omitting other configuration methods... public void configureUpcasters(Configurer configurer) { // The method invocation order imposes the upcaster ordering configurer.registerEventUpcaster(config -> new ComplaintEvent0_to_1Upcaster()) .registerEventUpcaster(config -> new ComplaintEvent1_to_2Upcaster()); } } Axon honors Spring’s Order annotation on upcasters. The numbers used in the annotation will dictate the ordering. The lower the number, the earlier it is registered to the upcaster chain: @Component @Order(0) public class ComplaintEvent0_to_1Upcaster extends SingleEventUpcaster { // upcaster implementation... } @Component @Order(1) public class ComplaintEvent1_to_2Upcaster extends SingleEventUpcaster { // upcaster implementation... } The annotation can be placed both on the class itself, or on bean creation methods: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean @Order(0) public SingleEventUpcaster complaintEventUpcasterOne() { return new ComplaintEvent0_to_1Upcaster(); } @Bean @Order(1) public SingleEventUpcaster complaintEventUpcasterTwo() { return new ComplaintEvent0_to_1Upcaster(); } } Adding an EventUpcasterChain bean to the Application Context will tell Axon to configure it for your event source: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public EventUpcasterChain eventUpcasterChain() { return new EventUpcasterChain( new ComplaintEvent0_to_1Upcaster(), new ComplaintEvent0_to_1Upcaster() ); } }","title":"Event Versioning","component":"axon-framework-reference","version":"4.10","name":"event-versioning","url":"/axon-framework-reference/4.10/events/event-versioning/","titles":[{"text":"Event Upcasting","hash":"event-upcasting","id":1},{"text":"Provided abstract Upcaster implementations","hash":"_provided_abstract_upcaster_implementations","id":2},{"text":"Writing an Upcaster","hash":"_writing_an_upcaster","id":3},{"text":"Event serialized with XStream","hash":"_event_serialized_with_xstream","id":4},{"text":"Event serialized with Jackson","hash":"_event_serialized_with_jackson","id":5},{"text":"Configuring an Upcaster","hash":"_configuring_an_upcaster","id":6},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":7},{"text":"Spring Boot auto configuration - @Order annotation","hash":"_spring_boot_auto_configuration_order_annotation","id":8},{"text":"Spring Boot auto configuration - EventUpcasterChain bean","hash":"_spring_boot_auto_configuration_eventupcasterchain_bean","id":9}]},"39":{"id":39,"text":"The second type of \"Messages\" that an Axon application is associated with are *Event Messages (or simply Events).* This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help facilitate Event Message Development. A summary of the various subsections is given below. Sub-Section Purpose Event Dispatchers / Event Handlers Functional development for Event Messages using the Axon Framework Event Processors / Event Bus & Event Store Non-Functional development for Event Messages using the Axon Framework Event Versioning Details on Event versioning capabilities provided by the Axon Framework","title":"Events","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/events/","titles":[]},"40":{"id":40,"text":"In Axon, all communication between components is done with explicit messages, represented by the Message interface. A Message consists of a Payload, which is an application-specific object that represents the actual functional message, and Meta Data, which is a key-value pair describing the context of the message. Each of Message’s sub-interfaces represent a specific type of message, and defines additional information that describes that Message. Unlike Meta Data, this additional information defines information required for correct processing of that type of message. Messages are immutable. That means that, to add a Meta Data element, you effectively create a new Message instance, with an additional (or other) Meta Data element. To still be able to consider two Java-instances of a message as representing the same conceptual Message, each message has an identifier. Changing the Meta Data of a message will not change this identifier. Meta Data of messages typically describe the context in which a Message was generated. For example, Meta Data might contain information about the message that caused this Message to be generated (for example, Command handlers generate Events based on an incoming Command). In Axon, Meta Data is represented as a Map of String to Object. While you are free to add any type of object as the Meta Data value, we strongly recommend sticking to primitives and Strings (or at most simple objects). Meta Data does not come with the same flexibility as the payload when it comes to structural changes. Unlike a regular Map, MetaData in Axon is immutable. Mutating methods will create and return a new instance, instead of modifying an existing one. MetaData metaData = MetaData.with(\"myKey\", 42) // 1 .and(\"otherKey\", \"some value\"); // 2 Creates a MetaData instance with the indicated key-value pair Add an additional key-value pair, returning a new instance of MetaData. Meta Data in a message works similarly: EventMessage eventMessage = GenericEventMessage.asEventMessage(\"myPayload\") // 1 .withMetaData(singletonMap(\"myKey\", 42)) // 2 .andMetaData(singletonMap(\"otherKey\", \"some value\")); // 2 Create an EventMessage with \"myPayload\" as the payload withMetaData replaces any Meta Data in the message with the given Map. In this case java.util.Collections.singletonMap() is used to define a single entry. andMetaData adds the entries from the given Map to the Message’s metadata. Existing entries with equal keys are overwritten. MetaData Implementation remark About MetaData implementing Map`_ `MetaData also implements Map, meaning that instead of passing a singletonMap (or any other type of Map), you can also use MetaData.with(key, value). As MetaData is immutable, all mutating operations of Map will throw an UnsupportedOperationException. Certain types of messages provide extra information (on top of what the Message provides). For example, an EventMessage (an interface extending Message) also provides a timestamp, representing the time at which the event was generated. The QueryMessage carries, besides Payload and Meta Data, a description of the type of response that the requesting component expects.","title":"Anatomy of a Message","component":"axon-framework-reference","version":"4.10","name":"anatomy-message","url":"/axon-framework-reference/4.10/messaging-concepts/anatomy-message/","titles":[{"text":"Meta data","hash":"meta-data","id":1},{"text":"Message-specific data","hash":"_message_specific_data","id":2}]},"41":{"id":41,"text":"Exception handling is a well-known concept when developing software. Dealing with exceptions in a distributed application landscape is a little more challenging than we are typically used to. Especially when it comes to failures when handling a command or a query, messages that are intended to have a return value, we should be conscious about how we throw exceptions. The HandlerExecutionException marks an exception which originates from a message handling member. Since an Event message is unidirectional, handling an event does not include any return values. As such, the HandlerExecutionException should only be returned as an exceptional result from handling a command. Axon provides a more concrete implementation of this exception for failed command and query handling, respectively the CommandExecutionException and QueryExecutionException. The usefulness of a dedicated handler execution exception becomes clearer in a distributed application environment where, for example, there is a dedicated application for dealing with commands and another application tasked with the query side. Due to the application division, you loose any certainty that both applications can access the same classes, which thus holds for any exception classes. To support and encourage this decoupling, Axon will generify any exception which is a result of Command or Query Handling. To maintain support for conditional logic dependent on the type of exception thrown in a distributed scenario, it is possible to provide details in a HandlerExecutionException. It is thus recommended to throw a CommandExecutionException / `QueryExecutionException`with the required details, when command/query handling fails. This behaviour could be supported generically by implementing interceptors which perform exception wrapping for you. Axon Framework allows the use of methods annotated with @ExceptionHandler to provide more fine-grained control on how to react to exceptions. More specifically, this is a type of message handler interceptor dedicated to reacting to exceptional results. Note that such an @ExceptionHandler will only handle exceptions thrown from message handling functions in the same class. For more specifics on how to use this annotation, check out this section.","title":"Exception Handling","component":"axon-framework-reference","version":"4.10","name":"exception-handling","url":"/axon-framework-reference/4.10/messaging-concepts/exception-handling/","titles":[{"text":"Handler execution exception","hash":"_handler_execution_exception","id":1},{"text":"@ExceptionHandler annotated methods","hash":"_exceptionhandler_annotated_methods","id":2}]},"42":{"id":42,"text":"One of the core concepts in Axon is messaging. All communication between components is done using message objects. This gives these components the location transparency needed to be able to scale and distribute these components when necessary. Although all these messages implement the Message interface, there is a clear distinction between the different types of messages and how they are treated. All messages contain a payload, metadata and unique identifier. The payload of the message is the functional description of what the message means. The combination of the class name of this object and the data it carries, describe the application’s meaning of the message. The metadata allows you to describe the context in which a message is being sent. You can, for example, store tracing information, to allow the origin or cause of messages to be tracked. You can also store information to describe the security context under which a command is being executed. All messages are immutable Note that all messages are immutable. Storing data in a message actually means creating a new message based on the previous one, with extra information added to it. This guarantees that messages are safe to use in a multi-threaded and distributed environment. Commands describe an intent to change the application’s state. They are implemented as (preferably read-only) POJOs that are wrapped using one of the CommandMessage implementations. Commands always have exactly one destination. While the sender does not care which component handles the command or where that component resides, it may be interesting knowing the outcome of it. That is why command messages sent over the command bus allow for a result to be returned. Events are objects that describe something that has occurred in the application. A typical source of events is the aggregate. When something important has occurred within the aggregate, it will raise an event. In Axon Framework, events can be any object. You are highly encouraged to make sure all events are serializable. When Events are dispatched, Axon wraps them in an EventMessage. The actual type of Message used depends on the origin of the event. When an event is raised by an aggregate, it is wrapped in a DomainEventMessage (which extends EventMessage). All other events are wrapped in an EventMessage . Aside from common Message attributes like the unique Identifier an EventMessage also contains a timestamp. The DomainEventMessage additionally contains the type and identifier of the aggregate that raised the event. It also contains the sequence number of the event in the aggregate’s event stream, which allows the order of events to be reproduced. Aggregate Identifiers in Events Even though the DomainEventMessage contains a reference to the Aggregate Identifier, you should always include the identifier in the actual Event itself as well. The identifier in the DomainEventMessage is used by the EventStore to store events and may not always provide a reliable value for other purposes. The original event object is stored as the payload of an EventMessage. Next to the payload, you can store information in the metadata of an event message. The intent of the metadata is to store additional information about an event that is not primarily intended as business information. Auditing information is a typical example. It allows you to see under which circumstances an Event was raised. Such as the user account that triggered the processing, or the name of the machine that processed the event. Message Metadata In general, you should not base business decisions on information in the metadata of event messages. If that is the case, you might have information attached that should really be part of the event itself instead. Metadata is typically used for reporting, auditing and tracing. Although not enforced, it is good practice to make domain events immutable, preferably by making all fields final and by initializing the event within the constructor. Consider using a Builder pattern if event construction is too cumbersome. Event Structure Recommendation Although domain events technically indicate a state change, you should try to capture the intention of the state in the event, too. A good practice is to use an abstract implementation of a domain event to capture the fact that certain state has changed, and use a concrete sub-implementation of that abstract class that indicates the intention of the change. For example, you could have an abstract AddressChangedEvent, and two implementations ContactMovedEvent and AddressCorrectedEvent that capture the intent of the state change. Some listeners don’t care about the intent (for example, database updating event listeners). These will listen to the abstract type. Other listeners do care about the intent and these will listen to the concrete subtypes (for example, to send an address change confirmation email to the customer). When dispatching an Event on the Event Bus, you will need to wrap it in an Event Message. The GenericEventMessage is an implementation that allows you to wrap your Event in a Message. You can use the constructor, or the static asEventMessage() method. The latter checks whether the given parameter doesn’t already implement the Message interface. If so, it is either returned directly (if it implements EventMessage,) or it returns a new GenericEventMessage using the given Message’s payload and Metadata. If an Event is applied (published) by an Aggregate Axon will automatically wrap the Event in a DomainEventMessage containing the Aggregate’s Identifier, Type and Sequence Number. Queries describe a request for information or state. A query can have multiple handlers. When dispatching queries, the client indicates whether he wants a result from one or from all available query handlers.","title":"Messaging Concepts","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/messaging-concepts/","titles":[{"text":"Commands","hash":"_commands","id":1},{"text":"Events","hash":"_events","id":2},{"text":"Queries","hash":"_queries","id":3}]},"43":{"id":43,"text":"In messaging systems it is common to group messages together or correlate them. In Axon Framework a Command message might result in one or several Event messages and a Query message might result in one or several QueryResponse messages. Usually, correlation is implemented using a specific message property, a so-called correlation identifier. Messages in Axon Framework use the MetaData property to transport meta information about the message. The MetaData object is of type Map and is passed around with the message. In order to fill the MetaData of a new message produced within a Unit of Work, a so called CorrelationDataProvider can be used. It is the Unit of Work which is in charge of populating the MetaData of a new message based on this CorrelationDataProvider. Axon Framework currently provides a couple of implementations of this functional interface: By default, the MessageOriginProvider is registered as the correlation data provider to use. It is responsible for two values to be passed around from one Message to another, namely the correlationId and traceId. The correlationId of a message always references the identifier of the message it originates from (that is, the parent message). The traceId on the other hand references to the message identifier which started the chain of messages (that is, the root message). When neither of these fields are present in the parent message when a new message is created, the message identifier will be used for both. To place this in an example, if you would handle a Command message which in turn publishes an Event message, the Event message’s MetaData will be populated based on: The Command message’s identifier for the correlationId. The Command message’s presence of the traceId in the MetaData or otherwise the message’s identifier for the traceId. The SimpleCorrelationDataProvider is configured to unconditionally copy values of specified keys from one message to metadata of the other. To do so, the constructor of the SimpleCorrelationDataProvider must be called with a list of keys which should be copied. Here is an example how to configure it to copy the myId and myId2 values. public class Configuration { public CorrelationDataProvider customCorrelationDataProvider() { return new SimpleCorrelationDataProvider(\"myId\", \"myId2\"); } } A MultiCorrelationDataProvider is capable to combine the effect of multiple correlation data providers. To do so, the constructor of the MultiCorrelationDataProvider must be called with a list of providers, as shown in the following sample: public class Configuration { public CorrelationDataProvider customCorrelationDataProviders() { return new MultiCorrelationDataProvider>( Arrays.asList( new SimpleCorrelationDataProvider(\"someKey\"), new MessageOriginProvider() ) ); } } If the predefined providers don’t fulfill your requirements, you can always implement your own CorrelationDataProvider. The class must implement the CorrelationDataProvider interface, as is depicted in the following example: public class AuthCorrelationDataProvider implements CorrelationDataProvider { private final Function usernameProvider; public AuthCorrelationDataProvider(Function userProvider) { this.usernameProvider = userProvider; } @Override public Map correlationDataFor(Message message) { Map correlationData = new HashMap<>(); if (message instanceof CommandMessage) { if (message.getMetaData().containsKey(\"authorization\")) { String token = (String) message.getMetaData().get(\"authorization\"); correlationData.put(\"username\", usernameProvider.apply(token)); } } return correlationData; } } When the default MessageOriginProvider isn’t sufficient for your use case, the (custom) correlation data providers need to be registered inside you application. If you are using the Axon Configuration API, make sure to call Configuration#configureCorrelationDataProviders method to register the correlated data providers. If you are relying on Spring Boot Autoconfiguration, just provide a factory method exposing the Spring Bean, or multiple if you need more than one provider. The following snippets shows some possible approaches of registration: Axon Configuration API Spring Boot auto configuration public class Configuration { public void configuring() { Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureCorrelationDataProviders(config -> Arrays.asList( new SimpleCorrelationDataProvider(\"someKey\"), new MessageOriginProvider() )); } } @Configuration public class CorrelationDataProviderConfiguration { // Configuring a single CorrelationDataProvider will automatically override the default MessageOriginProvider @Bean public CorrelationDataProvider someKeyCorrelationProvider() { return new SimpleCorrelationDataProvider(\"someKey\"); } @Bean public CorrelationDataProvider messageOriginProvider() { return new MessageOriginProvider(); } }","title":"Message Correlation","component":"axon-framework-reference","version":"4.10","name":"message-correlation","url":"/axon-framework-reference/4.10/messaging-concepts/message-correlation/","titles":[{"text":"Correlation data provider","hash":"_correlation_data_provider","id":1},{"text":"MessageOriginProvider","hash":"MessageOriginProvider","id":2},{"text":"SimpleCorrelationDataProvider","hash":"SimpleCorrelationDataProvider","id":3},{"text":"MultiCorrelationDataProvider","hash":"MultiCorrelationDataProvider","id":4},{"text":"Implementing custom correlation data provider","hash":"_implementing_custom_correlation_data_provider","id":5},{"text":"Configuration","hash":"_configuration","id":6}]},"44":{"id":44,"text":"There are two different types of interceptors: dispatch interceptors and handler interceptors. Dispatch interceptors are invoked before a message is dispatched to a message handler. At that point, it may not even be known that a handler exists for that message. Handler interceptors are invoked just before the message handler is invoked. One of the advantages of using a command bus is the ability to undertake action based on all incoming commands. Examples are logging or authentication, which you might want to do regardless of the type of command. This is done using Interceptors. Message dispatch interceptors are invoked when a command is dispatched on a command bus. They have the ability to alter the command message by adding metadata. They can also block the command by throwing an exception. These interceptors are always invoked on the thread that dispatches the command. Let’s create a MessageDispatchInterceptor which logs each command message being dispatched on a CommandBus. public class MyCommandDispatchInterceptor implements MessageDispatchInterceptor> { private static final Logger LOGGER = LoggerFactory.getLogger(MyCommandDispatchInterceptor.class); @Override public BiFunction, CommandMessage> handle(List> messages) { return (index, command) -> { LOGGER.info(\"Dispatching a command {}.\", command); return command; }; } } We can register this dispatch interceptor with a CommandBus by doing the following: public class CommandBusConfiguration { public CommandBus configureCommandBus() { CommandBus commandBus = SimpleCommandBus.builder().build(); commandBus.registerDispatchInterceptor(new MyCommandDispatchInterceptor()); return commandBus; } } There is no point in processing a command if it does not contain all required information in the correct format. In fact, a command that lacks information should be blocked as early as possible, preferably even before a transaction has been started. Therefore, an interceptor should check all incoming commands for the availability of such information. This is called structural validation. Axon Framework has support for JSR 303 Bean Validation based validation. This allows you to annotate the fields on commands with annotations like @NotEmpty and @Pattern. You need to include a JSR 303 implementation (such as Hibernate-Validator) on your classpath. Then, configure a BeanValidationInterceptor on your command bus, and it will automatically find and configure your validator implementation. While it uses sensible defaults, you can fine-tune it to your specific needs. Interceptor Ordering Tip You want to spend as few resources on an invalid command as possible. Therefore, this interceptor is generally placed at the front of the interceptor chain. In some cases, a LoggingInterceptor or AuditingInterceptor might need to be placed first, with the validating interceptor immediately following it. The BeanValidationInterceptor also implements MessageHandlerInterceptor, allowing you to configure it as a handler interceptor as well. Message handler interceptors can take action both before and after command processing. Interceptors can even block command processing altogether, for example for security reasons. Interceptors must implement the MessageHandlerInterceptor interface. This interface declares one method, handle, that takes two parameters: the current UnitOfWork and an InterceptorChain. The InterceptorChain is used to continue the dispatching process. The UnitOfWork gives you (1) the message being handled and (2) provides the possibility to tie in logic prior, during or after (command) message handling (see Unit Of Work for more information about the phases). Unlike dispatch interceptors, handler interceptors are invoked in the context of the command handler. That means they can attach correlation data based on the message being handled to the unit of work, for example. This correlation data will then be attached to messages being created in the context of that unit of work. Handler interceptors are also typically used to manage transactions around the handling of a command. To do so, register a TransactionManagingInterceptor, which in turn is configured with a TransactionManager to start and commit (or roll back) the actual transaction. Let’s create a Message Handler Interceptor which will only allow the handling of commands that contain axonUser as a value for the userId field in the MetaData. If the userId is not present in the metadata, an exception will be thrown which will prevent the command from being handled. Additionally, if the value of userId does not match axonUser, we will also not proceed up the chain. public class MyCommandHandlerInterceptor implements MessageHandlerInterceptor> { @Override public Object handle(UnitOfWork> unitOfWork, InterceptorChain interceptorChain) throws Exception { CommandMessage command = unitOfWork.getMessage(); String userId = Optional.ofNullable(command.getMetaData().get(\"userId\")) .map(uId -> (String) uId) .orElseThrow(IllegalCommandException::new); if (\"axonUser\".equals(userId)) { return interceptorChain.proceed(); } return null; } } We can register the handler interceptor with a CommandBus like so: public class CommandBusConfiguration { public CommandBus configureCommandBus() { CommandBus commandBus = SimpleCommandBus.builder().build(); commandBus.registerHandlerInterceptor(new MyCommandHandlerInterceptor()); return commandBus; } } The framework has the ability to add a Handler Interceptor as a @CommandHandlerInterceptor annotated method on the Aggregate/Entity. The difference between a method on an Aggregate and a \"regular\" Command Handler Interceptor, is that with the annotation approach you can make decisions based on the current state of the given Aggregate. Some properties of an annotated Command Handler Interceptor are: The annotation can be put on entities within the Aggregate. It is possible to intercept a command on Aggregate Root level, whilst the command handler is in a child entity. Command execution can be prevented by firing an exception from an annotated command handler interceptor. It is possible to define an InterceptorChain as a parameter of the command handler interceptor method and use it to control command execution. By using the commandNamePattern attribute of the @CommandHandlerInterceptor annotation we can intercept all commands matching the provided regular expression. Events can be applied from an annotated command handler interceptor. In the example below we can see a @CommandHandlerInterceptor annotated method which prevents command execution if a command’s state field does not match the Aggregate’s state field: public class GiftCard { //.. private String state; //.. @CommandHandlerInterceptor public void intercept(RedeemCardCommand command, InterceptorChain interceptorChain) { if (this.state.equals(command.getState())) { interceptorChain.proceed(); } } } Note that the @CommandHandlerInterceptor is essentially a more specific implementation of the @MessageHandlerInterceptor described here. Similar to command messages, event messages can also be intercepted prior to publishing and handling to perform additional actions on all events. This is simplfied to the same two types of interceptors for messages: the dispatch interceptor and the handler interceptor. Any message dispatch interceptors registered to an event bus will be invoked when an event is published. They have the ability to alter the event message by adding metadata. They can also provide you with overall logging capabilities for when an event is published. These interceptors are always invoked on the thread that published the event. Let’s create an event message dispatch interceptor which logs each event message being published on an EventBus. public class EventLoggingDispatchInterceptor implements MessageDispatchInterceptor> { private static final Logger logger = LoggerFactory.getLogger(EventLoggingDispatchInterceptor.class); @Override public BiFunction, EventMessage> handle( List> messages) { return (index, event) -> { logger.info(\"Publishing event: [{}].\", event); return event; }; } } We can then register this dispatch interceptor with an EventBus by doing the following: public class EventBusConfiguration { public EventBus configureEventBus(EventStorageEngine eventStorageEngine) { // note that an EventStore is a more specific implementation of an EventBus EventBus eventBus = EmbeddedEventStore.builder() .storageEngine(eventStorageEngine) .build(); eventBus.registerDispatchInterceptor(new EventLoggingDispatchInterceptor()); return eventBus; } } Message handler interceptors can take action both before and after event processing. Interceptors can even block event processing altogether, for example for security reasons. Interceptors must implement the MessageHandlerInterceptor interface. This interface declares one method, handle(), that takes two parameters: the current UnitOfWork and an InterceptorChain. The InterceptorChain is used to continue the dispatching process. The UnitOfWork gives you (1) the message being handled and (2) provides the possibility to tie in logic prior, during or after (event) message handling (see Unit Of Work for more information about the phases). Unlike dispatch interceptors, handler interceptors are invoked in the context of the event handler. That means they can attach correlation data based on the message being handled to the unit of work, for example. This correlation data will then be attached to event messages being created in the context of that unit of work. Let’s create a message handler interceptor which will only allow the handling of events that contain axonUser as the value for the userId field in the MetaData. If the userId is not present in the metadata, an exception will be thrown which will prevent the Event from being handled. And if the value of userId does not match axonUser, we will also not proceed up the chain. Authenticating the event message like shown in this example is a regular use case of the MessageHandlerInterceptor. public class MyEventHandlerInterceptor implements MessageHandlerInterceptor> { @Override public Object handle(UnitOfWork> unitOfWork, InterceptorChain interceptorChain) throws Exception { EventMessage event = unitOfWork.getMessage(); String userId = Optional.ofNullable(event.getMetaData().get(\"userId\")) .map(uId -> (String) uId) .orElseThrow(IllegalEventException::new); if (\"axonUser\".equals(userId)) { return interceptorChain.proceed(); } return null; } } We can register the handler interceptor with an EventProcessor like so: public class EventProcessorConfiguration { public void configureEventProcessing(Configurer configurer) { configurer.eventProcessing() .registerTrackingEventProcessor(\"my-tracking-processor\") .registerHandlerInterceptor(\"my-tracking-processor\", configuration -> new MyEventHandlerInterceptor()); } } Interceptor Registration Different from the CommandBus and QueryBus, which both can have handler interceptors and dispatch interceptors, the EventBus can only register dispatch interceptors. This is because the sole purpose of the EventBus is event publishing/dispatching, thus they are where event dispatch interceptors are registered. `EventProcessor`s are in charge of handling event messages, thus they are where event handler interceptors are registered. One of the advantages of using a query bus is the ability to undertake action based on all incoming queries. Examples are logging or authentication, which you might want to do regardless of the type of query. This is done using interceptors. Message dispatch interceptors are invoked when a query is dispatched on a query bus or when a subscription update to a query message is dispatched on a query update emitter. They have the ability to alter the message by adding metadata. They can also block the handler execution by throwing an exception. These interceptors are always invoked on the thread that dispatches the message. There is no point in processing a query if it does not contain all required information in the correct format. In fact, a query that lacks information should be blocked as early as possible. Therefore, an interceptor should check all incoming queries for the availability of such information. This is called structural validation. Axon Framework has support for JSR 303 Bean Validation based validation. This allows you to annotate the fields on queries with annotations like @NotEmpty and @Pattern. You need to include a JSR 303 implementation (such as Hibernate-Validator) on your classpath. Then, configure a BeanValidationInterceptor on your query bus, and it will automatically find and configure your validator implementation. While it uses sensible defaults, you can fine-tune it to your specific needs. Interceptor Ordering Tip You want to spend as few resources on an invalid queries as possible. Therefore, this interceptor is generally placed at the front of the interceptor chain. In some cases, a logging or auditing interceptor might need to be placed first, with the validating interceptor immediately following it. The BeanValidationInterceptor also implements MessageHandlerInterceptor, allowing you to configure it as a handler interceptor as well. Message handler interceptors can take action both before and after query processing. Interceptors can even block query processing altogether, for example for security reasons. Interceptors must implement the MessageHandlerInterceptor interface. This interface declares one method, handle, that takes two parameters: the current UnitOfWork and an InterceptorChain. The InterceptorChain is used to continue the dispatching process. The UnitOfWork gives you (1) the message being handled and (2) provides the possibility to tie in logic prior, during or after (query) message handling (see Unit Of Work for more information about the phases). Unlike dispatch interceptors, handler interceptors are invoked in the context of the query handler. That means they can attach correlation data based on the message being handled to the unit of work, for example. This correlation data will then be attached to messages being created in the context of that unit of work. Alongside defining overall MessageHandlerInterceptor instances on the component handling a message (for example, a command, query or event), it is also possible to define a handler interceptor for a specific component containing the handlers. This can be achieved by adding a method handling the message, combined with the @MessageHandlerInterceptor annotation. Adding such a method allows you more fine-grained control over which message handling components should react and how these should react. Several handles are given to you when it comes to adding the @MessageHandlerInterceptor, like: MessageHandlerInterceptor instances work with the InterceptorChain to decide when to proceed with other interceptors in the chain. The InterceptorChain is an optional parameter which can be added to the intercepting method to provide you with the same control. In absence of this parameter, the framework will call InterceptorChain#proceed once the method is exited. You can define the type of Message the interceptor should deal with. By default, it reacts to any Message implementation. If an EventMessage specific interceptor is desired, the messageType parameter on the annotation should be set to EventMessage.class. For even more fine-grained control of which messages should react to the interceptor, the payloadType contained in the Message to handle can be specified. The following snippets shows some possible approaches of using the @MessageHandlerInterceptor annotation: public class CardSummaryProjection { /* * Some @EventHandler and @QueryHandler annotated methods */ @MessageHandlerInterceptor public void intercept(Message message) { // Add your intercepting logic here based on the } } public class CardSummaryProjection { /* * Some @EventHandler and @QueryHandler annotated methods */ @MessageHandlerInterceptor(messageType = EventMessage.class) public void intercept(EventMessage eventMessage) { // Add your intercepting logic here based on the } } public class CardSummaryProjection { /* * Some @EventHandler and @QueryHandler annotated methods */ @MessageHandlerInterceptor( messageType = EventMessage.class, payloadType = CardRedeemedEvent.class ) public void intercept(CardRedeemedEvent event) { // Add your intercepting logic here based on the } } public class CardSummaryProjection { /* * Some @EventHandler and @QueryHandler annotated methods */ @MessageHandlerInterceptor(messageType = QueryMessage.class) public void intercept(QueryMessage queryMessage, InterceptorChain interceptorChain) throws Exception { // Add your intercepting logic before interceptorChain.proceed(); // or after the InterceptorChain#proceed invocation } } Next to the message, payload and InterceptorChain, a @MessageHandlerInterceptor annotated method can resolve other parameters as well. Which parameters the framework can resolve on such a function, is based on the type of Message being handled by the interceptor. For more specifics on which parameters are resolvable for the Message being handled, take a look at this page. The @MessageHandlerInterceptor also allows for a more specific version of an intercepting function. Namely, an @ExceptionHandler annotated method. The framework invokes @ExceptionHandler annotated methods only for exceptional results of message handling. Using exception handlers like this, for example, allows you to throw more domain-specific exceptions as a result of a thrown database/service exception. Or, you can catch an aggregate-specific exception and translate it to a generic error code. To Axon, an exception handler is just like any other message handling method. You can thus wire all default parameters to an exception handler, similar to command, event, and query handlers. Hence, you can add the exception, payload, MetaData, and other options to the @ExceptionHandler annotated function. You can introduce @ExceptionHandler annotated methods in any message handling component, including sagas. Furthermore, you can choose to react to all exceptions or define specific exception/message combinations to which the handler should respond. Check the following samples for some snippets on how to use this: class GiftCard { // State, command handlers and event sourcing handlers omitted for brevity @ExceptionHandler public void handleAll(Exception exception) { // Handles all exceptions thrown within this component generically } @ExceptionHandler public void handleIssueCardExceptions(IssueCardCommand command) { // Handles all exceptions thrown from the IssueCardCommand handler within this component } @ExceptionHandler(payloadType = IssueCardCommand.class) public void handleIssueCardExceptions() { // Handles all exceptions thrown from the IssueCardCommand handler within this component } @ExceptionHandler public void handleIllegalStateExceptions(IllegalStateException exception) { // Handles all IllegalStateExceptions thrown within this component } @ExceptionHandler(resultType = IllegalStateException.class) public void handleIllegalStateExceptions(Exception exception) { // Handles all IllegalStateExceptions thrown within this component } @ExceptionHandler public void handleIllegalStateExceptionsFromIssueCard(IssueCardCommand command, IllegalStateException exception) { // Handles all IllegalStateExceptions thrown from the IssueCardCommand handler within this component } @ExceptionHandler(resultType = IllegalStateException.class, payloadType = IssueCardCommand.class) public void handleIllegalStateExceptionsFromIssueCard() { // Handles all IllegalStateExceptions thrown from the IssueCardCommand handler within this component } } class CardSummaryProjection { // Repositories/Services, event handlers and query handlers omitted for brevity @ExceptionHandler public void handleAll(Exception exception) { // Handles all exceptions thrown within this component generically } @ExceptionHandler public void handleFindCardQueryExceptions(FindCardQuery query) { // Handles all exceptions thrown from the FindCardQuery handler within this component } @ExceptionHandler(payloadType = FindCardQuery.class) public void handleFindCardQueryExceptions() { // Handles all exceptions thrown from the FindCardQuery handler within this component } @ExceptionHandler public void handleIllegalArgumentExceptions(IllegalArgumentException exception) { // Handles all IllegalArgumentExceptions thrown within this component } @ExceptionHandler(resultType = IllegalArgumentException.class) public void handleIllegalArgumentExceptions(Exception exception) { // Handles all IllegalArgumentExceptions thrown within this component } @ExceptionHandler public void handleIllegalArgumentExceptionsFromCardIssued(CardIssuedEvent event, IllegalArgumentException exception) { // Handles all IllegalArgumentExceptions thrown from the CardIssuedEvent handler within this component } @ExceptionHandler(resultType = IllegalArgumentException.class, payloadType = CardIssuedEvent.class) public void handleIllegalArgumentExceptionsFromCardIssued() { // Handles all IllegalArgumentExceptions thrown from the CardIssuedEvent handler within this component } } Exception Handling for Aggregate Constructors The @ExceptionHandler annotated methods require an existing component instance to work. Because of this, exception handlers do not work for (command handling) constructors of an aggregate. If you thus expect exceptions on an aggregate’s command handler that you need to handle differently, it is recommended to use Axon’s creation policy.","title":"Message Intercepting","component":"axon-framework-reference","version":"4.10","name":"message-intercepting","url":"/axon-framework-reference/4.10/messaging-concepts/message-intercepting/","titles":[{"text":"Command interceptors","hash":"command-interceptors","id":1},{"text":"Command dispatch interceptors","hash":"_command_dispatch_interceptors","id":2},{"text":"Structural validation","hash":"_structural_validation","id":3},{"text":"Command handler interceptors","hash":"command-handler-interceptors","id":4},{"text":"@CommandHandlerInterceptor annotation","hash":"command-handler-interceptor-annotation","id":5},{"text":"Event interceptors","hash":"_event_interceptors","id":6},{"text":"Event dispatch interceptors","hash":"_event_dispatch_interceptors","id":7},{"text":"Event handler interceptors","hash":"event-handler-interceptors","id":8},{"text":"Query interceptors","hash":"_query_interceptors","id":9},{"text":"Query dispatch interceptors","hash":"_query_dispatch_interceptors","id":10},{"text":"Structural validation","hash":"_structural_validation_2","id":11},{"text":"Query handler interceptors","hash":"_query_handler_interceptors","id":12},{"text":"Annotated MessageHandlerInterceptor","hash":"annotated-MessageHandlerInterceptor","id":13},{"text":"Simple @MessageHandlerInterceptor method","hash":"_simple_messagehandlerinterceptor_method","id":14},{"text":"@MessageHandlerInterceptor method defining the Message type","hash":"_messagehandlerinterceptor_method_defining_the_message_type","id":15},{"text":"@MessageHandlerInterceptor method defining the Message and payload type","hash":"_messagehandlerinterceptor_method_defining_the_message_and_payload_type","id":16},{"text":"@MessageHandlerInterceptor method defining an InterceptorChain parameter","hash":"_messagehandlerinterceptor_method_defining_an_interceptorchain_parameter","id":17},{"text":"@ExceptionHandler","hash":"ExceptionHandler","id":18},{"text":"Aggregate exception handlers","hash":"_aggregate_exception_handlers","id":19},{"text":"Projector exception handlers","hash":"_projector_exception_handlers","id":20}]},"45":{"id":45,"text":"This chapter provides an exhaustive list of all the possible parameters for annotated message handling functions. The framework resolves the parameters for any message handling function through an internal mechanism, called the ParameterResolver. The ParameterResolver, built by a ParameterResolverFactory, is in charge of inserting the parameters for the command, event and query handlers. The set of ParameterResolvers can be extended if custom (or not yet) supported parameters should be injected in to your annotated handlers. You can configure additional ParameterResolvers by implementing the ParameterResolverFactory interface and configuring the new implementation. For more specifics on configuring custom `ParameterResolver`s we suggest reading this section. By default, @CommandHandler annotated methods allow the following parameter types. Parameter designation Purpose The first parameter The first parameter is always the payload of the command message. It may also be of type: Message or CommandMessage, if the @CommandHandler annotation explicitly defined the name of the command the handler can process. By default, a command name is the fully qualified class name of the command its payload. type: MetaData Will contain the entire metadata of a CommandMessage. annotated with @MetaDataValue Will resolve the metadata value with the key as indicated on the annotation. If required is false (default), null is passed when the metadata value is not present. If required is true, the resolver will not match and prevent the method from being invoked when the metadata value is not present. type: Message, or type: CommandMessage Will get the complete message, with both the payload and the metadata. Resolving the entire Message is helpful if a method needs several metadata fields or other properties of the message. type: UnitOfWork Will get the current unit of work injected. The UnitOfWork allows command handlers to register actions to be performed at specific stages of the unit of work or gain access to the resources registered with it. type: String annotated with @MessageIdentifier Will resolve the identifier of the handled CommandMessage. type: ConflictResolver Will resolve the configured ConflictResolver instance. See the Conflict Resolution section for specifics on this topic. type: InterceptorChain Will resolve the chain of MessageHandlerInterceptor`s for a `CommandMessage. You should use this feature in conjunction with a @CommandHandlerInterceptor annotated method. For more specifics on this it is recommended to read this section. subtype of ScopeDescriptor The scope descriptor is helpful when scheduling a deadline through the DeadlineManager. Note that the ScopeDescriptor only makes sense from within the scope of an Aggregate or Saga. Spring Bean If the application runs in a Spring environment, any Spring Bean can be resolved. The parameter can be the annotation with @Qualifier if a specific version of the bean should be wired. By default, @EventHandler annotated methods allow the following parameter types. Parameter designation Purpose The first parameter The first parameter is the payload of the event message. If the event handler does not need access to the payload of the message, you can specify the expected payload type on the @EventHandler annotation. Do not configure the payload type on the annotation if you want the payload passed as a parameter. type: EventMessage Will resolve the EventMessage in its entirety as well. If the first parameter is of type message, it effectively matches an event of any type, even if generic parameters suggest otherwise. Due to type erasure, Axon cannot detect what parameter the implementation expects. It is best to declare a parameter of the payload type as first parameter in such a case, followed by a parameter of type message. type: MetaData Will contain the entire metadata of a EventMessage. annotated with @MetaDataValue Will resolve the metadata value with the key as indicated on the annotation. If required is false (default), null is passed when the metadata value is not present. If required is true, the resolver will not match and prevent the method from being invoked when the metadata value is not present. type: UnitOfWork Will get the current unit of work injected. The UnitOfWork allows event handlers to register actions to be performed at specific stages of the unit of work or gain access to the resources registered with it. type: String annotated with @MessageIdentifier Will resolve the identifier of the handled CommandMessage. type: java.time.Instant annotated with @Timestamp, or type: java.time.temporal.Temporal annotated with @Timestamp Will resolve to the timestamp of the EventMessage. The resolved timestamp is the time at which the event was generated. type: java.lang.Long annotated with @SequenceNumber, or type: long annotated with @SequenceNumber Will resolve to the sequenceNumber of a DomainEventMessage. This parameter provides the order in which the event was generated (within the aggregate scope it originated from). It is important to note that DomainEventMessage can only originate from an Aggregate. Hence, events that have been published directly on the EventBus/EventGateway are not implementations of the DomainEventMessage. As such, they will not resolve a sequence number. type: TrackingToken Will have the current token related to the processed event injected. Note that this will only work for StreamingEventProcessor instances, as otherwise, there is no token attached to the events. type: java.lang.String annotated with @SourceId Will resolve to the aggregateIdentifier of a DomainEventMessage. This parameter provides the identifier of the aggregate from which the event originates. It is important to note that DomainEventMessage can only originate from an Aggregate. Hence, events that have been published directly on the EventBus/EventGateway are not implementations of the DomainEventMessage. As such, they will not resolve a source id. type: DeadLetter> Will have the current dead letter related to the processed event injected. Note that the inserted field is nullable since there is no guarantee the event of the handler is a dead letter, yes or no. type: ReplayStatus Will resolve to the ReplayStatus indicating whether the event is delivered as a 'REGULAR' event or a 'REPLAY' event. Spring Bean If the application runs in a Spring environment, any Spring Bean can be resolved. The parameter can be the annotation with @Qualifier if a specific version of the bean should be wired. By default, @QueryHandler annotated methods allow the following parameter types. Parameter designation Purpose The first parameter The first parameter is always the payload of the query message. It may also be of type: Message or QueryMessage, if the @QueryHandler annotation explicitly defined the name of the query the handler can process. By default, a query name is the fully qualified class name of the query its payload. type: MetaData Will contain the entire metadata of a QueryMessage. annotated with @MetaDataValue Will resolve the metadata value with the key as indicated on the annotation. If required is false (default), null is passed when the metadata value is not present. If required is true, the resolver will not match and prevent the method from being invoked when the metadata value is not present. type: Message, or type: QueryMessage Will get the complete message, with both the payload and the metadata. Resolving the entire Message is helpful if a method needs several metadata fields or other properties of the message. type: UnitOfWork Will get the current unit of work injected. The UnitOfWork allows query handlers to register actions to be performed at specific stages of the unit of work or gain access to the resources registered with it. type: String annotated with @MessageIdentifier Will resolve the identifier of the handled QueryMessage. Spring Bean If the application runs in a Spring environment, any Spring Bean can be resolved. The parameter can be the annotation with @Qualifier if a specific version of the bean should be wired.","title":"Supported Parameters for Annotated Handlers","component":"axon-framework-reference","version":"4.10","name":"supported-parameters-annotated-handlers","url":"/axon-framework-reference/4.10/messaging-concepts/supported-parameters-annotated-handlers/","titles":[{"text":"Supported parameters for command handlers","hash":"supported-parameters-for-command-handlers","id":1},{"text":"Supported parameters for event handlers","hash":"supported-parameters-for-event-handlers","id":2},{"text":"Supported parameters for query handlers","hash":"supported-parameters-for-query-handlers","id":3}]},"46":{"id":46,"text":"The UnitOfWork is an important concept in the Axon Framework. Although, in most cases you are unlikely to interact with it directly. The processing of a message is seen as a single unit. The purpose of the unit of work is to coordinate actions performed during the processing of a message (command, event or query). Components can register actions to be performed during each of the stages of a UnitOfWork, such as onPrepareCommit or onCleanup. You are unlikely to need direct access to the UnitOfWork. It is mainly used by the building blocks that the Axon Framework provides. If you do need access to it, for whatever reason, there are a few ways to obtain it. A handler receives the unit of work through a parameter in the handle method. If you use annotation support, you may add a parameter of type UnitOfWork to your annotated method. In other locations, you can retrieve the unit of work bound to the current thread by calling CurrentUnitOfWork.get(). Note that this method will throw an exception if there is no UnitOfWork bound to the current thread. Use CurrentUnitOfWork.isStarted() to find out if one is available. One reason to require access to the current unit of work is to attach resources that need to be reused several times during the course of message processing, or if created resources need to be cleaned up when the unit of work completes. In such case, the unitOfWork.getOrComputeResource() and the lifecycle callback methods, such as onRollback(), afterCommit() and onCleanup() allow you to register resources and declare actions to be taken during the processing of this unit of work. Using the Unit of Work Note that the Unit of Work is merely a buffer of changes, not a replacement for transactions. Although all staged changes are only committed when the Unit of Work is committed, its commit is not atomic. That means that when a commit fails, some changes might have been persisted, while others have not been. Best practices dictate that a command should never contain more than one action. If you stick to that practice, a unit of work will contain a single action, making it safe to use as-is. If you have more actions in your unit of work, then you could consider attaching a transaction to the unit of work’s commit. Use unitOfWork.onCommit(..) to register actions that need to be taken when the unit of work is being committed. Your handlers may throw an Exception as a result of processing a message. By default, unchecked exceptions will cause the UnitOfWork to roll back all changes. As a result, scheduled side effects are cancelled. Axon Framework provides a few rollback strategies out-of-the-box: RollbackConfigurationType.NEVER - will always commit the UnitOfWork RollbackConfigurationType.ANY_THROWABLE- will always roll back when an exception occurs RollbackConfigurationType.UNCHECKED_EXCEPTIONS- will roll back on errors and runtime exceptions RollbackConfigurationType.RUNTIME_EXCEPTION- will roll back on runtime exceptions (but not on errors) When using framework components to process messages, the lifecycle of the unit of work will be automatically managed for you. If you choose not to use these components, but implement processing yourself, you will need to programmatically start and commit (or roll back) a unit of work instead. In most cases, the DefaultUnitOfWork will provide you with the functionality you need. It expects processing to happen within a single thread. To execute a task in the context of a unit of work, simply call UnitOfWork.execute(Runnable) or UnitOfWork.executeWithResult(Callable) on a new DefaultUnitOfWork. The unit of work will be started and committed when the task completes, or rolled back if the task fails. You can also choose to manually start, commit or rollback the unit of work if you need more control. Typical usage is as follows: UnitOfWork uow = DefaultUnitOfWork.startAndGet(message); // then, either use the autocommit approach: uow.executeWithResult(() -> ... logic here); // or manually commit or rollback: try { // business logic comes here uow.commit(); } catch (Exception e) { uow.rollback(e); // maybe rethrow... } The Unit of Works and its Message The Unit of Work revolves around messages. It is always started with a message to be processed. As a result of a Unit-of-Work’s execution (executeWithResult(…​)) a ResultMessage will be returned and the actual execution result will be the payload of that ResultMessage. If problems arose during message processing, we get an exceptional ResultMessage - isExceptional() will return true and exceptionResult() will get us the actual Throwable indicating what went wrong. A UnitOfWork knows several phases. Each time it progresses to another phase, the listeners are notified. Active phase - this is where the Unit of Work is started. The unit of work is generally registered with the current thread in this phase (through CurrentUnitOfWork.set(UnitOfWork)). Subsequently, the message is typically handled by a message handler in this phase. Commit phase - after processing of the message is done but before the Unit of Work is committed, the onPrepareCommit listeners are invoked. If a Unit of Work is bound to a transaction, the onCommit listeners are invoked to commit any supporting transactions. When the commit succeeds, the afterCommit listeners are invoked. If a commit or any step before fails, the onRollback listeners are invoked. The message handler result is contained in the ExecutionResult of the unit of work, if available. Cleanup phase - the phase where any of the resources held by this unit of work (such as locks) are to be released. If multiple units of work are nested, the cleanup phase is postponed until the outer unit of work is ready to clean up. The message handling process can be considered an atomic procedure; it should either be processed entirely, or not at all. Axon Framework uses the unit of work to track actions performed by message handlers. After the handler has completed, Axon will try to commit the actions registered with the unit of work. It is possible to bind a transaction to a unit of work. Many components, such as the CommandBus and QueryBus implementations and all asynchronously processing EventProcessor s, allow you to configure a TransactionManager. This transaction manager will then be used to create the transactions to bind to the unit of work that is used to manage the process of a message. When application components need resources at different stages of message processing, such as a database connection or an EntityManager, these resources can be attached to the UnitOfWork. The unitOfWork.getResources() method allows you to access the resources attached to the current unit of work. Several helper methods are available on the unit of work directly, to make working with resources easier. When nested units of work need to be able to access a resource, it is recommended to register it on the root unit of work, which can be accessed using unitOfWork.root(). If a unit of work is the root, it will simply return itself.","title":"Unit of Work","component":"axon-framework-reference","version":"4.10","name":"unit-of-work","url":"/axon-framework-reference/4.10/messaging-concepts/unit-of-work/","titles":[]},"47":{"id":47,"text":"Axon Framework provides health indicators for applications running Spring Boot with the actuator module. These can be used to monitor the health of your application. The Spring Boot Actuator Health Indicator shares whether the contexts to which an Axon Framework application is connected with are active. It does so by requesting the available connections from the AxonServerConnectionManager. When all connections are active, the UP status is shared. When all connections are inactive, the DOWN status is projected. When one of the connections is inactive, the custom WARN status is shown. This approach is in line with what Axon Server’s local health indicator shows. Next to the status, details are provided about the separate connection’s activity. These can be found under {context-name}.connection.active.","title":"Health Indicators","component":"axon-framework-reference","version":"4.10","name":"health","url":"/axon-framework-reference/4.10/monitoring/health/","titles":[{"text":"Spring Boot actuator health indicator for Axon Server","hash":"_spring_boot_actuator_health_indicator_for_axon_server","id":1}]},"48":{"id":48,"text":"The ability to monitor and measure what is going on is really important. This section contains all information regarding metrics, tracing and monitoring of your Axon Framework application. A summary of the various subsections is given below. Subsection Purpose Tracing Tracing support for Axon Framework Metrics How to configure and use metrics provided by Axon Framework Health Indicators Spring Boot actuator health indicators provided by Axon Framework Event Tracker Status Tracking the status of your event processors Message Tracking Tracking the origin of messages throughout your application","title":"Monitoring","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/monitoring/","titles":[]},"49":{"id":49,"text":"Tracking messages in your system can be useful to analyze what the cause of a message was. There are several ways to track messages in your system. You can correlate messages to each other with a Correlation Data Provider or log the messages being handled and dispatched. The framework provides the CorrelationDataProvider, as described here. This interface and its implementations provide you the means to populate the meta-data of a message based on the message that is currently being handled. For instance, you could use this to store the command that triggered the event in the metadata of the event itself, allowing you to track the cause of it. Axon Framework provides a MessageOriginProvider provider out of the box, which adds a trace-id and correlation-id to all messages. The trace-id is the same over all messages that are triggered because of the same origin, while correlation-id contains the message identifier of the previous message. We can see the effect of this in the following table. Message identifier Type trace-id correlation-id 1 Command - - 2 Event 8231323 1 3 Command 8231323 2 4 Event 8231323 3 Check out the message correlation page to find out more about the MessageOriginProvider. You can also track the flow of messages through your application using logging. You can leverage Handler- and DispatchInterceptors to achieve this. The LoggingInterceptor is provided out-of-the-box solution to log any type of message to SLF4J, but also provides a simple overridable template to set up your own desired logging format.","title":"Message Tracking","component":"axon-framework-reference","version":"4.10","name":"message-tracking","url":"/axon-framework-reference/4.10/monitoring/message-tracking/","titles":[{"text":"Correlation data","hash":"_correlation_data","id":1},{"text":"Interceptor logging","hash":"_interceptor_logging","id":2}]},"50":{"id":50,"text":"Interesting metrics in a message centric system come in several forms and flavors, like count, capacity and latency for example. Axon Framework allows you to retrieve such measurements through the use of the axon-metrics or axon-micrometer module. With these modules you can register a number of MessageMonitor implementations to your messaging components, like the CommandBus, EventBus, QueryBus and EventProcessors. axon-metrics module uses Dropwizard Metrics for registering the measurements correctly. That means that MessageMonitors are registered against the Dropwizard MetricRegistry. axon-micrometer module uses Micrometer which is a dimensional-first metrics collection facade whose aim is to allow you to time, count, and gauge your code with a vendor neutral API. That means that MessageMonitors are registered against the Micrometer MeterRegistry. The following monitor implementations are currently provided: CapacityMonitor - Measures message capacity by keeping track of the total time spent on message handling compared to total time it is active. This returns a number between 0 and n number of threads. Thus, if there are 4 threads working, the maximum capacity is 4 if every thread is active 100% of the time. EventProcessorLatencyMonitor - Measures the difference between an event’s timestamp and the current time, showing how far behind an event processor is. Note that triggering a reset will impact this metric! MessageCountingMonitor - Counts the number of ingested, successful, failed, ignored and processed messages. MessageTimerMonitor - Keeps a timer for all successful, failed and ignored messages, as well as an overall timer for all three combined. PayloadTypeMessageMonitorWrapper - A special MessageMonitor implementation which allows setting a monitor per message type instead of per message publishing/handling component. You are free to configure any combination of MessageMonitors through constructors on your messaging components, simply by using the Configuration API. The GlobalMetricRegistry contained in the axon-metrics and axon-micrometer modules provides a set of sensible defaults per type of messaging component. The following example shows you how to configure default metrics for your message handling components: public class MetricsConfiguration { public Configurer buildConfigurer() { return DefaultConfigurer.defaultConfiguration(); } // The MetricRegistry is a class from the Dropwizard Metrics framework public void configureDefaultMetrics(Configurer configurer, MetricRegistry metricRegistry) { GlobalMetricRegistry globalMetricRegistry = new GlobalMetricRegistry(metricRegistry); // We register the default monitors to our messaging components by doing the following globalMetricRegistry.registerWithConfigurer(configurer); } } # The default value is `true`. Thus you will have Metrics configured if `axon-metrics` and `io.dropwizard.metrics` are on your classpath. axon.metrics.auto-configuration.enabled=true public class MetricsConfiguration { public Configurer buildConfigurer() { return DefaultConfigurer.defaultConfiguration(); } // The MeterRegistry is a class from the Micrometer library public void configureDefaultMetrics(Configurer configurer, MeterRegistry meterRegistry) { GlobalMetricRegistry globalMetricRegistry = new GlobalMetricRegistry(meterRegistry); globalMetricRegistry.registerWithConfigurer(configurer); } } public class MetricsConfiguration { public Configurer buildConfigurer() { return DefaultConfigurer.defaultConfiguration(); } // The MeterRegistry is a class from the Micrometer library public void configureDefaultMetrics(Configurer configurer, MeterRegistry meterRegistry) { GlobalMetricRegistry globalMetricRegistry = new GlobalMetricRegistry(meterRegistry); globalMetricRegistry.registerWithConfigurerWithDefaultTags(configurer); } } # The default value is `true`. # Thus you will have Metrics configured if `axon-micrometer` and # appropriate metric implementation (for example: `micrometer-registry-prometheus`) are on your classpath. axon.metrics.auto-configuration.enabled=true # Spring Boot metrics enabled management.endpoint.metrics.enabled=true # Spring Boot (Prometheus) endpoint (`/actuator/prometheus`) enabled and exposed management.metrics.export.prometheus.enabled=true management.endpoint.prometheus.enabled=true # The default value is `true`. # Thus you will have Metrics configured if `axon-micrometer` and # appropriate metric implementation (for example: `micrometer-registry-prometheus`) are on your classpath. axon.metrics.auto-configuration.enabled=true # The default value is `false`. # By enabling this property you will have message (event, command, query) # payload type set as a micrometer tag/dimension by default. # Additionally, the processor name will be a tag/dimension instead of it being part of the metric name. axon.metrics.micrometer.dimensional=true # Spring Boot metrics enabled management.endpoint.metrics.enabled=true # Spring Boot (Prometheus) endpoint (`/actuator/prometheus`) enabled and exposed management.metrics.export.prometheus.enabled=true management.endpoint.prometheus.enabled=true The scenario might occur that more fine-grained control over which MessageMonitor instance are defined is necessary. The following snippet provides as sample if you want to have more specific metrics on any of the message handling components: // Java (Spring Boot Configuration) - Micrometer example @Configuration public class MetricsConfig { @Bean public ConfigurerModule metricConfigurer(MeterRegistry meterRegistry) { return configurer -> { instrumentEventStore(meterRegistry, configurer); instrumentEventProcessors(meterRegistry, configurer); instrumentCommandBus(meterRegistry, configurer); instrumentQueryBus(meterRegistry, configurer); }; } private void instrumentEventStore(MeterRegistry meterRegistry, Configurer configurer) { MessageMonitorFactory messageMonitorFactory = (configuration, componentType, componentName) -> { MessageCountingMonitor messageCounter = MessageCountingMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()) .and(message.getMetaData().entrySet().stream() .map(s -> Tag.of(s.getKey(), s.getValue().toString())) .collect(Collectors.toList())) ); // Naming the Timer monitor/meter with the name of the component (eventStore) // Registering the Timer with custom tags: payloadType. MessageTimerMonitor messageTimer = MessageTimerMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()) ); return new MultiMessageMonitor<>(messageCounter, messageTimer); }; configurer.configureMessageMonitor(EventStore.class, messageMonitorFactory); } private void instrumentEventProcessors(MeterRegistry meterRegistry, Configurer configurer) { MessageMonitorFactory messageMonitorFactory = (configuration, componentType, componentName) -> { // Naming the Counter monitor/meter with the fixed name `eventProcessor`. // Registering the Counter with custom tags: payloadType and processorName. MessageCountingMonitor messageCounter = MessageCountingMonitor.buildMonitor( \"eventProcessor\", meterRegistry, message -> Tags.of( TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName(), TagsUtil.PROCESSOR_NAME_TAG, componentName ) ); // Naming the Timer monitor/meter with the fixed name `eventProcessor`. // Registering the Timer with custom tags: payloadType and processorName. MessageTimerMonitor messageTimer = MessageTimerMonitor.buildMonitor( \"eventProcessor\", meterRegistry, message -> Tags.of( TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName(), TagsUtil.PROCESSOR_NAME_TAG, componentName ) ); // Naming the Capacity/Gauge monitor/meter with the fixed name `eventProcessor`. // Registering the Capacity/Gauge with custom tags: payloadType and processorName. CapacityMonitor capacityMonitor1Minute = CapacityMonitor.buildMonitor( \"eventProcessor\", meterRegistry, message -> Tags.of( TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName(), TagsUtil.PROCESSOR_NAME_TAG, componentName ) ); return new MultiMessageMonitor<>(messageCounter, messageTimer, capacityMonitor1Minute); }; configurer.configureMessageMonitor(TrackingEventProcessor.class, messageMonitorFactory); } private void instrumentCommandBus(MeterRegistry meterRegistry, Configurer configurer) { MessageMonitorFactory messageMonitorFactory = (configuration, componentType, componentName) -> { MessageCountingMonitor messageCounter = MessageCountingMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of( TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName(), \"messageId\", message.getIdentifier() ) ); MessageTimerMonitor messageTimer = MessageTimerMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()) ); CapacityMonitor capacityMonitor1Minute = CapacityMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()) ); return new MultiMessageMonitor<>(messageCounter, messageTimer, capacityMonitor1Minute); }; configurer.configureMessageMonitor(CommandBus.class, messageMonitorFactory); } private void instrumentQueryBus(MeterRegistry meterRegistry, Configurer configurer) { MessageMonitorFactory messageMonitorFactory = (configuration, componentType, componentName) -> { MessageCountingMonitor messageCounter = MessageCountingMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of( TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName(), \"messageId\", message.getIdentifier() ) ); MessageTimerMonitor messageTimer = MessageTimerMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()) ); CapacityMonitor capacityMonitor1Minute = CapacityMonitor.buildMonitor( componentName, meterRegistry, message -> Tags.of(TagsUtil.PAYLOAD_TYPE_TAG, message.getPayloadType().getSimpleName()) ); return new MultiMessageMonitor<>(messageCounter, messageTimer, capacityMonitor1Minute); }; configurer.configureMessageMonitor(QueryBus.class, messageMonitorFactory); } }","title":"Metrics","component":"axon-framework-reference","version":"4.10","name":"metrics","url":"/axon-framework-reference/4.10/monitoring/metrics/","titles":[{"text":"Dropwizard","hash":"_dropwizard","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3},{"text":"Micrometer","hash":"_micrometer","id":4},{"text":"Axon Configuration API - without tags","hash":"_axon_configuration_api_without_tags","id":5},{"text":"Axon Configuration API - with tags","hash":"_axon_configuration_api_with_tags","id":6},{"text":"Spring Boot auto configuration - without tags","hash":"_spring_boot_auto_configuration_without_tags","id":7},{"text":"Spring Boot auto configuration - with tags","hash":"_spring_boot_auto_configuration_with_tags","id":8}]},"51":{"id":51,"text":"Event processors should be kept an eye on when determining the health and status of your application. You can achieve this by checking the Event Tracker Status, or monitoring the event processors through metrics. Since Tracking Tokens \"track\" the progress of a given Streaming Event Processor, they provide a sensible monitoring hook in any Axon application. Such a hook proves its usefulness when we want to rebuild our view model and we want to check when the processor has caught up with all the events. To that end the StreamingEventProcessor exposes the processingStatus() method. It returns a map where the key is the segment identifier and the value is an \"Event Tracker Status\". The Event Tracker Status exposes a couple of metrics: The Segment it reflects the status of. A boolean through isCaughtUp() specifying whether it is caught up with the Event Stream. A boolean through isReplaying() specifying whether the given Segment is replaying. A boolean through isMerging() specifying whether the given Segment is merging. The TrackingToken of the given Segment. A boolean through isErrorState() specifying whether the Segment is in an error state. An optional Throwable if the Event Tracker reached an error state. An optional Long through getCurrentPosition defining the current position of the TrackingToken. An optional Long through getResetPosition defining the position at reset of the TrackingToken. This field will be null in case the isReplaying() returns false. It is possible to derive an estimated duration of replaying by comparing the current position with this field. An optional Long through mergeCompletedPosition() defining the position on the TrackingToken when merging will be completed. This field will be null in case the isMerging() returns false. It is possible to derive an estimated duration of merging by comparing the current position with this field. Only segments that are currently being actively processed or reached an error state during previous processing will be contained in the processingStatus(). For a complete overview, you should retrieve the status from each instance of your application. Besides querying the event processors for their status directly, the metric modules provides a way to monitor event processors as well. The modules contain a MessageMonitor that exposes metrics about the processed messages of each processor, including capacity, latency, processing time and counters. The exposed metrics can be scraped by the tool of your choice (for example, Prometheus) and alerting can be put in place for several useful metrics. Examples of useful monitoring: The latency becomes too high, indicating a long time between the moment an event was published and handled by the processor. The capacity reaches high value (for example, 0.8 when using 1 thread, indicating it is busy 80% of the time). This indicates a performance problem, or that the segment should be split to parallelize processing. The counter metrics can be used to calculate an average number of events processed per minute. If this drops or increases outside the normal operating parameters of your application, this warrants investigation.","title":"Event Processor Monitoring","component":"axon-framework-reference","version":"4.10","name":"processors","url":"/axon-framework-reference/4.10/monitoring/processors/","titles":[{"text":"Event tracker status","hash":"event-tracker-status","id":1},{"text":"Metrics","hash":"_metrics","id":2}]},"52":{"id":52,"text":"Distributed Tracing enables you to track the path of a message through your system to see how the system behaves and performs. Axon Framework provides additional tracing functionality to track what takes time in your microservice, such as how long it took to load the aggregate, how long the actual command invocation took, or how long it took to publish events. OpenTracing deprecation warning The OpenTracing extension works in a different way than described on this page. Its functionality is limited and will not be updated to include the additional functionality described on this page. The OpenTracing standard itself is deprecated, please consider moving to OpenTelemetry instead. To provide additional insights in traces, many Axon Framework components use a SpanFactory. This factory is responsible for the creation of multiple instances of a Span with a specific purpose. You can use a SpanFactory provided the framework that matches your tracing standard. Or, if your tracing standard of choice is not supported, you can create one yourself by implementing the SpanFactory and Span interfaces. The following standards are currently supported: Tracing standard Supported Description OpenTelemetry Yes OpenTelemetry is the successor of OpenTracing, with auto-instrumentation being its most prominent feature. OpenTracing Limited OpenTracing is supported by an extension with limited functionality. Usage of OpenTelemetry is recommended instead. SLF4j Yes If you have no monitoring system in place but want to trace through logging, the framework provides a LoggingSpanFactory. You configure a SpanFactory in the following ways: public class AxonConfig { // omitting other configuration methods... public void configure(Configurer configurer) { configurer.configureSpanFactory(configuration -> new MyCustomSpanFactory()); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public SpanFactory spanFactory() { // Any bean implementing the SpanFactory will be picked up automatically and override the defaults return new MyCustomSpanFactory(); } } Note that this is not necessary for all providers, since some may provide Spring Boot auto-configuration out of the box. To configure the provider of your choice, please refer to the specific subsection on this page. A trace is a collection of one or more spans that together form a complete journey through your software. Creating a span that is not part of a trace will automatically create one with that span being the root span of the trace. Tools such as ElasticSearch APM can render tracing information, as visible in the following image: What we observe here is that a command is dispatched, distributed by Axon Server and handled. As a result of the command an AccountRegisteredEvent is published and a deadline is scheduled as well. In this image, the AutomaticAccountCommandDispatcher.dispatch span is the root trace, with each span being part of a call hierarchy within that trace. Sometimes you want the functionality of multiple SpanFactory implementations, while Axon’s configuration only allows one. For this purpose, the framework contains the MultiSpanFactory that you can configure with multiple factories to which it delegates its calls. For example, you can configure both the LoggingSpanFactory and the OpenTelemetrySpanFactory in the following fashion: public class AxonConfig { // omitting other configuration methods... public void configure(Configurer configurer) { configurer.configureSpanFactory(configuration -> new MultiSpanFactory( Arrays.asList( LoggingSpanFactory.INSTANCE, OpenTelemetrySpanFactory.builder().build() ) )); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public SpanFactory spanFactory() { return new MultiSpanFactory( Arrays.asList( LoggingSpanFactory.INSTANCE, OpenTelemetrySpanFactory .builder() .build() ) ); } } By configuring the MultiSpanFactory a single, delegating span is created whenever the framework requests it. This span contains the multiple span, one of each configured factory. The deleting span makes sure all spans are called, acting as a single one. The following functionality in Axon Framework is traced in addition to the tracing capabilities already provided by the standard of your choice: Dispatching and handling of commands Publishing of events Handling of events by event processors Dispatching and handling of queries Creation and handling of Sagas Scheduling and invocation of deadlines Creation of snapshots Tracing of each message handler invocation (Spring Boot only) Tracing all of this functionality provides you with the best possible insight into the performance of your application. The configured SpanFactory is responsible for creating spans when the framework requests it. The framework specifies the type of span, the name, and a message that triggered the span (if any, it’s not required). The framework can request the span types defined in the following table: Span Type Description Root trace Create a new trace entirely, having no parent. Dispatch span A span which is dispatching a message. Handler span A span which is handling a message. Will set the span that dispatched the message as the parent. Internal span A span which specified something internal. It’s not an entry or exit point. A trace generally consists of multiple spans with different types, depending on the functionality. Starting a span will make it a child span of the currently active one. If there’s currently no span active, the new span will become the root span of a new trace. During invocations which are normally synchronous, Axon Framework will create normal spans which become a child of the currently active one. For example, publishing an event from a command is synchronous, and therefore the publishing span becomes a child of the command handling span. When it comes to asynchronous invocations, the framework forces a new root trace to be created. For example, a streaming event processor that processes an event will not be a child of the command handling span. Instead, it will become its own root trace. This is a measure to prevent traces from becoming too time-spread, making them unreadable. Some standards, like OpenTelemetry, support linking. By linking one span to another, they become correlated despite being part of a different trace. Tooling that supports this creates links for the user to click, allowing for easy navigation between related traces. This is incredibly useful to see causation within your system. Most tracing implementations can add additional attributes to spans. This is useful when debugging your application or finding a specific span you are looking for. The framework provides the SpanAttributesProvider, which can be registered to the SpanFactory either via its builder (if supported) or by calling the SpanFactory.registerSpanAttributeProvider(provider) method. The following SpanAttributesProvider implementations are included in Axon Framework: Class label description AggregateIdentifierSpanAttributesProvider axon_aggregate_identifier The aggregate identifier of the message, only present in case of a DomainEventMessage MessageIdSpanAttributesProvider axon_message_id The identifier of the message MessageNameSpanAttributesProvider axon_message_name The name of the message for Commands and Queries MessageTypeSpanAttributesProvider axon_message_type The class of the message, such as DomainEventMessage or GenericQueryMessage PayloadTypeSpanAttributesProvider axon_payload_type The class of the payload in the message MetadataSpanAttributesProvider axon_metadata_{key} All metadata of the message is also added to the span with its corresponding key In addition to the ones provided by the framework, you can also create a custom SpanAttributesProvider. and add it to the SpanFactory. Use this if you want to add custom information on spans as a label. public class CustomSpanAttributesProvider implements SpanAttributesProvider { @Nonnull @Override public Map provideForMessage(@Nonnull Message message) { // Provide your labels based on the message here return Collections.emptyMap(); } } You can register this custom SpanAttributesProvider in one of the following ways. public class AxonConfig { // omitting other configuration methods... public void configure(Configuration configuration) { configuration.spanFactory().registerSpanAttributeProvider(new CustomSpanAttributesProvider()); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public SpanAttributesProvider customSpanAttributesProvider() { // Auto-configuration picks beans of type SpanAttributesProvider up automatically. return new CustomSpanAttributesProvider(); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Autowired public void configureSpanFactory(SpanFactory spanFactory) { spanFactory.registerSpanAttributeProvider(new CustomSpanAttributesProvider()); } } Axon Framework provides OpenTelemetry support out of the box. The OpenTelemetry standard improves upon the OpenTracing and OpenCensus standards by providing more auto-instrumentation without the need for the user to configure many things. OpenTelemetry works by adding a Java agent to the execution of the application. Based on the configuration, the agent will collect logs, metrics and tracing automatically before sending it to a collector that can provide insights. ElasticSearch APM, Jaeger and many other tools are available for collecting and visualting the information. The configuration of these tools is beyond the scope of this guide. You can find more information in the \"Getting Started\" section of the OpenTelemetry documentation. OpenTelemetry \"supports a lot of libraries, frameworks and application servers out of the box.\" For example, when a Spring REST endpoint is called it will automatically start a trace. With the axon-tracing-opentelemetry module, this trace will be propagated to all subsequent Axon Framework messages. For example, if the REST call produces a command which is sent over Axon Server, handling the command will be included in the same trace as the original REST call. To get OpenTelemetry support enabled you will need to add the following dependency to your application’s dependencies: org.axonframework axon-tracing-opentelemetry ${axon-framework.version} implementation group: 'org.axonframework', name: 'axon-tracing-opentelemetry', version: axonFrameworkVersion Depending on your application, more configuration might be needed. When using the Spring Boot auto-configuration of Axon Framework, most things will be autoconfigured regardless of the implementation. You might want to configure certain settings that are available. The following table contains all configurable settings, their defaults, and what they change: setting Default Description axon.tracing.showEventSourcingHandlers false Whether to show event sourcing handlers as a trace. This can be noisy and is disabled by default. axon.tracing.attributeProviders.aggregateIdentifier true Whether to add the aggregate identifier as a label when handling a message axon.tracing.attributeProviders.messageId true Whether to add the message identifier as a label when handling a message axon.tracing.attributeProviders.messageName true Whether to add the message name as a label when handling a message axon.tracing.attributeProviders.messageType true Whether to add the message type as a label when handling a message axon.tracing.attributeProviders.payloadType true Whether to add the payload type as a label when handling a message axon.tracing.attributeProviders.metadata true Whether to add the metadata properties as labels when handling a message The OpenTelemetry support can also be configured using the Configurer of Axon Framework to configure the OpenTelemetrySpanFactory. public class AxonConfig { // omitting other configuration methods... public void configure(Configurer configurer) { configurer.defaultConfiguration() .configureSpanFactory(c -> OpenTelemetrySpanFactory.builder().build()); } } Note that when not using Spring boot, tracing each message handler invocation is not supported due to a limitation. The OpenTracing standard is deprecated. If necessary, you can still use the OpenTracing extension of Axon Framework. Note that the functionality of this extension is rather limited compared to the OpenTelemetry integration. Because of this, it’s recommended to switch to OpenTelemetry if possible. Sometimes you don’t have an APM system available, for instance, during local development. It might still be useful to see the traces that would be started and finished to obtain insights. For this purpose, the framework provides a LoggingSpanFactory. You can configure the LoggingSpanFactory in the following ways: public class AxonConfig { // omitting other configuration methods... public void configure(Configurer configurer) { configurer.configureSpanFactory(c -> LoggingSpanFactory.INSTANCE); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public SpanFactory spanFactory() { return LoggingSpanFactory.INSTANCE; } } Axon Framework provides a large range of components that are traced by the configured SpanFactory. The spans created by each component are available for reference in this section, with additional information about how they should be interpreted. It’s important to note that the availability of these spans is highly dependent on the application configuration. For instance, some components are only used when using Axon Server, or you might have created your own CommandBus implementation which does not call the SpanFactory API. The CommandBus is instrumented to create spans for both dispatching and handling commands. The tracing differs based on whether you are using Axon Server. The following tabs show the possible traces. When using the AxonServerCommandBus, there will be two handling and dispatch traces since it uses a second CommandBus to invoke the command locally after receiving it from Axon Server. In addition, you can see the gRPC-call to Axon Server and the time it took to handle the call. Trace name Description AxonServerCommandBus.dispatch(${commandName}) The bus is dispatching the command to Axon Server. AxonServerCommandBus.handle(${commandName}) The bus has received a command and is handling it. ${CommandBusClass}.dispatch(${commandName}) The localSegment invocation, dispatching the command locally. ${CommandBusClass}.handle(${commandName}) The localSegment is handling the command. ${RepositoryClass}.load ${identifier} The aggregate is being loaded by the repository. During this time Axon Framework will obtain a lock, fetch snapshots and events from the event store to hydrate the aggregate. LockingRepository.obtainLock The repository is obtaining a lock for the aggregate. This taking some time indicates that the command was queued due to another command being handled for the same aggregate. Trace name Description ${CommandBusClass}.dispatch(${commandName}) The bus is dispatching the command locally. ${CommandBusClass}.handle(${commandName}) The bus is invoking the handler locally. ${RepositoryClass}.load ${identifier} The aggregate is being loaded by the repository. During this time Axon Framework will obtain a lock, fetch snapshots and events from the event store to hydrate the aggregate. LockingRepository.obtainLock The repository is obtaining a lock for the aggregate. This taking some time indicates that the command was queued due to another command being handled for the same aggregate. During handling of commands, other functionality might be invoked such as scheduling deadlines or publishing events. Please refer to the specific sections of this functionality for more information. When publishing events, spans are created to indicate the event being published. Each event that is being published has its own specific publishing span. Any streaming event processor or saga handling the event in the future will be linked to the publishing spans, allowing easy click-through. Trace name Description ${EventBusClass}.publish(${EventClass}) For each event, a short span is created to indicate that an event was published. ${EventBusClass}.commit Indicates events being committed to the event store. Event processor invocations are traced as well. Since Streaming Event Processors are asynchronous, a new root trace is created for each event. Subscribing event processors, on the other hand, will become part of the current trace because they are invoked synchronously. Trace name Description ${ProcessorType}[${processorName}](${EventClass}) Root trace of handling the event, includes all interceptor invocations. ${ProcessorType}[${processorName}].process(${EventClass}) Inner span of handling the event, after all interceptors have been invoked. Trace name Description ${ProcessorType}[${processorName}].process(${EventClass}) The event is being handled by the subscribing event processor. Any action related to deadlines is traced in order to gain insight into what happened during specific calls. Mutations on deadlines generally happen from another root trace, such as a command or saga. The handling span of a deadline will be linked to the scheduling span for easy navigation. Trace name Description ${DeadlineManagerClass}.schedule(${deadlineName}) A deadline was scheduled. ${DeadlineManagerClass}.cancelSchedule(${deadlineName}, ${scheduleId}) A deadline was cancelled based on name and scheduleId. ${DeadlineManagerClass}.cancelAll(${deadlineName}) All deadlines with a specific name were cancelled. ${DeadlineManagerClass}.cancelAllWithinScope(${deadlineName}) All deadlines within a specific scope with a specific name were cancelled. DeadlineJob.execute(${deadlineName},${DeadlinePayloadClass}) Root trace of a deadline firing, containing the name and payload class. Snapshotting is done in a separate root trace, due to the fact that it’s an asynchronous action and has no user impact. However, it can still be useful to measure the performance of snapshotting and see when it is triggered. The root trace of the Snapshotter invocation will be linked to the command handling span after which the snapshot was scheduled to be created. Trace name Description ${SnapshotterClass}.createSnapshot($aggregateClass) A snapshot creation task is being submitted. Depending on performance, the executor might take a while to pick it up. ${SnapshotterClass}.createSnapshot($aggregateClass, $aggregateIdentifier) The Snapshotter is now creating the snapshot. The root trace does not contain the aggregate identifier so the APM tool groups any Snapshotter calls of the same aggregate type together. Sagas are a special type of event processor that can invoke multiple saga’s for a single event. Because of this the AbstractSagaManager has been instructed with additional tracing information. These spans are descendants of an event processor span that invokes the manager. Trace name Description SagaManager[${SagaTypeName}].invokeSaga ${sagaIdentifier} A matching saga has been found and is being invoked. SagaManager[${SagaTypeName}].startNewSaga The manager is constructing a new saga. Queries support tracing in all of their forms. In order to be clear about how they work, this section is split based upon the query’s type. For all types, the created spans will differ based on whether Axon Server is used or not. The spans that are only available with Axon Server are marked as such. Direct queries fetch a single result (either a single item or a single list) and receive no updates. Traces will differ based on whether Axon Server is used or not. The following tabs show the possible traces. Trace name Description AxonServerQueryBus.query(${queryName}) The requesting service is dispatching the query. QueryProcessingTask(${queryName}) The handling service is handling the query request in a task. SimpleQueryBus.query(${queryName}) The handling service is handling the query. AxonServerQueryBus.ResponseProcessingTask(${queryName}) The requesting service is processing the response. Trace name Description SimpleQueryBus.query(${queryName}) The QueryBus is handling the query locally. Streaming queries look similar to the traces of a Direct query. They do not contain a ResponseProcessingTask span since their results are directly published to the invoker of the query. Traces will differ based on whether Axon Server is used or not. The following tabs show the possible traces. Trace name Description AxonServerQueryBus.streamingQuery(${queryName}) The requesting service is dispatching the query. QueryProcessingTask(${queryName}) The handling service is handling the query request in a task. SimpleQueryBus.streamingQuery(${queryName}) The handling service is handling the streaming query. Trace name Description SimpleQueryBus.streamingQuery(${queryName}) The QueryBus is handling the query locally. Scatter-Gather queries are like a direct query but can fetch results from multiple services at the same time. Part of the trace can thus be duplicated multiple times, since multiple services are invoked. Traces will differ based on whether Axon Server is used or not. The following tabs show the possible traces. Trace name Description AxonServerQueryBus.scatterGather(${queryName}) The requesting service is dispatching the query. QueryProcessingTask(${queryName}) The handling service is handling the query request in a task. SimpleQueryBus.scatterGather(${queryName}) Each handling service is handling the query. Each handler within the same service has its own index. Trace name Description SimpleQueryBus.scatterGather(${queryName}) The QueryBus is handling the query locally. Each handler within the same service has its own index. Subscription queries are traces in a different way than others. Subscription queries have an initial result, which is traces like a direct query. However, new results can later be published at any time after while the caller is still subscribed to it. In order to prevent malformed traces, since most APM tools have a maximum span time before flushing them, publication of new results is not part of the original trace. However, invocations of the SimpleQueryUpdateEmitter will be linked to the span of the queries that are listening to it, so the original call can easily be found. The QueryUpdateEmitter traces will look like the following table: Trace name Description SimpleQueryUpdateEmitter.emit(${PayloadClass}) A new update is emitted. SimpleQueryUpdateEmitter.emit ${queryName} (${PayloadClass}) A new update is emitted for a specific consumer. In addition to this, the spans of the direct queries section apply as well. The TracingHandlerEnhancerDefinition automatically creates a span for each message handler invocation within your application. This is true for commands, events, queries and even custom message handlers. Spans will be created with the following format: ContainingClassName.methodName(ArgumentClass1, Argumentclass2, etc). Examples of this are: RoomAvailabilityHandler.on(RoomAddedEvent) Account(RegisterAccountCommand,DeadlineManager) The TracingHandlerEnhancerDefinition functionality is autoconfigured for Spring Boot, with event sourcing handlers turned off by default. This is because loading an aggregate might invoke many of these handlers, hitting the maximum number of spans for your APM tool. Please refer to the Spring Boot configuration section if you want to enable this.","title":"Distributed Tracing","component":"axon-framework-reference","version":"4.10","name":"tracing","url":"/axon-framework-reference/4.10/monitoring/tracing/","titles":[{"text":"Span factories","hash":"_span_factories","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3},{"text":"Terminology","hash":"_terminology","id":4},{"text":"Combining factories","hash":"_combining_factories","id":5},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":6},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":7},{"text":"Features","hash":"_features","id":8},{"text":"Span types","hash":"_span_types","id":9},{"text":"Span nesting","hash":"_span_nesting","id":10},{"text":"Span attribute providers","hash":"_span_attribute_providers","id":11},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":12},{"text":"Spring Boot auto configuration - bean creation","hash":"_spring_boot_auto_configuration_bean_creation","id":13},{"text":"Spring Boot auto configuration - bean injection","hash":"_spring_boot_auto_configuration_bean_injection","id":14},{"text":"OpenTelemetry","hash":"_opentelemetry","id":15},{"text":"Configuration","hash":"_configuration","id":16},{"text":"Maven","hash":"_maven","id":17},{"text":"Gradle","hash":"_gradle","id":18},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":19},{"text":"Manual configuration","hash":"_manual_configuration","id":20},{"text":"OpenTracing","hash":"_opentracing","id":21},{"text":"Logging","hash":"_logging","id":22},{"text":"Axon Configuration API","hash":"_axon_configuration_api_4","id":23},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_4","id":24},{"text":"Traced components","hash":"_traced_components","id":25},{"text":"Commands","hash":"_commands","id":26},{"text":"Axon Server","hash":"_axon_server","id":27},{"text":"Without Axon Server","hash":"_without_axon_server","id":28},{"text":"Events","hash":"_events","id":29},{"text":"Event processors","hash":"_event_processors","id":30},{"text":"Streaming event processors","hash":"_streaming_event_processors","id":31},{"text":"Subscribing event processors","hash":"_subscribing_event_processors","id":32},{"text":"Deadlines","hash":"_deadlines","id":33},{"text":"Snapshotting","hash":"_snapshotting","id":34},{"text":"Sagas","hash":"_sagas","id":35},{"text":"Queries","hash":"_queries","id":36},{"text":"Direct queries","hash":"_direct_queries","id":37},{"text":"Axon Server","hash":"_axon_server_2","id":38},{"text":"Without Axon Server","hash":"_without_axon_server_2","id":39},{"text":"Streaming queries","hash":"_streaming_queries","id":40},{"text":"Axon Server","hash":"_axon_server_3","id":41},{"text":"Without Axon Server","hash":"_without_axon_server_3","id":42},{"text":"Scatter-gather queries","hash":"_scatter_gather_queries","id":43},{"text":"Axon Server","hash":"_axon_server_4","id":44},{"text":"Without Axon Server","hash":"_without_axon_server_4","id":45},{"text":"Subscription queries","hash":"_subscription_queries","id":46},{"text":"Message handler invocations","hash":"_message_handler_invocations","id":47}]},"53":{"id":53,"text":"This page describes the process when it comes to configuring a Query Handlers. Note, that a Query Handler is a (singleton) object containing @QueryHandler annotated functions. When you register a Query Handler, that means you are registering a class containing annotated query handlers. Upon receiving such a class during configuration, Axon will scan its contents for all @QueryHandler annotated methods. In the registration process the following information defines a given query handling function: The first parameter of the method is the query payload. The methods response type is the query’s response type. The value of the queryName field in the annotation as the query’s name (this is optional and in its absence will default to the query payload). Note that it is possible to register multiple query handlers for the same query payload, response type and name. Furthermore, when dispatching a query the client can indicate whether it wants the result from a single handler or the result from all handlers corresponding to the query payload, name and response type combination. The following snippets point out how a Query Handler can be registered: Given the existence of the following query handler: public class CardSummaryProjection { @QueryHandler public CardSummary handle(FetchCardSummaryQuery query) { CardSummary cardSummary; // Retrieve CardSummary instance, for example from a repository. return cardSummary; } } The following is needed to register a CardSummaryProjection as being a Query Handler: Configurer axonConfigurer = DefaultConfigurer.defaultConfiguration() .registerQueryHandler(conf -> new CardSummaryProjection()); Or, a more general approach to registering all types of message handlers in a component can be used: Configurer axonConfigurer = DefaultConfigurer.defaultConfiguration() .registerMessageHandler(conf -> new CardSummaryProjection()); When using Spring Boot, simply specifying the query handler as a bean is sufficient: @Component public class CardSummaryProjection { @QueryHandler public CardSummary handle(FetchCardSummaryQuery query) { CardSummary cardSummary; // Retrieve CardSummary instance, for example from a repository. return cardSummary; } } Identical Query Handling methods in a single Query Handler A query handler class can currently contain several identical query handling methods. The outcome of which method will actually be called is however unspecified. Note that this should be regarded as a extremely uncommon scenario, as typically identical query handling methods would be spread over several query handlers.","title":"Configuration","component":"axon-framework-reference","version":"4.10","name":"configuration","url":"/axon-framework-reference/4.10/queries/configuration/","titles":[{"text":"Registering a query handler","hash":"_registering_a_query_handler","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto-configuration","hash":"_spring_boot_auto_configuration","id":3}]},"54":{"id":54,"text":"When it comes to dispatching queries, as explained in the Dispatching Queries section, there are a couple of implementations when it comes to actually sending the query message in question. The next sections provide an overview of the possible implementations, as well as pointing out how to set up query dispatching infrastructure with Axon. The query gateway is a convenient interface towards the query dispatching mechanism. While you are not required to use a gateway to dispatch queries, it is generally the easiest option to do so. Axon provides a QueryGateway interface and the DefaultQueryGateway implementation. The query gateway provides a number of methods that allow you to send a query and wait for a single or multiple results either synchronously, with a timeout or asynchronously. The query gateway needs to be configured with access to the query bus and a (possibly empty) list of `QueryDispatchInterceptor`s. The query bus is the mechanism that dispatches queries to query handlers. Queries are registered using the combination of the query request name and query response type. It is possible to register multiple handlers for the same request-response combination, which can be used to implement the scatter-gather pattern. When dispatching queries, the client must indicate whether it wants a response from a single handler or from all handlers. Axon provides a query bus out of the box, the AxonServerQueryBus. It connects to the AxonServer to send and receive Queries. AxonServerQueryBus is a 'distributed query bus'. It uses a SimpleQueryBus to handle incoming queries on different JVM’s by default. Declare dependencies: org.axonframework axon-server-connector ${axon.version} org.axonframework axon-configuration ${axon.version} Configure your application: // Returns a Configurer instance with default components configured. // `AxonServerQueryBus` is configured as Query Bus by default. Configurer configurer = DefaultConfigurer.defaultConfiguration(); By simply declaring dependency to axon-spring-boot-starter, Axon will automatically configure the Axon Server Query Bus: org.axonframework axon-spring-boot-starter ${axon.version} Excluding the Axon Server Connector If you exclude the axon-server-connector dependency you will fallback to 'non-axon-server' query bus option, the SimpleQueryBus (see below). The SimpleQueryBus does straightforward processing of queries in the thread that dispatches them. To configure a SimpleQueryBus (instead of an AxonServerQueryBus): public class AxonConfig { // omitting other configuration methods... public void configureQueryBus(Configurer configurer) { configurer.configureQueryBus( config -> SimpleQueryBus.builder() .transactionManager(config.getComponent(TransactionManager.class)) .messageMonitor(config.messageMonitor(SimpleQueryBus.class, \"queryBus\")) .build() ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public QueryBus queryBus(GlobalMetricRegistry metricRegistry, SpanFactory spanFactory, TransactionManager transactionManager, QueryUpdateEmitter updateEmitter) { return SimpleQueryBus.builder() .messageMonitor(metricRegistry.registerQueryBus(\"queryBus\")) .transactionManager(transactionManager) .spanFactory(spanFactory) .queryUpdateEmitter(updateEmitter) // .. .build(); } }","title":"Implementations","component":"axon-framework-reference","version":"4.10","name":"implementations","url":"/axon-framework-reference/4.10/queries/implementations/","titles":[{"text":"Query gateway","hash":"_query_gateway","id":1},{"text":"Query bus","hash":"_query_bus","id":2},{"text":"AxonServerQueryBus","hash":"AxonServerQueryBus","id":3},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":4},{"text":"Spring Boot auto-configuration","hash":"_spring_boot_auto_configuration","id":5},{"text":"SimpleQueryBus","hash":"SimpleQueryBus","id":6},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":7},{"text":"Spring Boot auto-configuration","hash":"_spring_boot_auto_configuration_2","id":8}]},"55":{"id":55,"text":"The third and final type of \"Messages\" that an Axon application is associated with are *Query Messages (or simply Queries).* This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help facilitate Query Message Development. A summary of the various sub-sections is given below. Sub-Section Purpose Query Processing Short introduction to the Query Processing capabilities provided by the Axon Framework Query Dispatchers / Query Handlers Functional Development concerns for Query Messages using the Axon Framework Implementations Non-Functional Development concerns for Query Messages using the Axon Framework Configuration Configuration concerns for Query Messages using the Axon Framework This guide is complemented by a video tutorial which gives a practical demonstration of the concepts explained in this section. The tutorial is available at -> Axon Coding Tutorial - Query Messages","title":"Queries","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/queries/","titles":[]},"56":{"id":56,"text":"How to handle a query message has been covered in more detail in the Query Handling section. Queries have to be dispatched, just like any type of message, before they can be handled. To that end Axon provides two interfaces: The Query Bus, and The Query Gateway This page will show how and when to use the query gateway and bus. How to configure and specifics on the the query gateway and bus implementations are discussed here The QueryBus is the mechanism that dispatches queries to query handlers. Queries are registered using the combination of the query request name and query response type. It is possible to register multiple handlers for the same request-response combination, which can be used to implement the scatter-gather pattern. When dispatching queries, the client must indicate whether it wants a response from a single handler or from all handlers. The QueryGateway is a convenient interface towards the query dispatching mechanism. While you are not required to use a gateway to dispatch queries, it is generally the easiest option to do so. It abstracts certain aspects for you, like the necessity to wrap a Query payload in a Query Message. Regardless whether you choose to use the QueryBus or the QueryGateway, both provide several types of queries. Axon Framework makes a distinction between four types, being: Point-to-point queries, Scatter-gather queries, Subscription queries, Streaming queries. The direct query represents a query request to a single query handler. If no handler is found for a given query, a NoHandlerForQueryException is thrown. In case multiple handlers are registered, it is up to the implementation of the Query Bus to decide which handler is actually invoked. In the listing below we have a simple query handler: @QueryHandler // 1. public List query(String criteria) { // return the query result based on given criteria } By default the name of the query is fully qualified class name of query payload (java.lang.String in our case). However, this behavior can be overridden by stating the queryName attribute of the @QueryHandler annotation. If we want to query our view model, the List, we would do something like this: // 1. GenericQueryMessage> query = new GenericQueryMessage<>(\"criteria\", ResponseTypes.multipleInstancesOf(String.class)); // 2. send a query message and print query response queryBus.query(query).thenAccept(System.out::println); It is also possible to state the query name when we are building the query message, by default this is the fully qualified class name of the query payload. The response of sending a query is a Java CompletableFuture, which depending on the type of the query bus may be resolved immediately. However, if a @QueryHandler annotated function’s return type is CompletableFuture, the result will be returned asynchronously regardless of the type of the query bus. When you want responses from all of the query handlers matching your query message, the scatter-gather query is the type to use. As a response to that query a stream of results is returned. This stream contains a result from each handler that successfully handled the query, in unspecified order. In case there are no handlers for the query, or all handlers threw an exception while handling the request, the stream is empty. In the listing below we have two query handlers: @QueryHandler(queryName = \"query\") public List query1(String criteria) { // return the query result based on given criteria } @QueryHandler(queryName = \"query\") public List query2(String criteria) { // return the query result based on given criteria } These query handlers could possibly be in different components and we would like to get results from both of them. So, we will use a scatter-gather query, like so: // create a query message GenericQueryMessage> query = new GenericQueryMessage<>(\"criteria\", \"query\", ResponseTypes.multipleInstancesOf(String.class)); // send a query message and print query response queryBus.scatterGather(query, 10, TimeUnit.SECONDS) .map(Message::getPayload) .flatMap(Collection::stream) .forEach(System.out::println); The subscription query allows a client to get the initial state of the model it wants to query, and to stay up-to-date as the queried view model changes. In short it is an invocation of the Direct Query with the possibility to be updated when the initial state changes. To update a subscription with changes to the model, we will use the QueryUpdateEmitter component provided by Axon. Let’s take a look at a snippet from the CardSummaryProjection: @QueryHandler public List handle(FetchCardSummariesQuery query) { log.trace(\"handling {}\", query); TypedQuery jpaQuery = entityManager.createNamedQuery(\"CardSummary.fetch\", CardSummary.class); jpaQuery.setParameter(\"idStartsWith\", query.getFilter().getIdStartsWith()); jpaQuery.setFirstResult(query.getOffset()); jpaQuery.setMaxResults(query.getLimit()); return log.exit(jpaQuery.getResultList()); } This query handler will provide us with the list of GiftCard states. Once our GiftCard gets redeemed we would like to update any component which is interested in the updated state of that GiftCard. We’ll achieve this by emitting an update using the QueryUpdateEmitter component within the event handler function of the RedeemedEvt event: @EventHandler public void on(RedeemedEvt event) { // 1. CardSummary summary = entityManager.find(CardSummary.class, event.getId()); summary.setRemainingValue(summary.getRemainingValue() - event.getAmount()); // 2. queryUpdateEmitter.emit(FetchCardSummariesQuery.class, query -> event.getId().startsWith(query.getFilter().getIdStartsWith()), summary); } First, we update our view model by updating the existing card. If there is a subscription query interested in updates about this specific GiftCard we emit an update. The first parameter of the emission is the type of the query (FetchCardSummariesQuery in our case) which corresponds to the query type in a previously defined query handler. The second parameter is a predicate which will select the subscription query to be updated. In our case we will only update subscription queries interested in the GiftCard which has been updated. The third parameter is the actual update, which in our case is the card summary. There are several overloads of the emit method present, feel free to take a look at JavaDoc for more specifics on that. The important thing to underline here is that an update is a message and that some overloads take the update message as a parameter (in our case we just sent the payload which was wrapped in the message) which enables us to attach meta-data for example. Once we have the query handling and the emitting side implemented, we can issue a subscription query to get the initial state of the GiftCard and be updated once this GiftCard is redeemed: // 1. commandGateway.sendAndWait(new IssueCmd(\"gc1\", amount)); // 2. FetchCardSummariesQuery fetchCardSummariesQuery = new FetchCardSummariesQuery(offset, limit, filter); // 3. SubscriptionQueryResult, CardSummary> fetchQueryResult = queryGateway.subscriptionQuery( fetchCardSummariesQuery, ResponseTypes.multipleInstancesOf(CardSummary.class), ResponseTypes.instanceOf(CardSummary.class)); fetchQueryResult //4. .handle(cs -> cs.forEach(System.out::println), System.out::println) //5. .doFinally(it -> fetchQueryResult.close()); // 6. commandGateway.sendAndWait(new RedeemCmd(\"gc1\", amount)); Issuing a GiftCard with gc1 id and initial value of amount. Creating a subscription query message to get the list of GiftCards (this initial state is multiple instances of CardSummary) and to be updated once the state of GiftCard with id gc1 is changed (in our case an update means the card is redeemed). The type of the update is a single instance of CardSummary. Do note that the type of the update must match the type of the emission side. Once the message is created, we are sending it via the QueryGateway. We receive a query result which contains two components: one is initialResult and the other is updates. In order to achieve 'reactiveness' we use Project Reactor's Mono for initialResult and Flux for updates. Note Once the subscription query is issued, all updates are queued until the subscription to the Flux of updates is done. This behavior prevents the losing of updates. Note The Framework prevents issuing more than one query message with the same id. If it is necessary to be updated in several different places, create a new query message. Note The reactor-core dependency is mandatory for usage of subscription queries. However, it is a compile time dependency and it is not required for other Axon features. The SubscriptionQueryResult#handle(Consumer, Consumer) method gives us the possibility to subscribe to the initialResult and the updates in one go. If we want more granular control over the results, we can use the initialResult() and updates() methods on the query result. As the queryUpdateEmitter will continue to emit updates even when there are no subscribers, we need to notify the emitting side once we are no longer interested in receiving updates. Failing to do so can result in hanging infinitive streams and eventually a memory leak. Once we are done with using subscription query, we need to close the used resource. We can do that in doFinally hook. As an alternative to the doFinally hook, there is the Flux#using API. This is synonymous to the try-with-resource Java API: `text Flux.using( () -> fetchQueryResult, queryResult -> queryResult.handle(…​, …​), SubscriptionQueryResult::close ); ` When we issue a RedeemCmd, our event handler in the projection will eventually be triggered, which will result in the emission of an update. Since we subscribed to updates with the println() method, the update will be printed out once it is received. The streaming query allows a client to, for example, stream large database result sets. The streaming query relies on the reactive stream model, specifically the Publisher type. The streaming query is flexible enough to handle any query return type. That means that any return type that is not a Publisher will automatically be converted to Publisher. The Publisher will emit one or multiple items based on query handler. The QueryGateway provides the streamingQuery method to utilize the streaming query. It’s simple to use and requires just two parameters: the query payload and the expected response type class. Note that the streamingQuery method is lazy, meaning the query is sent once the Publisher is subscribed to. Let’s see how to use the streamingQuery method: @QueryHandler public List handle(FetchCardSummariesQuery query) { ... return cardRepository.findAll(); //1 } ... public Publisher consumer() { return queryGateway.streamingQuery(query, CardSummary.class); //2 } We are querying the cardRepository for all the cards. The repository can potentially return a result set containing thousands of items. We are using the queryGateway to issue the streaming query. If we used a point-to-point query with multipleInstanceOf(CardSummary.class) response type, we would get an extensive list transferred as a single result message over the network. This result can potentially cause a buffer overflow or maximum message size violation. Instead of the multiple-instance-of approach, we use the streamingQuery(query, CardSummary.class). This method will convert our response to a stream and chunk the result into smaller messages containing the CardSummary instances. Natively, if we want fine-grained control of the producing stream, we can use for example Project Reactor’s Flux as the return type: @QueryHandler public Flux handle(FetchCardSummariesQuery query) { ... return reactiveCardRepository.findAll(); } When using a Flux as the return type, we can control backpressure, stream cancellation and implement more complex features like pagination. Transaction Leaking Concerns Once a consumer of the streaming query receives the Publisher to subscribe to, the transaction will be considered completed successfully. That means that any subsequent messages on the stream will not be part of the transaction, including errors. As the transaction is already over an error will not be propagated to the parent transaction to invoke any rollback method. This has the implication that the streaming query should not be used within a Unit Of Work (within message handlers or any other transactional methods) to chain other transactional actions (like sending a command or query). Back-pressure (flow control) is an essential feature in reactive systems that allows consumers to control the data flow, ensuring they are not overwhelmed by the producer. The streaming query implements a pull-based back-pressure strategy, which means that the producer will emit data when the consumer is ready to receive it. If you are using Axon Server, for more information see the flow control documentation. The streaming query can be implemented as an infinitive stream. Hence, it’s important to cancel it once the client is not interested in receiving any more data. The following sample shows how this could be achieved: public Publisher consumer() { return Flux.from(queryGateway.streamingQuery(query, CardSummary.class)) .take(100) .takeUntil(message -> somePredicate.test(message)); } The example above shows how the take operator limits the number of items to be emitted. A producer that produces an error by calling onError(Throwable) will terminate the handler execution. The consumer will, in turn, have its onError(Throwable) subscription handler called. Note that exceptions do not flow upstream (from consumer to producer). If an error happens on the consumer side, the consumer error will trigger a cancel signal propagated to the producer. This signal will effectively cancel the stream without the producer knowing the reason. Hence, it’s recommended to set a timeout on the query handler’s side in case of a finite stream. Essentially to protect against malfunctioning consumers or producers. @QueryHandler public Flux handle(FetchCardSummariesQuery query) { ... return reactiveCardRepository.findAll().timeout(Duration.ofSeconds(5)); } The example above shows how the timeout operator is used to cancel a request if no responses have been observed during a five-second timespan. Reactor dependency The reactor-core dependency is mandatory for usage of streaming queries. However, it is a compile time dependency and it is not required for other Axon features. Axon Coding Tutorial #5: - Connecting the UI","title":"Query Dispatchers","component":"axon-framework-reference","version":"4.10","name":"query-dispatchers","url":"/axon-framework-reference/4.10/queries/query-dispatchers/","titles":[{"text":"The query bus and query gateway","hash":"_the_query_bus_and_query_gateway","id":1},{"text":"Point-to-point queries","hash":"point-to-point-queries","id":2},{"text":"Scatter-gather queries","hash":"scatter-gather-queries","id":3},{"text":"Subscription queries","hash":"subscription-queries","id":4},{"text":"Streaming queries","hash":"streaming-queries","id":5},{"text":"Streaming back-pressure","hash":"_streaming_back_pressure","id":6},{"text":"Cancellation","hash":"_cancellation","id":7},{"text":"Error handling","hash":"_error_handling","id":8}]},"57":{"id":57,"text":"The handling of a query comes down to an annotated handler returning the query’s response. The goal of this chapter is to describe what such an @QueryHandler annotated method looks like, as well as describing the call order and response type options. For configuration of query handlers and the QueryBus, it is recommended to read the Configuration section. In Axon, an object may declare a number of query handler methods, by annotating them with the @QueryHandler annotation. The object in question is what you would refer to as the Query Handler, or Query Handling Component. For a query handler method, the first declared parameter defines which query message object it will receive. Taking the 'Gift Card' domain which contains a CardSummary Query Model, we can assume there is a query message to fetch a single CardSummary instance. Let us define the format of the query message as follows: public class FetchCardSummaryQuery { private final String cardSummaryId; public FetchCardSummaryQuery(String cardSummaryId) { this.cardSummaryId = cardSummaryId; } // omitted getters, equals/hashCode, toString functions } As shown, we have a regular POJO that will fetch a CardSummary based on the cardSummaryId field. This FetchCardSummaryQuery will be dispatched to a handler that defines the given message as its first declared parameter. The handler will likely be contained in an object which is in charge of or has access to the CardSummary model in question: import org.axonframework.queryhandling.QueryHandler; public class CardSummaryProjection { private Map cardSummaryStorage; @QueryHandler // 1. public CardSummary handle(FetchCardSummaryQuery query) { // 2. return cardSummaryStorage.get(query.getCardSummaryId()); } // omitted CardSummary event handlers which update the model } From the above sample we want to highlight two specifics when it comes to writing a query handler: The @QueryHandler annotation which marks a function as a query handler method. The method in question is defined by the return type CardSummary, which is called the query response type, and the FetchCardSummaryQuery which is the query payload. Storing a Query Model For the purpose of the example we have chosen to use a regular Map as the storage approach. In a real life system, this would be replaced by a form of database or repository layer for example. In all circumstances, at most one query handler method is invoked per query handling instance. Axon will search for the most specific method to invoke, using following rules: On the actual instance level of the class hierarchy (as returned by this.getClass()), all annotated methods are evaluated If one or more methods are found of which all parameters can be resolved to a value, the method with the most specific type is chosen and invoked If no methods are found on this level of the class hierarchy, the super type is evaluated the same way When the top level of the hierarchy is reached, and no suitable query handler is found, this query handling instance is ignored. Note that similar to command handling, and unlike event handling, query handling does not take the class hierarchy of the query message into account. // assume QueryB extends QueryA // and QueryC extends QueryB // and a single instance of SubHandler is registered public class QueryHandler { @QueryHandler public MyResult handle(QueryA query) { // Return result } @QueryHandler public MyResult handle(QueryB query) { // Return result } @QueryHandler public MyResult handle(QueryC query) { // Return result } } public class SubQueryHandler extends QueryHandler { @QueryHandler public MyResult handleEx(QueryB query) { // Return result } } In the example above, the handler method of SubQueryHandler will be invoked for queries for QueryB and result MyResult the handler methods of QueryHandler are invoked for queries for QueryA and QueryC and result MyResult. Axon allows a multitude of return types for a query handler method, as defined earlier on this page. You should think of single objects and collections of objects, taking into account wildcards or generics too. Below we share a list of all the options which are supported and tested in the framework. For clarity, we make a deviation between single instance and multiple instances of a response type. This follows the requirement to specify the ResponseType when dispatching a query, which expects the user to state if either a single result or multiple results are desired. Axon will use this ResponseType object to match a query with a query handler method, alongside the query payload and query name. To query for a single object, the ReponseTypes#instanceOf(Class) method should be used to create the required ResponseType object. This \"instance-of-Class`\" `ResponseType object in turn supports the following query handler return values: An exact match of Class A subtype of Class A generic bound to Class A Future of Class A primitive of Class An Optional of Class Primitive Return Types Among the usual Objects, it is also possible for queries to return primitive data types: public class QueryHandler { @QueryHandler public float handle(QueryA query) { } } Note that the querying party will retrieve a boxed result instead of the primitive type. To query for a multiple objects, the ReponseTypes#multipleInstancesOf(Class) method should be used to create the required ResponseType object. This \"multiple-instances-of-Class`\" `ResponseType object in turn supports the following query handler return values: An array containing: Class A subtype of Class A generic bound to Class An Iterable or a custom implementation of Iterable containing: Class A subtype Class A generic bound to Class A wildcard bound to Class A Stream of Class A Future of an Iterable of Class The following list contains method return values which are not supported when queried for: An array of primitive types A Map of a given key and value type","title":"Query Handlers","component":"axon-framework-reference","version":"4.10","name":"query-handlers","url":"/axon-framework-reference/4.10/queries/query-handlers/","titles":[{"text":"Writing a query handler","hash":"writing-query-handler","id":1},{"text":"Query handler call order","hash":"_query_handler_call_order","id":2},{"text":"Query handler return values","hash":"_query_handler_return_values","id":3},{"text":"Supported single instance return values","hash":"_supported_single_instance_return_values","id":4},{"text":"Supported multiple instances return values","hash":"_supported_multiple_instances_return_values","id":5},{"text":"Unsupported return values","hash":"_unsupported_return_values","id":6}]},"58":{"id":58,"text":"Processing queries as a dedicated type of message is in line with separating the query models when following CQRS. Although creating a query handling layer is fairly straight-forward, using Axon Framework for this part of the application has a number of benefits. Through providing the functionality to describe query handling methods (as further explained in this section) and a dedicated bus for query messages, common message features such interceptors and message monitoring can be used. The next sections provide an overview of the tasks related to configuring the necessary components to start processing queries in an Axon application. To that end the approach to registering @QueryHandler annotated methods is discussed, as well as what options are present when it comes to dispatching queries. Query Types Axon Framework makes a distinction between three types of queries, namely (1) Point-to-Point queries, (2) Scatter-Gather queries, and (3) Subscription queries. Click the links for specifics on how to implement each type of query.","title":"Query Processing","component":"axon-framework-reference","version":"4.10","name":"query-processing","url":"/axon-framework-reference/4.10/queries/query-processing/","titles":[]},"59":{"id":59,"text":"The release notes section for the Axon framework for all major/minor releases. Release Type Version Major 4.10 4.9 4.8 4.7 4.6 4.5 4.4 4.3 4.2 4.1 4.0 Minor 4.10 4.9 4.8 4.7 4.6 4.5 4.4 4.3 4.2 4.1 4.0","title":"Release Notes","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/release-notes/","titles":[]},"60":{"id":60,"text":"All the enhancements and features which have been introduced to our major releases of the Axon Framework are noted here. Persistent streams #3030 Inject multiple test resources #2948 Persistent stream configuration #3043 Rebalance Segments in PooledStreamingEventProcessor #3028 [#3007] Set a SmartLifecycle phase lower than the ones written in the spring WebServer lifecycle ones. #3009 Spring: Place the Axon shutdown hook AFTER the WebServer ones #3007 Update index.adoc, remove link to how-to’s #2978 Automate migration to Axon 4.9+ #2944 refactor: Parameterized logging with constant log values #2910 Enhancement/test container reuse #2883 Removed old from AF reference guide docs module #3046 Updated links to Extensions and appendices #3041 Changed broken xref to broken links - to allow the build process to f… #3032 We’d like to thank all the contributors who worked on this release! @smcvb @MGathier @timtebeek @dgomezg @pckuyer @Sajjad-HTLO @bystam @manishatGit @tharoldD In issue #2778 we adapted the default TrackingToken of each StreamingEventProcessor to become a ReplayToken instead of a null. These changes result in the certainty that tasks that should not be performed on a replay of old events, like virtually any Saga event handlers, are ignored upon introduction of the Event Handling Component. However, if you expect all events to be handled as \"new\" events when introducing a new Event Handling Component, this may come as an unexpected change in behavior. More specifically, if you use the @DisallowReplay annotation or ReplayStatus#REPLAY enumeration on your newly introduced Event Handling Component, you will notice that the annotated method or block of code is no longer invoked. As such, the default ReplayToken should be regarded as a behavioral breaking change if you expect all methods of a new Event Handling Component to be invoked, regardless of any Replay API usage. Add suppressible log message when console client is not on the classpath. #2868 Instruct compiler to include parameter names metadata #2835 Log notification about AxonIQ console, if console-framework-client is not there #2819 Add additional Axon Server connector configuration to the AxonServerConfiguration #2815 Introduce the AxonServerEventStoreFactory #2807 Claim segments operation for Streaming Event Processors #2803 Add property to easily disable using Axon Server as event store. #2801 Add support for Spring Docker Compose #2790 Add CBOR format and Spring Boot properties for support #2777 Allow easy configuration of CBOR #2776 Support Java modules #2427 Add JDK21 to GitHub Actions #2866 [#2843] Make it possible to have multiple instances of the DbScheduler components. #2853 AxonDbSchedulerAutoConfiguration can not be used multiple times in hierarchical Spring context due to static fields #2843 Add intermediate span factories for Event Processors #2834 Add intermediate span factories for Sagas and Repositories #2830 Add intermediate span factories for DeadlineManager #2829 Intermediate Span Factory pattern for buses #2826 Intermediate Span Factory pattern for snapshotters #2824 Dead-Letter Sequence Identifier Caching #2818 Detect empty snapshots due to Serializer misconfiguration #2817 Improve Event Scheduler context configuration #2810 Implement StreamingEventProcessor.claimSegment #2805 Improve Spanfactory configurability #2780 Default to ReplayToken upon creation of new event processor #2778 Prevent processors from resetting when no handlers support replay #2769 Improve JavaDoc of the CommandTargetResolver #2742 Execute the axon-spring-boot-3-integrationtests actually with spring 3 #2862 Resolve classloading issue with ConnectionDetails #2833 Fix some typos #2783 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @lachja @abuijze @CodeDrivenMitch @schananas [#2689] Support Snapshotting for Polymorphic Aggregates #2753 Allow property based configuration of load balancing strategies #2750 Add test-summary step #2745 [#1828] Add Anchore Container Scan step #2744 [#2350] JDBC Dead-Letter Queue #2743 Enable tracing in DistributedCommandBus with SpanFactory #2729 Make the token store claim timeout easily configurable. #2722 Allow easy (property) configuration for the claimTimeout of the default TokenStore #2708 Introduce Polymorphic Aggregate Snapshotting auto-configuration #2689 [#2639] Handler Interceptor support for Dead Letter Processing #2661 [#2640] Support @ExceptionHandler and @MessageHandlerInterceptor annotated methods in Sagas #2656 Support @ExceptionHandler annotated methods in Sagas #2640 Handler Interceptor support for Dead Letter Processing #2639 Add an auto-merge step for Dependabot Pull Request #2608 2581 Allow to override EventSchema without modifying default JdbcEve… #2582 Allow to override EventSchema without modifying default JdbcEventStorageEngine in Spring context #2581 Allow Development mode on test containers #2461 Autoconfigure automatic load balancing #2453 Enable tracing in DistributedCommandBus with SpanFactory #2403 JDBC Dead-Letter Queue #2350 Validate test-summary GitHub Action #2228 Investigate usage of the Anchore Container Scan in GitHub Actions #1828 Introduce AxonServerContainer as test-container #2763 [#2755] Align assertion messages #2757 Put test assertion errors on multiple lines #2755 Add db-scheduler implementation of the Event Scheduler and Deadline Manager #2727 Add db-scheduler implementation of the Event Scheduler and Deadline Manager #2724 Add JCacheAdapter test scenarios #2721 Make Configuration accessible #2700 refactor: Spring Boot 2.x best practices #2663 Improve error message in case a streaming query gives an error. #2662 Error handling of Streaming queries is less than ideal #2660 Add a warning to the creation of the in memory token store. #2650 Add a registerDeadLetterQueueProvider method in the EventProcessingConfigurer. #2633 [#2628] Extended support for Spring application context hierarchy #2629 ObjectMapper cannot be resolved from Spring Parent Context #2628 Move AbstractDeadlineManagerTestSuite to spring module so it’s deployed. #2622 Clean the test logs #2606 Create a SequencedDeadLetterQueueFactory #2598 2581 Do not duplicate bean definition of TokenStore #2587 [#2074] Allow to customize saga schema table and columns #2575 Auto-merge successful Dependabot Pull requests #2569 Move to use job builder to have more control how the jobs are stored. Add auto configuration. #2564 Enable cancelAll and cancelAllwithinScope in the JobRunrDeadlineManager. #2507 Add JCacheAdapter test scenarios #2421 Change jdbc column names to snake case as default. #2074 Add cache using EhCache 3 #2709 Add cache using Ehcache 3 #2420 Remove payloadType tag from EventProcessorLatencyMetric #2683 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @OLibutzki @azzazzel @Morlack @timtebeek @Blackdread @schananas This release introduces compatibility with Spring Boot 3. The support for Spring Boot 3 also entails the removal of the Jakarta-specific modules since Jakarta is now the default. Furthermore, it required us to duplicate the Javax Persistence and Javax Validation classes into dedicated legacy packages. In doing so, we provided support for both Javax and Jakarta, as well as Spring Boot 2 and Spring Boot 3. However, this required us to introduce breaking changes in 4.7 compared to 4.6. To help you upgrade towards Axon Framework 4.7, we provide a dedicated Upgrading to Axon Framework 4.7 page describing the scenarios you may be in and the steps to take for upgrading. Next to the Javax-to-Jakarta adjustments and the Spring Boot 3 support, we’ve added an Event Scheduler and Deadline Manager based on JobRunr. For an exhaustive list of the features, enhancements, and bug fixes introduced, see below: [#1509] Add whenConstructing and whenInvoking to the AggregateTestFixture #2551 [#2476] Support EventMessage handler interceptor registration on the SagaTestFixture #2548 [#2351] The DeadLetter Parameter Resolver #2547 Add Configurer#registerHandlerEnhancerDefinition #2545 [#1123] Support Repository bean wiring through generics #2527 Implement the JobRunr implementation of the event scheduler. #2509 JobRunr DeadlineManager #2499 Added parameter resolver for aggregate type retrieval from domain event messages #2498 Implement Event Handler Interceptors registration on SagaTestFixtures #2476 Message Handler (parameter) support for Dead Letters #2351 Alternative deadline manager: JobRunr (Quartz alternative) #2192 Allow the AggregateTestFixture to expect methods to be called instead of commands passed. #1509 Allow replay on a Saga #1458 Provide alternatives for QuartzEventScheduler and QuartzDeadlineManager #1106 Configurable Locking Scheme in SagaStore #947 Fixed SpringAggregateLookup initialization issue for Spring AOT #2578 [#2561] Move Sonar to JDK17 #2574 Automatically approve Dependabot[bot] PRs #2566 Add Segment and Token to UnitOfWork of PooledStreamingEventProcessor #2562 Move Sonar to JDK17 build #2561 [#2129] Fine tune Repository registration in the AggregateTestFixture #2552 [#1630] Allow disabling of sequence number generation in the GenericJpaRepository #2550 Several fixes to successfully run a JDK17 build #2544 Adjust Dependabot behavior #2536 Enable heartbeats to Axon Server by default #2530 [#2383] Add ConditionalOnMissingBean to SpringAxonConfiguration and SpringConfigurer #2526 Small test and code improvement for JobRunr deadline manager #2510 Introduce the NestingSpanFactory #2487 Improve mismatch messages for Hamcrest Matchers #2400 #2418 Allow OpenTelemetrySpanFactory to only create child spans #2404 Add ConditionalOnBean to InfraConfiguration Beans #2383 AggregateTestFixture creates EventSourcingRepository and does not invalidate it #2129 JDK16 - axon-messaging own unit test fail on #1826 GenericJpaRepository to enable/disable the sequence number generation #1630 Fix typos in Javadoc #2475 Aggregate Repository Spring wiring causes NullPointerException #1123 Asserting checked exception while creating an Aggregate #782 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @Morlack @maverick1601 @TomDeBacker @lachja @abuijze @fernanfs Axon Framework 4.6.0 has undergone a great deal of changes. Some noteworthy additions are the Dead-Letter Queue, integrated Tracing with Open Telemetry and Jakarta support. For an exhaustive list of the features, enhancements, and bug fixes with introduced, see below. For a list that also contains the dependency upgrades we refer to this page. Added Slack release announcement #2348 [#2307] Carry the context during reset to the ReplayToken #2312 Propagate ResetContext in ReplayToken #2307 [#2198] Add support for Jakarta #2301 Native Tracing for Axon Framework with OpenTelemetry as default #2294 [#2021] Dead Letter Queue for Event Processing Groups #2258 JPA dead letter queue implementation #2239 Construct means to switch between classes using javax and jakarta #2198 Create add-dependabot-pr-to-project.yml #2183 Create add-issues-to-project.yml #2182 Multiteant support #2156 Spring event for indication that Axon has started #2146 Application events when handlers are registered #2144 [#1125] Introduce SagaLifecycle.associationValues() #2141 [#1964] Include AxonServerHealthIndicator #2130 AggregateTestFixture improvement - Validate Exception Details #2125 AggregateTestFixture improvement - Validate Exception Details #2110 Feature/1466 Additional deadline validation methods #2071 Multi-tenant support #2045 Dead-Letter Queue for Event Processors #2021 Added AxonServerEEContainer and AxonServerSEContainer as an easier way for people to write tests #2020 Streaming query #2001 [#1967] Fetch available segements only from the TokenStore #1997 [#1645] Introduce ObjectNode-to/from-JsonNode ContentTypeConverter for the JacksonSerializer #1995 [#1490] Simplify LockFactory configuration for Aggregates #1992 [#1986 Introduce EventProcessingConfigurer#defaultTransactionManager method #1989 Register default Transaction Manager through Event Processing Configurer #1986 Add method returning the available segments of a TokenStore #1967 Add an actuator health indicator to check the connection between the application and Axon Server #1964 Added the MetaDataSequencingPolicy #1930 Provide a SequencingPolicy based on a MetaData field #1929 Added an option to create a fixture for a state stored aggregate #1772 JsonNode-to-ObjectNode ContentTypeConverter #1645 Simplify LockFactory configuration per aggregate #1490 Additional Deadline Validation methods. #1466 Allow TrackingEventProcessor start to be deferred #1184 Accessing Saga Association Values #1125 Signal when all Handlers have been registered in Spring environment #880 Improve deadline span name. #2360 Make Given-phase Error Handling configurable for Saga Test Fixtures #2356 Improve SpanFactory autoconfiguration mechanism. #2354 Introduce LoggingSpanFactory and MultiSpanFactory #2353 Check if a certain handler contains certain methods before registering it. #2346 Catch exceptions from correlation data providers. #2345 Throw exception on ambiguous dependencies #2344 Integration Test for Command and Query Priority Calculations #2342 Include message identifier in error message if de-serialization fails #2330 Add CorrelationDataProvider error handling on rollback #2328 Strip test prefix once required in JUnit 3 from test method names #2321 Apache Maven Wrapper 3.8.6 #2320 Allow ReplayToken creation to be customizable when resetting a projection #2308 Ensure all dispatchable messages are serialiable by Jackson and XStream. #2295 Testclasses for javax jakarta extension #2280 Remove redundant method definition #2270 Integration Test for Command and Query Priority Calculations #2266 Update the PrioritizedRunnable to a PriorityTask #2265 Automatically add Release Notes on milestone closure to Discuss post #2264 Create a protected method to fetch tracking events on JpaEventStorageEngine #2262 Create a protected method to fetch tracking events on JpaEventStorageEngine. #2259 Allow subtype definition on the Repository builders for Polymorphic Aggregates #2250 Add test for ConsistentHash.equals #2244 Use getHost instead of getContainerIpAddress #2222 Default snapshotfilter with revision null #2213 Default snapshot filter with revision null #2212 Creation policy factory for Aggregates #2209 Removed deprecated code by updating the default serializer initialization #2206 Flux response type rank matching #2197 Introduce conditional variants for ApplyMore #2174 Conditional variant for the ApplyMore methods #2173 Take into account the result of the equals method before attempting… #2171 Improve javadoc of the ReplayStatus enum to reflect changes to the StreamingEventProcessors #2170 MultipleInstancesResponseType should match (lower) on single item #2148 Add duplicate resolution on query handler registration, defaulting to… #2140 Add method on DefaultCommandGateway to be able to customize callbacks #2139 Default Revision SnapshotFilter in absence of annotation #2136 Fine tune the MessageHandlerLookup for Spring Native support #2106 Redesign of Spring Boot Auto Configuration support #2105 Feature/1629 saga test fixture #2101 [#2093] Validate if target Command Handling Member can resolve target #2095 Allow several Aggregate Member collections of the same type #2093 Changed logging about \"processor falling behind\" #2073 Make asDomainEventMessage available to subclasses #2066 Make JpaEventStorageEngine#asDomainEventMessage(EventMessage) protected #2065 Separate Integration Tests and Aggregate coverage reports #2063 [#1646] Update \"No Handler For\" exceptional cases #2062 [#1711] Simplify attachment of Lifecycle Operations #2061 Change how Sonar is invoked for GHA’s #2033 Introduce LifecycleAware interface for managing component lifecycle #2028 Remove MonoWrapper usage. #2008 Replaced method.getParametersTypes().length by method.getParameterCount()) #1987 Methods for testing deadlines when time passed are consistent in TestExecutor & SagaTestFixture (fixes #1974) #1975 Make methods for testing Deadlines consistent for TestExecutor and SagaTestFixture #1974 Added jdk17-ea on our build workflow for early feedback #1915 Add configurable options for checking failure transiency #1910 Prevent stack trace generation for HandlerExecutionException #1905 Allow creation of HandlerExecutionExceptions without stacktrace #1901 [#1898] Empty associationProperty leads to IndexOutOfBoundsException #1899 Empty associationProperty leads to IndexOutOfBoundsException #1898 Provide means of configuring a CommandCallback #1889 Splitted builds into pr and not pr, added ghactions to Dependabot and other minors #1830 Fine tune triggered Deadline validation for Test Fixtures #1797 Simplified DeadlineManager configuration #1796 Expand RetryScheduler to support more granular decision when to retry #1723 Simplify attachment of Lifecycle Operations #1711 Improved termination heuristic when response is < batchsize/2 and the… #1691 Exception in startHandlers is \"swallowed\" by exception in shutdownHandlers #1669 Fine tune \"No Handler For…\" Exception #1646 SagaTestFixture should support expectSuccessfulHandlerExecution() #1629 Large number of rolled back transactions on JPA/JDBC TokenStore #1475 Reduce Reflection usage #1427 Add annotation NonNull/Nullable for better usage in Kotlin (also java) #1280 Spurious warnings when a tracking token gap appears then is filled #1193 Query handlers of the same name and response type within one class #719 MultipleInstancesResponseType should recognize handler with single result #602 Rename SpanFactory.registerTagProvider to registerSpanAttributeProvider #2347 [#2341] Adjust type checking in SimpleQueryUpdateEmitter to accompany type erasure #2343 UpdateEmitter drops MultipleInstancesResponseType updates due to type checking. #2341 Parameter resolver ordering is wrong for test fixtures #2340 Take all types into account when resolving the deadline handler #2336 When moving to a polymorphic Aggregate the stored Deadlines are not handled. #2333 [#2331] Fix deserialization bug GrpcBackedSubscriptionQueryMessage and filter non-handler-matching updates #2332 GrpcBackedSubscriptionQueryMessage overwrites update type with initial response type #2331 [#2317] Using deadlines with DefaultConfigurer leads to NPE #2319 Using deadlines with DefaultConfigurer leads to NPE #2317 Fix streaming queries not respecting PriorityTask mechanism #2309 [#2268] Adjust ConditionalOnClass to validate existence of the AxonServerConnectionManager in absence of the axon-server-connector package. #2269 Bug when using Spring actuator starter and excluding axon server #2268 Support Cache and LockFactory configuration on @Aggregate stereotype #2254 Extracted lambdas to inner static classes #2240 Dependency on reactor is needed to be able to start an Axon app using current 4.6.0-SNAPSHOT #2238 Fix snapshots not being deployed to nexus #2237 fix javadoc: default port is 8124, not 8123 #2223 fix typo in local variable name #2218 Publisher Response Type #2215 EventProcessingModule should lazily initialize processors #2180 Fix StreamingEventProcessor#maxCapacity for the TrackingEventProcessor #2124 Restore missing commit 6e531a6cf173243adf9519905f42cbec0a334238 #2116 Wire eventSerializer into QuartzEventSchedulerFactoryBean #2115 Wire the event Serializer into QuartzEventSchedulerFactoryBean #2088 Fix typo in pom.xml #2022 Fix typos #2016 Exponential Retry for Tracking event processor not happening for transient exceptions when using Postgres JdbcTokenStore #1920 We’d like to thank all the contributors who worked on this release! @mnegacz @WackyS @YvonneCeelie @altuntasfatih @saratry @barbeque-squared @srmppn @krosenvold @gklijs @erikhofer @Dilsh0d @smcvb @sandjelkovic @MGathier @dgomezg @Arnaud-J @sascha-eisenmann @Morlack @andye2004 @nils-christian @lfgcampos @heutelbeck @mikelhamer @m1l4n54v1c @Vermorkentech @lacinoire @jangalinski @azzazzel @eddumelendez @timtebeek @sgrimm-sg @dmurat @abuijze @hatzlj @schananas This release has seen numerous addition towards Axon Framework. The most interesting adjustments can be seen down below. Note that the BOM (as marked in #1200) is not part of the release notes, as this will use its own separate release cycle. For those interested, the BOM repository can be found here. For an exhaustive list of all adjustments made for release 4.5 you can check out this page. A new type of EventProcessor has been introduced in pull request #1712, called the PooledStreamingEventProcessor. This EventProcessor allows the same set of operations as the TrackingEventProcessor, but uses a different threading approach for handling events and processing operations. In all, this solution provides a more straightforward processor implementation and configuration, allowing for enhanced event processing in general. For specifics on how to configure it, check out this section. Sagas support the use of Deadline Handlers, but an @DeadlineHandler annotated method couldn’t automatically close a Saga with the @EndSaga annotation. This enhancement has been described in #1469 and resolved in pull request #1656. As such, as of Axon 4.5, an @DeadlineHandler annotated can also be annotated with @EndSaga, to automatically close the Saga whenever the given deadline is handled. Whenever an application uses snapshots, the point arises that old snapshot versions need to be invalidated when loading an Aggregate. To that end the SnapshotFilter can be configured. As a simplified solution, the @Revision annotation can now be placed on the Aggregate class to automatically configure a revision based SnapshotFilter. Due to this, old snapshots will be filtered out automatically when an Aggregate is reconstructed from the EventStore. For those interested, the implementation of this feature can be found here. At the basis of Axon’s message handling functionality, is the MessageHandlingMember. For the time being, the sole implementation of this is the AnnotatedMessageHandlingMember, which expect the use of annotations like the @CommandHandler and @EventHandler, for example. As a step towards constructing an annotation-less approach, #1621 was introduced into the framework. The first steps taken in this pull request are the deprecation of annotation-specific methods from the MessageHandlingMember interface. Added to this is a new approach towards defining attributes of a message handling member through HandlerAttributes. The InMemoryEventStorageEngine is a good fit for testing purposes. However, it included a discrepancy towards the event storing solution compared to other event storage solutions. This issue was addressed in #1056 and resolved in pull request #1660. In issue #1733 a confusion around the EventUtils#asDomainEventMessage was described. This reiterated the fact that this method is purely intended for internal use inside Axon Framework, which was not clear to the users. As such, it has now been deprecated, containing a clear statement why this method is not to be used. Axon Framework can now be used in conjunction with Spring Boot Developer Tools. You can simply achieve this by adding the required dev-tools dependency to your project. As a partial solution to #1106, Axon Server can now be used to schedule events. Building an AxonServerEventScheduler as the EventScheduler implementation as defined through the builder is sufficient to start with scheduling events through Axon Server. An EventTrackerStatusChangeListener can now be configured for a TrackingEventProcessor, as was requested in #1338. It can be configured through the TrackingEventProcessorConfiguration, allowing users to react upon status changes of each thread processing event messages. Component specific message handler interceptors can now be defined through a dedicated annotation: the @MessageHandlerInterceptor annotation. This annotation allows you to introduce a specific bit of logic to be invoked prior to entering the message handling function or after invocation. It for example allows the additional introduction of a @ExceptionHandler annotation, allowing you to specifically deal with the exceptions thrown from your message handlers. The original pull request can be found under #1394. For more specifics on using this annotation, check out the @MessageHandlerInterceptor section. Configuring a Snapshotter and SnapshotFilter have been simplified in this release. Pull request #1447 shares the load of allowing for distinct Snapshotter configuration. Issue #1391 describes the intent to the configuration of snapshot filtering to be performed on Aggregate level. The former can be configured through the Configurer, whereas the latter is by usage of the AggregateConfigurer. The AggregateTestFixture was incorrectly noting an old method in one of its exceptions. This has been marked and resolved in #1428. The CommandValidator and EventValidator had a minor discrepancy; namely, the CommandValidator cleared out contained commands upon starting whereas the EventValidator didn’t. Pull request #1438 resolved the problem at hand. For a full list of all the feature request and enhancements done for release 4.4, you can check out this page. Aggregate Polymorphism has been introduced, allowing for an aggregate hierarchy to come naturally from a domain model. To set this up, the AggregateConfigurer#withSubtypes(Class…​ aggregates) method can be used. In a Spring environment, an aggregate class hierarchy will be detected automatically. For more details on this feature, read up on it here. An Axon application will now shutdown more gracefully than it did in the previous releases. This is achieved by marking specific methods in Axon’s infrastructure components as a @StartHandler or @ShutdownHandler. A 'phase' is required in those, specifying when the method should be executed. If you want to add your own lifecycle handlers, you can either register a component with the aforementioned annotations or register the methods directly through Configurer#onInitialize, Configuration#onStart and Configuration#onShutdown. We have introduced the @CreationPolicy annotation which you can add to @CommandHandler annotated methods in your aggregate. Through this, it is possible to define if such a command handler should 'never', 'always' or 'create' an aggregate 'if-missing'. For further explanation read the Aggregate Command Handler Creation Policy section. Both the XStreamSerializer and JacksonSerializer provide a means to toggle on \"lenient serialization\" through their builders. Various test fixture improvements have been made, such as options to register a HandlerEnhancerDefinition, a ParameterResolverFactory and a ListenerInvocationErrorHandler. Additional validations have been added too, revolving around asserting scheduled events and deadline message. The Test Fixture page has been updated to define these new operations accordingly. The TrackingEventProcessor#processingStatus method as of 4.3 exposes more status information. The current token position, token-at-reset, is-merging and merge-completed position have been added to the set. Read the Event Tracker Status section for more specifics on this. A ConcurrencyException was thrown when an aggregate was created at two distinct JVM’s at the same time. As ConcurrencyException`s are typically retryable, the creation command would be issued again if a `RetryScheduler was in place. Retrying this operation is however useless and hence has been replaced for an AggregateStreamCreationException in pull request #1333. The test fixtures for state-stored aggregates did unintentionally not allow resource injection. This problem has been resolved in pull request #1315. The MultiStreamableMessageSource did not deal well with one or several exceptional streams. Hence exception handling has been improved on this matter in #1325. For a complete list of all the changes made in 4.3 you can check out this page. Axon Framework applications can now use tags to support a level of 'location awareness' between Axon clients and Axon Server instances. This feature is further described here. Axon Server already supported several contexts, but Axon Framework application could not specify to which context message should be dispatched. The Axon Server Connector has been expanded with a TargetContextResolver to allow just this. A new implementation of the StreamablbeMessageSource has been implemented: the MultiStreamableMessageSource. This implementation allows pairing several \"streamable\" message sources into a single source. This can in turn be used to for example read events from several distinct contexts for a single Tracking Event Processor. Handler Execution Exception now allow application specific information to be sent back over the wire in case of a distributed set up. The TrackingToken interface now provides an estimate of it’s relative position in the event stream through the position() method. Optional return types can now be used for Query Handling methods. An Aggregate’s Snapshotter was not auto configured when Spring Boot is being used, as was filed under #932. The CommandResultMessage was returned as null when using the DisruptorCommandBus. This was solved in pull request #1169. The ScopeDescriptor used by the DeadlineManager had serialization issue when a user would migrate from an Axon 3.x application to Axon 4.x. The axon-legacy package has been expanded to contain legacy `ScopeDescriptor`s to resolve this problem. For a full list of all features, enhancements and bugs, check out the issue tracker. The TrackingEventProcessor now has an API to split and merge TrackingTokens during runtime of an application. Axon Server has additions to the UI to split and merge a given Tracking Event Processor’s tokens. Next to Dropwizard metrics the framework now also supports Micrometer metrics. The MessageMonitor interface is used to allow integration with Micrometer. Lastly, we are incredibly thankful that this has been introduced as a community contribution. Primitive types are now supported as @QueryHandler return types. We have introduced the EventGateway in a similar fashion as the CommandGateway and QueryGateway. As with the command and query version, the EventGateway provides a simpler API when it comes to dispatching Events on the EventBus. Command and Query message priority was not set correctly for the Axon Server Connector. This issue has been addressed under bug #1004. The CapacityMonitor was not registered correctly for Event Processor, which user \"Sabartius\" resolved under issue #961. Some exception were not reported correctly and/or clearly when utilizing the Axon Server Connector (issue marked under number #945). We refer to this page for a full list of all the changes. The package structure of Axon Framework has changed drastically with the aim to provide users the option to pick and choose. For example, if only the messaging components of framework are required, one can directly depend on the axon-messaging package. In part with the package restructure, all components which leverage another framework to provide something extra have been given their own repository. These repositories are called the Axon Framework Extensions. The configuration of Event Processor has been replaced and greatly fine tuned with the addition of the EventProcessingConfigurer. Some new defaults have been introduced in release 4.0, like a bias towards expecting a connection with Axon Server. Another important chance is the switch from defaulting to Tracking Processors instead of Subscribing Processors. The notion of a CommandResultMessage has been introduced as a dedicated message towards the result of command handling. To simplify configuration and more easily overcome deprecation, the Builder pattern has been implemented for all infrastructure components. The bugs marked for release 4.0 were issues introduced to new features or enhancements. As such they should not have impacted users in any way. Regardless, the full list can be found here. For more details, check the list of issues here.","title":"Major Releases","component":"axon-framework-reference","version":"4.10","name":"major-releases","url":"/axon-framework-reference/4.10/release-notes/major-releases/","titles":[{"text":"Release 4.10","hash":"_release_4_10","id":1},{"text":"Features","hash":"_features","id":2},{"text":"Enhancements","hash":"_enhancements","id":3},{"text":"Bug fixes","hash":"_bug_fixes","id":4},{"text":"Contributors","hash":"_contributors","id":5},{"text":"Release 4.9","hash":"_release_4_9","id":6},{"text":"Behavioral breaking change","hash":"_behavioral_breaking_change","id":7},{"text":"Features","hash":"_features_2","id":8},{"text":"Enhancements","hash":"_enhancements_2","id":9},{"text":"Bug fixes","hash":"_bug_fixes_2","id":10},{"text":"Contributors","hash":"_contributors_2","id":11},{"text":"Release 4.8","hash":"_release_4_8","id":12},{"text":"Features","hash":"_features_3","id":13},{"text":"Enhancements","hash":"_enhancements_3","id":14},{"text":"Bug fixes","hash":"_bug_fixes_3","id":15},{"text":"Contributors","hash":"_contributors_3","id":16},{"text":"Release 4.7","hash":"_release_4_7","id":17},{"text":"Features","hash":"_features_4","id":18},{"text":"Enhancements","hash":"_enhancements_4","id":19},{"text":"Bug fixes","hash":"_bug_fixes_4","id":20},{"text":"Contributors","hash":"_contributors_4","id":21},{"text":"Release 4.6","hash":"_release_4_6","id":22},{"text":"Features","hash":"_features_5","id":23},{"text":"Enhancements","hash":"_enhancements_5","id":24},{"text":"Bug fixes","hash":"_bug_fixes_5","id":25},{"text":"Contributors","hash":"_contributors_5","id":26},{"text":"Release 4.5","hash":"_release_4_5","id":27},{"text":"Enhancements","hash":"_enhancements_6","id":28},{"text":"Bug fixes","hash":"_bug_fixes_6","id":29},{"text":"Release 4.4","hash":"_release_4_4","id":30},{"text":"Enhancements","hash":"_enhancements_7","id":31},{"text":"Bug fixes","hash":"_bug_fixes_7","id":32},{"text":"Release 4.3","hash":"_release_4_3","id":33},{"text":"Enhancements","hash":"_enhancements_8","id":34},{"text":"Bug fixes","hash":"_bug_fixes_8","id":35},{"text":"Release 4.2","hash":"_release_4_2","id":36},{"text":"Enhancements","hash":"_enhancements_9","id":37},{"text":"Bug fixes","hash":"_bug_fixes_9","id":38},{"text":"Release 4.1","hash":"_release_4_1","id":39},{"text":"Enhancements","hash":"_enhancements_10","id":40},{"text":"Bug fixes","hash":"_bug_fixes_10","id":41},{"text":"Release 4.0","hash":"_release_4_0","id":42},{"text":"Enhancements","hash":"_enhancements_11","id":43},{"text":"Bug fixes","hash":"_bug_fixes_11","id":44}]},"61":{"id":61,"text":"Any patch release made for an Axon project is tailored towards resolving bugs. This page aims to provide a dedicated overview of patch releases per project. [#3123] Introduce SubscriptionQueryResult#handle default implementation that expects a Consumer #3124 Exceptions in QueryHandler methods are swallowed for subscription queries #3123 Reduce the number of property lookups for matching entities #3119 Adjust the AbstractMethodPropertyAccessStrategy to filter better on none-matching methods #3117 Introduce PersistentStreamScheduledExecutorBuilder #3078 Account for contexts call on un-initialized containers #3054 Fix rescheduling of failed Persistent Streams #3130 Allow DLQ to handle deserialization errors #3126 We’d like to thank all the contributors who worked on this release! @smcvb @MGathier @meks77 @abuijze @CodeDrivenMitch @tharoldD Skip jacoco if sonar-enabled is false. #2976 Add additional check for NoToken so we never try to open a stream with it. #2986 Use TransactionManager in the EventProcessorControlService to invoke TokenStore#retrieveStorageIdentifier #2985 Resolve issue with eager gap cleanup #2977 Fix SagaTestFixture use DomainEventMessage #2974 Weird state causing tracking processors to never advance #2958 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @TimoFrye @abuijze Added explicit AutoConfigureBefore and AutoConfigureAfter in JpaAutoConfiguration #2964 Resolved MySQL startup problems in integration tests #2963 Fix Exception on using OpenTelemetry and ScatterGather queries #2960 [#2955] Fix ability to replay when at least one Event Handling Component supports a reset #2957 @DisallowReplay on a single Event Handling Components blocks replay of the entire StreamingEventProcessor #2955 fix: reverse eventBlockListingEnabled value for EventBuffer#disableIg… #2947 We’d like to thank all the contributors who worked on this release! @vitko @abuijze @CptCheesebeard @CodeDrivenMitch Added support for TrackingToken parameter in SagaTestFixture #2917 [#2900] Removed requirement for property to disable AxonServer EventStore and enable another one #2909 Align the TrackingToken assert for JPA, JDBC, and AxonServer #2903 Resolved apparent memory leak in GapAwareTrackingToken #2936 Axon Spring Boot Starter fails to connect to Axon Server on Spring Boot version 3.1.6+ #2914 Integration test should use current Axon version #2908 Behavioral change in 4.9 JpaEventStoreAutoConfiguration #2900 Make the viable name match with the override, the current name can be… #2888 Upgrade Axon Server Connector Java to 2023.2.0 #2913 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @abuijze [#2855] Support Hierarchical Spring Contexts within SpringConfigurer.ComponentLocator #2870 Enhance segment logging for PooledStreamingEventProcessor #2869 ComponentLocator does not resolve beans from Spring Parent Context #2855 [#2844] Improve shutdown behavior for DbSchedulerDeadlineManager #2852 Shutdown-Mechanism of DbSchedulerDeadlineManager #2844 Disable JPA and JDBC EventStorageEngine creation when Axon Server is enabled #2871 [#2845] Ensure ConfigurerModule order is respected in Spring Autoconfiguration #2846 InfraConfiguration.springAxonConfigurer ignores ConfigurerModule.order() #2845 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @abuijze Removed spring-devtools.properties #2820 Add default constructor for the AxonServerContainer #2809 axon-tracing-opentelemetry with Spring Devtools crashes on start #2828 Ensure insert order is maintained for SequencedDeadLetterQueue#deadLetterSequence(String) invocations #2827 Fix inconsistencies around the AxonServerConfiguration #2814 Enable Annotated Message Interceptor support for Command Handling Components #2804 Fix property-based Load Balancing Strategy configuration bug #2802 We’d like to thank all the contributors who worked on this release! @smcvb @abuijze Log when HandlerExecutionException#details are missing and on AbstractRepository failures #2796 Allow Coordinator to extend Token claims as an optimization #2785 Introduce Maven profile to update versions for non-parent POM related module #2638 Enable provisioning a Message with custom MetaData for QueryGateway#streamingQuery #2795 Ensure Aggregate Member Command Handlers are retrievable in complex Aggregate Hierarchy #2794 Aggregate fixture hierarchy behaviour #2792 We’d like to thank all the contributors who worked on this release! @smcvb [#2752] Truncate Cause message to fit default column width #2759 DLQ - PSQLException: ERROR: value too long for type character varying(255) #2752 Synchronize during Event Processor initialization #2756 Duplicate initialization of TrackingEventProcessor worker threads #2751 Fix Initialization of PSEP when using Saga #2736 When registering the same Saga multiple times, only the last one is kept. #2726 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @Morlack Fix autoconfiguration not picking up SpanFactory for AxonServerQueryBus 4.7 #2695 We’d like to thank all the contributors who worked on this release! @Morlack Polymorphic Aggregate auto-configuration test enhancements #2690 AbstractRepository logs warning when aggregate is loaded to process deadline message #2669 Don’t log warn when the aggregate is handling a deadline message. #2644 Use cause from decision #2688 Also include custom aggregate names to resolve deadline handlers #2686 Deadline Handlers are not executed when created and handled within Aggregates with custom type name #2678 Spring AOT fix #2675 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @abuijze @hatzlj Include dependency upgrades with migration #2631 Replace SpringPrototypeAggregateFactory BeanDefinition introspection for direct method invocation #2637 Deprecated fallback warning with Spring 6.0.5 #2630 Fix OpenTelemetry warning #2635 We’d like to thank all the contributors who worked on this release! @smcvb @timtebeek @Morlack Add Migration module with OpenRewrite recipes for AxonFramework 4.7 #2597 Automatic migration recipes to 4.7+ #2596 [#2611] Clarify active UnitOfWork expectation in the Repository #2625 ClassCastException on @ExceptionHandler annotated Aggregate when loading Aggregate manually in an @EventHandler annotated method #2611 Add missing copyright notices and remove duplicate notices #2626 [#2620] Test correlation data population for DeadlineManager implementations #2624 SimpleDeadlineManager does not use CorrelationDataProviders #2620 Fix OpenTelemetry support - 4.7 Edition #2617 refactor: Add ASLv2 license header #2613 [#2604] Ensure given(Object…​) can be followed up by andGivenCurrentTime #2607 AggregateTestFixture.andGivenCurrentTime() should not clear fixture given state #2604 [#2555] Switch to ConcurrentHashMap in Saga related classes #2592 Make the AssociationResolver and SagaMethodMessageHandlerDefinition thread safe. #2591 Make SnapshotFilter a hard requirement #2586 SagaFixtureTests in parallel concurrent mode #2555 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @Morlack @stefanmirkovic @timtebeek Fix not calling shutdown on EmbeddedEventStore in combination with javax #2585 Axon Spring AutoConfiguration binds wrong EventStore (Jakarta/Javax) #2584 We’d like to thank all the contributors who worked on this release! @gklijs Move the check for whether the event processor is caught up before do… #2714 Make registerHandlerInterceptor lazy #2716 Adjust the JavaDoc of the EventProcessorLatencyMonitor #2704 Wait till processing is done until setting the caughtUp flag for the PooledStreamingEventProcessor. #2698 Fix autoconfiguration not picking up SpanFactory for AxonServerQueryBus 4.6 #2696 Pooled Streaming Event Processor incorrectly sets the caughtUp flag #2694 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @Morlack Fix OpenTelemetry warning #2635 We’d like to thank all the contributors who worked on this release! @Morlack Fix OpenTelemetry support on queries #2621 We’d like to thank all the contributors who worked on this release! @Morlack Fix OpenTelemetry support #2612 We’d like to thank all the contributors who worked on this release! @Morlack Ensure retrieved Saga Identifiers collection is thread-safe #2595 We’d like to thank all the contributors who worked on this release! @smcvb Proposed changes to caching saga fix #2532 Allow usage of specific serializers for the JpaDLQ #2486 Ensure default TrackingEventProcessorConfiguration is taken into account for Sagas #2533 Saga Caching Enhancements #2531 Cancel of direct query #2528 [#2514] Fix naming of registered Repository and AggregateFactory beans #2525 Fix caching mechanism for Sagas #2517 Wrong Spring repository bean name when using aggregate polymorphism #2514 SpringAxonAutoConfigurer warns about multiple beans defined for polymorphic aggregates. #2512 Roll back slf4j to major version 1 #2497 DeadLetterQueue uses wrong Serializer to (de)serialize Tokens #2485 Adhere to expected Exception Handler invocation order #2483 [#2481] Check MessageHandlerRegistrar registration to be non-null #2482 NullPointerException on Shutdown without Start #2481 We’d like to thank all the contributors who worked on this release! @smcvb @Morlack @saratry [#2444] Exact class type matcher #2446 Add matcher for exact class type #2444 Update the README.md to guide users better #2470 [#2456] Replace use of unregister for deregister #2466 Prefer 'deregister' to 'unregister' #2456 [#2473] Ensure lifecycle handlers for components declared as Spring beans are invoked #2474 Axon Server event scheduler is never started #2473 Fixes recovering quartz jobs in case of sudden shutdown #2472 [#2464] Set subtypes on SpringPrototypeAggregateFactory #2469 [#2449] Adhere to Spring’s @Order annotation for Message Handling Component registration #2468 Replace IdentifierMissingException in AnnotationCommandTargetResolver for IllegalArgumentException #2465 Commands routed to the parent of polymorphic aggregates cause IncompatibleAggregateException #2464 Fixes the saga list injection bug, issue 2462. #2463 Injecting Lists in Saga no longer works #2462 [#2445] Revert default EventUpcasterChain construction in DefaultConfigurer #2459 CachingSagaStore corrupts Cache entries when using computeIfPresent #2458 [#2454] Reintroduce changes from PR #1905 #2455 Pull request 1905 is missing from master #2454 QuartzDeadlineManager does not recover from failures #2451 Spring @Order seems to be ignored for different event handler components belonging to the same event processor #2449 Fix Cache#computeIfPresent return value in CachingSagaStore #2448 Axon Spring Boot application fails to start when multiple EventUpcasterChain spring beans are defined #2445 Added Spring Resource Injector to Application Context #2441 Add test scope to mysql-connector-java dependency #2436 [#2431] Use XStreamSerializer#defaultSerializer to mitigate XStream exclusion issues #2434 Fix regression for GenericJpaRepository autoconfig #2433 JpaSagaStore cannot be used without XStream #2431 We’d like to thank all the contributors who worked on this release! @gklijs @smcvb @Blackdread @abuijze Added ConditionalOnMissingBean to AutoConfiguration #2414 Add ConditionalOnMissingBean to AxonServerActuatorAutoConfigurationis #2411 Only return unique sequence identifiers in deadLetters call of JPA DLQ #2428 autowiring command model Repository results in NoSuchBeanDefinitionException in 4.6.0 #2426 Deadlines bug #2424 [#1211] Add Cache#computeIfPresent and use in CachingSagaStore for Association Values #2423 Renamed size column name in JdbcTokenStore #2413 [#2393] Move retrieval of Command Handler to the end of the InterceptorChain #2412 JdbcTokenStore uses query that contains reserved word in oracle #2409 [#2389] Make constructors accessible in NoArgumentConstructorCreationPolicyAggregateFactory #2407 Rename index column to sequenceIndex #2401 [#2396] Deadletter logging changes #2398 Dead Letter Queue implementations can leak personal data to log #2396 CommandHandlerInterceptor annotated method in aggregate root doesn’t work when command handling entity not created #2393 [#2382] Disable batch optimization for token-based event reading #2390 Aggregates no longer allow private/protected no-arg constructors #2389 Events are not processed when optimize-event-consumption is disabled #2382 [#2367] Fix Repository beans not being registered to the Spring application context #2370 [#2364] Fix framework failing to start due to a ClassNotFoundException #2369 Fix GA for Slack release announcement #2368 Aggregate org.axonframework.modelling.command.Repository bean not available in Spring context #2367 Event storage engines cannot be used without XStream #2364 Concurrency conflicts in CachingSagaStore #1211 [#2290] TrackingEventProcessor does not wait for his worker threads to shut down #2292 TrackingEventProcessor does not wait for his worker threads to shut down #2290 Improve the concurrent behaviour of the tracking event processor. #2311 Fix a problem where when a shutdown takes places while the worklaunch… #2305 Remove update handler registration on UpdateHandlerRegistration#complete #2300 Canceled subscription query remains active if updates Flux is not subscribed, causing error on emit #2299 Fix duplicate command handler detection. #2298 TrackingEventProcessor cannot be reset immediately after shutdown in rare cases #2293 [#2289] Incorrect warning message in case of shutdown timeout #2291 Incorrect warning message in case of shutdown timeout #2289 Duplicate command handler resolver is triggered in polymorphic aggregates #2243 TrackingEventProcessors shutdown is not working correctly in 4.5.13 #2287 Snapshots are not read with snapshot filter and same serializer for events and snapshots #2286 Snapshots are not considered during loading of an Aggregate using Axon-Server-Connector #2285 Make the shutdown timeout configurable #1981 Pooled Streaming Event Processor configuration enhancement #2276 Introduce mechanism to interrupt TrackingEventProcessor worker threads #2041 Allow lifecycle phase timeout configuration #2037 Retry to initialize the token store correctly on exception for PSEP. #2277 Process events with identical TrackingToken together in the PooledStreamingEventProcessor #2275 PooledStreamingEventProcessor does not Retry if initialization fails #2274 Ensure commands and queries are processed in FIFO order #2263 Commands with same priority are not handled in the correct order #2257 Release announcement on discuss #2256 [#2242] Correctly support null-identifier and no-event scenarios from Command Handling constructors, Always, and Create-If-Missing creation policies #2248 Check attribute filter deep equals #2246 Fix Duplicate command handler resolver is triggered in polymorphic ag… #2245 Duplicate command handler resolver is triggered in polymorphic aggregates #2243 AggregateTestFixture throws AggregateNotFoundException when a command handler with a creation policy applies no events #2242 Axon’s test fixtures perform a \"deep equals\" operation, using reflection as they go. JDK17, rightfully so, does not allow that for all classes. To solve scenarios where users utilize objects from, for example, java.lang, we have introduced a distinct DeepEqualsMatcher in pull request #2210. This matcher implementation considers the situation that an InaccessibleObjectException might be thrown from Axon’s test fixtures, correctly dealing with the scenario by assuming the assertion failed. Contributor fabio-couto noticed a predicament within the PooledStreamingEventProcessor (PSEP for short) when they were facing connectivity issues with their RDBMS. In the face of these issues, the PSEP coordinator is incapable of fetching events, resulting in canceled work packages. As part of canceling, the PSEP actively tries to release token claims, which is yet another database operation. This loop of several connectivity issues causes the PSEP to enter a state it could not recover from. Pull request #2225, provided by fabio-couto, solves this predicament. A fix was introduced to the EventTypeUpcaster to solve issues further down the upcasting chain. Contributor dakr0013 noted that upcaster invoked after an EventTypeUpcaster failed because the expected intermediate event type was adjusted to Object. dakr0013 provided a pull request, which we made some adjustments in PR #2177 to accommodate additional scenarios. You can check out the release notes when you’re looking for an exhaustive list of all the changes. This release brings three adjustments worth mentioning to the framework, namely: Contributor oysteing opened issue #2154, describing that the ReplayStatus enumeration never entered the REPLAY status for a PooledStreamingEventProcessor. We resolved this finding in pull request #2168 by ensuring the TrackingToken carries the replay status as intended. The AggregateTestFixture incorrectly assumed a test succeeded in the absence of an exception when you would use the expectExceptionMessage validation step. We resolved this predicament in pull request #2127. Lastly, we further upgraded the XStream dependency for a CVE in this pull request. This time, for CVE-2021-43859. For an exhaustive list of the changes in 4.5.9, we refer to the release notes. This release brings two adjustments worth mentioning to the framework. Namely: We spotted a bug within the PooledStreamingEventProcessor (PSEP). More specifically, whenever a subset of the tokens for the PSEP existed, calculating the lower bound of a token would cause failures. We addressed this predicament in pull request #2082. We introduce an enhancement in the API of the CommandGateway. You can now directly insert MetaData whenever using the CommandGateway#send or CommandGateway#sendAndWait operations. You can verify the changes #here. This release contains a single fix. Namely, pull request #2067. This pull request solves a bug that had the PooledStreamingEventProcessor not handle new events resulting from an EventMultiUpcaster. The kudos for spotting the bug go to Magnus Heino, which started a discussion on our forum after he noticed the issue. Although Axon Framework doesn’t use the log4j-core dependency directly, we updated it to the most recent version for ease of mind. You can follow these increments in issues #2038, #2040 and #2052. Contributor jasperfect spotted a predicament with duplicate aggregate creation combined with using caches. Axon didn’t invalidate the cache as it should have, causing unexpected behavior. You can find the issue description here. Additionally, you can find the pull request solving the problem here. Contributor shubhojitr stated in issue #2051 that the axonserver-connector-java project pulled in a non-secure version of grpc-netty. As this isn’t an issue on Axon Framework itself, we solved the problem under the connector project. As a follow-up, we incremented the framework’s version for the axonserver-connector-java project to 4.5.4, which contains the most recent version of the grpc-bom. For an exhaustive list of all the changes, check out the 4.5.6 release notes. The auto-configuration we introduced for XStream used a suboptimal approach. We assumed searching for the @ComponentScan would suffice but didn’t consider that Spring enabled SpEL operations in the annotation’s properties. This approach thus caused some applications to break on start-up. As such, this approach is replaced entirely by using the outcome of the AutoConfigurationPackages#get(BeanFactory) method. For those interested in the details of the solution, check out this pull request. Kudos to contributor maverick1601 for drafting issue #1963 explaining the predicament. We introduced an optimization towards updating the TrackingToken. In (distributed) environments where the configuration states several segments per Streaming Processor, there are always threads receiving events that they’re not in charge of due to the configured SequencingPolicy. The old implementation eagerly updated the token in such scenarios, but this didn’t benefit the end-user immediately. Pull request #1999 introduce a wait period for 'event-less-batches', for both the TrackingEventProcessor and PooledStreamingEventProcessor. This adjustment minimizes the number of token updates performed by both processor implementations. The introduction of Spring Boot version 2.6.0 brought an issue to light within Axon’s Spring usage. The AbstractAnnotationHandlerBeanPostProcessor took FactoryBean instances into account when searching for message handling methods. This approach, however, is not recommended by Spring, which they enforced in their latest release. The result was circular dependency exceptions on start-up whenever somebody used Spring Boot 2.6.0. The fix was simple, though, as we should simply ignore FactoryBean instances. After spotting the issue, we resolved it in this pull request. For an exhaustive list of all the changes, check out the 4.5.5 release notes. Firstly, we updated the XStream version to 1.4.18. This upgrade was a requirement since several CVE’s were noted for XStream version 1.4.17. As a consequence of XStream’s solution imposed through the CVE’s, everybody is required to specify the security context of an XStream instance. This change also has an impact on Axon Framework since the XStreamSerializer is the default serializer. So as of this release, any usages of the default XStreamSerializer will come with warnings, stating it is highly recommended to use an XStream instance for which the security context is set through types or wildcards. When your application uses Spring Boot, Axon will default to selecting the secured types based on your @ComponentScan annotated beans (for example, like the @SpringBootApplication annotation). For those interested in the details of the solution, check out this pull request. User 'nils-christian' noted in issue #1892 that Axon executed Upcaster beans in a Spring environment in the incorrect order. This ordering issue was due to a misconception in deducing the @Order annotation on upcaster beans. We resolved the problem in pull request #1895. We noticed a TokenStore operation that Axon did not invoke within a transaction. In most scenarios, this worked out, but when using Micronaut, for example, this (correctly) caused an exception. After spotting the issue, we resolved it in this pull request. For an exhaustive list of all the changes, check out the 4.5.4 release notes. One new feature has been introduced in 4.5.3: the PropertySequencingPolicy by contributor nils-christian. This sequencing policy can be configured to look for a common property in the events. The version of the axonserver-connector-java has been updated to 4.5.2. This update resolves a troublesome issue around permit updates for subscription queries, which exhausted the number of queries an application could have running. For those curious about the solution, pull request 85 addresses this issue. The WorkerLauncher runnable, used by the TrackingEventProcessor to start its threads, was not considered when you shut down a tracking processor. As a consequence, it could start new segment operations while shutdown already completed \"successfully.\" Pull request 1866 resolves this problem, ensuring a tracking processor shuts down as intended. Issue 1853 describes an issue where the creation policy always. Exceptions thrown from within a command handler annotated with @CreationPolicy(ALWAYS) weren’t correctly propagated. Pull request 1854 solves this issue. For an exhaustive list of all the changes, check out the 4.5.3 release notes. Added a missing isReplaying flag on the StreamingEventProcessor. Pull request #1821 reintroduces this functionality in this release. Some enhancements in regards to logging Exceptions and stacktraces when initialization fails. This commit reintroduces this functionality in this release. Improved Axon Framework (AxonServerEventStore) which will now rethrown Exceptions that has a valid Status.Code. Pull request #1842 reintroduces this functionality in this release. General improvements on the PooledStreamingEventProcessor made across several Pull Requests. For a detailed perspective on the release notes, please check this page. Some internals have changed concerning command handling exceptions. Within a single JVM, Axon Framework knows whether the exception is transient or not. This piece of information allows the RetryScheduler to retry a non-transient exception since those are retryable. With the move towards distributed environments, the information whether an exception is transient was lost when we moved to the dedicated CommandHandlingException containing a details object. Pull request #1742 reintroduces this functionality in this release. The new RevisionSnapshotFilter introduced in release 4.5 sneaked in a bug by not validating the aggregate type upon filtering. Pull request #1771 describes and solves the problem by introducing the aggregate type to the RevisionSnapshotFilter. By enabling the CreationPolicy for the DisruptorCommandBus, a timing issue was introduced with handling events. Contributor \"junkdog\" marked the problem in issue #1778, after which pull request #1792 solved it. Contributor \"michaelbub\" noted in issue #1786 that resetting a StreamingEventProcessor to a point in the future reacted differently when no token was stored yet. This followed from the implementation of the ReplayToken, which wrongfully assumed that if the given 'token at reset' was null, the start position should be null too. However, the start position might be the future, and hence it should be used in favor of null. This issue is addressed under this pull request. For a detailed perspective on the release notes, please check this page. Release 4.4.9 of Axon Framework has incremented all used dependencies towards their latest bug release. This has done to resolve potentially security issues, as was reported with XStream 1.4.14 (that was resolved in 1.4.16). For those looking for the set of adjustments please take a look at tag 4.4.9 A bug was noted whenever a query handler returned a Future/CompletableFuture in combination with a subscription query, with Axon Server as the infrastructure. In this format, Axon would incorrectly use the scatter-gather query for the initial result of the subscription query. Whenever the returned result was completed, this didn’t cause any issues. However, for a Future/CompletableFuture a TimeoutException would be thrown. The issue was luckily easily mitigated by changing the \"number of expected results\" from within the QueryRequest to default to 1 instead of zero. As an effect, the point-to-point would be invoked instead of scatter-gather. For reference, the issue can be found here. Whenever an interface is used as the type of an @AggregateMember annotated field, Axon would throw a NullPointerException. This is far from friendly, and has been changed towards an AxonConfigurationException in pull request #1742. Note that the named issues comprise the complete changelist for Axon Framework 4.4.8. The Axon Server Connector Java version 4.4.7 has been included in this release as well. As such, it’s fixes (found here) are thus also part of this release. Contributor \"krosenvold\" noticed that the SQL to retrieve a stream of events was performed twice in quick concession. The provided solution (in pull request #1689) would resolve this, but the problem was spotted to originate elsewhere. Commit 16b7152 saw an end to this occurrence by making a minor tweak in the EmbeddedEventStore. As rightfully noticed by user \"pepperbob\", there was a type discrepancy when reading events through a tracking token. An event would always become a DomainEventMessage when read through the EventStorageEngine, whereas it might originally have been a regular EventMessage. The problem has been fixed in commit c61a95b. Furthermore, the entire description of the issue can be found here. Through the use of the AxonServerQueryBus, a cancelled subscription query was wrongfully completed normally where it should complete exceptionally. This problem is marked and resolved under pull request #1695. For a detailed perspective on the release notes, please check this page. Contributor \"Rafaesp\" noted that a registered CommandHandlerInterceptor in the AggregateTestFixture could be invoked more often than desired. This only occurred if the fixture’s givenCommands(…​) method was invoked, but nonetheless this behaviour was incorrect. The issue is marked under #1665 and resolved in pull request #1666. In 4.4.4, a fix was introduced which ensured a ChildEntity (read, the Aggregate Members) was no longer duplicated in an aggregate hierarchy. This fix had the troublesome side effect that aggregate member command handlers weren’t registered on every level of the aggregate hierarchy anymore. The resolution to this problem can be found in pull request #1674. Using the subscription query in a distributed environment had a possible troublesome side effect. If a consumer of updates was closed for whatever reason, it could also close the producing side. This is obviously undesired, as no single consumer should influence if the producer should still dispatch updates to other consumers. The problem was marked under issue #1680 and resolved in this commit. Right before we aimed to release 4.4.6, contributor \"haraldk\" provided a thorough issue description when using the SequenceEventStorageEngine. He noted that if snapshots were used for an aggregate, there was a window of opportunity that the 'active' EventStorageEngine in the sequencing engine did not return any events. This followed from the sequence number logic, which wrongfully defaulted to position \"0\", even though the starting sequence number is per definition higher if a snapshot has been found. The clarifying issue can be found here, with its resolution present in pull request #1683. For a complete overview of all the changes you can check the release notes here. When creating a TrackingToken at a certain position through StreamableMessageSource#createTokenAt(Instant), a tail token was wrongfully returned if the provided timestamp exceeded the timestamp of the last event. Instead, the token closests to the provided timestamp should be returned, was equals the head token. This discrepancy between documentation and implementation was marked by mbreevoort and resolved in pull request #1607. A certain path within the AxonServerEventStore allowed for event retrieval without correctly deserializing the MetaData of the events. If someone tried to access the MetaData, a CannotConvertBetweenTypesException was being thrown. This problem, among others, was remedied in pull request #1612, by ensuring the correct Serializer taking gRPC message types into account is consistently used. For a complete set of the release notes, please check here. There was a bug which made it so that an @ResetHandler annotated method without any parameters was included for validation if a component could handle a specific type of event. This exact validation is used to filter out events from the event stream to optimize the entire stream. The optimization was thus mitigated by the simple fact of introducing a default @ResetHandler. The problem was marked by @kad-hesseg (for which thanks) and resolved in pull request #1597. A new SnapshotTriggerDefinition called AggregateLoadTimeSnapShotTriggerDefinition has been introduced, which uses the load time of an aggregate to trigger a snapshot creation. When using an aggregate class hierarchy, @AggregateMember annotated fields present on the root would be duplicated for every class in the hierarchy which included message handling functions. This problem was traced back to the AnnotatedAggregateMetaModelFactory.AnnotatedAggregateModel which looped over an inconsistent set of classes to find these members. The issue was marked by @kad-malota and resolved in pull request #1595. For a complete set of the release notes, please check here. An optimization in the snapshotting process was introduced in pull request #1510. This PR ensures no unnecessary snapshots are staged in the AbstractSnapshotter by validating none have been scheduled yet. This fix will resolve potential high I.O. when snapshots are being recreated for aggregates which have a high number of events. The assignment rules used by the EventProcessingConfigurer weren’t always taken into account as desired. This inconsistency compared to regular assignment through the @ProcessingGroup annotation has been resolved in this pull request. Heartbeat messages between Axon Server and an Axon Framework application were already configurable, but only from the server’s side. Properties have been introduced to also enables this from the clients end, as specified further in this pull request. Enabling heartbeat messages will ensure the connection is preemptively closed if no response has been received in the configured time frame. To check out all fixes introduced in 4.4.3, you can check them out on this page. A persistent loop of 500 ms was spotted during event consumption from Axon Server. Credits go to Damir Murat who has spotted the issue. With his help the issue was found quickly and eventually resolved in pull request #1484. A serialization issue was found when working with the ConfigToken and de-/serialize it through the JacksonSerializer. This problem was uncovered in issue #1482 and resolved in pull request #1485. The introduction of the AxonServer Connector for Java to simplify the framework’s integration with Axon Server introduced some configuration issues. For example, the AxonServerConfiguration#isForceReadFromLeader wasn’t used when opening an event stream (resolved in PR #1488). Furthermore, properties like the max-message-size, gRPC keep alive settings and processorNotificationRate weren’t used when forming a connection with Axon Server. This issue was covered by pull request #1487. This page shares a complete list of all resolved issues for this release. A single fix was performed as soon as possible to release 4.4, in conjunction with the new Axon Server Connector used by this release. There was an off by one scenario when an Event Processor started reading events from the beginning of time. This meant that the first event in the event store was systematically skipped. The bug was resolved in this commit. The TrackingEventProcessor#mergeSegment(int) method was invoked with the high segment number of the pair to merge, an error would occur in the process as it expected to receive the lower number on all scenarios. This was resolved in pull request #1450. A small connectivity adjustment which was performed in the AxonServerConnectionManager for bug release 4.3.4 has been reverted. Although it worked successfully for some scenarios, it did not correctly cover all possibilities. The commit can be found here for reference. The full scenario will be covered through the adjusted connector which is underway for beta release in 4.4. For a complete list of all resolved bugs we refer to the issue tracker. Whilst adjusting the JdbcEventStorageEngine in #1187 to allow more flexibility to configure the used statements, we accidentally dropped support for adjusting how the store wrote timestamps. This issue was rectified by user ovstetun in pull request #1454. Snapshots were incorrectly created in the same phase as the publication of events. This has been moved to the after commit phase of the UnitOfWork in issue #1457. When using the SequenceEventStorageEngine to merge an active and historic event stream there was a discrepancy when the active stream didn’t contain any events and the historic stream did. This has been resolved in pull request #1459. For a complete list of all resolved bugs we refer to the issue tracker. This bug release contained a single fix, under pull request #1425. A situation was reported where a Tracking Event Processor did not catch up with the last event, until a new event was available after that event. Effectively causing it to read up to N-1. This only accounted for usages of the MultiStreamableMessageSource, thus when two (or more) event streams were combined into a single source for a TrackingEventProcessor. To remain complete, here is the issue tracker page contained the closed issues for release 4.3.3. When using the QueryGateway, it was not possible to provide a QueryMessage as the query field since the queryName would be derived from the class name of the provided query. Hence, QueryMessage would be the queryName, instead of the actual queryName. This issue has been resolved in #1410. There was a window of opportunity where the Snapshotter would publish the last event in its stream twice. This could cause faulty snapshots in some scenarios. This issue was marked under #1408 and resolved in pull request #1416. The bi-directional stream created by the Axon Server Connector wasn’t always closed correctly; specifically in error cases. This problem has been resolved in pull request 1397. For a complete list of all resolved bugs we refer to the issue tracker. Through the new Create-or-Update feature a bug was introduced which didn’t allow non-String aggregate identifiers. This problem was quickly resolved in #1363, allowing the usage of \"complex\" aggregate identifiers once more. The graceful shutdown process introduced in 4.3 had a couple of minor problems. One of which was the shutdown order within the AxonServerCommandBus and AxonServerQueryBus, which basically made it so that the approach prior to 4.3 was maintained. We also noticed that the AxonServerConnectionManager never shutdown nicely. All of these, plus some other minor fixes, have been performed in #1372. The AggregateCreationPolicy#ALWAYS did not behave as expected, resulting in faulty behaviour when used. Pull request #1371 saw an end to this problem, ensuring the desired usage of all newly introduced creation policies. For a complete list of all resolved bugs we refer to the issue tracker. In a distributed setup, the DisruptorCommandBus was not always correctly identified as being the local segment. Due to this, aggregate repositories weren’t created by the DisruptorCommandBus as is required in such a configuration. This was marked in #874 and resolved through #1287. As described in #1274, a query handler with return type Future was not being returned at all but threw an exception. Pull request #1323 solved that in 4.2.2. An issue was solved where the JdbcAutoConfiguration unintentionally depended on a JPA specific class. For a complete list of all resolved bugs we refer to the issue tracker. A one-to-many Upcaster instance tied to Axon Server would only use the first event result and ignore the rest. This issue has been resolved in pull request #1264. The axon-legacy module’s GapAwareTrackingToken did not implement the TrackingToken interface. This was marked in issue #1230 and resolved in #1231. The builders of the ExponentialBackOffIntervalRetryScheduler and IntervalRetryScheduler previously did not implement the validate() method correctly. Through this a NullPointerException could occur on start-up, as marked in #1293. For a complete list of all resolved bugs we refer to the issue tracker. A dependency on XStream was enforced undesirably through the Builder pattern introduced in 4.0. This has been resolved by using a Supplier of a Serializer in the Builders instead, as described under this issue. Due to a hierarchy issue in the Spring Boot auto configuration, the JdbcTokenStore was not always used as expected. The ordering has been fixed under issue #1077. The ordering of message handling functions was incorrect according to the documentation. Classes take precedence over interface, and the depth of interface hierarchy is calculated based on the inheritance level (as described here). For a complete list of all resolved bugs we refer to the issue tracker. Query Dispatch Interceptors were not called correctly when a subscription query was performed when Axon Server was used as the QueryBus. This issue was marked here and resolved in pull request #1042. When Axon Server was (auto) configured without being able to connect to an actual instance, processing instructions were incorrectly dispatched regardless. Pull request #1040 resolves this by making sure an active connection is present. The Spring Boot auto configuration did not allow the exclusion of the axon-server-connector dependency due to a direct dependency on classes. This has been resolved by expecting fully qualified class names as Strings instead (resolved under this pull request). The JpaEventStorageEngine was not wrapping the appendEvents operation in a transaction. Problem has been resolved under issue #1035. For a complete list of all resolved bugs we refer to the issue tracker. Deserialization failures were accidentally swallowed by the command and query gateway (marked under #967). Resolved an issue where custom exception in a Command Handling constructor caused NullPointerExceptions. For a complete list of all resolved bugs we refer to the issue tracker. The SimpleQueryBus reported exceptions on the initial result incorrectly upon performing a subscription query. Issue has been described and resolved under #913. Resolved issue where the the \"download Axon Server\" message was shown upon a reconnect of an application to a Axon Server node. Large global index gaps between events caused issues when querying the event stream (described here). Fixed inconsistency in the GlobalSequenceTrackingToken#covers(TrackingToken) method. For a complete list of all resolved bugs we refer to the issue tracker. A timeout was thrown instead of a exception by Axon Server when a duplicate aggregate id was created, which is resolved in #903. Command or Query handling exceptions were not properly serialized through Axon Server (resolved in #904). For a complete list of all resolved bugs we refer to the issue tracker. Resolved QueryUpdateEmitter configuration for the Axon Server connector set up (see issue here). For migration purposes legacy TrackingTokens should have been added, which is resolved here. Event Processing was stopped after a reconnection with Axon Server. Resolve the problem in issue #883. For a complete list of all resolved bugs we refer to the issue tracker.","title":"Minor Releases","component":"axon-framework-reference","version":"4.10","name":"minor-releases","url":"/axon-framework-reference/4.10/release-notes/minor-releases/","titles":[{"text":"Release 4.10","hash":"_release_4_10","id":1},{"text":"Release 4.10.1","hash":"_release_4_10_1","id":2},{"text":"Enhancements","hash":"_enhancements","id":3},{"text":"Bug fixes","hash":"_bug_fixes","id":4},{"text":"Contributors","hash":"_contributors","id":5},{"text":"Release 4.9","hash":"_release_4_9","id":6},{"text":"Release 4.9.3","hash":"_release_4_9_3","id":7},{"text":"Enhancements","hash":"_enhancements_2","id":8},{"text":"Bug fixes","hash":"_bug_fixes_2","id":9},{"text":"Contributors","hash":"_contributors_2","id":10},{"text":"Release 4.9.2","hash":"_release_4_9_2","id":11},{"text":"Bug fixes","hash":"_bug_fixes_3","id":12},{"text":"Contributors","hash":"_contributors_3","id":13},{"text":"Release 4.9.1","hash":"_release_4_9_1","id":14},{"text":"Enhancements","hash":"_enhancements_3","id":15},{"text":"Bug fixes","hash":"_bug_fixes_4","id":16},{"text":"Dependency upgrade","hash":"_dependency_upgrade","id":17},{"text":"Contributors","hash":"_contributors_4","id":18},{"text":"Release 4.8","hash":"_release_4_8","id":19},{"text":"Release 4.8.3","hash":"_release_4_8_3","id":20},{"text":"Enhancements","hash":"_enhancements_4","id":21},{"text":"Bug fixes","hash":"_bug_fixes_5","id":22},{"text":"Contributors","hash":"_contributors_5","id":23},{"text":"Release 4.8.2","hash":"_release_4_8_2","id":24},{"text":"Enhancements","hash":"_enhancements_5","id":25},{"text":"Bug fixes","hash":"_bug_fixes_6","id":26},{"text":"Contributors","hash":"_contributors_6","id":27},{"text":"Release 4.8.1","hash":"_release_4_8_1","id":28},{"text":"Enhancements","hash":"_enhancements_6","id":29},{"text":"Bug fixes","hash":"_bug_fixes_7","id":30},{"text":"Contributors","hash":"_contributors_7","id":31},{"text":"Release 4.7","hash":"_release_4_7","id":32},{"text":"Release 4.7.6","hash":"_release_4_7_6","id":33},{"text":"Enhancements","hash":"_enhancements_7","id":34},{"text":"Bug fixes","hash":"_bug_fixes_8","id":35},{"text":"Contributors","hash":"_contributors_8","id":36},{"text":"Release 4.7.5","hash":"_release_4_7_5","id":37},{"text":"Bug fixes","hash":"_bug_fixes_9","id":38},{"text":"Contributors","hash":"_contributors_9","id":39},{"text":"Release 4.7.4","hash":"_release_4_7_4","id":40},{"text":"Enhancements","hash":"_enhancements_8","id":41},{"text":"Bug fixes","hash":"_bug_fixes_10","id":42},{"text":"Contributors","hash":"_contributors_10","id":43},{"text":"Release 4.7.3","hash":"_release_4_7_3","id":44},{"text":"Enhancements","hash":"_enhancements_9","id":45},{"text":"Bug fixes","hash":"_bug_fixes_11","id":46},{"text":"Contributors","hash":"_contributors_11","id":47},{"text":"Release 4.7.2","hash":"_release_4_7_2","id":48},{"text":"Features","hash":"_features","id":49},{"text":"Enhancements","hash":"_enhancements_10","id":50},{"text":"Bug fixes","hash":"_bug_fixes_12","id":51},{"text":"Contributors","hash":"_contributors_12","id":52},{"text":"Release 4.7.1","hash":"_release_4_7_1","id":53},{"text":"Bug fixes","hash":"_bug_fixes_13","id":54},{"text":"Contributors","hash":"_contributors_13","id":55},{"text":"Release 4.6","hash":"_release_4_6","id":56},{"text":"Release 4.6.8","hash":"_release_4_6_8","id":57},{"text":"Enhancements","hash":"_enhancements_11","id":58},{"text":"Bug fixes","hash":"_bug_fixes_14","id":59},{"text":"Contributors","hash":"_contributors_14","id":60},{"text":"Release 4.6.7","hash":"_release_4_6_7","id":61},{"text":"Bug fixes","hash":"_bug_fixes_15","id":62},{"text":"Contributors","hash":"_contributors_15","id":63},{"text":"Release 4.6.6","hash":"_release_4_6_6","id":64},{"text":"Bug fixes","hash":"_bug_fixes_16","id":65},{"text":"Contributors","hash":"_contributors_16","id":66},{"text":"Release 4.6.5","hash":"_release_4_6_5","id":67},{"text":"Bug fixes","hash":"_bug_fixes_17","id":68},{"text":"Contributors","hash":"_contributors_17","id":69},{"text":"Release 4.6.4","hash":"_release_4_6_4","id":70},{"text":"Bug fixes","hash":"_bug_fixes_18","id":71},{"text":"Contributors","hash":"_contributors_18","id":72},{"text":"Release 4.6.3","hash":"_release_4_6_3","id":73},{"text":"Enhancements","hash":"_enhancements_12","id":74},{"text":"Bug fixes","hash":"_bug_fixes_19","id":75},{"text":"Contributors","hash":"_contributors_19","id":76},{"text":"Release 4.6.2","hash":"_release_4_6_2","id":77},{"text":"Features","hash":"_features_2","id":78},{"text":"Enhancements","hash":"_enhancements_13","id":79},{"text":"Bug fixes","hash":"_bug_fixes_20","id":80},{"text":"Contributors","hash":"_contributors_20","id":81},{"text":"Release 4.6.1","hash":"_release_4_6_1","id":82},{"text":"Enhancements","hash":"_enhancements_14","id":83},{"text":"Bug fixes","hash":"_bug_fixes_21","id":84},{"text":"Release 4.5","hash":"_release_4_5","id":85},{"text":"Release 4.5.15","hash":"_release_4_5_15","id":86},{"text":"Enhancements","hash":"_enhancements_15","id":87},{"text":"Bug fixes","hash":"_bug_fixes_22","id":88},{"text":"Release 4.5.14","hash":"_release_4_5_14","id":89},{"text":"Bug fixes","hash":"_bug_fixes_23","id":90},{"text":"Release 4.5.13","hash":"_release_4_5_13","id":91},{"text":"Features","hash":"_features_3","id":92},{"text":"Enhancements","hash":"_enhancements_16","id":93},{"text":"Bug fixes","hash":"_bug_fixes_24","id":94},{"text":"Release 4.5.12","hash":"_release_4_5_12","id":95},{"text":"Bug fixes","hash":"_bug_fixes_25","id":96},{"text":"Release 4.5.11","hash":"_release_4_5_11","id":97},{"text":"Enhancements","hash":"_enhancements_17","id":98},{"text":"Bug fixes","hash":"_bug_fixes_26","id":99},{"text":"Release 4.5.10","hash":"_release_4_5_10","id":100},{"text":"Release 4.5.9","hash":"_release_4_5_9","id":101},{"text":"Release 4.5.8","hash":"_release_4_5_8","id":102},{"text":"Release 4.5.7","hash":"_release_4_5_7","id":103},{"text":"Release 4.5.6","hash":"_release_4_5_6","id":104},{"text":"Release 4.5.5","hash":"_release_4_5_5","id":105},{"text":"Release 4.5.4","hash":"_release_4_5_4","id":106},{"text":"Release 4.5.3","hash":"_release_4_5_3","id":107},{"text":"Release 4.5.2","hash":"_release_4_5_2","id":108},{"text":"Release 4.5.1","hash":"_release_4_5_1","id":109},{"text":"Release 4.4","hash":"_release_4_4","id":110},{"text":"Release 4.4.9","hash":"_release_4_4_9","id":111},{"text":"Release 4.4.8","hash":"_release_4_4_8","id":112},{"text":"Release 4.4.7","hash":"_release_4_4_7","id":113},{"text":"Release 4.4.6","hash":"_release_4_4_6","id":114},{"text":"Release 4.4.5","hash":"_release_4_4_5","id":115},{"text":"Release 4.4.4","hash":"_release_4_4_4","id":116},{"text":"Release 4.4.3","hash":"_release_4_4_3","id":117},{"text":"Release 4.4.2","hash":"_release_4_4_2","id":118},{"text":"Release 4.4.1","hash":"_release_4_4_1","id":119},{"text":"Release 4.3","hash":"_release_4_3","id":120},{"text":"Release 4.3.5","hash":"_release_4_3_5","id":121},{"text":"Release 4.3.4","hash":"_release_4_3_4","id":122},{"text":"Release 4.3.3","hash":"_release_4_3_3","id":123},{"text":"Release 4.3.2","hash":"_release_4_3_2","id":124},{"text":"Release 4.3.1","hash":"_release_4_3_1","id":125},{"text":"Release 4.2","hash":"_release_4_2","id":126},{"text":"Release 4.2.2","hash":"_release_4_2_2","id":127},{"text":"Release 4.2.1","hash":"_release_4_2_1","id":128},{"text":"Release 4.1","hash":"_release_4_1","id":129},{"text":"Release 4.1.2","hash":"_release_4_1_2","id":130},{"text":"Release 4.1.1","hash":"_release_4_1_1","id":131},{"text":"Release 4.0","hash":"_release_4_0","id":132},{"text":"Release 4.0.4","hash":"_release_4_0_4","id":133},{"text":"Release 4.0.3","hash":"_release_4_0_3","id":134},{"text":"Release 4.0.2","hash":"_release_4_0_2","id":135},{"text":"Release 4.0.1","hash":"_release_4_0_1","id":136}]},"62":{"id":62,"text":"When a saga manages a transaction across multiple domain concepts, such as Order, Shipment, Invoice, etc, that saga needs to be associated with instances of those concepts. An association requires two parameters: the key, which identifies the type of association (Order, Shipment, etc) and a value, which represents the identifier of that concept. Associating a saga with a concept is done in several ways. First, when a Saga is newly created when invoking a @StartSaga annotated event handler, it is automatically associated with the property identified in the @SagaEventHandler method. Any other association can be created using the SagaLifecycle.associateWith(String key, String/Number value) method. Use the SagaLifecycle.removeAssociationWith(String key, String/Number value) method to remove a specific association. If you would like to know the associations of the Saga at a certain point you can get all associated values using SagaLifecycle.associationValues(). Note The API to associate domain concepts within a Saga intentionally only allows a String or a Number as the identifying value, since a String representation of the identifier is required for the association value entry which is stored. Using simple identifier values in the API with a straightforward String representation is by design, as a String column entry in the database makes the comparison between database engines simpler. It is intentional that there is no associateWith(String, Object) for example, as the result of an Object#toString() call might provide unwieldy identifiers. Imagine a saga that has been created for a transaction around an Order. The saga is automatically associated with the Order, as the method is annotated with @StartSaga. The saga is responsible for creating an Invoice for that Order, and tell Shipping to create a Shipment for it. Once both the Shipment has arrived and the Invoice has been paid, the transaction is completed and the saga is closed. Here is the code for such a Saga if you use the Spring Boot AutoConfiguration: @Saga public class OrderManagementSaga { private boolean paid = false; private boolean delivered = false; @Inject private transient CommandGateway commandGateway; @StartSaga @SagaEventHandler(associationProperty = \"orderId\") public void handle(OrderCreatedEvent event) { // client generated identifiers ShippingId shipmentId = createShipmentId(); InvoiceId invoiceId = createInvoiceId(); // associate the Saga with these values, before sending the commands SagaLifecycle.associateWith(\"shipmentId\", shipmentId); SagaLifecycle.associateWith(\"invoiceId\", invoiceId); // send the commands commandGateway.send(new PrepareShippingCommand(...)); commandGateway.send(new CreateInvoiceCommand(...)); } @SagaEventHandler(associationProperty = \"shipmentId\") public void handle(ShippingArrivedEvent event) { delivered = true; if (paid) { SagaLifecycle.end(); } } @SagaEventHandler(associationProperty = \"invoiceId\") public void handle(InvoicePaidEvent event) { paid = true; if (delivered) { SagaLifecycle.end(); } } // ... } And here is the same code for when you use the Axon Configuration API: public class OrderManagementSaga { private boolean paid = false; private boolean delivered = false; @Inject private transient CommandGateway commandGateway; @StartSaga @SagaEventHandler(associationProperty = \"orderId\") public void handle(OrderCreatedEvent event) { // client generated identifiers ShippingId shipmentId = createShipmentId(); InvoiceId invoiceId = createInvoiceId(); // associate the Saga with these values, before sending the commands SagaLifecycle.associateWith(\"shipmentId\", shipmentId); SagaLifecycle.associateWith(\"invoiceId\", invoiceId); // send the commands commandGateway.send(new PrepareShippingCommand(...)); commandGateway.send(new CreateInvoiceCommand(...)); } @SagaEventHandler(associationProperty = \"shipmentId\") public void handle(ShippingArrivedEvent event) { delivered = true; if (paid) { SagaLifecycle.end(); } } @SagaEventHandler(associationProperty = \"invoiceId\") public void handle(InvoicePaidEvent event) { paid = true; if (delivered) { SagaLifecycle.end(); } } // ... } By allowing clients to generate an identifier, a saga can be easily associated with a concept, without the need for a request-response type command. We associate the event with these concepts before publishing the command. This way, we are guaranteed to also catch events generated as part of this command. This will end the saga once the invoice is paid and the shipment has arrived.","title":"Associations","component":"axon-framework-reference","version":"4.10","name":"associations","url":"/axon-framework-reference/4.10/sagas/associations/","titles":[]},"63":{"id":63,"text":"A Saga is a special type of event listener: one that manages a business transaction. Some transactions could be running for days or even weeks, while others are completed within a few milliseconds. In Axon, each instance of a Saga is responsible for managing a single business transaction. That means a Saga maintains state necessary to manage that transaction, continuing it or taking compensating actions to roll back any actions already taken. Typically, and contrary to regular event listeners, a saga has a starting point and an end, both triggered by events. While the starting point of a saga is usually clear, there could be many ways for a saga to end. In Axon, sagas are classes that define one or more @SagaEventHandler methods. Unlike regular event handlers, multiple instances of a saga may exist at any time. Sagas are managed by a single event processor (Tracking or Subscribing), which is dedicated to dealing with events for that specific saga type. A single Saga instance is responsible for managing a single transaction. That means you need to be able to indicate the start and end of a saga’s life cycle. In a saga, event handlers are annotated with @SagaEventHandler. If a specific event signifies the start of a transaction, add another annotation to that same method: @StartSaga. This annotation will create a new saga and invoke its event handler method when a matching event is published. By default, a new saga is only started if no suitable existing saga (of the same type) can be found. You can also force the creation of a new saga instance by setting the forceNew property on the @StartSaga annotation to true. Ending a saga can be done in two ways. If a certain event always indicates the end of a saga its life cycle, annotate that event handler on the saga with @EndSaga. The saga its life cycle will be ended after the invocation of the handler. Alternatively, you can call SagaLifecycle.end() from inside the saga to end the life cycle. This allows you to conditionally end the saga. Event handling in a saga is quite comparable to that of a regular event listener. The same rules for method and parameter resolution are valid here. There is one major difference, though. While there is a single instance of an event listener that deals with all incoming events, multiple instances of a saga may exist, each interested in different events. For example, a saga that manages a transaction around an Order with Id \"1\" will not be interested in events regarding Order \"2\", and vice versa. Instead of publishing all events to all saga instances (which would be a complete waste of resources), Axon will only publish events containing properties that the saga has been associated with. This is done using AssociationValue`s. An `AssociationValue consists of a key and a value. The key represents the type of identifier used, for example \"orderId\" or \"order\". The value represents the corresponding value, \"1\" or \"2\" in the previous example. The order in which @SagaEventHandler annotated methods are evaluated is identical to that of @EventHandler methods (see Annotated event handler). A method matches if the parameters of the handler method match the incoming event, and if the saga has an association with the property defined on the handler method. The @SagaEventHandler annotation has two attributes, of which associationProperty is the most important one. This is the name of the property on the incoming event that should be used to find associated sagas. The key of the association value is the name of the property. The value is the value returned by property its getter method. For example, consider an incoming Event with a method String getOrderId(), which returns \"123\". If a method accepting this event is annotated with @SagaEventHandler(associationProperty=\"orderId\"), this Event is routed to all Sagas that have been associated with an AssociationValue with key \"orderId\" and value \"123\". This may either be exactly one, more than one, or even none at all. Sometimes, the name of the property you want to associate with is not the name of the association you want to use. For example, you have a Saga that matches \"Sell orders\" against \"Buy orders\", you could have a transaction object that contains the \"buyOrderId\" and a \"sellOrderId\". If you want the saga to associate the \"sellOrderId\" value as \"orderId\", you can define a different keyName in the @SagaEventHandler annotation. It would then become @SagaEventHandler(associationProperty=\"sellOrderId\", keyName=\"orderId\") Sagas generally do more than just maintaining state based on events. They interact with external components. To do so, they need access to the resources necessary to address to components. Usually, these resources aren’t really part of the saga and its state and these resources should not be persisted as such. However, once a saga is reconstructed, these resources must be injected before an event is routed to that instance. For that purpose, there is the ResourceInjector. It is used by the SagaRepository to inject resources into a saga. Axon provides a SpringResourceInjector, which injects annotated fields and methods with resources from the Application Context. Axon also provides a SimpleResourceInjector, which injects resources that have been registered with it into @Inject annotated methods and fields. Tip Since resources should not be persisted with the saga, make sure to add the transient keyword to those fields. This will prevent the serialization mechanism to attempt to write the contents of these fields to the repository. The repository will automatically re-inject the required resources after a saga has been deserialized. The SimpleResourceInjector allows for a pre-specified collection of resources to be injected. It scans the (setter) methods and fields of a Saga to find ones that are annotated with @Inject. When using the Configuration API, Axon will default to the ConfigurationResourceInjector. It will inject any resource available in the configuration. Components like the EventBus, EventStore, CommandBus and CommandGateway are available by default. You can also register your own components using configurer.registerComponent(). The SpringResourceInjector uses Spring’s dependency injection mechanism to inject resources into a Saga. This means you can use setter injection or direct field injection if you require. The method or field to be injected needs to be annotated in order for Spring to recognize it as a dependency, for example with @Autowired. Events need to be redirected to the appropriate saga instances. To do so, some infrastructure classes are required. The most important components are the SagaManager and the SagaRepository. Like any component that handles events, the processing is done by an Event Processor. However, Sagas are not singleton instances handling events. They have individual life cycles that need to be managed. Axon supports life cycle management through the AnnotatedSagaManager, which is provided to an Event Processor to perform the actual invocation of handlers. It is initialized using the type of the Saga to manage, as well as a SagaRepository where Sagas of that type can be stored and retrieved. A single AnnotatedSagaManager can only manage a single Saga type. The SagaRepository is responsible for storing and retrieving sagas, for use by the SagaManager. It is capable of retrieving specific saga instances by their identifier as well as by their association values. There are some special requirements, however. Since concurrency handling in sagas is a delicate procedure, the repository must ensure that for each conceptual saga instance (with an equal identifier) only a single instance exists in the JVM. Axon provides the AnnotatedSagaRepository implementation, which allows the lookup of saga instances while guaranteeing that only a single instance of the saga may be accessed at the same time. It uses a SagaStore to perform the actual persistence of saga instances. The choice for the implementation to use depends mainly on the storage engine used by the application. Axon provides the JdbcSagaStore, InMemorySagaStore, JpaSagaStore and MongoSagaStore. In some cases, applications benefit from caching saga instances. In that case, there is a CachingSagaStore which wraps another implementation to add caching behavior. Note that the CachingSagaStore is a write-through cache, which means save operations are always immediately forwarded to the backing Store, to ensure data safety. The JpaSagaStore uses JPA to store the state and association values of sagas. Sagas themselves do not need any JPA annotations; Axon will serialize the sagas using a Serializer (similar to event serialization, you can choose between an XStreamSerializer or JacksonSerializer, which can be set by configuring the default Serializer in your application. For more details, see Serializers. The JpaSagaStore is configured with an EntityManagerProvider, which provides access to an EntityManager instance to use. This abstraction allows for the use of both application managed and container managed EntityManager`s. Optionally, you can define the serializer to serialize the Saga instances with. Axon defaults to the `XStreamSerializer. The JdbcSagaStore uses plain JDBC to store stage instances and their association values. Similar to the JpaSagaStore, saga instances do not need to be aware of how they are stored. They are serialized using a serializer. The JdbcSagaStore is initialized with either a DataSource or a ConnectionProvider. While not required, when initializing with a ConnectionProvider, it is recommended to wrap the implementation in a UnitOfWorkAwareConnectionProviderWrapper. It will check the current Unit of Work for an already open database connection, to ensure that all activity within a unit of work is done on a single connection. Unlike JPA, the JdbcSagaRepository uses plain SQL statements to store and retrieve information. This may mean that some operations depend on the database specific SQL dialect. It may also be the case that certain database vendors provide non-standard features that you would like to use. To allow for this, you can provide your own SagaSqlSchema. The SagaSqlSchema is an interface that defines all the operations the repository needs to perform on the underlying database. It allows you to customize the SQL statement executed for each operation. The default is the GenericSagaSqlSchema. Other implementations available are PostgresSagaSqlSchema, Oracle11SagaSqlSchema and HsqlSagaSchema. The MongoSagaStore stores the saga instances and their associations in a MongoDB database. The MongoSagaStore stores all sagas in a single collection in a MongoDB database. For each saga instance, a single document is created. The MongoSagaStore also ensures that at any time, only a single Saga instance exists for any unique Saga in a single JVM. This ensures that no state changes are lost due to concurrency issues. The MongoSagaStore is initialized using a MongoTemplate and optionally a Serializer. The MongoTemplate provides a reference to the collection to store the sagas in. Axon provides the DefaultMongoTemplate, which takes a MongoClient instance as well as the database name and name of the collection to store the sagas in. The database name and collection name may be omitted. In that case, they default to \"axonframework\" and \"sagas\", respectively. If a database backed saga storage is used, saving and loading saga instances may be a relatively expensive operation. In situations where the same saga instance is invoked multiple times within a short time span, a cache can be especially beneficial to the application’s performance. Axon provides the CachingSagaStore implementation. It is a SagaStore that wraps another one, which does the actual storage. When loading sagas or association values, the CachingSagaStore will first consult its caches, before delegating to the wrapped repository. When storing information, all calls are always delegated to ensure that the backing storage always has a consistent view on the saga’s state. To configure caching, simply wrap any SagaStore in a CachingSagaStore. The constructor of the CachingSagaStore takes three parameters: 1. The SagaStore to wrap 2. The cache to use for association values 3. The cache to use for saga instances The latter two arguments may refer to the same cache, or to different ones. This depends on the eviction requirements of your specific application. Although a Saga requires a manager, repository / store and wiring to the right message busses, configuring a Saga is straightforward. When using the Configuration API, Axon will use sensible defaults for most components. As a specific type of Event Handling Component, configuration of a Saga is closely related to the configuration of Event Processors. Due to this, configuring a processor will impact the behaviour of a Saga, albeit on a non-functional level. The configuration of error handling or processor assignment rules, for example, are thus equally valid for Sagas as long as the right processor name is used during configuration. Default Saga Processor name As a Saga is a type of event handler, it is part of an Event Processor. Without defining any assignment rules, a Saga’s processor name equals the Saga name appended with \"Processor\", With a Saga called MySaga, that would mean the processor is called MySagaProcessor. Internally, Axon uses a SagaConfigurer to construct the Saga, Saga Manager, Saga Repository and Saga Store. A default configuration for a Saga called MySaga would look as follows: As a specific type of event handler, registering a Saga is done through the EventProcessingConfigurer: public class AxonConfig { // omitting other configuration methods... void configureMySaga(EventProcessingConfigurer eventProcessingConfigurer) { eventProcessingConfigurer.registerSaga(MySaga.class); } } In a Spring environment, the Saga implementation should be annotated with @Saga to MongoSagaStoreto-configure it: import org.axonframework.spring.stereotype.Saga; @Saga class MySaga { // saga implementation left out... } Although the defaults lead us to a working Saga environment, it is recommended to define the SagaStore to use. The SagaStore represents the mechanism that 'physically' stores the Saga instances, for which it uses the AnnotatedSagaRepository (the default) to store and retrieve Saga instances. If no SagaStore is configured Axon defaults an InMemorySagaStore, thus not persisting the Saga on shutdown. To configure a SagaStore for MySaga consider the following snippet: To define a custom SagaStore, the SagaConfigurer should be used through the EventProcessingConfigurer#registerSaga(Class, Consumer>) method: public class AxonConfig { // omitting other configuration methods... void configureMySaga(EventProcessingConfigurer eventProcessingConfigurer, EntityManagerProvider entityManagerProvider) { eventProcessingConfigurer.registerSaga( MySaga.class, sagaConfigurer -> sagaConfigurer.configureSagaStore( c -> JpaSagaStore.builder() .entityManagerProvider(entityManagerProvider) .build() ) ); } } Alternatively, a default store can be defined through EventProcessingConfigurer#registerSagaStore(Function) method. When Spring Boot is used and JPA or JDBC is on the classpath, then Axon auto-configures a JpaSagaStore or JdbcSagaStore respectively. To provide a custom SagaStore, providing a bean to the application context and defining the bean name on the @Saga annotation suffices: import org.axonframework.spring.stereotype.Saga; @Saga(sagaStore = \"mySagaStore\") public class MySaga { // saga implementation left out... } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public SagaStore mySagaStore(DataSource dataSource) { return JdbcSagaStore.builder() .dataSource(dataSource) .build(); } }","title":"Implementation","component":"axon-framework-reference","version":"4.10","name":"implementation","url":"/axon-framework-reference/4.10/sagas/implementation/","titles":[{"text":"Life cycle","hash":"_life_cycle","id":1},{"text":"Event handling","hash":"_event_handling","id":2},{"text":"Injecting resources","hash":"_injecting_resources","id":3},{"text":"Saga infrastructure","hash":"_saga_infrastructure","id":4},{"text":"Saga manager","hash":"saga-manager","id":5},{"text":"Saga repository and saga store","hash":"saga-repository-and-saga-store","id":6},{"text":"JpaSagaStore","hash":"JpaSagaStore","id":7},{"text":"JdbcSagaStore","hash":"JdbcSagaStore","id":8},{"text":"MongoSagaStore","hash":"MongoSagaStore","id":9},{"text":"Caching","hash":"_caching","id":10},{"text":"Configuring a Saga","hash":"configuring-a-saga","id":11},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":12},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":13},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":14},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":15}]},"64":{"id":64,"text":"The Axon Framework provides first-class support for long running business transactions or Sagas. This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help facilitate Saga development‌. A summary of the various sub-sections is given below. Sub-Section Purpose ​Implementation​ Implementing Sagas using the Axon Framework ​Associations​ Managing Saga associations using the Axon Framework ​Infrastructure​ Non-Functional Development concerns for Sagas using the Axon Framework","title":"Sagas","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/sagas/","titles":[]},"65":{"id":65,"text":"Events need to be redirected to the appropriate saga instances. To do so, some infrastructure classes are required. The most important components are the SagaManager and the SagaRepository. Like any component that handles events, the processing is done by an event processor. However, sagas are not singleton instances handling events. They have individual life cycles which need to be managed. Axon supports life cycle management through the AnnotatedSagaManager, which is provided to an event processor to perform the actual invocation of handlers. It is initialized using the type of the saga to manage, as well as a SagaRepository where sagas of that type can be stored and retrieved. A single AnnotatedSagaManager can only manage a single saga type. When using the Configuration API, Axon will use sensible defaults for most components. However, it is highly recommended to define a SagaStore implementation to use. The SagaStore is the mechanism that 'physically' stores the saga instances somewhere. The AnnotatedSagaRepository (the default) uses the SagaStore to store and retrieve Saga instances as they are required. Configurer configurer = DefaultConfigurer.defaultConfiguration(); configurer.eventProcessing(eventProcessingConfigurer -> eventProcessingConfigurer .registerSaga(MySaga.class, // Axon defaults to an in-memory SagaStore, // defining another is recommended sagaConfigurer -> sagaConfigurer.configureSagaStore(c -> new JpaSagaStore(...)))); // alternatively, it is possible to register a single SagaStore for all Saga types: configurer.registerComponent(SagaStore.class, c -> new JpaSagaStore(...)); @Saga(sagaStore = \"mySagaStore\") public class MySaga {...} ... // somewhere in configuration @Bean public SagaStore mySagaStore() { return new MongoSagaStore(...); // default is JpaSagaStore } The SagaRepository is responsible for storing and retrieving sagas, for use by the SagaManager. It is capable of retrieving specific saga instances by their identifier as well as by their association values. There are some special requirements, however. Since concurrency handling in sagas is a delicate procedure, the repository must ensure that for each conceptual saga instance (with an equal identifier) only a single instance exists in the JVM. Axon provides the AnnotatedSagaRepository implementation, which allows the lookup of saga instances while guaranteeing that only a single instance of the saga may be accessed at the same time. It uses a SagaStore to perform the actual persistence of saga instances. The choice for the implementation to use depends mainly on the storage engine used by the application. Axon provides the JdbcSagaStore, InMemorySagaStore, JpaSagaStore and MongoSagaStore. In some cases, applications benefit from caching saga instances. In that case, there is a CachingSagaStore which wraps another implementation to add caching behavior. Note that the CachingSagaStore is a write-through cache, which means save operations are always immediately forwarded to the backing Store, to ensure data safety. The JpaSagaStore uses JPA to store the state and association values of sagas. Sagas themselves do not need any JPA annotations; Axon will serialize the sagas using a Serializer (similar to event serialization, you can choose between an XStreamSerializer or JacksonSerializer, which can be set by configuring the default Serializer in your application. For more details, see Serializers. The JpaSagaStore is configured with an EntityManagerProvider, which provides access to an EntityManager instance to use. This abstraction allows for the use of both application managed and container managed EntityManager`s. Optionally, you can define the serializer to serialize the Saga instances with. Axon defaults to the `XStreamSerializer. The JdbcSagaStore uses plain JDBC to store stage instances and their association values. Similar to the JpaSagaStore, saga instances do not need to be aware of how they are stored. The store serializes the saga instances using a serializer. You should configure the JdbcSagaStore with either a DataSource or a ConnectionProvider. While not required, when initializing with a ConnectionProvider, it is recommended to wrap the implementation in a UnitOfWorkAwareConnectionProviderWrapper. It will check the current Unit of Work for an already open database connection to ensure that all activity within a unit of work is done on a single connection. Unlike JPA, the JdbcSagaRepository uses plain SQL statements to store and retrieve information. This approach may mean that some operations depend on the database-specific SQL dialect. It may also be that certain database vendors provide non-standard features that you would like to use. To allow for this, you can provide your own SagaSqlSchema. The SagaSqlSchema is an interface that defines all the operations the repository needs to perform on the underlying database. It allows you to customize the SQL statement executed for each operation. The default is the GenericSagaSqlSchema. Other implementations available are PostgresSagaSqlSchema, Oracle11SagaSqlSchema and HsqlSagaSchema. Schema Construction Note that Axon does not create the database schema for you out of the box. Neither when using Spring Boot, for example. To construct the schema, JdbcSagaStore#createSchema should be invoked. By default, this will use the GenericSagaSqlSchema. You can change the schema by configuring a different version through the JdbcSagaStore.Builder. The MongoSagaStore stores the saga instances and their associations in a MongoDB database. The MongoSagaStore stores all sagas in a single collection in a MongoDB database. For each saga instance, a single document is created. The MongoSagaStore also ensures that at any time, only a single Saga instance exists for any unique Saga in a single JVM. This ensures that no state changes are lost due to concurrency issues. The MongoSagaStore is initialized using a MongoTemplate and optionally a Serializer. The MongoTemplate provides a reference to the collection to store the sagas in. Axon provides the DefaultMongoTemplate, which takes a MongoClient instance as well as the database name and name of the collection to store the sagas in. The database name and collection name may be omitted. In that case, they default to \"axonframework\" and \"sagas\", respectively. If a database backed saga storage is used, saving and loading saga instances may be a relatively expensive operation. In situations where the same saga instance is invoked multiple times within a short time span, a cache can be especially beneficial to the application’s performance. Axon provides the CachingSagaStore implementation. It is a SagaStore that wraps another one, which does the actual storage. When loading sagas or association values, the CachingSagaStore will first consult its caches, before delegating to the wrapped repository. When storing information, all calls are always delegated to ensure that the backing storage always has a consistent view on the saga’s state. To configure caching, simply wrap any SagaStore in a CachingSagaStore. The constructor of the CachingSagaStore takes three parameters: 1. The SagaStore to wrap 2. The cache to use for association values 3. The cache to use for saga instances The latter two arguments may refer to the same cache, or to different ones. This depends on the eviction requirements of your specific application.","title":"Infrastructure","component":"axon-framework-reference","version":"4.10","name":"infrastructure","url":"/axon-framework-reference/4.10/sagas/infrastructure/","titles":[{"text":"Saga manager","hash":"_saga_manager","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3},{"text":"Saga repository and saga store","hash":"_saga_repository_and_saga_store","id":4},{"text":"JpaSagaStore","hash":"JpaSagaStore","id":5},{"text":"JdbcSagaStore","hash":"JdbcSagaStore","id":6},{"text":"MongoSagaStore","hash":"MongoSagaStore","id":7},{"text":"Caching","hash":"_caching","id":8}]},"66":{"id":66,"text":"One of the benefits of CQRS, and especially that of event sourcing, is that it is possible to express tests purely in terms of events and commands. Both being functional components, events and commands have clear meaning to the domain expert or business owner. Not only does this mean that tests expressed in terms of events and commands have a clear functional meaning, it also means that they hardly depend on any implementation choices. The features described in this chapter require the axon-test module, which can be obtained by configuring a maven dependency (use axon-test and test) or from the full package download. The fixtures described in this chapter work with any testing framework, such as JUnit and TestNG. The command handling component is typically the component in any CQRS based architecture that contains the most complexity. Being more complex than the others, this also means that there are extra test related requirements for this component. Although being more complex, the API of a command handling component is fairly easy. It has a command coming in, and events going out. In some cases, there might be a query as part of command execution. Other than that, commands and events are the only part of the API. This means that it is possible to completely define a test scenario in terms of events and commands. Typically, in the shape of: Given certain events in the past, When executing this command, Expect these events to be published and/or stored Axon Framework provides a test fixture that allows you to do exactly that. The AggregateTestFixture allows you to configure a certain infrastructure, composed of the necessary command handler and repository, and express your scenario in terms of \"given-when-then\" events and commands. Focus of a Test Fixture Since the unit of testing here is the aggregate, AggregateTestFixture is meant to test one aggregate only. So, all commands in the when (or given) clause are meant to target the aggregate under test fixture. Also, all given and expected events are meant to be triggered from the aggregate under test fixture. The following example shows the usage of the \"given-when-then\" test fixture with JUnit 4 on the GiftCard aggregate (as defined earlier): import org.axonframework.test.aggregate.AggregateTestFixture; import org.axonframework.test.aggregate.FixtureConfiguration; public class GiftCardTest { private FixtureConfiguration fixture; @Before public void setUp() { fixture = new AggregateTestFixture<>(GiftCard.class); } @Test public void testRedeemCardCommand() { fixture.given(new CardIssuedEvent(\"cardId\", 100)) .when(new RedeemCardCommand(\"cardId\", \"transactionId\", 20)) .expectSuccessfulHandlerExecution() .expectEvents(new CardRedeemedEvent(\"cardId\", \"transactionId\", 20)); /* These four lines define the actual scenario and its expected result. The first line defines the events that happened in the past. These events define the state of the aggregate under test. In practical terms, these are the events that the event store returns when an aggregate is loaded. The second line defines the command that we wish to execute against our system. Finally, we have two more methods that define expected behavior. In the example, we use the recommended void return type. The last method defines that we expect a single event as result of the command execution. */ } } Aggregate Lifecycle Extension Alternatively, JUnit 5 users can use StubAggregateLifecycleExtension in order to directly attach to the aggregate lifecycle. This might be useful if you prefer not to use the AggregateTestFixture public class AggregateTest { @RegisterExtension static StubAggregateLifecycleExtension testSubject = new StubAggregateLifecycleExtension(); @Test void test() { apply(new Event(...)); assertEquals(1, testSubject.getAppliedEvents().size()); } } The \"given-when-then\" test fixture defines three stages: configuration, execution and validation. Each of these stages is represented by a different interface: FixtureConfiguration, TestExecutor and ResultValidator, respectively. Fluent Interface To make optimal use of the migration between these stages, it is best to use the fluent interface provided by these methods, as shown in the example above. During the configuration phase (that is, before the first \"given\" is provided), you provide the building blocks required to execute the test. Specialized versions of the event bus, command bus and event store are provided as part of the fixture by default. There are accessor methods in place to obtain references to them. Any command handlers not registered directly on the aggregate need to be explicitly configured using the registerAnnotatedCommandHandler method. Besides an Annotated Command Handler, you can register a wide variety of components and settings that define how the infrastructure around the Aggregate’s test should be set up, consisting out of the following: registerRepository: Registers a custom Aggregate Repository. registerRepositoryProvider: Registers a RepositoryProvider used to spawn new Aggregates. registerAggregateFactory: Registers a custom AggregateFactory. registerAnnotatedCommandHandler: Registers a Annotated Command Handler object that interacts with the aggregate. Use this method to register components containing @CommandHandler annotated methods that invoke the Repository to execute operation on an aggregate. You may end up in such a scenario when you prefer that command handlers and/or command messages are not contained inside the domain model (that is, the aggregate). registerCommandHandler: Registers a MessageHandler of CommandMessage. registerInjectableResource: Registers a resource which can be injected in to message handling members. registerParameterResolverFactory: Registers a ParameterResolverFactory to the test fixture. This method is used to complement the default ParameterResolvers with custom ParameterResolver. registerCommandDispatchInterceptor: Registers a command MessageDispatchInterceptor. registerCommandHandlerInterceptor: Registers a command MessageHandlerInterceptor. registerDeadlineDispatchInterceptor: Registers a DeadlineMessage MessageDispatchInterceptor. registerDeadlineHandlerInterceptor: Registers a DeadlineMessage MessageHandlerInterceptor. registerFieldFilter: Registers a Field filter used when comparing objects in the \"then\" phase. registerIgnoredField: Registers a field that should be ignored for a given class when state equality is performed. registerHandlerDefinition: Registers a custom HandlerDefinition to the test fixture. registerHandlerEnhancerDefinition: Registers a custom HandlerEnhancerDefinition to the test fixture. This method is used to complement the default HandlerEnhancerDefinition with a custom HandlerEnhancerDefinition. registerCommandTargetResolver: Registers a CommandTargetResolver to the test fixture. Once you have configured the fixture, you can start the given phase. Axon’s test fixtures provide several given methods aligning with the modeling options of an aggregate. Below is a list of all the operations of the given phase: givenNoPriorActivity: Start the given phase without any prior activity. Use this method to reflect the initialization of an aggregate. given(Object…​): Use the given method to provide several events to initiate the state of an event-sourced aggregate. May be followed up by invocations of andGiven to separate events of the given phase for readability. The fixture wraps any events given in DomainEventMessages. When the given event implements Message, the fixture will include the payload and metadata of that message in the DomainEventMessage. Otherwise, the fixture uses the given event as the message’s payload. givenCommands(Object ..): Use the givenCommands method to provide several commands to initiate the state of an event-sourced aggregate. When using givenCommands, the fixture uses the events generated by those commands to event source the aggregate. May be followed up by invocations of andGivenCommands to separate commands of the given phase for readability. The fixture wraps any commands given in CommandMessages. When the given commands implement Message, the fixture includes the payload and metadata of that message in the CommandMessage. Otherwise, the fixture uses the given command as the message’s payload. givenCurrentTime(Instant): Use givenCurrenTime to simulate the current time the test fixture initiates testing. The fixture uses the given Instant as the timestamp for generated events in the when-phase. Additionally, the fixtures will use the given current time to validate when to trigger deadlines within the aggregate. givenState(Supplier): Use the givenState method to provide the aggregate instance in its entirety when testing a State-Stored Aggregate. Note that it is not recommended to use this operation when you are testing an event-sourced aggregate. The execution phase, or \"when phase,\" allows you several entry points towards the validation phase. Note that the test fixture only monitors activities that occur during the test execution phase. The fixture does not consider any events or side effects generated during the given phase in the validation phase. Illegal State Change Detection During the execution of the test, Axon attempts to detect any illegal state changes in the aggregate under test. It does so by comparing the aggregate’s state after command execution to the aggregate’s state when event sourced from all given and stored events. If that state is not identical, a state change occurred outside an aggregate’s event handler method. Static and transient fields are ignored in the comparison, as they typically contain references to resources. You can switch detection in the configuration of the fixture with the setReportIllegalStateChange() method. We can separate the execution phase options into roughly three variants: Execute a command, time progresses, and invoking a method on the aggregate. Below is a list of all the operations you can use in the execution phase: when(Object): Using the when method, you can provide a command for the fixture to execute against the aggregate under test. Similar to the given events, if the provided command is of type CommandMessage, the fixture dispatches it as is. The fixture monitors the behavior of the invoked handler (either on the aggregate or as an external handler) and compares it to the expectations you register in the validation phase. when(Object, Map): This when method provides a simpler notation to provide both the command and the metadata. When the given command implements Message, the fixture will combine the command’s metadata with the additional metadata provided separately. whenTimeElapses(Duration): Use whenTimeElapses to simulate time moving on based on the given Duration. You should use this method to validate the behavior around deadlines. whenTimeAdvancesTo(Instant): Use whenTimeAdvancesTo to simulate time moving towards the given Instant. You should use this method to validate the behavior around deadlines. whenConstructing(Callable): This test execution phase operation allows you to invoke the constructor of the aggregate under test. Use this method whenever you (1) do not have @CommandHandler annotations inside the command model and (2) have not registered an external command handler with the fixture. Note that whenConstructing should only ever follow up the givenNoPriorActity operation of the given phase. whenInvoking(String, Consumer): This test execution phase operation allows you to invoke methods of the aggregate under test. The fixture expects you to provide an aggregate identifier matching the given phase’s aggregate identifier. Otherwise, the fixture throws an AssertionError. Use this method whenever you (1) do not have @CommandHandler annotations inside the command model and (2) have not registered an external command handler with the fixture. The last phase is the validation phase, which allows you to check on the activities of the aggregate. This is generally done purely in terms of return values and events. The test fixture allows you to validate return values of your command handlers. You can explicitly define the expected return value, or simply require that the method successfully returned. You may also express any exceptions you expect the CommandHandler to throw. The following methods are available for validating Command Results: fixture.expectSuccessfulHandlerExecution(): Validates that the handler returned a regular response, which was not marked as an exceptional response. The exact response is not evaluated. fixture.expectResultMessagePayload(Object): Validates that the handler returned a successful response, with a payload equal to the given payload. fixture.expectResultMessagePayloadMatching(Matcher): Validates that the handler returned a successful response, with a payload matching the given Matcher fixture.expectResultMessage(CommandResultMessage): Validates that the CommandResultMessage received has equal payload and meta data to that of given message. fixture.expectResultMessageMatching(Matcher): Validates that the CommandResultMessage matches the given Matcher. fixture.expectException(Matcher): Validates that the command handling result is an exceptional result, and that the exception matches the given Matcher. fixture.expectException(Class): Validates that the command handling result is an exceptional result with the given type of exception. fixture.expectExceptionMessage(String): Validates that the command handling result is an exceptional result and the exception message is equal to the given message. fixture.expectExceptionMessage(Matcher): Validates that the command handling result is an exceptional result and the exception message matches the given Matcher. * fixture.expectExceptionDetails(Object): Validates that the command handling result is an exceptional result and the exception details equal the given exception details. fixture.expectExceptionDetails(Class): Validates that the command handling result is an exceptional result with the given type of exception details. fixture.expectExceptionDetails(Matcher): Validates that the command handling result is an exceptional result and the exception details match the given Matcher. The other component is validation of published events. There are two ways of matching expected events. The first is to pass in event instances that need to be literally compared with the actual events. All properties of the expected events are compared (using equals()) with their counterparts in the actual Events. If one of the properties is not equal, the test fails and an extensive error report is generated. The other way of expressing expectancies is using \"Matchers\" (provided by the Hamcrest library). Matcher is an interface prescribing two methods: matches(Object) and describeTo(Description). The first returns a boolean to indicate whether the matcher matches or not. The second allows you to express your expectation. For example, a \"GreaterThanTwoMatcher\" could append \"any event with value greater than two\" to the description. Descriptions allow expressive error messages to be created about why a test case fails. Creating matchers for a list of events can be tedious and error-prone work. To simplify things, Axon provides a set of matchers that allow you to provide a set of event specific matchers and tell Axon how they should match against the list. These matchers are statically available through the abstract Matchers utility class. Below is an overview of the available event list matchers and their purpose: List with all of: Matchers.listWithAllOf(event matchers…​) This matcher will succeed if all of the provided event matchers match against at least one event in the list of actual events. It does not matter whether multiple matchers match against the same event, nor if an event in the list does not match against any of the matchers. List with any of: Matchers.listWithAnyOf(event matchers…​) This matcher will succeed if one or more of the provided event matchers matches against one or more of the events in the actual list of events. Some matchers may not even match at all, while another matches against multiple others. Sequence of Events: Matchers.sequenceOf(event matchers…​) Use this matcher to verify that the actual events are matched in the same order as the provided event matchers. It will succeed if each matcher matches against an event that comes after the event that the previous matcher matched against. This means that \"gaps\" with unmatched events may appear. If, after evaluating the events, more matchers are available, they are all matched against “null”. It is up to the event matchers to decide whether they accept that or not. Exact sequence of Events: Matchers.exactSequenceOf(event matchers…​) Variation of the \"Sequence of Events\" matcher where gaps of unmatched events are not allowed. This means each matcher must match against the event directly following the event the previous matcher matched against. For convenience, a few commonly required event matchers are provided. They match against a single event instance: Equal event: Matchers.equalTo(instance…​) Verifies that the given object is semantically equal to the given event. This matcher will compare all values in the fields of both actual and expected objects using a null-safe equals method. This means that events can be compared, even if they do not implement the equals method. The objects stored in fields of the given parameter are compared using equals, requiring them to implement one correctly. No more events: Matchers.andNoMore() or Matchers.nothing() Only matches against a null value. This matcher can be added as last matcher to the exact sequence of events matchers to ensure that no unmatched events remain. Predicate Matching: Matchers.matches(Predicate) or Matchers.predicate(Predicate) Creates a Matcher that matches with values defined by the specified Predicate. Can be used in case the Predicate API provides a better means to validating the outcome. Since the matchers are passed a list of event messages, you sometimes only want to verify the payload of the message. There are matchers to help you out: Payload matching: Matchers.messageWithPayload(payload matcher) Verifies that the payload of a message matches the given payload matcher. Payloads matching: Matchers.payloadsMatching(list matcher) Verifies that the payloads of the messages matches the given matcher. The given matcher must match against a list containing each of the messages payload. The payloads matching matcher is typically used as the outer matcher to prevent repetition of payload matchers. Below is a small code sample displaying the usage of these matchers. In this example, we expect two events to be published. The first event must be a \"ThirdEvent\", and the second \"aFourthEventWithSomeSpecialThings\". There may be no third event, as that will fail against the \"andNoMore\" matcher. import org.axonframework.test.aggregate.FixtureConfiguration; import static org.axonframework.test.matchers.Matchers.andNoMore; import static org.axonframework.test.matchers.Matchers.equalTo; import static org.axonframework.test.matchers.Matchers.exactSequenceOf; import static org.axonframework.test.matchers.Matchers.messageWithPayload; import static org.axonframework.test.matchers.Matchers.payloadsMatching; class MyCommandModelTest { private FixtureConfiguration fixture; public void testWithMatchers() { fixture.given(new FirstEvent(), new SecondEvent()) .when(new DoSomethingCommand(\"aggregateId\")) .expectEventsMatching(exactSequenceOf( // we can match against the payload only: messageWithPayload(equalTo(new ThirdEvent())), // this will match against a Message aFourthEventWithSomeSpecialThings(), // this will ensure that there are no more events andNoMore() )); // or if we prefer to match on payloads only: .expectEventsMatching(payloadsMatching( exactSequenceOf( // we only have payloads, so we can equalTo directly equalTo(new ThirdEvent()), // now, this matcher matches against the payload too aFourthEventWithSomeSpecialThings(), // this still requires that there is no more events andNoMore() ) )); } } In certain circumstances, it may be desirable to validate the state in which an Aggregate was left after a test. This is especially the case in given-when-then scenario’s where the given represents an initial state as well, as is regular when using a State-Stored Aggregate. The fixture provides a method that allows verification of the state of the aggregate, as it is left after the Execution Phase (for example, the when state), to be validated. fixture.givenState(() -> new GiftCard()) .when(new RedeemCardCommand()) .expectState(state -> { // perform assertions }); The expectState method takes a consumer of the Aggregate type. Use regular assertions provided by your test framework to assert the state of the given Aggregate. Any (Runtime) Exception or Error will fail the test case accordingly. Event-Sourced Aggregate State Validation State validation for testing Event Sourced Aggregates is considered bad practice. Ideally, the state of an Aggregate is completely opaque to the testing code, as only the behavior should be validated. Generally, the desire to validate state is an indication that a certain test scenario is missing from the test suite. The validation phase also provides the option to verify scheduled and met xref:../deadlines/deadline-managers.adoc for a given Aggregate instance. You can expect scheduled deadlines both through a Duration or an Instant, using explicit equals, a Matcher or just a deadline type to verify the deadline message. The following methods are available for validating Deadlines: expectScheduledDeadline(Duration, Object): Explicitly expect a given deadline to be scheduled after the specified Duration. expectScheduledDeadlineMatching(Duration, Matcher): Expect a deadline matching the Matcher to be scheduled after the specified Duration. expectScheduledDeadlineOfType(Duration, Class): Expect a deadline matching the given type to be scheduled after the specified Duration. expectScheduledDeadlineWithName(Duration, String): Expect a deadline matching the given deadline name to be scheduled after the specified Duration. expectScheduledDeadline(Instant, Object): Explicitly expect a given deadline to be scheduled at the specified Instant. expectScheduledDeadlineMatching(Instant, Matcher): Expect a deadline matching the Matcher to be scheduled at the specified Instant. expectScheduledDeadlineOfType(Instant, Class): Expect a deadline matching the given type to be scheduled at the specified Instant. expectScheduledDeadlineWithName(Instant, String): Expect a deadline matching the given deadline name to be scheduled at the specified Instant. expectNoScheduledDeadlines(): Expect that no deadlines are scheduled at all. expectNoScheduledDeadlineMatching(Matcher): Expect no deadline matching the Matcher to be scheduled. expectNoScheduledDeadlineMatching(Duration, Matcher): Expect no deadline matching the Matcher to be scheduled after the specified Duration. expectNoScheduledDeadline(Duration, Object) Explicitly expect no given deadline to be scheduled after the specified Duration.` expectNoScheduledDeadlineOfType(Duration, Class) Expect no deadline matching the given type to be scheduled after the specified Duration.` expectNoScheduledDeadlineWithName(Duration, String) Expect no deadline matching the given deadline name to be scheduled after the specified Duration.` expectNoScheduledDeadlineMatching(Instant, Matcher): Expect no deadline matching the Matcher to be scheduled at the specified Instant. expectNoScheduledDeadline(Instant, Object) Explicitly expect no given deadline to be scheduled at the specified Instant.` expectNoScheduledDeadlineOfType(Instant, Class) Expect no deadline matching the given type to be scheduled at the specified Instant.` expectNoScheduledDeadlineWithName(Instant, String) Expect no deadline matching the given deadline name to be scheduled at the specified Instant.` expectDeadlinesMet(Object…​): Explicitly expect a deadline or several deadlines to have been met. expectDeadlinesMetMatching(Matcher>): Expect a matching deadline or several matching deadlines to have been met.","title":"Commands / Events","component":"axon-framework-reference","version":"4.10","name":"commands-events","url":"/axon-framework-reference/4.10/testing/commands-events/","titles":[{"text":"Command model testing","hash":"_command_model_testing","id":1},{"text":"Test setup","hash":"test-setup","id":2},{"text":"Given phase","hash":"given-phase","id":3},{"text":"Test execution phase","hash":"test-execution-phase","id":4},{"text":"Validation phase","hash":"validation-phase","id":5},{"text":"Validating command result","hash":"_validating_command_result","id":6},{"text":"Validating published events","hash":"_validating_published_events","id":7},{"text":"Validating aggregate state","hash":"_validating_aggregate_state","id":8},{"text":"Validating deadlines","hash":"validating-deadlines","id":9}]},"67":{"id":67,"text":"The Axon Framework provides a complete test module to help unit test your Axon application. This includes capabilities test your Commands/Events and Sagas. This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help facilitate testing.‌ A summary of the various sub-sections is given below. Sub-Section Purpose ​Commands / Events​ Capabilities provided by the Axon Framework to test Commands/Events ​Sagas​ Capabilities provided by the Axon Framework to test Sagas","title":"Testing","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/testing/","titles":[]},"68":{"id":68,"text":"Similar to command handling components, sagas have a clearly defined interface: they only respond to events. On the other hand, sagas often have a notion of time and may interact with other components as part of their event handling process. Axon Framework’s test support module contains fixtures that help you write tests for sagas. Each test fixture contains three phases, similar to those of the command handling component fixture described in the previous section. Given certain events (from certain aggregates), when an event arrives or time elapses, expect certain behavior or state. Both the \"given\" and the \"when\" phases accept events as part of their interaction. During the \"given\" phase, all side effects, such as generated commands are ignored, when possible. During the \"when\" phase, on the other hand, events and commands generated from the saga are recorded and can be verified. The following code sample shows an example of how the fixtures can be used to test a saga that sends a notification if an invoice is not paid within 30 days: FixtureConfiguration fixture = new SagaTestFixture<>(InvoicingSaga.class); fixture.givenAggregate(invoiceId).published(new InvoiceCreatedEvent()) .whenTimeElapses(Duration.ofDays(31)) .expectDispatchedCommandsMatching(Matchers.listWithAllOf(aMarkAsOverdueCommand())); // or, to match against the payload of a Command Message only .expectDispatchedCommandsMatching(Matchers.payloadsMatching(Matchers.listWithAllOf(aMarkAsOverdueCommand()))); Sagas can dispatch commands using a callback to be notified of command processing results. Since there is no actual command handling done in tests, the behavior is defined using a CallbackBehavior object. This object is registered using setCallbackBehavior() on the fixture and defines if and how the callback must be invoked when a command is dispatched. Instead of using a CommandBus directly, you can also use command gateways. See below on how to specify their behavior. Often, sagas will interact with resources. These resources aren’t part of the saga its state, but are injected after a saga is loaded or created. The test fixtures allow you to register resources that need to be injected in the saga. To register a resource, simply invoke the fixture.registerResource(Object) method with the resource as parameter. The fixture will detect appropriate setter methods or fields (annotated with @Inject) on the saga and invoke it with an available resource. Tip It can be useful to inject mock objects (for example, Mockito or Easymock) into your Saga. It allows you to verify that the saga interacts correctly with your external resources. Command gateways provide sagas with an easier way to dispatch Commands. Using a custom command gateway also makes it easier to create a mock or stub to define its behavior in tests. When providing a mock or stub, however, the actual command might not be dispatched, making it impossible to verify the sent commands in the test fixture. Therefore, the fixture provides two methods that allow you to register Command Gateways and optionally a mock defining its behavior: registerCommandGateway(Class) and registerCommandGateway(Class, Object). Both methods return an instance of the given class that represents the gateway to use. This instance is also registered as a resource, to make it eligible for resource injection. When the registerCommandGateway(Class) is used to register a gateway, it dispatches Commands to the CommandBus managed by the fixture. The behavior of the gateway is mostly defined by the CallbackBehavior defined on the fixture. If no explicit CallbackBehavior is provided, callbacks are not invoked, making it impossible to provide any return value for the gateway. When the registerCommandGateway(Class, Object) is used to register a gateway, the second parameter is used to define the behavior of the gateway. The test fixture tries to eliminate elapsing system time where possible. This means that it will appear that no time elapses while the test executes, unless you explicitly state so using whenTimeElapses(). All events will have the timestamp of the moment the test fixture was created. Having the time stopped during the test makes it easier to predict at what time events are scheduled for publication. If your test case verifies that an event is scheduled for publication in 30 seconds, it will remain 30 seconds, regardless of the time taken between actual scheduling and test execution. Note The fixture uses a StubScheduler for time based activity, such as scheduling events and advancing time. Fixtures will set the timestamp of any events sent to the Saga instance to the time of this scheduler. This means time is 'stopped' as soon as the fixture starts, and may be advanced deterministically using the whenTimeAdvanceTo and whenTimeElapses methods. You can also use the StubEventScheduler independently of the test fixtures if you need to test scheduling of events. This EventScheduler implementation allows you to verify which events are scheduled for which time and gives you options to manipulate the progress of time. You can either advance time with a specific Duration, move the clock to a specific date and time or advance time to the next scheduled event. All these operations will return the events scheduled within the progressed interval.","title":"Sagas","component":"axon-framework-reference","version":"4.10","name":"sagas-1","url":"/axon-framework-reference/4.10/testing/sagas-1/","titles":[]},"69":{"id":69,"text":"This page provides specifics around tuning the command processing within an Axon application. As described in the Messaging Concepts page, a command is always routed to a single destination. This means that during the registration of a command handler within a given JVM, a second registration of an identical command handler method should be dealt with in a desirable manner. How an Axon application reacts to such a duplicate registration is defined by the DuplicateCommandHandlerResolver. This resolver is a functional interface ingesting a command name and a registered candidate command handler method; a single command handler method is the return value. By default, the LoggingDuplicateCommandHandlerResolver is used, which will log a warning and returns the candidate handler. To configure the used DuplicateCommandHandlerResolver it is suggested to use the DuplicateCommandHandlerResolution, as this class gives a handle to all provided implementations. To configure the duplicate resolver to, for example, throw a DuplicateCommandHandlerSubscriptionException as a warning, the following approach can be taken: Somewhere in a configuration class: DefaultConfigurer.defaultConfiguration().registerComponent( DuplicateCommandHandlerResolution.class, config -> DuplicateCommandHandlerResolution.rejectDuplicates() ); Somewhere in a configuration class: @Bean public DuplicateCommandHandlerResolver duplicateCommandHandlerResolver() { return DuplicateCommandHandlerResolution.rejectDuplicates(); }","title":"Command Processing","component":"axon-framework-reference","version":"4.10","name":"command-processing","url":"/axon-framework-reference/4.10/tuning/command-processing/","titles":[{"text":"Duplicate command handler registration","hash":"_duplicate_command_handler_registration","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3}]},"70":{"id":70,"text":"Typically, application components contain one or more Event Processors which are responsible for processing incoming events. Tracking Event Processors have configuration aspects that can be changed at runtime to accommodate for changes in the system topology. Tracking Event Processors that handle events in multiple threads use segments to separate the events in the stream across these threads in a reliable way. However, especially when these threads are spread across multiple instances of a component, and the number of instances changes, it may be useful to scale the number of segments accordingly. To this end, Axon Framework provides a split and merge API. This API can be utilized directly via a client configuration or through Axon Server, where the latter takes required coordination into account. The Tracking Event Processors in Axon Framework provide methods to increase or decrease the number of segments for that particular instance. When using this API, one must provide the ID of the segment to increase/decrease. Additionally, the instance on which the method is invoked, must be actively processing that segment. First, the instance of the Tracking Event Processor must be obtained. This can be done using Axon’s Configuration API like so: // The `Configuration` was returned through the `Configurer` or is available as a bean in the Spring Application Context public TrackingEventProcessor retrieveTrackingProcessor(org.axonframework.config.Configuration axonConfig, String processorName) { return axonConfig.eventProcessingConfiguration() .eventProcessor(processorName) // This call returns an Optional .filter(eventProcessor -> eventProcessor instanceof TrackingEventProcessor) .map(eventProcessor -> (TrackingEventProcessor) eventProcessor) .orElseThrow(() -> new IllegalStateException( \"No Tracking Event Processor found with name \" + processorName )); } Using the above snippet, a split or merge can be called as follows: int segmentId; TrackingEventProcessor trackingProcessor = retrieveTrackingProcessor(axonConfig, processorName); // Split... CompletableFuture futureResult = trackingProcessor.splitSegment(segmentId); // Merge... CompletableFuture futureResult = trackingProcessor.mergeSegment(segmentId); Multi instance set up If you have several instances of a given Axon application, that regularly means you have duplicated your Tracking Event Processors. Such a set up is a regular scenario to require segment tuning. Note that, especially, in such a setup you would need to delegate said split or merge to the correct instance. The \"correct instance\", in this case, is the instance owning the segment you want to split and merge. In a heterogeneously distributed application landscape your event handling components might receive events they do not have actual event handling members for. That this occurs is completely fine; the chances of a single application handling the entirety of all existing events is really small. This fact however does open up the possibility for optimization by blacklisting events. To this end Axon has to option to automatically blacklist events it cannot handle. The Tracking Event Processor takes the lead in actual blacklisting, which it does by signaling the utilized event stream when none of its handlers can handle the event in question. The event stream provided by the Axon Server connection in turn implements the functionality to notify an Axon Server node that certain events cannot be handled by it. By default, blacklisting is turned for an Axon client connected to Axon Server. To disable blacklisting, the disableEventBlacklisting property can be adjusted as follows: AxonServerConfiguration axonServerConfig = new AxonServerConfiguration(); axonServerConfig.setDisableEventBlacklisting(true); Configurer configurer = DefaultConfigurer.defaultConfiguration() .registerComponent(AxonServerConfiguration.class, c -> axonServerConfig); axon.axonserver.disableEventBlacklisting=true Retrying Blacklisted Events The topology of Event Handlers might change in the lifecycle of a given application. This thus means that once blacklisted events might at a later stage do have Event Handler members present. To cover this scenario, Axon Server will periodically send over blacklisted events to refresh the blacklisted set.","title":"Event Processing","component":"axon-framework-reference","version":"4.10","name":"event-processing","url":"/axon-framework-reference/4.10/tuning/event-processing/","titles":[{"text":"Increasing and decreasing segment counts","hash":"_increasing_and_decreasing_segment_counts","id":1},{"text":"Segment tuning through Axon Framework","hash":"_segment_tuning_through_axon_framework","id":2},{"text":"Blacklisting events","hash":"_blacklisting_events","id":3},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":4},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":5}]},"71":{"id":71,"text":"When aggregates live for a long time, and their state constantly changes, they will generate a large amount of events. Having to load all these events in to rebuild an aggregate’s state may have a big performance impact. The snapshot event is a domain event with a special purpose: it summarises an arbitrary amount of events into a single one. By regularly creating and storing a snapshot event, the event store does not have to return long lists of events. Just the latest snapshot events and all events that occurred after the snapshot was made. For example, items in stock tend to change quite often. Each time an item is sold, an event reduces the stock by one. Every time a shipment of new items comes in, the stock is incremented by some larger number. If you sell a hundred items each day, you will produce at least 100 events per day. After a few days, your system will spend too much time reading in all these events just to find out whether it should raise an \"ItemOutOfStockEvent\". A single snapshot event could replace a lot of these events, just by storing the current number of items in stock. Snapshot creation can be triggered by a number of factors, for example: the number of events created since the last snapshot, the time to initialize an aggregate exceeds a certain threshold, time-based, etc. Currently, Axon provides a mechanism that allows you to trigger snapshots based on an event count threshold. The definition of when snapshots should be created, is provided by the SnapshotTriggerDefinition interface. The EventCountSnapshotTriggerDefinition provides the mechanism to trigger snapshot creation when the number of events needed to load an aggregate exceeds a certain threshold. If the number of events needed to load an aggregate exceeds a certain configurable threshold, the trigger tells a Snapshotter to create a snapshot for the aggregate. The snapshot trigger is configured on an event sourcing repository and has a number of properties that allow you to tweak triggering: Snapshotter sets the actual snapshotter instance, responsible for creating and storing the actual snapshot event; Trigger sets the threshold at which to trigger snapshot creation; A Snapshotter is responsible for the actual creation of a snapshot. Typically, snapshotting is a process that should disturb the operational processes as little as possible. Therefore, it is recommended to run the snapshotter in a different thread. The Snapshotter interface declares a single method: scheduleSnapshot(), which takes the aggregate’s type and identifier as parameters. Axon provides the AggregateSnapshotter, which creates and stores AggregateSnapshot instances. This is a special type of snapshot, since it contains the actual aggregate instance within it. The repositories provided by Axon are aware of this type of snapshot, and will extract the aggregate from it, instead of instantiating a new one. All events loaded after the snapshot events are streamed to the extracted aggregate instance. Serializing a Snapshot Event Do make sure the Serializer instance you use (which defaults to the XStreamSerializer) is capable of serializing your aggregate. The XStreamSerializer requires you to use either a Hotspot JVM, or your aggregate must either have an accessible default constructor or implement the Serializable interface. The AbstractSnapshotter provides a basic set of properties that allow you to tweak the way snapshots are created: EventStore sets the event store, which is used to load past events and store the snapshots. This event store must implement the SnapshotEventStore interface. Executor sets the executor, such as a ThreadPoolExecutor that will provide the thread to process actual snapshot creation. By default, snapshots are created in the thread that calls the scheduleSnapshot() method, which is generally not recommended for production. The AggregateSnapshotter provides one more property: AggregateFactories is the property that allows you to set the factories that will create instances of your aggregates. Configuring multiple aggregate factories allows you to use a single Snapshotter to create snapshots for a variety of aggregate types. The EventSourcingRepository implementations and the AggregateConfiguration provide access to the AggregateFactory being used for a given Aggregate. Both provide the factory through the EventSourcingRepository#getAggregateFactory and AggregateConfiguration#aggregateFactory methods respectively. The result from either can be used to configure the same aggregate factories in the Snapshotter as the ones used by the Aggregate. Snapshotter Configuration If you use an executor that executes snapshot creation in another thread, make sure you configure the correct transaction management for your underlying event store, if necessary. For both non-Spring and Spring users a default Snapshotter is provided. The former uses the Configuration API to provide a default AggregateSnapshotter, retrieving the aggregate factories from the registered Aggregates / AggregateConfiguration`s. Spring uses a `SpringAggregateSnapshotter, which will automatically looks up the right AggregateFactory instances from the application context when a snapshot needs to be created. The @Revision annotation has a dedicated, automatically configured SnapshotFilter implementation. This implementation is used to filter out non-matching snapshots from the Repository’s loading process. So when the `@Revision annotation is used on an aggregate the snapshots will be filtered out automatically. When the`@Revision` on an aggregate is missing a RevisionSnapshotFilter is configured for revision null. AggregateConfigurer giftCardConfigurer = AggregateConfigurer.defaultConfiguration(GiftCard.class) .configureSnapshotTrigger(config -> new EventCountSnapshotTriggerDefinition( config.snapshotter(), 500 )); Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureAggregate(giftCardConfigurer); It is possible to define a custom SnapshotTriggerDefinition for an aggregate as a Spring bean. In order to tie the SnapshotTriggerDefinition bean to an aggregate, use the snapshotTriggerDefinition attribute on @Aggregate annotation. Listing below shows how to define a custom EventCountSnapshotTriggerDefinition which will take a snapshot every 500 events. Note that a Snapshotter instance, if not explicitly defined as a bean already, will be automatically configured for you. This means you can simply pass the Snapshotter as a parameter to your SnapshotTriggerDefinition. @Bean public SnapshotTriggerDefinition giftCardSnapshotTrigger(Snapshotter snapshotter) { return new EventCountSnapshotTriggerDefinition(snapshotter, 500); } ... @Aggregate(snapshotTriggerDefinition = \"giftCardSnapshotTrigger\") public class GiftCard {...} When a snapshot is stored in the event store, it will automatically use that snapshot to summarize all prior events and return it in their place. All event store implementations allow for concurrent creation of snapshots. This means they allow snapshots to be stored while another process is adding events for the same aggregate. This allows the snapshotting process to run as a separate process altogether. Snapshots as a replacement of your events? Normally, you can archive all events once they are part of a snapshot event. Snapshotted events will never be read in again by the event store in regular operational scenarios. However, if you want to be able to reconstruct an aggregate state prior to the moment the snapshot was created, you must keep the events up to that date. Axon provides a special type of snapshot event: the AggregateSnapshot, which stores an entire aggregate as a snapshot. The motivation is simple: your aggregate should only contain the state relevant to take business decisions. This is exactly the information you want captured in a snapshot. All event sourcing repositories provided by Axon recognize the AggregateSnapshot, and will extract the aggregate from it. Beware that using this snapshot event requires that the event serialization mechanism needs to be able to serialize the aggregate. When enabling snapshotting, several snapshots would be stored per Aggregate instance in the event store. At a certain stage, some of these snapshot events are no longer being used by the application as newer versions took their place. Especially if these snapshot events portray an old format of the aggregate by using the AggregateSnapshot event would it be smart to no longer load these. You could take the stance of dropping all the snapshots which are stored (for a given aggregate type), but this means snapshots will be recreated with a 100% certainty. It is also possible to filter out snapshot events when reading your Aggregate from the event store. To that end, a SnapshotFilter can be defined per Aggregate type or for the entire EventStore. The SnapshotFilter is a functional interface, providing two main operations: allow(DomainEventData /* allow or disallow this snapshotData */; AggregateConfigurer giftCardConfigurer = AggregateConfigurer.defaultConfiguration(GiftCard.class) .configureSnapshotFilter(config -> giftCardSnapshotFilter); Configurer configurer = DefaultConfigurer.defaultConfiguration() .configureAggregate(giftCardConfigurer); It is possible to define a custom SnapshotFilter for an aggregate as a Spring bean. In order to tie the SnapshotFilter bean to an aggregate, use the snapshotFilter attribute on @Aggregate annotation. @Bean public SnapshotFilter giftCardSnapshotFilter() { return snapshotData -> /* allow or disallow this snapshotData */; } ... @Aggregate(snapshotFilter = \"giftCardSnapshotFilter\") public class GiftCard {...} The above snippet would be feasible to follow if fine-grained control is required when filtering snapshots from the store. For example, when your snapshots are not based on the Aggregate class (which is the default). When this is not required, you can base yourself on the default SnapshotFilter - the RevisionSnapshotFilter. To configure this SnapshotFilter, all you have to do is use the @Revision annotation on your Aggregate class. In doing so, the RevisionSnapshotFilter is set, filtering non-matching snapshots from the Repository’s loading process, based on the value maintained within the `@Revision annotation. Through this, with every new production deployment of your application that adjusts the Aggregate state, you would only have to adjust the revision value in the annotation. Check out the following example for how to set this up: // \"1\" is an example revision value. // You're free to choose whatever value that fits your application's versioning scheme. @Revision(\"1\") public class GiftCard { // Omitted aggregate internals for simplicity. } A snapshot event is an event like any other. That means a snapshot event is handled just like any other domain event. When using annotations to demarcate event handlers (@EventHandler), you can annotate a method that initializes full aggregate state based on a snapshot event. The code sample below shows how snapshot events are treated like any other domain event within the aggregate. public class MyAggregate extends AbstractAnnotatedAggregateRoot { // ... @EventHandler protected void handleSomeStateChangeEvent(MyDomainEvent event) { // ... } @EventHandler protected void applySnapshot(MySnapshotEvent event) { // the snapshot event should contain all relevant state this.someState = event.someState; this.otherState = event.otherState; } } There is one type of snapshot event that is treated differently: the AggregateSnapshot. This type of snapshot event contains the actual aggregate. The aggregate factory recognizes this type of event and extracts the aggregate from the snapshot. Then, all other events are re-applied to the extracted snapshot. That means aggregates never need to be able to deal with AggregateSnapshot instances themselves. A well-designed command handling module should pose no problems when implementing caching. Especially when using event sourcing, loading an aggregate from an Event Store can be an expensive operation. With a properly configured cache in place, loading an aggregate can be converted into a pure in-memory process. To that end, Axon allows the configuration of a Cache object. The framework currently provides several implementations to choose from: WeakReferenceCache - An in-memory cache solution. In most scenarios, this is a good start. EhCacheAdapter - An AbstractCacheAdapter, wrapping EhCache into a usable solution for Axon. This can be used with major version 2, and is therefore deprecated. EhCache3Adapter - An AbstractCacheAdapter, wrapping EhCache into a usable solution for Axon. This can be used only with major version 3. Which has a different group name than version 2. JCacheAdapter - An AbstractCacheAdapter, wrapping JCache into a usable solution for Axon. AbstractCacheAdapter - Abstract implementation towards supporting Axon’s Cache API. Helpful in writing an adapter for a cache implementation that Axon does not support out of the box. Before configuring a Cache, please consider the following guidelines. They will help you get the most out of your caching solution: Make sure the unit of work never needs to perform a rollback for functional reasons. A rollback means that an aggregate has reached an invalid state. Axon will automatically invalidate the cache entries involved. The following request will force the aggregate to be reconstructed from its events. If you use exceptions as a potential (functional) return value, you can configure a RollbackConfiguration on your command bus. By default, the configuration will roll back the unit of work on unchecked exceptions for command handlers and on all exceptions for event handlers. All commands for a single aggregate must arrive on the machine with the aggregate in its cache. This requirement means that commands should be consistently routed to the same machine for as long as that machine is \"healthy.\" Routing commands consistently prevents the cache from going stale. A hit on a stale cache will cause a command to be executed and fail when events are stored in the event store. By default, Axon’s distributed command bus components will use consistent hashing to route commands. Configure a sensible time to live / time to idle. By default, caches tend to have a relatively short time to live, a matter of minutes. For a command handling component with consistent routing, a longer time-to-idle and time-to-live is usually better. This setting prevents the need to re-initialize an aggregate based on its events because its cache entry expired. The time-to-live of your cache should match the expected lifetime of your aggregate. Cache data in-memory. For proper optimization, caches should keep data in-memory (and preferably on-heap) for best performance. This approach prevents the need to (re)serialize aggregates when storing to disk and even off-heap. To configure a cache for your Aggregates, consider the following snippet: public class AxonConfig { // omitting other configuration methods... public void configureAggregateWithCache(Configurer configurer) { AggregateConfigurer giftCardConfigurer = AggregateConfigurer.defaultConfiguration(GiftCard.class) .configureCache(config -> new WeakReferenceCache()); configurer.configureAggregate(giftCardConfigurer); } } The Aggregate annotation allows specification of the cache bean: @Aggregate(cache = \"giftCardCache\") public class GiftCard { // state, command handlers and event sourcing handlers... } This approach does require the bean name to be present in the Application Context of course: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public Cache giftCardCache() { return new WeakReferenceCache(); } }","title":"Event Snapshots","component":"axon-framework-reference","version":"4.10","name":"event-snapshots","url":"/axon-framework-reference/4.10/tuning/event-snapshots/","titles":[{"text":"Snapshotting","hash":"_snapshotting","id":1},{"text":"Creating a snapshot","hash":"_creating_a_snapshot","id":2},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":3},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":4},{"text":"Storing snapshot events","hash":"_storing_snapshot_events","id":5},{"text":"Filtering snapshot events","hash":"_filtering_snapshot_events","id":6},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":7},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":8},{"text":"Initializing an aggregate based on a snapshot event","hash":"_initializing_an_aggregate_based_on_a_snapshot_event","id":9},{"text":"Caching","hash":"_caching","id":10},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":11},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":12}]},"72":{"id":72,"text":"The Axon framework provides capabilities to tune the performance for your Axon applications. This includes capabilities to take event snapshots / segment tuning etc…​ This section of the reference guide intends to cover in detail the capabilities that the Axon Framework provides to help tune your Axon applications. A summary of the various sub-sections is given below. Sub-Section Purpose Event Snapshots Axon Framework provided capabilities to create event snapshots for optimizing Aggregate loading Event Processing Axon Framework provided capabilities for tuning batching and parallel processing of events Command Processing Axon Framework provided capabilities for Command message processing","title":"Tuning","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/tuning/","titles":[]},"73":{"id":73,"text":"Regularly, instantiating a new Aggregate is done by issuing a creation command which is handled by a @CommandHandler annotated Aggregate constructor. Such commands could for example be published by a simple REST endpoint or an Event Handling Component as a reaction to a certain event. Sometimes the Domain however describes certain Entities to be created from another Entity. In this scenario it would thus be more faithful to the domain to instantiate an Aggregate from its parent Aggregate. Aggregate-from-Aggregate Use Case The most suitable scenario to create a \"child\" Aggregate from a \"parent\" Aggregate, is when the decision to create the child lies within the context of a parent Aggregate. This can for example manifest itself if the parent Aggregate contains the necessary state which can drive this child-creation decision. Let us assume we have a ParentAggregate, that upon handling a certain command will decide to create an ChildAggregate. To achieve this, ParentAggregate would look something like this: import org.axonframework.commandhandling.CommandHandler; import static org.axonframework.modelling.command.AggregateLifecycle.createNew; public class ParentAggregate { @CommandHandler public void handle(SomeParentCommand command) { createNew( ChildAggregate.class, () -> new ChildAggregate(/* provide required constructor parameters if applicable */) ); } // omitted no-op constructor, event sourcing handlers and other command handlers } The AggregateLifecycle#createNew(Class, Callable) is key to instantiation another Aggregate like our ChildAggregate as a reaction to handling a command. The first parameter to the createNew method is the Class of the Aggregate to be created. The second parameter is the factory method, which expects the outcome to be an object identical to the given type. The ChildAggregate implementation would in this scenario resemble the following format: import static org.axonframework.modelling.command.AggregateLifecycle.apply; public class ChildAggregate { public ChildAggregate(String aggregateId) { apply(new ChildAggregateCreatedEvent(aggregateId)); } // omitted no-op constructor, command and event sourcing handlers } Note that a ChildAggregateCreatedEvent is explicitly applied to notify the ChildAggregate was created, as this knowledge would otherwise be enclosed in the SomeParentCommand command handler of the ParentAggregate. Creating Aggregates from Event Sourcing Handlers? Creation of a new Aggregate should be done in a command handler rather than in an event sourcing handler. The rationale behind this is that you do not want to create new child Aggregates when a parent Aggregate is sourced from its events, as this would undesirably create new child Aggregate instances If the createNew method is however accidentally called within an event sourcing handler, an UnsupportedOperationException will be thrown as stop gap solution.","title":"Aggregate Creation from another Aggregate","component":"axon-framework-reference","version":"4.10","name":"aggregate-creation-from-another-aggregate","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/aggregate-creation-from-another-aggregate/","titles":[{"text":"How to create an aggregate from another aggregate","hash":"_how_to_create_an_aggregate_from_another_aggregate","id":1}]},"74":{"id":74,"text":"In certain cases it is beneficial to have a polymorphic hierarchy in aggregate structure. Subtypes in polymorphic aggregate hierarchy inherit @CommandHandler`s, `@EventSourcingHandler`s and `@CommandHandlerInterceptor`s from the super aggregates. Based on `@AggregateIdentifier the correct aggregate type is loaded and command is executed on it. Let’s take a look at the following example: public abstract class Card {} public class GiftCard extends Card {} public class ClosedLoopGiftCard extends GiftCard {} public class OpenLoopGiftCard extends GiftCard {} public class RechargeableGiftCard extends ClosedLoopGiftCard {} We can define this structure as Polymorphic Aggregate of type GiftCard and subtypes of ClosedLoopGiftCard, OpenLoopGiftCard, and RechargeableGiftCard. If there are handlers present on Card class, those will be present on all aggregates as well. While modeling a polymorphic aggregate hierarchy it is important to keep these constraints in mind: It is not allowed to have a constructor annotated with @CommandHandler on abstract aggregate. The rationale for this is that an abstract aggregate can never be created. Having creational command handlers of the same command name on different aggregates in the same hierarchy is forbidden too, since Axon cannot derive which one to invoke. In a polymorphic aggregate hierarchy it is not allowed to have multiple @AggregateIdentifier and @AggregateVersion annotated fields. A polymorphic aggregate hierarchy can be registered via the AggregateConfigurer by invoking AggregateConfigurer#withSubtypes(Set>). Do note that children of the parent aggregate that you do not register as a subtype will be automatically registered by the framework as a subtype. So, in the following example, the ClosedLoopGiftCard is transitively registered as a subtype of GiftCard. However, if there is a LimitedRechargeableGiftCard extends RechargeableGiftCard defined, the framework will not pick it up automatically since it is not a direct child of the parent aggregate. public class AxonConfig { // omitting other configuration methods... public AggregateConfigurer giftCardConfigurer() { Set> subtypes = new HashSet<>(); subtypes.add(OpenLoopGiftCard.class); subtypes.add(RechargeableGiftCard.class); return AggregateConfigurer.defaultConfiguration(GiftCard.class) .withSubtypes(subtypes); } // ... } class GiftCard { // omitted implementation for brevity } class OpenLoopGiftCard extends GiftCard { // omitted implementation for brevity } class RechargeableGiftCard extends GiftCard { // omitted implementation for brevity } Polymorphic Aggregates in Spring If you are using Spring, Axon will automatically detect polymorphic aggregates based on the @Aggregate annotations and class hierarchy. The @Aggregate annotation needs to be put on the shared parent class that contains the aggregate identifier, as well as every subclass that is a potential instance type of that shared parent class.","title":"Aggregate Polymorphism","component":"axon-framework-reference","version":"4.10","name":"aggregate-polymorphism","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/aggregate-polymorphism/","titles":[{"text":"Registering aggregate subtypes","hash":"_registering_aggregate_subtypes","id":1}]},"75":{"id":75,"text":"Aggregates are an important concept in Domain-Driven Design. They are clusters of related entities and value objects acting as a single unit. They help maintain consistency and encapsulate domain logic within specific boundaries, ensuring changes to one part don’t mess up others. Aggregates are commonly used to model the core business entities in a system based on Domain-Driven Design and CQRS. This chapter will cover the basics on how to implement one in Axon Framework. An Aggregate is a regular Java object, which contains state and methods to alter that state. When creating the Aggregate object, you are effectively creating the 'Aggregate Root', typically carrying the name of the entire Aggregate. For the purpose of this description the 'Gift Card' domain will be used, which brings us the GiftCard as the Aggregate (Root). By default, Axon will configure your Aggregate as an 'Event Sourced' Aggregate. You can read more about Event-Sourcing here. Henceforth, our basic GiftCard Aggregate structure will focus on the Event Sourcing approach: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.eventsourcing.EventSourcingHandler; import org.axonframework.modelling.command.AggregateIdentifier; import static org.axonframework.modelling.command.AggregateLifecycle.apply; public class GiftCard { @AggregateIdentifier // 1. private String id; @CommandHandler // 2. public GiftCard(IssueCardCommand cmd) { // 3. apply(new CardIssuedEvent(cmd.getCardId(), cmd.getAmount())); } @EventSourcingHandler // 4. public void on(CardIssuedEvent evt) { id = evt.getCardId(); } // 5. protected GiftCard() { } // omitted command handlers and event sourcing handlers } There are a couple of noteworthy concepts from the given code snippets, marked with numbered Java comments referring to the following bullets: The @AggregateIdentifier is the external reference point to into the GiftCard Aggregate. This field is a hard requirement, as without it Axon will not know to which Aggregate a given Command is targeted. Note that this annotation can be placed on a field and a method. A @CommandHandler annotated constructor, or differently put the 'command handling constructor'. This annotation tells the framework that the given constructor is capable of handling the IssueCardCommand. The @CommandHandler annotated functions are the place where you would put your decision-making/business logic. The static AggregateLifecycle#apply(Object…​) is what is used when an Event Message should be published. Upon calling this function the provided `Object`s will be published as `EventMessage`s within the scope of the Aggregate they are applied in. Using the @EventSourcingHandler is what tells the framework that the annotated function should be called when the Aggregate is 'sourced from its events'. As all the Event Sourcing Handlers combined will form the Aggregate, this is where all the state changes happen. Note that the Aggregate Identifier must be set in the @EventSourcingHandler of the first Event published by the aggregate. This is usually the creation event. Lastly, @EventSourcingHandler annotated functions are resolved using specific rules. These rules are the same for the @EventHandler annotated methods, and are thoroughly explained in Annotated Event Handler. A no-arg constructor, which is required by Axon. Axon Framework uses this constructor to create an empty aggregate instance before initializing it using past Events. Failure to provide this constructor will result in an exception when loading the Aggregate. Modifiers for Message Handling functions Event Handler methods may be private, as long as the security settings of the JVM allow the Axon Framework to change the accessibility of the method. This allows you to clearly separate the public API of your Aggregate, which exposes the methods that generate events, from the internal logic, which processes the events. Most IDE’s have an option to ignore \"unused private method\" warnings for methods with a specific annotation. Alternatively, you can add an @SuppressWarnings(\"UnusedDeclaration\") annotation to the method to make sure you do not accidentally delete an event handler method. There are a couple of operations which are desirable to be performed whilst in the life cycle of an Aggregate. To that end, the AggregateLifecycle class in Axon provides a couple of static functions: apply(Object) and apply(Object, MetaData): The AggregateLifecycle#apply will publish an Event message on an EventBus such that it is known to have originated from the Aggregate executing the operation. There is the possibility to provide just the Event Object or both the Event and some specific MetaData. createNew(Class, Callable): Instantiate a new Aggregate as a result of handling a Command. Read this for more details on this. isLive(): Check to verify whether the Aggregate is in a 'live' state. An Aggregate is regarded to be 'live' if it has finished replaying historic events to recreate it’s state. If the Aggregate is thus in the process of being event sourced, an AggregateLifecycle.isLive() call would return false. Using this isLive() method, you can perform activity that should only be done when handling newly generated events. markDeleted(): Will mark the Aggregate instance calling the function as being 'deleted'. Useful if the domain specifies a given Aggregate can be removed/deleted/closed, after which it should no longer be allowed to handle any Commands. This function should be called from an @EventSourcingHandler annotated function to ensure that being marked deleted is part of that Aggregate’s state.","title":"Aggregate","component":"axon-framework-reference","version":"4.10","name":"aggregate","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/aggregate/","titles":[{"text":"Basic aggregate structure","hash":"_basic_aggregate_structure","id":1},{"text":"Aggregate lifecycle operations","hash":"_aggregate_lifecycle_operations","id":2}]},"76":{"id":76,"text":"One of the major advantages of being explicit about the meaning of changes, is that you can detect conflicting changes with more precision. Typically, these conflicting changes occur when two users are acting on the same data (nearly) simultaneously. Imagine two users, both looking at a specific version of the data. They both decide to make a change to that data. They will both send a command like \"on version X of this aggregate, do that\", where X is the expected version of the aggregate. One of them will have the changes actually applied to the expected version. The other user won’t. Instead of simply rejecting all incoming commands when aggregates have been modified by another process, you could check whether the user’s intent conflicts with any unseen changes. To detect conflict, pass a parameter of type ConflictResolver to the @CommandHandler method of your aggregate. This interface provides detectConflicts methods that allow you to define the types of events that are considered a conflict when executing that specific type of command. Expected Aggregate Version Note that the ConflictResolver will only contain any potentially conflicting events if the Aggregate was loaded with an expected version. Use @TargetAggregateVersion on a field of a command to indicate the expected version of the Aggregate. If events matching the predicate are found, an exception is thrown (the optional second parameter of detectConflicts allows you to define the exception to throw). If none are found, processing continues as normal. If no invocations to detectConflicts are made, and there are potentially conflicting events, the @CommandHandler will fail. This may be the case when an expected version is provided, but no ConflictResolver is available in the parameters of the @CommandHandler method.","title":"Conflict Resolution","component":"axon-framework-reference","version":"4.10","name":"conflict-resolution","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/conflict-resolution/","titles":[]},"77":{"id":77,"text":"Complex business logic often requires more than what an Aggregate with only an Aggregate Root can provide. In that case, it is important that the complexity is spread over a number of 'Entities' within the aggregate. In this chapter we will discuss the specifics around creating entities in your aggregates and how they can handle message. State among Entities A common misinterpretation of the rule that aggregates should not expose state, is that none of the entities should contain any property accessor methods. This is not the case. In fact, an aggregate will probably benefit a lot if the entities within the aggregate expose state to the other entities in that same aggregate. However, is is recommended not to expose the state outside of the aggregate. Within the 'Gift Card' domain, the GiftCard aggregate root was defined in this section. Let’s leverage this domain to introduce entities: import org.axonframework.modelling.command.AggregateIdentifier; import org.axonframework.modelling.command.AggregateMember; import org.axonframework.modelling.command.EntityId; public class GiftCard { @AggregateIdentifier private String id; @AggregateMember // 1. private List transactions = new ArrayList<>(); private int remainingValue; // omitted constructors, command and event sourcing handlers } public class GiftCardTransaction { @EntityId // 2. private String transactionId; private int transactionValue; private boolean reimbursed = false; public GiftCardTransaction(String transactionId, int transactionValue) { this.transactionId = transactionId; this.transactionValue = transactionValue; } public String getTransactionId() { return transactionId; } // omitted command handlers, event sourcing handlers and equals/hashCode } Entities are, just like the aggregate root, simple objects, as is shown with the new GiftCardTransaction entity. The snippet above shows two important concepts of multi-entity aggregates: The field that declares the child entity/entities must be annotated with @AggregateMember. This annotation tells Axon that the annotated field contains a class that should be inspected for message handlers. This example shows the annotation on an implementation of Iterable, but it can also be placed on a single Object or a Map. In the latter case, the values of the Map are expected to contain the entities, while the key contains a value that is used as their reference. Note that this annotation can be placed on a field and a method. The @EntityId annotation specifying the identifying field of an Entity. Required to be able to route a command (or event) message to the correct entity instance. The property on the payload that will be used to find the entity that the message should be routed to, defaults to the name of the @EntityId annotated field. For example, when annotating the field transactionId, the command must define a property with that same name, which means either a transactionId or a getTransactionId() method must be present. If the name of the field and the routing property differ, you may provide a value explicitly using @EntityId(routingKey = \"customRoutingProperty\"). This annotation is mandatory on the Entity implementation if it will be part of a Collection or Map of child entities. Note that this annotation can be placed on a field and a method. Defining the Entity type The field declaration for both the Collection or Map should contain proper generics to allow Axon to identify the type of Entity contained in the collection or map. If it is not possible to add the generics in the declaration (for example, because you’re using a custom implementation which already defines generic types), you must specify the entity type by specifying the type field in the @AggregateMember annotation: @AggregateMember(type = GiftCardTransaction.class) @CommandHandler annotations are not limited to the aggregate root. Placing all command handlers in the root will sometimes lead to a large number of methods on the aggregate root, while many of them simply forward the invocation to one of the underlying entities. If that is the case, you may place the @CommandHandler annotation on one of the underlying entities' methods. For Axon to find these annotated methods, the field declaring the entity in the aggregate root must be marked with @AggregateMember: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.modelling.command.AggregateIdentifier; import org.axonframework.modelling.command.AggregateMember; import org.axonframework.modelling.command.EntityId; import static org.axonframework.modelling.command.AggregateLifecycle.apply; public class GiftCard { @AggregateIdentifier private String id; @AggregateMember private List transactions = new ArrayList<>(); private int remainingValue; // omitted constructors, command and event sourcing handlers } public class GiftCardTransaction { @EntityId private String transactionId; private int transactionValue; private boolean reimbursed = false; public GiftCardTransaction(String transactionId, int transactionValue) { this.transactionId = transactionId; this.transactionValue = transactionValue; } @CommandHandler public void handle(ReimburseCardCommand cmd) { if (reimbursed) { throw new IllegalStateException(\"Transaction already reimbursed\"); } apply(new CardReimbursedEvent(cmd.getCardId(), transactionId, transactionValue)); } // omitted getter, event sourcing handler and equals/hashCode } Note that only the declared type of the annotated field is inspected for command handlers. If a field value is null at the time an incoming command arrives for that entity, an exception is thrown. If there is a Collection or Map of child entities and none entity can be found which matches the routing key of the command, Axon throws an IllegalStateException as apparently the aggregate is not capable of processing the command at that point in time. Command Handler considerations Note that each command must have exactly one handler in the aggregate. This means that you cannot annotate multiple entities (either root nor not) with @CommandHandler which handle the same command type. In case you need to conditionally route a command to an entity, the parent of these entities should handle the command, and forward it based on the conditions that apply. The runtime type of the field does not have to be exactly the declared type. However, only the declared type of the @AggregateMember annotated field is inspected for @CommandHandler methods. When using event sourcing as the mechanism to store the aggregates, not only the aggregate root needs to use events to trigger state transitions, but so does each of the entities within that aggregate. Axon provides support for event sourcing complex aggregate structures like these out of the box. When an entity (including the aggregate root) applies an event, it is handled by the aggregate root first, and then bubbles down through every @AggregateMember annotated field to all its containing child entities: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.modelling.command.AggregateIdentifier; import org.axonframework.modelling.command.AggregateMember; import org.axonframework.modelling.command.EntityId; import static org.axonframework.modelling.command.AggregateLifecycle.apply; public class GiftCard { @AggregateIdentifier private String id; @AggregateMember private List transactions = new ArrayList<>(); @CommandHandler public void handle(RedeemCardCommand cmd) { // Some decision making logic apply(new CardRedeemedEvent(id, cmd.getTransactionId(), cmd.getAmount())); } @EventSourcingHandler public void on(CardRedeemedEvent evt) { // 1. transactions.add(new GiftCardTransaction(evt.getTransactionId(), evt.getAmount())); } // omitted constructors, command and event sourcing handlers } public class GiftCardTransaction { @EntityId private String transactionId; private int transactionValue; private boolean reimbursed = false; public GiftCardTransaction(String transactionId, int transactionValue) { this.transactionId = transactionId; this.transactionValue = transactionValue; } @CommandHandler public void handle(ReimburseCardCommand cmd) { if (reimbursed) { throw new IllegalStateException(\"Transaction already reimbursed\"); } apply(new CardReimbursedEvent(cmd.getCardId(), transactionId, transactionValue)); } @EventSourcingHandler public void on(CardReimbursedEvent event) { // 2. if (transactionId.equals(event.getTransactionId())) { reimbursed = true; } } // omitted getter and equals/hashCode } Two specifics are worth mentioning from the above snippet, pointed out with numbered Java comments: The creation of the Entity takes place in an event sourcing handler of its parent. It is thus not possible to have a 'command handling constructor' on the entity class as with the aggregate root. The event sourcing handler in the entity performs a validation check whether the received event actually belongs to the entity. This is necessary as events applied by one entity instance will also be handled by any other entity instance of the same type. The situation described in bullet point two is customizable, by changing the eventForwardingMode on the @AggregateMember annotation: import org.axonframework.modelling.command.AggregateIdentifier; import org.axonframework.modelling.command.AggregateMember; import org.axonframework.modelling.command.ForwardMatchingInstances; public class GiftCard { @AggregateIdentifier private String id; @AggregateMember(eventForwardingMode = ForwardMatchingInstances.class) private List transactions = new ArrayList<>(); // omitted constructors, command and event sourcing handlers } By setting the eventForwardingMode to ForwardMatchingInstances an Event Message will only be forwarded if it contains a field/getter which matches the name of the @EntityId annotated field on the entity. This routing behaviour can be further specified with the routingKey field on the @EntityId annotation, mirroring that of routing commands in entities. Other forwarding modes which can be used are ForwardAll (the default) and ForwardNone, which respectively forward all events to all entities or no events at all.","title":"Multi-Entity Aggregates","component":"axon-framework-reference","version":"4.10","name":"multi-entity-aggregates","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/multi-entity-aggregates/","titles":[{"text":"Command handling in entities","hash":"_command_handling_in_entities","id":1},{"text":"Event Sourcing handlers in entities","hash":"_event_sourcing_handlers_in_entities","id":2}]},"78":{"id":78,"text":"In the Aggregate main page we have seen how to create an Aggregate backed by Event Sourcing. In other words, the storage method for an Event Sourced Aggregate is by replaying the events which constitute the changes on the Aggregate. An Aggregate can however be stored as-is too. When doing so, the Repository used to save and load the Aggregate, is the GenericJpaRepository. The structure of a state-stored Aggregate is a little different from an Event Sourced Aggregate: import org.axonframework.commandhandling.CommandHandler; import org.axonframework.eventhandling.EventHandler; import org.axonframework.modelling.command.AggregateIdentifier; import org.axonframework.modelling.command.AggregateMember; import jakarta.persistence.CascadeType; import jakarta.persistence.Entity; import jakarta.persistence.FetchType; import jakarta.persistence.Id; import jakarta.persistence.JoinColumn; import jakarta.persistence.OneToMany; @Entity // 1. public class GiftCard { @Id // 2. @AggregateIdentifier private String id; // 3. @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL) @JoinColumn(name = \"giftCardId\") @AggregateMember private List transactions = new ArrayList<>(); private int remainingValue; @CommandHandler // 4. public GiftCard(IssueCardCommand cmd) { if (cmd.getAmount() remainingValue) { throw new IllegalStateException(\"amount > remaining value\"); } if (transactions.stream().map(GiftCardTransaction::getTransactionId).anyMatch(cmd.getTransactionId()::equals)) { throw new IllegalStateException(\"TransactionId must be unique\"); } // 7. remainingValue -= cmd.getAmount(); transactions.add(new GiftCardTransaction(id, cmd.getTransactionId(), cmd.getAmount())); apply(new CardRedeemedEvent(id, cmd.getTransactionId(), cmd.getAmount())); } @EventHandler // 8. protected void on(CardReimbursedEvent event) { this.remainingValue += event.getAmount(); } protected GiftCard() { } // 9. } The above exert shows an state stored Aggregate from a 'Gift Card Service'. The numbered comments in the snippet point out Axon specifics which are explained here: As the Aggregate is stored in a JPA repository, it is required to annotated the class with @Entity. An Aggregate Root must declare a field that contains the Aggregate Identifier. This identifier must be initialized at the latest when the first event is published. This identifier field must be annotated by the @AggregateIdentifier annotation. When using JPA to store the Aggregate, Axon knows to use the @Id annotation provided by JPA. Since the Aggregate is an entity, the @Id annotation is a hard requirement. This Aggregate has several 'Aggregate Members'. Since the Aggregate is stored as is, the correct mapping of the entities should be taken into account. A @CommandHandler annotated constructor, or differently put the 'command handling constructor'. This annotation tells the framework that the given constructor is capable of handling the IssueCardCommand. The static AggregateLifecycle#apply(Object…​) may be used to publish an Event Message. Upon calling this function the provided `Object`s will be published as `EventMessage`s within the scope of the Aggregate they are applied in. The Command Handling method will first decide whether the incoming Command is valid to handle at this point. After the business logic has been validated, the state of the Aggregate may be adjusted Entities within an Aggregate can listen to the events the Aggregate publishes, by defining an @EventHandler annotated method. These methods will be invoked when an Event Message is published prior to being handled by any external handlers. A no-arg constructor, which is required by JPA. Failure to provide this constructor will result in an exception when loading the Aggregate. Adjusting state in Command Handlers Differently from Event Sourced Aggregates, State-Stored Aggregates can pair the decission making logic and state changes in a Command Handler. There are no consequences for State-Stored Aggregates in following this paradigm as there are no Event Sourcing Handlers which drive it’s state.","title":"State Stored Aggregates","component":"axon-framework-reference","version":"4.10","name":"state-stored-aggregates","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/state-stored-aggregates/","titles":[]},"79":{"id":79,"text":"Event handlers define the business logic to be performed when an event is received. Event Processors are the components that take care of the technical aspects of that processing. They start a unit of work and possibly a transaction. However, they also ensure that correlation data can be correctly attached to all messages created during event processing, among other non-functional requirements. The image below depicts a representation of the organization of Event Processors and Event Handlers: Axon has a layered approach towards organizing event handlers. First, an event handler is positioned in a Processing Group. Each event handler, or \"Event Handling Component,\" will only ever belong to a single Processing Group. The Processing Group provides a level of configurable non-functional requirements, like error handling and the sequencing policy. The Event Processors, in turn, is in charge of the Processing Group. An Event Processor will control 1 to N Processing Groups, although there will be a one-to-one mapping in most cases. Similar to the Event Handling Co`mponent, a Processing Group will belong to a single Event Processor. This last layer allows the definition of the type of Event Processor used and concepts like the threading model and a more fine-grained degree of error handling. Event Processors come in roughly two forms: Subscribing and Streaming. Subscribing Event Processors subscribe to a source of events and are invoked by the thread managed by the publishing mechanism. Streaming Event Processors, on the other hand, pull their messages from a source using a thread that it manages itself. For more specifics on either type, consult their respective sections here and here. The rest of this page dedicates itself to describing the Event Processor’s common concepts and configuration options. Note that throughout, the EventProcessingConfigurer is used. The EventProcessingConfigurer is part of Axon’s Configuration API, dedicated to configuring Event Processors. All processors have a name, which identifies a processor instance across JVM instances. Two processors with the same name are considered as two instances of the same processor. All event handlers are attached to a processor whose name by default is the package name of the event handler’s class. Furthermore, the default processor implementation used by Axon is the Tracking Event Processor. The (default) event processor used can be adjusted, as is shown in the subscribing and streaming sections. Event handlers, or Event Handling Components, come in roughly two flavors: \"regular\" (singleton, stateless) event handlers and sagas. This section describes the process to register an event handler, whereas this page describes the saga registration process. Now let us consider that the following event handlers have been registered: org.axonframework.example.eventhandling.MyHandler org.axonframework.example.eventhandling.MyOtherHandler org.axonframework.example.eventhandling.module.ModuleHandler Without any intervention, this will trigger the creation of two processors, namely: org.axonframework.example.eventhandling with two handlers called MyHandler and MyOtherHandler org.axonframework.example.eventhandling.module with the single handler ModuleHandler Using the package name serves as a suitable default, but using dedicated names for an Event Processor and/or the Processing Group is recommended. The most straightforward approach to reaching a transparent naming scheme of your event handlers is by using the ProcessingGroup annotation. This annotation resembles the Processing Group level discussed in the introduction. The ProcessingGroup annotation requires the insertion of a name and can only be set on the class. Let us adjust the previous sample by using this annotation instead of the package names for grouping handlers: @ProcessingGroup(\"my-handlers\") class MyHandler { // left out event handling functions... } @ProcessingGroup(\"my-handlers\") class MyOtherHandler{ // ... } @ProcessingGroup(\"module-handlers\") class ModuleHandler { // ... } Using the ProcessingGroup annotation as depicted, we again construct two processors: my-handlers with two handlers called MyHandler and MyOtherHandler module-handlers with the single handler ModuleHandler If more control is required to group Event Handling Components, we recommend consulting the assignment rules section. The Configuration API allows you to configure other strategies for assigning event handling classes to processors or assigning specific handler instances to particular processors. We can separate these assignment rules into roughly two groups: Event Handler to Processing Group and Processing Group to Event Processor. Below is an exhaustive list of all the assignment rules the EventProcessingConfigurer exposes: Event Handler to Processing Group byDefaultAssignTo(String) - defines the default Processing Group name to assign an event handler to. It will only be taken into account if there are no more specifics rules and if the ProcessingGroup annotation is not present. byDefaultAssignHandlerInstancesTo(Function) - defines a lambda invoked to assign an event handling instance to a desired Processing Group by returning that group’s name. It will only be taken into account if there are no more specifics rules and if the ProcessingGroup annotation is not present. byDefaultAssignHandlerTypesTo(Function, String>) - defines a lambda invoked to assign an event handler type to a desired Processing Group by returning that group’s name. It will only be taken into account if there are no more specifics rules and if the ProcessingGroup annotation is not present. assignHandlerInstancesMatching(String, Predicate) - assigns event handlers to the given Processing Group name based on a predicate ingesting an event handling instance. The operation uses a natural priority of zero. If an instance matches several criteria, the outcome is undefined. assignHandlerTypesMatching(String, Predicate>) - assigns event handlers to the given Processing Group name based on a predicate ingesting an event handler type. The operation uses a natural priority of zero. If an instance matches several criteria, the outcome is undefined. assignHandlerInstancesMatching(String, int, Predicate) - assigns event handlers to the given Processing Group name based on a predicate ingesting an event handling instance. Uses the given priority to decide on rule-ordering. The higher the priority value, the more important the rule is. If an instance matches several criteria, the outcome is undefined. assignHandlerTypesMatching(String, int, Predicate>) - assigns event handlers to the given Processing Group name based on a predicate ingesting an event handler type. Uses the given priority to decide on rule-ordering. The higher the priority, the more important the rule is. If an instance matches several criteria, the outcome is undefined. Processing Group to Event Processor assignProcessingGroup(String, String) - defines a given Processing Group name that belongs to the given Event Processor’s name. assignProcessingGroup(Function) - defines a lambda invoked to assign a Processing Group name to the desired Event Processor by returning that processor’s name. To order event handlers within an Event Processor, the order in which event handlers are registered (as described in the Registering Event Handlers section) is guiding. Thus, the ordering in which an Event Processor will call event handlers for event handling is the same as their insertion ordering in the Configuration API. If we use Spring as the mechanism for wiring everything, we can explicitly specify the event handler component ordering by adding the @Order annotation. This annotation is placed on the event handler class name, containing an integer value to specify the ordering. Note that it is not possible to order event handlers belonging to different Event Processors. Each Event Processor acts as an isolated component without any intervention from other Event Processors. Ordering Considerations Although we can place an order among event handlers within an Event Processor, separation of event handlers is recommended. Placing an overall ordering on event handlers means those components are inclined to interact with one another, introducing a form of coupling. Due to this, the event handling process will become complex to manage (for example, for new team members). Furthermore, embracing an ordering approach might lead to place all event handlers in a global ordering, decreasing processing speeds in general. In all, you are free to use an ordering, but we recommend using it sparingly. Errors are inevitable in any application. Depending on where they happen, you may want to respond differently. By default, exceptions raised by event handlers are caught in the Processing Group layer, logged, and processing continues with the following events. When an exception is thrown when a processor is trying to commit a transaction, update a token, or in any other part of the process, the exception will be propagated. In the case of a Streaming Event Processor, this means the processor will go into error mode, releasing any tokens and retrying at an incremental interval (starting at 1 second, up to max 60 seconds). A Subscribing Event Processor will report a publication error to the component that provided the event. To change this behavior, both the Processing Group and Event Processor level allow customization on how to deal with exceptions: The component dealing with exceptions thrown from an event handling method is called the ListenerInvocationErrorHandler. By default, these exceptions are logged (with the LoggingErrorHandler implementation), and processing continues with the next handler or message. The default ListenerInvocationErrorHandler used by each processing group can be customized. Furthermore, we can configure the error handling behavior per processing group: public class AxonConfig { // omitting other configuration methods... public void configureProcessingGroupErrorHandling(EventProcessingConfigurer processingConfigurer) { // To configure a default ... processingConfigurer.registerDefaultListenerInvocationErrorHandler(conf -> /* create listener error handler */) // ... or for a specific processing group: .registerListenerInvocationErrorHandler(\"my-processing-group\", conf -> /* create listener error handler */); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule processingGroupErrorHandlingConfigurerModule() { return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerDefaultListenerInvocationErrorHandler( conf -> /* create listener error handler */ ) // ... or for a specific processing group: .registerListenerInvocationErrorHandler( \"my-processing-group\", conf -> /* create listener error handler */ ) ); } } It is easy to implement custom error handling behavior. The error handling method to implement provides the exception, the event that was handled, and a reference to the handler that was handling the message: public interface ListenerInvocationErrorHandler { void onError(Exception exception, EventMessage event, EventMessageHandler eventHandler) throws Exception; } You can choose to retry, ignore or rethrow the exception. The exception will bubble up to the Event Processor level when rethrown. Exceptions occurring outside an event handler’s scope, or have bubbled up from there, are handled by the ErrorHandler. The default error handler is the PropagatingErrorHandler, which will rethrow any exceptions it catches. How the Event Processor deals with a rethrown exception differ per implementation. The behaviour for the Subscribing- and the Streaming Event Processor can respectively be found here and here. We can configure a default ErrorHandler for all Event Processors or an ErrorHandler for specific processors: public class AxonConfig { // ... public void configureProcessingGroupErrorHandling(EventProcessingConfigurer processingConfigurer) { // To configure a default ... processingConfigurer.registerDefaultErrorHandler(conf -> /* create error handler */) // ... or for a specific processor: .registerErrorHandler(\"my-processor\", conf -> /* create error handler */); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule processorErrorHandlingConfigurerModule() { return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerDefaultErrorHandler(conf -> /* create error handler */) // ... or for a specific processor: .registerErrorHandler( \"my-processor\", conf -> /* create error handler */ ) ); } } For providing a custom solution, the `ErrorHandler’s single method needs to be implemented: public interface ErrorHandler { void handleError(ErrorContext errorContext) throws Exception; } Based on the provided ErrorContext object, you can decide to ignore the error, schedule retries, perform dead-letter-queue delivery, or rethrow the exception. Although configuring a Listener Invocation Error Handler and Error Handler helps you to deal with exceptions when processing events, you still end up in an event handling stop. When you only log the error and allow processing to proceed, you will most likely end up with missing data until you fix the predicament and replay past events. If you instead propagate the exception so the event processor keeps retrying, the event processor will stall entirely when the cause is consistent. Although this behavior is sufficient on many occasions, sometimes it is beneficial if we can unblock event handling by parking the problematic event. To that end, you can configure a dead-letter queue for a processing group. An essential concept of Axon Frameworks event processors is the maintenance of event ordering, even when you configure parallel processing. A perfect example when this is a requirement is the need to handle events of the same aggregate in their publishing order. Simply dead lettering one failed event would cause subsequent events in the sequence to be applied to inconsistent state. It is thus of utmost importance that a dead-letter queue for events enqueues an event and any following events in the sequence. To that end, the supported dead-letter queue is a so-called SequencedDeadLetterQueue. Integral to its design is to allow for queueing failed events and events that belong to a faulty sequence. It does so by maintaining a sequence identifier for each event, determined by the sequencing policy. Is there support for Sagas? Currently, there is no support for using a dead-letter queue for sagas. We’ve taken this decision as we cannot support a sequenced dead lettering approach as we do for regular event handling. Furthermore, we cannot do this, as a saga’s associations can vary widely between events. Due to this, the sequence of events may change, breaking this level of support. Hence, there’s no way of knowing whether a next event in the stream does or does not belong to a saga. Note that you cannot share a dead-letter queue between different processing groups. Hence, each processing group you want to enable this behavior for should receive a unique dead-letter queue instance. We currently provide the following dead-letter queue implementations: InMemorySequencedDeadLetterQueue - In-memory variant of the dead-letter queue. Useful for testing purposes, but as it does not persist dead letters, it is unsuited for production environments. JpaSequencedDeadLetterQueue - JPA variant of the dead-letter queue. It constructs a dead_letter_entry table where it persists failed-events in. The JPA dead-letter queue is a suitable option for production environments by persisting the dead letters. JdbcSequencedDeadLetterQueue - JDBC variant of the dead-letter queue. It constructs a dead_letter_entry table where it persists failed-events in. The JDBC dead-letter queue is a suitable option for production environments by persisting the dead letters. MongoSequencedDeadLetterQueue - Mongo variant of the dead-letter queue, available via the Mongo Extension. It constructs a deadletters collection where it persists failed-events in. The MongoDB dead-letter queue is a suitable option for production environments by persisting the dead letters. Before configuring a SequencedDeadLetterQueue it is vital to validate whether your event handling functions are idempotent. As a processing group consists of several Event Handling Components (as explained in the intro of this chapter), some handlers may succeed in event handling while others will not. As a configured dead-letter queue does not stall event handling, a failure in one Event Handling Component does not cause a rollback for other event handlers. Furthermore, as the dead-letter support is on the processing group level, dead-letter processing will invoke all event handlers for that event within the processing group. Thus, if your event handlers are not idempotent, processing letters may result in undesired side effects. Hence, we strongly recommend making your event handlers idempotent when using the dead-letter queue. The principle of exactly once delivery is no longer guaranteed; at-least-once delivery is the reality to cope with. A JpaSequencedDeadLetterQueue configuration example: public class AxonConfig { // omitting other configuration methods... public void configureDeadLetterQueue(EventProcessingConfigurer processingConfigurer) { // Replace \"my-processing-group\" for the processing group you want to configure the DLQ on. processingConfigurer.registerDeadLetterQueue( \"my-processing-group\", config -> JpaSequencedDeadLetterQueue.builder() .processingGroup(\"my-processing-group\") .maxSequences(256) .maxSequenceSize(256) .entityManagerProvider(config.getComponent(EntityManagerProvider.class)) .transactionManager(config.getComponent(TransactionManager.class)) .serializer(config.serializer()) .build() ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule deadLetterQueueConfigurerModule() { // Replace \"my-processing-group\" for the processing group you want to configure the DLQ on. return configurer -> configurer.eventProcessing().registerDeadLetterQueue( \"my-processing-group\", config -> JpaSequencedDeadLetterQueue.builder() .processingGroup(\"my-processing-group\") .maxSequences(256) .maxSequenceSize(256) .entityManagerProvider(config.getComponent(EntityManagerProvider.class)) .transactionManager(config.getComponent(TransactionManager.class)) .serializer(config.serializer()) .build() ); } } You can set the maximum number of saved sequences (defaults to 1024) and the maximum number of dead letters in a sequence (also defaults to 1024). If either of these thresholds is exceeded, the queue will throw a DeadLetterQueueOverflowException. This exception means the processing group will stop processing new events altogether. Thus, the processing group moves back to the behavior described at the start of the Error Handling section. In order to make it easier to use a dead-letter queue on multiple processing groups, it’s possible to set a dead-letter queue provider. The provider is a function that takes a processing group, and returns either null, meaning it will not be configured using a dead-letter queue, or a function that takes the Configuration and returns a new dead-letter queue. Here is a JpaSequencedDeadLetterQueue configuration example that uses a collection to determine if a dead-letter queue should be created for a given processing group: public class AxonConfig { // omitting other configuration methods... public void configureDeadLetterQueue(EventProcessingConfigurer processingConfigurer) { processingConfigurer.registerDeadLetterQueueProvider( processingGroup -> { //dlqEnabledGroups is a collection with the groups that should have a dlq if (dlqEnabledGroups.contains(processingGrouping)) { return config -> JpaSequencedDeadLetterQueue.builder() .processingGroup(processingGroup) .entityManagerProvider(config.getComponent( EntityManagerProvider.class )) .transactionManager(config.getComponent( TransactionManager.class )) .serializer(config.serializer()) .build(); } else { return null; } } ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule deadLetterQueueConfigurerModule () { return configurer -> configurer.eventProcessing().registerDeadLetterQueueProvider( processingGroup -> { //dlqEnabledGroups is a collection with the groups that should have a dlq if (dlqEnabledGroups.contains(processingGrouping)) { return config -> JpaSequencedDeadLetterQueue.builder() .processingGroup(processingGroup) .entityManagerProvider(config.getComponent( EntityManagerProvider.class )) .transactionManager(config.getComponent( TransactionManager.class )) .serializer(config.serializer()) .build(); } else { return null; } } ); } } If you are using Spring Boot, a default dead-letter queue provider will be set if using JPA, JDBC, or Mongo. The default dead-letter queue provider will use the axon.eventhandling.processors.my-processor.dlq.enabled property to determine whether to return null or a dead-letter queue factory method. For example, by setting the axon.eventhandling.processors.my-processing-group.dlq.enabled to true you would enable the dead-letter queue for the my-processing-group processing group. Once you resolve the problem that led to dead lettering events, we can start processing the dead letters. We recommend using the SequencedDeadLetterProcessor interface for this, as it processes an entire dead-letter sequence instead of single dead-letter entries. It will thus ensure the event order is maintained during the retry. The SequencedDeadLetterProcessor provides two operations to process dead letters: boolean processAny() - Process the oldest dead-letter sequence. Returns true if it processes a sequence successfully. boolean process(Predicate>) - Process the oldest dead-letter sequence matching the predicate. Note that the predicate only filters based on a sequence’s first entry. Returns true if it processes a sequence successfully. If the processing of a dead letter fails, the event will be offered to the dead-letter queue again. How the dead-lettering process reacts to this depends on the enqueue policy. You can retrieve a SequencedDeadLetterProcessor from the EventProcessingConfiguration based on a processing group name if you have configured a dead-letter queue for this processing group. Below are a couple of examples of how to process dead-letter sequences: public class DeadletterProcessor { private EventProcessingConfiguration config; public void retryErrorEventSequence(String processingGroup) { config.sequencedDeadLetterProcessor(processingGroup) .ifPresent(letterProcessor -> letterProcessor.process( deadLetter -> deadLetter.message().getPayload() instanceof ErrorEvent )); } } public class DeadletterProcessor { private EventProcessingConfiguration config; public void retryAnySequence(String processingGroup) { config.sequencedDeadLetterProcessor(processingGroup) .ifPresent(SequencedDeadLetterProcessor::processAny); } } public class DeadletterProcessor { private EventProcessingConfiguration config; public void retryAllSequences(String processingGroup) { Optional>> optionalLetterProcessor = config.sequencedDeadLetterProcessor(processingGroup); if (!optionalLetterProcessor.isPresent()) { return; } SequencedDeadLetterProcessor> letterProcessor = optionalLetterProcessor.get(); // Retrieve all the dead lettered event sequences: Iterable>>> deadLetterSequences = config.deadLetterQueue(processingGroup) .map(SequencedDeadLetterQueue::deadLetters) .orElseThrow(() -> new IllegalArgumentException(\"No such Processing Group\")); // Iterate over all sequences: for (Iterable>> sequence : deadLetterSequences) { Iterator>> sequenceIterator = sequence.iterator(); String firstLetterId = sequenceIterator.next() .message() .getIdentifier(); // SequencedDeadLetterProcessor#process automatically retries an entire sequence. // Hence, we only need to filter on the first entry of the sequence: letterProcessor.process(deadLetter -> deadLetter.message().getIdentifier().equals(firstLetterId)); } } } For some event handlers, it is beneficial to know if the event it is processing is dead-lettered. To that end, you can include a parameter of type DeadLetter> to your event handling methods. The generic refers to the type of event handled by the event handler. The injected DeadLetter parameter exposes several attributes, like the cause() and diagnostics(), for example. Do note that the DeadLetter parameter is nullable. When the injected DeadLetter is null, you deal with a non-dead-lettered event. If it is not null, the event handling occurs as a follow-up of invoking the process(Predicate>) or processAny() methods on the SequencedDeadLetterProcessor. For added clarity, here’s an event handler sample containing a DeadLetter parameter: @ProcessingGroup(\"my-processing-group\") class MyProcessingGroup { // omitted services and other event handlers for simplicity... @EventHandler public void on(SomeEvent event, DeadLetter> deadLetter) { if (deadLetter != null) { // dead-letter processing... } else { // regular event handling... } } } A dead letter contains the following attributes: attribute type description message EventMessage The EventMessage for which handling failed. The message contains your event, among other Message properties. cause Optional The cause for the message to be dead lettered. Empty if the letter is enqueued because it is part of a sequence. enqueuedAt Instant The moment in time when the event was enqueued in a dead-letter queue. lastTouched Instant The moment in time when this letter was last touched. Will equal the enqueuedAt value if this letter is enqueued for the first time. diagnostics MetaData The diagnostic MetaData concerning this letter. Filled through the enqueue policy. By default, when you configure a dead-letter queue and event handling fails, the event is dead-lettered. However, you might not want all event failures to result in dead-lettered entries. Similarly, when letter processing fails, you might want to reconsider whether you want to enqueue the letter again. To that end, you can configure a so-called EnqueuePolicy. The enqueue policy ingests a DeadLetter and a cause (Throwable) and returns an EnqueueDecision. The EnqueueDecision, in turn, describes if the framework should or should not enqueue the dead letter. It’s also possible to change the exception, for example to be sure that it will fit in the database, as the cause will be stored. You can customize the dead-letter policy to exclude some events when handling fails. As a consequence, these events will be skipped. Note that Axon Framework invokes the policy on initial event handling and on dead-letter processing. Reevaluating the policy after processing failed may be essential to ensure a dead letter isn’t stuck in the queue forever. To deal with this scenario, you can attach additional diagnostic information to the dead letter through the policy. For example to add a number of retries to the dead letter to base your decision on. See the sample EnqueuePolicy below for this: public class CustomEnqueuePolicy implements EnqueuePolicy> { @Override public EnqueueDecision> decide(DeadLetter> letter, Throwable cause) { if (cause instanceof NullPointerException) { // It's pointless: return Decisions.doNotEnqueue(); } final int retries = (int) letter.diagnostics().getOrDefault(\"retries\", -1); if (letter.message().getPayload() instanceof ErrorEvent) { // Important and new entry: return Decisions.enqueue(cause); } if (retries l.diagnostics().and(\"retries\", retries + 1)); } // Exhausted all retries: return Decisions.evict(); } } The Decisions utility class provides the most reasonable decisions, but you are free to construct your own EnqueueDecision when necessary. See the following example for configuring our custom policy: public class AxonConfig { // omitting other configuration methods... public void configureEnqueuePolicy(EventProcessingConfigurer configurer) { // Replace \"my-processing-group\" for the processing group you want to configure the policy on. configurer.registerDeadLetterPolicy(\"my-processing-group\", config -> new MyEnqueuePolicy()); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule enqueuePolicyConfigurerModule() { // Replace \"my-processing-group\" for the processing group you want to configure the policy on. return configurer -> configurer.eventProcessing() .registerDeadLetterPolicy(\"my-processing-group\", config -> new MyEnqueuePolicy()); } } Alongside handler assignment and error handling, Event Processors allow configuration for other components too. For Subscribing and Streaming Event Processor specific options, their respective sections should be checked. The remainder of this page will cover the generic configuration options for each Event Processor. The EventProcessingConfigurer provides access to a lot of configurable components for Event Processors. Sometimes it is easier or preferable to provide an entire function to construct an Event Processor, however. To that end, we can configure a custom EventProcessorBuilder: @FunctionalInterface interface EventProcessorBuilder { // Note: the `EventHandlerInvoker` is the component which holds the event handling functions. EventProcessor build(String name, Configuration configuration, EventHandlerInvoker eventHandlerInvoker); } The EventProcessorBuilder functional interface provides the event processor’s name, the Configuration and the EventHandlerInvoker, and requires returning an EventProcessor instance. Note that any Axon component that an Event Processor requires (for example, an EventStore) is retrievable from the Configuration. The EventProcessingConfigurer provides two methods to configure an EventProcessorBuilder: registerEventProcessorFactory(EventProcessorBuilder) - allows you to define a default factory method that creates event processors for which no explicit factories are defined registerEventProcessor(String, EventProcessorBuilder) - defines the factory method to use to create a processor with given name Since the Event Processor is the invoker of event handling methods, it is a spot to configure Message Handler Interceptors too. Since Event Processors are dedicated to event handling, the MessageHandlerInterceptor is required to deal with an EventMessage. Differently put, an EventHandlerInterceptor can be registered to Event Processors. The EventProcessingConfigurer provides two methods to configure MessageHandlerInterceptor instances: registerDefaultHandlerInterceptor(BiFunction>>) - registers a default MessageHandlerInterceptor that will be configured on every Event Processor instance registerHandlerInterceptor(String, Function>>) - registers a MessageHandlerInterceptor that will be configured for the Event Processor matching the given String Any Event Processor instance provides the means to contain a Message Monitor. Message Monitors (discussed in more detail here) allow for monitoring the flow of messages throughout an Axon application. For Event Processors, the message monitor deals explicitly with the events flowing through the Event Processor towards the event handling functions. The EventProcessingConfigurer provides two approaches towards configuring a MessageMonitor: registerMessageMonitor(String, Function>>) - registers the given MessageMonitor to the Event Processor matching the given String registerMessageMonitorFactory(String, MessageMonitorFactory) - registers the given MessageMonitorFactory to construct a MessageMonitor for the Event Processor matching the given String The MessageMonitorFactory provides a more fine-grained approach, used throughout the Configuration API, to construct a MessageMonitor: @FunctionalInterface public interface MessageMonitorFactory { MessageMonitor> create(Configuration configuration, Class componentType, String componentName); } We can use the Configuration to retrieve the required dependencies to construct the MessageMonitor. The type and name reflect which infrastructure component the factory constructs a monitor for. Whenever you use the MessageMonitorFactory to construct a MessageMonitor for an Event Processor, the factory expects the componentType to be an EventProcessor implementation. The componentName, on the other hand, would resemble the name of the Event Processor. As components that deal with event handling, the Event Processor is a logical place to provide transaction configuration options. Note that in the majority of the scenarios, the defaults will suffice. This section simply serves to show these options to allow adjustment if the application requires it. The first of these is the TransactionManager. Axon uses the TransactionManager to attach a transaction to every Unit of Work. Within a Spring environment, the TransactionManager defaults to a SpringTransactionManager, which uses Spring’s PlatformTransactionManager under the hood. In non Spring environments, it would be wise to build a TransactionManager implement if transaction management is required, of course. Such an implementation only requires the definition of the TransactionManager#startTransaction() method. To adjust the transaction manager for an Event Processor, the registerTransactionManager(String, Function) on the EventProcessingConfigurer should be used. Secondly, you can adjust the desired RollbackConfiguration per Event Processor. It is the RollbackConfiguration that decide when a Unit of Work should rollback the transaction. The default RollbackConfiguration is to rollback on any type of Throwable; the Unit of Work page describes the other options you can choose. To adjust the default behaviour, the registerRollbackConfiguration(String, Function) function should be invoked on the EventProcessingConfigurer.","title":"Event Processors","component":"axon-framework-reference","version":"4.10","name":"index","url":"/axon-framework-reference/4.10/events/event-processors/","titles":[{"text":"Assigning handlers to processors","hash":"_assigning_handlers_to_processors","id":1},{"text":"Event handler assignment rules","hash":"_event_handler_assignment_rules","id":2},{"text":"Ordering event handlers within a processor","hash":"_ordering_event_handlers_within_a_processor","id":3},{"text":"Error handling","hash":"error-handling","id":4},{"text":"Processing group - listener invocation error handler","hash":"_processing_group_listener_invocation_error_handler","id":5},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":6},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":7},{"text":"Event processor - error handler","hash":"event-processor-error-handler","id":8},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":9},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":10},{"text":"Dead-letter queue","hash":"dead-letter-queue","id":11},{"text":"Dead-letter queues and idempotency","hash":"_dead_letter_queues_and_idempotency","id":12},{"text":"Configuring a sequenced dead-letter queue","hash":"_configuring_a_sequenced_dead_letter_queue","id":13},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":14},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":15},{"text":"Configuring a sequenced Dead-Letter-Queue provider","hash":"_configuring_a_sequenced_dead_letter_queue_provider","id":16},{"text":"Axon Configuration API","hash":"_axon_configuration_api_4","id":17},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_4","id":18},{"text":"Processing dead-letter sequences","hash":"_processing_dead_letter_sequences","id":19},{"text":"Process the oldest dead-letter sequence matching ErrorEvent","hash":"_process_the_oldest_dead_letter_sequence_matching_errorevent","id":20},{"text":"Process the oldest dead-letter sequence in the queue","hash":"_process_the_oldest_dead_letter_sequence_in_the_queue","id":21},{"text":"Process all dead-letter sequences in the queue","hash":"_process_all_dead_letter_sequences_in_the_queue","id":22},{"text":"Dead-letter attributes","hash":"_dead_letter_attributes","id":23},{"text":"Dead-letter enqueue policy","hash":"_dead_letter_enqueue_policy","id":24},{"text":"Axon Configuration API","hash":"_axon_configuration_api_5","id":25},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_5","id":26},{"text":"General processor configuration","hash":"general_processor_configuration","id":27},{"text":"Event processor builders","hash":"_event_processor_builders","id":28},{"text":"Event handler interceptors","hash":"_event_handler_interceptors","id":29},{"text":"Message monitors","hash":"_message_monitors","id":30},{"text":"Transaction management","hash":"_transaction_management","id":31}]},"80":{"id":80,"text":"The StreamingEventProcessor, or Streaming Processor for short, is a type of Event Processor. As any Event Processor, it serves as the technical aspect to handle events by invoking the event handlers written in an Axon application. The Streaming Processor defines itself by receiving the events from a StreamableMessageSource. The StreamableMessageSource is an infrastructure component through which we can open a stream of events. The source can also specify positions on the event stream, so-called Tracking Tokens, used as start positions when opening an event stream. An example of a StreamableMessageSource is the EventStore, like for example Axon Server or an RDBMS. Furthermore, Streaming Processors use separate threads to process the events retrieved from the StreamableMessageSource. Using separate threads decouples the StreamingEventProcessor from other operations (for example, event publication or command handling), allowing for cleaner separation within any application. Using separate threads allows for parallelization of the event load, either within a single JVM or between several. When starting a Streaming Processor, it will open an event stream through the configured StreamableMessageSource. The first time a stream has started, it, by default, will begin at the tail (the oldest/the first token) of the stream. It keeps track of the event processing progress while traversing the stream. It does so by storing the Tracking Tokens, or tokens for short, accompanying the events. This solution works towards tracking the progress since the tokens specify the event’s position on the stream. Head or Tail? The oldest (the first) token is located at the tail of the stream, and the latest (newest) token is positioned at the head of the stream. Maintaining the progress through tokens makes a Streaming Processor able to deal with stopping and starting the processor, more resilient against unintended shutdowns, and the token provides a means to replay events by adjusting the position of tokens. All combined, the Streaming Processor allows for decoupling, parallelization, resiliency, and replay-ability. It is these features that make the Streaming Processor the logical choice for the majority of applications. Due to this, the \"Tracking Event Processor,\" a type of Streaming Processor, is the default Event Processor. Default Event Processor Which EventProcessor type becomes the default processor depends on the event message source available in your application. In the majority of use cases, an Event Store is present. As the Event Store is a type of StreamableMessageSource, the default will switch to the Tracking Event Processor. If the application only has an Event Bus configured, the framework will lack a StreamableMessageSource. It will fall back to the Subscribing Event Processor as the default in these scenarios. This implementation will use the configured EventBus as its SubscribableMessageSource. There are two implementations of Streaming Processor available in Axon Framework: the Tracking Event Processor (TEP for short), and the Pooled Streaming Event Processor (PSEP for short). Both implementations support the same set of operations. Operations like replaying events through a reset, parallelism and tracking the progress with tokens. They diverge on their threading approach and work separation, as discussed in more detail in this section. The Streaming Processors have several additional components that you can configure, next to the base options. For other streaming processor features that are configurable, we refer to their respective sections for more details. This chapter will cover how to configure a Tracking or Pooled Streaming Processor respectively. Firstly, to specify that new event processors should default to a TrackingEventProcessor, you can invoke the usingTrackingEventProcessors method: public class AxonConfig { // omitting other configuration methods... public void configureProcessorDefault(EventProcessingConfigurer processingConfigurer) { processingConfigurer.usingTrackingEventProcessors(); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule processorDefaultConfigurerModule() { return configurer -> configurer.eventProcessing(EventProcessingConfigurer::usingTrackingEventProcessors); } } For a specific Event Processor to be a Tracking instance, registerTrackingEventProcessor is used: public class AxonConfig { // omitting other configuration methods... public void configureTrackingProcessors(EventProcessingConfigurer processingConfigurer) { // This configuration object allows for fine-grained control over the Tracking Processor TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing(); // To configure a processor to be tracking ... processingConfigurer.registerTrackingEventProcessor(\"my-processor\") // ... to define a specific StreamableMessageSource ... .registerTrackingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */ ) // ... to provide additional configuration ... .registerTrackingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */, conf -> tepConfig ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule trackingProcessorConfigurerModule() { // This configuration object allows for fine-grained control over the Tracking Processor TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing(); return configurer -> configurer.eventProcessing( // To configure a processor to be tracking ... processingConfigurer -> processingConfigurer.registerTrackingEventProcessor(\"my-processor\") // ... to define a specific StreamableMessageSource ... .registerTrackingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */ ) // ... to provide additional configuration ... .registerTrackingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */, conf -> tepConfig ) ); } } A properties file allows the configuration of some fields on an Event Processor. Do note that the Java configuration provides more degrees of freedom. axon.eventhandling.processors.my-processor.mode=tracking axon.eventhandling.processors.my-processor.source=eventStore If the name of an event processor contains periods ., use the map notation: axon.eventhandling.processors[my.processor].mode=tracking axon.eventhandling.processors[my.processor].source=eventStore For more fine-grained control when Configuring a tracking processor, the TrackingEventProcessorConfiguration can be used. When invoking the registerTrackingEventProcessor method, you can provide a tracking processor configuration object, or you can register the configuration instance explicitly: public class AxonConfig { // omitting other configuration methods... public void registerTrackingProcessorConfig(EventProcessingConfigurer processingConfigurer) { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing(); // To register a default tracking config ... processingConfigurer.registerTrackingEventProcessorConfiguration(config -> tepConfig) // ... to register a config for a specific processor. .registerTrackingEventProcessorConfiguration(\"my-processor\", config -> tepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule trackingProcessorConfigurerModule() { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing(); return configurer -> configurer.eventProcessing( // To register a default tracking config ... processingConfigurer -> processingConfigurer.registerTrackingEventProcessorConfiguration(config -> tepConfig) // ... to register a config for a specific processor. .registerTrackingEventProcessorConfiguration( \"my-processor\", config -> tepConfig ) ); } } Firstly, to specify that every new processors should default to a PooledStreamingEventProcessor, you can invoke the usingPooledStreamingEventProcessors method: public class AxonConfig { // omitting other configuration methods... public void configureProcessorDefault(EventProcessingConfigurer processingConfigurer) { processingConfigurer.usingPooledStreamingEventProcessors(); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule processorDefaultConfigurerModule() { return configurer -> configurer.eventProcessing(EventProcessingConfigurer::usingPooledStreamingEventProcessors); } } For a specific Event Processor to be a Pooled Streaming instance, registerPooledStreamingProcessor is used: public class AxonConfig { // omitting other configuration methods... public void configurePooledStreamingProcessors(EventProcessingConfigurer processingConfigurer) { // This configuration object allows for fine-grained control over the Pooled Streaming Processor EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder/* ... */; // To configure a processor to be pooled streaming ... processingConfigurer.registerPooledStreamingEventProcessor(\"my-processor\") // ... to define a specific StreamableMessageSource ... .registerPooledStreamingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */ ) // ... to provide additional configuration ... .registerPooledStreamingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */, psepConfig ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule pooledStreamingProcessorConfigurerModule() { // This configuration object allows for fine-grained control over the Pooled Streaming Processor EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder/* ... */; return configurer -> configurer.eventProcessing( // To configure a processor to be pooled streaming ... processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessor(\"my-processor\") // ... to define a specific StreamableMessageSource ... .registerPooledStreamingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */ ) // ... to provide additional configuration ... .registerPooledStreamingEventProcessor( \"my-processor\", conf -> /* create/return StreamableMessageSource */, psepConfig ) ); } } A properties file allows the configuration of some fields on an Event Processor. Do note that the Java configuration provides more degrees of freedom. axon.eventhandling.processors.my-processor.mode=pooled axon.eventhandling.processors.my-processor.source=eventStore If the name of an event processor contains periods ., use the map notation: axon.eventhandling.processors[my.processor].mode=pooled axon.eventhandling.processors[my.processor].source=eventStore For more fine-grained control when Configuring a pooled streaming processor, the PooledStreamingProcessorConfiguration can be used. When invoking the registerPooledStreamingEventProcessor method, you can provide a pooled streaming processor configuration object, or you can register the configuration instance explicitly: public class AxonConfig { // omitting other configuration methods... public void registerPooledStreamingProcessorConfig(EventProcessingConfigurer processingConfigurer) { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder/* ... */; // To register a default pooled streaming config ... processingConfigurer.registerPooledStreamingEventProcessorConfiguration(psepConfig) // ... to register a config for a specific processor. .registerPooledStreamingEventProcessorConfiguration(\"my-processor\", psepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule pooledStreamingProcessorConfigurerModule() { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder/* ... */; return configurer -> configurer.eventProcessing( // To register a default pooled streaming config ... processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessorConfiguration(psepConfig) // ... to register a config for a specific processor. .registerPooledStreamingEventProcessorConfiguration( \"my-processor\", psepConfig ) ); } } The error mode differs between the Tracking- and Pooled Streaming Event Processor. Whenever the error handler rethrows an exception, a TrackingEventProcessor will retry processing the event using an incremental back-off period. It will start at 1 second and double after each attempt until it reaches the maximum wait time of 60 seconds per attempt. This back-off time ensures that in a distributed environment, when another node is able to process events, it will have the opportunity to claim the token required to process the event. The PooledStreamingEventProcessor simply aborts the failed part of the process. The Pooled Streaming Processor can deal with this since the threading mode is different from the Tracking Processor. As such, the chance is high the failed process will be picked up quickly by another thread within the same JVM. This chance increases further whenever the PSEP instance is distributed over several application instances. A vital attribute of the Streaming Event Processor is its capability to keep and maintain the processing progress. It does so through the TrackingToken, the \"token\" for short. Such a token accompanies each message a streaming processor receives through its event stream. It’s this token that: specifies the position of the event on the overall stream, and is used by the Streaming Processor to open the event stream at the desired position on start-up. Using tokens gives the Streaming Event Processor several benefits, like: Being able to reopen the stream at any later point, picking up where it left off with the last event. Dealing with unintended shutdowns without losing track of the last events they’ve handled. Collaboration over the event handling load from two perspectives. First, the tokens make sure only a single thread is actively processing specific events. Secondly, it allows parallelization of the load over several threads or nodes of a Streaming Processor. Replaying events by adjusting the token position of that processor. To be able to reopen the stream at a later point, we should keep the progress somewhere. The progress is kept by updating and saving the TrackingToken after handling batches of events. Keeping the progress requires CRUD operation, for which the Streaming Processor uses the TokenStore. For a Streaming Processor to process any events, it needs \"a claim\" on a TrackingToken. The processor will update this claim every time it has finished handling a batch of events. This so-called \"claim extension\" is, just as updating and saving of tokens, delegated to the Token Store. Hence, the Streaming Processors achieves collaboration among instances/threads through token claims. In the absence of a claim, a processor will actively try to retrieve one. If a token claim is not extended for a configurable amount of time, other processor threads can \"steal\" the claim. Token stealing can, for example, happen if event processing is slow or encountered some exceptions. Retrieving the current token inside an event handler When processing an event it may be beneficial to retrieve the token belonging to that event. First, this can be achieved by adding a parameter of type TrackingToken to the event handler. This support is mentioned in the Supported Parameters for Event Handlers section. Additionally, you can retrieve the token from the resources collection of the Unit of Work. Both the Tracking and Pooled Streaming Event Processor add the current TrackingToken under the key \"Processor[{processor-name}]/Token\". The Streaming Processor uses a StreamableMessageSource to retrieve a stream of events that will open on start-up. It requires a TrackingToken to open this stream, which it will fetch from the TokenStore. However, if a Streaming Processor starts for the first time, there is no TrackingToken present to open the stream with yet. Whenever this situation occurs, a Streaming Processor will construct an \"initial token.\" By default, the initial token will start at the tail of the event stream. Thus, the processor will begin at the start and handle every event present in the message source. This start position is configurable, as is described here. A Saga’s Streaming Processor initial position A Streaming Processor dedicated to a Saga will default the initial token to the head of the stream. The default initial token position ensures that the Saga does not react to events from the past, as in most cases, this would introduce unwanted side effects. Conceptually there are a couple of scenarios when a processor builds an initial token on application startup. The obvious one is already shared, namely when a processor starts for the first time. There are, however, also other situations when a token is built that might be unexpected, like: The TokenStore has (accidentally) been cleared between application runs, thus losing the stored tokens. The application running the processor starts in a new environment (for example, test or acceptance) for the first time. An InMemoryTokenStore was used, and hence the processor could never persist the token to begin with. The application is (accidentally) pointing to another storage solution than expected. Whenever a Streaming Processor’s event handlers show unexpected behavior in the form of missed or reprocessed events, a new initial token might have been triggered. In those cases, we recommend to validate if any of the above situations occurred. There are a couple of things we can configure when it comes to tokens. We can separate these options in \"initial token\" and \"token claim\" configuration, as described in the following sections: The initial token for a StreamingEventProcessor is configurable for every processor instance. When configuring the initial token builder function, the received input parameter is the StreamableMessageSource. The message source, in turn, gives three possibilities to build a token, namely: createHeadToken() - Creates a token from the head of the event stream. createTailToken() - Creates a token from the tail of the event stream. Creating tail tokens is the default value for most Streaming Processors. createTokenAt(Instant) / createTokenSince(Duration) - Creates a token that tracks all events after a given time. If there is an event precisely at that given moment in time, it will also be taken into account. Of course, you can completely disregard the StreamableMessageSource input parameter and create a token by yourself. Consider the following snippets if you want to configure a different initial token: public class AxonConfig { // omitting other configuration methods... public void configureInitialTrackingToken(EventProcessingConfigurer processingConfigurer) { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing() .andInitialTrackingToken(StreamableMessageSource::createHeadToken); processingConfigurer.registerTrackingEventProcessorConfiguration(\"my-processor\", config -> tepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule initialTrackingTokenConfigurerModule() { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing() .andInitialTrackingToken(StreamableMessageSource::createTailToken); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerTrackingEventProcessorConfiguration( \"my-processor\", config -> tepConfig ) ); } } public class AxonConfig { // omitting other configuration methods... public void configureInitialTrackingToken(EventProcessingConfigurer processingConfigurer) { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.initialToken(messageSource -> messageSource.createTokenSince( messageSource -> messageSource.createTokenAt(Instant.parse(\"20020-12-01T10:15:30.00Z\")) )); processingConfigurer.registerPooledStreamingEventProcessorConfiguration(\"my-processor\", psepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule initialTrackingTokenConfigurerModule() { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.initialToken( messageSource -> messageSource.createTokenSince(Duration.ofDays(31)) ); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessorConfiguration( \"my-processor\", psepConfig ) ); } } As described here, a streaming processor should claim a token before it is allowed to perform any processing work. There are several scenarios where a processor may keep the claim for too long. This can occur when, for example, the event handling process is slow or encountered an exception. In those scenarios, another processor can steal a token claim to proceed with processing. There are a couple of configurable values that influence this process: tokenClaimInterval - Defines how long to wait between attempts to claim a segment. A processor uses this value to steal token claims from other processor threads. This value defaults to 5000 milliseconds. eventAvailabilityTimeout - Defines the time to \"wait for events\" before extending the claim. Only the Tracking Event Processor uses this. The value defaults to 1000 milliseconds. claimExtensionThreshold - Threshold to extend the claim in the absence of events. Only the Pooled Streaming Event Processor uses this. The value defaults 5000 milliseconds. Consider the following snippets if you want to configure any of these values: public class AxonConfig { // omitting other configuration methods... public void configureTokenClaimValues(EventProcessingConfigurer processingConfigurer) { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing() .andTokenClaimInterval(1000, TimeUnit.MILLISECONDS) .andEventAvailabilityTimeout(2000, TimeUnit.MILLISECONDS); processingConfigurer.registerTrackingEventProcessorConfiguration(\"my-processor\", config -> tepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule tokenClaimValuesConfigurerModule() { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forSingleThreadedProcessing() .andTokenClaimInterval(1000, TimeUnit.MILLISECONDS) .andEventAvailabilityTimeout(2000, TimeUnit.MILLISECONDS); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerTrackingEventProcessorConfiguration( \"my-processor\", config -> tepConfig ) ); } } public class AxonConfig { // omitting other configuration methods... public void configureTokenClaimValues(EventProcessingConfigurer processingConfigurer) { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.tokenClaimInterval(2000) .claimExtensionThreshold(3000); processingConfigurer.registerPooledStreamingEventProcessorConfiguration(\"my-processor\", psepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule tokenClaimValuesConfigurerModule() { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.tokenClaimInterval(2000) .claimExtensionThreshold(3000); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessorConfiguration( \"my-processor\", psepConfig ) ); } } As described at the start, streaming processor threads can \"steal\" tokens from one another. A token is \"stolen\" when a thread loses a token claim. Situations like this internally result in an UnableToClaimTokenException, caught by both streaming event processor implementations and translated into warn- or info-level log statements. Where the framework uses token claims to ensure that a single thread is processing a sequence of events, it supports token stealing to guarantee event processing is not blocked forever. In short, the framework uses token stealing to unblock your streaming processor threads when processing takes too long. Examples may include literal slow processing, blocking exceptional scenarios, and deadlocks. However, token stealing may occur as a surprise for some applications, making it an unwanted side effect. As such, it is good to be aware of why tokens get stolen (as described above), but also when this happens and what the consequences are. In practical terms, a token is stolen whenever the claim timeout is exceeded. This timeout is met whenever the token’s timestamp (for example, the timestamp column of your token_entry table) exceeds the claimTimeout of the TokenStore. By default, the claimTimeout value equals 10 seconds. To adjust it, you must configure a TokenStore instance through its builder, as shown in the Token Store section. If you use Spring Boot, you can alternatively set the axon.eventhandling.tokenstore.claim-timeout for example to 30s to increase it to 30 seconds. The token’s timestamp is equally crucial in deciding when the timeout is met. The streaming processor thread holding the claim is in charge of updating the token timestamp. This timestamp is updated whenever the thread finishes a batch of events or whenever the processor extends the claim. When to extend a claim differs between the Tracking and Pooled Streaming processor. You should check out the token claim section if you want to know how to configure these values. To further clarify, a streaming processor’s thread needs to be able to update the token claim and, by extension, the timestamp to ensure it won’t get stolen. Hence, a staling processor thread will, one way or another, eventually lose the claim. Examples of when a thread may get its token stolen are: - Overall slow event handling - Too large event batch size - Blocking operations inside event handlers - Blocking exceptions inside event handlers The consequence of token stealing is that an event may be handled twice (or more). When a thread steals a token, the original thread was already processing events from the token’s position. To protect against doubling event handling, Axon Framework will combine committing the event handling task with updating the token. As the token claim is required to update the token, the original thread will fail the update. Following this, a rollback occurs on the Unit of Work, resolving most issues arising from token stealing. The ability to rollback event handling tasks sheds light on the consequences of token stealing. Most event processors project events into a projection stored within a database. Furthermore, if you store the projection in the same database as the token, the rollback will ensure the change is not persisted. Thus, the consequence of token stealing is limited to wasting processor cycles. This scenario is why we recommend storing tokens and projections in the same database. If a rollback is out of the question for an event handling task, we strongly recommend making the task idempotent. You may have this scenario when, for example, the projection and tokens do not reside in the same database. or when the event handler dispatches an operation (for example, through the CommandGateway). In making the invoked operation idempotent, you ensure that whenever the thread stealing a token handles an event twice (or more), the outcome will be identical. Without idempotency, the consequences of token stealing can be many fold: - Your projection (stored in a different database than your tokens!) may incorrectly project the state. - An event handler putting messages on a queue will put a message on the queue again. - A Saga Event Handler invoking a third-party service will invoke that service again. - An event handler sending an email will send that email again. In short, any operation introducing a side effect that isn’t handled in an idempotent fashion will occur again when a token is stolen. Concluding, we can separate the consequence of token stealing into roughly three scenarios: 1. We can rollback the operation. In this case, the only consequence is wasted processor cycles. 2. The operation is idempotent. In this case, the only consequence is wasted processor cycles. 3. When the task cannot be rolled back nor performed in an idempotent fashion, compensating actions may be the way out. The TokenStore provides the CRUD operations for the StreamingEventProcessor to interact with TrackingTokens. The streaming processor will use the store to construct, fetch and claim tokens. When no token store is explicitly defined, an InMemoryTokenStore is used. The InMemoryTokenStore is not recommended in most production scenarios since it cannot maintain the progress through application shutdowns. Unintentionally using the InMemoryTokenStore counts towards one of the unexpected scenarios where the framework creates an initial token on each application start-up. The framework provides a couple of TokenStore implementations: InMemoryTokenStore - A TokenStore implementation that keeps the tokens in memory. This implementation does not suffice as a production-ready store in most applications. JpaTokenStore - A TokenStore implementation using JPA to store the tokens with. Expects that a table is constructed based on the org.axonframework.eventhandling.tokenstore.jpa.TokenEntry. It is easily auto-configurable with, for example, Spring Boot. JdbcTokenStore - A TokenStore implementation using JDBC to store the tokens with. Expects that the schema is constructed through the JdbcTokenStore#createSchema(TokenTableFactory) method. Several TokenTableFactory can be chosen here, like the GenericTokenTableFactory, PostgresTokenTableFactory or Oracle11TokenTableFactory implementation. MongoTokenStore- A TokenStore implementation using Mongo to store the tokens with. Where to store Tokens? Where possible, we recommend using a token store that stores tokens in the same database as to where the event handlers update the view models. This way, changes to the view model can be stored atomically with the changed tokens. Furthermore, it guarantees exactly once processing semantics. Note that you can configure the token store to use for a streaming processor in the EventProcessingConfigurer: To configure a TokenStore for all processors: public class AxonConfig { // omitting other configuration methods... public void registerTokenStore(EventProcessingConfigurer processingConfigurer) { TokenStore tokenStore = JpaTokenStore.builder() // … .build(); processingConfigurer.registerTokenStore(config -> tokenStore); } } Alternatively, to configure a TokenStore for a specific processor, use: public class AxonConfig { // omitting other configuration methods... public void registerTokenStore(EventProcessingConfigurer processingConfigurer, String processorName) { TokenStore tokenStore = JdbcTokenStore.builder() // … .build(); processingConfigurer.registerTokenStore(processorName, config -> tokenStore); } } The default TokenStore implementation is defined base dependencies available in Spring Boot, in the following order: If any TokenStore bean is defined, that bean is used. Otherwise, if an EntityManager is available, the JpaTokenStore is defined. Otherwise, if a DataSource is defined, the JdbcTokenStore is created. Lastly, the InMemoryToken store is used. To override the TokenStore, either define a bean in a Spring @Configuration class: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public TokenStore myTokenStore() { return JpaTokenStore.builder() // … .build(); } } Alternatively, inject the EventProcessingConfigurer, which allows more fine-grained customization: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule tokenStoreConfigurerModule() { TokenStore tokenStore = JdbcTokenStore.builder() // … .build(); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerTokenStore(conf -> tokenStore) // or, to define one for a specific processor: .registerTokenStore(\"my-processor\", conf -> tokenStore) ); } } Implementations of TokenStore might share state in the underlying storage. To ensure correct operation, a token store has a unique identifier that uniquely identifies the storage location of the tokens in that store. This identifier can be queried with the retrieveStorageIdentifier method of your event processor. StreamingEventProcessor eventProcessor = /*…*/; String tokenStoreId = eventProcessor.getTokenStoreIdentifier(); Streaming processors can use multiple threads to process an event stream. Using multiple threads allows the StreamingEventProcessor to more efficiently process batches of events. As described here, a streaming processor’s thread requires a claim on a tracking token to process events. Thus, to be able to parallelize the load, we require several tokens per processor. To that end, each token instance represents a segment of the event stream, wherein each segment is identified through a number. The stream segmentation approach ensures events aren’t handled twice (or more), as that would otherwise introduce unintentional duplication. Due to this, the Streaming Processor’s API references segment claims instead of token claims throughout. You can define the number of segments used by adjusting the initialSegmentCount property. Only when a streaming processor starts for the first time can it initialize the number of segments to use. This requirement follows from the fact each token represents a single segment. Tokens, in turn, can only be initialized if they are not present yet, as is explained in more detail here. Whenever the number of segments should be adjusted during runtime, you can use the split and merge functionality. To adjust the number of initial segments, consider the following sample: The default number of segments f TrackingEventProcessor is one. public class AxonConfig { // omitting other configuration methods... public void configureSegmentCount(EventProcessingConfigurer processingConfigurer) { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forParallelProcessing(2) .andInitialSegmentsCount(2); processingConfigurer.registerTrackingEventProcessorConfiguration(\"my-processor\", config -> tepConfig); } } The default number of segments for the TrackingEventProcessor is one. @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule segmentCountConfigurerModule() { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forParallelProcessing(2) .andInitialSegmentsCount(2); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerTrackingEventProcessorConfiguration( \"my-processor\", config -> tepConfig ) ); } } The default number of segments for the PooledStreamingEventProcessor is sixteen. public class AxonConfig { // omitting other configuration methods... public void configureSegmentCount(EventProcessingConfigurer processingConfigurer) { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.initialSegmentCount(32); processingConfigurer.registerPooledStreamingEventProcessorConfiguration(\"my-processor\", psepConfig); } } The default number of segments for the PooledStreamingEventProcessor is sixteen. @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule segmentCountConfigurerModule() { EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.initialSegmentCount(32); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessorConfiguration( \"my-processor\", psepConfig ) ); } } The default number of segments for a TrackingEventProcessor and PooledStreamingEventProcessor is one and sixteen, respectively. axon.eventhandling.processors.my-processor.mode=pooled # Sets the initial number of segments axon.eventhandling.processors.my-processor.initialSegmentCount=32 Parallel Processing and Subscribing Event Processors Note that Subscribing Event Processor don’t manage their own threads. Therefore, it is not possible to configure how they should receive their events. Effectively, they will always work on a sequential-per-aggregate basis, as that is generally the level of concurrency in the command handling component. The Event Handling Components a processor is in charge of may have specific expectations on the event order. The ordering is guaranteed when only a single thread is processing events. Maintaining the ordering requires additional work when the stream is segmented for parallel processing, however. When this is the case, the processor must ensure it sends the events to these handlers in that specific order. Axon uses the SequencingPolicy for this. The SequencingPolicy is a function that returns a value for any given message. If the return value of the SequencingPolicy function is equal for two distinct event messages, it means that those messages must be processed sequentially. By default, Axon components will use the SequentialPerAggregatePolicy, making it so that events published by the same aggregate instance will be handled sequentially. Check out this section to understand how to influence the sequencing policy. Each node running a streaming processor will attempt to start its configured amount of threads to start processing events. The number of segments that a single thread can claim differ between the Tracking- and Pooled Streaming Event Processor. A tracking processor can only claim a single segment per thread, whereas the pooled streaming processor can claim any amount of segments per thread. These approaches provide different pros and cons for each implementation, which this section explains further. Even though events are processed asynchronously from their publisher, it is often desirable to process certain events in their publishing order. In Axon, the SequencingPolicy controls this order. The SequencingPolicy defines whether events must be handled sequentially, in parallel, or a combination of both. Policies return a sequence identifier of a given event. If the policy returns the same identifier for two events, they must be handled sequentially by the Event Handling Component. Thus, if the SequencingPolicy returns a different value for two events, they may be processed concurrently. Note that if the policy returns a null sequence identifier, the event may be processed in parallel with any other events. Parallel Processing and Sagas A saga instance is never invoked concurrently by multiple threads. Therefore, the SequencingPolicy is irrelevant for a saga. Axon will ensure each saga instance receives the events it needs to process in the order they have been published on the event bus. Conceptually, the SequencingPolicy decides whether an event belongs to a given segment. Furthermore, Axon guarantees that Events that are part of the same segment are processed sequentially. The framework provides several policies you can use out of the box: SequentialPerAggregatePolicy - The default policy. It will force domain events that were raised from the same aggregate to be handled sequentially. Thus, events from different aggregates may be handled concurrently. This policy is typically suitable for Event Handling Components that update details from aggregates in databases. FullConcurrencyPolicy - This policy will tell Axon that this Event Processor may handle all events concurrently. This means that there is no relationship between the events that require them to be processed in a particular order. SequentialPolicy - This policy tells Axon that it can process all events sequentially. Handling of an event will start when the handling of a previous event has finished. PropertySequencingPolicy - When configuring this policy, the user is required to provide a property name or property extractor function. This implementation provides a flexible solution to set up a custom sequencing policy based on a standard value present in your events. Note that this policy only reacts to properties present in the event class. MetaDataSequencingPolicy - When configuring this policy, the user is required to provide a metaDataKey to be used. This implementation provides a flexible solution to set up a custom sequencing policy based on a standard value present in your events' metadata. Consider the following snippets when configuring a (custom) SequencingPolicy: public class AxonConfig { // omitting other configuration methods... public void configureSequencingPolicy(EventProcessingConfigurer processingConfigurer) { PropertySequencingPolicy mySequencingPolicy = PropertySequencingPolicy.builder(SomeEvent.class, String.class) .propertyName(\"myProperty\") .build(); processingConfigurer.registerDefaultSequencingPolicy(config -> mySequencingPolicy) // or, to define one for a specific processor: .registerSequencingPolicy(\"my-processor\", config -> mySequencingPolicy); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule sequencingPolicyConfigurerModule(SequencingPolicy> mySequencingPolicy) { return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerDefaultSequencingPolicy(config -> mySequencingPolicy) // or, to define one for a specific processor: .registerSequencingPolicy(\"my-processor\", config -> mySequencingPolicy) ); } @Bean public SequencingPolicy> mySequencingPolicy() { return new SequentialPolicy(); } } When we want to configure the SequencingPolicy in a properties file, we should provide a bean name: axon.eventhandling.processors.my-processor.mode=tracking axon.eventhandling.processors.my-processor.sequencing-policy=mySequencingPolicy This approach does require the bean name to be present in the Application Context of course: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public SequencingPolicy> mySequencingPolicy() { return new FullConcurrencyPolicy(); } } If the available policies do not suffice, you can define your own. To that end, we should implement the SequencingPolicy interface. This interface defines a single method, getSequenceIdentifierFor(T), that returns the sequence identifier for a given event: public interface SequencingPolicy { Object getSequenceIdentifierFor(T event); } A Streaming Processor cannot process events in parallel without multiple threads configured. We can process events in parallel by running several nodes of an application. Or by configuring a StreamingEventProcessor to use several threads. The following section describes the threading differences between the Tracking- and Pooled Streaming Event Processor. These sections are followed up with samples on configuring multiple threads for the TEP and PSEP, respectively. Thread and Segment Count Adjusting the number of threads will not automatically parallelize a Streaming Processor. A segment claim is required to let a thread process any events. Hence, increasing the thread count should be paired with adjusting the segment count. The TrackingEventProcessor uses a ThreadFactory to start the process of claiming segments. It will use a single thread per segment it is able to claim until the processor exhausts the configured amount of threads. Each thread will open a stream with the StreamableMessageSource and start processing events at their own speed. Other segment operations, like split and merge, are processed by the thread owning the segment operated on. Since the tracking processor can only claim a single segment per thread, segments may go unprocessed if there are more segments than threads. Hence, we recommend setting the number of threads (on every node) higher than or equal to the total number of segments. To increase event handling throughput, we recommend changing the number of threads. How to do this is shown in the following sample: public class AxonConfig { // omitting other configuration methods... public void configureThreadCount(EventProcessingConfigurer processingConfigurer) { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forParallelProcessing(4) .andInitialSegmentsCount(4); processingConfigurer.registerTrackingEventProcessorConfiguration(\"my-processor\", config -> tepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule threadCountConfigurerModule() { TrackingEventProcessorConfiguration tepConfig = TrackingEventProcessorConfiguration.forParallelProcessing(4) .andInitialSegmentsCount(4); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerTrackingEventProcessorConfiguration( \"my-processor\", config -> tepConfig ) ); } } axon.eventhandling.processors.my-processor.mode=tracking axon.eventhandling.processors.my-processor.thread-count=4 axon.eventhandling.processors.my-processor.initial-segment-count=4 The PooledStreamingEventProcessor uses two threads pools instead of the single fixed set of threads used by the TrackingEventProcessor. The first thread pool is in charge of opening a stream with the event source, claiming as many segments as possible, and delegating all the work. The work it coordinates is foremost the events to handle. Next to event coordination, it deals with segment operations like split and merge. The component coordinating all the work is called the Coordinator. This coordinator defaults to using a ScheduledExecutorService with a single thread, which suffices in most scenarios. The second thread pool deals with all the segments the Coordinator of the pooled streaming processor could claim. The Coordinator starts a WorkPackage for each segment and provides them the events to handle. The work package will, in turn, invoke the Event Handling Components to process the events. These packages run within the second thread pool, the so-called \"worker executor\" pool. The worker-pool also defaults to ScheduledExecutorService with a single thread. When you want to increase event handling throughput, we recommend changing the number of threads for the worker thread pool. How to do this is shown in the following sample: public class AxonConfig { // omitting other configuration methods... public void configureThreadCount(EventProcessingConfigurer processingConfigurer) { // the \"name\" is the name of the processor, which can be used to define the thread factory name Function coordinatorExecutorBuilder = name -> Executors.newScheduledThreadPool(1, new AxonThreadFactory(\"Coordinator - \" + name)); Function workerExecutorBuilder = name -> Executors.newScheduledThreadPool(16, new AxonThreadFactory(\"Worker - \" + name)); EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.coordinatorExecutor(coordinatorExecutorBuilder) .workerExecutor(workerExecutorBuilder) .initialSegmentCount(32); processingConfigurer.registerPooledStreamingEventProcessorConfiguration(\"my-processor\", psepConfig); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule threadCountConfigurerModule() { // the \"name\" is the name of the processor, which can be used to define the thread factory name Function coordinatorExecutorBuilder = name -> Executors.newScheduledThreadPool(1, new AxonThreadFactory(\"Coordinator - \" + name)); Function workerExecutorBuilder = name -> Executors.newScheduledThreadPool(16, new AxonThreadFactory(\"Worker - \" + name)); EventProcessingConfigurer.PooledStreamingProcessorConfiguration psepConfig = (config, builder) -> builder.coordinatorExecutor(coordinatorExecutorBuilder) .workerExecutor(workerExecutorBuilder) .initialSegmentCount(32); return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessorConfiguration( \"my-processor\", psepConfig ) ); } } axon.eventhandling.processors.my-processor.mode=pooled # Only the thread count of the Worker can be influenced through a properties file! axon.eventhandling.processors.my-processor.thread-count=16 axon.eventhandling.processors.my-processor.initial-segment-count=32 Based on the threading approaches of the tracking processor and pooled streaming processor, there are a couple of differences to note: Open Event Streams - The tracking processor will open a stream per segment it claims. The pooled streaming processor will always open a single event stream and delegate the events to the segment workers. Due to this, the tracking processor will use more I/O resources than the pooled streaming processor. However, the TEP’s segments can move at their own speed as they open a dedicated event stream. The PSEP’s segments will at least process as fast as the slowest segment in the set. Segment Claims per Thread - The tracking processor can only claim a single segment per thread. The pooled streaming processor can claim any amount of segments, regardless of the number of threads configured. The maxClaimedSegments is configurable if required (the defaults is Short.MAX). The fact the TEP can only claim a single segment per thread highlights a problem of that implementation. Events will go unprocessed if there are more segments than threads when using the tracking processor since events belong to a single segment. Furthermore, it makes dynamic scaling tougher since you cannot adjust the number of threads at runtime. Here we see significant benefits for using the PSEP instead of the TEP since it completely drops the \"one segment per thread\" policy. As such, partial processing is never a problem, the PooledStreamingEventProcessor would encounter. Thread Pool Configuration - The tracking processor does not allow sharing a thread pool between different instances. For the pooled streaming processor, a ScheduledExecutorService is configurable, which allows sharing the executor between different processor instances. Thus, the PSEP provides a higher level of flexibility towards optimizing the total amount of threads used within an application. The freedom in thread pool configuration is helpful when, for example, the number of different Event Processors in a single application increases. Which Streaming Processor should I use? In most scenarios, the PooledStreamingEventProcessor is the recommended processor implementation. We conclude this based on the segment-to-thread-count ratio, its ability to share thread pools, and the lower amount of opened event streams. The TrackingEventProcessor will still be ideal if you anticipate the processing speed between segments to differ significantly. Also, if the application does not have too many processor instances, the need to share thread pools is loosened. For streaming processors, it doesn’t matter whether the threads handling the events are all running on the same node or on different nodes hosting the same (logical) processor. When two (or more) instances of a streaming processor with the same name are active on different machines, they are considered two instances of the same logical processor. Hence, it is not just a processor’s own threads that compete for segments but also the processors on different application instances. Thus, in a multi-node setup, each processor instance will try to claim segments, preventing events assigned to that segment from being processed on other nodes. In this process, the processor updates the token by adding a node identifier when it claims a segment to enforce the claim. The node identifier is configurable on the TokenStore. By default, it will use the JVM’s name (usually a combination of the hostname and process ID) as the nodeId. In a multi-node scenario, a fair distribution of the segments is often desired. Otherwise, the event processing load could be distributed unequally over the active instances. There are roughly three approaches to balancing the number of segments claimed per node: Through the Axon Server Dashboard’s load balancing feature. For Axon Server and Spring Boot users, you can use the axon.axonserver.eventhandling.processors.[processor-name].load-balancing-strategy application property. Directly on a StreamingEventProcessor, with the releaseSegment(int segmentId) or releaseSegment(int segmentId, long releaseDuration, TimeUnit unit) method. When Axon Server is in place, we recommend using either option one or two. Where option one requires access to the dashboard before load balancing is activated, option two works from within your framework application’s properties file. For those looking to configure load balancing through option 2, please consider the following application.properties file example: # Enables automatic balancing for event processor \"my-processor.\" # Setting automatic balancing to true causes Axon Server to periodically check whether the segments are balanced. # Note that automatic balancing is an Enterprise feature of Axon Server. axon.axonserver.eventhandling.processors.my-processor.automatic-balancing=true # Set the load balancing strategy to, for example, \"threadNumber.\" # Note that this task is executed only once, on the start up of the Axon Framework application. axon.axonserver.eventhandling.processors.my-processor.load-balancing-strategy=threadNumber Whenever Axon Server is not used, we can achieve load balancing by having a streaming processor release its segments. Releasing segments is done by calling the releaseSegment method. When invoking releaseSegment, the StreamingEventProcessor will \"let go of\" the segment for some time. class StreamingProcessorService { // The EventProcessingConfiguration allows access to all the configured EventProcessors private EventProcessingConfiguration processingConfiguration; // ... void releaseSegmentFor(String processorName, int segmentId) { // EventProcessingConfiguration#eventProcessor(String, Class) returns an optional of the event processor processingConfiguration.eventProcessor(processorName, StreamingEventProcessor.class) .ifPresent(streamingProcessor -> streamingProcessor.releaseSegment(segmentId)); } } The Streaming Event Processor provides scalability by supporting parallel processing. Through this, it is possible to tune the processor’s performance by adjusting the number of threads. However, only changing the number of threads is insufficient since the parallelization is dictated through the number of segments. When there is a high event load, ideally, we increase the number of segments. In turn, we can reduce the number of segments again if the load on the streaming processor decreases. To change the number of segments at runtime, the split and merge operations should be used. Splitting and merging allow you to control the number of segments dynamically. There are roughly two approaches to adjust the number of segments for a streaming processor: Through the Axon Server Dashboard with the split and merge buttons Directly on a StreamingEventProcessor, with the splitSegment(int segmentId) and mergeSegment(int segmentId) methods When Axon Server is in place, we recommend using option one since it is easiest to use. Whenever Axon Server is not used, and you want to adjust the number of segments, the split and merge methods should be accessible from within your application. For those required to take the second approach, consider the following snippet as a form of guidance: class StreamingProcessorService { // The EventProcessingConfiguration allows access to all the configured EventProcessors private EventProcessingConfiguration processingConfiguration; // ... void splitSegmentFor(String processorName, int segmentId) { // EventProcessingConfiguration#eventProcessor(String, Class) returns an optional of the event processor processingConfiguration.eventProcessor(processorName, StreamingEventProcessor.class) .ifPresent(streamingProcessor -> { // Use the result to check whether the operation succeeded CompletableFuture result = streamingProcessor.splitSegment(segmentId); }); } void mergeSegmentFor(String processorName, int segmentId) { processingConfiguration.eventProcessor(processorName, StreamingEventProcessor.class) .ifPresent(streamingProcessor -> { // Use the result to check whether the operation succeeded CompletableFuture result = streamingProcessor.mergeSegment(segmentId); }); } } Note that if you are moving towards a solution using the StreamingProcessorController, there are a couple of points to consider. When invoking the split/merge operation on a StreamingEventProcessor, that processor should be in charge of the segment you want to split or merge. Thus, either the streaming processor already has a claim on the segments or can claim the segments. Without the claims, the processor will simply fail the split or merge operation. It is advised to check which segments a streaming processor has a claim on. For that, status of the processor is used. The status information shows which segments a processor instance owns. This guides which processor to invoke the split or merge on. When doing a merge, the streaming processor should be in charge of both the provided segmentId and the segment the framework will merge it with. We can calculate the segment identifier the provided segmentId will be merged with through the`Segment#mergeableSegmentId method. Segment Selection Considerations When splitting or merging through Axon Server, it chooses the most appropriate segment to split or merge for you. When using the Axon Framework API directly, the developer should deduce the segment to split or segments to merge by themselves: Split: for fair balancing, a split is ideally performed on the largest segment Merge: for fair balancing, a merge is ideally performed on the smallest segment A benefit of streaming events is that we can reopen the stream at any point in time. Whenever some event handling components misbehaved, and the view models they update or actions they triggered should happen again, starting anew can be useful. Handling events again by adjusting the position on the stream is what’s called \"a replay,\" a feature supported by the StreamingEventProcessor. The following sections describe how to initiate a replay and what replay API the framework provides. The reset API revolves around the resetTokens() method and provides a couple of options: resetTokens() - Simple reset, adjusting the TrackingToken to the configured initial tracking token resetTokens(R resetContext) - Resets the TrackingToken to the configured initial tracking token, providing the resetContext to the ResetHandlers resetTokens(Function>, TrackingToken> initialTrackingTokenSupplier) - Resets the TrackingToken to the results of the initialTrackingTokenSupplier resetTokens(Function>, TrackingToken> initialTrackingTokenSupplier, R resetContext) - Resets the TrackingToken to the results of the initialTrackingTokenSupplier, providing the resetContext to the ResetHandlers resetTokens(TrackingToken startPosition) - Resets the TrackingToken to the provided startPosition resetTokens(TrackingToken startPosition, R resetContext) - Resets the TrackingToken to the provided startPosition, providing the resetContext to the ResetHandlers Partial Replays A replay does not always have to start \"from the beginning of time.\" Partially replaying the event stream suffices for a lot of applications. To perform a so-called \"partial replay,\" you should provide the token at a specific point in time. The StreamableMessageSource’s `createTokenAt(Instant) and createTokenSince(Duration) can be used for this. If creating tokens based on time is not sufficient, but creating tokens based on the exact position is something that is more convenient, you could create a TrackingToken providing the position and give it to resetTokens(TrackingToken startPosition) or resetTokens(TrackingToken startPosition, R resetContext) methods. The concrete implementation of TrackingToken to provide depends on the Token Store being used. Be mindful that when initiating a partial replay, the event handlers may handle an event in the middle of model construction. Hence, event handlers need to be \"aware\" that some events might not have been handled at all. Making the event handlers lenient (for example, deal with missing data) or performing ad-hoc manual replays would help in that area. As the method name suggests, the reset adjusts the tracking token to a new position. When starting a reset, the streaming processor is required to claim all its segments. All claims are required since the processor needs to update all tokens to their new position to start the replay. To achieve this, the streaming event processor must be inactive when starting a reset. Hence, it is required to be shut down first before invoking the resetTokens operation. Once the reset was successful, the processor can be started up again. Consider the following sample on how to trigger a reset within an application: class StreamingProcessorController { private EventProcessingConfiguration processingConfiguration; // ... void resetTokensFor(String processorName) { // EventProcessingConfiguration#eventProcessor(String, Class) returns an optional of the event processor processingConfiguration.eventProcessor(processorName, StreamingEventProcessor.class) .ifPresent(streamingProcessor -> { // shutdown this streaming processor streamingProcessor.shutDown(); // reset the tokens to prepare the processor streamingProcessor.resetTokens(); // start the processor to initiate the replay streamingProcessor.start(); }); } } class StreamingProcessorController { private EventProcessingConfiguration processingConfiguration; // ... void resetTokensFor(String processorName, Object resetContext) { // EventProcessingConfiguration#eventProcessor(String, Class) returns an optional of the event processor processingConfiguration.eventProcessor(processorName, StreamingEventProcessor.class) .ifPresent(streamingProcessor -> { // shutdown this streaming processor streamingProcessor.shutDown(); // reset the tokens to prepare the processor streamingProcessor.resetTokens(resetContext); // start the processor to initiate the replay streamingProcessor.start(); }); } } Resets in multi-node environments If you are in a multi-node scenario, that means all nodes should shut down the StreamingEventProcessor. Otherwise, another node will pick up the segments released by the inactive processor instance. Being able to shut down or start up all streaming processor instances is most easily achieved through the Axon Server Dashboard. The application’s dashboard provides a \"start\" and \"stop\" button, which will start/stop the processor on every node. When Axon Server is not used, you should construct a custom endpoint in your application. The StreamingProcessorService sample shared above would be ideal for adding a start and stop method. Initiating a replay through the StreamingEventProcessor opens up an API to tap into the process of replaying. It is, for example, possible to define a @ResetHandler, which provides a hook to prepare an Event Handling Component before the replay begins. A processor will invoke ResetHandler annotated methods as a result of StreamingEventProcessor#resetTokens. During a reset through the StreamingEventProcessor#resetTokens API, you can supply a resetContext parameter. This context is supplied to @ResetHandler annotated methods and saved in the ReplayToken. This context can, for the duration of the replay, be accessed using the ReplayToken.replayContext methods or can be injected into event handlers using the @ReplayContext annotation. The following sample Event Handling Component shows the available replay API: @AllowReplay // 1. @ProcessingGroup(\"card-summary\") public class CardSummaryProjection { //... @EventHandler @DisallowReplay // 2. - It is possible to prevent some handlers from being replayed public void on(CardIssuedEvent event) { // This event handler performs a \"side effect\", // like sending an e-mail or a sms. // Neither, is something we want to reoccur when a // replay happens, hence we disallow this method // to be replayed } @EventHandler public void on(CardRedeemedEvent event, ReplayStatus replayStatus /* 3. */) { // We can wire a ReplayStatus here so we can see whether this // event is delivered to our handler as a 'REGULAR' event or // a 'REPLAY' event // Perform event handling } @ResetHandler // 4. - This method will be called before replay starts public void onReset(ResetContext resetContext) { // Do pre-reset logic, like clearing out the projection table for a // clean slate. The given resetContext is [optional], allowing the // user to specify in what context a reset was executed. } @EventHandler public void on(CardCancelledEvent event, @ReplayContext CardReplayContext context /* 5. */) { // During replays, this method will get the CardReplayContext injected that was providing during the reset call. // If there is no replay, no context was supplied or the context type does not match, the parameter is null. } //... } The CardSummaryProjection shows a couple of interesting things to take note of when it comes to \"being aware\" of a replay in progress: An @AllowReplay can be used, situated either on an entire class or an @EventHandler annotated method. It defines whether the processor should invoke the given class or method when a replay is in transit. In addition to allowing a replay, @DisallowReplay can also be used. Similar to @AllowReplay, you can place it on class level and methods. It serves to define whether a processor should not invoke the class or method when a replay is in transit. To have more fine-grained control on what (not) to do during a replay, we can use the ReplayStatus parameter. The ReplayStatus is an additional parameter that we can add to @EventHandler annotated methods. It allows conditional operations in the event handlers based on whether a replay is taking place. If it is necessary to perform certain pre-replay logic, such as clearing out a projection table, we can use the @ResetHandler annotation. It allows adding a \"reset context\" to provide more information on why the reset is taking place. To include a resetContext the resetTokens(R resetContext) method (or other methods containing the resetContext parameter) should be invoked. The type of the resetContext is up to the user. If it is necessary to use information that was available at time of calling resetTokens(R resetContext) in your event handlers during a replay, you can use the @ReplayContext annotation to get access to this information. This information is stored in the ReplayToken and will be available until the end of the replay. The type of the resetContext is up to the user and is the same context as is used for the @ResetHandler (see 4.). The type of the resetContext has to match the parameter’s, or it will be null. You can configure a Streaming Event Processor to use multiple sources to process events from. When required to process events from several sources, we can configure a specific type of StreamableMessageSource: the MultiStreamableMessageSource. The MultiStreamableMessageSource is useful when a streaming processor should act on the events from: several event stores, multiple-contexts, or from different storage types (for example, an Event Store and a Kafka Stream) Having multiple sources means that there might be a choice of multiple events that the processor could consume at any given instant. Therefore, you can specify a Comparator to choose between them. The default implementation chooses the event with the oldest timestamp (that is, the event waiting for the longest). Using multiple sources also means that the streaming processor’s polling interval needs to be divided between sources. Some sources might use a strategy to optimize event discovery, thus minimizing overhead in establishing costly connections to the data sources. To that end, you can choose which source the processor does most of the polling on using the longPollingSource() method in the builder. This operation ensures one source consumes most of the polling interval while also checking intermittently for events on the other sources. The MultiStreamableMessageSource defaults the longPollingSource to the last configured source. Consider the following sample when constructing a MultiStreamableMessageSource: public class AxonConfig { // omitting other configuration methods... public MultiStreamableMessageSource buildMultiStreamableMessageSource( StreamableMessageSource> eventSourceA, StreamableMessageSource> eventSourceB, Comparator>> priorityA ) { return MultiStreamableMessageSource.builder() .addMessageSource(\"eventSourceA\", eventSourceA) .addMessageSource(\"eventSourceB\", eventSourceB) .longPollingSource(\"eventSourceA\") // Overrides eventSourceB as the longPollingStream .trackedEventComparator(priorityA) // Where 'priorityA' is a comparator prioritizing events from eventSourceA .build(); } } Assuming a buildMultiStreamableMessageSource(…​) method is present, we can use the outcome to register a processor with the configuring EventProcessingConfigurer: public class AxonConfig { // omitting other configuration methods... public void configureTrackingProcessor(EventProcessingConfigurer processingConfigurer) { processingConfigurer.registerTrackingEventProcessor( \"my-processor\", config -> buildMultiStreamableMessageSource(/*...*/) ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule trackingProcessorConfigurerModule() { return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerTrackingEventProcessor( \"my-processor\", config -> buildMultiStreamableMessageSource(/*...*/) ) ); } } public class AxonConfig { // omitting other configuration methods... public void configurePooledStreamingProcessor(EventProcessingConfigurer processingConfigurer) { processingConfigurer.registerPooledStreamingEventProcessor( \"my-processor\", config -> buildMultiStreamableMessageSource(/*...*/) ); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule pooledStreamingProcessorConfigurerModule() { return configurer -> configurer.eventProcessing( processingConfigurer -> processingConfigurer.registerPooledStreamingEventProcessor( \"my-processor\", config -> buildMultiStreamableMessageSource(/*...*/) ) ); } } When we want to configure the StreamableMessageSource in a properties file, we should provide a bean name: axon.eventhandling.processors.my-processor.mode=pooled axon.eventhandling.processors.my-processor.source=multiStreamableMessageSource This approach does require the bean name to be present in the Application Context of course: @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public MultiStreamableMessageSource multiStreamableMessageSource( StreamableMessageSource> eventSourceA, StreamableMessageSource> eventSourceB, Comparator>> priorityA ) { return MultiStreamableMessageSource.builder() .addMessageSource(\"eventSourceA\", eventSourceA) .addMessageSource(\"eventSourceB\", eventSourceB) .longPollingSource(\"eventSourceA\") .trackedEventComparator(priorityA) .build(); } }","title":"Streaming Event Processor","component":"axon-framework-reference","version":"4.10","name":"streaming","url":"/axon-framework-reference/4.10/events/event-processors/streaming/","titles":[{"text":"Configuring","hash":"configuring","id":1},{"text":"Configuring a tracking processor","hash":"_configuring_a_tracking_processor","id":2},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":3},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":4},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":5},{"text":"Spring Boot auto configuration - Java","hash":"_spring_boot_auto_configuration_java","id":6},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file","id":7},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":8},{"text":"Spring Boot auto configuration - Java","hash":"_spring_boot_auto_configuration_java_2","id":9},{"text":"Configuring a pooled streaming processor","hash":"_configuring_a_pooled_streaming_processor","id":10},{"text":"Axon Configuration API","hash":"_axon_configuration_api_4","id":11},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_2","id":12},{"text":"Axon Configuration API","hash":"_axon_configuration_api_5","id":13},{"text":"Spring Boot auto configuration - Java","hash":"_spring_boot_auto_configuration_java_3","id":14},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file_2","id":15},{"text":"Axon Configuration API","hash":"_axon_configuration_api_6","id":16},{"text":"Spring Boot auto configuration - Java","hash":"_spring_boot_auto_configuration_java_4","id":17},{"text":"Error mode","hash":"error-mode","id":18},{"text":"Tracking tokens","hash":"tracking-tokens","id":19},{"text":"Initial tracking token","hash":"_initial_tracking_token","id":20},{"text":"Token configuration","hash":"_token_configuration","id":21},{"text":"Initial token","hash":"_initial_token","id":22},{"text":"Tracking processor - Axon Configuration API","hash":"_tracking_processor_axon_configuration_api","id":23},{"text":"Tracking processor -  Spring Boot auto configuration","hash":"_tracking_processor_spring_boot_auto_configuration","id":24},{"text":"Pooled streaming processor - Axon Configuration API","hash":"_pooled_streaming_processor_axon_configuration_api","id":25},{"text":"Pooled streaming processor - Spring Boot auto configuration","hash":"_pooled_streaming_processor_spring_boot_auto_configuration","id":26},{"text":"Token claims","hash":"_token_claims","id":27},{"text":"Tracking processor - Axon Configuration API","hash":"_tracking_processor_axon_configuration_api_2","id":28},{"text":"Tracking processor -  Spring Boot auto configuration","hash":"_tracking_processor_spring_boot_auto_configuration_2","id":29},{"text":"Pooled streaming processor - Axon Configuration API","hash":"_pooled_streaming_processor_axon_configuration_api_2","id":30},{"text":"Pooled streaming processor -  Spring Boot auto configuration","hash":"_pooled_streaming_processor_spring_boot_auto_configuration_2","id":31},{"text":"Token stealing","hash":"token-stealing","id":32},{"text":"When is a token stolen?","hash":"_when_is_a_token_stolen","id":33},{"text":"What are the consequences of token stealing?","hash":"_what_are_the_consequences_of_token_stealing","id":34},{"text":"Token store","hash":"token-store","id":35},{"text":"Axon Configuration API","hash":"_axon_configuration_api_7","id":36},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_3","id":37},{"text":"Retrieving the token store identifier","hash":"_retrieving_the_token_store_identifier","id":38},{"text":"Parallel processing","hash":"parallel-processing","id":39},{"text":"Tracking processor - Axon Configuration API","hash":"_tracking_processor_axon_configuration_api_3","id":40},{"text":"Tracking processor - Spring Boot auto configuration","hash":"_tracking_processor_spring_boot_auto_configuration_3","id":41},{"text":"Pooled streaming processor - Axon Configuration API","hash":"_pooled_streaming_processor_axon_configuration_api_3","id":42},{"text":"Pooled streaming processor -  Spring Boot auto configuration","hash":"_pooled_streaming_processor_spring_boot_auto_configuration_3","id":43},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file_3","id":44},{"text":"Sequential processing","hash":"sequential-processing","id":45},{"text":"Axon Configuration API","hash":"_axon_configuration_api_8","id":46},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_4","id":47},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file_4","id":48},{"text":"Thread configuration","hash":"_thread_configuration","id":49},{"text":"Tracking processor threading","hash":"_tracking_processor_threading","id":50},{"text":"Axon Configuration API","hash":"_axon_configuration_api_9","id":51},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_5","id":52},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file_5","id":53},{"text":"Pooled streaming processor threading","hash":"_pooled_streaming_processor_threading","id":54},{"text":"Axon Configuration API","hash":"_axon_configuration_api_10","id":55},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration_6","id":56},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file_6","id":57},{"text":"Differences between tracking and pooled streaming","hash":"_differences_between_tracking_and_pooled_streaming","id":58},{"text":"Multi-node processing","hash":"_multi_node_processing","id":59},{"text":"Splitting and merging segments","hash":"splitting-and-merging-segments","id":60},{"text":"Replaying events","hash":"replaying-events","id":61},{"text":"Triggering a reset","hash":"_triggering_a_reset","id":62},{"text":"Reset without reset context","hash":"_reset_without_reset_context","id":63},{"text":"Reset with reset context","hash":"_reset_with_reset_context","id":64},{"text":"Replay API","hash":"_replay_api","id":65},{"text":"Multiple event sources","hash":"_multiple_event_sources","id":66},{"text":"Tracking processor - Axon Configuration API","hash":"_tracking_processor_axon_configuration_api_4","id":67},{"text":"Tracking processor -  Spring Boot auto configuration","hash":"_tracking_processor_spring_boot_auto_configuration_4","id":68},{"text":"Pooled streaming processor - Axon Configuration API","hash":"_pooled_streaming_processor_axon_configuration_api_4","id":69},{"text":"Pooled streaming processor -  Spring Boot auto configuration","hash":"_pooled_streaming_processor_spring_boot_auto_configuration_4","id":70},{"text":"Spring Boot auto configuration - properties file","hash":"_spring_boot_auto_configuration_properties_file_7","id":71}]},"81":{"id":81,"text":"The SubscribingEventProcessor, or Subscribing Processor for short, is a type of Event Processor. As any Event Processor, it serves as the technical aspect to handle events by invoking the event handlers written in an Axon application. The Subscribing Processor defines itself by receiving the events from a SubscribableMessageSource. The SubscribableMessageSource is an infrastructure component to register a Subscribing Processor too. After registration to the SubscribableMessageSource, the message source gives the events to the SubscribingEventProcessor in the order they are received. Examples of a SubscribableMessageSource are the EventBus or the AMQP Extension. Both the EventBus and AMQP Extension are simple message bus solutions for events. The simple bus solution makes the SubscribableMessageSource and thus the Subscribing Processor an approach to only receive current events. Operations like replaying are, therefore, not an option for any Subscribing Processor as long as the SubscribableMessageSource follows this paradigm. Furthermore, the message source will use the same thread that receives the events to invoke the registered Subscribing Processors. When the EventBus is, for example, used as the message source, this means that the event publishing thread is the same one handling the event in the Subscribing Processor. Although this approach deserves a spot within the framework, most scenarios require further decoupling of components by separating the threads as well. When, for example, an application requires event processing parallelization to get a higher performance, this can be a blocker. This predicament is why the SubscribingEventProcessor is not the default in Axon Framework. Instead, the \"Tracking Event Processor\" (a Streaming Processor implementation) takes up that role. It provides greater flexibility for developers for configuring the event processor in greater detail. Subscribing Processor Use Cases Although the SubscribingEventProcessor does not support easy parallelization or replays, there are still scenarios when it is beneficial. When a model, for example, should be updated within the same thread that published the event, the Subscribing Processor becomes a reasonable solution. In combination with Axon’s AMQP or Kafka extension, some of these concerns are alleviated too, making it a viable option. Other than configuring that an app uses a Subscribing Event Processor, everything is covered here. Firstly, to specify that a new Event Processors should default to a SubscribingEventProcessor, you can use the usingSubscribingEventProcessors method: public class AxonConfig { // omitting other configuration methods... public void configureProcessorDefault(EventProcessingConfigurer processingConfigurer) { processingConfigurer.usingSubscribingEventProcessors(); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule processorDefaultConfigurerModule() { return configurer -> configurer.eventProcessing(EventProcessingConfigurer::usingSubscribingEventProcessors); } } For a specific Event Processor to be a Subscribing instance, registerSubscribingEventProcessor is used: public class AxonConfig { // omitting other configuration methods... public void configureSubscribingProcessors(EventProcessingConfigurer processingConfigurer) { // To configure a processor to be subscribing ... processingConfigurer.registerSubscribingEventProcessor(\"my-processor\") // ... to define a specific SubscribableMessageSource ... .registerSubscribingEventProcessor(\"my-processor\", conf -> /* create/return SubscribableMessageSource */); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule subscribingProcessorsConfigurerModule() { return configurer -> configurer.eventProcessing( // To configure a processor to be subscribing ... processingConfigurer -> processingConfigurer.registerSubscribingEventProcessor(\"my-processor\") // ... to define a specific SubscribableMessageSource ... .registerSubscribingEventProcessor( \"my-processor\", conf -> /* create/return SubscribableMessageSource */ ) ); } } A properties file allows the configuration of some fields on an Event Processor. Do note that the Java configuration provides more degrees of freedom. axon.eventhandling.processors.my-processor.mode=subscribing axon.eventhandling.processors.my-processor.source=eventBus If the name of an event processor contains periods ., use the map notation: axon.eventhandling.processors[my.processor].mode=subscribing axon.eventhandling.processors[my.processor].source=eventBus Whenever the error handler rethrows an exception, the SubscribingEventProcessor will have it bubble up to the publishing component of the event. Providing the exception to the event publisher allows the publishing component to deal with it accordingly. Persistent streams require Axon Server version 2024.1 or higher. A Subscribing Processor can use a Persistent Stream as its message source. By using a persistent stream we allow a Subscribing Processor to process events in parallel and to replay events. When a processor uses a persistent stream, it receives events from Axon Server. After processing (a batch of) events, it sends an acknowledgment back to Axon Server. The persistent stream can be split in segments to allow for parallel processing within a single client or across multiple instances of the client. The number of segments can be changed dynamically. Axon Server distributes the segments across the subscribers to ensure that all segments are connected. Events are assigned to a specific segment based on the sequencing policy for the persistent stream. Persistent streams support all the standard sequencing policies that also can be used for streaming processors. Clients can provide a filter in the persistent stream definition. This reduces the number of events that the client receives from Axon Server. The expression used to filter events are the same as expressions used in the ad-hoc query option in Axon Server. Persistent streams do not require a token store in the client. The state of the stream is maintained in Axon Server. For a specific Event Processor to be a Subscribing instance using a persistent stream, registerSubscribingEventProcessor is used. The message source for the event processor must be a PersistentStreamMessageSource. The PersistentStreamMessageSource requires a PersistentStreamProperties to set the initial properties to create the persistent stream. The properties contain: streamName: The name of the persistent stream. segments: The initial number of segments. sequencingPolicyName: The sequencing policy name. sequencingPolicyParameters: List of parameters for the sequencing policy. initialPosition: First token to read. filter: Filter for events on Axon Server side, use null to receive all events. The sequencingPolicyParameters must be set if the sequencing policy is PropertySequencingPolicy or MetaDataSequencingPolicy. For the MetaDataSequencingPolicy, the sequencingPolicyParameters must contain the name of one or more of the event’s metadata fields. Events with the same value for these fields are passed in the same segment. The PropertySequencingPolicy requires 4 values in the sequencingPolicyParameters list. The serialization type for the events. Supported values are JSON or XML. The payload type to apply the policy on. An expression to extract the property value from the event payload. If the serialization type is JSON this must be a JsonPath expression. For XML this must be an Xpath expression. A fallback policy, the name of a sequencing policy to use if the payload type does not match the type specified in the second parameter. This may be PropertySequencingPolicy to specify an expression for another payload type. In this case add the serialization type, payload type, expression and fallback policy parameters for the alternative payload type. public class AxonConfig { // omitting other configuration methods... public void configureSubscribingProcessors(EventProcessingConfigurer processingConfigurer) { // To configure a processor to be subscribing ... processingConfigurer.registerSubscribingEventProcessor(\"my-processor\", conf -> /* create/return PersistentStreamMessageSource */); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule subscribingProcessorsConfigurerModule() { return configurer -> configurer.eventProcessing( // To configure a processor to be subscribing ... processingConfigurer -> processingConfigurer.registerSubscribingEventProcessor( \"my-processor\", conf -> /* create/return PersistentStreamMessageSource */ ) ); } } A properties file allows the configuration of some fields on an Event Processor. Do note that the Java configuration provides more degrees of freedom. The source property for the processor must point to a Spring Bean which is a PersistentStreamMessageSource or a PersistentStreamMessageSourceDefinition. This bean can also be defined in the properties file. axon.eventhandling.processors.my-processor.mode=subscribing axon.eventhandling.processors.my-processor.source=my-persistent-stream axon.axonserver.persistent-streams.my-persistent-stream.name=My Persistent Stream axon.axonserver.persistent-streams.my-persistent-stream.batch-size=100 axon.axonserver.persistent-streams.my-persistent-stream.initial-segment-count=4","title":"Subscribing Event Processor","component":"axon-framework-reference","version":"4.10","name":"subscribing","url":"/axon-framework-reference/4.10/events/event-processors/subscribing/","titles":[{"text":"Configuring","hash":"configuring","id":1},{"text":"Axon Configuration API","hash":"_axon_configuration_api","id":2},{"text":"Spring Boot auto configuration","hash":"_spring_boot_auto_configuration","id":3},{"text":"Axon Configuration API","hash":"_axon_configuration_api_2","id":4},{"text":"Spring Boot auto configuration - Java","hash":"_spring_boot_auto_configuration_java","id":5},{"text":"Spring Boot auto configuration - Properties file","hash":"_spring_boot_auto_configuration_properties_file","id":6},{"text":"Error mode","hash":"error-mode","id":7},{"text":"Persistent streams","hash":"_persistent_streams","id":8},{"text":"Configuration","hash":"_configuration","id":9},{"text":"Axon Configuration API","hash":"_axon_configuration_api_3","id":10},{"text":"Spring Boot auto configuration - Java","hash":"_spring_boot_auto_configuration_java_2","id":11},{"text":"Spring Boot auto configuration - Properties file","hash":"_spring_boot_auto_configuration_properties_file_2","id":12}]},"82":{"id":82,"text":"","title":"Axon Framework Fundamentals","component":"axon-framework-fundamentals","version":"master","name":"index","url":"/axon-framework-fundamentals/","titles":[]},"83":{"id":83,"text":"The current example, doesn’t use the ability to cancel deadlines. In the case of a gift card, it might be a business rule to publish an event that the gift card expired if it was already depleted. Let’s make a few changes to enable this. The first thing to need to do is to add a remainingValue to the aggregate, so it’s known when there is no value remaining. Then, adding to the command handler: @CommandHandler public void handle(RedeemCardCommand command, DeadlineManager deadlineManager) { //check validity apply(new CardRedeemedEvent(giftCardId, command.amount())); if (remainingValue == 0) { deadlineManager.cancelAllWithinScope(EXPIRED_GIFT_CARD); (1) } } 1 This call cancels all deadlines with the name EXPIRED_GIFT_CARD for this aggregate instance. It’s possible to use the return value from scheduling a deadline to cancel a specific deadline. In this case, there can be at most one deadline scheduled with this name, so this is easier. And the event sourcing handler: @EventSourcingHandler public void on(CardRedeemedEvent event) { remainingValue -= event.amount(); } A test to make sure the deadline cancellation was successful: @Test void testCardNotExpiringIfNothingLeft() { testFixture.givenNoPriorActivity() .andGivenCommands( new IssueExpiringCardCommand(CARD_ID, DAYS, AMOUNT), new RedeemCardCommand(CARD_ID, AMOUNT) ) .whenTimeElapses(Duration.ofDays(31L)) .expectSuccessfulHandlerExecution() .expectNoEvents(); } This should help get you started with deadlines. Don’t forget to switch the implementation to one of the deadline managers which offer persistence before moving to prod.","title":"Advanced Use Cases","component":"axon-framework-fundamentals","version":"master","name":"advanced","url":"/axon-framework-fundamentals/deadlines/advanced/","titles":[]},"84":{"id":84,"text":"Axon Framework doesn’t create a DeadlineManager automatically for you, so you have to choose from a set of implementations. When setting up deadlines for sagas it’s best to choose a solution based on the saga storage solution. For deadlines in aggregates, it’s best to choose the same storage solution as the Event Store. In case you use Axon Server, it’s best to store deadlines in the same solution as your projections. If you are using a relational database, the DbSchedulerDeadlineManager is the best choice. For MongoDB the JobRunrDeadlineManager would be a good second. Both solutions require a database as a synchronization and persistence layer. For now, sticking to the SimpleDeadlineManager as it’s easier to use. Note that the SimpleDeadlineManager isn’t production-ready, as it doesn’t persist deadlines or communicate between application instances.","title":"Deciding on the Implementation","component":"axon-framework-fundamentals","version":"master","name":"deciding","url":"/axon-framework-fundamentals/deadlines/deciding/","titles":[]},"85":{"id":85,"text":"The SimpleDeadlineManager is part of the messaging module of Axon Framework and uses Java’s ScheduledExecutorService, therefore, it requires no additional dependencies. You can configure the SimpleDeadlineManager either as an Axon Configuration component or as a Spring Bean. For this how-to, it’s configured as a Spring Bean. @Bean public DeadlineManager deadlineManager( org.axonframework.config.Configuration configuration ) { var provider = new ConfigurationScopeAwareProvider(configuration); return SimpleDeadlineManager .builder() .scopeAwareProvider(provider) .build(); } Depending on the deadline manager there might be multiple values set on the builder. All deadline managers at least need to set the scope-aware provider. @Aggregate public class ExpiringGiftCard { @AggregateIdentifier private String giftCardId; private boolean expired; // some other state left out for brevity private static final String EXPIRED_GIFT_CARD = \"EXPIRED_GIFT_CARD\"; @CommandHandler @CreationPolicy(AggregateCreationPolicy.CREATE_IF_MISSING) public void handle(IssueExpiringCardCommand command, DeadlineManager deadlineManager) { (1) //check validity apply(new ExpiringCardIssuedEvent(command.id(), command.daysValid(), command.amount())); Instant trigger = Instant.now().plus(command.daysValid(), ChronoUnit.DAYS).truncatedTo(ChronoUnit.DAYS); deadlineManager.schedule(trigger, EXPIRED_GIFT_CARD); (2) } @DeadlineHandler(deadlineName = EXPIRED_GIFT_CARD) (3) public void on() { if (!expired){ (4) apply(new ExpiringCardExpiredEvent(giftCardId)); } } @EventSourcingHandler public void on(ExpiringCardIssuedEvent event) { giftCardId = event.id(); expired = false; } @EventSourcingHandler (5) public void on(ExpiringCardExpiredEvent event) { expired = true; } // More handlers are needed to make it useful, left out for brevity. public ExpiringGiftCard() { // Required by Axon to construct an empty instance to initiate Event Sourcing. } } 1 Adding the deadline manager to the method makes it easily testable compared to other ways of accessing it from the aggregate. You can inject this way any component registered in the Axon Configuration, or when using Spring, any bean in the Spring Context. 2 Schedule the deadline, so it triggers at midnight. 3 It’s important to use the same in the annotation as when calling the schedule method. 4 An idempotency check, so even if there is some problem with the deadline manager, the application sends only one ExpiringCardExpiredEvent event. 5 On the ExpiringCardExpiredEvent, change the aggregate’s state.","title":"Implementing Deadlines","component":"axon-framework-fundamentals","version":"master","name":"implementing","url":"/axon-framework-fundamentals/deadlines/implementing/","titles":[]},"86":{"id":86,"text":"Sometimes, you don’t want to trigger an aggregate or saga directly, but only after some time has passed. When this is the case, you can use a Deadline. Note that if the event you want to publish is a non-domain event, a scheduled event might be a better fit. To use deadlines, you need a DeadlineManager. This tutorial guides you through the basics of starting to work with deadlines. This includes configuring a deadline manager, scheduling, and handling of a deadline, and writing a test for it. Finally, changing it to a more advanced use case by expanding the functionality. As an example it uses an expiring gift card after a certain amount of time has passed.","title":"Deadlines in Axon Framework","component":"axon-framework-fundamentals","version":"master","name":"index","url":"/axon-framework-fundamentals/deadlines/","titles":[{"text":"Introduction","hash":"_introduction","id":1}]},"87":{"id":87,"text":"Testing behaviour related to deadlines is easy by using either the SagaTestFixture or the AggregateTestFixture. This makes it possible to simulate passing of time, and checking the behaviour. class ExpiringGiftCardTest { private static final String CARD_ID = UUID.randomUUID().toString(); private static final int DAYS = 30; private static final int AMOUNT = 1377; private AggregateTestFixture testFixture; @BeforeEach public void setUp() { testFixture = getTestFixture(); } @Test void testCardExpiredAfterThirtyOneDays() { testFixture.givenNoPriorActivity() .andGivenCommands(new IssueExpiringCardCommand(CARD_ID, DAYS, AMOUNT)) .whenTimeElapses(Duration.ofDays(31L)) (1) .expectSuccessfulHandlerExecution() .expectEvents(new ExpiringCardExpiredEvent(CARD_ID)) .expectTriggeredDeadlinesWithName(\"EXPIRED_GIFT_CARD\"); } private AggregateTestFixture getTestFixture() { return new AggregateTestFixture<>(ExpiringGiftCard.class); } } 1 By elapsing time by 31 days, the deadline should trigger and publish an ExpiringCardExpiredEvent.","title":"Testing the Deadline","component":"axon-framework-fundamentals","version":"master","name":"testing","url":"/axon-framework-fundamentals/deadlines/testing/","titles":[]},"88":{"id":88,"text":"It’s possible to change the default enqueue behavior. You can do so by implementing the EnqueuePolicy interface. For example like this: public class CustomEnqueuePolicy implements EnqueuePolicy> { @Override public EnqueueDecision> decide(DeadLetter> letter, Throwable cause) { if (cause instanceof NullPointerException) { return Decisions.doNotEnqueue(); (1) } if (letter.message().getPayload() instanceof NotificationEvent && letter.enqueuedAt().isAfter(Instant.now().plus(Duration.ofMinutes(5L)))) { return Decisions.evict(); (2) } return Decisions.enqueue(cause); (3) } } 1 No need to put this in a dead letter queue. As this always creates the same NullPointerException, don’t enqueue it. 2 If it’s a notification event, which is already in the queue for 5 minutes, evict the event so it’s not retried again. 3 Default to enqueue the event message again. Below is another example that uses the diagnostics and evicts after trying 5 times: public class CustomEnqueuePolicy implements EnqueuePolicy> { @Override public EnqueueDecision> decide(DeadLetter> letter, Throwable cause) { final int retries = (int) letter.diagnostics().getOrDefault(\"retries\", -1); (1) if (retries l.diagnostics().and(\"retries\", retries + 1)); (2) } return Decisions.evict(); (3) } } 1 Get the retries, default to -1. So on entering the queue, the value is 0. 2 Requeue, increasing the retries. 3 Once it’s retried 5 times, the framework evicts the event message. You can set the policy for a specific group with something like: public class AxonConfig { // omitting other configuration methods... public void configureEnqueuePolicy(EventProcessingConfigurer configurer) { // Replace \"my-processing-group\" for the processing group you want to configure the policy on. configurer.registerDeadLetterPolicy(\"my-processing-group\", config -> new CustomEnqueuePolicy()); } }","title":"Advanced Use Cases","component":"axon-framework-fundamentals","version":"master","name":"advanced","url":"/axon-framework-fundamentals/dlq/advanced/","titles":[]},"89":{"id":89,"text":"To enable a DLQ you need to configure the SequencedDeadLetterQueue component. Like most components related to event processing, there are implementations available for JPA, JDBC, and Mongo. To best leverage transactions, it’s best to choose the same implementation as the TokenStore and likely also for your projection. Please note that for best results, this also means having them located in the same database, or the same collection. There are two ways of configuring the SequencedDeadLetterQueue. The first approach is to register a DLQ provider in the event processor configuration. This approach allows you to specify processing groups if you want to configure the DLQ only for some of them. As DLQs add complexity and introduce some overhead, you should prefer this method when you don’t need a separate DLQ for each processing group. /** * Register the given {@code deadLetterProvider} as a default to build a {@link SequencedDeadLetterQueue} for * {@link EventProcessor}s created in this configuration. * * The {@code deadLetterProvider} might return null if the given processing group name should not have a sequenced * dead letter queue. An explicitly sequenced dead letter queue set using * {@link #registerDeadLetterQueue(String, Function)} will always have precedence over the one provided by this method. * * @param deadLetterQueueProvider a builder {@link Function} that provides a {@link SequencedDeadLetterQueue} for a * processing group. It's possible to return null depending on the processing group. * @return the current {@link EventProcessingConfigurer} instance, for fluent interfacing */ default EventProcessingConfigurer registerDeadLetterQueueProvider( Function>>> deadLetterQueueProvider) { return this; } The DeadLetterQueueProviderConfigurerModule has an example of how you can use this. @Bean @ConditionalOnMissingBean public DeadLetterQueueProviderConfigurerModule deadLetterQueueProviderConfigurerModule( EventProcessorProperties eventProcessorProperties, EntityManagerProvider entityManagerProvider, TransactionManager transactionManager, Serializer genericSerializer, @Qualifier(\"eventSerializer\") Serializer eventSerializer ) { return new DeadLetterQueueProviderConfigurerModule( eventProcessorProperties, processingGroup -> config -> JpaSequencedDeadLetterQueue.builder() .processingGroup(processingGroup) .entityManagerProvider(entityManagerProvider) .transactionManager(transactionManager) .genericSerializer(genericSerializer) .eventSerializer(eventSerializer) .build() ); } You might notice the EventProcessorProperties parameter. That’s because with Spring autoconfiguration it’s easy to enable dead letter event processing for a specific processing group. You can do so by setting a property similar to axon.eventhandling.processors.first.dlq.enabled=true. In this case, the processing group is firsts. Similarly, you can set caching and cache size. Caching prevents unnecessary calls to the database, at the cost of keeping some of the sequence identifiers in memory. The other way is to add a SequencedDeadLetterQueue to a specific processing group in the EventProcessingConfigurer using the registerDeadLetterQueue method. For example for setting the JpaSequencedDeadLetterQueue on the my-processing-group in a non-Spring context. public class AxonConfig { // omitting other configuration methods... public void configureDeadLetterQueue(EventProcessingConfigurer processingConfigurer) { // Replace \"my-processing-group\" for the processing group you want to configure the DLQ on. processingConfigurer.registerDeadLetterQueue( \"my-processing-group\", config -> JpaSequencedDeadLetterQueue.builder() .processingGroup(\"my-processing-group\") .maxSequences(256) .maxSequenceSize(256) .entityManagerProvider(config.getComponent(EntityManagerProvider.class)) .transactionManager(config.getComponent(TransactionManager.class)) .serializer(config.serializer()) .build() ); } } Although this enables the processing to continue in case of errors, it doesn’t retry the failed events automatically. The next section explains some of the options to enable retries.","title":"Implementing Dead Letter Queues (DLQ)","component":"axon-framework-fundamentals","version":"master","name":"implementing","url":"/axon-framework-fundamentals/dlq/implementing/","titles":[{"text":"Register a dead letter queue with the event processor","hash":"_register_a_dead_letter_queue_with_the_event_processor","id":1},{"text":"Add a dead letter queue to a specific processing group","hash":"_add_a_dead_letter_queue_to_a_specific_processing_group","id":2}]},"90":{"id":90,"text":"Once you are running a large application with thousands of events in a production environment, there’s a possibility for errors to occur. For example, an error in your system could occur due to the fact that an external API (such as a payment processing service) is temporarily unavailable. As a result, this may require changing your event messaging code when an error manifests due to a combination of not-tested events. Now, the default configuration for event processors is simply to log any errors that occur. In a production environment, developers have the option to modify the default behavior to throw the error instead. Please note, however, that this can cause an event processor to stop processing events altogether, due to the fact that it will keep trying to process the same event until it stops causing an exception. To prevent this behavior, it’s possible to configure the use of a sequenced Dead Letter Queue (DLQ). With a DLQ, instead of retrying to process the event over and over unsuccessfully, the framework simply places the failed event in a queue. In order to maintain the correct order of such events, the framework also places all further events having the same sequence identifier (by default, the sequence identifier is the aggregate id) directly into the queue. Such an approach ensures that all events for the same aggregate must wait on the event that is causing an exception. As a result, the event processor doesn’t consume resources continuously trying to process unprocessable events. This tutorial guides you through the process of enabling the sequenced Dead Letter Queue for event processing. It also guides you through the process of re-processing the queued events after you fix the processing error.","title":"Dead Letter Queues in Axon Framework","component":"axon-framework-fundamentals","version":"master","name":"index","url":"/axon-framework-fundamentals/dlq/","titles":[{"text":"Introduction","hash":"_introduction","id":1}]},"91":{"id":91,"text":"The dead letter queue is a stop-gap. It’s important to strive to have the queue empty as soon as possible. Ideally by retrying the events, and removing them from the queue. You can retrieve a SequencedDeadLetterProcessor from the EventProcessingConfiguration based on a processing group name. Additionally, it’s also possible to use AxonIQ Console and process a queue manually. To schedule processing dead letter sequences you can do something like: @Component public class ProcessDeadLetterComponent { private final EventProcessingConfiguration config; ProcessDeadLetterComponent(EventProcessingConfiguration config) { this.config = config; } @Scheduled(fixedDelay = 30_000, initialDelay = 30_000) (1) public void process() { for(String processingGroup : config.eventProcessors().keySet()) { (2) config.sequencedDeadLetterProcessor(processingGroup).ifPresent( SequencedDeadLetterProcessor::processAny (3) ); } } } 1 Spring-specific way to wait 30 seconds, then invoke the method every 30 seconds. You want a large interval to not stress the system too much. Especially as you don’t know what’s going wrong, it might be the application is already having a hard time. 2 A way to get all the processing groups. You might also use different intervals, depending on the processing group. Or don’t have automatic processing for some groups. 3 The processAny() rotates the sequence to try based on when it was last tried. Once there are multiple queues present, it might take some time before they’re all processed with this approach. You could also get the whole queue from the configuration, and process each existing sequence. By default, the framework enqueues a letter again, unless a processor can process it successfully. How to change this, is part of the next session.","title":"Retrying Failed Dead Letter Sequences","component":"axon-framework-fundamentals","version":"master","name":"retrying","url":"/axon-framework-fundamentals/dlq/retrying/","titles":[]},"92":{"id":92,"text":"The Axon Framework uses an IdentifierFactory to generate all identifiers, whether they are for events, commands or queries. The default IdentifierFactory uses randomly generated java.util.UUID based identifiers. Although they are safe to use, the process to generate them does not excel in performance. IdentifierFactory is an abstract factory that uses Java’s ServiceLoader (since Java 6) mechanism to find the implementation to use. This means you can create your own implementation of the factory and put the name of the implementation in a file called /META-INF/services/org.axonframework.common.IdentifierFactory. Java’s ServiceLoader mechanism will detect that file and attempt to create an instance of the class named inside. There are a few requirements for the IdentifierFactory. The implementation must: Have its fully qualified class name as the contents of the /META-INF/services/org.axonframework.common.IdentifierFactory file on the classpath, have an accessible zero-argument constructor, extend IdentifierFactory, be accessible by the context classloader of the application or by the classloader that loaded the IdentifierFactory class, and must Be thread-safe.","title":"Identifier Generation","component":"identifier-generation-guide","version":"master","name":"index","url":"/identifier-generation-guide/","titles":[]},"93":{"id":93,"text":"Handler Enhancers allow you to wrap handlers and add custom logic to the execution or eligibility of handlers for a specific message. Handler enhancers differ from message handler interceptors by the access they provide to the message handling component (for example, the aggregate member) at the resolution time. Hence, handler enhancers allow for more fine-grained control. You can use handler enhancers to intercept and perform checks on groups of @MessageHandler annotated methods, like a command, event, or query handler. To create a handler enhancer, you implement the HandlerEnhancerDefinition interface and override the wrapHandler() method. All this method does is give you access to the MessageHandlingMember, which is an object representing any handler specified in the system. You can then filter these handlers based on the type of Message they handle by using the MessageHandlingMember.canHandleMessageType(Class) method. Doing so, you can specifically enhance message handlers dealing with, for example, the CommandMessage. For your handler enhancer to run, you’ll need to create a META-INF/services/org.axonframework.messaging.annotation.HandlerEnhancerDefinition file containing the fully qualified class name of the handler enhancer you have created or register the enhancer explicitly in the Configurer. Here’s an example of a HandlerEnhancerDefinition that filters messages based on an expected MetaData key and value. (1) public class ExampleHandlerDefinition implements HandlerEnhancerDefinition { (2) @Override public MessageHandlingMember wrapHandler(MessageHandlingMember original) { return original.attribute(\"metaDataKey\") (3) .map(attr -> new ExampleMessageHandlingMember<>(original)) .map(member -> (MessageHandlingMember) member) .orElse(original); (6) } private static class ExampleMessageHandlingMember extends WrappedMessageHandlingMember { private final String metaDataKey; private final String expectedValue; private ExampleMessageHandlingMember(MessageHandlingMember delegate) { super(delegate); metaDataKey = (String) delegate.attribute(\"metaDataKey\") .orElseThrow(() -> new IllegalArgumentException( \"Missing expected attribute\" )); expectedValue = (String) delegate.attribute(\"expectedValue\") .orElseThrow(() -> new IllegalArgumentException( \"Missing expected value\" )); } @Override public boolean canHandle(@Nonnull Message message) { (4) return super.canHandle(message) && expectedValue.equals(message.getMetaData().get(metaDataKey)); } } } // ... (5) @HasHandlerAttributes public @interface MyAnnotation { String metaDataKey(); String expectedValue(); } 1 Implement the HandlerEnhancerDefinition interface 2 Override the wrapHandler method to perform your logic. 3 Filter the types of handlers you want to wrap based on a specific attribute, for example, the metaDataKey attribute from the MyAnnotation. 4 Handle the method inside of a MessageHandlingMember. In this case, indicating the handler is only suitable if the meta-data key matches a value. 5 For annotation-specific attributes to exist in the MessageHandlingMember’s attribute collection, meta-annotation the custom annotation with HasHandlerAttributes. 6 If you are not interested in wrapping the handler, return the original passed into the wrapHandler method. To configure your HandlerEnhancerDefintion, you can (1) register it directly with the Configurer or (2) make it a part of the Application Context when you are in a Spring environment. Axon Configuration API SpringBoot AutoConfiguration public class AxonConfig { // omitting other configuration methods... public void registerExampleHandlerDefinition(Configurer configurer) { configurer.registerHandlerEnhancerDefinition(config -> new ExampleHandlerDefinition()); } } @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ExampleHandlerDefinition exampleHandlerDefinition() { return new ExampleHandlerDefinition(); } }","title":"Handler Enhancers","component":"message-handler-tuning-guide","version":"master","name":"handler-enhancers","url":"/message-handler-tuning-guide/handler-enhancers/","titles":[]},"94":{"id":94,"text":"Customization of message handling can become a desired tweak in your application. Think of changing how messages are handled or what parameters will be injected into your message handling functions. Overriding annotations can be useful when implementing best practices that have been established within your team, providing defaults or restrictions of how annotations may be used. However, they can also be useful when special behavior needs to be added to message handlers based on the presence of an annotation.","title":"Introduction","component":"message-handler-tuning-guide","version":"master","name":"index","url":"/message-handler-tuning-guide/","titles":[]},"95":{"id":95,"text":"You can configure additional ParameterResolvers by extending the ParameterResolverFactory class and creating a file named /META-INF/services/org.axonframework.messaging.annotation.ParameterResolverFactory containing the fully qualified name of the implementing class. At this moment, OSGi support is limited due to the fact that the required headers are mentioned in the manifest file. The automatic detection of ParameterResolverFactory instances works in OSGi, but due to classloader limitations, it might be necessary to copy the contents of the /META-INF/services/org.axonframework.messaging.annotation.ParameterResolverFactory file to the OSGi bundle containing the classes to resolve parameters for (that is, the event handler).","title":"Parameter Resolvers","component":"message-handler-tuning-guide","version":"master","name":"parameter-resolvers","url":"/message-handler-tuning-guide/parameter-resolvers/","titles":[]},"96":{"id":96,"text":"Most annotations in Axon can be placed on other annotations as meta-annotations. When Axon scans for annotations, it will automatically scan meta-annotations as well. Annotations can override the properties defined on the meta-annotations, if desired. For example, if you have a practice in your development team that payloads are always represented as JSON and you want the command name to be explicitly configured, you could create your own annotation: @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.ANNOTATION_TYPE}) @CommandHandler(payloadType = JsonNode.class) public @interface JsonCommandHandler { String commandName; String routingKey() default \"\"; } By specifying the payloadType on the @CommandHandler meta-annotation, this becomes the value used for all Command Handlers annotated with JsonCommandHandler. These command handlers may (and should) still provide a parameter for the payload, but Axon will complain if it isn’t a subclass of JsonNode. The commandName attribute on the JsonCommandHandler annotation does not have a default value, and will therefore force developers to specify the name of the command. Note that to override values the attribute name must identical to the name on the @CommandHandler meta-annotation. Lastly, the routingKey property is defined exactly as in the @CommandHandler annotation’s specification to still allow developers to choose to provide a Routing Key when using the JsonCommandHandler. When writing custom logic to access properties of annotations that may be meta-annotated, be sure to use the AnnotationUtils#findAnnotationAttributes(AnnotatedElement, String) method, or the annotationAttributes on the MessageHandlingMember. Using Java’s annotation API will not take meta-annotations into consideration.","title":"Meta Annotations","component":"meta-annotations-guide","version":"master","name":"index","url":"/meta-annotations-guide/","titles":[]},"97":{"id":97,"text":"This chapter will cover several considerations in regards to tuning the database for events. If you have generated the tables automatically using your JPA implementation (for example, Hibernate), you probably do not have all the right indexes set on your tables. Different usages of the event store require different indexes to be set for optimal performance. This list suggests the indexes that should be added for the different types of queries used by the default EventStorageEngine implementation: Normal operational use (storing and loading events) Table DomainEventEntry, columns aggregateIdentifier and sequenceNumber (unique index) Table DomainEventEntry, eventIdentifier (unique index) Snapshotting Table SnapshotEventEntry, aggregateIdentifier column. Table SnapshotEventEntry, eventIdentifier (unique index) Sagas Table AssociationValueEntry, columns sagaType, associationKey and associationValue, Table AssociationValueEntry, columns sagaId and sagaType, The default column lengths generated by, for example, Hibernate may work, but won’t be optimal. A UUID, for example, will always have the same length. Instead of a variable length column of 255 characters, you could use a fixed length column of 36 characters for the aggregate identifier. The timestamp column in the DomainEventEntry table only stores ISO 8601 timestamps. If all times are stored in the UTC timezone, they need a column length of 24 characters. If you use another timezone, this may be up to 28. Using variable length columns is generally not necessary, since time stamps always have the same length. It is highly recommended to store all timestamps in UTC format. In countries with daylight saving time, storing timestamps in local time may result in sorting errors for events generated around and during the timezone switch. This does not occur when UTC is used. Some servers are configured to always use UTC. Alternatively, you should configure the event store to convert timestamps to UTC before storing them. The type column in the DomainEventEntry stores the type identifiers of aggregates. Generally, these are the 'simple name' of the aggregate. Even the infamous AbstractDependencyInjectionSpringContextTests in Spring only counts 45 characters. Here, again, a shorter (but variable) length field should suffice. When using a relational database as an event store, Axon relies on an auto-increment value to allow tracking processors to read all events roughly in the order they were inserted. We say \"roughly\", because \"insert-order\" and \"commit-order\" are different things. While auto-increment values are (generally) generated at insert-time, these values only become visible at commit-time. This means another process may observe these sequence numbers arriving in a different order. While Axon has mechanisms to ensure eventually all events are handled, even when they become visible in a different order, there are limitations and performance aspects to consider. When a tracking processor reads events, it uses the \"global sequence\" to track its progress. When events become available in a different order than they were inserted, Axon will encounter a \"gap\". Axon will remember these \"gaps\" to verify that data has become available since the last read. These gaps may be the result of events becoming visible in a different order, but also because a transaction was rolled back. It is highly recommended to ensure that no gaps exist because of over eagerly increasing the sequence number. The mechanism for checking gaps is convenient, but comes with a performance impact. When using a JpaEventStorageEngine, Axon relies on the JPA implementation to create the table structure. While this will work, it is unlikely to provide the configuration that has the best performance for the database engine in use. That is because Axon uses default settings for the @GeneratedValue annotation. To override these settings, create a file called /META-INF/orm.xml on the classpath, which looks as follows: It is important to specify metadata-complete=\"false\". This indicates this file should be used to override existing annotations, instead of replacing them. For the best results, ensure that the DomainEventEntry table uses its own sequence. This can be ensured by specifying a different sequence generator for that entity only.","title":"RDBMS Tuning","component":"rdbms-tuning-guide","version":"master","name":"index","url":"/rdbms-tuning-guide/","titles":[{"text":"SQL databases","hash":"_sql_databases","id":1},{"text":"Auto-increments and sequences","hash":"_auto_increments_and_sequences","id":2}]},"98":{"id":98,"text":"The SpringAMQPPublisher forwards events to an AMQP exchange. It is initialized with a SubscribableMessageSource, which is generally the EventBus or EventStore. Theoretically, this could be any source of events that the publisher can subscribe to. To forward events generated in the application to an AMQP Channel, a single line of application.properties configuration is sufficient: axon.amqp.exchange=ExchangeName This will automatically send all published events to the AMQP Exchange with the given name. By default, no AMQP transactions are used when sending. This can be overridden using the axon.amqp.transaction-mode property, and setting it to transactional or publisher-ack. Note that exchanges are not automatically created. You must still declare the Queues, Exchanges and Bindings you wish to use. Check the Spring documentation for more information.","title":"Forwarding Events to an AMQP Exchange","component":"amqp-extension-reference","version":"master","name":"forwarding","url":"/amqp-extension-reference/forwarding/","titles":[]},"99":{"id":99,"text":"Spring AMQP is an alternative approach to distributing events, besides Axon Server which is the default. Axon provides out-of-the-box support to transfer events to and from an AMQP message broker, such as RabbitMQ. To use the Spring AMQP components from Axon, make sure the axon-amqp module is available on the classpath. Once added to the classpath of your application, you can use the Spring AMQP extension to: Forward events to an AMQP exchange Read events from an AMQP queue","title":"Spring AMPQ","component":"amqp-extension-reference","version":"master","name":"index","url":"/amqp-extension-reference/","titles":[]},"100":{"id":100,"text":"Spring has extensive support for reading messages from an AMQP Queue. However, this needs to be 'bridged' to Axon, so that these messages can be handled from Axon as if they are regular event messages. The SpringAMQPMessageSource allows event processors to read messages from a queue instead of the event store or event bus. It acts as an adapter between Spring AMQP and the SubscribableMessageSource needed by these processors. To receive events from a queue and process them inside an Axon application, you need to configure a SpringAMQPMessageSource: @Bean public SpringAMQPMessageSource myQueueMessageSource(AMQPMessageConverter messageConverter) { return new SpringAMQPMessageSource(messageConverter) { @RabbitListener(queues = \"myQueue\") @Override public void onMessage(Message message, Channel channel) throws Exception { super.onMessage(message, channel); } }; } and then configure a processor to use this bean as the source for its messages: axon.eventhandling.processors.name.source=myQueueMessageSource Note that tracking processors are not compatible with the SpringAMQPMessageSource.","title":"Reading Events from an AMQP Queue","component":"amqp-extension-reference","version":"master","name":"reading","url":"/amqp-extension-reference/reading/","titles":[]},"101":{"id":101,"text":"JGroups is an alternative approach to distributing command bus (commands) besides Axon Server. The JGroupsConnector uses (as the name already gives away) JGroups as the underlying discovery and dispatching mechanism. Describing the features of JGroups is beyond the scope this reference guide Please refer to the JGroups User Guide for more information. To use the JGroups components from Axon, make sure the axon-jgroups module is available on the classpath through the preferred dependency management system. When combined with Spring Boot, the axon-jgroups-spring-boot-starter dependency can be included to enable auto-configuration. Since JGroups handles both discovery of nodes and the communication between them, the JGroupsConnector acts as both a CommandBusConnector and a CommandRouter. You can find the JGroups specific components for the DistributedCommandBus in the axon-distributed-commandbus-jgroups module. The JGroupsConnector has four mandatory configuration elements: channel - which defines the JGroups protocol stack. Generally, a JChannel is constructed with a reference to a JGroups configuration file. JGroups comes with a number of default configurations which can be used as a basis for your own configuration. Do keep in mind that IP Multicast generally doesn’t work in Cloud Services, like Amazon. TCP Gossip is generally a good start in such type of environment. clusterName - defines the name of the cluster that each segment should register to. Segments with the same cluster name will eventually detect each other and dispatch commands among each other. localSegment - the Command Bus implementation that dispatches Commands destined for the local JVM. These commands may have been dispatched by instances on other JVMs or from the local one. serializer - used to serialize command messages before they are sent over the wire. When using a cache, it should be cleared out when the ConsistentHash changes to avoid potential data corruption (for example, when commands do not specify a @TargetAggregateVersion and a new member quickly joins and leaves the JGroup, modifying the aggregate while it is still cached elsewhere.) Ultimately, the JGroupsConnector needs to actually connect in order to dispatch messages to other segments. To do so, call the connect() method. JChannel channel = new JChannel(\"path/to/channel/config.xml\"); CommandBus localSegment = SimpleCommandBus.builder().build(); Serializer serializer = XStreamSerializer.builder().build(); JGroupsConnector connector = JGroupsConnector.builder() .channel(channel) .clusterName(\"myCommandBus\") .localSegment(localSegment) .serializer(serializer) .build(); DistributedCommandBus commandBus = DistributedCommandBus.builder() .connector(connector) .commandRouter(connector) .build(); // on one node: commandBus.subscribe(CommandType.class.getName(), handler); connector.connect(); // on another node, with more CPU: commandBus.subscribe(CommandType.class.getName(), handler); commandBus.subscribe(AnotherCommandType.class.getName(), handler2); commandBus.updateLoadFactor(150); // defaults to 100 connector.connect(); // from now on, just deal with commandBus as if it is local... Note that it is not required that all segments have command handlers for the same type of commands. You may use different segments for different command types altogether. The distributed command bus will always choose a node to dispatch a command to that has support for that specific type of command.","title":"JGroups","component":"jgroups-extension-reference","version":"master","name":"index","url":"/jgroups-extension-reference/","titles":[]},"102":{"id":102,"text":"If you use Spring, you may want to consider using the JGroupsConnectorFactoryBean. It automatically connects the connector when the ApplicationContext is started, and does a proper disconnect when the ApplicationContext is shut down. Furthermore, it uses sensible defaults for a testing environment (but should not be considered production ready) and autowiring for the configuration. If Spring Boot is used, the configuration can be further simplified by including the axon-jgroups-spring-boot-starter dependency. The settings for the JGroups connector are all prefixed with axon.distributed.jgroups. # enables Axon to construct the DistributedCommandBus axon.distributed.enabled=true # defines the load factor used for this segment. Defaults to 100 axon.distributed.load-factor=100 # the address to bind this instance to. By default, it attempts to find the Global IP address axon.distributed.jgroups.bind-addr=GLOBAL # the port to bind the local instance to axon.distributed.jgroups.bind-port=7800 # the name of the JGroups Cluster to connect to axon.distributed.jgroups.cluster-name=Axon # the JGroups Configuration file to configure JGroups with axon.distributed.jgroups.configuration-file=default_tcp_gossip.xml # The IP and port of the Gossip Servers (comma separated) to connect to axon.distributed.jgroups.gossip.hosts=localhost[12001] # when true, will start an embedded Gossip Server on bound to the port of the first mentioned gossip host. axon.distributed.jgroups.gossip.auto-start=false","title":"Configuration in SpringBoot","component":"jgroups-extension-reference","version":"master","name":"springboot-config","url":"/jgroups-extension-reference/springboot-config/","titles":[]},"103":{"id":103,"text":"The purpose of this extension is to leverage some features only available in the Pro version of JobRunr. Only the Pro version allows to search existing jobs by status and label. This is required for the deadline manager to implement the cancelAll methods. The deadline managers section has more in depth information on deadline managers. Although jobs created with the non-pro DeadlineManager will be eligible to be canceled, this is only true when they were created with the 4.8 or later versions. Jobs created with the 4.7.x version are missing the correct labels and will not be found when trying to cancel them. For Spring usage, be sure to include the starters, both of JobRunr Pro and the extension. The deadline manager should be available by using parameter-based injection. It can be used in aggregates and sagas using something like: Aggregate Saga @CommandHandler public void handle(SomeCommand command, @Autowired DeadlineManager deadlineManager) { ... } @StartSaga public void handle(SomeEvent event, @Autowired DeadlineManager deadlineManager) { ... } Alternatively, you could also auto wire the deadline manager to the class like: @Autowired void setDeadlineManager(DeadlineManager deadlineManager) { this.deadlineManager = deadlineManager; } An JobRunrProDeadlineManager instance can be created using the builder like this: JobRunrProDeadlineManager.proBuilder() .jobScheduler(jobScheduler) .storageProvider(storageProvider) .scopeAwareProvider(scopeAwareProvider) .serializer(serializer) .transactionManager(transactionManager) .spanFactory(spanFactory) .build(); You probably want to use some form of dependency injection instead of creating a new deadline manager each time you need one.","title":"JobRunr Pro","component":"jobrunr-pro-extension-reference","version":"main","name":"index","url":"/jobrunr-pro-extension-reference/main/","titles":[{"text":"Spring usage","hash":"_spring_usage","id":1},{"text":"Non Spring usage","hash":"_non_spring_usage","id":2}]},"104":{"id":104,"text":"Event messages in an Axon application can be consumed through either a Subscribing or a Tracking Event Processor. Both options are maintained when it comes to consuming events from a Kafka topic, which from a set-up perspective translates to a SubscribableMessageSource or a StreamableKafkaMessageSource respectively, Both will be described in more detail later on, as we first shed light on the general requirements for event consumption in Axon through Kafka. Both approaches use a similar mechanism to poll events with a Kafka Consumer, which breaks down to a combination of a ConsumerFactory and a Fetcher. The extension provides a DefaultConsumerFactory, whose sole requirement is a Map of configuration properties. The Map contains the settings to use for the Kafka Consumer client, such as the Kafka instance locations. Please check the Kafka documentation for the possible settings and their values. public class KafkaEventConsumptionConfiguration { // ... public ConsumerFactory consumerFactory(Map consumerConfiguration) { return new DefaultConsumerFactory<>(consumerConfiguration); } // ... } It is the Fetcher instance’s job to retrieve the actual messages from Kafka by directing a Consumer instance it receives from the message source. You can draft up your own implementation or use the provided AsyncFetcher to this end. The AsyncFetcher doesn’t need to be explicitly started, as it will react on the message source starting it. It does need to be shut down, to ensure any thread pool or active connections are properly closed. public class KafkaEventConsumptionConfiguration { // ... public Fetcher fetcher(long timeoutMillis, ExecutorService executorService) { return AsyncFetcher.builder() .pollTimeout(timeoutMillis) // Defaults to \"5000\" milliseconds .executorService(executorService) // Defaults to a cached thread pool executor .build(); } // ... } Using the SubscribableKafkaMessageSource means you are inclined to use a SubscribingEventProcessor to consume the events in your event handlers. When using this source, Kafka’s idea of pairing Consumer instances into \"Consumer Groups\" is used. This is strengthened by making the groupId upon source construction a hard requirement. To use a common groupId essentially means that the event-stream-workload can be shared on Kafka’s terms, whereas a SubscribingEventProcessor typically works on its own accord regardless of the number of instances. The workload sharing can be achieved by having several application instances with the same groupId or by adjusting the consumer count through the SubscribableKafkaMessageSource builder. The same benefit holds for resetting an event stream, which in Axon is reserved to the TrackingEventProcessor, but is now opened up through Kafka’s own API’s. Although the SubscribableKafkaMessageSource thus provides the niceties the tracking event processor normally provides, it does come with two catches: Axon’s approach of the SequencingPolicy to deduce which thread receives which events is entirely lost. It is thus dependent on which topic-partition pairs are given to a Consumer for the events your handlers receives. From a usage perspective this means event message ordering is no longer guaranteed by Axon. It is thus the user’s job to ensure events are published in the right topic-partition pair. The API Axon provides for resets is entirely lost, since this API can only be correctly triggered through the TrackingEventProcessor#resetTokens operation Due to the above it is recommended the user is knowledgeable about Kafka’s specifics on message consumption. When it comes to configuring a SubscribableKafkaMessageSource as a message source for a SubscribingEventProcessor, there is one additional requirement beside source creation and registration. The source should only start with polling for events as soon as all interested subscribing event processors have been subscribed to it. To ensure the SubscribableKafkaMessageSource#start() operation is called at the right point in the configuration lifecycle, the KafkaMessageSourceConfigurer should be utilized: public class KafkaEventConsumptionConfiguration { // ... public KafkaMessageSourceConfigurer kafkaMessageSourceConfigurer(Configurer configurer) { KafkaMessageSourceConfigurer kafkaMessageSourceConfigurer = new KafkaMessageSourceConfigurer(); configurer.registerModule(kafkaMessageSourceConfigurer); return kafkaMessageSourceConfigurer; } public SubscribableKafkaMessageSource subscribableKafkaMessageSource(List topics, String groupId, ConsumerFactory consumerFactory, Fetcher> fetcher, KafkaMessageConverter messageConverter, int consumerCount, KafkaMessageSourceConfigurer kafkaMessageSourceConfigurer) { SubscribableKafkaMessageSource subscribableKafkaMessageSource = SubscribableKafkaMessageSource.builder() .topics(topics) // Defaults to a collection of \"Axon.Events\" .groupId(groupId) // Hard requirement .consumerFactory(consumerFactory) // Hard requirement .fetcher(fetcher) // Hard requirement .messageConverter(messageConverter) // Defaults to a \"DefaultKafkaMessageConverter\" .consumerCount(consumerCount) // Defaults to a single Consumer .build(); // Registering the source is required to tie into the Configurers lifecycle to start the source at the right stage kafkaMessageSourceConfigurer.registerSubscribableSource(configuration -> subscribableKafkaMessageSource); return subscribableKafkaMessageSource; } public void configureSubscribableKafkaSource(EventProcessingConfigurer eventProcessingConfigurer, String processorName, SubscribableKafkaMessageSource subscribableKafkaMessageSource) { eventProcessingConfigurer.registerSubscribingEventProcessor( processorName, configuration -> subscribableKafkaMessageSource ); } // ... } The KafkaMessageSourceConfigurer is an Axon ModuleConfiguration which ties in to the start and end lifecycle of the application. It should receive the SubscribableKafkaMessageSource as a source which should start and stop. The KafkaMessageSourceConfigurer instance itself should be registered as a module to the main Configurer. If only a single subscribing event processor will be subscribed to the Kafka message source, SubscribableKafkaMessageSource.Builder#autoStart() can be toggled on. This will start the SubscribableKafkaMessageSource upon the first subscription. Using the StreamableKafkaMessageSource means you are inclined to use a TrackingEventProcessor to consume the events in your event handlers. Whereas the subscribable Kafka message source uses Kafka’s idea of sharing the workload through multiple Consumer instances in the same \"Consumer Group\", the streamable approach doesn’t use a consumer group, and assigns all available partitions. public class KafkaEventConsumptionConfiguration { // ... public StreamableKafkaMessageSource streamableKafkaMessageSource(List topics, ConsumerFactory consumerFactory, Fetcher fetcher, KafkaMessageConverter messageConverter, int bufferCapacity) { return StreamableKafkaMessageSource.builder() .topics(topics) // Defaults to a collection of \"Axon.Events\" .consumerFactory(consumerFactory) // Hard requirement .fetcher(fetcher) // Hard requirement .messageConverter(messageConverter) // Defaults to a \"DefaultKafkaMessageConverter\" .bufferFactory( () -> new SortedKafkaMessageBuffer<>(bufferCapacity)) // Defaults to a \"SortedKafkaMessageBuffer\" with a buffer capacity of \"1000\" .build(); } public void configureStreamableKafkaSource(EventProcessingConfigurer eventProcessingConfigurer, String processorName, StreamableKafkaMessageSource streamableKafkaMessageSource) { eventProcessingConfigurer.registerTrackingEventProcessor( processorName, configuration -> streamableKafkaMessageSource ); } // ... } Note that as with any tracking event processor, the progress on the event stream is stored in a TrackingToken. Using the StreamableKafkaMessageSource means a KafkaTrackingToken containing topic-partition to offset pairs is stored in the TokenStore. If no other TokenStore is provided, and auto-configuration is used, a KafkaTokenStore will be set instead of an InMemoryTokenStore. The KafkaTokenStore by default uses the __axon_token_store_updates topic. This should be a compacted topic, which should be created and configured automatically.","title":"Consuming Events from Kafka","component":"kafka-extension-reference","version":"master","name":"consuming","url":"/kafka-extension-reference/consuming/","titles":[{"text":"Consuming Events with a subscribable message source","hash":"subscribable-message-source","id":1},{"text":"Consuming Events with a streamable message source","hash":"streamable-messasge-source","id":2}]},"105":{"id":105,"text":"Apache Kafka is a popular system for publishing and consuming events. Its architecture is fundamentally different from most messaging systems and combines speed with reliability. Axon provides an extension dedicated to publishing and receiving event messages from Kafka. The Kafka Extension should be regarded as an alternative approach to distributing events, besides (the default) Axon Server. It’s also possible to use the extension to stream events from Kafka to Axon server, or the other way around. The implementation of the extension can be found here. The shared repository also contains a sample project using the extension. To use the Kafka Extension components from Axon, make sure the axon-kafka module is available on the classpath. Using the extension requires setting up and configuring Kafka following your project’s requirements. How this is achieved is outside of the scope of this reference guide and should be found in Kafka’s documentation. Note that Kafka is a perfectly fine event distribution mechanism, but it is not an event store. Along those lines this extension only provides the means to distributed Axon’s events through Kafka. Due to this the extension cannot be used to event source aggregates, as this requires an event store implementation. We recommend using a built-for-purpose event store like Axon Server, or alternatively an RDBMS based (the JPA or JDBC implementations for example).","title":"Kafka Extension","component":"kafka-extension-reference","version":"master","name":"index","url":"/kafka-extension-reference/","titles":[]},"106":{"id":106,"text":"In the previous sections the KafkaMessageConverter has been shown as a requirement for event production and consumption. The K is the format of the message’s key, where the V stand for the message’s value. The extension provides a DefaultKafkaMessageConverter which converts an axon EventMessage to a Kafka ProducerRecord, and an ConsumerRecord back into an EventMessage. This DefaultKafkaMessageConverter uses String as the key and byte[] as the value of the message to de-/serialize. Albeit the default, this implementation allows for some customization, such as how the EventMessage MetaData is mapped to Kafka headers. This is achieved by adjusting the \"header value mapper\" in the DefaultKafkaMessageConverter builder. The SequencingPolicy can be adjusted to change the behaviour of the record key being used. The default sequencing policy is the SequentialPerAggregatePolicy, which leads to the aggregate identifier of an event being the key of a ProducerRecord and ConsumerRecord. The format of an event message defines an API between the producer and the consumer of the message. This API may change over time, leading to incompatibility between the event class' structure on the receiving side and the event structure of a message containing the old format. Axon addresses the topic of Event Versioning by introducing Event Upcasters. The DefaultKafkaMessageConverter supports this by provisioning an EventUpcasterChain and run the upcasting process on the MetaData and Payload of individual messages converted from ConsumerRecord before those are passed to the Serializer and converted into Event instances. Note that the KafkaMessageConverter feeds the upcasters with messages one-by-one, limiting it to one-to-one or one-to-many upcasting only. Upcasters performing a many-to-one or many-to-many operation thus won’t be able to operate inside the extension (yet). Lastly, the Serializer used by the converter can be adjusted. See the Serializer section for more details on this. public class KafkaMessageConversationConfiguration { // ... public KafkaMessageConverter kafkaMessageConverter(Serializer serializer, SequencingPolicy> sequencingPolicy, BiFunction headerValueMapper, EventUpcasterChain upcasterChain) { return DefaultKafkaMessageConverter.builder() .serializer(serializer) // Hard requirement .sequencingPolicy(sequencingPolicy) // Defaults to a \"SequentialPerAggregatePolicy\" .upcasterChain(upcasterChain) // Defaults to empty upcaster chain .headerValueMapper(headerValueMapper) // Defaults to \"HeaderUtils#byteMapper()\" .build(); } // ... } Make sure to use an identical KafkaMessageConverter on both the producing and consuming end, as otherwise exception upon deserialization should be expected. A CloudEventKafkaMessageConverter is also available using the Cloud Events spec.","title":"Customizing Event Message Format","component":"kafka-extension-reference","version":"master","name":"message-format","url":"/kafka-extension-reference/message-format/","titles":[]},"107":{"id":107,"text":"When Event Messages are published to an Event Bus (or Event Store), they can be forwarded to a Kafka topic using the KafkaPublisher. To achieve this it will utilize a Kafka Producer, retrieved through Axon’s ProducerFactory. The KafkaPublisher in turn receives the events to publish from a KafkaEventPublisher. Since the KafkaEventPublisher is an event message handler in Axon terms, we can provide it to any Event Processor to receive the published events. The choice of event processor which brings differing characteristics for event publication to Kafka: Subscribing Event Processor - publication of messages to Kafka will occur in the same thread (and Unit of Work) which published the events to the event bus. This approach ensures failure to publish to Kafka enforces failure of the initial event publication on the event bus Tracking Event Processor - publication of messages to Kafka is run in a different thread (and Unit of Work) than the one which published the events to the event bus. This approach ensures the event has been published on the event bus regardless of whether publication to Kafka works When setting up event publication it is also important to take into account which ConfirmationMode is used. The ConfirmationMode influences the process of actually producing an event message on a Kafka topic, but also what kind of Producer the ProducerFactory will instantiate: TRANSACTIONAL - This will require the Producer to start, commit and (in case of failure) rollback the transaction of publishing an event message. Alongside this, it will create a pool of Producer instances in the ProducerFactory to avoid continuous creation of new ones, requiring the user to provide a \"transactional id prefix\" to uniquely identify every Producer in the pool. WAIT_FOR_ACK - Setting \"WAIT_FOR_ACK\" as the ConfirmationMode will require the Producer instance to wait for a default of 1 second (configurable on the KafkaPublisher) until the event message publication has been acknowledged. Alongside this, it will create a single, shareable Producer instance from within the ProducerFactory. NONE - This is the default mode, which only ensures a single, shareable Producer instance from within the ProducerFactory. It is a several step process to configure Event publication to Kafka, which starts with the ProducerFactory. Axon provides the DefaultProducerFactory implementation of the ProducerFactory, which should be instantiated through the provided DefaultProducerFactory.Builder. The builder has one hard requirement, which is the Producer configuration Map. The Map contains the settings to use for the Kafka Producer client, such as the Kafka instance locations. Please check the Kafka documentation for the possible settings and their values. public class KafkaEventPublicationConfiguration { // ... public ProducerFactory producerFactory(Duration closeTimeout, int producerCacheSize, Map producerConfiguration, ConfirmationMode confirmationMode, String transactionIdPrefix) { return DefaultProducerFactory.builder() .closeTimeout(closeTimeout) // Defaults to \"30\" seconds .producerCacheSize(producerCacheSize) // Defaults to \"10\"; only used for \"TRANSACTIONAL\" mode .configuration(producerConfiguration) // Hard requirement .confirmationMode(confirmationMode) // Defaults to a Confirmation Mode of \"NONE\" .transactionalIdPrefix(transactionIdPrefix) // Hard requirement when in \"TRANSACTIONAL\" mode .build(); } // ... } The second infrastructure component to introduce is the KafkaPublisher, which has a hard requirement on the ProducerFactory. Additionally, this would be the place to define the Kafka topics upon which Axon event messages will be published. You can set a function from event to Optional. You can use this to only publish certain events, or put different events to different topics. Its not uncommon for Kafka topics to only contain one type of message. Note that the KafkaPublisher needs to be shutDown properly, to ensure all Producer instances are properly closed. public class KafkaEventPublicationConfiguration { // ... public KafkaPublisher kafkaPublisher(String topic, ProducerFactory producerFactory, KafkaMessageConverter kafkaMessageConverter, int publisherAckTimeout) { return KafkaPublisher.builder() .topicResolver(m -> Optional.of(topic)) // Defaults to \"Axon.Events\" for all events .producerFactory(producerFactory) // Hard requirement .messageConverter(kafkaMessageConverter) // Defaults to a \"DefaultKafkaMessageConverter\" .publisherAckTimeout(publisherAckTimeout) // Defaults to \"1000\" milliseconds; only used for \"WAIT_FOR_ACK\" mode .build(); } // ... } Lastly, we need to provide Axon’s event messages to the KafkaPublisher. To that end a KafkaEventPublisher should be instantiated through the builder pattern. Remember to add the KafkaEventPublisher to an event processor implementation of your choice. It is recommended to use the KafkaEventPublisher#DEFAULT_PROCESSING_GROUP as the processing group name of the event processor to distinguish it from other event processors. public class KafkaEventPublicationConfiguration { // ... public KafkaEventPublisher kafkaEventPublisher(KafkaPublisher kafkaPublisher) { return KafkaEventPublisher.builder() .kafkaPublisher(kafkaPublisher) // Hard requirement .build(); } public void registerPublisherToEventProcessor(EventProcessingConfigurer eventProcessingConfigurer, KafkaEventPublisher kafkaEventPublisher) { String processingGroup = KafkaEventPublisher.DEFAULT_PROCESSING_GROUP; eventProcessingConfigurer.registerEventHandler(configuration -> kafkaEventPublisher) .assignHandlerTypesMatching( processingGroup, clazz -> clazz.isAssignableFrom(KafkaEventPublisher.class) ) .registerSubscribingEventProcessor(processingGroup); // Replace `registerSubscribingEventProcessor` for `registerTrackingEventProcessor` to use a tracking processor } // ... } Kafka ensures message ordering on a topic-partition level, not on an entire topic. To control events of a certain group to be placed in a dedicated partition, based on aggregate identifier for example, the message converter’s SequencingPolicy can be utilized. The topic-partition pair events have been published in also has impact on event consumption. This extension mitigates any ordering concerns with the streamable solution, by ensuring a Consumer always receives all events of a topic to be able to perform a complete ordering. This guarantee is however not given when using the subscribable event consumption approach. The subscribable stream leaves all the ordering specifics in the hands of Kafka, which means the events should be published on a consistent partition to ensure ordering.","title":"Publishing Events to Kafka","component":"kafka-extension-reference","version":"master","name":"publishing","url":"/kafka-extension-reference/publishing/","titles":[{"text":"Configuring event publication to Kafka","hash":"_configuring_event_publication_to_kafka","id":1},{"text":"Topic partition publication considerations","hash":"_topic_partition_publication_considerations","id":2}]},"108":{"id":108,"text":"This extension can be added as a Spring Boot starter dependency to your project using group id org.axonframework.extensions.kafka and artifact id axon-kafka-spring-boot-starter. When using the auto configuration, the following components will be created for you automatically: A using the configured eventSerializer (which defaults to XStreamSerializer), which is used by default to convert between Axon Event messages and Kafka records. Uses a String for the keys and a byte[] for the record’s values. When the property axon.kafka.message-converter-mode is set to cloud_event a CloudEventKafkaMessageConverter will be used instead. This will use String for the keys and CloudEvent. For each the matching Kafka (de)serializers will also be set as default. A DefaultProducerFactory using a String for the keys and a byte[] for the record’s values. This creates a ProducerFactory in confirmation mode \"NONE\", as is specified here. The axon.kafka.publisher.confirmation-mode should be adjusted to change this mode, where the \"TRANSACTIONAL\" mode requires axon.kafka.producer.transaction-id-prefix property to be provided. If the axon.kafka.producer.transaction-id-prefix is non-null and non-empty,it is assumed a \"TRANSACTIONAL\" confirmation mode is desired. Uses a Producer instance from the ProducerFactory to publish events to the configured Kafka topic. Used to provide events to the KafkaPublisher and to assign a processor name and processing group called __axon-kafka-event-publishing-group to it. Defaults to a SubscribingEventProcessor. If a TrackingEventProcessor is desired, the axon.kafka.producer.event-processor-mode should be set to tracking. A DefaultConsumerFactory using a String for the keys and a byte[] for the record’s values An AsyncFetcher. To adjust the Fetcher poll timeout, the axon.kafka.fetcher.poll-timeout can be set. A StreamableKafkaMessageSource which can be used for TrackingEventProcessor instances When using the Spring Boot auto-configuration be mindful to provide an application.properties file. The Kafka extension configuration specifics should be placed under prefix axon.kafka. On this level, the bootstrapServers (defaults to localhost:9092) and default-topic used by the producing and consuming side can be defined. The DefaultProducerFactory and DefaultConsumerFactory expects a Map of configuration properties, which correspond to Kafka Producer and Consumer specific properties respectively. As such, Axon itself passes along these properties without using them directly itself. The application.properties file provides a number of named properties under the axon.kafka.producer. and axon.kafka.consumer. prefixes. If the property you are looking for is not predefined in Axon KafkaProperties file, you are always able to introduce properties in a map style. # This is a sample properties file to configure the Kafka Extension axon: kafka: bootstrap-servers: localhost:9092 client-id: kafka-axon-example default-topic: local.event properties: security.protocol: PLAINTEXT publisher: confirmation-mode: transactional producer: transaction-id-prefix: kafka-sample retries: 0 event-processor-mode: subscribing # For additional unnamed properties, add them to the `properties` map like so properties: some-key: [some-value] fetcher: poll-timeout: 3000 consumer: enable-auto-commit: true auto-commit-interval: 3000 event-processor-mode: tracking # For additional unnamed properties, add them to the `properties` map like so properties: some-key: [some-value] Auto configuring a SubscribableKafkaMessageSource The auto configured StreamableKafkaMessageSource can be toggled off by setting the axon.kafka.consumer.event-processing-mode to subscribing. Note that this does not create a SubscribableKafkaMessageSource for you out of the box. To set up a subscribable message, we recommend to read this section.","title":"Configuration in SpringBoot","component":"kafka-extension-reference","version":"master","name":"springboot-configuration","url":"/kafka-extension-reference/springboot-configuration/","titles":[{"text":"Generic components","hash":"_generic_components","id":1},{"text":"DefaultKafkaMessageConverter","hash":"_defaultkafkamessageconverter","id":2},{"text":"Producer components","hash":"_producer_components","id":3},{"text":"DefaultProducerFactory","hash":"_defaultproducerfactory","id":4},{"text":"KafkaPublisher","hash":"_kafkapublisher","id":5},{"text":"KafkaEventPublisher","hash":"_kafkaeventpublisher","id":6},{"text":"Consumer components","hash":"_consumer_components","id":7},{"text":"DefaultConsumerFactory","hash":"_defaultconsumerfactory","id":8},{"text":"AsyncFetcher","hash":"_asyncfetcher","id":9},{"text":"StreamableKafkaMessageSource","hash":"_streamablekafkamessagesource","id":10},{"text":"Properties file configuration","hash":"_properties_file_configuration","id":11}]},"109":{"id":109,"text":"This section describes the additional functionality attached to Axon’s command dispatching and handling logic. An inlined method has been introduced on the CommandGateway which allows the introduction of a dedicated function to be invoked upon success or failure of handling the command. As such it provides a shorthand instead of using the CommandCallback directly yourself. Here is a sample of how this can be utilized within your own project: import org.axonframework.commandhandling.CommandMessage import org.axonframework.commandhandling.gateway.CommandGateway import org.axonframework.messaging.MetaData import org.slf4j.LoggerFactory class CommandDispatcher(private val commandGateway: CommandGateway) { private val logger = LoggerFactory.getLogger(CommandDispatcher::class.java) // Sample usage providing specific logging logic, next to for example the LoggingInterceptor fun issueCardCommand() { commandGateway.send( command = IssueCardCommand(), onSuccess = { message: CommandMessage, result: Any, _: MetaData -> logger.info(\"Successfully handled [{}], resulting in [{}]\", message, result) }, onError = { result: Any, exception: Throwable, _: MetaData -> logger.warn( \"Failed handling the IssueCardCommand, with output [{} and exception [{}]\", result, exception ) } ) } } class IssueCardCommand","title":"Commands","component":"kotlin-extension-reference","version":"master","name":"commands","url":"/kotlin-extension-reference/commands/","titles":[{"text":"CommandGateway","hash":"commandgateway","id":1}]},"110":{"id":110,"text":"This section describes the additional functionality attached to Axon’s event publication and handling logic. A simplified implementation of the Single Event Upcaster is given, which allows for a shorter implementation cycle. Making an upcaster to upcast the CardIssuedEvent from revision 0 to 1 can be written as follows: import com.fasterxml.jackson.databind.JsonNode import org.axonframework.serialization.upcasting.event.SingleEventUpcaster fun `CardIssuedEvent 0 to 1 Upcaster`(): SingleEventUpcaster = EventUpcaster.singleEventUpcaster( eventType = CardIssuedEvent::class, storageType = JsonNode::class, revisions = Revisions(\"0\", \"1\") ) { event -> // Perform your upcasting process of the CardIssuedEvent here event } class CardIssuedEvent Alternatively, since Revisions is essentially a Pair of String, it is also possible to use Kotlin’s to function: EventUpcaster.singleEventUpcaster( eventType = CardIssuedEvent::class, storageType = JsonNode::class, revisions = \"0\" to \"1\" ) { event -> // Perform your upcasting process of the CardIssuedEvent here event }","title":"Events","component":"kotlin-extension-reference","version":"master","name":"events","url":"/kotlin-extension-reference/events/","titles":[{"text":"Event upcasters","hash":"_event_upcasters","id":1}]},"111":{"id":111,"text":"Kotlin is a programming language which interoperates fully with Java and the JVM. As Axon is written in Java it can be used in conjunction with Kotlin too, offering a different feel when using the framework. Some of Axon’s API’s work perfectly well in Java, but have a rather awkward feel when transitioning over to Kotlin. The goal of the Kotlin Extension is to remove that awkwardness, by providing inline and reified methods of Axon’s API. Several solutions are currently given, which can roughly be segregated into the distinct types of messages used by Axon. This thus provides a Commands, Events and Queries section on this guide. Experimental Release Currently, the Kotlin Extension has been release experimentally (for example, release 0.1.0). This means that all implementations are subject to change until a full release (for example, a release 1.0.0) has been made.","title":"Kotlin","component":"kotlin-extension-reference","version":"master","name":"index","url":"/kotlin-extension-reference/","titles":[]},"112":{"id":112,"text":"This section describes the additional functionality attached to Axon’s query dispatching and handling logic. Several inlined methods have been introduced on the QueryGateway to use generics instead of explicit Class objects and ResponseType parameters. import org.axonframework.queryhandling.QueryGateway class QueryDispatcher(private val queryGateway: QueryGateway) { fun getTotalNumberOfCards(): Int { val query = CountCardSummariesQuery() // Query will return a CompletableFuture so it has to be handled return queryGateway.query(query) .join() } } data class CountCardSummariesQuery(val filter: String = \"\") In some cases, Kotlin’s type inference system can deduce types without explicit generic parameters. One example of this would be an explicit return parameter: import org.axonframework.queryhandling.QueryGateway import java.util.concurrent.CompletableFuture class QueryDispatcher(private val queryGateway: QueryGateway) { fun getTotalNumberOfCards(): CompletableFuture = queryGateway.query(CountCardSummariesQuery()) } data class CountCardSummariesQuery(val filter: String = \"\") There are multiple variants of the query method provided, for each type of ResponseType: query queryOptional queryMany An inline emit method has been added to QueryUpdateEmitter to simplify emit method’s call by using generics and moving the lambda predicate at the end of parameter list. This way the lambda function can be moved outside of the parentheses. import org.axonframework.queryhandling.QueryUpdateEmitter import org.axonframework.eventhandling.EventHandler class CardSummaryProjection (private val queryUpdateEmitter : QueryUpdateEmitter) { @EventHandler fun on(event : CardIssuedEvent) { // Update projection here // Then emit the CountChangedUpdate to subscribers of CountCardSummariesQuery // with the given filter queryUpdateEmitter .emit(CountChangedUpdate()) { query -> // Sample filter based on ID field event.id.startsWith(query.idFilter) } } } class CardIssuedEvent(val id : String) class CountChangedUpdate data class CountCardSummariesQuery(val idFilter: String = \"\")","title":"Queries","component":"kotlin-extension-reference","version":"master","name":"queries","url":"/kotlin-extension-reference/queries/","titles":[{"text":"QueryGateway","hash":"querygateway","id":1},{"text":"QueryUpdateEmitter","hash":"queryupdateemitter","id":2}]},"113":{"id":113,"text":"See Dead-Letter Queue for the general information about the Dead-Letter Queue. @Configuration public class AxonConfig { // omitting other configuration methods... @Bean public ConfigurerModule deadLetterQueueConfigurerModule( MongoTemplate mongoTemplate ) { // Replace \"my-processing-group\" for the processing group you want to configure the DLQ on. return configurer -> configurer.eventProcessing().registerDeadLetterQueue( \"my-processing-group\", config -> MongoSequencedDeadLetterQueue.builder() .processingGroup(\"my-processing-group\") .maxSequences(256) .maxSequenceSize(256) .mongoTemplate(mongoTemplate) .transactionManager(config.getComponent(TransactionManager.class)) .serializer(config.serializer()) .build() ); } }","title":"Configuration of the MongoDB Dead-Letter Queue with Spring","component":"mongodb-extension-reference","version":"master","name":"dlq-spring-config","url":"/mongodb-extension-reference/dlq-spring-config/","titles":[]},"114":{"id":114,"text":"The MongoEventStorageEngine has an @PostConstruct annotated method, called ensureIndexes which will generate the indexes required for correct operation. That means, when running in a container that automatically calls @PostConstruct handlers, the required unique index on \"Aggregate Identifier\" and \"Event Sequence Number\" is created when the event store is created. Note that there is always a balance between query optimization and update speed. Load testing is ultimately the best way to discover which indices provide the best performance. An index is automatically created on \"aggregateIdentifier\", \"type\" and \"sequenceNumber\" in the domain events (default name: \"domainevents\") collection. Additionally, a non-unique index on \"timestamp\" and \"sequenceNumber\" is configured on the domain events (default name: \"domainevents\") collection, for tracking event processors. A (unique) index on \"aggregateIdentifier\" and \"sequenceNumber\" is automatically created in the snapshot events (default name: \"snapshotevents\") collection. Put a (unique) index on the \"sagaIdentifier\" in the saga (default name: \"sagas\") collection. Put an index on the \"sagaType\", \"associations.key\" and \"associations.value\" properties in the saga (default name: \"sagas\") collection. Put a (unique) index on the combination of \"processingGroup\", \"sequenceIdentifier\" and \"index\" in the dead letter (default name: \"deadletters\") collection. Put an index on the \"processingGroup\", and \"sequenceIdentifier\" properties in the dead letter (default name: \"deadletters\") collection. Put an index on the \"processingGroup\" property in the dead letter (default name: \"deadletters\") collection. In pre Axon Framework 3 release we found MongoDb to be a good fit as an Event Store. However, with the introduction of Tracking Event Processors and how they track their events, we have encountered some inefficiencies regarding the Mongo Event Store implementation. We recommend using a built-for-purpose event store like Axon Server, or alternatively an RDBMS based (the JPA or JDBC implementations for example), and would only suggest to use Mongo for this use case if you have found its performance to be beneficial for your application.","title":"MongoDB Extension","component":"mongodb-extension-reference","version":"master","name":"index","url":"/mongodb-extension-reference/","titles":[{"text":"Normal operation use","hash":"_normal_operation_use","id":1},{"text":"Snapshotting","hash":"_snapshotting","id":2},{"text":"Sagas","hash":"_sagas","id":3},{"text":"Dead letter queue","hash":"_dead_letter_queue","id":4}]},"115":{"id":115,"text":"@Configuration public class AxonConfig { // omitting other configuration methods... // The EmbeddedEventStore delegates actual storage and retrieval of events to an EventStorageEngine. @Bean public EventStore eventStore(EventStorageEngine storageEngine, GlobalMetricRegistry metricRegistry) { return EmbeddedEventStore.builder() .storageEngine(storageEngine) .messageMonitor(metricRegistry.registerEventBus(\"eventStore\")) .spanFactory(spanFactory) // ... .build(); } // The MongoEventStorageEngine stores each event in a separate MongoDB document. @Bean public EventStorageEngine storageEngine(MongoDatabaseFactory factory, TransactionManager transactionManager) { return MongoEventStorageEngine.builder() .mongoTemplate(SpringMongoTemplate.builder() .factory(factory) .build()) .transactionManager(transactionManager) // ... .build(); } }","title":"Configuration of the Event Store with Spring","component":"mongodb-extension-reference","version":"master","name":"spring-config","url":"/mongodb-extension-reference/spring-config/","titles":[]},"116":{"id":116,"text":"This extension can be added as a Spring Boot starter dependency to your project using group id org.axonframework.extensions.mongo and artifact id axon-mongo-spring-boot-starter. When using the autoconfiguration, by default the following components will be created for you automatically: A MongoTransactionManager to enable transactions with Mongo. A SpringMongoTransactionManager, this is the wrapped Spring mongo transaction manager, and will also be injected where applicable in other components created by the auto-config. A SpringMongoTemplate, this will use a MongoDatabaseFactory that should be available. To use transaction with Mongo the collections need to be accessed in a certain way, and this component makes sure of that. A MongoTokenStore, this will be used by the event processors to can keep track which events have been processed, and which segments are claimed. A MongoSagaStore, this will be used to store and retrieve saga’s. It’s also possible to autoconfigure the StorageStrategy and EventStorageEngine by setting the mongo.event-store.enabled to true. The creation of the token store and the saga store can be turned off by setting mongo.token-store.enabled or mongo.saga-store.enabled to false. It’s also possible to use a different database for the axon collections than the default the MongoDatabaseFactory uses by setting the axon.mongo.database-name property. The relevant configuration could look like this: spring: data: mongodb: uri: mongodb://localhost:27017/test mongo: database-name: axon token-store: enabled: true saga-store: enabled: false event-store: enabled: false While test is the default database name, for the Axon collections the axon database will be used instead. The saga store will not be initialised.","title":"Configuration in SpringBoot","component":"mongodb-extension-reference","version":"master","name":"springboot-config","url":"/mongodb-extension-reference/springboot-config/","titles":[]},"117":{"id":117,"text":"Minimal configuration is needed to get extension up and running. If you know list of contexts that you want your application to connect in advanced configure them coma separated in application.properties via following properties: axon.axonserver.contexts=tenant-context-1,tenant-context-2,tenant-context-3 If you don’t know tenants in advance and you plan to create them in runtime, you can define a predicate which will tell application to which contexts to connect to in runtime: @Bean public TenantConnectPredicate tenantFilterPredicate() { return context -> context.tenantId().startsWith(\"tenant-\"); } Note that in this case you need to remove axon.axonserver.contexts property. By default, to route message to specific tenant you need to tag initial message that enters your system with metadata . This is done with meta-data helper, and you need to add tenant name to metadata with key TenantConfiguration.TENANT_CORRELATION_KEY. message.andMetaData(Collections.singletonMap(TENANT_CORRELATION_KEY, \"tenant-context-1\") Metadata needs to be added only to initial message that enters your system. Any message that is produced by consequence of initial message will have this metadata copied automatically using to CorrelationProvider. If you wish to disable default meta-data based routing define following property: axon.multi-tenancy.use-metadata-helper=false And define custom tenant resolver bean. For example following imaginary bean can use message payload to route message to specific tenant: @Bean public TargetTenantResolver> customTargetTenantResolver() { return (message, tenants) -> (1) TenantDescriptor.tenantWithId( message.getPayload().getField(\"tenantName\") ); } 1 First lambda parameter message represents message to be routed, while second parameter tenants represents list of currently registered tenants, if you wish to use is to route only to one of connected tenants. If you wish to use distinct database to store projections and token store for each tenant, configure following bean: @Bean public Function tenantDataSourceResolver() { return tenant -> { DataSourceProperties properties = new DataSourceProperties(); properties.setUrl(\"jdbc:postgresql://localhost:5432/\"+tenant.tenantId()); properties.setDriverClassName(\"org.postgresql.Driver\"); properties.setUsername(\"postgres\"); properties.setPassword(\"postgres\"); return properties; }; } Note that this works by using JPA multi-tenancy support, that means only SQL Databases are supported out of the box. If you wish to implement multi-tenancy for a different type of databases (for example, NoSQL) make sure that your projection database supports multi-tenancy. While in transaction you may find out which tenant owns transaction by calling: TenantWrappedTransactionManager.getCurrentTenant(). For more hints how to enable multi-tenancy for NoSQL databases check on how JPA SQL version is implemented In this case Liquibase or Flyway will not be able to initialise schemas for dynamic data sources. Any datasource that you use needs to have pre-initialized schema. In order to correctly resolve right query update emitter inject update emitter in following style: @EventHandler public void on(Event event, QueryUpdateEmitter queryUpdateEmitter) { //queryUpdateEmitter will route updates to same tenant as event will be ... } Resetting projections works a bit different because you have instanced of each event processor group for each tenant. Reset specific tenant event processor group: TrackingEventProcessor trackingEventProcessor = configuration.eventProcessingConfiguration() .eventProcessor(\"com.demo.query-ep@tenant-context-1\", TrackingEventProcessor.class) .get(); Name of each event processor is: {even processor name}@{tenant name} Access all tenant event processors by retrieving MultiTenantEventProcessor only. MultiTenantEventProcessor acts as a proxy Event Processor that references all tenant event processors. The configuration of a dead-letter queue is similar to a non-multi-tenant environment. The tenant will be resolved through the Message’s MetaData and routed to the corresponding DLQ. If you wish to have different enqueuing policies per tenant, you can use the MetaData from the dead letter message to determine to which tenant the message belongs to act accordingly. Do note that processing dead letters from the queue is slightly different, as you need the specific tenant context to process dead-letter from. To select the tenant for which you want to process a dead letter, you need to cast the SequencedDeadLetterProcessor to a MultiTenantDeadLetterProcessor. From the MultiTenantDeadLetterProcessor, you need to use the forTenant method to select the tenant-specific SequencedDeadLetterProcessor. public class DlqManagement { private MultiTenantDeadLetterProcessor multiTenantDeadLetterProcessor; // Axon Framework's org.axonframework.config.Configuration public DlqManagement(Configuration configuration) { SequencedDeadLetterProcessor deadLetterProcessor = configuration.sequencedDeadLetterProcessor(); this.multiTenantDeadLetterProcessor = (MultiTenantDeadLetterProcessor) deadLetterProcessor; } public void processDeadLetterSequenceForTenant(String tenantId, Predicate>> sequenceFilter) { multiTenantDeadLetterProcessor.forTenant(tenantId) .process(sequenceFilter); } } Here is a full example of a REST endpoint to retry dead letters for a specific tenant: public class DlqManagementController { // Axon Framework's org.axonframework.config.Configuration private Configuration configuration; @PostMapping(path = \"/retry-dlq\") public void retryDLQ(@RequestParam String tenant, @RequestParam String processingGroup) { configuration.eventProcessingConfiguration() .sequencedDeadLetterProcessor(processingGroup) .map(p -> (MultiTenantDeadLetterProcessor) p) .map(mp -> mp.forTenant(TenantDescriptor.tenantWithId(tenant))) .ifPresent(SequencedDeadLetterProcessor::processAny); } } Only JPA Dead letter queue and In-Memory queues are supported. As of now, there is no plan to support deadline manager out of the box. None of deadline manager implementation support multi-tenancy. See Event scheduler section as alternative. You can use the MultiTenantEventScheduler to schedule events for specific tenants. To do so, you can inject the EventScheduler and use it to schedule events: public class EventHandlingComponentSchedulingEvents { private EventScheduler eventScheduler; @EventHandler public void eventHandler(Event event) { // Schedules the given event to be published in 10 days. ScheduledToken token = eventScheduler.schedule(Instant.now().plusDays(10), event); // The token returned by EventScheduler#schedule can be used to, for example, cancel the scheduled task. eventScheduler.cancelSchedule(token); } } If you use the EventScheduler from any message handling method, it will automatically pick up tenant from Message#metadata. Hence, there is no need to specify the tenant you want to schedule an event for. If you wish to use the EventScheduler outside of message handlers, you are inclined to wrap the execution into a so-called TenantWrappedTransactionManager. Within this TenantWrappedTransactionManager you can schedule the event: public class EventSchedulingComponent { private EventScheduler eventScheduler; public void schedule(Event event) { ScheduledToken token; // Schedules the given event to be published in 10 days. new TenantWrappedTransactionManager( TenantDescriptor.tenantWithId(tenantName)) .executeInTransaction( () -> token = eventScheduler.schedule(Instant.now().plusDays(10), event) ); // The token returned by EventScheduler#schedule can be used to, for example, cancel the scheduled task. new TenantWrappedTransactionManager( TenantDescriptor.tenantWithId(tenantName)) .executeInTransaction( () -> eventScheduler.cancelSchedule(token) ); } } You can override the default message source for each tenant by defining the following bean: @Bean public MultiTenantStreamableMessageSourceProvider multiTenantStreamableMessageSourceProvider(AxonServerEventStore customSource) { return (defaultTenantSource, processorName, tenantDescriptor, configuration) -> { if (tenantDescriptor.tenantId().startsWith(\"tenant-custom\")) { return customSource; } return defaultTenantSource; }; } This bean should return a StreamableMessageSource that will be used for specific tenants. This lambda will be called for each tenant and each event processor, so be sure to return a default tenant source if you don’t want to override it. In certain cases, you may want to disable multi-tenancy for specific Event Processor which does not have any tenants. For example, when you have an event processor that is consuming events from an external context. Per default, each event processor is scaled, and duplicated for each tenant. To disable this behavior for a specific processing, you can define following bean: @Bean public MultiTenantEventProcessorPredicate multiTenantEventProcessorPredicate() { return (processorName) -> !processorName.equals(\"external-context\"); } This bean should return true for each processor that you want to be multi-tenant, and false for each processor that you want to be single tenant. This extension provides several factory interfaces that are used to create tenant-specific segments for various Axon components, such as Command Bus, Query Bus, Event Store, and Event Scheduler. These factories allow you to configure and customize the behavior of these components for each tenant. The following tenant segment factories are available: This factory is responsible for creating a CommandBus instance for each tenant. By default, it creates an AxonServerCommandBus that uses a SimpleCommandBus as the local segment and connects to Axon Server. You can override this factory to provide a custom implementation of the CommandBus for specific tenants. This factory creates a QueryBus instance for each tenant. By default, it creates an AxonServerQueryBus that uses a SimpleQueryBus as lhe local segment and connects to Axon Server. You can override this factory to provide a custom implementation of the QueryBus for specific tenants. This factory is responsible for creating an EventStore instance for each tenant. By default, it creates an AxonServerEventStore that connects to Axon Server. You can override this factory to provide a custom implementation of the EventStore for specific tenants. This factory creates an EventScheduler instance for each tenant. By default, it creates an AxonServerEventScheduler that connects to Axon Server. You can override this factory to provide a custom implementation of the EventScheduler for specific tenants. This factory creates a TenantDescriptor for each event processor, which is used to identify the tenant associated with the event processor. By default, it uses the tenant identifier as the TenantDescriptor. You can override this factory to provide a custom implementation of the TenantDescriptor for specific event processors.","title":"Configuration","component":"multitenancy-extension-reference","version":"main","name":"configuration","url":"/multitenancy-extension-reference/main/configuration/","titles":[{"text":"Static tenants configuration","hash":"_static_tenants_configuration","id":1},{"text":"Dynamic tenants configuration","hash":"_dynamic_tenants_configuration","id":2},{"text":"Route message to specific tenant","hash":"_route_message_to_specific_tenant","id":3},{"text":"Custom resolver","hash":"_custom_resolver","id":4},{"text":"Multi-tenant projections","hash":"_multi_tenant_projections","id":5},{"text":"Query update emitter","hash":"_query_update_emitter","id":6},{"text":"Resetting projections","hash":"_resetting_projections","id":7},{"text":"Dead-letter queue","hash":"_dead_letter_queue","id":8},{"text":"Deadline manager","hash":"_deadline_manager","id":9},{"text":"Event scheduler","hash":"_event_scheduler","id":10},{"text":"Advanced configuration","hash":"_advanced_configuration","id":11},{"text":"Overriding default message source","hash":"_overriding_default_message_source","id":12},{"text":"Disable multi-tenancy for specific event processor","hash":"_disable_multi_tenancy_for_specific_event_processor","id":13},{"text":"Tenant Segment Factories","hash":"_tenant_segment_factories","id":14},{"text":"TenantCommandSegmentFactory","hash":"_tenantcommandsegmentfactory","id":15},{"text":"TenantQuerySegmentFactory","hash":"_tenantquerysegmentfactory","id":16},{"text":"TenantEventSegmentFactory","hash":"_tenanteventsegmentfactory","id":17},{"text":"TenantEventSchedulerSegmentFactory","hash":"_tenanteventschedulersegmentfactory","id":18},{"text":"TenantEventProcessorControlSegmentFactory","hash":"_tenanteventprocessorcontrolsegmentfactory","id":19}]},"118":{"id":118,"text":"By default, extension is automatically enabled. If you wish to disable extension without removing extension use following property. axon.multi-tenancy.enabled=false","title":"Disable Extension","component":"multitenancy-extension-reference","version":"main","name":"disable","url":"/multitenancy-extension-reference/main/disable/","titles":[]},"119":{"id":119,"text":"Axon Framework Multitenancy Extension provides your application ability to serve multiple tenants (event-stores) at once. Multi-tenancy is important in cloud computing and this extension will provide ability to connect to tenants dynamically, physical separate tenants data, scale tenants independently…​ Currently, following requirements needs to be meet for extension to work: Use Spring Framework together with Axon Framework 4.6+ Use Axon Server EE 4.6+ or Axon Cloud as event store This is not hard requirement but if you wish to enable multitenancy on projection side, only SQL databases are supported out-of-the box Only components that interact with Axon Server and or database via JPA are supported out of the box. If you wish to use other components, you need to implement multi-tenancy support for them.","title":"Introduction","component":"multitenancy-extension-reference","version":"main","name":"index","url":"/multitenancy-extension-reference/main/","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"Restrictions","hash":"_restrictions","id":2}]},"120":{"id":120,"text":"Currently, supported multi-tenants components are as follows: MultiTenantCommandBus MultiTenantEventProcessor MultiTenantEventStore MultiTenantQueryBus MultiTenantQueryUpdateEmitter MultiTenantEventProcessorControlService MultiTenantDataSourceManager MultiTenantEventScheduler Not supported components are: Deadline Manager","title":"Supported Multi-Tenant Components","component":"multitenancy-extension-reference","version":"main","name":"multi-tenant-components","url":"/multitenancy-extension-reference/main/multi-tenant-components/","titles":[]},"121":{"id":121,"text":"Overlooking Axon Frameworks architecture, you can notice that in general systems using the framework are \"Message Driven\", \"Responsive\", \"Resilient\" and \"Elastic\". According to Reactive Manifesto, the same holds for Reactive Systems in general. Although we can state that Axon Framework is a type of reactive system, we can’t say that it is fully reactive. Reactive programming is an approach to writing software that embraces asynchronous I/O. Asynchronous I/O is a small idea that portends big changes for software. The idea is simple: alleviate inefficient resource utilization by reclaiming resources that would otherwise be idle, as they waited for I/O activity. Asynchronous I/O inverts the normal design I/O processing: the clients are notified of new data instead of asking for it, which frees the client to do other work while waiting for these notifications. By their nature, a reactive API and Axon are a great fit, as most of framework’s operations are async and non-blocking. Providing a dedicated extension for this was thus a logical step to take. To that end, we chose to use Pivotal’s Project Reactor to build this extension. Reactor builds on top of the Reactive Streams specification and is the de-facto standard for Java enterprise and Spring applications. As such, we feel it to be a great fit to provide an extension in, making Axon more reactive. Not all Axon components offer a reactive API, yet. We will incrementally introduce more \"reactiveness\" to this extension, giving priority to components where users can benefit the most. To use the Axon Reactor Extension, make sure that axon-reactor module is available on the classpath.","title":"Reactor","component":"reactor-extension-reference","version":"master","name":"index","url":"/reactor-extension-reference/","titles":[]},"122":{"id":122,"text":"The \"Reactive Gateways\" offer a reactive API wrapper around the command, query and event bus. Most of the operations are similar to those from non-reactive gateways, simply replacing the CompletableFuture with either a Mono or Flux. In some cases, the API is expended to ease use of common reactive patterns. Reactor doesn’t allow null values in streams. Any null value returned from the handler will be mapped to Mono#empty(). Retrying operations All operations support Reactor’s retry mechanism: reactiveQueryGateway.query(query, ResponseType.class).retry(5); This call will retry sending the query a maximum of five times when it fails. This extension can be added as a Spring Boot starter dependency to your project using group id org.axonframework.extensions.reactor and artifact id axon-reactor-spring-boot-starter. The implementation of the extension can be found here. This section describes the methods on the ReactorCommandGateway. Sends the given command once the caller subscribes to the command result. Returns immediately. A common pattern is using the REST API to send a command. In this case it is recommend to for example use WebFlux, and return the command result Mono directly to the controller: Sending a command from a Spring WebFlux Controller. class SpringCommandController { private final ReactorCommandGateway reactiveCommandGateway; @PostMapping public Mono sendCommand(@RequestBody CommandBody command) { return reactiveCommandGateway.send(command); } } If the command handling function returns type void, Mono should be replaced with Mono Another common pattern is \"send and forget\": Function that sends a command and returns immediately without waiting for the result. class CommandDispatcher { private final ReactorCommandGateway reactiveCommandGateway; public void sendAndForget(MyCommand command) { reactiveCommandGateway.send(command) .subscribe(); } } This method uses the given Publisher of commands to dispatch incoming commands. This operation is available only in the Reactor extension. Use it to connect third-party streams that delivers commands. Connects an external input stream directly to the Reactor Command Gateway. class CommandPublisher { private final ReactorCommandGateway reactiveCommandGateway; @PostConstruct public void startReceivingCommands(Flux inputStream) { reactiveCommandGateway.sendAll(inputStream) .subscribe(); } } The sendAll operation will keep sending commands until the input stream is canceled. send and sendAll do not offer any backpressure, yet. The only backpressure mechanism in place is that commands will be sent sequentially; thus once the result of a previous command arrives. The number of commands is prefetched from an incoming stream and stored in a buffer for sending (see Flux#concatMap). This slows down sending, but does not guarantee that the Subscriber will not be overwhelmed with commands if they are sent too fast. Sends the given query, expecting a response in the form of responseType from a single source. Recommended way of using the Reactor query gateway within a Spring REST controller. class SpringQueryController { private final ReactorQueryGateway reactiveQueryGateway; // The query's Mono is returned to the Spring controller. Subscribe control is given to Spring Framework. @GetMapping public Mono findAll(FindAllQuery query, Class responseType) { return reactiveQueryGateway.query(query, responseType); } } Sends the given query, expecting a response in the form of responseType from several sources within a specified duration. Sends a given query that stops after receiving three results, or after 5 seconds. class SpringQueryController { private final ReactorQueryGateway reactiveQueryGateway; @GetMapping public Flux findMany(FindManyQuery query) { return reactiveQueryGateway.scatterGather(query, SomeResponseType.class, Duration.ofSeconds(5)).take(3); } } Firstly, the Reactor API for subscription queries in Axon is not new. However, we noticed several patterns which are often used, such as: Concatenating initial results with query updates in a single stream, or skipping the initial result all together. As such, the Reactor Extension provides several methods to ease usage of these common patterns. Sends the given query, returns the initial result and keeps streaming incremental updates until a subscriber unsubscribes from the Flux. Note that this method should be used when the response type of the initial result and incremental update match. Flux resultFlux = reactiveQueryGateway.subscriptionQuery(\"criteriaQuery\", ResultType.class); The above invocation through the ReactorQueryGateway is equivalent to: class SubscriptionQuerySender { private final ReactorQueryGateway reactiveQueryGateway; public Flux sendSubscriptionQuery(SomeQuery query, Class responseType) { return reactiveQueryGateway.subscriptionQuery(query, responseType, responseType) .flatMapMany(result -> result.initialResult() .concatWith(result.updates()) .doFinally(signal -> result.close())); } } Sends the given query, returns the initial result and keeps streaming incremental updates until a subscriber unsubscribes from the Flux. This operation should be used when the initial result contains multiple instances of the response type which needs to be flattened. Additionally, the response type of the initial response and incremental updates need to match. Flux resultFlux = reactiveQueryGateway.subscriptionQueryMany(\"criteriaQuery\", ResultType.class); The above invocation through the ReactorQueryGateway is equivalent to: class SubscriptionQuerySender { private final ReactorQueryGateway reactiveQueryGateway; public Flux sendSubscriptionQuery(SomeQuery query, Class responseType) { return reactiveQueryGateway.subscriptionQuery(query, ResponseTypes.multipleInstancesOf(responseType), ResponseTypes.instanceOf(responseType)) .flatMapMany(result -> result.initialResult() .flatMapMany(Flux::fromIterable) .concatWith(result.updates()) .doFinally(signal -> result.close())); } } Sends the given query and streams incremental updates until a subscriber unsubscribes from the Flux. This method could be used when subscriber is only interested in updates. Flux updatesOnly = reactiveQueryGateway.queryUpdates(\"criteriaQuery\", ResultType.class); The above invocation through the ReactorQueryGateway is equivalent to: class SubscriptionQuerySender { private final ReactorQueryGateway reactiveQueryGateway; public Flux sendSubscriptionQuery(SomeQuery query, Class responseType) { return reactiveQueryGateway.subscriptionQuery(query, ResponseTypes.instanceOf(Void.class), responseType) .flatMapMany(result -> result.updates() .doFinally(signal -> result.close())); } } In the above shown methods, the subscription query is closed automatically after a subscriber has unsubscribed from the Flux. When using the regular QueryGateway, the subscription query needs to be closed manually however. Reactive variation of the EventGateway. Provides support for reactive return types such as Flux. Publishes the given events once the caller subscribes to the resulting Flux. This method returns events that were published. Note that the returned events may be different from those the user has published, granted an interceptor has been registered which modifies events. Example of dispatcher modified events, returned to user as the result Flux. class EventPublisher { private final ReactorEventGateway reactiveEventGateway; // Register a dispatch interceptor to modify the event messages public EventPublisher() { reactiveEventGateway.registerDispatchInterceptor( eventMono -> eventMono.map(event -> GenericEventMessage.asEventMessage(\"intercepted\" + event.getPayload())) ); } public void publishEvent() { Flux result = reactiveEventGateway.publish(\"event\"); } } Axon provides a notion of interceptors. The Reactor gateways allow for similar interceptor logic, namely the ReactorMessageDispatchInterceptor and ReactorResultHandlerInterceptor. These interceptors allow us to centrally define rules and filters that will be applied to a message stream. Interceptors will be applied in order they have been registered to the given component. The ReactorMessageDispatchInterceptor should be used to centrally apply rules and validations for outgoing messages. Note that a ReactorMessageDispatchInterceptor is an implementation of the default MessageDispatchInterceptor interface used throughout the framework. The implementation of this interface is described as follows: @FunctionalInterface public interface ReactorMessageDispatchInterceptor> extends MessageDispatchInterceptor { Mono intercept(Mono message); @Override default BiFunction handle(List messages) { return (position, message) -> intercept(Mono.just(message)).block(); } } It thus defaults the MessageDispatchInterceptor#handle(List method to utilize the ReactorMessageDispatchInterceptor#intercept(Mono) method. As such, a ReactorMessageDispatchInterceptor could thus be configured on a plain Axon gateway too. Here are a couple of examples how a message dispatch interceptor could be used: Dispatch interceptor that adds key-value pairs to the message’s MetaData. class ReactorConfiguration { public void registerDispatchInterceptor(ReactorCommandGateway reactiveGateway) { reactiveGateway.registerDispatchInterceptor( msgMono -> msgMono.map(msg -> msg.andMetaData(Collections.singletonMap(\"key1\", \"value1\"))) ); } } Dispatch interceptor that discards the message, based on a security flag in the Reactor Context. class ReactorConfiguration { public void registerDispatchInterceptor(ReactorEventGateway reactiveGateway) { reactiveGateway.registerDispatchInterceptor( msgMono -> msgMono.filterWhen(v -> Mono.subscriberContext() .filter(ctx-> ctx.hasKey(\"security\")) .map(ctx->ctx.get(\"security\"))) ); } } The ReactorResultHandlerInterceptor should be used to centrally apply rules and validations for incoming messages, a.k.a. results. The implementation of this interface is described as follows: @FunctionalInterface public interface ReactorResultHandlerInterceptor, R extends ResultMessage> { Flux intercept(M message, Flux results); } The parameters are the message that has been sent, and a Flux of results from that message, which is going to be intercepted. The message parameter can be useful if you want to apply a given result rule only for specific messages. Here are a couple of examples how a message result interceptor could be used: This type of interceptor is available only in the Reactor Extension. Result interceptor which discards all results that have a payload matching blockedPayload class ReactorConfiguration { public void registerResultInterceptor(ReactorQueryGateway reactiveGateway) { reactiveGateway.registerResultHandlerInterceptor( (msg, results) -> results.filter(r -> !r.getPayload().equals(\"blockedPayload\")) ); } } Result interceptor which validates that the query result does not contain an empty String. class ReactorConfiguration { public void registerResultInterceptor(ReactorQueryGateway reactiveGateway) { reactiveQueryGateway.registerResultHandlerInterceptor( (query, results) -> results.flatMap(r -> { if (r.getPayload().equals(\"\")) { return Flux.>error(new RuntimeException(\"no empty strings allowed\")); } else { return Flux.just(r); } }) ); } } Result interceptor which discards all results where the queryName matches myBlockedQuery. class ReactorConfiguration { public void registerResultInterceptor(ReactorQueryGateway reactiveGateway) { reactiveQueryGateway.registerResultHandlerInterceptor( (q, results) -> results.filter(it -> !((boolean) q.getQueryName().equals(\"myBlockedQuery\"))) ); } } Result interceptor which limits the result waiting time to thirty seconds per message. class ReactorConfiguration { public void registerResultInterceptor(ReactorCommandGateway reactiveGateway) { reactiveGateway.registerResultHandlerInterceptor( (msg,results) -> results.timeout(Duration.ofSeconds(30)) ); } } Result interceptor which limits the number of results to five entries, and logs all results. class ReactorConfiguration { public void registerResultInterceptor(ReactorCommandGateway reactiveGateway) { reactiveGateway.registerResultHandlerInterceptor( (msg,results) -> results.log().take(5) ); } }","title":"Reactor Gateways","component":"reactor-extension-reference","version":"master","name":"reactor-gateways","url":"/reactor-extension-reference/reactor-gateways/","titles":[{"text":"Configuration in SpringBoot","hash":"_configuration_in_springboot","id":1},{"text":"Reactor command gateway","hash":"_reactor_command_gateway","id":2},{"text":"send","hash":"send","id":3},{"text":"sendAll","hash":"sendall","id":4},{"text":"Reactor query gateway","hash":"_reactor_query_gateway","id":5},{"text":"query","hash":"query","id":6},{"text":"scatterGather","hash":"scattergather","id":7},{"text":"Subscription queries","hash":"_subscription_queries","id":8},{"text":"subscriptionQuery","hash":"subscriptionquery","id":9},{"text":"subscriptionQueryMany","hash":"subscriptionquerymany","id":10},{"text":"queryUpdates","hash":"queryupdated","id":11},{"text":"Reactor event gateway","hash":"_reactor_event_gateway","id":12},{"text":"publish","hash":"publish","id":13},{"text":"Interceptors","hash":"_interceptors","id":14},{"text":"React dispatch interceptors","hash":"_react_dispatch_interceptors","id":15},{"text":"Reactor result handler interceptors","hash":"_reactor_result_handler_interceptors","id":16}]},"123":{"id":123,"text":"Before you set up this extension, it’s important to read through the documentation from Spring itself. There are some known limitations that might require additional changes to the application. In addition, this extension needs to be added by adding the following dependency: org.axonframework.extensions.spring-aot axon-spring-aot 4.8.0 This should be enough to have additional hints with ahead of time compilation to successfully build and run your Axon application.","title":"Compiling to Native","component":"spring-aot-extension-reference","version":"main","name":"compile-to-native","url":"/spring-aot-extension-reference/main/compile-to-native/","titles":[]},"124":{"id":124,"text":"Spring AOT processing is part of the process to create a native binary from a Spring (Boot) application. This extension will help in adding a lot of hints which are needed for Axon Framework. Please note this extension can only be used with Spring Boot 3, as such it requires at least Java 17. Besides the extension, it might be necessary to make more changes to successfully compile and run an application as a native image. For example, when a message isn’t used in a handler. This is quite common when the application is split, and the application sending certain messages is not the same as the application handling the messages. In those cases these messages need to be added to the ImportRuntimeHints annotation. Otherwise, these messages can’t be deserialized, leading to errors at runtime. If something is not working or only works with additional hints, and it’s Axon-specific, please let us know either at GitHub or Discuss.","title":"Spring Ahead of Time","component":"spring-aot-extension-reference","version":"main","name":"index","url":"/spring-aot-extension-reference/main/","titles":[]},"125":{"id":125,"text":"It can be beneficial to move from JPA implementations to JDBC implementations. This likely decreases both the time it takes to compile the image and the time to start the image.","title":"Performance Tips","component":"spring-aot-extension-reference","version":"main","name":"performance","url":"/spring-aot-extension-reference/main/performance/","titles":[]},"126":{"id":126,"text":"The SpringCloudCommandRouter uses Spring Cloud’s discovery mechanism to find the other nodes in the cluster. To that end it uses the DiscoveryClient and Registration from Spring Cloud. These are respectively used to gather remote command routing information and maintain local information. The most straightforward way to retrieve both is by annotating your application with @EnableDiscoveryClient. Gathering and storing the command routing information revolves around Spring Cloud’s ServiceInstances. A Registration is just the local ServiceInstance, whereas the DiscoveryClient provides the API to find remote ServiceInstances. Furthermore, it is the ServiceInstance which provides us with the required information (for example, the URI) to retrieve a node’s capabilities. Spring Cloud’s Heartbeat Requirement When using the SpringCloudCommandRouter, make sure your Spring application has heartbeat events enabled. The heartbeat events published by a Spring Cloud application are the trigger to check if the set of ServiceInstances from the DiscoveryClient has been changed. Additionally, it is used to validate whether the command routing capabilities for known nodes has been altered. Thus, if heartbeat events are disabled, your instance will no longer be updated with the current command routing capabilities. If so, this will cause issues during command routing. The logic to store the local capabilities and discovering the remote capabilities of a ServiceInstance is maintained in the CapabilityDiscoveryMode. It is thus the CapabilityDiscoveryMode which provides us the means to actually retrieve a ServiceInstance 's set of commands it can handle (if any). The sole full implementation provided of the CapabilityDiscoveryMode, is the RestCapabilityDiscoveryMode, using a RestTemplate and the ServiceInstance URI to invoke a configurable endpoint. This endpoint leads to the MemberCapabilitiesController which in turn exposes the MemberCapabilities on the RestCapabilityDiscoveryMode of that instance. There are decorators present for the CapabilityDiscoveryMode, providing two additional features: IgnoreListingDiscoveryMode - a CapabilityDiscoveryMode decorator which on failure of retrieving the MemberCapabilities will place the given ServiceInstance on a list to be ignored for future validation. It thus effectively removes discoverable ServiceInstances from the set. AcceptAllCommandsDiscoveryMode - a CapabilityDiscoveryMode decorator which regardless of what this instance can handle as commands, state it can handle anything. This decorator comes in handy if the nodes in the system are homogeneous (aka, everybody can handle the same set of commands). The Registration, DiscoveryClient and CapabilityDiscoveryMode are arguably the heart of the SpringCloudCommandRouter. There are, however, a couple of additional things you can configure for this router, which are the following: RoutingStrategy - The component in charge of deciding which of the nodes receives the commands consistently. By default, a AnnotationRoutingStrategy is used (see Distributing the Command Bus for more). A ServiceInstance filter - This Predicate is used to filter out ServiceInstance retrieved through the DiscoveryClient. For example, it allows the removal of instances which are known to not handle any command messages. This might be useful if you have several services within the Spring Cloud Discovery Service set up, which you do not ever want to take into account for command handling. ConsistentHashChangeListener - Adding a consistent hash change listener provides you with the opportunity to perform a specific task if new nodes have been added to the known command handlers set. Differing Command Capabilities per Node It is not required for all nodes to have the same set of command handlers. You may use different segments for different command types altogether. The Distributed Command Bus will always choose a node to dispatch a command to the one that has support for that specific type of command.","title":"Discovering Command Routes","component":"spring-cloud-extension-reference","version":"master","name":"command-routes","url":"/spring-cloud-extension-reference/command-routes/","titles":[]},"127":{"id":127,"text":"Chances are high that you will be using Spring Boot if you are also using Spring Cloud. As configuring goes, this would opt for usage of the axon-springcloud-spring-boot-starter dependency to automatically retrieve all required beans. In either case, your application should be marked to enable it as a discoverable service through Spring Cloud. This can, for example, be done by annotating the main class with @EnableDiscoveryClient. There are still quite a few customizable components. For some suggestions, take a look at the following examples: Custom Bean Configuration Spring Boot AutoConfiguration // Custom Spring Boot app, enabling a 'DiscoveryClient' and 'Registration' through `@EnableDiscoveryClient` @EnableDiscoveryClient @SpringBootApplication public class MyApplication { public static void main(String[] args) { SpringApplication.run(MyApplication.class, args); } @Bean public CapabilityDiscoveryMode capabilityDiscoveryMode(RestTemplate restTemplate, Serializer serializer) { return RestCapabilityDiscoveryMode.builder() .restTemplate(restTemplate) .serializer(serializer) // Allows changing the endpoint used to find member capabilities .messageCapabilitiesEndpoint(/* custom message information endpoint */) .build(); } @Bean public CommandRouter springCloudCommandRouter(DiscoveryClient discoveryClient, Registration localServiceInstance, CapabilityDiscoveryMode capabilityDiscoveryMode) { return SpringCloudCommandRouter.builder() .discoveryClient(discoveryClient) .routingStrategy(new AnnotationRoutingStrategy()) .localServiceInstance(localServiceInstance) .capabilityDiscoveryMode(capabilityDiscoveryMode) .serviceInstanceFilter(/* custom ServiceInstance filter */) .consistentHashChangeListener(/* ConsistentHash change listener */) .build(); } // Only required if Axon Spring Boot Starter is not used @Bean @Qualifier(\"localSegment\") public CommandBus localSegment() { return SimpleCommandBus.builder().build(); } @Bean public CommandBusConnector springHttpCommandBusConnector(@Qualifier(\"localSegment\") CommandBus localSegment, RestOperations restOperations, Serializer serializer) { return SpringHttpCommandBusConnector.builder() .localCommandBus(localSegment) .restOperations(restOperations) .serializer(serializer) .executor(/* custom Executor */) .build(); } @Bean @Primary public DistributedCommandBus distributedCommandBus(CommandRouter commandRouter, CommandBusConnector commandBusConnector) { return DistributedCommandBus.builder() .commandRouter(commandRouter) .connector(commandBusConnector) .build(); } } # Required to enabled the DistributedCommandBus axon.distributed.enabled=true # Defines the load factor used for this segment. Defaults to 100 axon.distributed.load-factor=100 # Defines the CapabilityDiscoveryMode used. Defaults to REST axon.distributed.spring-cloud.mode=rest # Defines the endpoint used to retrieve member capabilities from. Defaults to \"/member-capabilities\" axon.distributed.spring-cloud.rest-mode-url=\"/my-custom-endpoint\" # Defines whether the CapabilityDiscoveryMode should be decorated to ignore faulty ServiceInstances axon.distributed.spring-cloud.enable-ignore-listing=true # Defines whether the CapabilityDiscoveryMode should be decorated to accept all types of commands axon.distributed.spring-cloud.enable-accept-all-commands=true","title":"Configuring This Extension","component":"spring-cloud-extension-reference","version":"master","name":"config","url":"/spring-cloud-extension-reference/config/","titles":[]},"128":{"id":128,"text":"Spring Cloud is an alternative approach to distributing the command bus (commands), besides Axon Server as the default. The Spring Cloud Extension uses the service registration and discovery mechanism described by Spring Cloud for distributing the command bus. You thus have the choice of which Spring Cloud implementation to use when discovering the routes to distribute your commands. An example of that would be Netflix' Eureka Discovery/Eureka Server combination or HashiCorp’s Consul. To use the Spring Cloud components from Axon, make sure the axon-springcloud module is available on the classpath. The easiest way is to include the Spring Cloud starter (axon-springcloud-spring-boot-starter) from this extension to your project. Giving a description of every Spring Cloud implementation would push this reference guide too far. For information on other Spring Cloud implementation options out there, please refer to their respective documentations. The Spring Cloud connector setup is a combination of the SpringCloudCommandRouter and a SpringHttpCommandBusConnector. The former is the CommandRouter and latter the CommandBusConnector, both used by the DistributedCommandBus to enable command distribution.","title":"Spring Cloud","component":"spring-cloud-extension-reference","version":"master","name":"index","url":"/spring-cloud-extension-reference/","titles":[]},"129":{"id":129,"text":"The CommandBusConnector is in charge of sending commands, based on a given route, from one node to another. This extension to that end provides the SpringHttpCommandBusConnector, which uses plain REST for sending commands. There are three hard requirements when creating this service and one optional configuration: Local CommandBus - This \"local segment\" is the command bus which dispatches commands into the local JVM. It is thus invoked when the SpringHttpCommandBusConnector receives a command from the outside, or if it receives a command which is meant for itself. RestOperations - The service used to POST a command message to another instance. In most situations the RestTemplate is used for this. Serializer - The serializer is used to serialize the command messages before they are sent over and deserialize when they are received. Executor (optional) - The Executor is used to handle incoming commands and to dispatch commands. Defaults to a DirectExecutor instance for backwards compatibility. Non-blocking command dispatching Note that the configurable Executor impacts how command dispatching acts when invoking CommandGateway#send methods returning a CompletableFuture. Although the CompletableFuture return type suggests a non-blocking result, if the bus under the hood reuses the dispatching thread we are still faced with a blocking operation. Hence, to make the SpringHttpCommandBusConnector fully non-blocking, it is recommended to adjust the Executor to use its own thread pool.","title":"Sending Commands between Nodes","component":"spring-cloud-extension-reference","version":"master","name":"internode-commands","url":"/spring-cloud-extension-reference/internode-commands/","titles":[]},"130":{"id":130,"text":"The extension can be disabled setting the property axon.extension.tracing.enabled to false (default=true). This will give you the possibility to turn it off when needed (for example, for a certain environment). Furthermore, there is a more fine-grained configuration option of the tracing span tags on commands, events and queries. You can customize span tags easily, mixing and matching between available tag MESSAGE_ID, AGGREGATE_ID, MESSAGE_TYPE, PAYLOAD_TYPE, MESSAGE_NAME and PAYLOAD. Take into account that some of the tags make sense on a certain span type, but not on another, and some of them have an hidden cost on network (such as payload). Use them wisely. axon.extension.tracing.span.commandTags=MESSAGE_ID, MESSAGE_TYPE, PAYLOAD_TYPE, MESSAGE_NAME axon.extension.tracing.span.eventTags=MESSAGE_ID, AGGREGATE_ID, MESSAGE_TYPE, PAYLOAD_TYPE axon.extension.tracing.span.queryTags=MESSAGE_ID, MESSAGE_TYPE, PAYLOAD_TYPE, MESSAGE_NAME Above an example of the default value. Available tags field are listed in MessageTag.java class.","title":"Configuring the Extension","component":"tracing-extension-reference","version":"master","name":"config","url":"/tracing-extension-reference/config/","titles":[]},"131":{"id":131,"text":"This extension provides functionality to trace command, event and query messages flowing through an Axon application by providing a specific implementation of the CommandGateway, QueryGateway, MessageDispatchInterceptor and MessageHandlerInterceptor. The Open Tracing standard is used to provide tracing capabilities, which thus allows usage of several Open Tracing implementations. With this instrumentation, we can chain synchronous and asynchronous commands and queries, all belonging to the same parent span. A request can be visualized and analysed across Axon clients, command handlers, query handlers and event handlers, when running together or decomposed and deployed as separate parts (distributed). org.axonframework.extensions.tracing axon-tracing-spring-boot-starter 4.4 io.opentracing.contrib opentracing-spring-jaeger-web-starter 3.2.2 The first dependency is Spring Boot starter for Axon Tracing extension, which is the quickest start in to an extension configuration. The second dependency is Jaeger implementation for OpenTracing. There are other supported tracers that can be used: LightStep, Instana, Apache SkyWalking, Datadog, Wavefront by VMware, Elastic APM and many more.","title":"Tracing","component":"tracing-extension-reference","version":"master","name":"index","url":"/tracing-extension-reference/","titles":[]},"132":{"id":132,"text":"","title":"Axon Server Configuration","component":"axon-server-reference","version":"v2024.1","name":"configuration","url":"/axon-server-reference/v2024.1/configuration/","titles":[]},"133":{"id":133,"text":"","title":"Axon Server gRPC API","component":"axon-server-reference","version":"v2024.1","name":"grpc-api","url":"/axon-server-reference/v2024.1/grpc-api/","titles":[]},"134":{"id":134,"text":"Axon Server is the flagship product of AxonIQ, and companion product to the Open Source Axon Framework. Axon Server itself is available in two editions, Standard and Enterprise, with Axon Server Standard Edition (SE) available under the AxonIQ Open Source license, while Axon Server Enterprise Edition (EE) is licensed as a commercial product with a full range of support options. Axon Framework version compatibility All Axon Server versions are compatible with all Axon Framework 4.x.y releases. A summary of the various subsections is given below: Sub-Section Purpose Installation Installing Axon Server Administration Administering an Axon Server Security Securing an Axon Server deployment Performance Tuning an Axon Server deployment Migration Migration capabilities provided by Axon Server","title":"Introduction","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/","titles":[]},"135":{"id":135,"text":"Axon Server receives a major release three times a year. The versioning scheme aligns with the year it has been released in, followed by an incremental counter starting at zero. This results in 20XX.{0..2}.0 versions. Furthermore, the last release of the year is the LTS (long-term support) version of Axon Server. As such, the 20XX.2 version receives minor release to fix issues for an extended period of time. The non-LTS releases receive patches until the next major release is present. Note that an LTS is supported for a little over 2 years. This time window allows for skipping a given LTS version if this would be required. Down below is a table of all the release notes the major and minor release of Axon Server: Release Type Version Major 2024.1 2024.0 2023.2 2023.1 2023.0 Minor 2024.0 2023.2 2023.1 Unified Axon Server Artifact In an effort to simplify the deployment process, since 2023.1 version we’ve updated Axon Server to release a single artifact, replacing the previously separate artifacts for the Standard and Enterprise edition. Depending on the presence of a license, Axon Server will now automatically adjust.","title":"Release Notes","component":"axon-server-reference","version":"v2024.1","name":"release-notes","url":"/axon-server-reference/v2024.1/release-notes/","titles":[]},"136":{"id":136,"text":"","title":"Axon Server REST API","component":"axon-server-reference","version":"v2024.1","name":"rest-api","url":"/axon-server-reference/v2024.1/rest-api/","titles":[]},"137":{"id":137,"text":"Persistent streams provide the option to open an event stream from a client and let Axon Server track the progress. This was already available as a preview version in 2024.0, but is now available by default. Persistent streams are supported in Axon Framework 4.10 as an alternative to tracking or pooled streaming event processors. For more information see Subscribing event processor in the Axon Framework section. Prevent stale threads when an Axon Server node closes the connection to another node Clean up metrics from disconnected clients prevent WARN log messages when a query completed message was received from an unexpected client Allow context with ephemeral events without a license Fix for listing event processors when there are more than 512 event processors The default Java version for the Docker images has changed from Java 11 to Java 17. This means that the docker images with tag \"latest\", \"latest-nonroot\", \"2024.1.0\", and \"2024.1.0-nonroot\" use Java 17. Java 11 based images are still available with the \"-jdk-11\" extensions in the tag name. gRPC version updated to 1.65.1 Updated H2 database to store the Control DB, addressing some issues from previous H2 version (see the upgrade instructions in https://library.axoniq.io/axon-server-upgrade/upgrading_as_2024.html). Redesigned User Interface: The UI has been completely revamped with a modern look and feel for a better user experience. The changes include: Simplified Overview Page: Access node information easily with filtering and scaling options. Dedicated License Page: Track license expiry dates and view available features for non-enterprise users. Monitoring Page: View important health information, display logs, and download diagnostic packages. System Tasks: List and cancel running system tasks. Search Event Store Page: Improved usability with removable columns, formatted code styles, and auto-composable queries. Command and Queries Pages: Revamped for a better overview of messages in the system. Long-Running Commands Component: View and cancel commands running longer than 1 second. Scheduled Events Page: View and cancel scheduled events. Streams Page (Experimental): Accessible for persistent streams if dev mode is enabled. API Tokens (formerly Applications): Renamed for clarity, with improved token management. Support for Wide Screens and Dark/Light Themes: Enhanced viewing experience. Connection, Health, and Early Event Processor Issue Detection: Improved issue detection and resolution. Embedded Documentation Snippets: Access documentation directly within the UI. Preview of new persistent streams feature, event streams where Axon Server manages the publication of events to clients and keeps track of the progress. This feature is enabled when development mode is enabled or when axoniq.axonserver.preview.persistent-streams property is set to true. Axon Server now supports the hot (runtime) replacement of certificates and keys used for TLS, eliminating the need for server restarts. We have revamped the metrics exposed by Axon Server for better clarity and comprehensibility. Adhering to the 4 golden signals terminology, metrics are now systematically organized. Users can access both old and new style metrics in this version. However, there’s an option to disable the old style metrics. To aid in issue resolution, Axon Server now provides a more comprehensive diagnostics package. The package now contains more detailed information about raft status. It offers a snapshot of metrics and health information. There’s a listing of files in the replication group. Information about multi-tier storage is included. Logs are included as well. We’ve addressed various security concerns through dependency updates. Additionally, several bugs have been identified and rectified. The role ‘MONITOR’ is now granted permission to access the ‘internal/raft/status’ endpoint. We’ve transitioned to new versions for some of the external libraries used in Axon Server. The new Event Transformation feature allows users to perform specific event transformations like updates and deletes in the event store, utilizing the Event Transformation API.This functional change is intended to facilitate more flexible event management in rare instances where modifications are unavoidable. In the application view, users are now provided with an option to force the client to reconnect. This addition aims to offer a practical tool for addressing client connectivity issues. It is now possible to remove a node from the cluster through the user interface (UI). This functionality, previously accessible only via the command-line interface (CLI) and REST API, has been expanded to the UI for broader accessibility. In this release, we have temporarily disabled the 'Development Mode/Event Purge' feature. Users should now utilize the 'Delete/Create Context' operation as an alternative. This change will remain in place until a more efficient solution is implemented. In an effort to optimize performance, we have updated Axon Server’s approach to memory management for file resources. Prior to this release, Axon Server primarily depended on the Java garbage collector to reclaim memory used by memory-mapped files. With this update, memory management is now undertaken directly by Axon Server, enhancing efficiency in file resource usage. This release also contains fixes for the following issues: Replication group creation did not work in conjunction with the HTTPS (-s) option Race condition in unregister node leaves node partially in the cluster The Axon Server artifact has been updated to simplify the deployment process. Instead of separate artifacts for the Axon Server Standard Edition and Enterprise Edition, we are releasing a single artifact from now on. The Axon Server features will adjust automatically based on the presence of a provided license. Note that the Axon Server Standard Edition remains open-source, but separate releases will no longer be made. The axoniq/axonserver-enterprise docker image is no longer updated. To use the latest version, use the axoniq/axonserver image with tags ending with -dev. For instance, if you use axoniq/axonserver-enterprise:2023.0.1-dev, you can switch to axoniq/axonserver:2023.1.0-dev. If you are used to Axon Server Standard Edition, note that there is a difference in the server’s initialization. As the server can now run standalone or as a node in a cluster, you have to tell it how it should initialize itself. The dashboard provides an initial page to do this initialization. To automatically initialize the server as a standalone server, add the following properties: axoniq.axonserver.autocluster.first= axoniq.axonserver.autocluster.contexts=default Our new release strategy involves releasing three versions each year, with new releases being named based on the year, such as 2023.0, 2023.1, and 2023.2. The third release is dedicated to providing long-term support. Customers that wish to upgrade less frequently can choose to stay on these long-term support releases. We chose this approach to separate versioning from the Axon Framework and maintained flexibility and independence in versioning. This strategy provides predictable release dates, better alignment with customer needs, faster feature updates, and increased responsiveness to user feedback and market demands. Overall, this approach will enable us to deliver better products and services to our customers while ensuring maximum flexibility and independence in versioning. The 2023.0 release brings us these new features: - Tiered Storage - Ephemeral Contexts Tiered Storage is a highly anticipated feature of the Axon Server Enterprise’s 2023.0.0 release, allowing each node to store its data across different storage locations. With its ability to optimize performance and reduce storage costs, Tiered Storage is a powerful tool for businesses seeking to improve their storage management strategies. By distributing data across different levels of storage media based on access speed and cost, Tiered Storage enables organizations to minimize the cost of storing infrequently accessed data while ensuring fast access to frequently accessed data. The Tiered Storage feature is especially powerful in combination with the use of secondary nodes, a feature that has been around since Axon Server Enterprise version 4.4: Tiered Storage enables the configuration and maintenance of a variable number of storage tiers for each node, depending on its role, such as primary, secondary, or backup nodes. Secondary nodes enable you to reduce the number of copies of data that are stored by keeping only the most recent events stored on your primary nodes and keeping the full event store on the secondary nodes. The configuration of Tiered Storage on these secondary nodes can focus on lower storage costs and large volumes of data, while Primary nodes focus on speed of access. With its advanced capabilities, Tiered Storage is poised to become a critical asset for enterprises seeking to streamline their data storage and management processes. Ephemeral contexts are a new type of context that store events for a limited time before automatically removing them permanently. These contexts are particularly useful in scenarios such as time-limited audit systems or integration contexts, where events are broadcasted to multiple observers in real-time, after which they are no more of use. As events might become outdated and irrelevant over time, ephemeral contexts can help to manage storage space and maintain system efficiency by automatically deleting these events after a specified time period. By using ephemeral contexts, organizations can efficiently store only necessary data and reduce clutter in their systems.","title":"Major Releases","component":"axon-server-reference","version":"v2024.1","name":"rn-as-major-releases","url":"/axon-server-reference/v2024.1/rn-as-major-releases/","titles":[{"text":"Release 2024.1","hash":"_release_2024_1","id":1},{"text":"Persistent streams","hash":"_persistent_streams","id":2},{"text":"Bug fixes and improvements","hash":"_bug_fixes_and_improvements","id":3},{"text":"Docker image changes","hash":"_docker_image_changes","id":4},{"text":"Dependency updates","hash":"_dependency_updates","id":5},{"text":"Release 2024.0","hash":"_release_2024_0","id":6},{"text":"Database update","hash":"_database_update","id":7},{"text":"New features and improvements","hash":"_new_features_and_improvements","id":8},{"text":"Release 2023.2","hash":"_release_2023_2","id":9},{"text":"TLS certificate and key replacement at runtime","hash":"_tls_certificate_and_key_replacement_at_runtime","id":10},{"text":"Enhanced metrics exposure","hash":"_enhanced_metrics_exposure","id":11},{"text":"Upgraded diagnostics package","hash":"_upgraded_diagnostics_package","id":12},{"text":"Other improvements","hash":"_other_improvements","id":13},{"text":"Release 2023.1","hash":"_release_2023_1","id":14},{"text":"New features and enhancements","hash":"_new_features_and_enhancements","id":15},{"text":"Event transformation","hash":"_event_transformation","id":16},{"text":"Forced client reconnection","hash":"_forced_client_reconnection","id":17},{"text":"Node removal from cluster","hash":"_node_removal_from_cluster","id":18},{"text":"Temporary adjustment to development Mode","hash":"_temporary_adjustment_to_development_mode","id":19},{"text":"Enhanced memory management","hash":"_enhanced_memory_management","id":20},{"text":"Bug fixes","hash":"_bug_fixes","id":21},{"text":"Product updates","hash":"_product_updates","id":22},{"text":"Unified Axon Server artifact","hash":"_unified_axon_server_artifact","id":23},{"text":"Release 2023.0","hash":"_release_2023_0","id":24},{"text":"New release schedule","hash":"_new_release_schedule","id":25},{"text":"New features","hash":"_new_features","id":26},{"text":"Tiered storage","hash":"_tiered_storage","id":27},{"text":"Ephemeral contexts","hash":"_ephemeral_contexts","id":28}]},"138":{"id":138,"text":"This page provides a dedicated overview of patch releases for Axon Server. Bug fixes and improvements: Axon Server node should return information about the clients connected to that node only Backing up the RAFT log entries should take into account replication group rather than context Record handling duration for initial query of a subscription query Persistent streams improvements: Prevent closing the stream for slow clients Improved error handling Bug fixes and improvements: Redistribute clients across Axon Server nodes when a node is restarted Event processor operations fail when the processing group contains a forward slash Potential replication issue when trying to apply events for already closed contexts during shutdown of Axon Server Increased maximum length for the username to 255 characters Update the event store size when a new index file is created Visual improvements in search table: headers not visible by default & action not visible by default Improved logging in the event store Stop replication applying process when the replication group is stopped Global Index pre-load for configured contexts Bug fixes and improvements: Revert optimization in replication from version 2023.2.4, as it could lead to a node entering fatal state Stop Axon Server from redirecting a client to a node that is in fatal state Reduce communication between the leader and follower and logging when a node is starting up Search page improvements Set correct permissions for persistent stream API calls Add validation of newly created index files Allow non-pristine clusters to connect to Console Fix the event store size in the context page Fixes and improvements: Fix for a problem starting up Axon Server with plugins configured Removed race condition causing a possible delay in receiving the first event on a newly registered event handler Improve the diagnostics package to contain full log information when \"logging.config\" property is set - Fixes and improvements: Add an option to reduce the number of global index segments Axon Server checks when the first event for a new aggregate is stored. This can be configured globally with the property \"axoniq.axonserver.event.global-index-segments-check\" or on a context level with the property \"event.global-index-segments-check\". The value is the number of global index segments to check, with a minimal value of 2. Fix for Control DB migration in case of plugin configuration properties with long values Updating a license through Axon Console now takes effect immediately Improved distribution of queries to different instances of the query handlers Fixes and improvements: Updating a license through Axon Console now takes effect immediately Reduced memory usage for internal communication Reduced the number of threads used with a large number of contexts UI improvements The dialogs for adding replication groups, API tokens, and users were not always cleared when opened show the number of events in each context improved notification when the current version is not the latest one add an option to set X-Frame-Options to SAMEORIGIN in the response messages New configuration parameters: axoniq.axonserver.accesscontrol.same-origin=false (true sets the X-Frame-Options header to SAMEORIGIN) axoniq.axonserver.event-store-background-thread-count=8 axoniq.axonserver.event-store-processors-thread-count=8 Fix the increasing number of threads on the running Axon Server nodes when one node in the cluster is down. Small fixes in the replication process: remove delay in starting to synchronize with a node that is far behind improve the performance for a follower catching up with the leader prevent situations where a follower attempts to apply replication log entries that were already included in a snapshot Fix for authentication issue when multiple applications have the same token UI, copy token to clipboard fails when not running on a trusted URL UI, improved validations for applications, replication groups and contexts operations Improved handling for missing connection to Axon Console Support for Google Marketplace licenses Axon Server now performs a clean shutdown when it was started with an incorrect node name or internal hostname/port Bug fixes and improvements: Redistribute clients across Axon Server nodes when a node is restarted Event processor operations fail when the processing group contains a forward slash Potential replication issue when trying to apply events for already closed contexts during shutdown of Axon Server Bug fixes and improvements: Revert optimization in replication from version 2023.2.4, as it could lead to a node entering fatal state Stop Axon Server from redirecting a client to a node that is in fatal state Reduce communication between the leader and follower and logging when a node is starting up Bug fixes: Improved distribution of queries to different instances of the query handlers Prevent stale threads when an Axon Server node closes the connection to another node Clean up metrics from disconnected clients prevent WARN log messages when a query completed message was received from an unexpected client Dependency updates: gRPC version updated to 1.65.1 Fixes and improvements: Add an option to reduce the number of global index segments Axon Server checks when the first event for a new aggregate is stored. This can be configured globally with the property \"axoniq.axonserver.event.global-index-segments-check\" or on a context level with the property \"event.global-index-segments-check\". The value is the number of global index segments to check, with a minimal value of 2. Reduced memory usage for internal communication Fix the increasing number of threads on the running Axon Server nodes when one node in the cluster is down. Small fixes in the replication process: remove delay in starting to synchronize with a node that is far behind improve the performance for a follower catching up with the leader prevent situations where a follower attempts to apply replication log entries that were already included in a snapshot Fix for authentication issue when multiple applications have the same token Bug fix: Increasing number of threads on the running Axon Server nodes when one node in the cluster is down. Bug fixes: Fix for an error handling subscription query responses during the upgrade from a version before 2023.2.0 to 2023.2.0 or 2023.2.1. Improved readiness probe to return 200 (OK) once the communication services are ready and the replication groups are completely initialized. The endpoint for the new readiness probe is /actuator/health/readiness. This release contains fixes for the following issues: TLS communication between Axon Server nodes cannot validate trusted certificates when there is no trust manager file configured Deleting a context does not delete all its metrics This release contains fixes for the following issues: - Metrics no longer collected when an application reconnects to Axon Server Initialize standalone To simplify initialization of Axon Server, it now supports a new property \"axoniq.axonserver.standalone=true\". When this property is set on a clean Axon Server instance it initializes the server with a \"default\" context. Development mode Fixed the option to reset the event store from the UI (in development mode). This option now also works in an Axon Server cluster. LDAP extension update The new version of the LDAP extension supports configuration of a trust manager file. The location of the file can be specified through the property \"axoniq.axonserver.enterprise.ldap.trust-manager-file\". This release contains fixes for the following issues: - Validation of tiered storage properties when not using the UI - Race condition while writing to the global index - Limitation on the number of requests per context fails if there are timed out requests","title":"Minor Releases","component":"axon-server-reference","version":"v2024.1","name":"rn-as-minor-releases","url":"/axon-server-reference/v2024.1/rn-as-minor-releases/","titles":[{"text":"Release 2024.1","hash":"_release_2024_0","id":1},{"text":"Release 2024.1.3","hash":"_release_2024_1_3","id":2},{"text":"Release 2024.1.2","hash":"_release_2024_1_2","id":3},{"text":"Release 2024.1.1","hash":"_release_2024_1_1","id":4},{"text":"Release 2024.0.4","hash":"_release_2024_0_4","id":5},{"text":"Release 2024.0.3","hash":"_release_2024_0_3","id":6},{"text":"Release 2024.0.2","hash":"_release_2024_0_2","id":7},{"text":"Release 2024.0.1","hash":"_release_2024_0_1","id":8},{"text":"Release 2023.2","hash":"_release_2023_2_","id":9},{"text":"Release 2023.2.9","hash":"_release_2023_2_9","id":10},{"text":"Release 2023.2.8","hash":"_release_2023_2_8","id":11},{"text":"Release 2023.2.7","hash":"_release_2023_2_7","id":12},{"text":"Release 2023.2.6","hash":"_release_2023_2_6","id":13},{"text":"Release 2023.2.5","hash":"_release_2023_2_5","id":14},{"text":"Release 2023.2.4","hash":"_release_2023_2_4","id":15},{"text":"Release 2023.2.3","hash":"_release_2023_2_3","id":16},{"text":"Release 2023.2.2","hash":"_release_2023_2_2","id":17},{"text":"Release 2023.2.1","hash":"_release_2023_2_1","id":18},{"text":"Bug fixes","hash":"_bug_fixes","id":19},{"text":"Release 2023.1","hash":"_release_2023_1_","id":20},{"text":"Release 2023.1.2","hash":"_release_2023_1_2","id":21},{"text":"Bug fixes","hash":"_bug_fixes_2","id":22},{"text":"Release 2023.1.1","hash":"_release_2023_1_1","id":23},{"text":"New features and enhancements:","hash":"_new_features_and_enhancements","id":24},{"text":"Bug fixes","hash":"_bug_fixes_3","id":25}]},"139":{"id":139,"text":"This feature is only available in Axon Server Enterprise versions 4.3 and higher. When you have larger clusters and specific requirements, you may want to have nodes acting in a different way within a replication group. For this reason, in Axon Server Enterprise 4.3, we have introduced a number of new roles that can be assigned to a node. These are: Primary nodes -> This is the role for nodes prior to 4.3. Primary nodes handle client connections and messages, store events and may act as the leader for a replication group. Backup nodes -> These nodes maintain a copy of the event store, but will never become the leader of a replication group. There are two types of Backup nodes - Active Backup and Passive Backup. Messaging-only nodes -> They handle client connections and all types of messages (Commands/Queries/Events) but they do not have an event store. Secondary nodes -> Support for tiered storage. If a replication group contains secondary nodes the primary nodes will only retain recent data. Each replication group needs to have at least one Primary node. This node is capable of becoming a leader and coordinating transactions across the replication group between the different member nodes. Even if you are not using Axon Server as an event store, you still need a leader as transactions also include making changes to the replication group configuration and access control lists. It is also possible to change the role that a particular node plays within a context. You can use backup nodes for instance when you want to ensure that you have a copy of your event store in another data center. As the backup node will never become the leader for a replication group it reduces the risk of high latency, compared to having a normal (Primary) node in another data center. By default, clients can connect to backup nodes. This can be disabled by setting the axoniq.axonserver.force-connection-to-primary-or-messaging-node property to true. Backup nodes come in two flavors Active backup nodes maintain a real time copy of the Event Store by being active participants in transactions. To expand this, suppose a replication group within an Axon Server EE cluster has Active Backup nodes assigned to it (in addition to the Primary nodes). When an event is raised within a context the transaction to commit it in the Event Store is only confirmed if it receives a successful acknowledgement from at-least a certain number of those Active Backup nodes. It is possible to customize the number of active backup nodes involved in the transactions by changing the value of the property axoniq.axonserver.replication.min-active-backups . The default value of this parameter is *\"1\"* which means that if you have Active Backup nodes, at least one of them needs to be up at any time. The higher the value set for this property, the higher the number of Active backup member nodes that need to be available for a successful transaction, so this property affects the availability of the cluster and hence needs to be carefully managed. There are three possible ways to assign the ACTIVE_BACKUP role to a node within a replication group: A) The Axon Server EE UI Console. Navigate to the Replication Groups icon on the navigation menu of the console which will open up the replication group maintenance screen. The nodes can be added as an ACTIVE_BACKUP role within a replication group. B) The add-node-to-replication-group command with the role option as ACTIVE_BACKUP $ java -jar axonserver-cli.jar add-node-to-replication-group -S http://[node]:[port] -n [node name] -g [replication-group-name] -r PASSIVE_BACKUP Mandatory parameters *-g* refers to an existing replication group *-n* refers to the node name that should be a member of this replication group *-r as PASSIVE_BACKUP* refers to the role of this node within the replication group Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server C) Axon Server EE provided REST API (http:[server]:[port]/swagger-ui.html) which offers the replication-group-rest-controller to help perform role maintenance operations Passive Backup nodes follow the primary nodes with on a best effort base. If they are disconnected for some time, it will not impact the overall availability of the replication group. Once the Passive backup nodes are connected again, they will update their event stores with the events that were added while they were gone. If you don’t require the backup node to be fully up-to-date at any moment, you can configure one passive backup node. There are three possible ways to assign the PASSIVE_BACKUP role to a node within a replication group: A) The Axon Server EE UI Console. Navigate to the Replication Groups icon on the navigation menu of the console which will open up the replication group maintenance screen. The nodes can be added as a PASSIVE_BACKUP role within a replication group. B) The add-node-to-replication-group command with the role option as PASSIVE_BACKUP $ java -jar axonserver-cli.jar add-node-to-replication-group -S http://[node]:[port] -n [node name] -g [replication-group-name] -r PASSIVE_BACKUP Mandatory parameters *-g* refers to an existing replication group *-n* refers to the node name that should be a member of this replication group *-r as PASSIVE_BACKUP* refers to the role of this node within the replication group Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server C) Axon Server EE provided REST API (http:[server]:[port]/swagger-ui.html) which offers the replication-group-rest-controller to help perform role maintenance operations You can add nodes as messaging-only nodes to a replication group, if you don’t want to use Axon Server as an event store, or if you want to have a large number of Axon Server nodes for a single replication group, without storing the events on each node. As the name already suggests, messaging-only nodes only route messages, they do not store events themselves. They do not participate in transactions and will clearly never become the leader for a replication-group. There are three possible ways to assign the MESSAGING_ONLY role to a node within a replication group: A) The Axon Server EE UI Console. Navigate to the Replication Groups icon on the navigation menu of the console which will open up the replication group maintenance screen. The nodes can be added as a MESSAGING_ONLY role within a replication group. B) The add-node-to-replication-group command with the role option as MESSAGING_ONLY $ java -jar axonserver-cli.jar add-node-to-replication-group -S http://[node]:[port] -n [node name] -g [replication-group-name] -r MESSAGING_ONLY Mandatory parameters *-c* refers to an existing replication group *-n* refers to the node name that should be a member of this replication group *-r as MESSAGING_ONLY* refers to the role of this node within the replication group Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server C) Axon Server EE provided REST API (http:[server]:[port]/swagger-ui.html) which offers the replication-group-rest-controller to help perform role maintenance operations Axon Server version 4.4 and higher You can add nodes as secondary nodes to a replication group, if you want to limit the amount of data stored on primary nodes. You could for example have fast (more expensive) storage on the primary nodes and less expensive storage on the secondary nodes. Most activity will take place on recent data, and only when you need to access older data you have to go to the secondary nodes. Once you have defined secondary nodes for a replication group, this will apply for all contexts that are defined in the replication group. You can configure the retention time per context, so for some contexts you may have a longer retention time than for others. As the old data still needs to be available at least one SECONDARY node needs to be up at all times. PRIMARY nodes will not delete information from their event stores until all SECONDARY nodes have this information. There are three possible ways to assign the SECONDARY role to a node within a replication group: A) The Axon Server EE UI Console. Navigate to the Replication Groups icon on the navigation menu of the console which will open up the replication group maintenance screen. The nodes can be added as a MESSAGING_ONLY role within a replication group. B) The add-node-to-replication-group command with the role option as SECONDARY. $ java -jar axonserver-cli.jar add-node-to-replication-group -S http://[node]:[port] -n [node name] -g [replication-group-name] -r SECONDARY Mandatory parameters *-c* refers to an existing replication group *-n* refers to the node name that should be a member of this replication group *-r as SECONDARY* refers to the role of this node within the replication group Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server C) Axon Server EE provided REST API (http:[server]:[port]/swagger-ui.html) which offers the replication-group-rest-controller to help perform role maintenance operations. Sometimes you may want to change the role a node has for a specific replication group. This may happen when you have a pre-existing cluster replication grou configuration (pre 4.3) and now you want to be able to start using the new roles. The way to do this is to remove a node from a replication group and then add it again in the new role. When you remove the node from the replication group you have an option to preserve the event store. Preserving the event store is recommended when you want to change the role for a node from PRIMARY to BACKUP, or vice versa, as it would prevent a full replication of the event store when the node is added again with the new role. There are three possible ways to change the role of a node within a replication group: A) The Axon Server EE UI Console. Navigate to the Replication Groups icon on the navigation menu of the console which will open up the replication group maintenance screen. You can choose to delete the specific node from the context (using the delete icon). In case you would like to preserve the event store, click on the check-box in the pop-up. B) The delete-node-from-replication-group command $ java -jar ./axonserver-cli.jar delete-node-from-replication-group -S http://[node]:[port] -g [replication-group-name] -n [node name] Mandatory parameters *-g* refers to an existing replication group *-n* refers to the node name that should be a member of this replication group Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server *–preserve-event-store* removes the node from the replication group but leaves the event store files on that node. C) Axon Server EE provided REST API (http:[server]:[port]/swagger-ui.html) which offers the replication-group-rest-controller to help perform role maintenance operations","title":"Backup and Messaging-Only Nodes","component":"axon-server-reference","version":"v2024.1","name":"backup-and-messaging-only-nodes","url":"/axon-server-reference/v2024.1/axon-server/administration/backup-and-messaging-only-nodes/","titles":[{"text":"Backup nodes","hash":"backup-nodes","id":1},{"text":"Active backup node","hash":"active-backup-node","id":2},{"text":"Passive backup node","hash":"passive-backup-node","id":3},{"text":"Messaging-only nodes","hash":"messaging-only-nodes","id":4},{"text":"Secondary nodes","hash":"secondary-nodes","id":5},{"text":"Changing node roles","hash":"changing-node-roles","id":6}]},"140":{"id":140,"text":"The core strategy employed by AxonServer to keep data available, is to replicate it over various cluster nodes. These nodes should be in availability zones that are isolated from each other in relevant disaster scenarios. With Axon Server 4.3, the introduction of specific backup_nodes makes it easier to set up and operate AxonServer without ever making explicit backups to off-line media. Nevertheless, there are also environments where such backups are a strict requirement and for that reason, AxonServer does support it. There are three types of items that need to be backed up Control Database Event Store Segments Log Entry Segments To support the creation of consistent backups, Axon Server provides a REST API. This API provides three controllers to perform backup operations Backup Info Rest Controller - End point for Axon SE/EE for event stream segment backup Backup Control DB Rest Controller - End point for Axon SE for control database backup Cluster Backup Info Rest Controller - End points for Axon EE for control database and log entry segment backup The API documentation is accessible at http:[server]:[port]/swagger-ui.html. The control database is a relational H2 database and contains important configuration information for your Axon Server SE/EE deployment. Although it’s stored in a single file, this file cannot be simply copied for backup as it may not be in a safe state. For Axon Server SE, a call to the POST endpoint http://[server]/createControlDbBackup forces the creation of a proper backup file. For Axon Server EE, a call to the POST endpoint `http://[server]/v1/backup/createControlDbBackup`forces the creation of a proper backup file. The [server] could be any node within the cluster which serves the _admin context. In both cases, it returns the full path to that file (.zip), which can then be used to move that file to another storage medium. The event store segments are either closed and immutable, or still open for new events. For the closed segments, it is feasible to only back up the ones that haven’t been backed-up yet, since the ones that have been are guaranteed not to change. For both Axon Server SE/EE, a call to the GET endpoint http://[server]/v1/backup/filenames with event type (either EVENT or SNAPSHOT), the context name and optionally the last segment that has already been backed up will return a list of file names belonging to segments that haven’t been backed up yet, but which are now safe to backup by simply copying them. For Axon SE, the [server] is the single Axon Server SE node while in the case of Axon EE, the [server] could be any node that is a PRIMARY member node for the context that needs to be backed up. In addition, you may choose to back up the current segment file that is being written to. These are files with names larger than the last entry returned to the filenames from the backup endpoint. It is important to overwrite this file with subsequent backups, because no guarantees can be given about the completeness of this file. This means the filename of this file should not be used to construct the \"lastSegmentBackedUp\" in subsequent requests to the backup endpoint. Note From Axon Server SE version 4.5.12 / Axon Server EE version 4.5.17 onwards there is a new endpoint available: /v1/backup/eventstore. This endpoint returns a JSON object with the files to back up, including the currently active event store segment. It also returns the number of last closed event store segment. This number can be used in subsequent backups to retrieve files updated since the last backup. Unlike the event stream segments, the log entry segments backup should not be done incrementally. All the files are replaced by the next backup. The log entry segments backup is supported by the GET endpoint http:[server]/v1/backup/log/filenames. It takes the replication group name and returns a list of file names that completely replace the previous backup for that replication group. The [server] could be any node that is a PRIMARY member node for the replication group that needs to be backed up. Even if the recent file has incomplete data, a node will be able to recover a consistent state from such a file and will initialize itself at the position immediately after the last complete write. The replication process (if present) will ensure subsequent entries are automatically synchronized. Because the control database contains a pointer to the last log entry that is known to be stored safely on the cluster (the commit index), the proper order of doing this is to first create the control database backup and then backing up the log entry segments and the event stream segments. This will ensure that the log entry segments may have entries beyond the commit index (which is ok) but there are not missing entries before the commit index (which would be bad). The log entries segments must be backed up within *30 minutes* after the backup of the controlDB, to prevent the log compaction procedure causes data inconsistencies.","title":"Backups","component":"axon-server-reference","version":"v2024.1","name":"backups","url":"/axon-server-reference/v2024.1/axon-server/administration/backups/","titles":[{"text":"Control database","hash":"control-database","id":1},{"text":"Event store segments","hash":"event-stream-segments","id":2},{"text":"Log entry segments (only for Axon Server clusters)","hash":"log-entry-segments","id":3}]},"141":{"id":141,"text":"This feature is only available in Axon Server Enterprise Axon Server Enterprise Edition can be deployed as a cluster to guarantee high availability. A cluster of Axon Server EE nodes will provide multiple connection points for (Axon Framework-based) client applications, and thus share the load of managing message delivery and event storage. Client applications will dynamically connect to a node in the cluster and automatically reconnect to another, should the node that they are currently connected to become unreachable. An Axon Server EE cluster has 3 main areas of administration, Cluster Nodes - \"Instances\" of Axon Server EE that need to be part of the EE cluster. Replication Groups - Responsible for event data replication and transaction management between the various nodes of a cluster. Contexts - Responsible for event storage within the various nodes of a cluster. A visual representation of the relationship between the 3 is shown below. The cluster setup process always begins by designating any one clean/uninitialized Axon Server EE node as the first member of the cluster. You can then run the \"init-cluster\" command on it which will create the following replication groups and contexts -> admin/default. From thereon, there are multiple ways to continue the setup depending upon your Event Store deployment topology. Any other Axon Server EE node can be added to the cluster using the \"register-node\" command without associating it with any Replication Group / Context. New Replication Groups/Contexts can be added and cluster member nodes can be associated with these. Member nodes can be removed from the cluster at any point of time. Axon provides two ways for automating cluster configuration. The first is the Automatic Initialization feature and the other is the Cluster Template feature. The manual process of member registration of the cluster can be bypassed by setting a couple of properties in the axonserver.properties file. axoniq.axonserver.autocluster.first=internal-hostname:internal-port axoniq.axonserver.autocluster.contexts=context1,context2 The axoniq.axonserver.autocluster.first property defines the first node in the cluster, by specifying its internal hostname (the hostname used by other Axon Server nodes to connect to this host), and the internal port. If the internal port is default (8224) it can be omitted. axoniq.axonserver.autocluster.contexts defines the contexts to create on the first node and the context to join for the other nodes. All of these contexts will be joined as primary nodes. When you don’t specify any contexts, the initial node will only create an admin context, the other nodes will join the cluster, but not be a member of any contexts. The autocluster properties will only take effect on a clean start of a node. If a node is already initialized, it will not create any contexts anymore, nor join the cluster again. This feature is only available in Axon Server Enterprise (since v4.4) The cluster template is defined as a YAML file, describing a cluster’s configuration. It is possible to predefine replication groups, contexts, metadata, applications (with tokens), and users (with their roles), so that the configuration can be shared across teams. The cluster template runs exactly once, on the first clean Axon Server start-up, if there is no previous cluster configuration defined. Therefore, the cluster template will not override any existing configuration. Its purpose is to be used during active development, to be able to share the configuration across development teams. To use the cluster template feature, all you need to do is define a valid cluster template YAML file. If this file is present on a fresh Axon Server startup, it will automatically be picked up and the cluster will be configured accordingly. Each cluster node needs to have the cluster template YAML file copy. Each node will read this file, find its own configuration and configure itself. Default path from which Axon Server reads configuration is ./cluster-template.yml You can override this path anytime by setting Axon Server property: axoniq.axonserver.clustertemplate.path:/mypath/cluster-template.yml Below you can find an example of a basic cluster setup: the _admin and default contexts are in separate replication nodes, replicated across all nodes that are marked as primary. axoniq: axonserver: cluster-template: first: internal-hostname:internal-port replicationGroups: - name: _admin roles: - node: axonserver-enterprise-1 role: PRIMARY - node: axonserver-enterprise-2 role: PRIMARY - node: axonserver-enterprise-3 role: PRIMARY contexts: - name: _admin - name: default roles: - node: axonserver-enterprise-2 role: PRIMARY - node: axonserver-enterprise-3 role: PRIMARY - node: axonserver-enterprise-1 role: PRIMARY contexts: - name: default applications: [] users: [] Cluster overview after default configuration is applied In order to avoid mistakes while writing a cluster configuration file, we have implemented an export button that will generate a cluster template file based on current setup. Location of export button at Settings page Recommended mechanism - Creating an advanced cluster setup Start a fresh Axon Server setup (use basic cluster template setup mentioned above). Configure a cluster via the UI, by creating users, applications, replication groups and contexts. Use the export button located at \"Settings -> Configuration\" panel to download the current cluster configuration. Replace the basic cluster template with the newly exported cluster template configuration. Use export button from any admin node to ensure that the configuration file contains all the relevant information.","title":"Clusters","component":"axon-server-reference","version":"v2024.1","name":"clustering","url":"/axon-server-reference/v2024.1/axon-server/administration/clustering/","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"Setup process","hash":"_setup_process","id":2},{"text":"Automatic initialization","hash":"automatic-initialization","id":3},{"text":"Cluster templates","hash":"cluster-templates","id":4},{"text":"Usage","hash":"_usage","id":5},{"text":"Configuration","hash":"_configuration","id":6},{"text":"Export","hash":"_export","id":7}]},"142":{"id":142,"text":"This page depicts the various Error codes that Axon Server will return in the case of any problems while Processing Client Requests / Message Handling / Administrative Tasks / Cluster Errors. Error Code Error Description AXONIQ-1000 AUTHENTICATION TOKEN MISSING This indicates that the Axon Server has been configured with authentication enabled and a client application did not pass a token. AXONIQ-1001 AUTHENTICATION INVALID TOKEN This indicates that the Axon Server has been configured with authentication enabled and a client application has supplied an invalid token. AXONIQ-1002 UNSUPPORTED INSTRUCTION This error is returned when the Axon Server cannot recognize the instruction passed to it. AXONIQ-1003 INSTRUCTION EXECUTION ERROR This error is returned when the Axon Server throws an error during the execution of the instruction passed to it. AXONIQ-1004 INSTRUCTION RESULT TIMEOUT This indicates that the execution of the instruction did not finish within the timeout set. AXONIQ-1100 NODE IS REPLICA This error is returned when a request from a node to join a cluster is received by a node that is no longer leader. Normally the node would forward the request to the leader, but if there is a leader change during the processing of the join request this may happen. AXONIQ-1300 NO SUCH APPLICATION This error is returned when any client sends any instruction with a specific application name that has not been registered with Axon Server. AXONIQ-1301 NO SUCH NODE This error is returned when any client sends any instruction with a specific node name that has not been registered with Axon Server. AXONIQ-1302 CONTEXT NOT FOUND This error is returned when any client sends any instruction with a specific context that has not been registered with Axon Server. AXONIQ-1304 CONTEXT EXISTS This error is returned when there is an instruction to create a specific context within Axon Server and it already exists. AXONIQ-1305 REPLICATION GROUP EXISTS This error is returned when there is an instruction to create a specific replication group within Axon Server and it already exists. AXONIQ-1400 NO AXONSERVER FOR CONTEXT This error is returned when there is no Axon Server node available for the specified context. AXONIQ-1500 AXONSERVER NODE NOT CONNECTED This error is returned when there is an instruction to create a specific context within Axon Server, and it already exists. AXONIQ-1700 LICENSE ERROR This error is returned when the request cannot be executed due to license restrictions. AXONIQ-1900 TOO MANY REQUESTS This error is returned when clients send too many commands or queries to Axon Server and its internal queue is full. Error Code Error Description AXONIQ-2000 INVALID SEQUENCE This error is returned when there is a gap between the sequence number for a particular aggregate instance that the client application sends and the current sequence number for that instance in the Axon Server Event Store. AXONIQ-2001 PAYLOAD TOO LARGE This error is returned when the payload for the message to be executed is too large. AXONIQ-2002 TOO MANY EVENTS This error is returned when an ad-hoc query (for example from the Search Page) has buffered too many rows to send to the client, this error also is returned when a single transaction from a client contains more than 32767 events (due to a limitation in the event store format, we can only store MAX_SHORT events in a single transaction). AXONIQ-2100 NO LEADER AVAILABLE This error is returned when no leader is available to execute any instruction sent to the Axon Server cluster. AXONIQ-2101 NOT RUNNING IN CLUSTER This error is returned when Axon Server is not running in a cluster. AXONIQ-2107 REPLICATION GROUP UPDATE IN PROGRESS This error is returned when an instruction on a specific replication group is rejected as it is undergoing an update. AXONIQ-2108 REPLICATION GROUP NOT FOUND This error is returned when an instruction is requested for a non-existing replication group. AXONIQ-2200 INVALID TRANSACTION TOKEN This error is returned when during replication there is a mismatch between the transaction token in the new transaction and the transaction token that the event store node expects. This means that there is a likely inconsistency in the data between the nodes. AXONIQ-2301 CLUSTER NOT ALLOWED This error is returned when an instruction to create a cluster is rejected. AXONIQ-2302 CONTEXT CREATION NOT ALLOWED This error is returned when an instruction to create a context on an Axon Server cluster is rejected due to invalid permissions. AXONIQ-2303 NOT SUPPORTED IN DEVELOPMENT This error is returned when an instruction valid only in non-development mode is attempted when development mode is active. AXONIQ-2304 CANNOT DELETE INTERNAL CONTEXT This error is returned when an operation to delete any internal context is attempted on an Axon Server cluster. AXONIQ-2305 MAX CLUSTER SIZE REACHED This error is returned when the maximum size of the cluster is reached. AXONIQ-2306 ALREADY MEMBER OF CLUSTER This error is returned when an attempt is made to add an already existing node to a cluster. AXONIQ-2307 NOT A MEMBER This error is returned when a cluster related instruction was sent to a node that is not a member of the cluster. AXONIQ-2308 INVALID CONTEXT NAME This error is returned when an instruction is attemped on a non-existing context. AXONIQ-2310 CANNOT REMOVE LAST NODE This error is returned when a user tries to remove the last node from a replication group. In this case, the user should delete the replication group. AXONIQ-2311 INVALID PROPERTY VALUE This error is returned in multiple conditions for example when creating a context with properties and one of the properties does not have a valid value, also when updating a license and the license file is invalid or the environment variable. AXONIQ-2500 SAME NODE NAME This error is returned when a node tries to join the cluster with the same internal hostname and port as the leader. AXONIQ-2501 UNKNOWN HOST This error is returned when a hostname was passed that did not resolve to a valid IP address. AXONIQ-2502 CANNOT JOIN This error is returned when a node tries to join the cluster and there is an error. AXONIQ-2510 UNKNOWN ROLE This error is returned when an unknown role is assigned to a user or application. This can only happen when this is done through the REST interface directly or through the CLI. AXONIQ-2511 INVALID QUERY This error is returned when the user sends a query in the search window that is not valid. AXONIQ-2700 PLUGIN NOT FOUND This error is returned when the user sends a request for a plugin that cannot be found. AXONIQ-2701 INVALID PLUGIN CONFIGURATION This error is returned when the user tries to update the configuration of a plugin with invalid values. AXONIQ-2800 EVENT PROCESSOR NOT FOUND This error is returned when the user tries to update the configuration of a non-existing event processor. AXONIQ-2801 EVENT PROCESSOR MOVE UNKNOWN TARGET This error is returned when the user tries to move an event processor segment to a client that is no longer connected. AXONIQ-2802 EVENT PROCESSOR MOVE NO AVAILABLE THREADS This error is returned when the user tries to move an event processor segment to a client that does not have any available threads. Error Code Error Description AXONIQ-4000 NO HANDLER FOR COMMAND This error is returned when a command message instruction is sent to the Axon Server and there is no corresponding handler available for it. AXONIQ-4001 CONNECTION TO HANDLER LOST This error is returned when Axon Server loses connection to any of the Command Handlers. AXONIQ-4002 COMMAND TIMEOUT This error is returned when a command message instruction is sent to the Axon Server and there is an error while processing it. AXONIQ-4003 COMMAND DISPATCH ERROR This error is returned when a command message instruction is sent to the Axon Server and there is an error while dispatching it. AXONIQ-4005 COMMAND DUPLICATED This error is returned when a command with the same message identifier is sent multiple times. Error Code Error Description AXONIQ-5000 NO HANDLER FOR QUERY This error is returned when a query message instruction is sent to the Axon Server and there is no corresponding handler available for it. AXONIQ-5002 QUERY DISPATCH ERROR This error is returned when a query instruction is sent to the Axon Server and there is an error while dispatching it. AXONIQ-5006 QUERY TIMEOUT This error is returned when a query takes too long. AXONIQ-5007 QUERY DUPLICATED This error is returned when a query with the same message identifier is sent multiple times. Error Code Error Description AXONIQ-3004 EVENT REJECTED BY INTERCEPTOR This error is returned when an interceptor in a plugin rejects an event. AXONIQ-3005 SNAPSHOT REJECTED BY INTERCEPTOR This error is returned when an interceptor in a plugin rejects a snapshot. AXONIQ-4004 COMMAND REJECTED BY INTERCEPTOR This error is returned when an interceptor in a plugin rejects a command. AXONIQ-5004 QUERY REJECTED BY INTERCEPTOR This error is returned when an interceptor in a plugin rejects a query. AXONIQ-5005 SUBSCRIPTION QUERY REJECTED BY INTERCEPTOR This error is returned when an interceptor in a plugin rejects a subscription query request. AXONIQ-6100 EXCEPTION IN INTERCEPTOR This error is returned when an interceptor in a plugin throws an exception. AXONIQ-6101 POST COMMIT HOOK EXCEPTION This error is returned when an post commit hook in a plugin throws an exception. Error Code Error Description AXONIQ-7000 NODE NOT READY FOR BACKUP This error is returned when an Axon Server node is not available for any backup operation. Error Code Error Description AXONIQ-9000 DATAFILE READ ERROR This error is returned when Axon Server is unable to read from the Event/Snapshot Data Files. AXONIQ-9001 INDEX READ ERROR This error is returned when Axon Server is unable to read from the Index files. AXONIQ-9100 DATAFILE WRITE ERROR This error is returned when Axon Server is unable to write to the Event/Snapshot Data files. AXONIQ-9101 INDEX WRITE ERROR This error is returned when Axon Server is unable to write to the Index files. AXONIQ-9102 DIRECTORY CREATION FAILED This error is returned when Axon Server is unable to create a directory for storing events/snapshots or indexes. AXONIQ-9200 VALIDATION FAILED This error is returned during startup of Axon Server when it performs a validation of the most recent event store segments. This error code is returned when the validation fails. AXONIQ-9900 TRANSACTION ROLLED BACK This error is returned when any transaction is rolled back. AXONIQ-9500 INTERRUPTED This error is returned when Axon Server process is stopped while waiting for events to be written to the event store segment. AXONIQ-6000 NO EVENTSTORE This error is returned when the Axon Server Event Store is not available to perform any instructions. AXONIQ-6001 CLIENT DISCONNECTED This error is returned when an Axon Framework client application disconnects from the Axon Server. AXONIQ-6002 LIST AGGREGATE EVENTS TIMEOUT This error is returned when a request to return the events for a specific aggregate takes too long. Error Code Error Description AXONIQ-10001 SERVER TOO SLOW This error is returned when any instruction to update the Axon Server cluster fails as the server is too slow to respond. AXONIQ-10002 UNCOMMITTED CONFIGURATION This error is returned when an instruction to update configuration for the Axon Server cluster fails. AXONIQ-10007 UNCOMMITTED TERM Update the configuration of a replication group is received before there are any actions committed. The request is refused to prevent potential replication issues. AXONIQ-10003 REPLICATION TIMEOUT This error is returned when the replication process between the nodes of the Axon Server cluster times out. Error Code Error Description AXONIQ-0001 OTHER Any other errors. AXONIQ-2610 SCHEDULED EVENT NOT FOUND This error is returned when a scheduled event is not found. AXONIQ-11000 INSTRUCTION TIMEOUT This error is returned when an instruction sent to a client takes too long to complete. AXONIQ-11001 INSTRUCTION ACK ONLY This error is returned when an instruction is sent to a client which only acknowledges the request, but does not confirm the result of the instruction.","title":"Error Codes","component":"axon-server-reference","version":"v2024.1","name":"error-codes","url":"/axon-server-reference/v2024.1/axon-server/administration/error-codes/","titles":[{"text":"Client request processing errors","hash":"_client_request_processing_errors","id":1},{"text":"Input errors","hash":"_input_errors","id":2},{"text":"Command handling errors","hash":"_command_handling_errors","id":3},{"text":"Query handling errors","hash":"_query_handling_errors","id":4},{"text":"Plugin errors","hash":"_plugin_errors","id":5},{"text":"Backup errors","hash":"_backup_errors","id":6},{"text":"Internal errors","hash":"_internal_errors","id":7},{"text":"Cluster errors","hash":"_cluster_errors","id":8},{"text":"Other errors","hash":"_other_errors","id":9}]},"143":{"id":143,"text":"It might be desirable to reset the position an event processor works on. This causes a replay of the events for this event processor. Resetting the position is done by resetting the token of the event processor. We document the following ways to reset the token of an event processor: - Using Axon Framework - Using the REST API - Using the Axon Server Connector A minimal project showing these approaches can be found here. Independent of the method chosen, an event processor needs to be stopped before its token can be reset. This requires all instances of the event processor (on all nodes) to release their claims on segments. Now, when resetTokens() is called, the executing instance can temporarily claim all segments, reset the tokens and store the new values. After the token has been reset, the event processor can be started again. Note that older versions of axon framework (pre 4.6) directly acknowledge a received admin instruction, without waiting for its execution. This might require manually waiting for an Event Processor to be fully stopped before the token can be reset. A possible approach for this is shown in the last section of this page. Axon Framework exposes all required functionality for a reset in the StreamingEventProcessor class. In the following, we provide a sample for its usage. For more details, read the documentation on the framework classes here. Instances of StreamingEventProcessor can be obtained by querying the eventProcessingConfiguration method of your global configuration. import org.axonframework.config.Configuration; // … private final Configuration configuration; // … configuration.eventProcessingConfiguration() .eventProcessorByProcessingGroup(processorName, StreamingEventProcessor.class) // … Calling shutDown, resetTokens and start on the retrieved StreamingEventProcessor performs the required steps to reset its token. This can be achieved as shown in the following code snippet: configuration.eventProcessingConfiguration() .eventProcessorByProcessingGroup(processorName, StreamingEventProcessor.class) .ifPresent(streamingEventProcessor -> \\{ if (streamingEventProcessor.supportsReset()) \\{ streamingEventProcessor.shutDown(); streamingEventProcessor.resetTokens(); streamingEventProcessor.start(); } }); Note that this only concerns stopping the local instances. If there are instances running on other nodes, you either need to use Axon Server or build a solution for this yourself. For more details, refer to the section in the Axon Framework reference guide. Axon Server exposes a REST API to pause and start Event Processors. When used in conjunction with the resetTokens method from earlier, this can be used to make sure that all instances of an Event Processor are paused before a token is reset. The required parameters to do this are the following: - component: name of the component the Event Processor is part of - processor: name of the Event Processor itself - context: name of the context for which to reset the tokens - tokenStoreId: the identifier used to distinguish the desired token from other tokens stored in the same store. Now /v1/components/{component}/processors/{processor}/pause?context={context}&tokenStoreIdentifier={tokenStoreId} can be called, causing Axon Server to request all matched Event Processors to stop. Then a reset as shown in the example using the framework can be performed. This is not Axon Server specific and hence is the same for all shown methods. As a final step, the Event Processors can be started again with a patch request to the following URL: /v1/components/{component}/processors/{processor}/start?context={context}&tokenStoreIdentifier={tokenStoreId} . To reset Event Processors with the Axon Server Connector, the dependency has to be available on your classpath, for example by using the following maven dependency. io.axoniq axonserver-connector-java 4.6.1 All operations related to administration go through an AdminChannel, which can be obtained from an AxonServerConnectionFactory as follows. private AdminChannel adminChannel() \\{ AxonServerConnectionFactory connectionFactory = AxonServerConnectionFactory.forClient(componentName).build(); return connectionFactory.connect(contextName).adminChannel(); } In this example, componentName and contextName are values supplied by external configuration. In simple cases, these might be the same as in your Axon Framework configuration. Using the provided admin channel, you can pause, reset, and restart the event processors. In contrast to the approach based on the Axon Framework, you also need to provide a tokenStoreIdentifier, since there can be multiple applications connected to one Axon Server that share the same token store. An example on how to get this identifier can be found in the Axon Framework Documentation on Retrieving the Token Store Identifier. Now resetting the tokens can be done by simply calling the pauseEventProcessor, resetTokens and startEventProcessor methods in the correct order. adminChannel().pauseEventProcessor(eventProcessorName, tokenStoreIdentifier) .thenRun(eventProcessor::resetTokens) .thenRun(() -> adminChannel().startEventProcessor(eventProcessorName, tokenStoreIdentifier)) Note that Axon Server makes sure to stop and start all matched EventProcessors on all nodes with this call. Prior to version 4.6, Axon Framework did immediately acknowledge receiving a pause instruction. This means, that the Axon Server would receive these ACCEPTED Results before all Event Processors have terminated. Starting from Axon Framework version 4.6, Axon Server will only respond with SUCCESS once all connected Event Processors have successfully been paused. To make sure that older Axon Framework versions wait until all Event Processors have terminated, we need to implement a bit of custom logic. This works with both, the Axon Server Connector approach and the REST API approach. In the following, we will show an approach using the axon server connector admin channel. We use the following method to allow waiting for all instances of an event processor, identified by a tuple of eventProcessorName and tokenStoreIdentifier to reach a desired state, either running or not running. Since APIs are built around an asynchronous execution model, we work with Mono and Flux here. protected Mono awaitForStatus(String eventProcessorName, String tokenStoreIdentifier, boolean running) \\{ return Flux.from(new ResultStreamPublisher<>(adminChannel::eventProcessors)) .filter(eventProcessor -> eventProcessor.getIdentifier().getProcessorName() .equals(eventProcessorName)) .filter(eventProcessor -> eventProcessor.getIdentifier().getTokenStoreIdentifier() .equals(tokenStoreIdentifier)) .flatMap(eventProcessor -> Flux.fromIterable(eventProcessor.getClientInstanceList())) .map(clientInstance -> clientInstance.getIsRunning() == running) .reduce(Boolean::logicalAnd) .filter(result -> result.equals(true)) .switchIfEmpty(Mono.error(new RuntimeException(\"\"))) .retryWhen(Retry.fixedDelay(3, Duration.ofSeconds(2))) .thenReturn(Result.SUCCESS); } The basic idea is to filter all received event processor descriptions to only retain the relevant ones, get a list of all connected client nodes and ensure their state equals the desired state passed in as a parameter. If one of them is in the wrong state, the check is repeated at most 3 times with a fixed delay of 2 seconds. If there are still clients in the wrong state, an error is returned. Using an approach like this allows you to build custom functionality to handle unresponsive clients in a tailor-made solution.","title":"Event Processors","component":"axon-server-reference","version":"v2024.1","name":"event-processors","url":"/axon-server-reference/v2024.1/axon-server/administration/event-processors/","titles":[{"text":"How to reset the token of an event processor","hash":"_how_to_reset_the_token_of_an_event_processor","id":1},{"text":"General","hash":"_general","id":2},{"text":"Using Axon Framework","hash":"using-axon-framework","id":3},{"text":"Using the REST API","hash":"_using_the_rest_api","id":4},{"text":"Using the Axon Server Connector","hash":"_using_the_axon_server_connector","id":5},{"text":"Handling asynchronous behaviour in older Axon Framework versions (pre 4.6)","hash":"_handling_asynchronous_behaviour_in_older_axon_framework_versions_pre_4_6","id":6}]},"144":{"id":144,"text":"The new Event Transformation feature allows users to perform specific event transformations like updates and deletes in the event store, utilizing the Event Transformation API. This functional change is intended to facilitate more flexible event management in rare instances where modifications are unavoidable. Event transformation sounds like an oxymoron to you? Don’t worry, it is not our intention to change what is by its nature immutable: a fact happened in the past. But there are situations when we believe it is not forbidden to manipulate the way the events are stored. An event is immutable. An event lasts forever. This is true, and we strongly believe in these rules. But like any other rule, there are few exceptions that should not be underestimated. Let’s say that you start using your event store in production. After some time you realize you have a security issue since you forgot to encrypt the sensitive data inside your events. What should you do? The only solution is to change the way events are stored in the event store. This does not mean they change their semantic, but only their persisted representation. Another typical use-case is when you want to forget some old data, because it is stale. You just want to get rid of it, to free some space. So, to sum it up: we transform events either by changing their format (not the semantic) or by deleting them. The event transformation feature fits well all situations where you need to manipulate the persisted representation of the events, without touching their semantic. It could be used, for example, in the following cases: to get rid of a large number of up-casters, which could affect your performance to encrypt sensitive data inside your events The event transformation feature is not intended to manipulate events semantically. It should not be used, for example, in the following cases: to fix a bug to change history Whenever we need to change the representation of events in the Event Store, we desire this change to be as atomic as possible. We are going to change events by introducing the concept of the Transformation. Transformation is essentially a bucket of actions that are going to be performed against the Event Store. Currently, the supported actions are the deletion of events and the replacement of events. Once we gather all actions that we want to use to transform our Event Store, we are going to apply those actions to it. Since the number of those actions we want to perform against the Event Store can be large, we must ensure that our Event Store is not impacted by the Transformation itself. In other words, it must behave as the Transformation is not happening at all. Our little helper in this scenario is the fact that Event Store is immutable by its nature. We are going to create a new version of our event segments by reading current events and transforming them according to the bucket of actions we have collected for the specific Transformation. Axon Server will make sure to always read the latest version of event segments. The transformation process will increase disk space usage, since it creates multiple versions of the same events. For this reason, before you start transforming your events, make sure there is enough free disk space. If you decide to change the entire Event Store in one Transformation, this would require free space larger than twice the space occupied by the event store. Once the transformation is complete, the disk space can be freed up again through the compaction procedure, a way to clean older versions of event segments that should be invoked only when we are absolutely sure they are no longer needed. To limit the possible misusing of the Event Store Transformation, we are going to make sure that there is only one ACTIVE Transformation of the Event Store at the time. Having this in mind there are several states in which our Event Store can end up in. Let’s talk about them. In order to prevent more than one transformation happening at the same time we are going to have our Event Store transition between IDLE, TRANSFORMING, and COMPACTING states. IDLE state is the state representing a normal operation of the Event Store, meaning that there is no any Transformation happening at the time. While being in this state, Event Store is open for starting a new Transformation. If choosing so, we are going to end up in the following state called TRANSFORMING. Once our Event Store ends up in TRANSFORMING state, that means that no new Transformation can be accepted until we either apply this Transformation or we cancel it. Do note, that even during TRANSFORMING state, Event Store can append new events and can also read existing ones. By applying the Transformation to the Event Store, we are creating the new version of event segments. This can make a significant impact on our disk space availability. To overcome that, Event Store introduces a compact option which will get rid of all older versions of event segments. By compacting the Event Store we enter the COMPACTING state and once compaction is done, we move back to IDLE. Let’s depict what we have talked about in previous chapter in a form of a state diagram. stateDiagram-v2 [*] --> Idle Idle --> Transforming : Start transformation Transforming --> Idle: Done transforming Idle --> Compacting : Compact Compacting --> Idle : Done compacting As we already said, the Transformation is a bucket of actions. Those actions are event deletion and event replacement. The Transformation itself is started by invoking the START TRANSFORMATION operation which moves the Event Store to TRANSFORMING state and initializes the newly created Transformation in the ACTIVE state. After that, we are allowed to send DELETE and REPLACE event actions to the Axon Server. Axon Server will store them durably. Up until this point, the content of the Event Store remains unchanged. Once we are happy with the Transformation Actions, we can call the APPLY operation to apply the Transformation; in other words, to effectively change the Event Store. Depending on the number of actions, apply operation can take a while, but once it’s completed, we can say that the Transformation is APPLIED. After that, the Event Store moves to IDLE state. Instead of applying the Transformation, we can also decide to CANCEL it; after the active Transformation has been cancelled, the Event Store moves to IDLE state and this makes it available for accepting new Transformations. As you might have concluded already, the apply process can take a while. This means that the caller cannot wait for this process to complete. Hence, the caller is only going to START applying process, and it will be done in the background. By monitoring the state of the Transformation you can understand when the apply process has been completed. During the apply process, it might happen that while reading events you get a mixture of old and newly transformed events. This is absolutely fine, and you must take this fact into the consideration when building your system that invokes the Transformation. Let’s depict what we have talked about in previous chapter in a form of a state diagram. stateDiagram-v2 [*] --> Active Active --> Active : Delete event Active --> Active : Replace event Active --> Applying : Start applying Applying --> Applied : Applied Active --> Cancelled : Cancel Applied --> [*] Cancelled --> [*] Once we apply or cancel the Transformation, the actions we have collected and stored are useless. To mitigate this issue there is a Cleaning Task that is going to from time to time check whether there are resources to be cleaned. Basically, it’ll check for all applied and cancelled transformations and clean their resources. When a Transformation runs in a cluster environment, several aspects must be taken into consideration. The Transformation creation is replicated across the nodes in the same replication group. The Transformation Actions are replicated too. In other word, each node will persist all Transformation Actions. Apply and Cancel Operations are replicated. Each node does the applying of the Transformation at its own pace. Once all storage nodes in the replication group have applied the Transformation, the Transformation is considered APPLIED. The majority of nodes in not enough. The reason for this maybe strong requirement is to prevent possible mixed scenarios. Axon Server will need to persist your Event Transformation Actions to a dedicated storage. By default, the location where all transformation data is stored is the transformation folder. You can customize this location using the following property: axoniq.axonserver.transformation.storage Please be aware that the transformation store could be huge, exactly like the event store. Select a storage location with a suitable size. Anytime you want to change events already written in the event store, you need to create a new Transformation. A newly created Transformation is in ACTIVE state. While being ACTIVE, the Transformation can accept all changes you want to perform. Once all changes have been registered, the Transformation can be APPLIED. Only when the Transformation is applied the changes are effective inside your Event Store. The simplest way to transform the events in your Java project, is to use the Axon Server Connector. Axon Server Connector supports Event Transformation feature starting from version 2023.1.0. You can use AxonServerConnectionFactory#forClient static method to build your AxonServerConnectionFactory that could be used to open a new AxonServerConnection. See the following example: AxonServerConnectionFactory.forClient(\"event-transformer\") .routingServers(new ServerAddress(\"localhost\", 8124)) .build(); The AxonServerConnectionFactory can be used to establish a connection with a specific context, using the method AxonServerConnectionFactory#connect(context). This method establishes a long living connection to Axon Server for the specified context. This connection remains open until the AxonServerConnection#disconnect method is invoked. You can check whether your client is connected by invoking the AxonServerConnection#isConnected method. Remember to always disconnect your client after you performed the desired operation. The simplest way to transform your events is to implement your own EventTransformer. The EventTransformer is simply a BiConsumer, where the first argument is the original event, and the second argument is the Appender that can be used to append the desired transformation action for the event. In other words, the Appender allows you to perform two different operations: - delete event - replace event To better understand how to use the EventTransformer, we will analyze the following example: EventSources.range) -> connection.eventChannel(), 0, 200) .filter(eventWithToken -> isUnencrypted(eventWithToken.getEvent() .transform(\"Encryption of sensitive data\", (eventWithToken, appender) -> appender.replaceEvent(eventWithToken.getToken(), encrypt(eventWithToken.getEvent()))) .execute) -> connection.eventTransformationChannel( .get(); In order to access to the events currently stored in your Event Store, you can use the static methods offered by EventSources interfaces. The range(eventChannelProvider, fistToken, lastToken) method, will allow you to access the event stream starting from the specified firstToken, until the specified lastToken. It is possible to filter the event stream, invoking the filter(predicate) method. When the stream is properly filtered (if needed), it is possible to transform the events, by invoking the transform method, with the description of the Transformation and the EventTransformer that implements the business logic of the transformation itself. Since the EventTransformer is a functional interface, it can also be expressed as a lambda. These APIs take a declarative approach, that means that nothing happens until the pipeline is not executed, invoking the execute(eventTranformationChannelSupplier) method. This method takes care of multiple operations: - open a new transformation with the specified description - run the event transformer - request the transformation to be applied The execute method returns a CompletableFuture: wait for the completion before checking the result. The request to apply the transformation is executed by a scheduled task. That means that you could wait some time before being able to see the events transformed in your Event Store. If you don’t need to read the events currently stored in your Event Store, you can transform your events by implementing your own Transformer. The Transformer#transform(appender) provides you the Appender needed to append the required transformation actions. For example, you can delete the event with token 100 and replace event with token 562L with the following snippet: Transformer transformer = appender -> { appender.deleteEvent(100L); appender.replaceEvent(562L, replacement); }; You can run the Transformation by invoking the EventTransformationChannel#transform method. connection.eventTransformationChannel() .transform(\"Transformation test\", transformer); As before, this method takes care of multiple operations: - open a new transformation with the specified description - run the transformer - request the transformation to be applied And don’t forget that also the transform method returns a CompletableFuture. As before, you must wait for its completion, and after that, you could wait some time before being able to see the events transformed in your Event Store. If you want to have a full control of all the state changes of your transformation, you can use the ActiveTransformation. In order to open a new transformation, use the EventTransformationChannel#newTransformation(description) method. To transform your Event Store, you need to implement a Transformer (just like in the prev example). The transformer will be executed by invoking the ActiveTransformation#transform(transformer) method. An active transformation can be either applied or cancelled. To apply the active transformation, you can use ActiveTransformation#startApplying() method. To cancel the active transformation, you can use ActiveTransformation#cancel() method. All methods in ActiveTransformation return `CompletableFuture`s. Remember to compose them when needed. This is the snippet of code that opens a new Transformation with the specified description, runs the transformer and finally requests the transformation to be applied. connection.eventTransformationChannel() .newTransformation(\"My transformation description\") .thenCompose(activeTransformation -> activeTransformation.transform(transformer)) .thenCompose(ActiveTransformation::startApplying); When engaging in event transformation, certain roles are necessary to ensure secured process. Here’s a detailed explanation of each role: TRANSFORM Users granted the TRANSFORM role can prepare a transformation and get information about transformations. However, they are not able to apply transformations. TRANSFORM_ADMIN To apply a transformation you need the transform_admin role. To create and apply transformations users will need both roles. In order to read all transformations that have been created for a context, you can use the EventTransformationChannel provided by your AxonServerConnection. The method EventTransformationChannel#transformations will provide a CompletableFuture of all the transformations created for a context and their current state. Remember, you can have one and only one ACTIVE transformation for each context. Whenever a transformation is applied, the events in the Event Store are changed. Axon Server, to perform the changes, does not delete the previous form of the events, it just creates a new version of the events saving them into a new segment version. This choice was made for security reasons, because we don’t want the Axon Server to delete anything unless explicitly requested. However, this choice has a negative impact on disk space. In fact, every time I create a new segment version, I’m doubling the space needed to save those events. For this reason, Axon Server provides a feature that allows you to compact the event store, deleting the previous versions once they are no longer needed. You can request the compaction by invoking the EventTransformationChannel#startCompacting method. Be carefull, this will permanently delete the previous versions of your events. Remember, you can have one and only one ACTIVE transformation for each context. If you try to create a new transformation when there is another one in ACTIVE state, you will receive this error. To solve the problem, you can either - cancel the already existing ACTIVE transformation - apply the already existing ACTIVE transformation - continue working on already existing ACTIVE transformation starting from where it stopped In the last case, you can retrieve the ActiveTransformation that is already created with the method EventTransformationChannel#activeTransformation. If you are not using Java, or if you are just curious to try, you can try to use the gRPC/HTTP operations directly. For HTTP endpoints, please refer to the Swagger UI for the documentation. The Event Transformation functionality is enabled by default, starting from AxonServer 2023.1.0. In order to deactivate the feature, it is sufficient to add the following property in Axon Server property file: axoniq.axonserver.event-transformation.enabled=false","title":"Event Transformation","component":"axon-server-reference","version":"v2024.1","name":"event-transformation","url":"/axon-server-reference/v2024.1/axon-server/administration/event-transformation/","titles":[{"text":"Objective and justification","hash":"_objective_and_justification","id":1},{"text":"What does it mean to transform events?","hash":"_what_does_it_mean_to_transform_events","id":2},{"text":"When you could transform your events?","hash":"_when_you_could_transform_your_events","id":3},{"text":"When you should not transform your events?","hash":"_when_you_should_not_transform_your_events","id":4},{"text":"What?","hash":"_what","id":5},{"text":"The event store states","hash":"_the_event_store_states","id":6},{"text":"IDLE","hash":"_idle","id":7},{"text":"TRANSFORMING","hash":"_transforming","id":8},{"text":"COMPACTING","hash":"_compacting","id":9},{"text":"State flow of the event store","hash":"_state_flow_of_the_event_store","id":10},{"text":"The transformation","hash":"_the_transformation","id":11},{"text":"APPLY considerations","hash":"_apply_considerations","id":12},{"text":"State flow of the transformation","hash":"_state_flow_of_the_transformation","id":13},{"text":"Cleaning transformation resources","hash":"_cleaning_transformation_resources","id":14},{"text":"Cluster considerations","hash":"_cluster_considerations","id":15},{"text":"How?","hash":"_how","id":16},{"text":"How to transform events","hash":"_how_to_transform_events","id":17},{"text":"Connecting to Axon Server","hash":"_connecting_to_axon_server","id":18},{"text":"Fluent API","hash":"_fluent_api","id":19},{"text":"Step-by-step way to transform your events","hash":"_step_by_step_way_to_transform_your_events","id":20},{"text":"Access control","hash":"_access_control","id":21},{"text":"How to check the transformations for a context","hash":"_how_to_check_the_transformations_for_a_context","id":22},{"text":"How to compact the event store","hash":"_how_to_compact_the_event_store","id":23},{"text":"Troubleshooting","hash":"_troubleshooting","id":24},{"text":"\"There is already ongoing transformation\"","hash":"_there_is_already_ongoing_transformation","id":25},{"text":"How to use the gRPC API directly","hash":"_how_to_use_the_grpc_api_directly","id":26},{"text":"How to deactivate the transformation feature in Axon Server","hash":"_how_to_deactivate_the_transformation_feature_in_axon_server","id":27}]},"145":{"id":145,"text":"The administration section of the reference guide addresses the operational and maintenance aspects of Axon Server deployments (Axon Server SE/EE). The following table gives a summary of the various sub-sections. Sub-Section Purpose Configuration Configuration aspects of an Axon Server deployment Monitoring Monitoring aspects of an Axon Server deployment Clustering Multi-Context Multi-Context support within Axon Server Tiered-Storage Tiered storage capabilities in Axon Server Tagging Location awareness capabilities within Axon Server Backup and Messaging-only Nodes Axon Server roles capabilities Backups Backup aspects of an Axon Server deployment Recovery Recovery aspects of an Axon Server deployment Plugins Managing Axon Server plugins Logging Axon Server logging customization Event transformation Event transformation tool","title":"Administration","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/administration/","titles":[]},"146":{"id":146,"text":"This feature is only available on the Enterprise Edition of AxonServer To recap the definition as we have seen in the clustering section, contexts allow for strong separation of data without requiring deploying and managing full instances. An Axon Server EE cluster can be setup to store events for multiple contexts. Each context has it own set of files (containing Event/Snapshot data) stored in a separate directory. Axon Server will replicate the context data to a number of nodes depending on the replication group the context is assigned to. When you are creating a context you can either add it to an already existing replication group, or create a new replication group for this context. More on replication groups can be found in the replication groups section. Each context has a separate physical directory on each of the member nodes. This directory is by default determined by the *axoniq.axonserver.events.storage* and *axoniq.axonserver.snapshot.storage* properties. Each context getting a subdirectory below the location specified by the property. Upon creation of a context you can specify a different location. A depiction of multiple registered contexts within an Axon Server EE cluster is shown below The clustering section details the creation of the admin and default contexts_ when a new Axon Server cluster is created. The admin_ context is used to process all configuration changes in Axon Server, so it contains the master configuration from which all contexts get their information. The _admin context does not have an event store and the configuration information is stored in a control database. The default context is the context used by clients when they have not specified any context information. In case you would like to create a cluster without creating a default context, it is recommended to use the Automatic-Initialization feature where you can control explicitly which contexts can be created or not. When you create a context, there are a number of default properties that you can override, specifically for the context. These are: property default value description event.storage [axoniq.axonserver.event.storage]/[context-name] Location where the event store’s event information will be stored event.segment-size 250 MB Size of the event store’s event segments event.index-format JUMP_SKIP_INDEX Index type used for the events in this context (JUMP_SKIP_INDEX or BLOOM_FILTER_INDEX event.max-bloom-filters-in-memory 100 Number of bloom filters for events to be kept in memory (only applicable if index is BLOOM_FILTER_INDEX) event.max-indexes-in-memory 50 Number of index files for events to be kept in memory event.retention-time 7 d Retention time for the events in the primary locations (if secondary location specified) snapshot.storage [axoniq.axonserver.snapshot.storage]/[context-name] Location where the event store’s event information will be stored snapshot.segment-size 250 MB Size of the event store’s snapshot segments snapshot.index-format JUMP_SKIP_INDEX Index type used for the snapshots in this context (JUMP_SKIP_INDEX or BLOOM_FILTER_INDEX snapshot.max-bloom-filters-in-memory 100 Number of bloom filters for snapshots to be kept in memory (only applicable if index is BLOOM_FILTER_INDEX) snapshot.max-indexes-in-memory 50 Number of index files for snapshots to be kept in memory snapshot.retention-time 7 d Retention time for the snapshots in the primary locations (if secondary location specified) As of version 4.4, Axon Server has a new format for the index of events and snapshots, called JUMP_SKIP_INDEX. This is the default format for all contexts that are created from this version onwards. This index format uses a global index to locate the last event for a specific aggregate, and maintains per segment per aggregate the location of the previous event. It improves the efficiency in looking up aggregates that are distributed over segments that are further apart. For instance if you have 2000 event segments and an aggregate has events in segment 1500, 1000, and 500, using this index, Axon Server will find the latest event using the global index, and then from the index for segment 1500 that the previous event is in segment 1000. This prevents checking (the indexes of) all the files in between. When using this index, Axon Server will no longer create bloom filter files. For existing contexts the index format will remain BLOOM_FILTER_INDEX. After a context has been set up in Axon Server EE, Axon Framework applications can connect to it by setting the axon.axonserver.context property when using Spring Boot, or setting the defaultContext on the builder of AxonServerConnectionManager that is passed to the event store. If you are not using Spring Boot, you likely also have to register the AxonConfiguration as a component on the Configurer. Using something like AxonServerConfiguration.builder().context(otherContext).build() to use a different context. Note that depending on message source configuration, other contexts may be used besides the default. All messages in that application will be sent and received only from the default context, unless specified otherwise. In order to send commands and queries to a different context, you can provide a TargetContextResolver to the Configurer as follows: Axon Configurer Spring Boot public class Configuration { public void configuring() { Configurer configurer = DefaultConfigurer .defaultConfiguration() .registerComponent(TargetContextResolver.class, configuration -> message -> message.getPayloadType() .getName() .startsWith(\"com.context.booking\") ? \"booking\" : \"payment\" ); } } @Configuration public class Configuration { @Bean public TargetContextResolver targetContextResolver() { return message -> message.getPayloadType().getName().startsWith(\"com.context.booking\") ? \"booking\" : \"payment\"; } } You can stream events from multiple contexts in the same processor. This is described in the Streaming Events Processors' Multiple event sources section. When an application handles multiple tenants, it might make sense to create separate store per tenant. Handling multiple tenants needs additional infrastructure, such as duplication of the event processor for each tenant, as well as datasource configuration. For this we have created the Multi-Tenancy extension to Axon Framework, that takes care of this infrastructure for you. Pre-4.4 Context Deletion Note that when you delete an existing context with the preserve data option and then recreate it, without specifying the index format, Axon Server will use the JUMP_SKIP_INDEX format. This means that it will create a new index for the existing data, if the old format was BLOOM_FILTER_INDEX. Depending on the size of the event store this can take a long time. The operational maintenance of contexts within an Axon Server EE cluster can be done via any one of the following provided utilities: CLI (axonserver-cli.jar) provided by Axon Server UI Console of Axon Server REST API provided by Axon Server Let us deep dive into these capabilities in more detail. Axon’s command-line utility (axonserver-cli.jar - part of the Axon Server distributable) offers the following options to operate and maintain contexts The register-context command helps in the registration and creation of a new context. A sample of the command with the mandatory parameters is depicted below $ java -jar ./axonserver-cli.jar register-context -S http://[node]:[port] -c [context-name] -n [members] This will create a new replication group with the name of the context, with the specified member nodes, and creates a context in this replication group. Another example: $ java -jar ./axonserver-cli.jar register-context -S http://[node]:[port] -c [context-name] -g [replication-group] -prop event.storage=[location] -prop snapshot.storage=[location] This creates a new context in an already existing replication group. Event and snapshot files are stored in the specified location. Mandatory parameters *-c* refers to the context name. The context name must match the following regular expression \"[a-zA-Z][a-zA-Z_-0-9]*\", so it should start with a letter (uppercase or lowercase), followed by a combination of letters, digits, hyphens and underscores. Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-g* refers to the name of the replication group where the context will be added to *-n* refers to the comma separated list of node names that should be members of the new context. This parameter registers them as \"PRIMARY\" member nodes of that context *-a* refers to the comma separated list of node names that should be \"ACTIVE_BACKUP\" member nodes of that context *-m* refers to the comma separated list of node names that should be \"MESSAGING_ONLY\" member nodes of that context *-p* refers to the comma separated list of node names that should be \"PASSIVE_BACKUP\" member nodes of that context *-s* refers to the comma separated list of node names that should be \"SECONDARY\" member nodes of that context *-prop* refers to properties that can be set for the new context. The value should be in the form \\=\\ *-t* refers to the access token to authenticate at server *Deleting contexts* The delete-context command helps in the deletion of a context and its associated data from all member nodes of that context. A sample of the command with the mandatory parameters is depicted below $ java -jar ./axonserver-cli.jar delete-context -S http://[node]:[port] -c [context-name] Mandatory parameters *-c* refers to the context that needs to be deleted Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server *–preserve-event-store\"* option to keep the event store files when deleting the context (Axon Server deletes the event files by default) *Adding a node to a Context* The add-node-to-context command helps in the registration of a new member node creation of an existing context. A sample of the command with the mandatory parameters is depicted below $ java -jar ./axonserver-cli.jar add-node-to-context -S http://[node]:[port] -c [context-name] -r [role of the node] -n [node name] Mandatory parameters *-c* refers to an existing context *-n* refers to the node name that should be a member of this context *-r* refers to the role of this node within the context Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server *Deleting a node from a context* The delete-node-from-context command helps in the deletion member node from an existing context. A sample of the command with the mandatory parameters is depicted below $ java -jar ./axonserver-cli.jar delete-node-from-context -S http://[node]:[port] -c [context-name] -n [node name] Mandatory parameters *-c* refers to an existing context *-n* refers to the node name that should no longer be a member of this context Optional parameters *-S* if not supplied connects by default to http://localhost:8024. If supplied, it should be any node serving the _admin context *-t* refers to the access token to authenticate at server *–preserve-event-store* removes the node from the context but leaves the event store files on that node. *List all contexts* The contexts command lists down all the contexts registered within the cluster, including its name, the leader member node of the context and all the member nodes within the context $ java -jar ./axonserver-cli.jar contexts Optional parameters *-o json* will display the output in a JSON format Another option to maintain contexts is via the UI console of Axon Server EE. Navigate to the Contexts icon on the navigation menu of the console which will open up the context maintenance screen. The operations listed above are possible through the console. Axon Server EE provides a REST API to perform context maintenance operations. The API is accessible at http:[server]:[port]/swagger-ui.html and offers the context-rest-controller to help perform context maintenance operations","title":"Multi-Context","component":"axon-server-reference","version":"v2024.1","name":"multi-context","url":"/axon-server-reference/v2024.1/axon-server/administration/multi-context/","titles":[{"text":"Index formats","hash":"_index_formats","id":1},{"text":"Usage in Axon Framework","hash":"_usage_in_axon_framework","id":2},{"text":"Sending messages to other contexts","hash":"_sending_messages_to_other_contexts","id":3},{"text":"Reading events from multiple contexts","hash":"_reading_events_from_multiple_contexts","id":4},{"text":"Multi-tenancy","hash":"_multi_tenancy","id":5},{"text":"Context maintenance","hash":"_context_maintenance","id":6},{"text":"Command-line interface","hash":"command-line-interface","id":7},{"text":"Creating contexts","hash":"_creating_contexts","id":8},{"text":"User interface","hash":"user-interface","id":9},{"text":"REST API","hash":"rest-api","id":10}]},"147":{"id":147,"text":"This feature is only available with Axon Server version 4.5 onwards. Plugins allow you to add specific interceptors in Axon Server. This enables intercepting commands and queries before they are updated and after they are executed, and it enables intercepting events and snapshots before they are stored and when they are read. A plugin is an OSGi package, that you can upload to Axon Server. The package can implement a number of interceptors, Axon Server will discover these and start using them. The OSGi package runs in an OSGi container, using its own class loader and it only has access to specific Axon Server classes. A plugin package has a symbolic name and version. This information is part of the information in the manifest file of the package. If you upload a package with the same name and version, it will replace the already available package. You can have multiple versions of the same package available. Plugins are managed at a context level, you can configure and activate plugins per context. Per context, you can only have one version of a plugin active. In Axon Server Standard Edition there only is one context, you can still active or pause the plugin for the default context. Axon Server stores plugins on disk on each node. It is important that the location where the plugins are stored is persistent. By default, Axon Server stores the plugin in the directory plugins/bundles. Apart from this directory, there is also a cache directory used by the OSGi container internally (plugins/cache by default). The cache directory does not need to be persistent, Axon Server reinstalls the configured extensions on restart. For more information on plugin development, check the API module in GitHub https://github.com/AxonIQ/axon-server-plugin-api. You can administer plugins through the UI or using the command-line interface. This uploads a plugin to Axon Server and makes it available for further configuration. When you upload the plugin Axon Server will perform some basic validation, to verify that it is a valid OSGi bundle and it can be loaded in the OSGi container. If the uploaded plugin has the same name and version as an already existing plugin, it will immediately replace the existing plugin. To upload a plugin through the command-line interface, use: java -jar axonserver-cli.jar upload-plugin -f [file] Note that there are default settings for the maximum file size (1M) and maximum request size (10M) for the upload request. If you want to upload larger bundles, increase these limits in axonserver.properties (spring.servlet.multipart.max-file-size and spring.servlet.multipart.max-request-size). If your plugin contains registered services of the type io.axoniq.axonserver.plugin.ConfigurationListener, you can configure the plugin through Axon Server. In the UI you will see a form with the properties that are defined in the ConfigurationListeners, initially filled with the default values. Note that you set the values per context. A plugin can have multiple ConfigurationListeners, each one is identified by a name. This name is shown in the Axon Server UI. If you want to set the configuration values through the command-line interface, you have two options, either specify the values as parameters in the command or provide a YAML file containing the parameter values. Here’s an example of a configuration listener that defines two properties: package org.sample; import io.axoniq.axonserver.plugin.Configuration; import io.axoniq.axonserver.plugin.ConfigurationListener; import io.axoniq.axonserver.plugin.PluginPropertyDefinition; import java.util.Map; import static java.util.Arrays.asList; /** * @author Marc Gathier */ public class SampleConfigurationListener implements ConfigurationListener { private final Configuration configuration = new Configuration( asList( PluginPropertyDefinition.newBuilder(\"mypropid1\", \"My first property\").build(), PluginPropertyDefinition.newBuilder(\"mypropid2\", \"My second property\").build() ), \"myname\" ); @Override public Configuration configuration() { return configuration; } @Override public void updated(String s, Map map) { } } To set the properties through the command line using the parameters option use: java -jar axonserver-cli.jar upload-plugin -p -v -c -prop myname:mypropid1=myvalue -prop myname:mypropid2=myvalue2 To do the same using a YAML file create a file with the following content: myname: mypropid1: myvalue mypropid2: myvalue3 And use the following command-line command: java -jar axonserver-cli.jar configure-plugin -p -v -c -f You can activate a plugin through the UI or use the following command-line command: java -jar axonserver-cli.jar activate-plugin -p -v -c If you want to stop an plugin being used temporarily for a context, you can pause it through the UI or the command-line interface. This will keep all the configuration for the plugin, so when you later start it again it will use the same configuration as before. The command-line command for this is: java -jar axonserver-cli.jar pause-plugin -p -v -c This unregisters a plugin for a specific context. The plugin will still be active for other contexts. The command-line command for this is: java -jar axonserver-cli.jar unregister-plugin -p -v -c Deleting a plugin unregisters it from all the contexts and deletes the package from all the nodes. The command-line command for this is: java -jar axonserver-cli.jar delete-plugin -p -v","title":"Axon Server Plugins","component":"axon-server-reference","version":"v2024.1","name":"plugins","url":"/axon-server-reference/v2024.1/axon-server/administration/plugins/","titles":[{"text":"Plugin development","hash":"_plugin_development","id":1},{"text":"Plugin administration","hash":"_plugin_administration","id":2},{"text":"Upload plugin","hash":"_upload_plugin","id":3},{"text":"Configuring a plugin","hash":"_configuring_a_plugin","id":4},{"text":"Activating a plugin","hash":"_activating_a_plugin","id":5},{"text":"Pausing a plugin","hash":"_pausing_a_plugin","id":6},{"text":"Unregistering a plugin","hash":"_unregistering_a_plugin","id":7},{"text":"Deleting a plugin","hash":"_deleting_a_plugin","id":8}]},"148":{"id":148,"text":"This feature is available in Axon Server Enterprise version 4.3 onwards. In case of a major network change, when the host names of all Axon Server nodes have changed, or when you want to move an Axon Server cluster to a new environment, you will have to start Axon Server in recovery mode. This is needed as Axon Server maintains the information about the nodes in the cluster in its control database, and this needs to be updated on all nodes. Axon Server will start in recovery mode when it finds a file called recovery.json in its startup directory, or in a location defined by the property axoniq.axonserver.recoveryfile. The recovery file must contain a JSON array of the nodes in the cluster with their host names and port numbers, for example: [ { \"name\": \"axonserver-1\", \"hostName\": \"axonserver-1\", \"internalHostName\": \"axonserver-1.internal\", \"grpcInternalPort\": 8224, \"httpPort\": 8024, \"grpcPort\": 8124 }, { \"name\": \"axonserver-2\", \"hostName\": \"axonserver-2\", \"internalHostName\": \"axonserver-2.internal\", \"grpcInternalPort\": 8224, \"httpPort\": 8024, \"grpcPort\": 8124 }, { \"name\": \"axonserver-3\", \"hostName\": \"axonserver-3\", \"internalHostName\": \"axonserver-3.internal\", \"grpcInternalPort\": 8224, \"httpPort\": 8024, \"grpcPort\": 8124 } ] The hostName defines the hostname that clients will use to connect to the Axon Server node. The internalHostName contains the name one Axon Server uses to connect to the other. Any elements that have not changed (except for the name) may be omitted, so if you want to use the same port numbers you can omit the grpcInternalPort, httpPort, and grpcPort elements. In the sample above, the node names for the Axon Server nodes will remain the same as they were before. As Axon Server derives its node name from the host name, when not explicitly set in properties, this may cause an issue when host names are changed. To change the node names for Axon Server nodes, add an oldName element in the JSON file. [ { \"name\": \"new-axonserver-1\", \"oldName\": \"axonserver-1\", \"hostName\": \"new-axonserver-1\", \"internalHostName\":\" new-axonserver-1.internal\" }, { \"name\": \"new-axonserver-2\", \"oldName\": \"axonserver-2\", \"hostName\": \"new-axonserver-2\", \"internalHostName\": \"new-axonserver-2.internal\" }, { \"name\": \"new-axonserver-3\", \"oldName\": \"axonserver-3\", \"hostName\": \"new-axonserver-3\", \"internalHostName\": \"new-axonserver-3.internal\" } ]","title":"Recovery","component":"axon-server-reference","version":"v2024.1","name":"recovery","url":"/axon-server-reference/v2024.1/axon-server/administration/recovery/","titles":[]},"149":{"id":149,"text":"Within a single cluster you can define *replication groups*. A replication group is responsible for transaction coordination as well as event data replication among the various nodes within the cluster. A visual representation of Replication Groups is depicted below. Each node has a specific role in a replication group. The nodes in a replication group will elect a leader which will be responsible for managing transactions in the replication group. Within a replication group you can define a number of contexts (see the in the multi-context section). When you define a replication group, you assign nodes that will serve that replication group. A node can have different roles in a context: A “PRIMARY” node is a fully functional (and voting) member of that replication group. A majority of primary nodes is needed for a replication group to be available to client applications. A “MESSAGING_ONLY” member will not provide event storage, and (as it is not involved with the transactions) is a non-voting member of the replication group. An “ACTIVE_BACKUP” node is a voting member which provides an event store for each context in the replication group, but it does not provide the messaging services, so clients will not connect to it. Note that you must have at least one active backup node that needs to be up if you want a guarantee that you have up-to-date backups. A “PASSIVE_BACKUP” will provide event stores, but not participate in transactions or even elections, nor provide messaging services. It being up or down will never influence the availability of the replication group, and the leader will send any events accumulated during maintenance, as soon as it comes back online. Lastly, a \"SECONDARY\" node will provide event stores, but not participate in transactions or even elections, nor provide messaging services. The leader will send any events accumulated during maintenance, as soon as it comes back online. When there are secondary nodes in a replication group, the primary nodes will only keep the most recent data in their event store. There are multiple options available of assigning roles to nodes within a replication group. The Command Line interface section details this out in the clusters and replication groups sub-sections. All nodes serving a particular context maintain a complete copy, with a “replication leader” in control of the distributed transaction. The leader is determined by elections, following the RAFT protocol. An important consequence has to do with those elections: nodes need to be able to win them, or at least feel the support of a clear majority that is to have a valid leader for a context, a *majority of the nodes must be active* (for instance when you have a cluster with 3 nodes, you need at least 2 active nodes, for a cluster of 4 nodes you would need 3 active nodes).‌ The leader orchestrates the distributed transaction (that is replication of data between the nodes) and confirms to clients when transactions are committed. While an Axon Server cluster does not need to have an odd number of nodes, every individual replication group does, to prevent the chance for a draw in an election. This also holds for the internal replication group named “_admin”, which is used by the admin nodes and stores the cluster structure data. As a consequence most clusters will have an odd number of nodes, and will keep functioning as long as a majority (for a particular replication group) is responding and storing events. Axon Server EE has one special replication group and context, called \"_admin\". This context is used to process all configuration changes in Axon Server, so it contains the master configuration from which all replication groups get their information.‌ You cannot add additional context to the \"_admin\" replication group.","title":"Replication Groups","component":"axon-server-reference","version":"v2024.1","name":"replication-groups","url":"/axon-server-reference/v2024.1/axon-server/administration/replication-groups/","titles":[{"text":"Node roles","hash":"_node_roles","id":1},{"text":"Consensus and elections","hash":"_consensus_and_elections","id":2},{"text":"Special replication group","hash":"_special_replication_group","id":3}]},"150":{"id":150,"text":"You can use tagging in Axon for 2 different scenarios: You want to control which command handler or query handler executes a command or query, or You want to control to which Axon Server node a particular client connects. This feature is only available with Axon Server version 4.4 onwards. Axon Server matches metadata elements provided in a command or a query to tags defined on the command and client handling applications. For instance, you could tag commands with a country code and set the country code in the tags of the handler application. In this case, Axon Server will try to find a command handler with the same country code and send the command to that handler. If there are multiple applications found with a command handler for the requested command and matching tags, Axon Server will pick one based on the provided routing key. The same will happen if there are no applications found with matching tags, so commands will not fail because there are no matching tags. You can, of course, have multiple tags on an application, Axon Server will select the one with most the matching tags. This feature is only available in Axon Server Enterprise and compatible with version 4.2 onwards of Axon. To optimize the connections between framework clients and Axon Server, it is possible to tag both clients and Axon Server with information which describes properties of those clients and nodes. Axon Server will then use these tags to make a connection to the client. A typical tag could describe where the respective client and server node are running (for instance a cloud provider’s region) encouraging that the nearest, and therefore fastest, connections are made. A match is made when the the label and the value of the tag matches. For example, a server tagged with computeRegion=europe will match with a client tag of computeRegion=europe. Similarly, if a server is tagged with computeRegion=europe and client is tagged with computeRegion=asia then this is not considered a match. If both client and server are tagged with multiple tags then the connection that is made will be based on the highest number of matches. If multiple nodes have a equal number of matching tags then the node with the lightest load is chosen. If no matching tags are available at all, it will connect to any available node. To enable tagging you must configure both the client and server. You can configure the tags that you would like for each node through properties using axoniq.axonserver.tags.computeRegion=europe. Additional tags can be specified by adding to the tags element (for instance axoniq.axonserver.tags.networkSpeed=fast). On the client side, there are two approaches through which you can specify tags. Either the properties file is expanded (similar to server configuration, also allowing additional tags to be added) in a Spring Boot environment, or a TagsConfiguration object is registered to the Configurer. Axon Configuration API Spring Boot AutoConfiguration Map tags = new HashMap(); // Insert tags DefaultConfigurer.defaultConfiguration() .configureTags(config -> new TagsConfiguration(tags)); axon.tags.computeRegion=europe","title":"Tagging","component":"axon-server-reference","version":"v2024.1","name":"tagging","url":"/axon-server-reference/v2024.1/axon-server/administration/tagging/","titles":[{"text":"Tag based routing","hash":"_tag_based_routing","id":1},{"text":"Connection distribution","hash":"_connection_distribution","id":2},{"text":"Tag matching","hash":"tag-matching","id":3},{"text":"Enabling tagging","hash":"enabling-tagging","id":4},{"text":"Axon Server","hash":"axon-server","id":5},{"text":"Client","hash":"client","id":6}]},"151":{"id":151,"text":"Tiered storage is a useful feature that allows you to store data across different levels of storage media based on access speed and cost. This helps optimize performance and reduce overall storage costs by placing frequently accessed data on faster storage media, such as SSDs, and less frequently accessed data on slower but more cost-effective storage media, such as HDDs. In a tiered storage system, data is usually classified according to its importance or frequency of use, and then automatically migrated between storage tiers based on these criteria. This approach helps users to optimize their storage resources, reduce costs, and improve performance by ensuring that data is stored on the most appropriate type of storage media. In Axon Server, there are two features that allow you to manage how data is stored: tiered storage and secondary nodes. They work differently but can complement each other. Let’s first explain these two different options and compare them to each other. Tier configuration is shared with all nodes. Each node maintains tiered storage independently storing on its own unique storage locations. Tiered Storage is a feature that enables each node to maintain a local representation of its own tiered storage over its event store replica. This feature allows you to configure multiple storage tiers based on each node’s role, such as primary, secondary, or backup nodes. Nodes of the same role share a tiered configuration execute segment-moving operations locally, and independently. For this reason, it is possible for segments to not be transferred at the same time on all nodes due to timing differences, but this is not a problem, and over time, the tiers will become synchronized. With Tiered Storage, you can configure as many tiers as you need, and you can set retention intervals for each tier to determine after which interval the data should be moved from one tier to another. There are several supported tier types available, including the default, custom storage, and black hole. Tiered configuration within Context page - Axon Server Enterprise Edition Lazy tiers As all available tier types are eagerly initialized they are not suitable for cold storage or archiving. In the future, we will aim to support lazy initialization of tiers, which will allow support for cold storage and archiving. The Default tier type is a convenient option that allows you to quickly set up your event store without having to specify a custom location on disk. If you do not have any specific requirements for the physical storage location of your event data or you are migrating from an older version of Axon Server where the event store location was set via environment variables, then using the Default tier type is a suitable initial tier to use. The Custom storage tier type enables you to set a custom location for a specific tier in Axon Server. You can choose storage via a dropdown menu. To add storage locations to the dropdown menu, you need to configure Axon Server with additional properties. This can be done either through a property file or environment variables, using the following syntax: axoniq.axonserver.event.storages.{storage name}={path to storage} axoniq.axonserver.snapshot.storages.{storage name}={path to storage} For example, to set the slow_disk storage location to /hhd2/eventstore, you can add the following line to your configuration: axoniq.axonserver.event.storages.slow_disk=/hhd2/eventstore axoniq.axonserver.snapshot.storages.slow_disk=/hhd2/eventstore You can add as many storage locations as needed, such as different hard drives or even mounted network drives, but it is important to configure the given storage on all nodes in the Axon Server cluster. Configuration is shared for all nodes of the same role. That’s why all nodes should provide paths where they want to store data for certain named locations (storages). After configuration is set, it’s replicated to all nodes, after that nodes maintain and run segment-moving operations on their own, independently. Storage locations are referenced by name (for instance slow_disk), and the provided path is resolved at runtime on each node. It’s important that path on each node points to a unique physical location! The Black Hole is tier type in Axon Server that consumes your events, and you will never see them again. Using the Black Hole tier will mark your context as ephemeral, which means that data is permanently removed after a specified retention interval. Once the data is removed, it cannot be recovered, so it’s essential to use this feature with caution and only if you’re certain that you no longer need the data. Context using a black hole tier will be marked as ephemeral and the flow of data will be visualized (only for primary nodes) To configure context as ephemeral, you first need to choose storage where you want to store events or snapshots initially. You can do so by choosing default tier type or selecting the storage location from the dropdown menu. After that, you need to add Black Hole tier type and set retention interval for this tier. Example on how to configure ephemeral context Ephemeral context is particularly useful in scenarios such as event streaming or integration contexts, where events are published to multiple observers in real-time, and after some time, the events are no longer of interest. Another use case is for contexts that produce many events, like notifications, which are no longer useful for the business after a certain period. However: The Black Hole tier should not be used if you have event-sourced aggregates. Ephemeral context is not suitable for fine-grain event removal as it removes segments per whole, that contain many different events of different types of aggregates, making it difficult to remove specific events. In the case you need to use event-sourced aggregates and want to delete events after a period of time and ensure that you always have a valid state, Axon Server provides an experimental feature called conditional removal, which allows you to remove segments conditionally. To use this feature, you first need to enable snapshots for your aggregates. Setting the conditional property (available by editing context properties in the UI) experimental.black-hole.conditional-remove = 1 instructs the black hole tier to remove an event segment only if each event in the segment was previously included in a snapshot. It also removes a snapshot segment only if there is a newer snapshot for each snapshot in the segment. However, note that this feature is experimental, and it comes with some caveats. For example, there are many events of different aggregates in one segment. If only one aggregate from this segment does not have a snapshot, it may prevent the segment from being deleted indefinitely. This feature is best used if you have a small number of aggregate instances, ideally one aggregate, which is a common case for integration purposes contexts. Another safer usage of condition removal and black hole tier, is to enable it only for snapshot storage. With that after some time older non-used snapshots will be removed, but latest snapshot will be always available for each aggregate. Configuring conditional remove in context properties Axon Server supports both time-based and size-based retention intervals for tiered storage. ] Retention interval options for tiered storage Time-based retention specifies how long a segment should be in one tier before being moved to another tier. After the segment is closed for writing and the retention time is due, the segment becomes eligible to move to the next tier. Size-based retention monitors the size of the whole tier. After the size threshold is breached, the oldest segments in the tier that are outside of the size boundary are moved to the next tier, maintaining the specified size of the tier. Specified size is calculated only using event segment file sizes and does not include index file sizes. So, make sure to leave enough space on the disk for indexes and for the currently open segment. Size-based retention is useful when you want to keep the newest events on fast storage limited by size, while moving everything else to a slower disk. Axon Server allows you to control the flow of data between tiers. You can limit the rate of segment moves to prevent large IO spikes. You can also pause the segment moving operation to prevent data from being moved between tiers. You can limit the max number of segments that can be moved per minute by setting the following properties: event.segment-move-rate=5 By default, the max number of segments that can be moved per minute is set to 5. This setting can be changed within the context properties in Axon Server UI. Limiting IO rate in context properties for a given context In some cases, you may want to pause the segment moving operation. This can be useful in emergency situations or during maintenance/backup operations. To pause the segment moving operation, set the segment move rate to zero: event.segment-move-rate=0 To resume the segment moving operation, simply set the segment move rate to a non-zero value. To track the flow of data from one tier to another, we provide a few useful metrics: file_segment_moved_initiated_total{axonserver=\"axonserver-enterprise-1\",context=\"mycontext\",fromTierLevel=\"0\",type=\"EVENT\",} 11.0 file_segment_moved_completed_total{axonserver=\"axonserver-enterprise-1\",context=\"mycontext\",fromTierLevel=\"0\",type=\"EVENT\",}10.0 file_segment_moved_duration_seconds_sum{axonserver=\"axonserver-enterprise-1\",context=\"mycontext\",fromTierLevel=\"1\",type=\"SNAPSHOT\",} 0.53 Example of metrics for tracking the flow of data in tiered storage file_segment_moved_initiated - counts how many segments, per context, per tier level, were initiated to be moved to next tier file_segment_moved_completed - counts how many segments, per context, per tier level, was successfully moved to next tier file_segment_moved_duration - measures how long did it take to move segments to next tier file.segment.per.tier - current number of segments per each tier Limitations to changing and adding to tier configuration While it is possible to change the conditions for moving data from one tier to the next, it is not possible to change the order of tiers. Currently, new tiers can only be added at the end and removal of existing tiers is not possible. In the future, it is expected that it will be possible to alter the configuration completely. Secondary Nodes are a feature in Axon Server that allows you to reduce the number of copies of data that is stored, by keeping only the most recent event store on your primary nodes and keeping the full event store on the secondary nodes. The primary nodes can have faster (more expensive) disks, while the secondary nodes can have slower but more cost-effective disks. This can help reduce storage costs without significantly impacting performance. When Axon Server processes a transaction to append events, the leader replicates this transaction to all of the nodes in the cluster. This includes the primary nodes, as well as the secondary and backup nodes. While the leader will be satisfied when the majority of the primary nodes have acknowledged the receipt of the transaction, it will also keep track of the progress of the other nodes. Each node holds an exact copy of the data initially. So with a cluster of three nodes, each element of data (typically events) will be stored a total of three times. The main reason for this is to ensure that the failure of a single node will not result in the data becoming unavailable or lost. This is particularly relevant for recent information, which is accessed frequently by various event processors, and when using event sourcing. However, the added value of these extra copies degrades over time, as these entries are accessed less frequently. Secondary nodes contain a full copy of all the data that the primary nodes also process. While replicating that data, they inform the primary nodes of their progress. Once the data has aged to the configured retention time, it becomes eligible for removal from the last tier in primary nodes, but only if all available secondary nodes have a safe copy of that data. When primary nodes need to access old data, they will retrieve it from the secondary nodes. By using secondary nodes, you can leverage concurrent access performance of faster disks while minimizing cost by moving events to slower disks once access requirements are reduced. Additionally, a secondary node could be used to keep access for incidental operational use of older events. This secondary node could use several storage tiers to be able to cope with the large amount of data to store. If needed, after a certain retention period, data can be removed altogether. The main difference between Secondary Nodes and Tiered Storage is the cardinality of data. Secondary Nodes allow for a reduction in the number of copies of each data element that is stored; whereas in Tiered Storage, the number of copies always equals to the number of nodes in the cluster. Another significant difference is that Secondary Nodes copy all the data, including the most recent events, even though they still exist on the primary node. Once the data has aged to the configured retention time, it becomes eligible for removal from the primary nodes, but only if all available secondary nodes have a safe copy of that data. In contrast, Tiered Storage involves an actual data copy operation at the moment data transitions from one tier to the next. The differences between Secondary Nodes and Tiered Storage allow for interesting data management techniques. High-performance systems require the ability to concurrently ingest data and read events for event sourcing. Additionally, events that are \"cooling down\" may still occasionally be needed for operational purposes, making the availability of this data essential. In such scenarios, one could use SSD and HDD on the primary nodes to leverage the concurrent access performance of SSD and minimize costs by moving events to a local HDD once access requirements are reduced. Additionally, a Secondary node could be used to keep access for incidental operational use of older events. This Secondary node could use several storage tiers to cope with large amounts of data to store. By combining Secondary Nodes and Tiered Storage, users can effectively manage their data and strike a balance between performance and cost. Example of a tiered setup that keeps most up-to-date events in primary nodes. After a given period of time data is removed from primary nodes and reduced to one replica in one secondary node which deletes data after a long period of time. To use secondary nodes, the replication group for the context must have nodes with SECONDARY role. You may consider to have at least two nodes with SECONDARY role to prevent a single point of failure. To configure a secondary node, you need to add it to the Axon Server cluster as a new node with the SECONDARY role. You can do this by installing Axon Server on a new machine, configuring it to use the same Axon Server instance as the primary node, and starting it up with the SECONDARY role. Once the secondary node is up and running, it will automatically start replicating data from the primary node. By default, the secondary node will store a full copy of all data that the primary nodes also process. While replicating that data, the secondary node informs the primary nodes of its progress. To control the retention time of events on the primary nodes, you can set the retention time properties in the context properties. event.retention-time=10d snapshot.retention-time=10d Entering number without unit defaults to milliseconds, but you can specify a value with a unit, for instance 1d or 5h. This allows you to specify how long events will be kept on the primary nodes before they are eligible for removal. If you have primary nodes with multiple tiers, data will be removed only from last tier. Once events are removed from the primary nodes, they will still be available on the secondary nodes. To access old data on the primary nodes, you can retrieve it from the secondary nodes. This ensures that your data remains available even after it has been removed from the primary nodes, as long as it is still available on the secondary nodes. Overall, secondary nodes provide a way to reduce the number of copies of each data element that is stored, while still maintaining the availability of that data.","title":"Tiered Storage","component":"axon-server-reference","version":"v2024.1","name":"tiered-storage","url":"/axon-server-reference/v2024.1/axon-server/administration/tiered-storage/","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"Axon Server tiered storage","hash":"_axon_server_tiered_storage","id":2},{"text":"Default","hash":"_default","id":3},{"text":"Custom storage","hash":"_custom_storage","id":4},{"text":"Black Hole Tier","hash":"_black_hole_tier","id":5},{"text":"Configuring ephemeral context","hash":"_configuring_ephemeral_context","id":6},{"text":"Use cases for ephemeral context","hash":"_use_cases_for_ephemeral_context","id":7},{"text":"Conditional Removal","hash":"_conditional_removal","id":8},{"text":"Retention Intervals","hash":"_retention_intervals","id":9},{"text":"Time-Based Retention","hash":"_time_based_retention","id":10},{"text":"Size-Based Retention","hash":"_size_based_retention","id":11},{"text":"Controlling the flow of data","hash":"_controlling_the_flow_of_data","id":12},{"text":"Setting IO Rate Limits","hash":"_setting_io_rate_limits","id":13},{"text":"Pausing moving operation","hash":"_pausing_moving_operation","id":14},{"text":"Metrics","hash":"_metrics","id":15},{"text":"Secondary Nodes","hash":"_secondary_nodes","id":16},{"text":"Tiered storage vs Secondary Nodes","hash":"_tiered_storage_vs_secondary_nodes","id":17},{"text":"How are Secondary Nodes Different?","hash":"_how_are_secondary_nodes_different","id":18},{"text":"How Can They Complement Each Other?","hash":"_how_can_they_complement_each_other","id":19},{"text":"Configuring and Using Secondary Nodes","hash":"_configuring_and_using_secondary_nodes","id":20}]},"152":{"id":152,"text":"This section of the manual contains information on installing Axon Server. A summary of the various subsections is given below: Sub-Section Purpose Local Installation Covers all aspects of installing Axon Server locally. Docker / K8s Covers all aspects of installing Axon Server in Docker / K8s.","title":"Installation","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/installation/","titles":[]},"153":{"id":153,"text":"Options Description Non-Axon Server to Axon Server Migrating your non-Axon Server based deployment (Relational DB) to an Axon Server based deployment","title":"Migration","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/migration/","titles":[]},"154":{"id":154,"text":"The Axon EE Server package contains a migration tool to migrate from an already existing RDBMS event store to a new Axon EE Server instance. The tool reads events and snapshots from the existing store and pushes them to an Axon EE Server. The migration tool maintains the state of its migration, so it can be run multiple times. Provision an Axon Server EE cluster with the required number of nodes setup. Startup all the nodes. On any one of the admin nodes, create a new file `application.properties`under the following location ${axon_ee_server_home} containing the properties which define the existing event store and the target Axon Server server axoniq.axonserver.servers - comma separated list of hostnames and ports for the Axon Server cluster. axoniq.datasource.eventstore.url - URL of the JDBC data store containing the existing event store axoniq.datasource.eventstore.username - username to connect to the JDBC data store containing the existing event store axoniq.datasource.eventstore.password - password to connect to the JDBC data store containing the existing event store axon.serializer.events*=jackson- The default settings expect the data in the current event store to be serialized using the XstreamSerializer. Add this property if the data is serialized using the JacksonSerializer. Create a folder called libs under the ${axon_ee_server_home}. Depending upon the type of Database (Postgres/MySql), the required JDBC driver jar files should be placed in this directory. Run the command axonserver-migration.jar The time to migrate data will vary depending upon the size of the existing data store and the number of nodes setup within the cluster. Logon to the Axon Server EE console and query the store to check if the migrated event data is present. The migration tool only migrates the event store data to Axon Server. It does not update the tracking token values in token_entry tables. Tracking tokens are highly dependent on the implementation of the actual event store used. Migrating them is case specific and error-prone. The recommendation is to reset the tracking processors after the migration. The migration tool is like a regular Axon Framework application so properties can be setup accordingly (for example Access Control/Tokens).","title":"Non-Axon Server to Axon Server","component":"axon-server-reference","version":"v2024.1","name":"non-axon-server-to-axon-server","url":"/axon-server-reference/v2024.1/axon-server/migration/non-axon-server-to-axon-server/","titles":[{"text":"Pre-upgrade process","hash":"_pre_upgrade_process","id":1},{"text":"Upgrade process","hash":"_upgrade_process","id":2},{"text":"Verification","hash":"_verification","id":3},{"text":"Notes","hash":"_notes","id":4}]},"155":{"id":155,"text":"There are multiple benefits of moving from an Axon Server SE based deployment to an Axon Server EE based deployment and Axon provides an easy mechanism to achieve this. The up-gradation process primarily involves the movement of the Event/Snapshot data from the an Axon Server SE node to the Axon Server EE cluster. All Event/Snapshots Data (*.events / *.snapshots) in Axon Server SE will be under the folder ${axon_se_server_home}/data/default Provision the Axon Server EE cluster with the required number of nodes setup for the default context. Once this is completed and validated, shut down all the nodes within the cluster Copy and Replace the Event/Snapshots data from the single SE node to every node on the EE cluster. The files should be copied to the_${axon_ee_server_home}/data/default_ location to each of the EE nodes Restart the Nodes Logon to the Axon Server EE console and query the store to check if the migrated event data is present The controldb file on Axon Server SE just contains information on the users allowed access to the server. Users in Axon Server SE are not assigned to any contexts or roles. It is recommended that this file is not copied over over and these users be recreated in Axon Server EE and assigned the proper roles/contexts. Any token setup for client access to the Axon Server SE must be setup on the Axon Server EE cluster too.","title":"Standard to Enterprise Edition","component":"axon-server-reference","version":"v2024.1","name":"standard-to-enterprise-edition","url":"/axon-server-reference/v2024.1/axon-server/migration/standard-to-enterprise-edition/","titles":[{"text":"Pre-upgrade process","hash":"_pre_upgrade_process","id":1},{"text":"Upgrade process","hash":"_upgrade_process","id":2},{"text":"Verification","hash":"_verification","id":3},{"text":"Notes","hash":"_notes","id":4}]},"156":{"id":156,"text":"Flow control is the process of managing the rate of data transmission between two nodes to prevent a fast sender from overwhelming a slow receiver. In the messaging platform flow control is possible both between the messaging platform and the message handlers, and between the nodes in the messaging platform cluster. Messaging Platform - Messaging Handler: The client (the Axon Application) needs to set the following properties to configure flow control: axon.axonserver.initial-nr-of-permits [1000] - number of messages that the server can initially send to client. axon.axonserver.nr-of-new-permits [500] - additional number of messages that the server can send to client. axon.axonserver.new-permits-threshold [500] - when client reaches this threshold in remaining messages, it sends a request with additional number of messages to receive. Axon Server Nodes: Set the following properties to control 'list aggregate events' prefetch rate, per aggregate and per segment: axoniq.axonserver.event.aggregate.prefetch [5] - Ensures that backpressure signals from clients are split into batches. The initial request amount is {prefetch}*5, and subsequent (or replenishing) request amount is {prefetch} axoniq.axonserver.event.events-per-segment-prefetch [10] - the maximum prefetched events from each opened event segment (max two opened segments in parallel) Set the following properties to set flow control on the synchronization between nodes in an Axon Server cluster: axoniq.axonserver.commandFlowControl.initial-nr-of-permits [10000] - number of messages that the master can initially send to replica. axoniq.axonserver.commandFlowControl.nr-of-new-permits [5000] - additional number of messages that the master can send to replica. axoniq.axonserver.commandFlowControl.new-permits-threshold [5000] - when replica reaches this threshold in remaining messages, it sends a request with additional number of messages to receive. axoniq.axonserver.queryFlowControl.initial-nr-of-permits [10000] - number of messages that the master can initially send to replica. axoniq.axonserver.queryFlowControl.nr-of-new-permits [5000] - additional number of messages that the master can send to replica. axoniq.axonserver.queryFlowControl.new-permits-threshold [5000] - when replica reaches this threshold in remaining messages, it sends a request with additional number of messages to receive. Flow control and stream cancellation features are only available with Axon Server 4.6.0 and up. Under the hood, backpressure does Hop to Hop signal propagation (see below) and inherits gRPC’s HTTP2-based backpressure model. As a result, backpressure will not behave intuitively and will not propagate exact request signals from consumer to producer. HTTP/2 and Netty flow control have internal buffers based on message size. In turn, Axon Framework and Axon Server prefetch messages into internal buffers based on message count. The result is that the producer will send a number of messages until it fills all the buffers. Only then will backpressure kick in. Hop to hop The backpressure signal is propagated per-hop. This approach makes it not an end-to-end connection that allows intermediate Axon Server instances to handle backpressure between two connections and pre-fetch additional messages to increase overall performance. It’s important to note that similar to backpressure, the cancellation signal is also per hop. This means it’s propagated over the network to Axon Server and then to the producer. This solution will thus introduce some latency in the stream cancellation. Even though there is potential latency involved in cancellation, any messages produced after the consumer signaled cancellation will be ignored. In order to stream query results, the producer of those results, the consumer, and all Axon Server nodes in between must be at 4.6.0 or higher version. In addition to that, both, consumer and producer must have Project Reactor on the classpath. If the consumer is not at 4.6.0 or higher version, and/or does not have a Project Reactor on the classpath, it is not possible to invoke streaming of query results at all. In all other cases, it is possible to invoke streaming of query results, but it will fallback to the point-to-point query behavior.","title":"Flow Control","component":"axon-server-reference","version":"v2024.1","name":"flow-control","url":"/axon-server-reference/v2024.1/axon-server/performance/flow-control/","titles":[{"text":"Streaming query","hash":"_streaming_query","id":1},{"text":"Compatibility with Axon Framework","hash":"_compatibility_with_axon_framework","id":2}]},"157":{"id":157,"text":"As you operate applications with Axon Server, you may need to fine tune the configuration to have AxonServer running optimally and to it full potential. This generally relates to event segmentation / flow control of messages and general compute recommendations around disk storage, O/S characteristics. The summary below mentions these performance considerations. Performance Area Description Event Segments Performance tuning for event segmentation Flow Control Performance tuning for message flow control","title":"Performance","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/performance/","titles":[]},"158":{"id":158,"text":"Typically, application components contain one or more Event Processors which are responsible for processing incoming events. Streaming Event Processors have configuration aspects that can be changed at runtime to accommodate for changes in the system topology. Streaming Event Processors that handle events in multiple threads use segments to separate the events in the stream across these threads in a reliable way. However, especially when these threads are spread across multiple instances of a component, and the number of instances changes, it may be useful to scale the number of segments accordingly. To this end, Axon Framework provides a split and merge API. This API can be utilized directly or through Axon Server, where the latter takes required coordination into account. Axon Server provides an API to trigger the increase and decrease of the number of Segments, at runtime, across different instances of a processor. Follow these steps to increase or decrease the number of segments for a processor: In the UI, navigate to the component overview, and select one of the application instances that contains the component to change the number of segments for. In the Component Details screen, scroll down to the list of processors. In the list of processors, click the \"Scale\" icon to open the Scaling dialogue In the Scaling dialogue, either click \"Increase\" or \"Decrease\" to adjust the number of segments for the processor. Using the REST API The exposed buttons in the UI can also be targeted directly through REST calls through curl for example. It is recommended to check the Swagger UI for the split and merge endpoint information if such an approach is necessary.","title":"Event Segments","component":"axon-server-reference","version":"v2024.1","name":"tuning-event-processing","url":"/axon-server-reference/v2024.1/axon-server/performance/tuning-event-processing/","titles":[{"text":"Increasing and decreasing segment counts","hash":"increasing-and-decreasing-segment-counts","id":1},{"text":"Segment tuning through Axon Server","hash":"segment-tuning-through-axon-server","id":2}]},"159":{"id":159,"text":"When access control for Axon Server is enabled, you’ll need to provide user credentials or a token. The UI uses username and password to establish a session, while the CLI can use a token. If you are using tools such as “curl”, or have coded your own tool to access the REST API, you’ll need to do this also. The gRPC APIs do not accept user credentials, but always expect a token. Note that the internal API (by default on port 8224) will only accept the \"internal-token\", while the client API (by default on port 8124) will only accept application tokens. Axon Server expects user credentials using the Basic Authentication method. For example, to list the contexts with “curl” using user account \"user\" with password \"password\", you would use: $ curl -u user:password http://localhost:8024/v1/public/context | jq [ { \"changePending\": false, \"leader\": null, \"pendingSince\": 0, \"metaData\": { \"event.index-format\": \"JUMP_SKIP_INDEX\", \"snapshot.index-format\": \"JUMP_SKIP_INDEX\" }, \"roles\": [ { \"role\": \"PRIMARY\", \"node\": \"node-1\" }, { \"role\": \"PRIMARY\", \"node\": \"node-2\" }, { \"role\": \"PRIMARY\", \"node\": \"node-3\" } ], \"replicationGroup\": \"_admin\", \"context\": \"_admin\" }, { \"changePending\": false, \"leader\": null, \"pendingSince\": 0, \"metaData\": { \"event.index-format\": \"JUMP_SKIP_INDEX\", \"snapshot.index-format\": \"JUMP_SKIP_INDEX\" }, \"roles\": [ { \"role\": \"PRIMARY\", \"node\": \"node-1\" }, { \"role\": \"PRIMARY\", \"node\": \"node-2\" }, { \"role\": \"PRIMARY\", \"node\": \"node-3\" } ], \"replicationGroup\": \"default\", \"context\": \"default\" } ] To pass a token to the REST and gRPC APIs, you must add the “AxonIQ-Access-Token” header, with the token as value. For example, when using “curl” as in the previous section, but now with a token instead of user credentials: $ curl -H 'AxonIQ-Access-Token: cfd7304a-950e-4e32-86ba-5ecb2c4d23ec' https://localhost:8024/v1/public/context | jq ...output omitted","title":"Access Control on the REST and gRPC APIs","component":"axon-server-reference","version":"v2024.1","name":"access-control-api","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-api/","titles":[{"text":"Passing user credentials to the REST API","hash":"_passing_user_credentials_to_the_rest_api","id":1},{"text":"Passing a Token to the REST and gRPC APIs","hash":"_passing_a_token_to_the_rest_and_grpc_apis","id":2}]},"160":{"id":160,"text":"When access control has been enabled, you may initially find yourself without a user account for the UI. Cluster templates can be used to combine the initial configuration of your replication groups, registrations of client application, and a core set of user accounts, but you can also use the CLI to do this. For this you still need an admin-level token, which for Axon Server SE can be configured in the properties. For Axon Server EE such a token is by default generated by Axon Server itself, and stored in a file named “./security/.token”. This default location is known by the CLI, so if you run in the working directory of Axon Server, it will check for that file and automatically use the token. If you have overridden the location or provided your own file with a token, for example to ensure that all nodes use the same token, then you must use the \"`-t` \" option to provide it to the CLI.","title":"Access Control and the CLI","component":"axon-server-reference","version":"v2024.1","name":"access-control-cli","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-cli/","titles":[]},"161":{"id":161,"text":"Applications need to provide a valid token before they can perform all operations. The access token can be setup in the client using the property axon.axonserver.token=. The Axon Server connector will use this to authenticate the client to the server. In Axon Server EE, instead of setting a single token in axonserver.properties, you must register applications with specific roles. Please do note that you’ll need either a user with ADMIN level access to do this in the UI, or access to the system token for use with the CLI. To register an application and get an access token use the “register-application” command. This command will return the token to use, which can be specified on the commandline, or generated by Axon Server. Note that this token is only generated once; if you lose it you must delete the application and register it again to get a new token. The command register-application has several options: $ java -jar axonserver-cli.jar register-application usage: register-application -a,--application Name of the application -d,--description [Optional] Description of the application -i,--insecure-ssl Do not check the certificate when connecting using HTTPS. -o,--output Output format (txt,json) -prop,--property [Optional] properties for a context/application (specify as name=value) -r,--roles Roles for the application, use role@context -S,--server Server to send command to (default http://localhost:8024) -s,--https Use HTTPS to connect to the server, rather than HTTP. -t,--access-token [Optional] Access token to authenticate at server -T,--token use this token for the app Error processing command 'register-application': Invalid command -a or --application specifies the name of the application. -r or --roles specifies the roles of the application. Specify multiple roles by giving a comma separated list, for example “READ,ADMIN”. -d or --description specifies a description of the application, which will be shown in overviews. -T or --token can be used to specify the token you want to use for a newly registered application. -prop or --property adds an application specific property. These properties will be provided to any plugin processing messages from/for that application. -t or --access-token specifies the access token to authenticate at the server to which the command is sent to. For SE this should be the same as the (admin) token set in the properties. For EE this should be the security token discussed above. -S or --server can be used to specify the URL to the server that the command needs to be sent to. If this is not supplied it connects to “http://localhost:8024”; by default. -s or --https will cause the CLI to use TLS, in effect changing the URL to “https://localhost:8024”;. Note that if you also want to change the port, you’ll have to use “-S”, in which case you can leave out “-s”. -i or --insecure-ssl will tell the CLI that Axon Server is using a certificate which is not signed by a known CA, for example when using self-signed certificates. The ADMIN role is only valid for the admin context, the other roles are specific to another context. In addition to the role name you can also supply the context to which this role applies, for example _{role_name}@{context_name}. Also if no context is mentioned in Axon Server EE, the role is granted to the application for all registered contexts, including contexts that are created after the role has been granted. The token that you set here must be used by all Axon Framework Applications connecting to Axon Server. The access token can be setup in the client using the property axon.axonserver.token=[Token] If you are using the REST APIs, you can specify the token in the HTTP requests via the following header: AxonIQ-Access-Token: my-token-value-here","title":"Security for Axon Framework Client Applications","component":"axon-server-reference","version":"v2024.1","name":"access-control-clients","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-clients/","titles":[{"text":"Using the CLI to register client apps (Axon Server EE only)","hash":"_using_the_cli_to_register_client_apps_axon_server_ee_only","id":1},{"text":"Mandatory parameters","hash":"_mandatory_parameters","id":2},{"text":"Optional parameters","hash":"_optional_parameters","id":3}]},"162":{"id":162,"text":"When you set the “axoniq.axonserver.accesscontrol.enabled” property to “true”, Axon Server will require a token or user account for access to its APIs. In Axon Server, there are three types of tokens that can be defined: Type Property Purpose Internal axoniq.axonserver.accesscontrol.internal-token Define a token for nodes in the cluster to authenticate each other. System axoniq.axonserver.accesscontrol.systemtokenfile Define a file for a token with administrative rights. Default value is “./security/.token”. Application (Through the UI or CLI) Applications are registered using the UI or CLI and assigned roles. See below for more details. Axon Server will generate the system token for the CLI if none is found, and the CLI (if started in the Axon Server working directory) will know the default location. Axon Framework based applications should only need the non-admin token. If you wish to use tools to access the REST API directly, you must add an HTTP header named “AxonIQ-Access-Token”, as in the following example: $ curl -H 'AxonIQ-Access-Token: system-token' -s http://localhost:8024/v1/public/context | jq '.[] | select(.context==\"default\")' { \"context\": \"default\", \"replicationGroup\": \"default\", \"metaData\": { \"event.index-format\": \"JUMP_SKIP_INDEX\", \"snapshot.index-format\": \"JUMP_SKIP_INDEX\" }, \"changePending\": false, \"pendingSince\": 0, \"leader\": \"e32c48ab5047\", \"roles\": [ { \"node\": \"e32c48ab5047\", \"role\": \"PRIMARY\" } ] } When you create a user account, you assign roles, which will determine the user’s access rights. The user accounts are generally only used for the UI, although they are also valid for access to the REST API, using Basic Authentication. In contrast to SE, where you could only choose between \"normal\" and \"admin\" accounts, you can now assign several roles from a long list, and each per context using \"role`@`context\". You can also assign a role for context “*”, which means that the user gets that role for any context existing now, or created in the future. In Axon Server we can grant specific roles to applications and users that will allow specific operations. Apart from just assigning the roles, you must also indicate for which context the role is granted, so that an application/user that has rights on only one context is not able to access data from other contexts.‌ A summary of the various roles is depicted below Role Name Description ADMIN Administer the cluster, manage contexts, users and applications VIEW_CONFIGURATION View cluster configuration with contexts, users, applications, replication groups, and plugins (only for _admin context) CONTEXT_ADMIN Manage event processors within a specific context DISPATCH_COMMANDS Dispatch commands DISPATCH_QUERY Dispatch queries and subscription queries MONITOR View context information PUBLISH_EVENTS Publish events and snapshots READ_EVENTS Read events and snapshots from the event store SUBSCRIBE_COMMAND_HANDLER Register command handlers SUBSCRIBE_QUERY_HANDLER Register query handlers USE_CONTEXT Perform all operations on a context READ (Deprecated) Read events and perform queries WRITE (Deprecated) Publish events and perform commands For a detailed overview of the mapping between operations and roles see Access Control Matrix. Using the CLI it is possible to create an account without a password. This does not mean that the account requires no password to login, but rather that the account is only used to assign roles to, while the password needs to be checked using an external tool. To create such an account, use the “--no-password” option: $ java -jar axonserver-cli.jar register-user -u username -r roles --no-password See the section on OAuth2 integration for an example.","title":"Access Control for Axon Server","component":"axon-server-reference","version":"v2024.1","name":"access-control-ee","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-ee/","titles":[{"text":"Tokens in Axon Server","hash":"_tokens_in_axon_server","id":1},{"text":"User accounts in Axon Server","hash":"_user_accounts_in_axon_server","id":2},{"text":"Assigning roles","hash":"_assigning_roles","id":3},{"text":"Accounts without a password","hash":"_accounts_without_a_password","id":4}]},"163":{"id":163,"text":"This extension will allow you to use LDAP for authentication and authorization in Axon Server. User accounts and roles from LDAP are not synchronized to the Axon Server cluster, so they won’t show up on the \"Users\" tab. To install the LDAP Extension, you need to unpack the distribution ZIP-file, so the JAR files are in the “exts” subdirectory of the working directory of Axon Server: $ mkdir exts $ unzip -j axon-server-extension-ldap-4.5.1-bin.zip -d exts Archive: axon-server-extension-ldap-4.5-bin.zip inflating: exts/axon-server-extension-ldap-4.5.1-sources.jar inflating: exts/axon-server-extension-ldap-4.5.1.jar inflating: exts/javax.inject-1.jar inflating: exts/spring-ldap-core-2.3.4.RELEASE.jar inflating: exts/spring-security-ldap-5.4.7.jar $ Note that version 4.5.1 is the current version at the time of Axon Server 4.5.13. The options used are: axoniq.axonserver.accesscontrol.enabled This must be set to “true” to enable access control. axoniq.axonserver.enterprise.ldap.enabled Set this to “true” to enable the plugin. axoniq.axonserver.enterprise.ldap.server-name This sets the LDAP server’s hostname, which is defaulted to “localhost”. axoniq.axonserver.enterprise.ldap.server-port This sets the LDAP server’s port, which is defaulted to 389. axoniq.axonserver.enterprise.ldap.server-url As an alternative, for example when you want to use a TLS-secured connection, you can provide the URL to the LDAP server, such as “ldaps://ldap-server.local”. axoniq.axonserver.enterprise.ldap.initialBindUserDN If the LDAP server does not accept unauthenticated initial binds, set the DN of the user for that, for example “cn=admin,dc=demo,dc=io”. Only if both this property and the corresponding password are set, will they be used. axoniq.axonserver.enterprise.ldap.initialBindPassword If the LDAP server does not accept unauthenticated initial binds, set the password for that. Only if both this property and the corresponding User DN are set, will they be used. axoniq.axonserver.enterprise.ldap.search-base This setting provides the base context for searching users, for example “ou=people,dc=planetexpress,dc=com”. axoniq.axonserver.enterprise.ldap.search-filter This is the filter to be used for searching, so you typically add object types, and the attribute to match on. An example would be “(&(objectClass=inetOrgPerson)(uid={0}))”. The “{0}” notation is used to place the username. axoniq.axonserver.enterprise.ldap.group-base Similarly to the “search-base” setting, you can add a “group-base”. This setting is optional and normally not needed. axoniq.axonserver.enterprise.ldap.group-filter The “group-filter” is the search pattern for groups, which will be translated to roles, for example “(&(objectclass=Group)(member={0}))” When using ActiveDirectory, the following properties are needed: axoniq.axonserver.enterprise.ldap.activeDirectory This must be set to “true”. axoniq.axonserver.enterprise.ldap.adDomain This must be set to the AD Domain serviced by the controller. An example of an Active Directory configuration is: axoniq.axonserver.accesscontrol.enabled=true axoniq.axonserver.enterprise.ldap.enabled=true axoniq.axonserver.enterprise.ldap.activeDirectory=true axoniq.axonserver.enterprise.ldap.serverName=my-ad axoniq.axonserver.enterprise.ldap.adDomain=demo.io axoniq.axonserver.enterprise.ldap.searchFilter=(&(objectClass=user)(sAMAccountName=\\{1})) axoniq.axonserver.enterprise.ldap.roles.AxonAdmin=ADMIN@_admin In order to translate LDAP Groups, you must provide properties as follows: axoniq.axonserver.enterprise.ldap.roles.= For example, if we have a group \"ADMIN_STAFF\" that we want to make administrators, and a group \"SHIP_CREW\" that should be normal users of the \"default\" context, then we would use: axoniq.axonserver.enterprise.ldap.roles.ADMIN_STAFF=ADMIN@_admin axoniq.axonserver.enterprise.ldap.roles.SHIP_CREW=USE_CONTEXT@default Two further options exist that may be used to tune the connection with the LDAP server. Both have a default value of “true”. axoniq.axonserver.enterprise.ldap.using-pooled-queries axoniq.axonserver.enterprise.ldap.allowing-referrals","title":"Axon Server EE - LDAP Extension","component":"axon-server-reference","version":"v2024.1","name":"access-control-ldap","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-ldap/","titles":[{"text":"Installing the LDAP extension","hash":"_installing_the_ldap_extension","id":1},{"text":"Configuring the LDAP extension","hash":"_configuring_the_ldap_extension","id":2},{"text":"Active Directory specific settings","hash":"_active_directory_specific_settings","id":3},{"text":"Linking LDAP groups to roles in Axon Server","hash":"_linking_ldap_groups_to_roles_in_axon_server","id":4},{"text":"Tuning the LDAP extension","hash":"_tuning_the_ldap_extension","id":5}]},"164":{"id":164,"text":"The following table gives an overview of the roles in Axon Server and the operations that the role gives access to: Role Operations ADMIN DELETE_USER DOWNLOAD_DIAGNOSE DOWNLOAD_TEMPLATE GET_APP_DETAILS GET_EVENT_PROCESSOR_STRATEGY GET_EVENT_PROCESSORS GET_EVENT_PROCESSORS_STRATEGIES GET_PLUGIN_CONFIGURATION INIT_CLUSTER LIST_APPS LIST_BACKUP_FILENAMES LIST_BACKUP_LOGFILES LIST_COMMANDS LIST_CONTEXTS LIST_NODES LIST_PLUGINS LIST_QUERIES LIST_REPLICATION_GROUPS LIST_TASKS LIST_USERS MERGE_USER RAFT_CLEAN_LOG RAFT_GET_STATUS RAFT_LIST_APPLICATIONS RAFT_LIST_CONTEXT_MEMBERS RAFT_LIST_CONTEXTS RAFT_START_CONTEXT RAFT_STEPDOWN RAFT_STOP_CONTEXT REMOVE_NODE_FROM_CLUSTER RENEW_APP_TOKEN UNREGISTER_PLUGIN UPDATE_CONTEXT_PROPERTIES UPLOAD_LICENSE CONTEXT_ADMIN AUTO_REBALANCE_PROCESSOR GET_EVENT_PROCESSOR_STRATEGY GET_EVENT_PROCESSORS GET_EVENT_PROCESSORS_STRATEGIES LIST_BACKUP_FILENAMES LIST_BACKUP_LOGFILES LOCAL_GET_LAST_EVENT LOCAL_GET_LAST_SNAPSHOT MERGE_EVENT_PROCESSOR_SEGMENTS MOVE_EVENT_PROCESSOR_SEGMENT PAUSE_EVENT_PROCESSOR REBALANCE_PROCESSOR RECONNECT_CLIENT SET_EVENT_PROCESSOR_STRATEGY SPLIT_EVENT_PROCESSOR_SEGMENTS START_EVENT_PROCESSOR DISPATCH_COMMANDS DISPATCH_COMMAND DISPATCH_QUERY DISPATCH_QUERY DISPATCH_SUBSCRIPTION_QUERY MONITOR GET_COMMANDS_COUNT GET_COMMANDS_QUEUE PUBLISH_EVENTS APPEND_EVENT APPEND_SNAPSHOT CANCEL_SCHEDULED_EVENT RESCHEDULE_EVENT SCHEDULE_EVENT READ DISPATCH_QUERY DISPATCH_SUBSCRIPTION_QUERY GET_FIRST_TOKEN GET_LAST_TOKEN GET_TOKEN_AT HANDLE_QUERIES LIST_EVENTS LIST_SNAPSHOTS SEARCH_EVENTS READ_EVENTS GET_FIRST_TOKEN GET_LAST_TOKEN GET_TOKEN_AT LIST_EVENTS LIST_SNAPSHOTS READ_HIGHEST_SEQNR SEARCH_EVENTS SUBSCRIBE_COMMAND_HANDLER HANDLE_COMMANDS SUBSCRIBE_QUERY_HANDLER HANDLE_QUERIES USE_CONTEXT APPEND_EVENT APPEND_SNAPSHOT AUTO_REBALANCE_PROCESSOR CANCEL_SCHEDULED_EVENT DISPATCH_COMMAND DISPATCH_QUERY DISPATCH_SUBSCRIPTION_QUERY GET_COMMANDS_COUNT GET_COMMANDS_QUEUE GET_EVENT_PROCESSOR_STRATEGY GET_EVENT_PROCESSORS GET_EVENT_PROCESSORS_STRATEGIES GET_FIRST_TOKEN GET_LAST_TOKEN GET_TOKEN_AT HANDLE_COMMANDS HANDLE_QUERIES LIST_BACKUP_FILENAMES LIST_BACKUP_LOGFILES LIST_EVENTS LIST_QUERIES LIST_SNAPSHOTS LOCAL_GET_LAST_EVENT LOCAL_GET_LAST_SNAPSHOT MERGE_EVENT_PROCESSOR_SEGMENTS MOVE_EVENT_PROCESSOR_SEGMENT PAUSE_EVENT_PROCESSOR READ_HIGHEST_SEQNR REBALANCE_PROCESSOR RECONNECT_CLIENT RESCHEDULE_EVENT SCHEDULE_EVENT SEARCH_EVENTS SET_EVENT_PROCESSOR_STRATEGY SPLIT_EVENT_PROCESSOR_SEGMENTS START_EVENT_PROCESSOR VIEW_CONFIGURATION LIST_APPS LIST_CONTEXTS LIST_NODES LIST_PLUGINS LIST_REPLICATION_GROUPS LIST_USERS WRITE APPEND_EVENT APPEND_SNAPSHOT CANCEL_SCHEDULED_EVENT DISPATCH_COMMAND HANDLE_COMMANDS RESCHEDULE_EVENT SCHEDULE_EVENT The following table gives an overview of the operations in Axon Server and the roles that can execute the operation: Operation Role ACTIVATE_PLUGIN ADMIN ADD_NODE_TO_CLUSTER ADMIN ADD_NODE_TO_CONTEXT ADMIN ADD_NODE_TO_REPLICATION_GROUP ADMIN ADD_PLUGIN ADMIN APPEND_EVENT PUBLISH_EVENTS USE_CONTEXT WRITE APPEND_SNAPSHOT PUBLISH_EVENTS USE_CONTEXT WRITE AUTO_REBALANCE_PROCESSOR CONTEXT_ADMIN USE_CONTEXT CANCEL_SCHEDULED_EVENT PUBLISH_EVENTS USE_CONTEXT WRITE CONFIGURE_PLUGIN ADMIN CREATE_APP ADMIN CREATE_CONTEXT ADMIN CREATE_CONTROLDB_BACKUP ADMIN CREATE_REPLICATION_GROUP ADMIN DELETE_APP ADMIN DELETE_CONTEXT ADMIN DELETE_NODE_FROM_CONTEXT ADMIN DELETE_NODE_FROM_REPLICATION_GROUP ADMIN DELETE_PLUGIN ADMIN DELETE_REPLICATION_GROUP ADMIN DELETE_TASK ADMIN DELETE_USER ADMIN DISPATCH_COMMAND DISPATCH_COMMANDS USE_CONTEXT WRITE DISPATCH_QUERY DISPATCH_QUERY READ USE_CONTEXT DISPATCH_SUBSCRIPTION_QUERY DISPATCH_QUERY READ USE_CONTEXT DOWNLOAD_DIAGNOSE ADMIN DOWNLOAD_TEMPLATE ADMIN GET_APP_DETAILS ADMIN GET_COMMANDS_COUNT MONITOR USE_CONTEXT GET_COMMANDS_QUEUE MONITOR USE_CONTEXT GET_EVENT_PROCESSOR_STRATEGY ADMIN CONTEXT_ADMIN USE_CONTEXT GET_EVENT_PROCESSORS ADMIN CONTEXT_ADMIN USE_CONTEXT GET_EVENT_PROCESSORS_STRATEGIES ADMIN CONTEXT_ADMIN USE_CONTEXT GET_FIRST_TOKEN READ READ_EVENTS USE_CONTEXT GET_LAST_TOKEN READ READ_EVENTS USE_CONTEXT GET_PLUGIN_CONFIGURATION ADMIN GET_TOKEN_AT READ READ_EVENTS USE_CONTEXT HANDLE_COMMANDS SUBSCRIBE_COMMAND_HANDLER USE_CONTEXT WRITE HANDLE_QUERIES READ SUBSCRIBE_QUERY_HANDLER USE_CONTEXT INIT_CLUSTER ADMIN LIST_APPS ADMIN VIEW_CONFIGURATION LIST_BACKUP_FILENAMES ADMIN CONTEXT_ADMIN USE_CONTEXT LIST_BACKUP_LOGFILES ADMIN CONTEXT_ADMIN USE_CONTEXT LIST_COMMANDS ADMIN LIST_CONTEXTS ADMIN VIEW_CONFIGURATION LIST_EVENTS READ READ_EVENTS USE_CONTEXT LIST_NODES ADMIN VIEW_CONFIGURATION LIST_PLUGINS ADMIN VIEW_CONFIGURATION LIST_QUERIES ADMIN USE_CONTEXT LIST_REPLICATION_GROUPS ADMIN VIEW_CONFIGURATION LIST_SNAPSHOTS READ READ_EVENTS USE_CONTEXT LIST_TASKS ADMIN LIST_USERS ADMIN VIEW_CONFIGURATION LOCAL_GET_LAST_EVENT CONTEXT_ADMIN USE_CONTEXT LOCAL_GET_LAST_SNAPSHOT CONTEXT_ADMIN USE_CONTEXT MERGE_EVENT_PROCESSOR_SEGMENTS CONTEXT_ADMIN USE_CONTEXT MERGE_USER ADMIN MOVE_EVENT_PROCESSOR_SEGMENT CONTEXT_ADMINv USE_CONTEXT PAUSE_EVENT_PROCESSOR CONTEXT_ADMIN USE_CONTEXT RAFT_CLEAN_LOG ADMIN RAFT_GET_STATUS ADMIN RAFT_LIST_APPLICATIONS ADMIN RAFT_LIST_CONTEXT_MEMBERS ADMIN RAFT_LIST_CONTEXTS ADMIN RAFT_START_CONTEXT ADMIN RAFT_STEPDOWN ADMIN RAFT_STOP_CONTEXT ADMIN READ_HIGHEST_SEQNR READ_EVENTS USE_CONTEXT REBALANCE_PROCESSOR CONTEXT_ADMIN USE_CONTEXT RECONNECT_CLIENT CONTEXT_ADMIN USE_CONTEXT REMOVE_NODE_FROM_CLUSTER ADMIN RENEW_APP_TOKEN ADMIN RESCHEDULE_EVENT PUBLISH_EVENTS USE_CONTEXT WRITE SCHEDULE_EVENT PUBLISH_EVENTS USE_CONTEXT WRITE SEARCH_EVENTS READ READ_EVENTS USE_CONTEXT SET_EVENT_PROCESSOR_STRATEGY CONTEXT_ADMIN USE_CONTEXT SPLIT_EVENT_PROCESSOR_SEGMENTS CONTEXT_ADMIN USE_CONTEXT START_EVENT_PROCESSOR CONTEXT_ADMIN USE_CONTEXT UNREGISTER_PLUGIN ADMIN UPDATE_CONTEXT_PROPERTIES ADMIN UPLOAD_LICENSE ADMIN","title":"Operation to Role Mapping","component":"axon-server-reference","version":"v2024.1","name":"access-control-matrix","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-matrix/","titles":[]},"165":{"id":165,"text":"This extension will allow you to use OAuth2 integration for authentication in Axon Server. User accounts and roles from the OAuth provider are not synchronized to the Axon Server cluster, because no roles are associated with them. This means an account needs to be made in the cluster with the username from the provider, and roles assigned. To install the OAuth Extension, you need to unpack the distribution ZIP-file, so the JAR files are in the “exts” subdirectory of the working directory of Axon Server: $ mkdir exts $ unzip -j axon-server-extension-oauth-4.5-SNAPSHOT-bin.zip -d exts Archive: axon-server-extension-oauth-4.5-SNAPSHOT-bin.zip inflating: exts/axon-server-extension-oauth-4.5-SNAPSHOT.jar inflating: exts/commons-compress-1.9.jar inflating: exts/commons-lang3-3.8.1.jar inflating: exts/content-type-2.1.jar inflating: exts/javax.inject-1.jar inflating: exts/javax.persistence-api-2.2.jar inflating: exts/javax.transaction-api-1.3.jar inflating: exts/jcip-annotations-1.0-1.jar inflating: exts/lang-tag-1.4.4.jar inflating: exts/nimbus-jose-jwt-9.1.3.jar inflating: exts/oauth2-oidc-sdk-8.23.1.jar inflating: exts/spring-boot-starter-oauth2-client-2.1.6.RELEASE.jar inflating: exts/spring-security-oauth2-client-5.1.5.RELEASE.jar inflating: exts/spring-security-oauth2-core-5.1.5.RELEASE.jar inflating: exts/spring-security-oauth2-jose-5.1.5.RELEASE.jar inflating: exts/tomcat-embed-el-9.0.21.jar inflating: exts/validation-api-2.0.1.Final.jar $ Note that the actual version numbers may differ in your case. The options used are: axoniq.axonserver.accesscontrol.enabled This must be set to “true” to enable access control. axoniq.axonserver.enterprise.oauth2.enabled This must be set to “true” to enable the OAuth extension. axoniq.axonserver.enterprise.oauth2.mode Set this value to “google” for Google Apps authentication, or “oidc” to use the generic OpenID Connect integration. The OpenID Connect integration is known to work with KeyCloak server. For authentication using Google Apps accounts, you’ll can use the following properties: axoniq.axonserver.enterprise.oauth2.authorization-uri This optional value can be used to configure the URI that will trigger the authentication using OAuth2. The default value is “/oauth2/authorization” and should work fine. spring.security.oauth2.client.registration.google.client-id This should be set to the client-id provided by the Google Developer Console where you registered the cluster. spring.security.oauth2.client.registration.google.client-secret This should be set to the secret provided by the Google Developer Console where you registered the cluster. spring.security.oauth2.client.registration.google.scope This setting is used to configure what information Google should share with the Axon Server cluster. A good value to use is “email”, which will allow you to use the email address as username, as is common with Google accounts. axoniq.axonserver.enterprise.oauth2.username-map.google This setting tells the extension what value to use as username and requires that this value is provided by Google using the “scope” setting described above. If the email address is to be used, as suggested above, the value should be “email”. axoniq.axonserver.enterprise.oauth2.request-params This setting defines a map of parameters to add to the redirect URL, to customize the behavior of the provider’s integration. For Google, if the users use the same browser with multiple Google accounts, a good setting to add is “prompt”, with value “select_account”: `properties axoniq.axonserver.enterprise.oauth2.request-params.prompt=select_account ` This will force Google to always ask which account must be used to continue, even if there is only a single account in use, and that account is currently active. For authentication using KeyCloak, you need to configure a realm and, in it, configure Axon Server as a client. You can use the following properties: axoniq.axonserver.enterprise.oauth2.forceOidcLogout Setting this property to “true” will ensure that, when the user logs out from the Axon Server UI, a logout request will also be sent to KeyCloak. If set to “false” (the default), the user will still have a valid session in KeyCloak, and a subsequent login attempt using the same browser window may immediately succeed, without a prompt for a password. Naturally this is dependent on session validity settings within KeyCloak. spring.security.oauth2.client.registration.oidcclient.client-id This should be set to the client ID configured for Axon Server. spring.security.oauth2.client.registration.oidcclient.client-secret This should be set to the client secret configured for Axon Server. spring.security.oauth2.client.registration.oidcclient.client-name This should be set to the client name configured for Axon Server. spring.security.oauth2.client.registration.oidcclient.provider This should be set to the value “keycloak”. * spring.security.oauth2.client.registration.oidcclient.scope This should be set to a (comma separated) list of the information that needs to be shared, typically “openid,email,profile”. spring.security.oauth2.client.provider.keycloak.issuer-uri This should be set to the realm’s URL on KeyCloak. For example, if the realm is named “test-realm” and KeyCloak is exposed at “http://keycloak-test:8090”;, then the value is “http://keycloak-test:8090/realms/test-realm”;. axoniq.axonserver.enterprise.oauth2.username-map.oidcclient This setting tells the extension what value to use as username. The suggested value is “username”, which refers to that value from the “profile” scope. Alternatively, just as with the Google Apps integration mentioned above, you can use “email”. If a username is unknown in the Axon Server cluster, even when authentication succeeds, the user will not be allowed to log in. To allow this, a user with “ADMIN” level access needs to create a user, optionally without a password, and assign the roles for this user. The Axon Server CLI has a special options (“--no-password”) to allow the creation of accounts without a password. Note that if you create an account with a password, this will allow the user to choose to use that as well as the OAuth integration.","title":"Axon Server EE - OAuth Extension","component":"axon-server-reference","version":"v2024.1","name":"access-control-oauth2","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-oauth2/","titles":[{"text":"Installing the OAuth Extension","hash":"_installing_the_oauth_extension","id":1},{"text":"Configuring the OAuth Extension","hash":"_configuring_the_oauth_extension","id":2},{"text":"Configuration Google Apps Authentication","hash":"_configuration_google_apps_authentication","id":3},{"text":"Configuring OpenID Connect authentication with KeyCloak","hash":"_configuring_openid_connect_authentication_with_keycloak","id":4},{"text":"Configuring the User’s Access and Roles","hash":"_configuring_the_users_access_and_roles","id":5}]},"166":{"id":166,"text":"This section is specific for Axon Server Standard Edition (versions before 2023.1). From versions 2023.1 onwards, refer to this page. When you set the “axoniq.axonserver.accesscontrol.enabled” property to “true”, Axon Server requires a token or user account for access to its APIs. In Axon Server SE, there are two tokens that administrators can define: Property Purpose axoniq.axonserver.accesscontrol.token Define a token with normal (limited) rights. axoniq.axonserver.accesscontrol.admin-token Define a token with administrative rights. Generally, you use the admin-token only for the CLI, to issue commands for managing user accounts and plugins. Axon Framework based applications should only need the non-admin token. If you wish to use tools to access the REST API directly, you must add an HTTP header named “AxonIQ-Access-Token”, as in the following example: $ curl -H 'AxonIQ-Access-Token: my-token' -s http://localhost:8024/v1/public/users | jq [ { \"userName\": \"admin\", \"password\": null, \"roles\": [ \"ADMIN@*\" ] } ] When you create a user account, you can optionally assign the role “ADMIN”, which is a shorthand for “ADMIN@*” and allow the user to access the user-administration and plugin pages in the UI. These user accounts are generally only used for the UI, although they are also valid for access to the REST API, using Basic Authentication.","title":"Access control for Axon Server SE","component":"axon-server-reference","version":"v2024.1","name":"access-control-se","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-se/","titles":[{"text":"Tokens in Axon Server SE","hash":"_tokens_in_axon_server_se","id":1},{"text":"User accounts in Axon Server SE","hash":"_user_accounts_in_axon_server_se","id":2}]},"167":{"id":167,"text":"As Axon Server is an event store and may contain sensitive data, it is always a good practice to enable access control in production and production-like environments. Enabling access control will require applications to provide a token when accessing Axon Server services (both through gRPC and HTTP), and require users to login to the dashboard.‌ In this section we will describe how to configure access control on both the Axon Server side and the Axon Framework side. To enable access control in Axon Server (SE/EE) add the following property to axonserver.properties: axoniq.axonserver.accesscontrol.enabled=true Because Axon Server SE deals with this differently than Axon Server EE, they will separately address: Axon Server SE Axon Server EE Axon Framework apps Axon Server CLI Direct access to the REST and gRPC APIs For Axon Server EE, we have additional sections on the external authentication extensions: LDAP Extension OAuth2 Extension If you haven’t used the cluster template to create an initial user, you can use the CLI to create it. For this you will need an admin-level access token, as described here. To do this, execute the “register-user” command: $ java -jar axonserver-cli.jar register-user usage: register-user -i,--insecure-ssl Do not check the certificate when connecting using HTTPS. --no-password [Optional] Create a (locked) user account without a password. -o,--output Output format (txt,json) -p,--password [Optional] Password for the user -r,--roles [Optional] roles for the user -S,--server Server to send command to (default http://localhost:8024) -s,--https Use HTTPS to connect to the server, rather than HTTP. -t,--access-token [Optional] Access token to authenticate at server -u,--username Username -u or --username specifies the username. -r or --roles specifies the role of the user. Specify multiple roles by giving a comma separated list (without spaces), for example “READ,ADMIN”. -p or --password specifies the password of the user. If you do not specify a password with the “-p” option, the command line interface will prompt you for one. If you instead want a use account without a password‌, for example when using Google OAuth2 authentication, use “--no-password”. --no-password will cause the CLI to create a user acount with no password set, which means you cannot login unless you use an external authentication provider. -t or --access-token specifies the access token to authenticate at the server to which the command is sent to. This should be the security token discussed above. -S or --server can be used to specify the URL to the server that the command needs to be sent to. If this is not supplied it connects to “http://localhost:8024”; by default. -s or --https will cause the CLI to use TLS, in effect changing the URL to “https://localhost:8024”;. Note that if you also want to change the port, you’ll have to use “-S”, in which case you can leave out “-s”. -i or --insecure-ssl will tell the CLI that Axon Server is using a certificate which is not signed by a known CA, for example when using self-signed certificates. Users can also be added using the REST API / UI Console that Axon Server SE provides. The CLI also allows the capabilities to list all users as well as delete specific users.","title":"Access Control","component":"axon-server-reference","version":"v2024.1","name":"access-control","url":"/axon-server-reference/v2024.1/axon-server/security/access-control/","titles":[{"text":"Using the CLI to create a user","hash":"_using_the_cli_to_create_a_user","id":1},{"text":"Mandatory parameters","hash":"_mandatory_parameters","id":2},{"text":"Optional parameters","hash":"_optional_parameters","id":3}]},"168":{"id":168,"text":"Axon provides various features such as authentication, access control, encryption, and SSL to secure your Axon Server deployments. A summary of the various sub-sections is given below. Sub-Section Purpose SSL Encryption of network traffic to and between Axon Server Nodes Access Control Enforces Authentication and Role Based access control for Axon Server Access Control - Enterprise Edition Access Control settings for Axon Server Access Control - Client Applications Access Control settings for Axon Server client applications Access Control - CLI Access Control as required by the Axon Server CLI Access Control - API Axon Server’s Access Control gRPC API Access Control - LDAP Extension LDAP Extension for Axon Server Enterprise Edition Access Control - OAuth 2.0 Extension OAuth 2.0 Extension for Axon Server Enterprise Edition","title":"Security","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/security/","titles":[]},"169":{"id":169,"text":"Axon Server supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of Axon Server’s network traffic - From Axon Framework client applications to Axon Server (SE/EE) as well as between Axon Server nodes within a cluster (EE only). Axon Server (SE/EE) has two ports (HTTP/gRPC) that need to be enabled for SSL and hence there are two different groups of settings to use, one for each port. The HTTP port uses the generic Spring Boot configuration settings, and requires a Java compatible keystore. For the gRPC port we use standard PEM files. The following properties need to be setup in axonserver.properties for both SE and EE: Port Type Property Name Description SSL (Axon Server - HTTP Port) security.require-ssl Determines whether the server has SSL enabled on the HTTP port. server.ssl.key-store-type Keystore type. (should be PKCS12) server.ssl.key-store Location of the keystore. server.ssl.key-store-password Password to access the keystore. server.ssl.key-alias Alias to be used to access the keystore. SSL (Axon Server - gRPC Port) axoniq.axonserver.ssl.enabled Determines whether the server has SSL enabled on the gRPC port. axoniq.axonserver.ssl.cert-chain-file Location of the public certificate file. axoniq.axonserver.ssl.private-key-file Location of the private key file. axoniq.axonserver.ssl.internal-cert-chain-file axoniq.axonserver.ssl.internal-trust-manager-file axoniq.axonserver.ssl.internal-private-key-file With Axon Server EE SSL is also used for the communication between the Axon Server nodes. If the internal host names of the Axon Server nodes differ from the host names as they’re used by clients, it is required to use another certificate (bound to the internal hostname). If this is the case, you can specify the certificate used for cluster-internal traffic using the “…ssl.internal-cert-chain-file” property. The certificate used by internal traffic may be generated using its own private key. If this is the case, you must specify the location of this key file in the property \"…ssl.internal-private-key-file\". If the certificates used for internal traffic are self-signed certificates, you must ensure that these are trusted by the other nodes. In this case you add the certificates (or the root certificate) in the (PEM) keystore specified by the “…ssl.internal-trust-manager-file” property. As of Axon Server version 2023.2.0, you can update the certificates without restarting Axon Server. When a certificate is about to expire you can replace it with a new certificate, using the same file name. To load the new certificate for the gRPC communication you must ensure that the modified timestamp for both the key file and the certificate file are updated. The optional trust manager file used for the internal communication in an Axon Server cluster is also monitored. If this file is updated, Axon Server will use the new version. When you update the certificate in the keystore used for the Tomcat HTTP server, it is also reloaded automatically. Axon Server checks the TLS artifacts for updates once a minute. The following properties are available for Axon client applications to use TLS/SSL for the traffic to Axon Server: Property Name Description axon.axonserver.ssl-enabled Is SSL enabled for the traffic with Axon Server axon.axonserver.cert-file (PEM) keystore containing trusted certificates, in case that the certificate that’s used by Axon Server is not issued by a trusted certificate authority. A thing to remember is that enabling SSL on an Axon Server cluster will require downtime, as the “…ssl.enabled” setting controls both server and client side code. This is intentional, as it’s unreasonable to expect all nodes to have individual settings per node showing which ones communicate using SSL and which don’t, so it is recommended to get this done in the beginning during the installation phase of Axon Server.","title":"SSL","component":"axon-server-reference","version":"v2024.1","name":"ssl","url":"/axon-server-reference/v2024.1/axon-server/security/ssl/","titles":[{"text":"Client configuration","hash":"_client_configuration","id":1},{"text":"Downtime considerations","hash":"_downtime_considerations","id":2}]},"170":{"id":170,"text":"Cluster Templates enable administrators to maintain AxonServer cluster configuration as code. The cluster template is a YAML file, describing a cluster’s configuration. It’s possible to predefine replication groups, contexts, metadata, applications (with tokens), users, and their roles, so that teams can share the configuration. The cluster template runs exactly once, on the first clean Axon Server start-up, if there is no previous cluster configuration defined. Therefore, the cluster template doesn’t override any existing configuration. Its purpose is to use them during active development, to be able to share the configuration across development teams. To use the cluster template feature, all you need to do is define a valid cluster template YAML file. If this file is present on a fresh Axon Server startup, it automatically picks it up and configures the cluster accordingly. Each cluster node needs to have the cluster template YAML file copy. Each node reads this file, finds its own configuration and configures itself. Default path from which Axon Server reads configuration is ./cluster-template.yml You can override this path anytime by setting Axon Server property: axoniq.axonserver.clustertemplate.path:/mypath/cluster-template.yml Below you can find an example of a basic cluster setup: the _admin and default contexts are in separate replication groups, replicated across all nodes. axoniq: axonserver: cluster-template: first: axonserver-enterprise-1 replicationGroups: - name: _admin roles: - node: axonserver-enterprise-1 role: PRIMARY - node: axonserver-enterprise-2 role: PRIMARY - node: axonserver-enterprise-3 role: PRIMARY contexts: - name: _admin - name: default roles: - node: axonserver-enterprise-2 role: PRIMARY - node: axonserver-enterprise-3 role: PRIMARY - node: axonserver-enterprise-1 role: PRIMARY contexts: - name: default applications: [] users: [] Cluster overview after applying default configuration In order to avoid mistakes while writing a cluster configuration file, Axon Server provides an export button that generates a cluster template file based on current setup. Location of export button at Settings page Recommended mechanism - Creating an advanced cluster setup Start a fresh Axon Server setup (use basic cluster template setup mentioned above). Configure a cluster via the UI, by creating users, applications, replication groups and contexts. Use the export button located at \"Settings -> Configuration\" panel to download the current cluster configuration. Replace the basic cluster template with the newly exported cluster template configuration. Use export button from main - leader node. Leader node always contains complete cluster configuration, while it might happen that followers don’t.","title":"Cluster Templates","component":"axon-server-reference","version":"v2024.1","name":"cluster-template","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/cluster-template/","titles":[{"text":"Usage","hash":"_usage","id":1},{"text":"Configuration","hash":"_configuration","id":2},{"text":"Export","hash":"_export","id":3}]},"171":{"id":171,"text":"The Axon Server provides a command line utility which allows for updating the Axon Server configuration through scripts or from the command line interface.‌ The utility is available as a jar file (axonserver-cli.jar) which is available as part of the Axon Server distributable (SE/EE). The following table shows a quick summary of the various commands. Each command has a specific Format to it and may require access control on it for security purposes. Command name Description users Lists all users register-user Registers a user within an Axon Server delete-user Deletes a user within Axon Server metrics Lists all metrics for an Axon Server applications Lists all applications within an Axon Server register-application Registers an application with Axon Server delete-application Deletes a registered application cluster Lists all the details of a cluster within an Axon Server EE deployment init-cluster Initiates a cluster within an Axon Server EE deployment register-node Registers a node as a member within a cluster unregister-node Unregisters a member node within a cluster. You should only use this command if you want to permanently remove the node from the cluster. Use with caution. update-license Uploads a new license file to the cluster replication-groups Lists all details of registered replication groups within an Axon Server EE deployment add-node-to-replication-group Adds a node as a member of a replication group register-replication-group Creates a new replication group delete-node-from-replication-group Unregisters a member node of a replication group delete-replication-group Deletes a replication group contexts Lists all details of registered contexts within an Axon Server EE deployment register-context Creates a new context delete-context Deletes a context plugins Lists all details of installed plugins upload-plugin Upload a plugin package configure-plugin Configures a plugin for a context active-plugin Activates a plugin for a context pause-plugin Temporarily stops a plugin for a context unregister-plugin Unregisters a plugin for a context delete-plugin Deletes a plugin package purge-events Purges events from an Event Store The general format of any command line command is: java -jar axonserver-cli.jar -S -t Or when running from a bash-like shell: axonserver-cli.jar -S -t The option -S with the URL to the Axon Server is optional, it defaults to http://localhost:8024.The URL must point to any node serving the _admin context within an Axon Server cluster. The valid for all commands, are: -S, -s, -i, -o. Their effect is described in the table below. Option - Short Option - Long Description -S server Server to send command to (default http://localhost:8024) -s https Use HTTPS (SSL,TLS) to connect to the server, rather than HTTP. -i insecure-ssl Don’t check the certificate when connecting using HTTPS. -o output Output format (txt,json) For options specific to individual commands, see the descriptions of the commands below. When running Axon Server with access control enabled, executing commands remotely requires an access token. You need to provide this token with the -t option. When you run a command on the Axon Server node itself from the directory where you started Axon Server, you don’t have to provide a token.‌ To send command line requests from another node or from another directory, you need to register an application with ADMIN role. When you register an application, Axon Server generates a token, if you did not specify one. You need to supply this token using the *-t* option in any of the commands. This section describes all commands supported by the command line interface, grouped by the specific area.‌ For all command line commands there are 2 common (optional) parameters: *-S* refers to the server to send the command to and if not supplied connects by default to http://localhost:8024. The URL must point to any node serving the _admin context within an Axon Server cluster. *-t* refers to the access token to authenticate at the server. When using Axon Server with access control enabled, you need to define user to access the Axon Server Console’s Dashboard. Users with only READ role can view the information in the console dashboard but not make any changes, users with ADMIN role can make changes.‌ users Returns a list of all registered users and their roles. $ java -jar axonserver-cli.jar users [-o json] Optional parameters *-o* produces output in JSON format instead of formatted text register-user Registers a user with specified roles. For Axon Server SE, the only two roles possible are READ/ADMIN while for Axon Server EE, the following roles can be granted ADMIN CONTEXT_ADMIN DISPATCH_COMMANDS DISPATCH_QUERY MONITOR PUBLISH_EVENTS READ_EVENTS SUBSCRIBE_COMMAND_HANDLER SUBSCRIBE_QUERY_HANDLER USE_CONTEXT VIEW_CONFIGURATION In addition to the role name you can also supply the context to which this role applies like {role_name}@{context_name}. For Axon Server SE, the only context available is the default context so the role will only apply to that context (hence not necessary to supply the context name). For Axon Server EE, the specific context can be included as required. Also if no context is mentioned in Axon Server EE, the role is granted to the user for all registered contexts. $ java -jar axonserver-cli.jar register-user -u -r [-p ] Mandatory parameters *-u* refers to the username. *-r* refers to the role of the user. Specify multiple roles by giving a comma separated list (without spaces), for example READ,ADMIN. *-p* refers to the password of the user. If you do not specify a password with the -p option, the command line interface will prompt you for one.‌ Optional parameters delete-user Deletes the specified user. $ java -jar axonserver-cli.jar delete-user -u Mandatory parameters *-u* refers to the username of the user that needs to be deleted. Optional parameters Overview of all Axon specific metrics.‌ $ java -jar axonserver-cli.jar metrics Optional parameters applications Lists all applications and the roles per application per context.‌ $ java -jar axonserver-cli.jar applications [-o json] Optional parameters *-o* produces output in JSON format instead of formatted text register-application Registers an application with specified name and role. The following roles can be granted: ADMIN CONTEXT_ADMIN DISPATCH_COMMANDS DISPATCH_QUERY MONITOR PUBLISH_EVENTS READ_EVENTS SUBSCRIBE_COMMAND_HANDLER SUBSCRIBE_QUERY_HANDLER USE_CONTEXT VIEW_CONFIGURATION In addition to the role name you can also supply the context to which this role applies like {role_name}@{context_name}. Also if no context is mentioned in Axon Server EE, the role is granted to the application for all registered contexts. This command returns the generated token to use. Note that this token is only generated once, if you lose it you must delete the application and register it again to get a new token. If you want to define the token yourself, you can provide one in the command line command using the -T flag, for example: $ java -jar axonserver-cli.jar register-application -a -r [-d ] [-T ] Mandatory parameters *-a* refers to the name of the application *-r* refers to the role of the application. Specify multiple roles by giving a comma separated list (without spaces), for example READ,ADMIN. Optional parameters *-d* refers to the description of the application. *-T* in case you want to define the token yourself for newly registered application. delete-application Deletes the application from Axon Server EE $ java -jar axonserver-cli.jar delete-application -a Mandatory parameters *-a* refers to the name of the application Optional parameters cluster Shows all the nodes in the cluster, including their hostnames, HTTP ports and gRPC ports.‌ $ java -jar axonserver-cli.jar cluster [-o json] Optional parameters *-o* produces output in JSON format instead of formatted text init-cluster Initializes the cluster, creates the _admin context and the specified context. $ java -jar axonserver-cli.jar init-cluster [-c ] Optional parameters *-c* refers to the context that needs to be created along with the _admin context. If the caller does not specify a context Axon Server creates a context called default. register-node Registers an Axon Server node with a cluster. $ java -jar axonserver-cli.jar register-node -h [-p ] [-c ] [--no-contexts] If you specify a context, the new node will be a member of the specified context. If you haven’t specified a context, the new node will become a member of all defined contexts.‌ Mandatory parameters *-h* refers to the internal host name of the node that needs to be added to the cluster. Optional parameters *-p* refers to the internal gRPC port of the node that needs to be added to the cluster. By default, it’s 8224. *-c* refers to the context which this axon server node will be a member of. If no context is specified, the new node will become a member of all defined contexts. *–no-contexts* will add the node to the cluster but will not register it to any of the defined contexts. unregister-node Removes the node with specified name from the cluster. After this, the deleted node still runs in standalone mode.‌ $ java -jar axonserver-cli.jar unregister-node -n Mandatory parameters *-n* refers to the name of the node that needs to be removed from the cluster. Optional parameters update-license Uploads a new license file to the cluster. Axon Server distributes the new license file to all nodes in the cluster. $ java -jar axonserver-cli.jar update-license -f Mandatory parameters *-f* refers to the file containing the license to update. Optional parameters replication-groups Lists all replication groups and the nodes assigned to the replication groups. For each replication groups it shows the name of the replication group, the master node for the replication group and the member nodes of the replication group.‌ $ java -jar axonserver-cli.jar replication-groups [-o json] Optional parameters *-o* produces output in JSON format instead of formatted text register-replication-group The register-replication-group command helps in the registration and creation of a new replication group. A sample of the command with the mandatory parameters is depicted below: $ java -jar ./axonserver-cli.jar register-replication-group -g -n [-a ] [-m ] [-p ] [-s ] Mandatory parameters *-g* refers to the replication group name. The replication group name must match the following regular expression \"[a-zA-Z][a-zA-Z_-0-9]*\", so it should start with a letter (uppercase or lowercase), followed by a combination of letters, digits, hyphens and underscores. *-n* refers to the comma separated list of node names that should be members of the new replication group. This parameter registers them as \"PRIMARY\" member nodes of that context. Optional parameters *-a* refers to the comma separated list of node names that should be \"ACTIVE_BACKUP\" member nodes of that replication group. *-m* refers to the comma separated list of node names that should be \"MESSAGING_ONLY\" member nodes of that replication group. *-p* refers to the comma separated list of node names that should be \"PASSIVE_BACKUP\" member nodes of that replication group. *-p* refers to the comma separated list of node names that should be \"SECONDARY\" member nodes of that replication group. delete-replication-group The delete-replication-group command helps in the deletion of a replication group and its associated data from all member nodes of that replication group. A sample of the command with the mandatory parameters is depicted below: $ java -jar ./axonserver-cli.jar delete-replication-group -g [replication-group-name] [--preserve-event-store] Mandatory parameters *-g* refers to the replication group that needs to be deleted. Optional parameters –preserve-event-store option to keep all the event store data for all the nodes in the replication group (false by default) add-node-to-replication-group The add-node-to-replication-group command helps in the registration of a new member node creation of an existing replication group. $ java -jar ./axonserver-cli.jar add-node-to-replication-group -g -n -r Mandatory parameters *-g* refers to an existing replication group. *-n* refers to the node name that should be a member of this replication group. *-r* refers to the role of this node within the replication group (PRIMARY/MESSAGING_ONLY/ACTIVE_BACKUP/PASSIVE_BACKUP/SECONDARY). Optional parameters delete-node-from-replication-group The delete-node-from-replication-group command helps in the deletion member node from an existing replication group. A sample of the command with the mandatory parameters is depicted below: $ java -jar ./axonserver-cli.jar delete-node-from-replication-group -g -n [--preserve-event-store] Mandatory parameters *-g* refers to an existing replication group. *-n* refers to the node name that should no longer be a member of this context. Optional parameters *–preserve-event-store* removes the node from the replication group but leaves the event store files on that node. contexts Lists all contexts and the nodes assigned to the contexts. For each context it shows the name of the context, the master node for the context and the member nodes of the context.‌ $ java -jar axonserver-cli.jar contexts [-o json] Optional parameters *-o* produces output in JSON format instead of formatted text register-context The register-context command helps in the registration and creation of a new context. A sample of the command with the mandatory parameters is depicted below: $ java -jar ./axonserver-cli.jar register-context -c -g [-n ]‌ [-a ] [-m ] [-p ] If you don’t provide an existing replication group name, you need to provide the names and roles of the nodes to include in the replication group to create. If you don’t provide a replication group name, but do provide nodes, it will create a replication group with the same name as the context. Mandatory parameters *-c* refers to the context name. The context name must match the following regular expression \"[a-zA-Z][a-zA-Z_-0-9]*\", so it should start with a letter (uppercase or lowercase), followed by a combination of letters, digits, hyphens and underscores. Optional parameters *-g* refers to the name of the replication group *-n* refers to the comma separated list of node names that should be members of the new context. This parameter registers them as \"PRIMARY\" member nodes of that context. *-a* refers to the comma separated list of node names that should be \"ACTIVE_BACKUP\" member nodes of that context. *-m* refers to the comma separated list of node names that should be \"MESSAGING_ONLY\" member nodes of that context. *-p* refers to the comma separated list of node names that should be \"PASSIVE_BACKUP\" member nodes of that context. *-s* refers to the comma separated list of node names that should be \"SECONDARY\" member nodes of that context. delete-context The delete-context command helps in the deletion of a context and its associated data from all member nodes of that context. A sample of the command with the mandatory parameters is depicted below: $ java -jar ./axonserver-cli.jar delete-context -c -S http://: Mandatory parameters *-c* refers to the context that needs to be deleted. Optional parameters –preserve-event-store option to keep the event store data (false by default). plugins Lists all the installed plugins and their status per context. $ java -jar ./axonserver-cli.jar plugins [-o json] Optional parameters *-o* produces output in JSON format instead of formatted text upload-plugin Uploads a new plugin package to Axon Server. In Enterprise Edition this command needs to be targetted to an _admin node. $ java -jar ./axonserver-cli.jar upload-plugin -f Mandatory parameters *-f* refers to the jar file containing the OSGi bundle for the plugin Optional parameters configure-plugin Configures a plugin for a specific context. $ java -jar ./axonserver-cli.jar configure-plugin -p -v -c [ --prop | -f -v -c Mandatory parameters *-p* refers to the name of the plugin *-v* refers to the version of the plugin *-c* refers to the context for which to activate the plugin Optional parameters pause-plugin Pauses an plugin for a specific context. $ java -jar ./axonserver-cli.jar pause-plugin -p -v -c Mandatory parameters *-p* refers to the name of the plugin *-v* refers to the version of the plugin *-c* refers to the context for which to pause the plugin Optional parameters unregister-plugin Removes a plugin for a specific context. $ java -jar ./axonserver-cli.jar unregister-plugin -p -v -c Mandatory parameters *-p* refers to the name of the plugin *-v* refers to the version of the plugin *-c* refers to the context for which to unregister the plugin Optional parameters *delete-plugin* Removes an plugin from all Axon Server nodes and for all contexts. $ java -jar ./axonserver-cli.jar delete-plugin -p -v Mandatory parameters *-p* refers to the name of the v *-v* refers to the version of the plugin Optional parameters","title":"Command Line Interface","component":"axon-server-reference","version":"v2024.1","name":"command-line-interface","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/command-line-interface/","titles":[{"text":"Quick summary","hash":"_quick_summary","id":1},{"text":"Format","hash":"format","id":2},{"text":"Access control","hash":"_access_control","id":3},{"text":"Commands","hash":"_commands","id":4},{"text":"Users","hash":"users","id":5},{"text":"Metrics","hash":"metrics","id":6},{"text":"Applications","hash":"application-enterprise-edition-only","id":7},{"text":"Cluster","hash":"cluster-enterprise-edition-only","id":8},{"text":"Replication groups","hash":"replication-groups-enterprise-edition-only","id":9},{"text":"Contexts","hash":"context-enterprise-edition-only","id":10},{"text":"Plugins","hash":"plugins","id":11}]},"172":{"id":172,"text":"The system configuration can be maintained/supplied in three ways. Configuration File Command Line Environment Variables The most commonly and preferred way is to have an axonserver.properties or axonserver.yml file which contains the desired configuration parameters. The location of the file should be the current working directory or alternatively can be placed within a \"config\" subdirectory (relative to the current working directory). An important note - In case both files are detected by Axon Server, it will read from both. In case the server is being started using “java –jar …”, you can also supply individual configuration properties with “-Dproperty=value” Configuration values can also be supplied using environment variables. The parameter name should be all in upper case with any kebab-case(-) / camelCase and snake_case() substituted with _\"\"_ There are some recommendations around Axon Server EE/SE configuration, Use “./axonserver.properties” for common settings. Use “./config/axonserver.properties” for environment/node-specific overrides. Use “-D” or environment variables for one-time settings. A list of all the configuration properties by area is denoted below. Unless explicitly specified all property names are to be prefixed with \"axoniq.axonserver\" Area Property Name Description Default Value Node setup name Unique node name of the Axon Server node. Hostname of the server hostname Hostname of the Axon Server node as communicated to clients. Hostname of the server internal-hostname Hostname as communicated to other nodes of the cluster. Hostname of the server domain Domain of this node as communicated to clients. Optional, if set will be appended to the hostname in communication with clients. None internal-domain Domain as communicated to other nodes of the cluster. \"domain\" value port gRPC port for the Axon Server node. 8124 server.port (no prefix) HTTP port for the Axon Server console. 8024 internal-port 8224 tags Key/value pairs of tags for tag based connections for clients. None devmode.enabled (Axon SE only) false set-web-socket-allowed-origins Set WebSocket CORS Allowed Origins. false web-socket-allowed-origins List of WebSocket CORS Allowed Origins. File Locations event.storage Path where (regular) events are stored as segmented files on disk. ./data directory snapshot.storage Path where Snapshot Events are stored as segmented files on disk. ./data directory controldb-path Path where Axon Server’s control database (axonserver-controldb) is created. ./data directory controldb-backup-location Location where the control DB backups are created. . pid-file-location Location where AxonServer creates its pid file. . replication.log-storage-folder Directory where the transaction logs for replication are stored. ./log directory accesscontrol.token-dir Directory where token is stored on startup. ./security directory enterprise.license-directory Directory where the license file can be found. . File Names event.bloom-index-suffix File suffix for bloom files .bloom event.events-suffix File suffix for events files. .events event.index-suffix File suffix for index files .index event.new-index-suffix File suffix for new index files .nindex event.global-index-suffix File suffix for global index files .xref snapshot.bloom-index-suffix File suffix for snapshot bloom files .sbloom snapshot.events-suffix File suffix for snapshot files .snapshots snapshot.index-suffix File suffix for index files for snapshots .sindex replication.index-suffix File suffix for index files for transaction logs .index replication.log-suffix File suffix for transaction log files .log Event Store event.bloom-index-fpp False-positive percentage allowed for bloom index. Decreasing the value increases the size of the bloom indexes. 0.03 event.force-interval Interval to force syncing files to disk (ms). 1000 event.primary-cleanup-delay Delay to clear ByteBuffers from off-heap memory for writable segments. 15 event.secondary-cleanup-delay Delay to clear ByteBuffers from off-heap memory for read-only segments. 15 event.segment-size Size for new storage segments. 256Mb event.sync-interval Interval (ms) to check if there are files that are complete and can be closed. 1000 event.validation-segments Number of segments to validate to on startup after unclean shutdown. 10 event.memory-mapped-segments Number of recent segments that Axon Server keeps memory mapped. 5 event.events-per-segment-prefetch Number of events to prefetch from disk when streaming events to the client. 50 snapshot.bloom-index-fpp False-positive percentage allowed for bloom index for snapshots. Decreasing the value increases the size of the bloom indexes. 0.03 snapshot.force-interval Interval to force syncing files to disk (ms). 1000 snapshot.primary-cleanup-delay Delay to clear ByteBuffers from off-heap memory for writable segments. 15 snapshot.secondary-cleanup-delay Delay to clear ByteBuffers from off-heap memory for read-only segments. 15 snapshot.segment-size Size for new storage segments. 256Mb snapshot.sync-interval Interval (ms) to check if there are files that are complete and can be closed. 1000 snapshot.validation-segments Number of snapshot segments to validate to on startup after unclean shutdown. 10 snapshot.memory-mapped-segments Number of recent segments that Axon Server keeps memory mapped. 5 query.limit 200 new-permits-timeout Timeout for event trackers while waiting for new permits. 120000 blacklisted-send-after Force sending an event on an event tracker after this number of blacklisted events. Ensures that the token in the client application is updated. 1000 max-events-per-transaction Maximum number of events that can be sent in a single transaction. 32767 enterprise.default-index-type (Since 4.4.7, EE only) Sets the default index type to be used for new contexts. Values are JUMP_SKIP_INDEX and BLOOM_FILTER_INDEX. JUMP_SKIP_INDEX read-sequence-validation-strategy (Since 4.4.14) Sets how to handle validation errors while reading aggregates from the event store. Values are LOG and FAIL. LOG event.use-mmap-index By default, AxonServer will determine whether to use memory mapped indexes for event files in the event store based on operating system and java version, in rare cases it may be useful to override the default event.force-clean-mmap-index Option to forcefully close unused memory mapped files instead of leaving the garbage collector do this, by default, AxonServer will determine this based on operating system and java version, in rare cases it may be useful to override the default event.aggregate.prefetch Ensures that backpressure signals from clients are split into batches. The initial request amount is {prefetch}*5, and subsequent (or replenishing) request amount is {prefetch} 5 event.aggregate.retry.attempts Number of retries for reading event aggregate stream. 3 event.aggregate.retry.delay Delay (ms) between retries for reading event aggregate stream. 100 event.leader.retry.attempts Number of retries for finding an event store. 3 event.leader.retry.delay Delay (ms) between retries for finding an event store. 100 event-processor-permits-check Delay (ms) between checking if tracking event processors are waiting for new permits for a long time. 2000 check-sequence-nr-for-snapshots Whether to check for invalid sequence numbers on appending a snapshot. true Logging logging.level.package_name (no prefix) Change the logging level for specific packages or classes. (for example logging.level.io.axoniq.axonserver = INFO) WARN level for all packages logging.file.name (no prefix) File name where log entries should be written to. Names can be an exact location or relative to the current directory. (for example logging.file.name = messaging.log) stdout logging.path (no prefix) Location where log files should be created. Names can be an exact location or relative to the current directory. (for example logging.path = /var/log) Cluster setup autocluster.first For auto cluster option, set to the internal host name for the first node in the cluster. None autocluster.contexts For auto cluster option, defines the list of contexts to connect to or create. None SSL (Axon Server - HTTP Port) security.require-ssl (No prefix) Determines whether the server has ssl enabled on the HTTP port. false server.ssl.key-store-type (No prefix) Keystore type. (should be PKCS12) None server.ssl.key-store (No prefix) Location of the keystore. None server.ssl.key-store-password (No prefix) Password to access the keystore. None server.ssl.key-alias (No prefix) Alias to be used to access the keystore. None SSL (Axon Server - gRPC Port) ssl.enabled Determines whether the server has ssl enabled on the gRPC port. false ssl.cert-chain-file Location of the public certificate file. None ssl.private-key-file Location of the private key file. None ssl.internal-cert-chain-file None ssl.internal-trust-manager-file None ssl.internal-private-key-file None Access Control accesscontrol.enabled Indicates that access control is enabled for the server. false accesscontrol.cache-ttl Timeout for authenticated tokens. 300000 accesscontrol.internal-token accesscontrol.token accesscontrol.admin-token accesscontrol.systemtokenfile File containing a predefined system token. Messaging (Between Clients and Axon Server) max-message-size Maximum size of a message to be sent to the node. 4 MB initial-nr-of-permits Number of messages that the server can initially send to a client. 1000 nr-of-new-permits Additional number of messages that the server can send to a client. 500 new-permits-threshold When a client reaches this threshold in remaining messages, it sends a request with additional number of messages to receive. 500 force-connection-to-primary-or-messaging-node Whether to force applications to connect to Primary nodes or Messaging Only nodes. When false, all nodes for a context are eligible to accept client connections. false instruction.result.timeout Timeout in seconds for instruction results received via client server communication 10 Messaging (Between nodes of an Axon Server Cluster) command-flow-control.initial-nr-of-permits Number of command messages that the master can initially send to a replica. 10000 command-flow-control.nr-of-new-permits Additional number of command messages that the master can send to replica. 5000 command-flow-control.new-permits-threshold When a replica reaches this threshold in remaining command messages, it sends a request with this additional number of command messages to receive. 5000 query-flow-control.initial-nr-of-permits Number of query messages that the master can initially send to a replica. 10000 query-flow-control.nr-of-new-permits Additional number of query messages that the master can send to replica. 5000 query-flow-control.new-permits-threshold When a replica reaches this threshold in remaining query messages, it sends a request with this additional number of query messages to receive. 5000 Replication replication.flow-buffer Number of unconfirmed append entry messages that may be sent to peer. 1000 replication.force-interval Interval to force writes to disk. 1000 replication.force-snapshot-on-join Option to force new members to first receive a snapshot when they join a cluster. true replication.heartbeat-timeout Leader sends a heartbeat to followers if it has not sent any other messages to a follower for this time (in ms) 300 replication.initial-election-timeout Extra time (in ms) that follower waits initially before moving to candidate state. 0 replication.log-compaction-enabled Deletes old log files when all the entries in the file are applied for more than log-retention-hours hour. true replication.log-retention-hours Time to keep log files after all entries have been applied. 1 replication.max-election-timeout Maximal time (in ms.) that a follower waits before moving to candidate state, if it has not received any messages from a leader. Also, time that leader waits before stepping down if it has not heard from the majority of its followers. 2500 replication.max-entries-per-batch Maximum number of append entry messages sent to one peer before moving to the next. 10 replication.max-indexes-in-memory Number of index files for replication segments that Axon Server keeps in memory 10 storage.event.max-indexes-in-memory Number of index files for event segments that Axon Server keeps in memory 50 snapshot.max-indexes-in-memory Number of index files for snapshot segments that Axon Server keeps in memory 50 replication.max-replication-round The number of attempts the log replication process will do during the replication a snapshot until the follower is caught up. 10 replication.max-snapshot-chunks-per-batch Maximum number of objects that can be sent in a single install snapshot message 1000 replication.min-active-backups When active backup nodes are added to a context, this indicates on how many active backup nodes transactions must be confirmed before the transaction is ready for commit. 1 replication.min-election-timeout Minimal time (in ms.) that a follower waits before moving to candidate state, if it has not received any messages from a leader. 1000 replication.primary-cleanup-delay Windows only. Delay before forcing the primary segment file from memory when no longer in use. 5 replication.secondary-cleanup-delay Windows only. Delay before forcing the other segment files from memory when no longer in use. 30 replication.segment-size Size of a transaction log file. 16 MB replication.snapshot-flow-buffer Number of unconfirmed install snapshot messages that may be sent to peer. 50 replication.sync-interval Interval to check for files that can be closed. 1000 replication.wait-for-leader-timeout Timeout (in ms.) to wait for leader when requesting access to event store while leader change in progress, if not set defaults to maxElectionTimeout. -1 replication.use-mmap-index By default, AxonServer will determine whether to use memory mapped indexes for replication logs based on operating system and java version, in rare cases it may be useful to override the default replication.force-clean-mmap-index Option to forcefully close unused memory mapped files instead of leaving the garbage collector do this, by default, AxonServer will determine this based on operating system and java version, in rare cases it may be useful to override the default context-validation.rate Rate of checks to verify that for each context, the corresponding replication group is ready for handling client requests. 5000 context-validation.initial-delay Initial delay of checks to verify that for each context, the corresponding replication group is ready for handling client requests. 5000 Keep Alive keep-alive-time Interval at which AxonServer will send timeout messages. Set to 0 to disable gRPC timeout checks. 2500 keep-alive-timeout Timeout (in ms.) for keep alive messages on gRPC connections. 5000 min-keep-alive-time Minimum keep alive interval (in ms.) accepted by this end of the gRPC connection. 1000 client-heartbeat-timeout Timeout (in ms.) on application level heartbeat between client and Axon Server. 5000 client-heartbeat-check-initial-delay Initial time delay (in ms.) before Axon Server checks for heartbeats from clients. 10000 client-heartbeat-check-rate How often (in ms.) does Axon Server check for heartbeats from clients. 1000 heartbeat.enabled If this is set Axon Server will respond to heartbeats from clients and send heartbeat false client-heartbeat-frequency Frequency (ms) for sending heartbeats 500 client-heartbeat-initial-delay Initial delay (ms) for sending heartbeats 5000 Maintenance Tasks cluster.connection-check-delay Delay before the first run of the connection checker (in ms.) 1000 cluster.connection-check-interval Interval between each run of the connection checker (in ms.) 1000 cluster.connection-wait-time Timeout for connection request (in ms.) 3000 cluster.metrics-distribute-delay Delay before the first run of the metrics distributor (in ms.) 1000 cluster.metrics-distribute-interval Interval between each run of the metrics distributor (in ms.) 1000 cluster.rebalance-delay Delay before the first run of the rebalancer (in seconds) 7 cluster.rebalance-interval Interval between each run of the rebalancer (in seconds) 15 cluster.auto-balancing Automatic rebalancing of client connections enabled. true cluster.balancing-rate Rate at which rebalancing is attempted. 15000 cache-close-rate Interval (in ms.) at which to check for timed out queries and commands. 5000 processor-info-timeout Time in ms after which collected event processor info expires. 30000 enterprise.context-configuration-sync-rate Rate of updating the status of pending configuration changes in raft group members 3600000 Performance event.max-bloom-filters-in-memory Maximum number of bloom filters to keep in memory 100 event.max-indexes-in-memory Maximum number of indexes to keep open in memory 50 event.read-buffer-size Size of the buffer when reading from non-memory mapped files. (SE only) 32KB snapshot.max-bloom-filters-in-memory Maximum number of bloom filters to keep in memory 100 snapshot.max-indexes-in-memory Maximum number of indexes to keep open in memory 50 snapshot.read-buffer-size Size of the buffer when reading from non-memory mapped files. (SE only) 32KB snapshot.use-mmap-index By default, AxonServer will determine whether to use memory mapped indexes for snapshot files in the event store based on operating system and java version, in rare cases it may be useful to override the default snapshot.force-clean-mmap-index Option to forcefully close unused memory mapped files instead of leaving the garbage collector do this, by default, AxonServer will determine this based on operating system and java version, in rare cases it may be useful to override the default executor-thread-count Number of threads for executing incoming gRPC requests 16 command-thread Threads per client responsible for sending commands to the client. 1 query-thread Threads per client responsible for sending queries to the client. 1 cluster-executor-thread-count Number of threads for executing incoming gRPC requests for internal communication 16 cluster.query-threads Threads per connected Axon Server node responsible for forwarding queries to that node. 1 cluster.command-threads Threads per connected Axon Server node responsible for forwarding commands to that node. 1 grpc-buffered-messages The initial flow control setting for gRPC level messages. This is the number of messages that may be en-route before the sender stops emitting messages. This setting is per-request and only affects streaming requests or responses. Application-level flow control settings and buffer restriction settings are still in effect. 500 default-command-timeout Timeout (in ms.) for commands sent to command handler 300000 default-query-timeout Timeout (in ms.) for queries sent to query handler 300000 query.timeout Timeout for ad-hoc queries 300000 websocket-update.rate Settings to influence how often Axon Server (in ms.) sends updates to the dashboard for updated metrics or tracking event processor status. 1000 websocket-update.initial-delay On start, it will wait \"initial-delay\" (in ms.) before sending any updates. After that it will check every \"rate\" milliseconds. 10000 command-cache-capacity Limits the total number of pending commands on an Axon Server node. If it is set to 0, the limit is determined dynamically based on the maximum memory available to the JVM. 0 query-cache-capacity Limits the total number of pending queries on an Axon Server node. If it is set to 0, the limit is determined dynamically based on the maximum memory available to the JVM. 0 messages.context-buffer-limit (Since 4.4.8) Limits the total number of pending commands or queries per context on an Axon Server node. If less than 0, there is no limit. -1 query-handler-selector (Since 4.4.10) Determines how Axon Server distributes queries over instances of the same application. By default, it will favor instances that give a faster response. Set to \"round-robin\" to distribute in a round robin way. metrics metrics-query-handler-selector.min-requests (Since 4.4.10) Used in conjunction with the query-handler-selector set to \"metric\". Determines the minimum number of queries to be set to each instance of an application, before the router will distribute based on the metrics. 20 command-queue-capacity-per-client Number of command requests for a specific command handling client that Axon Server will cache waiting for permits. 10000 query-queue-capacity-per-client Number of query requests for a specific query handling client that Axon Server will cache waiting for permits. 10000 data-fetcher-threads Number of threads that are allocated for doing longer running operations on the event store 24 data-writer-threads Number of threads that are allocated for writing events to storage. 8 query-threads Number of threads that are allocated for processing of external queries. Not to be confused with cluster.query-threads. 1 Recovery recoveryfile Start up with a recovery file to update node names in the controldb. recovery.json Plugins plugins-enabled enabled true plugin-package-directory Directory where Axon Server stores the installed plugins. This directory must be writeable and persistent. plugins/bundles plugin-cache-directory Cache directory fot the OSGi container. This directory must be writeable. plugins/cache plugin-clean-policy Specifies if the OSGi container should clean up its cache directory on restart of the Axon Server node. Possible values are \"none\" and \"onFirstInit\". onFirstInit spring.servlet.multipart.max-file-size (no prefix) Specifies the maximum size permitted for uploaded files. 10 MB spring.servlet.multipart.max-request-size (no prefix) Specifies the maximum size allowed for multipart/form-data requests. 10 MB","title":"System Properties","component":"axon-server-reference","version":"v2024.1","name":"configuration","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/configuration/","titles":[{"text":"Configuration file","hash":"configuration-file","id":1},{"text":"Command-line","hash":"command-line","id":2},{"text":"Environment variables","hash":"environment-variables","id":3},{"text":"Recommendations","hash":"_recommendations","id":4},{"text":"Configuration properties","hash":"_configuration_properties","id":5}]},"173":{"id":173,"text":"Service name: EventProcessorAdminService Operation Purpose Method List all even processor Provide a list of all event processors defined by the connected applications. rpc GetAllEventProcessors(google.protobuf.Empty) returns (stream EventProcessor) List event processors by component Provide a list of all event processors defined by the specified component. rpc GetEventProcessorsByComponent(Component) returns (stream EventProcessor) Start event processor Start a distributed event processor, propagating the start request to all EP instances connected to AS * rpc StartEventProcessor(EventProcessorIdentifier) returns (AdminActionResult) Pause event processor Pause a distributed event processor, propagating the pause request to all EP instances connected to AS * rpc PauseEventProcessor(EventProcessorIdentifier) returns (AdminActionResult) Split event processor segment Split the largest known segment of the distributed event processor into two segments. rpc SplitEventProcessor(EventProcessorIdentifier) returns (AdminActionResult) Merge event processor segments Merge the smallest known two segments of the distributed event processor into one. ** rpc MergeEventProcessor(EventProcessorIdentifier) returns (AdminActionResult) List load balance strategies Provide a list of all load balancing strategies. rpc GetBalancingStrategies(google.protobuf.Empty) returns (stream LoadBalancingStrategy) Load balance event processor Balance the load across several instances of an event processor, accordingly to the selected strategy. rpc LoadBalanceProcessor(LoadBalanceRequest) returns (stream google.protobuf.Empty) Set auto load balance strategy Define the load balancing strategy to use for automatic load balancing. rpc SetAutoLoadBalanceStrategy(LoadBalanceRequest) returns (stream google.protobuf.Empty) Clients need to be already running and connected to AS before the operation is executed. It may not work if the two smallest segments are not claimed by applications connected to AS. Service name: ContextAdminService Operation Purpose Method Context details Provide all details about a context. rpc GetContext(GetContextRequest) returns (ContextOverview) List contexts Provide a stream of all contexts with details. rpc GetContexts(google.protobuf.Empty) returns (stream ContextOverview) Create context Create a new context. rpc CreateContext(CreateContextRequest) returns (stream google.protobuf.Empty) Delete context Delete an existing context. rpc DeleteContext(DeleteContextRequest) returns (stream google.protobuf.Empty) Update context properties Update specified properties of a context. rpc UpdateContextProperties(UpdateContextPropertiesRequest) returns (stream google.protobuf.Empty) Subscribe to contexts' updates Provide a stream of all changes in cluster configuration related to context (creations, deletions, updates). rpc SubscribeContextUpdates(google.protobuf.Empty) returns (stream ContextUpdate) Service name: ReplicationGroupAdminService Operation Purpose Method Replication group details Provide all details about a replication group. rpc GetReplicationGroup(GetReplicationGroupRequest) returns (ReplicationGroupOverview) List replication groups Provide a stream of all replication groups with details. rpc GetReplicationGroups(google.protobuf.Empty) returns (stream ReplicationGroupOverview) List nodes Provide a stream of all nodes in the cluster with details. rpc GetNodes (google.protobuf.Empty) returns (stream NodeOverview) Create replication group Create a new replication group. rpc CreateReplicationGroup(CreateReplicationGroupRequest) returns (stream google.protobuf.Empty) Delete replication group Delete an existing replication group. rpc DeleteReplicationGroup(DeleteReplicationGroupRequest) returns (stream google.protobuf.Empty) Add node Add a node to a replication group with the specified role. rpc AddNodeToReplicationGroup(JoinReplicationGroup) returns (stream google.protobuf.Empty) Remove node Remove a node from a replication group. rpc RemoveNodeFromReplicationGroup(LeaveReplicationGroup) returns (stream google.protobuf.Empty) Service name: ApplicationAdminService Operation Purpose Method Application details Provide all details about an application. rpc GetApplication(ApplicationId) returns (ApplicationOverview) List applications Provide a stream of all applications with details. rpc GetApplications(google.protobuf.Empty) returns (stream ApplicationOverview) Create/update application Create or update an application. rpc CreateOrUpdateApplication(ApplicationRequest) returns (Token) Delete application Delete an existing application. rpc DeleteApplication(ApplicationId) returns (stream google.protobuf.Empty) Refresh token Regenerate the token for the specified application. rpc RefreshToken(ApplicationId) returns (Token) Service name: UserAdminService Operation Purpose Method List users Provide a stream of all users with details. rpc GetUsers(google.protobuf.Empty) returns (stream UserOverview) Create/update user Create or update a user. rpc CreateOrUpdateUser(CreateOrUpdateUserRequest) returns (stream google.protobuf.Empty) Delete user Delete an existing user. rpc DeleteUser(DeleteUserRequest) returns (stream google.protobuf.Empty)","title":"gRPC API","component":"axon-server-reference","version":"v2024.1","name":"grpc-api","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/grpc-api/","titles":[{"text":"Event processor administration","hash":"_event_processor_administration","id":1},{"text":"Context administration","hash":"_context_administration","id":2},{"text":"Replication group administration","hash":"_replication_group_administration","id":3},{"text":"Applications administration","hash":"_applications_administration","id":4},{"text":"Users administration","hash":"_users_administration","id":5}]},"174":{"id":174,"text":"There are various options that AxonServer provides to maintain its configuration. The summary below mentions these options and the configurations that they can perform. Option Area System Properties System Configuration → Node setup (for example Ports / Hostnames) / File Locations (for example Event storage) / Event Store / Security (for example SSL) / Cluster setup / Logging / Message Flows / Replication / Performance / Recovery Command Line Interface Access control configuration → Users / Applications Cluster configuration → Replication groups/Contexts REST API Access control configuration → Users / Applications Cluster configuration → Replication groups/Contexts gRPC API Access control configuration → Users / Applications Cluster configuration → Replication groups/Contexts Cluster template Managing cluster configuration as code","title":"Configuration","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/","titles":[]},"175":{"id":175,"text":"Axon Server also allows for updating its configuration through a REST API. A list of the resources is provided below. Resource Purpose URL applications Maintenance of applications /v1/applications users Maintenance of users /v1/users context Maintenance of contexts /v1/context cluster Maintenance of clusters /v1/cluster The complete API documentation is available at {AXON_SERVER_URL}/swagger-ui/index.html.","title":"REST API","component":"axon-server-reference","version":"v2024.1","name":"rest-api","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/rest-api/","titles":[]},"176":{"id":176,"text":"For monitoring, AxonServer includes Spring Boot Actuator endpoints which are available under the /actuator URL path of the AxonServer. For Axon Server SE, the URL for the Axon Server SE will be the single running node, while for Axon Server EE the URL should be pointing to any node serving the _admin context within an Axon Server EE cluster. The `/actuator`URL path returns a list of all available actuators. A list of the endpoints is given below. /actuator/health endpoint is used to check the health of Axon Server itself, and (in the case of Axon Server EE) the health of the cluster. The HTTP status return code *is not 200* when cluster health is anything other than \"UP\". /actuator/info endpoint informs you about some basic attributes of an AxonServer (name, description, version). This is more useful for liveness/readiness probes. /actuator/metrics endpoint publishes information about OS, JVM as well as application level metrics /actuator/loggers endpoint exposes detailed view of the loggers configuration /actuator/prometheus endpoint exposes metrics data in a format that can be scraped by a Prometheus server (Monitoring system & time series database) /actuator/env endpoint exposes the current environment properties The /actuator/health endpoint provides information on various components of Axon Server: cluster, shows the status of the connection between the current Axon Server node and other nodes in the cluster. This section also shows information on the flow control between Axon Server nodes. If the value for commands.waiting or queries.waiting is not zero for a longer period of time, it means that the connected Axon Server node cannot process the commands or queries fast enough. If there are waiting commands or queries, or the connection with one of the other nodes is down, this component will show status WARN. If the connections to all other nodes is down, the status of the cluster component is DOWN. command, shows the status of command handling applications connected to the current Axon Server node. For each connected application it shows the number of commands waiting to be sent to the command handler. If this value is higher than zero, it means that commands are being sent faster than the command handler can handle them. db, shows the status of the control DB * diskSpace, shows the diskspace in use and available for each storage location (this includes the locations where events and snapshots are stored, and the location of the replication logs). if the available space in any of these locations is below the threshold, the health for the diskSpace component will be WARN. license, shows the status of the license. If the license is in the grace period, this component gets status WARN, if license is expired the status becomes DOWN. localEventStore, shows the status of the local replica for each context available on the current node. ping, always shows UP * query, shows the status of query handling applications connected to the current Axon Server node. For each connected application it shows the number of queries waiting to be sent to the query handler. If this value is higher than zero, it means that queries are being sent faster than the query handler can handle them. raft, shows the status of the replication process per replication group. It shows the leader of the replication group. For the leader it shows the status of the followers, checking if the follower has recently confirmed messages and if the follower is not too far behind. If there is a problem with the replication on one of the replication groups the health for this component is WARN. If there are issues for all replication groups the status is DOWN. The overall health status is derived from the status of the components. If one of the components is WARN, the overall status is WARN. If one of the components is DOWN, it is DOWN. The default setting for the health endpoint in Axon Server is to show the details, even when the user is not authenticated. To hide the details for non-authenticated users add this property to the axonserver.properties file: management.endpoint.health.show-details=when-authorized","title":"Actuator Endpoints","component":"axon-server-reference","version":"v2024.1","name":"actuator-endpoints","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/actuator-endpoints/","titles":[{"text":"Health endpoint","hash":"_health_endpoint","id":1}]},"177":{"id":177,"text":"Axon Server provides metrics to inspect the state of the process. A full list of all the active metrics is available under the /actuator/metrics endpoint. The next sections give an overview of the metrics related to client request handling. Metric name Description axon.commands.throughput.count number of commands processed since the start of the server axon.commands.throughput.rate.oneMinuteRate average number of commands per second processed in the last minute axon.commands.throughput.rate.fiveMinuteRate average number of commands per second processed in the five minutes axon.commands.throughput.rate.fifteenMinuteRate average number of commands per second processed in the fifteen minutes axon.commands.duration Duration of commands, from received by Axon Server until response sent to requester axon.commands.duration.handling Duration of commands, from sent to handler until response received from handler axon.commands.error.count Number of errors axon.commands.saturation.queued.count Number of commands queued in Axon Server axon.commands.saturation.active.count Number of in-flight commands Metric name Description axon.queries.throughput.count number of queries processed since the start of the server axon.queries.throughput.rate.oneMinuteRate average number of queries per second processed in the last minute axon.queries.throughput.rate.fiveMinuteRate average number of queries per second processed in the five minutes axon.queries.throughput.rate.fifteenMinuteRate average number of queries per second processed in the fifteen minutes axon.queries.duration Duration of queries, from received by Axon Server until response sent to requester axon.queries.duration.handling Duration of queries, from sent to handler until response received from handler axon.queries.error.count Number of errors axon.queries.saturation.queued.count Number of queries queued in Axon Server axon.queries.saturation.active.count Number of in-flight queries axon.queries.subscriptionquery.throughput.total Total number of subscription queries subscribed axon.queries.subscriptionquery.duration Duration of a subscription query connection axon.queries.subscriptionquery.throughput.updates Total number of updates submitted on subscription queries axon.queries.subscriptionquery.saturation.active Active number of subscription queries on this node Metric name Description axon.events.append.throughput.count number of events appended since the start of the server axon.events.append.throughput.rate.oneMinuteRate average number of events appended per second processed in the last minute axon.events.append.throughput.rate.fiveMinuteRate average number of events appended per second processed in the five minutes axon.events.append.throughput.rate.fifteenMinuteRate average number of events appended per second processed in the fifteen minutes axon.events.append.duration Duration of append events request, from the first event in a transaction received by Axon Server until it completes the transaction axon.events.append.error.count Number of errors appending events axon.events.append.saturation.active.count Number of active append event transactions axon.events.read.aggregate.throughput.count number of aggregates read since the start of the server axon.events.read.aggregate.throughput.rate.oneMinuteRate average number of aggregates read per second processed in the last minute axon.events.read.aggregate.throughput.rate.fiveMinuteRate average number of aggregates read per second processed in the five minutes axon.events.read.aggregate.throughput.rate.fifteenMinuteRate average number of aggregates read per second processed in the fifteen minutes axon.events.read.aggregate.duration Duration of read aggregate request axon.events.read.aggregate.error.count Number of errors axon.events.read.aggregate.saturation.active.count Number of active aggregate read actions axon.snapshots.append.throughput.count number of snapshots appended since the start of the server axon.snapshots.append.throughput.rate.oneMinuteRate average number of snapshot appends per second processed in the last minute axon.snapshots.append.throughput.rate.fiveMinuteRate average number of snapshot appends per second processed in the five minutes axon.snapshots.append.throughput.rate.fifteenMinuteRate average number of snapshot appends per second processed in the fifteen axon.snapshots.append.duration Duration of append snapshot request, from the snapshot received by Axon Server until it completes the transaction axon.snapshots.append.error.count Number of errors axon.snapshots.append.saturation.active.count Number of active append snapshot requests axon.snapshots.read.throughput.count Number of snapshots read since the start of the server axon.snapshots.read.throughput.rate.oneMinuteRate average number of snapshot reads per second processed in the last minute axon.snapshots.read.throughput.rate.fiveMinuteRate average number of snapshot reads per second processed in the five minutes axon.snapshots.read.throughput.rate.fifteenMinuteRate average number of snapshot reads per second processed in the fifteen axon.snapshots.read.duration Duration of read aggregate request axon.snapshots.read.error.count Number of errors axon.snapshots.read.saturation.active.count Number of active aggregate read actions Metric name Description axon.tasks.saturation.scheduled.count Number of scheduled tasks axon.tasks.error.count Number of errors executing tasks axon.tasks.duration Duration of task execution Metric name Description axon.applications.duration.connection Duration of application connections axon.applications.throughput.connect.count Number of application connect requests axon.applications.saturation.connected.count Number of applications currently connected axon.applications.throughput.disconnect.count Number of application disconnect requests axon.authentication.error.count Number of authentication errors Release 2023.2.0 deprecates the following metrics. These will be removed from Axon Server in release 2024.0.0: Metric name Replaced by axon.commands.count axon.commands.throughput.count axon.commands.rate.oneMinuteRate axon.commands.throughput.rate.oneMinuteRate axon.commands.rate.fiveMinuteRate axon.commands.throughput.rate.fiveMinuteRate axon.commands.rate.fifteenMinuteRate axon.commands.throughput.rate.fifteenMinuteRate axon.command axon.commands.duration axon.commands.active axon.commands.saturation.active.count axon.ApplicationCommandQueue.size axon.commands.saturation.queued.count axon.queries.count axon.queries.throughput.count axon.queries.rate.oneMinuteRate axon.queries.throughput.rate.oneMinuteRate axon.queries.rate.fiveMinuteRate axon.queries.throughput.rate.fiveMinuteRate axon.queries.rate.fifteenMinuteRate axon.queries.throughput.rate.fifteenMinuteRate axon.query axon.queries.duration axon.queries.active axon.queries.saturation.active.count axon.ApplicationQueryQueue.size axon.queries.saturation.queued.count axon.event.count axon.events.append.throughput.count axon.event.rate.oneMinuteRate axon.events.append.throughput.rate.oneMinuteRate axon.event.rate.fiveMinuteRate axon.events.append.throughput.rate.fiveMinuteRate axon.event.rate.fifteenMinuteRate axon.events.append.throughput.rate.fifteenMinuteRate axon.snapshot.count axon.snapshots.append.throughput.count axon.snapshot.rate.oneMinuteRate axon.snapshots.append.throughput.rate.oneMinuteRate axon.snapshot.rate.fiveMinuteRate axon.snapshots.append.throughput.rate.fiveMinuteRate axon.snapshot.rate.fifteenMinuteRate axon.snapshots.append.throughput.rate.fifteenMinuteRate axon.GlobalSubscriptionMetricRegistry.total axon.queries.subscriptionquery.throughput.total axon.GlobalSubscriptionMetricRegistry.updates axon.queries.subscriptionquery.throughput.updates axon.GlobalSubscriptionMetricRegistry.active axon.queries.subscriptionquery.saturation.active axon.QuerySubscriptionMetricRegistry.total axon.queries.subscriptionquery.throughput.total axon.QuerySubscriptionMetricRegistry.updates axon.queries.subscriptionquery.throughput.updates axon.QuerySubscriptionMetricRegistry.active axon.queries.subscriptionquery.saturation.active axon.ApplicationSubscriptionMetricRegistry.total axon.queries.subscriptionquery.throughput.total axon.ApplicationSubscriptionMetricRegistry.updates axon.queries.subscriptionquery.throughput.updates axon.ApplicationSubscriptionMetricRegistry.active axon.queries.subscriptionquery.saturation.active The deprecated metrics are still collected by default. To stop collecting the deprecated metrics set the property: axoniq.axonserver.legacy-metrics-enabled=false","title":"Axon Server Metrics","component":"axon-server-reference","version":"v2024.1","name":"axon-server-metrics","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/axon-server-metrics/","titles":[{"text":"Command handling metrics","hash":"_command_handling_metrics","id":1},{"text":"Query handling metrics","hash":"_query_handling_metrics","id":2},{"text":"Event store metrics","hash":"_event_store_metrics","id":3},{"text":"Scheduler metrics","hash":"_scheduler_metrics","id":4},{"text":"Application connection metrics","hash":"_application_connection_metrics","id":5},{"text":"Deprecated metrics","hash":"application-level-metrics-deprecated","id":6}]},"178":{"id":178,"text":"When reaching out to AxonIQ for Axon Server support related questions, the support team needs information about the environment and its current state. Axon Server provides an endpoint that collects the relevant information into a zip file. The URL is v1/diagnose/download. The zip file contains the following information: cluster layout (nodes in the cluster) application logs replication status per replication group list of files per context system information (available processors, memory and java version used) thread dump of the Axon Server process health status (information from /actuator/health) metrics","title":"Diagnostics","component":"axon-server-reference","version":"v2024.1","name":"diagnostics","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/diagnostics/","titles":[]},"179":{"id":179,"text":"To enable the gRPC metrics, for the Axon Server, the following properties need to be set in the axonserver.properties (or .yaml file). Property Name Default Value Description axoniq.axonserver.metrics.grpc.enabled false Enables Axon Server gRPC metrics axoniq.axonserver.metrics.grpc.jaeger-enabled false Enables exporter for Jaeger axoniq.axonserver.metrics.grpc.jaeger-endpoint Endpoint to access Jaeger exporter. Will not be considered if jaeger-enabled is set to false. axoniq.axonserver.metrics.grpc.jaeger-service-name Service name to be set to Jaeger exporter. axoniq.axonserver.metrics.grpc.prometheus-enabled false Enables exporter for Prometheus. axoniq.axonserver.metrics.grpc.z-paged-enabled false Enables ZPages for displaying traces/stats. axoniq.axonserver.metrics.grpc.z-pages-port 8888 HTTP port to access ZPages.","title":"gRPC Metrics","component":"axon-server-reference","version":"v2024.1","name":"grpc-metrics","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/grpc-metrics/","titles":[]},"180":{"id":180,"text":"You can enable the heartbeat monitoring in Axon Server in order to activate an high level monitoring of client connection availability. Axon Framework and Axon Server need to know whether the connection is still alive. GRPC already provides an internal heartbeat in its protocol but does not suffice in many situations, such as in the cloud or when using a service mesh. Proxies and Load Balancers understand this heartbeat and respond to it, while the connection beyond that’s connected to Axon Server is not checked properly. For this reason, the API of Axon Server implements a non-protocol heartbeat that is a regular gRPC call, sent at intervals. If the call is not responded to in time, the connection is terminated and re-established, providing recoverability from various network issues. Therefore it’s enabled by default. This feature can be enabled by configuring the following property: axoniq.axonserver.heartbeat.enabled=true Please note that when combining Axon Server with Axon Framework, the framework application should also have Heartbeat Monitoring enabled. Note that this is enabled by default in Axon Framework. If you want to disable heartbeat monitoring this further, regard the following configuration: Axon Configuration API Spring Boot Auto Configuration public class AxonConfig { // ... public void disableHeartbeats(Configurer configurer) { configurer.registerComponent(AxonServerConfiguration.class, config -> { AxonServerConfiguration.HeartbeatConfiguration heartbeatConfig = new AxonServerConfiguration.HeartbeatConfiguration(); heartbeatConfig.setEnabled(false); AxonServerConfiguration serverConfig = new AxonServerConfiguration(); serverConfig.setHeartbeat(heartbeatConfig); return serverConfig; }); } } axon.axonserver.heartbeat.enabled=false Axon Framework supports heartbeat monitoring starting from 4.2.1 version.","title":"Heartbeat Monitoring","component":"axon-server-reference","version":"v2024.1","name":"heartbeat-monitoring","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/heartbeat-monitoring/","titles":[]},"181":{"id":181,"text":"AxonServer provides a set of actuator endpoints, gRPC metrics and heartbeat monitoring capabilities that help monitor vital aspects of an AxonServer SE/EE deployment. These help in : Retrieving basic information about the AxonServer Monitoring the general health of the AxonServer Retrieving Metrics around the OS/JVM Retrieving Message (Commands/Queries/Events) flow metrics Retrieving environmental properties of the AxonServer","title":"Monitoring","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/","titles":[]},"182":{"id":182,"text":"The logging section of the reference guide addresses the configuration, operational, and maintenance aspects of Axon Server Logging. Topic Purpose Logging format Configuration of logging format","title":"Logging","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/administration/logging/","titles":[]},"183":{"id":183,"text":"Axon Server logging is based on Spring logging. For this reason you can customize logging configuration simply by using system properties. If you want to have your logs in JSON format, you can customize the Logback configuration. The property that needs to be configured is logging.config with a path to your custom logback.xml. An example how to configure this property would be logging.config=logback.xml In case you have not already configured logback.xml for Axon Server, a good starting point for JSON logging format is this example The XML tag is the one that configures the format of the output. yyyy-MM-dd'T'HH:mm:ss.SSSX Etc/UTC true false","title":"Logging Format","component":"axon-server-reference","version":"v2024.1","name":"logging-format","url":"/axon-server-reference/v2024.1/axon-server/administration/logging/logging-format/","titles":[{"text":"JSON format","hash":"_json_format","id":1}]},"184":{"id":184,"text":"This section is split into 4 sub-sections. The Axon Server Docker Image Construction of the Axon Server Docker Image Deployment using Docker Compose Deployment using Kubernetes Unified Axon Server Artifact In an effort to simplify the deployment process, since 2023.1 version we’ve updated Axon Server to release a single artifact, replacing the previously separate artifacts for the Standard and Enterprise edition. Depending on the presence of a license, Axon Server will now automatically adjust. AxonIQ provides ready to use Axon Server images. There are two types of images available: one with Axon Server running as the user “root” and one with Axon Server running as user “axonserver”. Both images are based on Eclipse Temurin, which means they include a (limited) shell that allows you to connect \"into\" the running image and perform some commands. The “root” image of version 2023.1 is available as “axoniq/axonserver:2023.1” and is based on “eclipse-temurin:11-focal”. This image is particularly useful for running in Docker Desktop, as it will not have any trouble creating files and directories as user “root”. The “axonserver” image of version 2023.1 is available as “axoniq/axonserver:2023.1-nonroot” and is based on the same Eclipse Temurin image. This image is more secure and useful in Kubernetes and OpenShift clusters. You should take care to declare the user- and group-id, both of which are 1001 and are named “axonserver”. Doing this will ensure that any mounted volumes will be writable by the user running Axon Server. The images export the following volumes: “/axonserver/config” This is where you can add configuration files, such as an additional axonserver.properties and the license file. However, you can also opt to use, for instance, Kubernetes, or Docker-compose secrets. Note that Axon Server EE assumes it can write to the directory configured with “axoniq.axonserver.enterprise.licenseDirectory”, so you don’t have to put the license on all nodes. * “/axonserver/data” This is where the ControlDB, the PID file, and a copy of the application logs are written to. * “/axonserver/events” In this volume the Event Store is created, with a single directory per context. * “/axonserver/log” In this volume the Replication Logs are created, with a single directory per Replication Group. * “/axonserver/exts” In this volume you can place Extension JAR-files, such as the LDAP and OAuth2 extensions. * “/axonserver/plugins” In this volume Axon Server will place all uploaded plugins. Using the axoniq/axonserver:latest image Up to release 2023.2.0 the default Axon Server image (axoniq/axonserver:latest) was using Axon Server Standard Edition version 4.6.11. There is a difference in the directory structure between version 4.6.11 and the current version. One change is that the working directory has changed from / to /axonserver. All files and directories created by Axon Server are stored in this directory (or subdirectories). The following locations have new default values: Property Axon Server SE 4.6.11 Axon Server 2023.2 axoniq.axonserver.event.storage /eventdata /axonserver/events axoniq.axonserver.snapshot.storage /eventdata /axonserver/events axoniq.axonserver.controldb-path /data /axonserver/data axoniq.axonserver.plugin-package-directory /data/plugins/bundles /axonserver/plugins/bundles axoniq.axonserver.plugin-cache-directory /data/plugins/cache /axonserver/plugins/cache logging.file /data/axonserver.log /axonserver/data/axonserver.log As these locations have changed you need to update the volume mappings that you use in the container. The mapping for /eventdata must be changed to /axonserver/events, and the mapping for /data must be changed to /axonserver/data. A starter Dockerfile is included below which can be tailored as per your requirements. The starter file helps create the image in multiple stages, The image will be based on a compact image from Google’s “distroless” base images at the gcr.io repository, in this case “gcr.io/distroless/java:11”. The first stage creates the directories that will become our volumes. This step cannot be performed in the Distroless image, because that image does not provide a shell. The second stage begins by copying the home directory with its volume mount points, carefully keeping ownership set to the new user. The last steps copy the executable jar named axonserver.jar and a common set of properties. It marks the volume mounting points and exposed ports and finally specifies the command to start Axon Server EE. FROM busybox as source RUN mkdir -p /axonserver/config /axonserver/data /axonserver/events /axonserver/log /axonserver/exts FROM gcr.io/distroless/java:11 COPY --from=source /axonserver /axonserver COPY axonserver.jar axonserver.properties /axonserver/ WORKDIR /axonserver VOLUME [ \"/axonserver/config\", \"/axonserver/data\", \"/axonserver/events\", \"/axonserver/log\", \"/axonserver/exts\", \"/axonserver/plugins\" ] EXPOSE 8024/tcp 8124/tcp 8224/tcp ENTRYPOINT [ \"java\", \"-jar\", \"./axonserver.jar\" ] If you want to build a \"nonroot\" version, you need to adjust this as follows: FROM busybox as source RUN addgroup -S -g 1001 axonserver \\ && adduser -S -u 1001 -G axonserver -h /axonserver -D axonserver \\ && mkdir -p /axonserver/config /axonserver/data /axonserver/events /axonserver/log /axonserver/exts \\ && chown -R axonserver:axonserver /axonserver FROM gcr.io/distroless/java:11 COPY --from=source /etc/passwd /etc/group /etc/ COPY --from=source --chown=axonserver /axonserver /axonserver COPY --chown=axonserver axonserver.jar axonserver.properties /axonserver/ USER axonserver WORKDIR /axonserver VOLUME [ \"/axonserver/config\", \"/axonserver/data\", \"/axonserver/events\", \"/axonserver/log\", \"/axonserver/exts\", \"/axonserver/plugins\" ] EXPOSE 8024/tcp 8124/tcp 8224/tcp ENTRYPOINT [ \"java\", \"-jar\", \"./axonserver.jar\" ] As you can see this will start by creating the user “axonserver” belonging to a group with the same name. When copying the directory, we now have to ensure that ownership transfers correctly and specify the user to run as, but otherwise it looks pretty similar. For the common properties (axonserver.properties), the minimum set can be added to ensure that the volumes get mounted and logs generated. Again these can be tailored as per the deployment requirements. axoniq.axonserver.event.storage=./events axoniq.axonserver.snapshot.storage=./events axoniq.axonserver.replication.log-storage-folder=./log axoniq.axonserver.enterprise.licenseDirectory=./config #axoniq.axonserver.accesscontrol.systemtokenfile=./config/axonserver.token axoniq.axonserver.controldb-path=./data axoniq.axonserver.pid-file-location=./data logging.file=./data/axonserver.log logging.file.max-history=10 logging.file.max-size=10MB Place the Dockerfile, the Axon Server jar file (axonserver.jar), the Axon Server client jar file (axonserver-cli.jar) and the axonserver.properties in the current directory. Assuming we are building version 2023.1.1, the image can be constructed using the following command: $ docker build --tag my-repository/axonserver:2023.1.1. This completes the construction of the Docker image. The image can pushed to your local repository or you could keep it local if you only want to run it on your development machine. The next step is to run it either using Docker Compose or Kubernetes. If you want to run the docker image for a standalone instance of Axon Server and have it initialized automatically, you can start it with the \"axoniq.axonserver.standalone\" property set through the environment, for instance: $ docker run -dit -e axoniq.axonserver.standalone=true -p 8024:8024 -p 8124:8124 my-repository/axonserver:2023.1.1 Axon Server is meant to be run in a distributed manner, as a cluster where there will be multiple instances of Axon Server nodes running all interconnected to each other. The installation process assumes that Docker Compose will be used to run a 3-node Axon Server cluster, that is running 3 services of the same container image we built above. Let us designate these services as \"axonserver-1\", \"axonserver-2\" and \"axonserver-3\". We will also give a tag to the image that we constructed above as \"my-repository/axonserver:2023.1\". Each container instance will use separate volumes for “data”, “events”, and “log”. An environment variable is added to tell Axon Server about the location of the license file. We will use \"secrets\" to inject the license file, tokens as well as the cluster/context definitions using the autocluster mechanism. The complete docker-compose file is depicted below. version: '3.3' services: axonserver-1: image: my-repository/axonserver:2023.1 hostname: axonserver-1 volumes: - axonserver-data1:/axonserver/data - axonserver-events1:/axonserver/events - axonserver-log1:/axonserver/log secrets: - source: axoniq-license target: /axonserver/config/axoniq.license - source: axonserver-properties target: /axonserver/config/axonserver.properties - source: axonserver-token target: /axonserver/config/axonserver.token environment: - AXONIQ_LICENSE=/axonserver/config/axoniq.license ports: - '8024:8024' - '8124:8124' - '8224:8224' networks: - axon-demo axonserver-2: image: my-repository/axonserver:2023.1 hostname: axonserver-2 volumes: - axonserver-data2:/axonserver/data - axonserver-events2:/axonserver/events - axonserver-log2:/axonserver/log secrets: - source: axoniq-license target: /axonserver/config/axoniq.license - source: axonserver-properties target: /axonserver/config/axonserver.properties - source: axonserver-token target: /axonserver/config/axonserver.token environment: - AXONIQ_LICENSE=/axonserver/config/axoniq.license ports: - '8025:8024' - '8125:8124' - '8225:8224' networks: - axon-demo axonserver-3: image: my-repository/axonserver:2023.1 hostname: axonserver-3 volumes: - axonserver-data3:/axonserver/data - axonserver-events3:/axonserver/events - axonserver-log3:/axonserver/log secrets: - source: axoniq-license target: /axonserver/config/axoniq.license - source: axonserver-properties target: /axonserver/config/axonserver.properties - source: axonserver-token target: /axonserver/config/axonserver.token environment: - AXONIQ_LICENSE=/axonserver/config/axoniq.license ports: - '8026:8024' - '8126:8124' - '8226:8224' networks: - axon-demo volumes: axonserver-data1: driver: local driver_opts: type: none device: ${PWD}/data1 o: bind axonserver-events1: driver: local driver_opts: type: none device: ${PWD}/events1 o: bind axonserver-log1: driver: local driver_opts: type: none device: ${PWD}/log1 o: bind axonserver-data2: driver: local driver_opts: type: none device: ${PWD}/data2 o: bind axonserver-events2: driver: local driver_opts: type: none device: ${PWD}/events2 o: bind axonserver-log2: driver: local driver_opts: type: none device: ${PWD}/log2 o: bind axonserver-data3: driver: local driver_opts: type: none device: ${PWD}/data3 o: bind axonserver-events3: driver: local driver_opts: type: none device: ${PWD}/events3 o: bind axonserver-log3: driver: local driver_opts: type: none device: ${PWD}/log3 o: bind networks: axon-demo: secrets: axonserver-properties: file: ./axonserver.properties axoniq-license: file: ./axoniq.license axonserver-token: file: ./axonserver.token The “axonserver-token” secret is used to allow the CLI to talk with nodes. The access control section details the generation of these tokens. A similar approach can be used to configure more secrets for the certificates, and so enable SSL. The \"axonserver.properties\" properties file referred to in the secrets’ definition section is depicted below. axoniq.axonserver.autocluster.first=axonserver-1 axoniq.axonserver.autocluster.contexts=_admin,default # We highly recommend protecting your installations at all time, hence why access control is enabled here. # For quick testing, you can disable this, but be sure to switch it big with high priority. axoniq.axonserver.accesscontrol.enabled=true axoniq.axonserver.accesscontrol.internal-token=${generated_token} axoniq.axonserver.accesscontrol.systemtokenfile=/axonserver/config/axonserver.tok Starting Axon Server using the docker-compose command is depicted below. $ docker-compose up For example purposes only The examples below show only one of the ways you could deploy Axon Server to Kubernetes. As discussed in this Blog article, there are many aspects that you need to carefully plan ahaead for. A complete set of examples can be found in the \"Running Axon Server\" GitHub repository. We especially recommend using the \"Singleton StatefulSet\" approach. Although the complexity of deploying any application to Kubernetes can be overwhelming, we strongly recommend you to study this subject carefully. The examples we provide are not necessarily the best approach for your particular situation, so be careful about copying them without any further modifications, if only because they generate self-signed certificates that have a one-year validity. An important thing to consider is the use of a \"nonroot\" image. This is due to the fact that volumes are mounted as owned by the mount location’s owner in Docker, while Kubernetes uses a special security context, defaulting to “root”. Since a \"nonroot\" image runs Axon Server under its own user, it has no rights on the mounted volume other than “read”. The context can be specified, but only through the user or group’s ID, and not using their name as we did in the image, because that name does not exist in the k8s management context. So we have to adjust the first stage to specify a specific numeric value (here we have given 1001) , and then use that value in the security context of the Stateful set which we shall see below. We would need to supply a licence/token file (for client applications) and cluster/context definitions via an axonserver.properties file. Unlike Docker Compose, Kubernetes mounts Secrets and ConfigMaps as directories rather than files, so we need to split license and configuration to two separate locations. For the license secret we can use a new location “/axonserver/license/axoniq.license” and adjust the environment variable to match. For the system token we’ll use “/axonserver/security/token.txt”, and for the properties file we’ll use a ConfigMap that we mount on top of the “/axonserver/config” directory. These can be created using \"kubectl\" directly from their respective file as depicted below. It is recommended to create a dedicated namespace before creating the secrets and the config maps. $ kubectl create secret generic axonserver-license --from-file=./axoniq.license -n ${axonserver-ns} secret/axonserver-license created $ kubectl create secret generic axonserver-token --from-file=./axoniq.token -n ${axonserver-ns} secret/axonserver-token created $ kubectl create configmap axonserver-properties --from-file=./axonserver.properties -n ${axonserver-ns} configmap/axonserver-properties created $ In the descriptor we now have to declare the secret, add a volume for it, and mount the secret on the volume. Then a list of volumes has to be added to link the actual license and properties. The complete spec for the Axon Server Stateful set is given below. This includes the security context, the volume mounts, the readiness and liveness probes and finally the volumes. apiVersion: apps/v1 kind: StatefulSet metadata: name: axonserver labels: app: axonserver spec: serviceName: axonserver replicas: 1 selector: matchLabels: app: axonserver template: metadata: labels: app: axonserver spec: securityContext: runAsUser: 1001 fsGroup: 1001 containers: - name: axonserver image: axoniq/axonserver:latest-dev-nonroot imagePullPolicy: IfNotPresent ports: - name: grpc containerPort: 8124 protocol: TCP - name: gui containerPort: 8024 protocol: TCP env: - name: AXONIQ_LICENSE value: \"/axonserver/license/axoniq.license\" volumeMounts: - name: data mountPath: /axonserver/data - name: events mountPath: /axonserver/events - name: log mountPath: /axonserver/log - name: config mountPath: /axonserver/config readOnly: true - name: system-token mountPath: /axonserver/security readOnly: true - name: license mountPath: /axonserver/license readOnly: true readinessProbe: httpGet: path: /actuator/info port: 8024 initialDelaySeconds: 5 periodSeconds: 5 timeoutSeconds: 1 failureThreshold: 30 livenessProbe: httpGet: path: /actuator/info port: 8024 initialDelaySeconds: 5 periodSeconds: 10 successThreshold: 1 failureThreshold: 3 volumes: - name: config configMap: name: axonserver-properties - name: system-token secret: secretName: axonserver-token - name: license secret: secretName: axonserver-license volumeClaimTemplates: - metadata: name: events spec: accessModes: [ \"ReadWriteOnce\" ] resources: requests: storage: 5Gi - metadata: name: log spec: accessModes: [ \"ReadWriteOnce\" ] resources: requests: storage: 1Gi - metadata: name: data spec: accessModes: [ \"ReadWriteOnce\" ] resources: requests: storage: 1Gi The StatefulSet can be applied using the following command (assuming that the StatefulSet spec is stored in the file \"axonserver-sts.yml\"). $ kubectl apply -f axonserver-sts.yml -n ${axonserver-ns} statefulset.apps/axonserver created The next step would be to create the two services required for Axon Server, that is axonserver-gui on 8024 (HTTP) and axonserver on 8124 (gRPC). --- apiVersion: v1 kind: Service metadata: name: axonserver-gui labels: app: axonserver spec: ports: - name: gui port: 8024 targetPort: 8024 selector: app: axonserver type: ClusterIP --- apiVersion: v1 kind: Service metadata: name: axonserver labels: app: axonserver spec: ports: - name: grpc port: 8124 targetPort: 8124 clusterIP: None selector: app: axonserver --- apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: name: axonserver annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent spec: rules: - host: axonserver http: paths: - backend: serviceName: axonserver-gui servicePort: 8024 --- The services use an Ingress to allow incoming traffic and can be deployed with the following command (assuming that the Service specs are stored in the file \"axonserver-ing.yml\"). $ kubectl apply -f axonserver-ing.yml -n ${axonserver-ns} service/axonserver-gui created service/axonserver created ingress.networking.k8s.io/axonserver created The final step is to scale out the cluster. The simplest approach, and most often correct one, is to use a scaling factor other than 1, letting Kubernetes take care of deploying several instances. This means we will get several nodes that Kubernetes can dynamically manage and migrate as needed, while at the same time fixing the name and storage. We will get a number suffixed to the name starting at 0, so a scaling factor of 3 gives us “axonserver-0” through “axonserver-2”. $ kubectl scale sts axonserver -n ${axonserver-ns} --replicas=3 statefulset.apps/axonserver scaled This completes a basic setup to help install Axon Server on Kubernetes. The customer can choose to tailor the entire setup based on their requirements and usage of Kubernetes.","title":"Axon Server","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/installation/docker-k8s/","titles":[{"text":"Docker image","hash":"docker-image","id":1},{"text":"Building you own image","hash":"build-image","id":2},{"text":"Docker compose","hash":"docker-compose","id":3},{"text":"Kubernetes","hash":"kubernetes","id":4},{"text":"Creating the Secrets and ConfigMap","hash":"_creating_the_secrets_and_configmap","id":5},{"text":"Deploying Axon Server","hash":"_deploying_axon_server","id":6}]},"185":{"id":185,"text":"Unified Axon Server Artifact In an effort to simplify the deployment process, since 2023.1 version we’ve updated Axon Server to release a single artifact, replacing the previously separate artifacts for the Standard and Enterprise edition. Depending on the presence of a license, Axon Server will now automatically adjust. The Axon Server ZIP download contains executable JAR files for the server itself and the CLI. In addition to the archive file, you would also need a license to run it. You may run Axon Server in a variety of ways. The following sections will guide you through the process of setting up Axon Server in a variety of ways. Before we get into the setup, a short introduction to the concept of clusters and contexts within Axon Server. A single Axon Server node will provide a single connection point for (Axon Framework-based) client applications. This node will manage message delivery and event storage. To run Axon Server in a non-clustered mode with initialized context, you can simply add these properties to the axonserver.properties or add them as environment properties. axoniq.axonserver.standalone=true Another way to initialize a context is to use the Axon Server UI, CLI, or Cluster template. A cluster of Axon Server nodes will provide multiple connection points for (Axon Framework-based) client applications, and thus share the load of managing message delivery and event storage. Client applications will dynamically connect to a node in the cluster and automatically reconnect to another, should the node that they are currently connected to become unreachable.‌ This ensures a highly available deployment. Within a single cluster you can define *contexts*. Contexts are comparable to logical databases in a RDBMS. They allow for strong separation without requiring deploying and managing full instances. They may be used for \"bounded contexts\" in the DDD sense, multi-tenancy (with a context per tenant), and have different retention policies. The Clustering and Contexts sections provide more insights into these aspects. Setting up a cluster generally involves three steps: Provision \"uninitialized\" Axon Server nodes Admin Node initialization Add additional nodes to the cluster. To get started with setting up a cluster, you need to provision a set of *uninitialized* nodes. Extract the Zip on all the nodes that you want to be part of the cluster. The nodes will need to run on separate ports if run on the same machine. From the location where the files have been extracted, please run the following command. $ ./axonserver.jar _ ____ / \\ __ _____ _ __ / ___| ___ _ ____ _____ _ __ / _ \\ \\ \\/ / _ \\| '_ \\\\___ \\ / _ \\ '__\\ \\ / / _ \\ '__| / ___ \\ > < (_) | | | |___) | __/ | \\ V / __/ | /_/ \\_\\/_/\\_\\___/|_| |_|____/ \\___|_| \\_/ \\___|_| Powered by AxonIQ This will start Axon Server using the default ports - 8024 for HTTP / 8124 and 8224 for gRPC The HTTP port is used to serve the Management UI and the REST API provided by Axon Server. The gRPC 8124 port is used by Axon Framework client applications to connect to Axon Server, while the gRPC 8224 port is used for internal communication between the nodes of an Axon Server cluster. The management UI can be opened at \"http://localhost:8024\" while the REST API is accessible at \"http://localhost:8024/v1\". The REST API provides an operation at \"/v1/public/me\" to get the configuration details for a running instance of Axon Server. A representation of the response is given below. { \"authentication\": false, \"clustered\": true, \"ssl\": false, \"adminNode\": false, \"developmentMode\": false, \"storageContextNames\": [], \"contextNames\": [], \"internalHostName\": ${hostname}, \"grpcInternalPort\": 8224, \"grpcPort\": 8124, \"httpPort\": 8024, \"name\": ${hostname}, \"hostName\": ${hostname} } Repeat this for every node that needs to be a part of the cluster. To summarize, Extract the Axon Server zip (along with the license file) on each node which needs to be part of the cluster and start each instance. Ensure that the gRPC / internal gRPC ports are open and accessible between the various nodes. The REST API call to each node at \"/v1/public/me\" gives you the configuration details of the running Axon Server instance. This configuration can be customized using the system properties file axonserver.properties located within the Axon Server distributable. The System Properties section details these values. This completes the process of setting up the uninitialized nodes. Next, we need to initialize one of the nodes as the \"Admin Node\" To convert a group of uninitialized Axon Server nodes into a cluster, you need to select any one of them as a starting point and run the “init-cluster” command on it. This is done using the \"command-line\" utility (axonserver-cli.jar) available as part of the Axon Server distributable. $ ./axonserver-cli.jar init-cluster Once successfully executed, this will do the following, Designate this node as the admin node of the Axon Server cluster Creates the \"admin\" context which stores the configuration details of the Axon Server cluster Creates a \"default\" context which is available for event storage/message routing for client applications The REST API operation at \"/v1/public/me\" should now show the following response (assuming axonserver-0 as the hostname of the admin node) { \"authentication\": false, \"clustered\": true, \"ssl\": false, \"adminNode\": true, \"developmentMode\": false, \"storageContextNames\": [ \"default\" ], \"contextNames\": [ \"_admin\", \"default\" ], \"name\": \"axonserver-1\", \"hostName\": \"axonserver-1\", \"internalHostName\": \"axonserver-1\", \"grpcInternalPort\": 8224, \"grpcPort\": 8124, \"httpPort\": 8024 } All admin nodes are member of the “_admin” context, and it is used to distribute cluster structure data in the same way as it distributes Events, Commands, and Queries. The UI console displays the newly initialized admin node as shown below (assuming axonserver-1 as the name of the node) The other nodes can be added to the cluster using the “register-node” command, pointing it at an admin node already in the cluster. On every other node, the following command needs to be executed by pointing to the admin node created above. $ ./axonserver-cli.jar register-node -h axonserver-1 Assuming that the additional node being added has its hostname as \"axonserver-2\", if the REST API operation at \"/v1/public/me\" is run against the second node, the following response is shown. { \"authentication\": false, \"clustered\": true, \"ssl\": false, \"adminNode\": true, \"developmentMode\": false, \"storageContextNames\": [ \"default\" ], \"contextNames\": [ \"_admin\", \"default\" ], \"name\": \"axonserver-2\", \"hostName\": \"axonserver-2\", \"internalHostName\": \"axonserver-2\", \"grpcInternalPort\": 8224, \"grpcPort\": 8124, \"httpPort\": 8024 } To get the complete details of the cluster configuration, the REST API operation at \"/v1/public/context\" if run against the admin node. A sample response is shown below (assuming that the hostnames of the admin node and the additional node are \"axonserver-1\" and \"axonserver-2\") [ { \"metaData\": {}, \"nodes\": [\"axonserver-1\", \"axonserver-2\"], \"leader\": \"axonserver-1\", \"pendingSince\": 0, \"changePending\": false, \"roles\": [ { \"role\": \"PRIMARY\", \"node\": \"axonserver-1\" }, { \"role\": \"PRIMARY\", \"node\": \"axonserver-2\" } ], \"context\": \"_admin\" }, { \"metaData\": {}, \"nodes\": [\"axonserver-1\", \"axonserver-2\"], \"leader\": \"axonserver-1\", \"pendingSince\": 0, \"changePending\": false, \"roles\": [ { \"role\": \"PRIMARY\", \"node\": \"axonserver-1\" }, { \"role\": \"PRIMARY\", \"node\": \"axonserver-2\" } ], \"context\": \"default\" } ] The cluster configuration information depicts: The leader of the cluster The contexts available within the cluster (in this case \"_admin\" and \"default\") The nodes within the a cluster The roles that the nodes play within a specific context (in this case PRIMARY) The UI console displays the newly initialized admin node as shown below (assuming axonserver-1 as the name of the node) A production grade setup would require more advanced configuration. For example an Axon Server node can be assigned to play different roles within a cluster - it may serve as an admin node, providing services to configure the cluster and keep it running, next to the “regular” event store and messaging functions. It can also be configured to only service specific *contexts* in various roles. Contexts are comparable to logical databases in a RDBMS. They allow for strong separation without requiring deploying and managing full instances. This is detailed in the Clustering and the Contexts sections. This completes a quick basic setup of an Axon Server cluster using the default configurations. To summarize, _*The Axon Server is not available for event storage or message routing unless a cluster is setup. By default, access control and SSL is not enabled. The basic setup involves the creation of an Axon Server cluster - This involves configuring an Admin Node and registering additional nodes to the cluster. The default ports are 8024/8124 and 8224. These values can be changed via configuration. The name and hostname default to the hostname of the system Axon Server is running on. These values can be changed via configuration ( “axoniq.axonserver.name” / “axoniq.axonserver.hostname”). The \"internalHostName\" and \"grpcInternalPort\" are used for internal communication between the nodes of an Axon Server cluster. These values can be changed via configuration. A new feature available since 4.3 is that you can use configuration setting “axoniq.axonserver.autocluster.first” (in the axonserver.properties file) to provide it with the hostname of a known Admin node. If that name happens to be the hostname of the node starting up, it will automatically perform the “init-cluster” command on itself if needed. If the name is not the current hostname, it will schedule a task to perform the “register-node” command, which will keep trying until successful, which is when the first node is itself available and initialized. In addition if needed, you can use the “axoniq.axonserver.autocluster.contexts” setting to provide a comma-separated list of contexts to create or join. (The “_admin” context needs to be explicitly added if you want all nodes to become admin nodes.) Axon Server creates a folder for each context under a directory named “data”. This is where the events and snapshots for the contexts will be stored. The location can be customized using the “axoniq.axonserver.event.storage” and “axoniq.axonserver.snapshot.storage” settings. Do note that the location customization is applicable for all contexts, you cannot customize it for a specific context. Axon Server will also create a folder for each context under a directory named \"log\". This is where the replication log for each context is stored. The replication log stores context data as it comes in and is distributed. The storage location for the replication log can be adjusted using the “axoniq.axonserver.replication.log-storage-folder” property. Again, this is applicable for all contexts. There is also a small database in the “data” directory, which is referred to as the “ControlDB”, and is used for administrative data. This location you can customize by using the “axoniq.axonserver.controldb-path” setting. The configuration section details the steps required to setup the storage required for Axon Server including some advanced options. As Axon Server is an event store and may contain sensitive data it is always a good practice to enable access control in production and production-like environments. The Access Control section details the steps required to set up access control in Axon Server. Axon Server supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of Axon Server SE’s network traffic - From Axon Framework client applications to Axon Server as well as between the various nodes of an Axon Server EE cluster. The SSL section details the steps required to setup SSL in Axon Server.","title":"Axon Server","component":"axon-server-reference","version":"v2024.1","name":"index","url":"/axon-server-reference/v2024.1/axon-server/installation/local-installation/","titles":[{"text":"Binaries","hash":"_binaries","id":1},{"text":"Setting up Axon Server","hash":"_setting_up_axon_server","id":2},{"text":"Non-clustered","hash":"_non_clustered","id":3},{"text":"Clustered","hash":"_clustered","id":4},{"text":"Cluster setup","hash":"_cluster_setup","id":5},{"text":"Provision Axon Server nodes","hash":"_provision_axon_server_nodes","id":6},{"text":"Admin node initialization","hash":"_admin_node_initialization","id":7},{"text":"Additional nodes","hash":"_additional_nodes","id":8},{"text":"Auto-clustering","hash":"auto-clustering","id":9},{"text":"Storage","hash":"_storage","id":10},{"text":"Access Control","hash":"_access_control","id":11},{"text":"SSL","hash":"_ssl","id":12}]},"186":{"id":186,"text":"","title":"Axon Server Configuration","component":"axon-server-fundamentals","version":"master","name":"configuration","url":"/axon-server-fundamentals/configuration/","titles":[]},"187":{"id":187,"text":"","title":"Axon Server Fundamentals","component":"axon-server-fundamentals","version":"master","name":"index","url":"/axon-server-fundamentals/","titles":[]},"188":{"id":188,"text":"","title":"Axon Server Installation","component":"axon-server-fundamentals","version":"master","name":"installation","url":"/axon-server-fundamentals/installation/","titles":[]},"189":{"id":189,"text":"","title":"What’s Axon Server","component":"axon-server-fundamentals","version":"master","name":"overview","url":"/axon-server-fundamentals/overview/","titles":[]},"190":{"id":190,"text":"Filters are expressions that evaluate to either true or false. Basic filter operations do comparisons between fields and other fields or fixed values. The following are samples of valid filters: token > 1000000 aggregateIdentifier = \"1234\" payloadType = aggregateType Basic operators: = > >= 100) Counts the number of events with aggregateSequenceNumber > 100.","title":"Filters","component":"axon-server-query-language-guide","version":"master","name":"filters","url":"/axon-server-query-language-guide/filters/","titles":[{"text":"Basic operators","hash":"_basic_operators","id":1},{"text":"Logical operators","hash":"_logical_operators","id":2},{"text":"Arithmetic operators","hash":"_arithmetic_operators","id":3},{"text":"Matching functions","hash":"_matching_functions","id":4},{"text":"Examples","hash":"_examples","id":5}]},"191":{"id":191,"text":"The Axon Server query language processes a stream of events. Processing steps include filters and projections, defined in a pipeline. The query engine executes each step in the pipeline and forwards the result to the next step. The result of the last step is returned. The idea is based on the UNIX pipe commands. The input of a query is a stream of events with the following fields: token - a unique sequence number for an event aggregateIdentifier - the unique identifier for the aggregate aggregateSequenceNumber - sequence number of the event for the aggregate aggregateType - the type of the aggregate payloadType - the type of the payload of the event payloadRevision - version number of the payload type payloadData - content of the event, the format of this depends on the serializer used to store the data timestamp - time when the event was created (milliseconds since 1970/01/01).","title":"Principles","component":"axon-server-query-language-guide","version":"master","name":"index","url":"/axon-server-query-language-guide/","titles":[]},"192":{"id":192,"text":"xpath(data, expression [,resultType]) - performs an XPath function on the first parameter value. Data must contain XML (so depends on the serializer used for events). The resultType may be specified to indicate if you want to have an XML node, an XML nodelist, a string or a number returned. jsonpath(data, expression) - performs a jsonpath function on the first parameter value. Data must contain JSON formatDate(data, format [,timezone]) - converts a timestamp value to a readable date concat(listData, delimiter) - concatenates all elements in the listData to a single string, with delimiter between the elements. left( data, n ) - returns the first n characters from data. If data is shorter than n it returns the whole string, right( data, n ) - returns the last n characters from data. If data is shorter than n it returns the whole string, length( data ) - returns the length of the string lower( data ) - converts string to lowercase upper( data) - converts string to lowercase substring( data, first [, last]) - returns substring from first to end of string or last (exclusive). If string is shorter than first it returns an empty string. hour(timestamp) minute(timestamp) day(timestamp) week(timestamp) month(timestamp) year(timestamp) select( xpath(payloadData, \"//customerId\") as customerId) Gets the first customerId in the payloadData. xpath(payloadData, \"count(//customerId)\", \"NUMBER\") > 10 Returns events with more than 10 customerId elements in the payload. select(jsonpath(payloadData, \"$.book[*].title\") as titles) Gets the titles for all books.","title":"Other Functions","component":"axon-server-query-language-guide","version":"master","name":"other-functions","url":"/axon-server-query-language-guide/other-functions/","titles":[{"text":"Examples","hash":"_examples","id":1}]},"193":{"id":193,"text":"Expressions can be put together in a pipeline aggregateType contains \"abcde\" | groupby(payloadType, count()) or even more steps: aggregateType contains \"abcde\" | groupby(payloadType, count() as count) | count > 10","title":"Pipelines","component":"axon-server-query-language-guide","version":"master","name":"pipelines","url":"/axon-server-query-language-guide/pipelines/","titles":[]},"194":{"id":194,"text":"Projection functions change the shape of the data. The following projection functions are available: select - map each element in the stream to a new element, for instance with less fields or with calculated fields. groupby - map elements with the same value for the group by fields to a new element. count - counts the number of elements in the stream, when used with a parameter counts the number of non-null/true fields for the parameter value. min - minimum value for the paramater value max - maximum value for the paramater value avg - average value for the paramater value The count, min, max and avg functions can also be used inside a group by.","title":"Projections","component":"axon-server-query-language-guide","version":"master","name":"projections","url":"/axon-server-query-language-guide/projections/","titles":[]},"195":{"id":195,"text":"When an event store contains many millions of events it is usually not required to search through all the events. You can add time constraints to the pipeline to only search recent events. last X minutes last X hours last X days last X weeks last X months last X years last 2 minutes Returns all events from the last 2 minutes. aggregateSequenceNumber = 0 | last hour All events with aggregateSequenceNumber 0 for the last hour. last minute | groupby(payloadType, count()) groupby(payloadType, count()) | last minute These 2 are the same. The time constraint may be anywhere in the pipeline, always applies to the timestamp of the event.","title":"Time Constraints","component":"axon-server-query-language-guide","version":"master","name":"time-constraints","url":"/axon-server-query-language-guide/time-constraints/","titles":[]},"196":{"id":196,"text":"Axon Server Enterprise is now listed in Google GCP Marketplace. This allows your team to deploy a single instance or a 3-node cluster Axon Server in your Google Project. This guide is intended for engineers, developers, and system administrators who want to install Axon Server on the Google Marketplace. The guide covers Requirements for your Google Project An overview of required and recommended fields How to secure your Axon Server installation Basic maintenance guide for your cluster The network is the backbone for communication between Axon Server Enterprise nodes and applications. During the installation process, a DNS entry is created for each Axon Server node: this is used to configure and set up communication between the nodes. VPC Network and Subnetwork Your Google project must have an existing VPC Network and Subnetwork configured for the zones in where you want to install your cluster: you can define one using the Google Console UI Cloud DNS Zone Your Google project must have a Cloud DNS Zone configured: you can define one using the Google Console UI. Write down the name of your Cloud DNS Zone : it will be requested in a form field during the installation process. Cloud Resource Manager API The deployment uses Cloud Resource Manager API, therefore this API must be enabled before proceeding with the installation. Secret manager API If you plan to store your sensitive data in Google Secret Manager, you must enable the API first. The following is a list of fields that you will be prompted to fill in during your installation. Deployment name This is used in the installation to give the deployment a name and to distinguish it from other deployments in the same Google project. It is also used as a PREFIX to name resources used by the deployment. Deployment Service Account / Service account ID / Service Account description Used by Google as the user to run Terraform: it requires several admin roles because they are used to create resources in the project itself. Cloud DNS Zone of your network domain (mandatory / prerequisite) This is a prerequisite that must be created in the project beforehand. It is used to create DNS entries for instances, for example axonserver-1.mydomain.net, axonserver-2.mydomain.net axonserver-3.mydomain.net. These addresses are used by the configuration for internal calls and can be used by the user to connect to the VM from a running Axon Framework application. Internal Network Domain This is the domain to append to the hostname of the VM’s. It should match the value the user entered in the DNS zone details (for example, mydomain.net). Enable Google Ops Agent This is a non-mandatory option, but recommended. You may incur in additional charges from Google for using this service. Google Ops Agent is the Google way to collect logs and metrics, and is displayed in the dashboard / log explorer. Use Google Secret Manager This is a non-mandatory option, but recommended. You may incur in additional charges from Google for using this service. If selected, sensitive data such as the admin password (randomly generated during the installation) will be stored in the Google Secrets Manager, where only accounts with specific permissions can access and read/change the value. If not selected these values will be stored in the VM Metadata : these values can be read by anyone who has access to the Google Dashboard, even users with lower permissions (such as editor role). After the installing Axon Server Enterprise three new VMs will be available in your project. You can gather the list of available VMs using the following command gcloud compute instances list --project=YOUR_PROJECT_ID If you want to adjust some properties for your cluster, you can ssh into your machine with the following command gcloud compute ssh YOUR_INSTANCE_NAME-0 --project=YOUR_PROJECT_ID --zone=YOUR_ZONE You can connect to the AxonServer UI by opening a tunnel on port 8024 to one of the instances in your cluster, and then opening http://localhost:8024 in your browser. gcloud compute start-iap-tunnel YOUR_INSTANCE_NAME-0 --project=YOUR_PROJECT_ID --zone=YOUR_ZONE 8024 --local-host-port=localhost:8024 If you enabled Google Ops Agent during the installation, you can check the logs by going to Google Logs Explorer and selecting axonserver in the _Select log names dropdown. The Observability panel of your VMs will display important information such as CPU Utilization, Memory Utilization, Disk Space Utilization, Disk IOPS and details of running processes If you haven’t enabled the Google Ops Agent option, you can check the logs and VM resources using Axonserver UI or by opening an ssh connection to the VM. Axon Server is installed as a Linux package in your VM instance. You can then update it as a regular package, using sudo apt update axonserver -y After the update process, you will need to stop and restart the process. sudo systemctl stop axonserver sudo systemctl start axonserver As a regular Axon Server cluster, we recommend that you update and restart a single instance at a time to ensure that your cluster is running with zero downtime. After each restart, you need to check the health of your cluster. You can do this by looking at one of your AxonServer UIs that is not restarting. By default, your cluster is installed without TLS/SSL enabled. To secure your AxonServer installation and prepare it for production, please consult the Security section of the Axon Server reference guide.","title":"Axon Server Google Marketplace Installation Guide","component":"as-marketplace-installation-guide","version":"main","name":"index","url":"/as-marketplace-installation-guide/main/","titles":[{"text":"Installing Axon Server using Google Marketplace","hash":"_installing_axon_server_using_google_marketplace","id":1},{"text":"Purpose and intended audience","hash":"_purpose_and_intended_audience","id":2},{"text":"Pre-requisites","hash":"_pre_requisites","id":3},{"text":"Required and recommended fields overview","hash":"_required_and_recommended_fields_overview","id":4},{"text":"Basic maintenance of your cluster","hash":"_basic_maintenance_of_your_cluster","id":5},{"text":"Check logs and VMs resources","hash":"_check_logs_and_vms_resources","id":6},{"text":"Update your Axon Server","hash":"_update_your_axon_server","id":7},{"text":"Secure your AxonServer installation","hash":"_secure_your_axonserver_installation","id":8}]},"197":{"id":197,"text":"Welcome to the Axon Synapse Quick Start Guide. Here, you’ll find everything necessary to get started with Axon Synapse and Axon Server. Axon Synapse is a standalone executable that enables non-Java applications to easily communicate with the Axon Server. This enables developers to send and receive commands, queries, and events from Axon Server using their preferred programming environments, such as: C# .NET Python 3 Python 2 Node.js Typescript Rust … and any language that supports HTTP Axon Synapse works as an HTTP Bridge between third party applications written in any HTTP-capable language to publish and consume (send and receive) commands, queries, and events from the Axon Server. Although developers have created various types of applications using Axon Synapse and Axon Server, it’s best suited for microservices architectures. Axon provides an innovative and powerful way of sensibly evolving to event-driven microservices within a microservices architecture.","title":"Axon Synapse Quick Start Guide","component":"synapse-quick-start","version":"v0.11","name":"index","url":"/synapse-quick-start/v0.11/","titles":[{"text":"Introducing Axon Synapse","hash":"_introducing_axon_synapse","id":1},{"text":"Axon Synapse architecture overview","hash":"_axon_synapse_architecture_overview","id":2}]},"198":{"id":198,"text":"To quickly get started with Axon Synapse, here are all the steps necessary to download and install Axon Synapse, Axon Server, and a basic demo application. Both Axon Synapse and Axon Server are standalone Java executables. Therefore, you need a development environment that supports Java and Maven to accomplish the steps in this guide. The \"AxonIQ Quick Start Toolkit\" package is available at https://download.axoniq.io/quickstart/AxonQuickStart.zip. The zip file contains the Axon Server (Standard Edition) and a sample Giftcard application, which you can use as an example application. Move the AxonQuickStart.zip to your preferred location and unzip the file. The first step is to get the Axon Server up and running since it’s the central point of communication in this example. To run the Axon Server, open a terminal window and cd to the folder where you unzipped the Quick Start file and execute the following command $ java -jar AxonServer/axonserver-{VERSION}.jar If your system can correctly execute JAR files, you should see the following status message on the command terminal. Figure 1. A screenshot of successfully started Axon Server Now you can visit the Axon Server’s Dashboard running on port 8024. It should look like the screenshot below. Figure 2. A screenshot of Axon Server’s Dashboard Click on the \"Overview\" tab on the left side to see a list of applications connected to your Axon Server instance. Figure 3. A screenshot of Axon Server’s overview page You only have the Axon Server running right now. Before you can run the Giftcard demo application, you need to build it. Use your preferred IDE or build tool to do so. Then execute the JAR file in a new terminal window. $ java -jar ./giftcard-demo-{VERSION}.jar --server.port=8081 In the command above, you’re telling the Giftcard app to use port 8081. Otherwise, it would bind to its default port (8080) which would conflict with Axon Synapse. You should see the following status message on the command terminal if the application starts correctly. Figure 4. A screenshot of successfully started Giftcard application Now that the Giftcard app is running, look again at the Axon Server’s Dashboard on port 8024. Figure 5. A screenshot of Axon Server’s overview page You can see that the Giftcard app has successfully connected to Axon Server. The final step is to download and install Axon Synapse. The Axon Synapse is available for download at https://download.axoniq.io/axonserver/axon-synapse.zip. The zip file contains the Axon Synapse as an executable JAR file. Move the JAR file to your preferred location. To run the Axon Synapse, open a terminal window, and cd to the folder where you moved the JAR file, and execute the JAR file. $ java -jar axon-synapse.jar You should see the following status message on the command terminal. Figure 6. A screenshot of successfully started Synapse application Now that you have Axon Synapse running, take one final look at the Axon Server’s Dashboard on port 8024. Figure 7. A screenshot of Axon Server’s overview page Now you have two applications running and connected to Axon Server: the Giftcard app and Axon Synapse. As previously mentioned, Axon Synapse runs on port 8080, so you can open a browser window to port 8080 to view the admin pages for Axon Synapse. Figure 8. A screenshot of Synapse’s admin interface You’ve just accomplished all the steps necessary to set up and configure Axon Synapse with Axon Server and a demo application.","title":"Installation","component":"synapse-quick-start","version":"v0.11","name":"installation","url":"/synapse-quick-start/v0.11/installation/","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Download the AxonIQ quick start toolkit","hash":"_download_the_axoniq_quick_start_toolkit","id":2},{"text":"Run the Axon Server","hash":"_run_the_axon_server","id":3},{"text":"Run the Giftcard demo application","hash":"_run_the_giftcard_demo_application","id":4},{"text":"Download the Axon Synapse","hash":"_download_the_axon_synapse","id":5},{"text":"Run the Axon Synapse","hash":"_run_the_axon_synapse","id":6}]},"199":{"id":199,"text":"You learned how to send messages to Axon Synapse in the previous section. In this one, you’ll listen to messages from Axon Synapse. Again the three message types you can listen for are commands, queries, and events. To accomplish the steps in this guide, you need to download and install Axon Synapse, Axon Server, and the Giftcard demo application. Before you continue, please complete the steps detailed on the Installation page. Additionally, you need to download and install Postman. Go to Postman’s download page for detailed instructions. When you send messages to Axon Synapse, you send HTTP requests. To receive messages, Axon Synapse sends HTTP requests to your application. You may create such an application in any language. From Axon Synapse’s perspective, all that matters is that it can receive an HTTP request and process the message in the payload. For the purposes of this example, you’ll simulate your application by using Postman’s mock server feature. A command message is a request to perform a specific operation. Axon Synapse sends such messages via regular HTTP requests. Select Mock Servers in Postman’s sidebar, then select +. Figure 1. A screenshot of the first step of creating the command handling mock in the Postman Next, give it a name. You can leave default values in other options. Figure 2. A screenshot of the second step of creating the command handling mock in the Postman The new mock server is ready and waiting for incoming messages. Figure 3. A screenshot of the command handling mock in the Postman You must inform Axon Synapse what commands it should send to the application (the mock server in this case). Sending a registration request to Axon Synapse, as demonstrated below, is one way to do it. (1) (2) (3) POST http://localhost:8080/v1/contexts/default/handlers/commands Content-Type: application/json { \"names\": [ \"io.axoniq.demo.giftcard.api.IssueCardCommand\" (4) ], \"endpoint\": \"https://cb5b8a7d-d2d1-4583-a6bc-31c70e9d0593.mock.pstmn.io/gift-cards\", (5) \"endpointType\": \"http-raw\", (6) \"clientId\": \"Postman\", (7) \"componentName\": \"Giftcard\" (8) } 1 POST - indicates a POST request 2 http://localhost:8080 - the instance of Axon Synapse 3 v1/contexts/default/handlers/commands - registering a command handler 4 io.axoniq.demo.giftcard.api.IssueCardCommand - the command name 5 The command handler endpoint, in this example the Postman mock 6 The command handler endpoint type (http-raw means the payload is in the request’s body) 7 The unique identifier of the command handling application instance 8 The application of the application component Alternatively, you can use Axon Synapse’s UI to register the handler. Figure 4. A screenshot of registering the command handling mock in the Synapse UI If you configured the mock server correctly, there are now two command handlers in the system for the IssueCardCommand message. There is one in the Giftcard demo app and the Postman mock server you created. As new command messages of type IssueCardCommand arrive, they’re load-balanced between the two handlers. Go to the admin page for the Giftcard demo app and issue several new gift cards. Doing so creates and sends several IssueCardCommand command messages. At least some of them should go to Postman mock server. Once it receives such a command, you should see the content of the command and its meta-data, as on the screen below. Figure 5. A screenshot of a command captured by the Postman mock A query message is a request for information and so the handler must respond. Responding to a query message received from Axon Synapse is nothing more than replying to the HTTP request. You’ll use a Postman mock server again to simulate the behavior of an HTTP application. Select Mock Servers in Postman’s sidebar, then select +. Figure 6. A screenshot of the first step of creating the query handling mock in the Postman For the Response Body, you can use the template sown below. (1) (2) http-based-gift-card (3) 155 (4) 155 (5) 1 The response with list of gift cards 2 The first gift card 3 The id property 4 The initialValue property 5 The remainingValue property Proceed to the next step and give the mock a name. Figure 7. A screenshot of the second step of creating the query handling mock in the Postman Finally, you can listen to requests: Figure 8. A screenshot of the query handling mock in the Postman Go to the Collections tab and add headers to the response: AxonIQ-PayloadType: java.util.ArrayList Figure 9. A screenshot of the header view for query handling mock in the Postman You need to register the query handler with Axon Synapse as you did with the command handlers. The code below shows an example of doing so via the HTTP API. (1) (2) (3) POST http://localhost:8080/v1/contexts/default/handlers/queries Content-Type: application/json { \"names\": [ \"io.axoniq.demo.giftcard.api.FetchCardSummariesQuery\" (4) ], \"endpoint\": \"https://ac365f15-964b-4083-af93-1536f297fd7e.mock.pstmn.io/list-gift-cards/\", (5) \"endpointType\": \"http-raw\", (6) \"clientId\": \"Postman\", (7) \"componentName\": \"Giftcard\" (8) } 1 POST - indicates a POST request 2 http://localhost:8080 - the instance of Axon Synapse 3 v1/contexts/default/handlers/queries - creating a query handler 4 io.axoniq.demo.giftcard.api.FetchCardSummariesQuery - the query name 5 The query handler endpoint, in this example the Postman mock 6 The query handler endpoint type (http-raw means the payload is in the request’s body) 7 The unique identifier of the command handling application instance 8 The application of the application component Alternatively, you can use Axon Synapse’s UI to register the handler. Figure 10. A screenshot of registering the query handling mock in the Synapse UI Again, if you configured everything correctly, there are two query handlers for the FetchCardSummariesQuery - the one from the Giftcard demo app and the one from Postman’s mock server. Therefore, routing a query to the mock server may take several tries. You can test the query handler using the Giftcard demo app or Synapse HTTP query. Figure 11. A screenshot of a query result returned by the Postman mock in the Giftcard demo application UI Axon Synapse can send events to your application through HTTP requests, one by one, ordered by the sequence index. Create a new Mock Server in the Postman. Figure 12. A screenshot of the first step of creating the event handling mock in the Postman Figure 13. A screenshot of the second step of creating the event handling mock in the Postman Figure 14. A screenshot of the event handling mock in the Postman As with the other message types, you must register the event handler in Axon Synapse. Below is an example of the HTTP API approach. (1) (2) (3) POST http://localhost:8080/v1/contexts/default/handlers/events Content-Type: application/json { \"names\": [ \"io.axoniq.demo.giftcard.api.CardIssuedEvent\" (4) ], \"endpoint\": \"https://1d5cae3d-b328-4565-a36b-2d4a49de79de.mock.pstmn.io/card-issued\", (5) \"endpointType\": \"http-raw\", (6) \"clientId\": \"Postman\", (7) \"componentName\": \"Giftcard\" (8) } 1 POST - indicates a POST request 2 http://localhost:8080 - the instance of Axon Synapse 3 v1/contexts/default/handlers/events - creating an event handler 4 io.axoniq.demo.giftcard.api.CardIssuedEvent - the event type 5 The event handler endpoint, in this example the Postman mock 6 The event handler endpoint type (http-raw means the payload is in the request’s body) 7 The unique identifier of the event-handling application instance 8 The application of the application component Similarly to the earlier examples, you can use Synapse UI. Figure 15. A screenshot of registering the event handling mock in the Synapse UI As soon as you register the event handler, you should see the events in Postman’s mock server window. Figure 16. A screenshot of an event captured by the Postman mock","title":"Receive Messages with Postman","component":"synapse-quick-start","version":"v0.11","name":"postman-receive","url":"/synapse-quick-start/v0.11/postman-receive/","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Postman mock servers","hash":"_postman_mock_servers","id":2},{"text":"Handle a command message","hash":"_handle_a_command_message","id":3},{"text":"Create a dedicated mock server","hash":"_create_a_dedicated_mock_server","id":4},{"text":"Configure Axon Synapse to send commands to the mock server","hash":"_configure_axon_synapse_to_send_commands_to_the_mock_server","id":5},{"text":"Confirm it works","hash":"_confirm_it_works","id":6},{"text":"Handle a query message","hash":"_handle_a_query_message","id":7},{"text":"Create a dedicated mock server","hash":"_create_a_dedicated_mock_server_2","id":8},{"text":"Configure Axon Synapse to send queries to the mock server","hash":"_configure_axon_synapse_to_send_queries_to_the_mock_server","id":9},{"text":"Confirm it works","hash":"_confirm_it_works_2","id":10},{"text":"Handle an event message","hash":"_handle_an_event_message","id":11},{"text":"Create a dedicated mock server","hash":"_create_a_dedicated_mock_server_3","id":12},{"text":"Configure Axon Synapse to send events to the mock server","hash":"_configure_axon_synapse_to_send_events_to_the_mock_server","id":13},{"text":"Confirm it works","hash":"_confirm_it_works_3","id":14}]},"200":{"id":200,"text":"Postman is popular development tool allowing to interact with web applications over HTTP. You can use it to communicate with Axon Synapse, to send commands, queries, and events to Axon Server. To accomplish the steps in this guide, you need to download and install Axon Synapse, Axon Server, and the Giftcard demo application. Please complete the steps detailed on the Installation page before you continue. Additionally, you need to download and install Postman. Go to Postman’s download page for detailed instructions. In order to manage the Giftcard application, browse to the admin page for the application on port 8081. Figure 1. A screenshot of the Giftcard demo application UI By default, the Giftcard application starts up without any gift cards created, however, by using the UI shown above, you can create sample cards with balances. To experiment with sending a command over HTTP, you’re going to create a new gift card for $55 with a cardID of, \"sample-card-6\". Below are the details of the HTTP POST request that Axon Synapse expects. (1) (2) (3) (4) POST http://localhost:8080/v1/contexts/default/commands/io.axoniq.demo.giftcard.api.IssueCardCommand Content-Type: application/xml (5) (6) sample-card-6 (7) 55 (8) 1 POST - indicates a POST request 2 http://localhost:8080 - the instance of Axon Synapse 3 /v1/contexts/default/commands/ - sending a command 4 io.axoniq.demo.giftcard.api.IssueCardCommand - the command name 5 The command payload is in XML format 6 The command payload type (the same as the command name in this case) 7 The value of the id field 8 The value of the amount field The screenshot below shows how you can configure this request in Postman: Figure 2. A screenshot of the Postman UI After sending the request, return back to the admin page for the Giftcard demo app to see that the application issued a new gift card (with a balance of 55$). Figure 3. A screenshot of the Giftcard demo application UI You’ve just accomplished all the steps to send a command using an ordinary HTTP POST request to Axon Synapse. Axon Synapse (in turn) relayed the message to Axon Server, which gave the command message to its appropriate command handler. To experiment with sending a query over HTTP, list the gift cards you’ve created in the previous section. Read the listing below to see the HTTP POST request that Axon Synapse expects. (1) (2) (3) (4) POST http://localhost:8080/v1/contexts/default/queries/io.axoniq.demo.giftcard.api.FetchCardSummariesQuery AxonIQ-PayloadType: io.axoniq.demo.giftcard.api.FetchCardSummariesQuery (5) AxonIQ-ResponseType: io.axoniq.demo.giftcard.api.CardSummary (6) AxonIQ-ResponseCardinality: multiple (7) Content-Type: application/xml (8) (5) 0 (9) 10 (10) 1 POST - indicates a POST request 2 http://localhost:8080 - the instance of Axon Synapse 3 /v1/contexts/default/queries/ - sending a query 4 io.axoniq.demo.giftcard.api.FetchCardSummariesQuery - the query name 5 The payload type 6 The response payload type 7 Expect multiple responses (list) 8 The query payload is in XML format 9 The value of the offset field 10 The value of the limit field The screenshot below shows how you can configure this request in Postman: Figure 4. A screenshot of the Postman UI To experiment with publishing an event over HTTP, you’ll redeem an amount from an already existing gift card. Read the listing below to see the HTTP POST request that Axon Synapse expects. (1) (2) (3) (4) POST http://localhost:8080/v1/contexts/default/events/io.axoniq.demo.giftcard.api.CardRedeemedEvent AxonIQ-AggregateId: sample-card-6 (5) AxonIQ-AggregateType: Giftcard (6) AxonIQ-SequenceNumber: 1 (7) Content-Type: application/json (8) { \"id\": \"sample-card-6\", (9) \"amount\": 4 (10) } 1 POST - indicates a POST request 2 http://localhost:8080 - the instance of Axon Synapse 3 /v1/contexts/default/events/ - sending a query 4 io.axoniq.demo.giftcard.api.CardRedeemedEvent - the event name 5 The aggregate ID 6 The aggregate type 7 The event sequence number 8 The event payload is in JSON format 9 The value of the id field 10 The value of the amount field The screenshot below shows how you can configure this request in Postman: Figure 5. A screenshot of the Postman UI Return to the admin page for the Giftcard demo app to confirm the system deducted the amount from the gift card. Figure 6. A screenshot of the Giftcard demo application UI Alternatively, you can look at the Search Page on the Axon Server Dashboard Figure 7. A screenshot of Axon Server’s Dashboard","title":"Send Messages with Postman","component":"synapse-quick-start","version":"v0.11","name":"postman-send","url":"/synapse-quick-start/v0.11/postman-send/","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Examining the Giftcard demo application","hash":"_examining_the_giftcard_demo_application","id":2},{"text":"Send a command from Postman to Giftcard demo via Axon Synapse","hash":"_send_a_command_from_postman_to_giftcard_demo_via_axon_synapse","id":3},{"text":"Send a query from Postman to Giftcard demo via Axon Synapse","hash":"_send_a_query_from_postman_to_giftcard_demo_via_axon_synapse","id":4},{"text":"Publish an event from Postman to Giftcard demo via Axon Synapse","hash":"_publish_an_event_from_postman_to_giftcard_demo_via_axon_synapse","id":5}]},"201":{"id":201,"text":"When using Synapse there are three different areas of access control: Access to the Synapse API or user interface Access to Axon Server for sending messages Access to the handlers for receiving messages To control access to the Synapse API for registering handlers, the administrator must enable access control through the synapse.auth.enabled property. If access control is on, all the APIs that work on Synapse configuration expect clients to provide either a valid username and password combination or a valid token. A valid username/password combination is such that exists in Axon Server so it can verify the user has the correct roles for the request. Same for the token, it must exist in Axon Server with the required role. The required roles for the specific request types are: GET ADMIN@_admin, VIEW_CONFIGURATION@_admin (to get information from any context), ADMIN@context, USE_CONTEXT@context (to get information from a specific context) other ADMIN@_admin, ADMIN@context If you are using Axon Synapse in combination with Axon Server Standard edition the token must be the token specified in the Axon Server axoniq.axonserver.accesscontrol.token property for the GET operations, and the axoniq.axonserver.accesscontrol.admin-token property for the other requests. When a client sends a request to Synapse, it needs to provide a token to authenticate itself. The client must provide this token through the X-API-KEY header. The token must be valid in Axon Server, for an application to execute the request type in the specified context. The application may provide this header, even if the synapse.auth.enabled property is false. If you are using Axon Synapse in combination with Axon Server Standard edition the token must be the token specified in the Axon Server axoniq.axonserver.accesscontrol.token property. When you register a request handler in Synapse, you can specify two types of tokens: client token server token The client token is the token that Synapse passes to the request handler. This way you can protect the request handler from illegal access. Axon Synapse passes the client token to the request handler as a Bearer token in the Authentication header. Axon Server verifies the server token on requests to register the handler. It needs to be a valid application token, with a role that allows registering that type of handler. For instance, to register a command handler, you need the token of an application to contain one of the following roles in Axon Server: SUBSCRIBE_COMMAND_HANDLER, WRITE, or USE_CONTEXT. If you are using Axon Synapse in combination with Axon Server Standard edition the token must be the token specified in the Axon Server axoniq.axonserver.accesscontrol.token property.","title":"Access Control","component":"synapse-reference","version":"v0.11","name":"access-control","url":"/synapse-reference/v0.11/access-control/","titles":[{"text":"Access to the Axon Synapse API","hash":"_access_to_the_axon_synapse_api","id":1},{"text":"Sending messages","hash":"_sending_messages","id":2},{"text":"Receiving messages","hash":"_receiving_messages","id":3}]},"202":{"id":202,"text":"","title":"Aggregates","component":"synapse-reference","version":"v0.11","name":"aggregates","url":"/synapse-reference/v0.11/aggregates/","titles":[]},"203":{"id":203,"text":"While these configuration options are still valid, please migrate to the new ones specified below. In future releases, these configuration options might no longer exists. Comma-separated list of Axon Servers. The property is deprecated. Please use synapse.axonServer.server-list instead. SYNAPSE_SERVERLIST localhost Whether Axon Server connection is TLS encrypted The property is deprecated. Please use synapse.axonServer.tlsEnabled instead. SYNAPSE_USETLS Path to the file with a certificate The property is deprecated. Please use synapse.axonServer.trustManagerFile instead. SYNAPSE_CERTIFICATECHAIN Comma-separated list of known Axon Server instances. See \"TLS for outgoing connections to AxonServer\" below for TLS settings SYNAPSE_AXONSERVER_SERVERLIST localhost:8124 gRPC max inbound message size SYNAPSE_AXONSERVER_MAXMESSAGESIZE 4MB HTTP port of Axon Server. See \"TLS for outgoing connections to AxonServer\" below for TLS settings SYNAPSE_AXONSERVERHTTP_PORT 8024 Path in Axon Server used to retrieve information about other synapse instances SYNAPSE_AXONSERVERHTTP_CLIENTSFORCOMPONENTENDPOINTSPATH v1/components/clients Synapse instance identifier as seen by the Axon Server SYNAPSE_CLIENTID JVM process name Synapse component name as seen by the Axon Server SYNAPSE_COMPONENTNAME synapse Synapse client component name as seen by the Axon Server SYNAPSE_CLIENTCOMPONENTNAME synapse-client Duration of inactivity, after which Synapse closes the connection to the Axon Server SYNAPSE_CONNECTIONTIMEOUT 30s The name of the default Axon Server context. It’s applied when the environment doesn’t provide context listing, for example, AS SE or AxonIQ Cloud. SYNAPSE_DEFAULTCONTEXT default Comma-separated list of Axon Server’s REST endpoints for fallback (applies for AS before 2023.0.0) SYNAPSE_HTTPENDPOINTS Context this synapse instance connects to SYNAPSE_INTERNAL_CONTEXT _admin Client id used by this synapse instance. Important if using multiple synapse instances. SYNAPSE_INTERNAL_CLIENTID unspecifiedSynapseInstance Component name used when contacting Axon Server. Should be the same for all synapse instances. SYNAPSE_INTERNAL_COMPONENTNAME synapse Whether Synapse configuration APIs expect clients to provide username/password combination or token SYNAPSE_AUTH_ENABLED false Axon Server access control token. Used by synapse to connect to AxonServer SYNAPSE_AUTH_TOKEN Encryption key for securing sensitive data. It’s not possible to change the key once set without recreating authentication objects. SYNAPSE_AUTH_SENSITIVEDATAENCRYPTIONKEY Whether to enable TLS for connections from synapse to Axon Server via gRPC SYNAPSE_AXONSERVER_TLSENABLED false File containing a trust manager for specifying trust for certificates presented by Axon Server via gRPC SYNAPSE_AXONSERVER_TRUSTMANAGERFILE Whether to enable TLS for connections from synapse to Axon Server via http SYNAPSE_AXONSERVERHTTP_TLSENABLED false File containing a trust manager for specifying trust for certificates presented by Axon Server via http SYNAPSE_AXONSERVERHTTP_TRUSTMANAGERFILE File containing a trust manager for specifying trust for certificates presented by client applications SYNAPSE_SYNAPSEHANDLERSHTTP_TRUSTMANAGERFILES Whether to enable TLS for connections coming to synapse SYNAPSE_SERVER_TLSENABLED false A file containing a key store. Synapse expects either PKCS12 or JKS as a file format SYNAPSE_SERVER_KEYSTOREFILE The password for the selected key store SYNAPSE_SERVER_KEYSTOREPASSWORD The type of the selected key store. Synapse expects either PKCS12 or JKS SYNAPSE_SERVER_KEYSTORETYPE Allowed origins as defined in Cross-Origin Resource Sharing (CORS) SYNAPSE_SECURITY_CORSALLOWEDORIGINS * The number of events the Synapse is pre-fetching SYNAPSE_EVENT_STREAMING_BUFFERSIZE 100 Interval at which Synapse tries to reconnect to Axon Server for subscribing to streams to receive updates for event handlers. SYNAPSE_EVENTHANDLER_SUBSCRIPTIONRETRYINTERVAL 2s Used storage backend. Valid values are axonserver and local. Refer to Storage. SYNAPSE_STORAGE_TYPE local Context to use when using axonserver as the storage backend SYNAPSE_STORAGE_CONTEXT synapse Component-name to use when using axonserver as the storage backend. Has to be the same on all Synapse instances. SYNAPSE_STORAGE_COMPONENTNAME synapse-storage Minimum amount of events an event-token (an event processor) needs to have progressed before it stores progress back to configuration. SYNAPSE_STORAGE_MINTOKENOFFSET 100 Authentication token used for the storage component to connect to Axon Server. This may be different from the system token used. SYNAPSE_STORAGE_TOKEN Interval at which Synapse retries to contact Axon Server for the first time to retrieve storage-related information. SYNAPSE_STORAGE_INITIALSUBSCRIPTION_RETRYINTERVAL 2s Interval at which Synapse retries to contact Axon Server to retrieve storage-related information. SYNAPSE_STORAGE_SUBSCRIPTION_RETRYINTERVAL 2s Ensure these properties are the same on all Synapse instances except you have good reasons to do otherwise. Whether or not to enable balancing of event handlers between synapse instances. Refer to High Availability. SYNAPSE_EVENTHANDLER_BALANCING_ENABLED false Timeout for contacting AS to discover synapse topology SYNAPSE_EVENTHANDLER_BALANCING_SYNAPSEDISCOVERY_TIMEOUT 3s Interval for retrying to contact AS to discover synapse topology SYNAPSE_EVENTHANDLER_BALANCING_SYNAPSEDISCOVERY_RETRYINTERVAL 3s Interval for polling new synapse discovery from AS. If zero, Synapse relies on topology updates via WebSocket instead of polling SYNAPSE_EVENTHANDLER_BALANCING_SYNAPSEDISCOVERY_POLLINTERVAL 0s Specifies the endpoint to use for the WS connection to detect topology updates SYNAPSE_EVENTHANDLER_BALANCING_WEBSOCKET_PLATFORMENDPOINT axonserver-platform-websocket Interval of attempting reconnects of the WS connection SYNAPSE_EVENTHANDLER_BALANCING_WEBSOCKET_RECONNECTINTERVAL 3s Inertia Synapse to changes in configuration. Synapse waits for at least the configured amount of time before applying a bunch of new changes. This allows Synapse to process multiple changes in one go SYNAPSE_EVENTHANDLER_BALANCING_HANDLERRUNINTERTIA 5s Name of the hashing function to use to decide which Synapse instance takes which handler. Valid values are MURMUR3_32, MURMUR3_128, SHA256, SHA512 SYNAPSE_EVENTHANDLER_BALANCING_CONSISTENTHASHINGFUNCTION MURMUR3_32","title":"Configuration","component":"synapse-reference","version":"v0.11","name":"configuration","url":"/synapse-reference/v0.11/configuration/","titles":[{"text":"Configuration properties","hash":"_configuration_properties","id":1},{"text":"Deprecated settings for Axon Server connection","hash":"_deprecated_settings_for_axon_server_connection","id":2},{"text":"synapse.server-list","hash":"_synapse_server_list","id":3},{"text":"synapse.use-tls","hash":"_synapse_use_tls","id":4},{"text":"synapse.certificate-chain","hash":"_synapse_certificate_chain","id":5},{"text":"Axon Server connection","hash":"_axon_server_connection","id":6},{"text":"synapse.axon-server.server-list","hash":"_synapse_axon_server_server_list","id":7},{"text":"synapse.axon-server.max-message-size","hash":"_synapse_axon_server_max_message_size","id":8},{"text":"synapse.axon-server-http.port","hash":"_synapse_axon_server_http_port","id":9},{"text":"synapse.axon-server-http.clients-for-component-endpoints-path","hash":"_synapse_axon_server_http_clients_for_component_endpoints_path","id":10},{"text":"synapse.client-id","hash":"_synapse_client_id","id":11},{"text":"synapse.component-name","hash":"_synapse_component_name","id":12},{"text":"synapse.client-component-name","hash":"_synapse_client_component_name","id":13},{"text":"synapse.connection-timeout","hash":"_synapse_connection_timeout","id":14},{"text":"synapse.default-context","hash":"_synapse_default_context","id":15},{"text":"Security","hash":"_security","id":16},{"text":"synapse.http-endpoints","hash":"_synapse_http_endpoints","id":17},{"text":"Authentication and authorization","hash":"_authentication_and_authorization","id":18},{"text":"synapse.internal.context","hash":"_synapse_internal_context","id":19},{"text":"synapse.internal.client-id","hash":"_synapse_internal_client_id","id":20},{"text":"synapse.internal.component-name","hash":"_synapse_internal_component_name","id":21},{"text":"synapse.auth.enabled","hash":"_synapse_auth_enabled","id":22},{"text":"synapse.auth.token","hash":"_synapse_auth_token","id":23},{"text":"synapse.auth.sensitive-data-encryption-key","hash":"_synapse_auth_sensitive_data_encryption_key","id":24},{"text":"TLS for outgoing connections to AxonServer","hash":"_tls_for_outgoing_connections_to_axonserver","id":25},{"text":"synapse.axon-server.tls-enabled","hash":"_synapse_axon_server_tls_enabled","id":26},{"text":"synapse.axon-server.trust-manager-file","hash":"_synapse_axon_server_trust_manager_file","id":27},{"text":"synapse.axon-server-http.tls-enabled","hash":"_synapse_axon_server_http_tls_enabled","id":28},{"text":"synapse.axon-server-http.trust-manager-file","hash":"_synapse_axon_server_http_trust_manager_file","id":29},{"text":"TLS for outgoing connections client applications","hash":"_tls_for_outgoing_connections_client_applications","id":30},{"text":"synapse.synapse-handlers-http.trust-manager-files","hash":"_synapse_synapse_handlers_http_trust_manager_files","id":31},{"text":"TLS for incoming connections","hash":"_tls_for_incoming_connections","id":32},{"text":"synapse.server.tls-enabled","hash":"_synapse_server_tls_enabled","id":33},{"text":"synapse.server.key-store-file","hash":"_synapse_server_key_store_file","id":34},{"text":"synapse.server.key-store-password","hash":"_synapse_server_key_store_password","id":35},{"text":"synapse.server.key-store-type","hash":"_synapse_server_key_store_type","id":36},{"text":"Other security related settings for synapse","hash":"_other_security_related_settings_for_synapse","id":37},{"text":"synapse.security.cors-allowed-origins","hash":"_synapse_security_cors_allowed_origins","id":38},{"text":"Events","hash":"_events","id":39},{"text":"synapse.event.streaming.buffer-size","hash":"_synapse_event_streaming_buffer_size","id":40},{"text":"synapse.event-handler.subscription.retry-interval","hash":"_synapse_event_handler_subscription_retry_interval","id":41},{"text":"Storage","hash":"_storage","id":42},{"text":"synapse.storage.type","hash":"_synapse_storage_type","id":43},{"text":"synapse.storage.context","hash":"_synapse_storage_context","id":44},{"text":"synapse.storage.component-name","hash":"_synapse_storage_component_name","id":45},{"text":"synapse.storage.min-token-offset","hash":"_synapse_storage_min_token_offset","id":46},{"text":"synapse.storage.token","hash":"_synapse_storage_token","id":47},{"text":"synapse.storage.initial-subscription.retry-interval","hash":"_synapse_storage_initial_subscription_retry_interval","id":48},{"text":"synapse.storage.subscription.retry-interval","hash":"_synapse_storage_subscription_retry_interval","id":49},{"text":"High availability","hash":"_high_availability","id":50},{"text":"synapse.event-handler.balancing.enabled","hash":"_synapse_event_handler_balancing_enabled","id":51},{"text":"synapse.event-handler.balancing.synapse-discovery.timeout","hash":"_synapse_event_handler_balancing_synapse_discovery_timeout","id":52},{"text":"synapse.event-handler.balancing.synapse-discovery.retry-interval","hash":"_synapse_event_handler_balancing_synapse_discovery_retry_interval","id":53},{"text":"synapse.event-handler.balancing.synapse-discovery.poll-interval","hash":"_synapse_event_handler_balancing_synapse_discovery_poll_interval","id":54},{"text":"synapse.event-handler.balancing.web-socket.platform-endpoint","hash":"_synapse_event_handler_balancing_web_socket_platform_endpoint","id":55},{"text":"synapse.event-handler.balancing.web-socket.reconnect-interval","hash":"_synapse_event_handler_balancing_web_socket_reconnect_interval","id":56},{"text":"synapse.event-handler.balancing.handler-run-inertia","hash":"_synapse_event_handler_balancing_handler_run_inertia","id":57},{"text":"synapse.event-handler.balancing.consistent-hashing-function","hash":"_synapse_event_handler_balancing_consistent_hashing_function","id":58}]},"204":{"id":204,"text":"Welcome to the Axon Synapse Reference documentation. A few important parts of this documentation: If you are looking for a quick start, refer to the Quick Start Guide To install synapse, refer to Installation docs. For your implementations of clients, refer to the API documentation.","title":"Axon Synapse Reference Documentation","component":"synapse-reference","version":"v0.11","name":"index","url":"/synapse-reference/v0.11/","titles":[]},"205":{"id":205,"text":"Axon Synapse is available for download at https://download.axoniq.io/axonserver/axon-synapse.zip. The zip file contains Axon Synapse as an executable JAR file. Move the JAR file to your preferred location. Synapse reads configuration from the axonsynapse.properties file in the startup directory. You can also provide properties as parameters for the Java process, or as environment variables. The default HTTP port for Synapse is 8080. You can customize this by setting the server.port property. For Synapse to work it’s important that it can connect to Axon Server. To specify the location of the Axon Server nodes, specify the property synapse.server-list. This is a comma separated list of host names and optional port numbers. For example, to use 3 axon server nodes: synapse.server-list=axonserver1,axonserver2,axonserver3 For example, an axon server node using a custom gRPC port (not 8124): synapse.server-list=axonserver:7124 If you configure Axon Server to use transport layer security (TLS) for the gRPC communication, you need to perform additional steps to configure your installation. In this case, set the property synapse.use-tls to true. If Axon Server requires authentication, you need to specify a token that Synapse uses to connect to Axon Server for its internal tasks (like retrieving the existing contexts). Create the synapse.auth.token property. This token should have an ADMIN or VIEW_CONFIGURATION role to get all contexts from Axon Server, or it can have roles for specific contexts to only get those contexts. Please refer to the Configuration section for more information. To run Axon Synapse, open a terminal window, and cd to the folder where you moved the JAR file, and execute the JAR file. $ java -jar axon-synapse.jar You should see the following status message on the command terminal. Started Synapse in 5.268 seconds (JVM running for 6.321) You can access the Synapse admin interface using a browser at port 8080.","title":"Installation","component":"synapse-reference","version":"v0.11","name":"installation","url":"/synapse-reference/v0.11/installation/","titles":[{"text":"Download Axon Synapse","hash":"_download_axon_synapse","id":1},{"text":"Configuration","hash":"_configuration","id":2},{"text":"Run Axon Synapse","hash":"_run_axon_synapse","id":3}]},"206":{"id":206,"text":"Within Axon Server you can define multiple contexts. When registering handlers or sending messages you need to provide the name of the context this applies to. The context name is part of the URL used to send the request. The following URL demonstrates how to register a command handler in the orders context: http://{synapse-host-and-port}/v1/contexts/orders/handlers/commands To send a command to the finance context use a URL like this: http://{synapse-host-and-port}/v1/contexts/finance/commands/{command-name}","title":"Multi-Context","component":"synapse-reference","version":"v0.11","name":"multi-context","url":"/synapse-reference/v0.11/multi-context/","titles":[]},"207":{"id":207,"text":"The purpose of Axon Synapse is to help software developers design and build solutions. It’s an HTTP bridge between applications in any language and the Axon Server.","title":"High-Level Overview","component":"synapse-reference","version":"v0.11","name":"overview","url":"/synapse-reference/v0.11/overview/","titles":[]},"208":{"id":208,"text":"Any service available at an accessible URL can be a command handler. Synapse can send commands to such services via HTTP requests. The service must be able to handle requests containing commands. A command handler may return a response message or send a status without a body. Axon Synapse can send HTTP requests containing commands in two different ways. Each endpoint that registers as a command handler must support one of them. Axon Synapse serializes a single command directly into the HTTP request’s body when interacting with http-raw endpoints. It provides all other relevant information in the HTTP headers of the request: Content-Type AxonIQ-MessageId AxonIQ-CommandName AxonIQ-PayloadType AxonIQ-Priority Please refer to the API documentation for detailed information about the HTTP request structure. When interacting with http-message endpoints, Axon Synapse generates a JSON message that contains the serialized command and all information related to the command. It then sends that JSON message in the HTTP request’s body. Please refer to the API documentation for detailed information about the HTTP request structure. Command handlers must explicitly register in Axon Synapse to receive commands from Axon Server. There are two ways to register a command handler - using Synapse’s Web interface or through the Synapse HTTP API. In both cases, Axon Synapse needs the following information: Command names a list of names for the commands that this handler can handle Client ID unique id for the handler application instance Component name a logical name for the handler application HTTP Endpoint the URL of the handler Endpoint Type specifies whether the handler expects a raw or message request type Endpoint Options any key/value pairs that Axon Synapse should include in requests to the handler (as HTTP headers) Load Factor relative weight for this handler, if there are multiple handlers for a command, handlers with a higher load factor get a higher percentage of the requests. For a full list of parameters, including optional ones, please refer to the API documentation. To register a command handler via Axon Synapse UI, go to Command Handlers Register new command handler and fill in the form: To register a command handler via Axon Synapse API, send a JSON request to the respective endpoint. You can find detailed information about the endpoint in the API documentation. Below is a sample JSON request to register a handler: POST http://synapse:8080/v1/contexts/default/handlers/commands Content-Type: application/json { \"names\": [ \"local.application.client.Command\" ], \"endpoint\": \"https://client.application.local/v1/message\", \"endpointType\": \"http-raw\", \"endpointOptions\": [ { \"key\": \"string\", \"value\": \"string\" } ], \"clientId\": \"application-name-7c78946494-p86ts\", \"componentName\": \"application-name\", \"loadFactor\": 100, \"concurrency\": 1, \"enabled\": true } For a given command handler, synapse allows you to specify the maximum amount of concurrent requests, Synapse calls your application with. You can achieve this by setting the maxConcurrency parameter for a given registration. Synapse does however never send you two concurrent requests for the same routing key. This allows you not to keep track of ordering of concurrent requests. However, this also might lead to lower rates of concurrent processing than specified in the maxConcurrency parameter. The decision-making whether Synapse may send a request concurrently, works in the following order: 1. ensure there are less than maxConcurrency requests already ongoing. 2. ensure there is no other request running for the current routingKey. While this may allow a lot of requests for the same routingKey block processing for commands of a different routing key that arrive later and Synapse could forward it, this approach the safest and most defensive one. Note that the maxConcurrency parameter refers to the maximum amount of concurrent requests. Depending on your routing key, your application might observe a lower amount of concurrency (see section above).","title":"Receiving Commands","component":"synapse-reference","version":"v0.11","name":"receiving-commands","url":"/synapse-reference/v0.11/receiving-commands/","titles":[{"text":"Endpoint types","hash":"_endpoint_types","id":1},{"text":"http-raw","hash":"_http_raw","id":2},{"text":"http-message","hash":"_http_message","id":3},{"text":"Registering command handlers","hash":"_registering_command_handlers","id":4},{"text":"Registering a command handler via Axon Synapse UI","hash":"_registering_a_command_handler_via_axon_synapse_ui","id":5},{"text":"Registering a command handler via Axon Synapse API","hash":"_registering_a_command_handler_via_axon_synapse_api","id":6},{"text":"Concurrency control","hash":"_concurrency_control","id":7}]},"209":{"id":209,"text":"Any service available at an accessible URL can be an event handler. Synapse can send events to such services via HTTP requests. The service must be able to handle requests containing events. Axon Synapse can send HTTP requests containing events in three different ways. Each endpoint that registers as an event handler must support one of them. Axon Synapse serializes a single event directly into the HTTP request’s body when interacting with http-raw endpoints. It provides all other relevant information in the HTTP headers of the request: Content-Type AxonIQ-MessageId AxonIQ-EventName AxonIQ-DateTime AxonIQ-Index AxonIQ-AggregateId AxonIQ-AggregateType AxonIQ-SequenceNumber Please refer to the API documentation for detailed information about the HTTP request structure. When interacting with http-message endpoints, Axon Synapse generates a JSON message that contains the serialized event and all information related to the event. It then sends that JSON message in the HTTP request’s body. Please refer to the API documentation (select application/json request body schema) for detailed information about the HTTP request structure. When interacting with http-list-of-messages endpoints, Axon Synapse generates a JSON message that contains a list of events. Each element includes a serialized event and all additional information relevant to the event. Please refer to the API documentation (select application/vnd.axoniq.event.list+json request body schema) for detailed information about the HTTP request structure. Event handlers must explicitly register in Axon Synapse to receive events from Axon Server. There are two ways to register an event handler - using Synapse’s Web interface or through the Synapse HTTP API. In both cases, Axon Synapse needs the following information: Event names a list of event type names that this handler can handle (when empty, the handler receives all events) Client ID unique ID for the handler application instance Component name a logical name for the handler application HTTP Endpoint the URL of the handler Endpoint Type specifies whether the handler expects a raw or message request type Endpoint Options any key/value pairs that Axon Synapse should include in requests to the handler (as HTTP headers) Batch size the maximum number of events that Synapse sends in one request to the handler if the endpoint type is http-list-of-messages. Start the global index of the first event to read from the event store (use 0 to start from the first event, use -1 to start from the last event) To register an event handler via Axon Synapse UI, go to Event Handlers Register new event handler and fill in the form: To register an event handler via Axon Synapse API, send a JSON request to the respective endpoint. You can find detailed information about the endpoint in the API documentation. Below is a sample JSON request to register a handler: POST http://synapse:8080/v1/contexts/default/handlers/events Content-Type: application/json { \"names\": [ \"local.application.client.Event\" ], \"endpoint\": \"https://client.application.local/v1/message\", \"endpointType\": \"http-raw\", \"endpointOptions\": [ { \"key\": \"string\", \"value\": \"string\" } ], \"clientId\": \"application-name-7c78946494-p86ts\", \"componentName\": \"application-name\", \"batchSize\": 0, \"start\": 0, \"enabled\": true }","title":"Receiving Events","component":"synapse-reference","version":"v0.11","name":"receiving-events","url":"/synapse-reference/v0.11/receiving-events/","titles":[{"text":"Endpoint types","hash":"_endpoint_types","id":1},{"text":"http-raw","hash":"_http_raw","id":2},{"text":"http-message","hash":"_http_message","id":3},{"text":"http-list-of-messages","hash":"_http_list_of_messages","id":4},{"text":"Registering event handlers","hash":"_registering_event_handlers","id":5},{"text":"Registering an event handler via Axon Synapse UI","hash":"_registering_an_event_handler_via_axon_synapse_ui","id":6},{"text":"Registering an event handler via Axon Synapse API","hash":"_registering_an_event_handler_via_axon_synapse_api","id":7}]},"210":{"id":210,"text":"You can register handlers in Axon Synapse to receive messages via HTTP from Axon Server. Synapse supports three types of messages: Commands Queries Events In general, Synapse uses two forms to send HTTP requests to handlers: http-raw where the HTTP content is the actual payload of the message, and all additional information is in the HTTP headers (see Client Raw API for details) http-message, where the HTTP content is a JSON object containing the message and all the relevant information (see Client Message API for details)","title":"Receiving Messages","component":"synapse-reference","version":"v0.11","name":"receiving-messages","url":"/synapse-reference/v0.11/receiving-messages/","titles":[]},"211":{"id":211,"text":"Any service available at an accessible URL can be a query handler. Synapse can send events to such services via HTTP requests. The service must be able to handle requests containing queries and respond to them. Axon Synapse can send HTTP requests containing queries in two different ways. Each endpoint that registers as a query handler must support one of them. Axon Synapse serializes a single query directly into the HTTP request’s body when interacting with http-raw endpoints. It provides all other relevant information in the HTTP headers of the request: Content-Type AxonIQ-MessageId AxonIQ-QueryName AxonIQ-PayloadType Please refer to the API documentation for detailed information about the HTTP request structure. When interacting with http-message endpoints, Axon Synapse generates a JSON message containing the serialized query and all related information. It then sends that JSON message in the HTTP request’s body. Please refer to the API documentation for detailed information about the HTTP request structure. Query handlers must explicitly register in Axon Synapse to receive queries from Axon Server. There are two ways to register a query handler - using Synapse’s Web interface or through the Synapse HTTP API. In both cases, Axon Synapse needs the following information: Query names a list of names for the commands that this handler can handle Client ID unique ID for the handler application instance Component name a logical name for the handler application HTTP Endpoint the URL of the handler Endpoint Type specifies whether the handler expects a raw or message request type Endpoint Options any key/value pairs that Axon Synapse should include in requests to the handler (as HTTP headers) To register a query handler via Axon Synapse UI, go to Query Handlers Register new query handler and fill in the form: To register a query handler via Axon Synapse API, send a JSON request to the respective endpoint. You can find detailed information about the endpoint in the API documentation. Below is a sample JSON request to register a handler: POST http://synapse:8080/v1/contexts/default/handlers/queries Content-Type: application/json { \"names\": [ \"local.application.client.Query\" ], \"endpoint\": \"https://client.application.local/v1/message\", \"endpointType\": \"http-raw\", \"endpointOptions\": [ { \"key\": \"string\", \"value\": \"string\" } ], \"clientId\": \"application-name-7c78946494-p86ts\", \"componentName\": \"application-name\", \"enabled\": true }","title":"Receiving Queries","component":"synapse-reference","version":"v0.11","name":"receiving-queries","url":"/synapse-reference/v0.11/receiving-queries/","titles":[{"text":"Endpoint types","hash":"_endpoint_types","id":1},{"text":"http-raw","hash":"_http_raw","id":2},{"text":"http-message","hash":"_http_message","id":3},{"text":"Registering query handlers","hash":"_registering_query_handlers","id":4},{"text":"Registering a query handler via Axon Synapse UI","hash":"_registering_a_query_handler_via_axon_synapse_ui","id":5},{"text":"Registering a query handler via Axon Synapse API","hash":"_registering_a_query_handler_via_axon_synapse_api","id":6}]},"212":{"id":212,"text":"Upgrade your Synapse installation to 0.10 by performing the following steps: Stop your Synapse instance. Replace your previous axonsynapse-*.jar file with the new one from the distribution package. Start your Synapse instance. Synapse supports messages (event, command, and query) without body. The maximum size of a gRPC message can be specified through the synapse.axon-server.max-message-size property. Returned error body doesn’t follow its OpenApi specification. Upgrade your Synapse installation to 0.10 by performing the following steps: Stop your Synapse instance. Replace your previous axonsynapse-*.jar file with the new one from the distribution package. Start your Synapse instance. Event handler batching no longer sends one-sized batches, except for the first batch. Message identifier, payload revision and metadata are correctly propagated for queries and query responses. A query message handler isn’t required to return a body anymore. Axon Server connections are closed only after an inactivity timeout. This fixes an observable race condition. Returned error body doesn’t follow its OpenApi specification. Upgrade your Synapse installation to 0.9 by performing the following steps: Stop your Synapse instance. Replace your previous axonsynapse-*.jar file with the new one from the distribution package. Start your Synapse instance. A command handler follows the concurrent execution restriction from the maxConcurrency attribute. The concurrency attribute is deprecated in favor of the maxConcurrency. The event.handler.threads property is deprecated and has no effect anymore. An Axon Server authorization token passed in the X-API-KEY header is uniformly propagated to Axon Server for all message types (event, command, and query) and message representations (payload as body and message as body). The synapse.auth.enabled property is no longer required to send a message with an authorization token in the X-API-KEY header. A potential StackOverflowError, which could occur during a reconnection to Axon Server, is fixed. Returned error body doesn’t follow its OpenApi specification. Upgrade your Synapse installation to 0.8 by performing the following steps: Stop your Synapse instance. Replace your previous axonsynapse-*.jar file with the new one from the distribution package. Start your Synapse instance. Query defaults to java.lang.Object for the responseType. Synapse doesn’t require the Axon Server to run during the startup. Synapse doesn’t initiate multiple synapse-storage connections to Axon Server when the original connection breaks. Fixed the issue of an event handler not always publishing processor information. Deleting a non-existing handler returns 204 No Content. Referencing a non-existent clientAuthenticationId or serverAuthenticationId returns 400 Bad Request. Exposing he first and last token of a context at the /v1/contexts/{context}/events endpoint. The dateTime of a message sent to a message handler follows the format of ISO 8601. A command message handler isn’t required to return a body anymore. Configure the Content-Type header for an event list handler to application/json through the property synapse.http.handlers.event.list.content-type=application-json. Payload revision is correctly propagated from a command response to the sender. Synapse supports the optional header AxonIQ-MessageId for specifying a message identifier for raw messages. Routing key is correctly propagated to command handlers. Context endpoint doesn’t return Axon Server internal contexts starting with the _ anymore. The endpoint /actuator/info provides the Synapse version. Resume event streaming to event handlers after Axon Server reconnection. Synapse is available as a docker image at axoniq/synapse. Returned error body doesn’t follow its OpenApi specification. Upgrade your Synapse installation to 0.7 by performing the following steps: Stop your Synapse instance. Replace your previous axonsynapse-*.jar file with the new one from the distribution package. Start your Synapse instance. Share Axon Server-based configuration storage among all Synapse instances. Event handler balancing across many Synapse instances. Date and time parsing improvement. The HTTP PUT method for creating or replacing a message handler doesn’t require the handler to exist. Sending a command or issuing a query that causes an error in a handler results in the 502 Bad Gateway response. Publishing a domain event with invalid sequenceNumber results in the 409 Conflict response. Property synapse.is-use-tls deprecated in favor of synapse.axon-server.tls-enabled. Property synapse.certificate-chain deprecated in favor of synapse.axon-server.trust-manager-file. Property synapse.server-list deprecated in favor of synapse.axon-server.server-list. Issuing a query to an Axon Framework-based query handler requires specifying responseType. Synapse won’t boot up when it can’t establish an initial connection to Axon Server. Synapse may initiate multiple synapse-storage connections to Axon Server when the original connection breaks. Returned error body doesn’t follow its OpenApi specification.","title":"Release Notes","component":"synapse-reference","version":"v0.11","name":"release-notes","url":"/synapse-reference/v0.11/release-notes/","titles":[{"text":"0.11.0 (15-07-2024)","hash":"_0_11_0_15_07_2024","id":1},{"text":"Upgrade instructions","hash":"_upgrade_instructions","id":2},{"text":"New features, improvements, and bug fixes","hash":"_new_features_improvements_and_bug_fixes","id":3},{"text":"Known issues","hash":"_known_issues","id":4},{"text":"0.10.0 (16-02-2024)","hash":"_0_10_0_16_02_2024","id":5},{"text":"Upgrade instructions","hash":"_upgrade_instructions_2","id":6},{"text":"New features, improvements, and bug fixes","hash":"_new_features_improvements_and_bug_fixes_2","id":7},{"text":"Known issues","hash":"_known_issues_2","id":8},{"text":"0.9.0 (19-01-2024)","hash":"_0_9_0_19_01_2024","id":9},{"text":"Upgrade instructions","hash":"_upgrade_instructions_3","id":10},{"text":"New features, improvements, and bug fixes","hash":"_new_features_improvements_and_bug_fixes_3","id":11},{"text":"Known issues","hash":"_known_issues_3","id":12},{"text":"0.8.0 (15-09-2023)","hash":"_0_8_0_15_09_2023","id":13},{"text":"Upgrade instructions","hash":"_upgrade_instructions_4","id":14},{"text":"New features, improvements, and bug fixes","hash":"_new_features_improvements_and_bug_fixes_4","id":15},{"text":"Known issues","hash":"_known_issues_4","id":16},{"text":"0.7.0 (08-08-2023)","hash":"_0_7_0_08_08_2023","id":17},{"text":"Upgrade instructions","hash":"_upgrade_instructions_5","id":18},{"text":"New features, improvements, and bug fixes","hash":"_new_features_improvements_and_bug_fixes_5","id":19},{"text":"Known issues","hash":"_known_issues_5","id":20},{"text":"0.6.2 (19-04-2023)","hash":"_0_6_2_19_04_2023","id":21}]},"213":{"id":213,"text":"Any application that can not connect directly to Axon Server can still send commands through Axon Synapse’s HTTP APIs. This document explains the two ways to do so. Axon Server routes commands based on a routing key in the request. If multiple handlers exist for the same command, Axon Server sends requests with the same routing key to the same handler. Command handlers often rely on the routing consistency provided by routing keys to cache data between requests. You can only pass metaData using the http-message endpoint. The http-raw endpoint doesn’t provide a way to do so. The http-raw endpoint URL path follows the /v1/context/[contextName]/commands/[commandName] pattern. The content of the HTTP request is the serialized command. The sender may provide additional information through HTTP headers. There is one required header: Content-Type: the serialization type for the context The following headers are optional: AxonIQ-PayloadType: defines the type of the payload (if missing, the command name as the payload type) AxonIQ-Priority: priority of the request (default is 0, a higher value means higher priority) AxonIQ-RoutingKey: the key used for routing (auto-generated if missing) The code below represents a sample request to the http-raw endpoint sending an io.axoniq.demo.giftcard.api.IssueCardCommand. POST http://synapse:8080/v1/contexts/default/commands/io.axoniq.demo.giftcard.api.IssueCardCommand Content-Type: application/xml sample-card-5 110 When Axon Synapse processes this HTTP request, it sends the command to Axon Server on behalf of the client application. Axon Server then delegates the command to a command handler registered in the default context. For more details about the http-raw endpoint, please refer to the Send Command API docs. The http-message endpoint URL path follows the /v1/context/[contextName]/commands pattern. The content of the HTTP request is a JSON message containing all the information for a single command. Below is the above request in http-message form. POST http://synapse:8080/v1/contexts/default/commands Content-Type: application/json { \"payload\": \"sample-card-5110\" \"name\": \"io.axoniq.demo.giftcard.api.IssueCardCommand\" } The message may contain additional optional fields like payloadType, routingKey, priority, and metaData. The serialization format of the query object must match the serialization the query handler expects. Even though the HTTP payload is JSON, if the query handler expects XML, the payload must be XML. If the handler expects a JSON serialized payload, the request would be: POST http://synapse:8080/v1/contexts/default/commands Content-Type: application/json { \"payload\": { \"id\": \"sample-card-5\", \"amount\": 110 }, \"name\": \"io.axoniq.demo.giftcard.api.IssueCardCommand\" } For more details about the http-raw endpoint, please refer to the Send Command Message API docs.","title":"Sending Commands","component":"synapse-reference","version":"v0.11","name":"sending-commands","url":"/synapse-reference/v0.11/sending-commands/","titles":[{"text":"The http-raw endpoint","hash":"_the_http_raw_endpoint","id":1},{"text":"Message endpoint","hash":"_message_endpoint","id":2}]},"214":{"id":214,"text":"Any application that can not connect directly to Axon Server can still send events to it through Axon Synapse’s HTTP APIs. This document explains the three ways to do so. You can only pass metaData using the http-message or http-list-of-messages endpoints. The http-raw endpoint doesn’t provide a way to do so. The http-raw endpoint URL path follows the /v1/context/[contextName]/events/[eventName] pattern. The content of the HTTP request is the serialized event. The sender may provide additional information through HTTP headers. There is one required header: Content-Type: the serialization type for the context The following headers are optional: AxonIQ-AggregateId: AxonIQ-AggregateType: AxonIQ-SequenceNumber: AxonIQ-DateTime: The code below represents a sample request to the http-raw endpoint sending a local.application.client.Event. POST http://synapse:8080/v1/contexts/default/events/local.application.client.Event Content-Type: application/json AxonIQ-AggregateId: 901aa5ce-b281-4788-97f2-2be7f236dde6 AxonIQ-AggregateType: Aggregate AxonIQ-SequenceNumber: 0 AxonIQ-DateTime: 2022-09-22T21:37:00.000+00:00 { \"id\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"text\": \"New customer created\" } When Axon Synapse processes this HTTP request, it publishes an event to the Axon Server on behalf of the client application. Axon Server stores the event in the default context of the event store as specified in the request’s URL. For more details about the http-raw endpoint, please refer to the Publish Event API docs. The http-message endpoint URL path follows the /v1/context/[contextName]/events pattern. The content of the HTTP request is a JSON message containing all the information for a single event. Below is the above request in http-message form. POST http://synapse:8080/v1/contexts/default/events Content-Type: application/json { \"payload\": { \"id\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"text\": \"New customer created\" }, \"name\": \"local.application.client.Event\", \"aggregateId\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"aggregateType\": \"Aggregate\", \"sequenceNumber\": 0, \"dateTime\": \"2022-09-22T21:37:00.000+00:00\" } The JSON payload may contain additional optional fields such as metaData. Again when Axon Synapse receives such an HTTP request, it publishes an event to Axon Server on behalf of the client application, which stores it in the default context. For more details about the http-message endpoint, please refer to the Publish Event Message API docs (select application/json request body schema). This is technically the same endpoint as http-message one above. It uses the same URL path pattern of /v1/context/[contextName]/events. The difference is in the content type. While for the http-message, it’s application/json, and for the http-list-of-messages, it’s application/vnd.axoniq.event.list+json. This content type indicates the JSON payload is a list (named items) of events instead of a single event. Below is a sample request in http-list-of-messages form. POST http://synapse:8080/v1/contexts/default/events Content-Type: application/vnd.axoniq.event.list+json { \"items\": [ { \"payload\": { \"id\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"text\": \"New customer created\" }, \"name\": \"local.application.client.Event\", \"aggregateId\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"aggregateType\": \"Aggregate\", \"sequenceNumber\": 0, \"dateTime\": \"2022-09-22T21:37:00.000+00:00\" }, { \"payload\": { \"id\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"text\": \"Customer moved\" }, \"name\": \"local.application.client.Event\", \"aggregateId\": \"901aa5ce-b281-4788-97f2-2be7f236dde6\", \"aggregateType\": \"Aggregate\", \"sequenceNumber\": 1, \"dateTime\": \"2022-09-22T21:37:01.000+00:00\" } ] } When Axon Synapse receives such an HTTP request, it publishes the event to Axon Server on behalf of the client application. For more details about the http-list-of-messages endpoint, please refer to the Publish Event Message API docs (select application/vnd.axoniq.event.list+json request body schema).","title":"Sending Events","component":"synapse-reference","version":"v0.11","name":"sending-events","url":"/synapse-reference/v0.11/sending-events/","titles":[{"text":"The http-raw endpoint","hash":"_the_http_raw_endpoint","id":1},{"text":"The http-message endpoint","hash":"_the_http_message_endpoint","id":2},{"text":"The http-list-of-messages endpoint","hash":"_the_http_list_of_messages_endpoint","id":3}]},"215":{"id":215,"text":"You can use Axon Synapse to send messages to Axon Server via HTTP requests. Synapse supports three types of messages: Commands Queries Events In general, you can use two forms to send these requests to Synapse: http-raw where the HTTP content is the actual payload of the message, and all additional information is in the HTTP headers http-message, where the HTTP content is a JSON object containing the message together with all the relevant information For the operations on the requests to send messages, check the Axon Synapse API.","title":"Sending Messages","component":"synapse-reference","version":"v0.11","name":"sending-messages","url":"/synapse-reference/v0.11/sending-messages/","titles":[]},"216":{"id":216,"text":"Any application that can not connect directly to Axon Server can still send queries to it through Axon Synapse’s HTTP APIs. This document explains the two ways to do so. Axon Synapse only supports request-response queries. It’s unable to take care of scatter-gather and subscription queries at this moment. You can only pass metaData using the http-message endpoint. The http-raw endpoint doesn’t provide a way to do so. The http-raw endpoint URL path follows the /v1/context/[contextName]/queries/[queryName] pattern. The content of the HTTP request is the serialized query. The sender may provide additional information through HTTP headers. There is one required header: Content-Type: the serialization type for the context The following headers are optional: AxonIQ-PayloadType: defines the type of the payload (if missing, the command name is the payload type) AxonIQ-ResponseType: the expected response type (required when the handler uses Axon Framework) AxonIQ-ResponseCount: use MULTIPLE to indicate that the query handler can return multiple instances of the response type The code below represents a sample request to the http-raw endpoint sending an io.axoniq.demo.giftcard.api.FetchCardSummariesQuery. POST http://synapse:8080/v1/contexts/default/queries/io.axoniq.demo.giftcard.api.FetchCardSummariesQuery Content-Type: application/xml AxonIQ-ResponseType: io.axoniq.demo.giftcard.api.CardSummary AxonIQ-ResponseCount: MULTIPLE 0 100 When Axon Synapse processes this HTTP request, it sends the query to Axon Server on behalf of the client application. Axon Server then delegates the query to a query handler registered in the default context. When the handler responds with a zero or more io.axoniq.demo.giftcard.api.CardSummary objects, Axon Synapse serializes the payload and sends it back in the response payload of the HTTP request. For more details about the http-raw endpoint, please refer to the Send Query API docs. The http-message endpoint URL path follows the /v1/context/[contextName]/queries pattern. The content of the HTTP request is a JSON message containing all the information for a single query. Below is the above request in http-message form. POST http://synapse:8080/v1/contexts/default/queries Content-Type: application/json { \"payload\": \"0100\" \"name\": \"io.axoniq.demo.giftcard.api.FetchCardSummariesQuery\", \"responseType\": \"io.axoniq.demo.giftcard.api.CardSummary\" } The message may contain additional optional fields like payloadType and metaData. You can use the payloadType field to specify the payload type in cases where the query name doesn’t equal the payload type for the query message. The serialization format of the query object must match the serialization the query handler expects. Even though the HTTP payload is JSON, if the query handler expects XML, the payload must be to XML. If the handler expects a JSON serialized payload, the request would be: POST http://synapse:8080/v1/contexts/default/commands Content-Type: application/json { \"payload\": { \"offset\": 0, \"limit\": 100 }, \"name\": \"io.axoniq.demo.giftcard.api.FetchCardSummariesQuery\", \"responseType\": \"io.axoniq.demo.giftcard.api.CardSummary\" } For more details about the http-raw endpoint, please refer to the Send Query Message API docs.","title":"Sending Queries","component":"synapse-reference","version":"v0.11","name":"sending-queries","url":"/synapse-reference/v0.11/sending-queries/","titles":[{"text":"The http-raw endpoint","hash":"_the_http_raw_endpoint","id":1},{"text":"The http-message endpoint","hash":"_the_http_message_endpoint","id":2}]},"217":{"id":217,"text":"Configuring HA for Synapse involves multiple configuration options. For a conceptual overview of how HA works in Synapse, refer to High Availability. # You need to have selected axonserver as your storage implementation. You can achieve this by setting the synapse.storage.type property. Refer to Storage and Configuration for details. The most important steps used for configuring HA in Synapse are the following. For a full list of available properties, refer to Configuration. Tell Synapse to use AxonServer as your storage backend by setting synapse.storage.type=axonserver Enable load balancing of event handlers by setting synapse.event-handler.balancing.enabled=true If you encounter stability or performance problems, refer to Configuration to adjust settings like the used hash function and means of discovering available synapse settings.","title":"HA Configuration","component":"synapse-reference","version":"v0.11","name":"ha-config","url":"/synapse-reference/v0.11/ha/ha-config/","titles":[{"text":"Storage","hash":"_storage","id":1},{"text":"High availability","hash":"_high_availability","id":2}]},"218":{"id":218,"text":"Synapse does support high availability (HA). This page explains how the HA features in Synapse work. To see how to configure them, refer to HA Configuration. For using HA, you need to have selected AxonServer as a means of storing your Synapse configuration. Refer to Storage on how to do this. Whilst it’s possible to simply run multiple independent Synapse instances without shared configuration, this is highly discouraged and generally regarded as a bad idea. Using HA in Synapse does provide you with the following: Tolerate individual Synapse instances to go down for maintenance or crash Provide a way for the different handler types to balance themselves and be re-assigned when a Synapse instance goes down. Synapse handles the different handler types in different ways: Each Synapse instance registers all configured command handlers with AxonServer. AxonServer then makes sure to send the commands to the correct handler instance via the Synapse instance used to register the handler. To prevent duplication of events as far as possible, Synapse instances cooperate to register event handlers only from one Synapse instance. This allows your client application to receive events from only one Synapse instance, as long as the topology doesn’t change. When changing synapse instances, you may see slight duplication of events delivered. This is normal and unavoidable. When topology changes (for example when a Synapse instance crashes or a new one appears), handlers are re-assigned to available Synapse instances according to a consistent hashing algorithm. This makes sure that if a Synapse instance goes down, other instances pick up the now unassigned event handlers. As with Command Handlers, each Synapse instance registers all configured query handlers with AxonServer. Again, AxonServer then makes sure to send the queries to the correct client application. To be fully high-available, it’s not enough to have Synapse set to HA. One should take the following aspects into consideration. Synapse instances (and other client applications directly connecting to AxonServer, like AxonFramework applications) should have the addresses of all primary AxonServer nodes in the cluster configured. This allows them to reconnect if an AxonServer node were to go down. Using the AxonServer as storage implementation and enabling HA allows you to tolerate synapse nodes going down and the remaining ones taking over. If you use Synapse to publish events, commands or queries, make sure that your client applications know all available Synapse instances and can retry if one should go down. Alternatively, add a reverse proxy with multiple upstream destinations for the publish endpoints. Further, have your client applications run in a highly available manner. If Synapse is available but your client application goes down, you didn’t win much in regards to availability. Further, since registered handlers in Synapse only can have one configured URL, make sure to place a reverse proxy with multiple upstream destinations in between Synapse and the client applications it’s calling. Thereby, synapse can retry calling endpoints if one of the instances of your client application were to go down.","title":"High Availability","component":"synapse-reference","version":"v0.11","name":"index","url":"/synapse-reference/v0.11/ha/","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What HA in synapse covers","hash":"_what_ha_in_synapse_covers","id":2},{"text":"Command handlers","hash":"_command_handlers","id":3},{"text":"Event handlers","hash":"_event_handlers","id":4},{"text":"Query handlers","hash":"_query_handlers","id":5},{"text":"Infrastructure","hash":"_infrastructure","id":6},{"text":"Axon server","hash":"_axon_server","id":7},{"text":"Synapse","hash":"_synapse","id":8},{"text":"Client applications","hash":"_client_applications","id":9}]},"219":{"id":219,"text":"","title":"","component":"synapse-reference","version":"v0.11","name":"client-message","url":"/synapse-reference/v0.11/openapi/client-message/","titles":[]},"220":{"id":220,"text":"","title":"","component":"synapse-reference","version":"v0.11","name":"client-raw","url":"/synapse-reference/v0.11/openapi/client-raw/","titles":[]},"221":{"id":221,"text":"Axon Synapse communicates with third-party applications via HTTP (a.k.a. RESTful) APIs. It uses the OpenAPI Specification to define the methods and types available in those APIs. This is the API third-party applications use to communicate with an Axon Synapse instance. It provides means to sends commands, queries, and events register command handlers, query handlers, and event handlers obtain all events associated with an aggregate The Axon Synapse API page contains the documentation for this API. The Client API comes in two flavors. Both specify the payload client applications should expect when Axon Synapse sends messages to them. Clients specify the actual endpoints and which API type Synapse should use when they register. When a third-party application registers a client handler, it may specify http-message as endpointType. In such a case, Axon Synapse sends a JSON object. It places the message (command, query, event) payload in that object’s payload field. See Client Message API page for the complete structure of those messages. When a third-party application registers a client handler, it may specify http-raw as endpointType. In such a case, Axon Synapse sends the actual message (command, query, event) as payload and all the relevant information in HTTP headers. See Client Raw API page for the complete structure of those messages.","title":"Open API Documentation","component":"synapse-reference","version":"v0.11","name":"index","url":"/synapse-reference/v0.11/openapi/","titles":[{"text":"Synapse API","hash":"_synapse_api","id":1},{"text":"Client API","hash":"_client_api","id":2},{"text":"Client  API - message","hash":"_client_api_message","id":3},{"text":"Client API - raw","hash":"_client_api_raw","id":4}]},"222":{"id":222,"text":"","title":"","component":"synapse-reference","version":"v0.11","name":"synapse","url":"/synapse-reference/v0.11/openapi/synapse/","titles":[]},"223":{"id":223,"text":"Synapse currently does support two ways of storing data: Locally in an embedded database In AxonServer Since HA does require you to use AxonServer as the storage backend, also refer to High Availability. When switching between storage types, you lose the stored configuration. Synapse allows you to select the used storage implementation by configuring the property synapse.storage.type. The only valid values are axonserver and local. When using local storage (synapse.storage.type=local), Synapse stores all its configuration in its own local embedded database. Your specific Synapse instance utilizes these settings, which are unique for your instance. When using AxonServer as the storage implementation (synapse.storage.type=axonserver), Synapse uses a context in the specified AxonServer to store its configuration. It also uses the local embedded database to keep a representation of the current state. Using AxonServer storage does require you to have multiple contexts in your AxonServer, which in turn requires you to have valid license for AxonServer. Many synapse instances can share the configuration stored when using AxonServer as the storage implementation. Refer to High Availability to find out more about this feature. When connecting to AxonServer, Synapse may need to authenticate itself. To allow for a fine-grained Access Control List, configure a separate token used for connecting to the storage context. Use the property synapse.storage.token. Further, you may need to change the used context for storing Synapse configuration in. Use the property: synapse.storage.context. To see all supported configuration options, refer to Configuration It currently isn’t possible to switch between storage types whilst keeping your Synapse data. To achieve reproducible and easier-to-migrate setups, consider setting up the configuration in an automated way. This allows you, should you decide to switch storage types, to wipe the Synapse storage, change the used implementation and then use your automation to re-create the configuration. If you want to change the used implementation, you have to remove the Synapse database file (axon-synapse.mv.db by default) before changing the settings. This results in loss of the stored configuration.","title":"Storage","component":"synapse-reference","version":"v0.11","name":"index","url":"/synapse-reference/v0.11/storage/","titles":[{"text":"Selecting the used storage type","hash":"_selecting_the_used_storage_type","id":1},{"text":"Local storage","hash":"_local_storage","id":2},{"text":"Axon Server storage","hash":"_axon_server_storage","id":3},{"text":"Switching storage types","hash":"_switching_storage_types","id":4}]},"224":{"id":224,"text":"The AxonIQ Console is an advanced management platform designed to maximize the effectiveness of applications developed with Axon Framework and supported through Axon Server. It facilitates near-zero configuration and provides a single platform for insight, management, control, and reporting of your application infrastructure. This manual serves as a guide for engineers, developers, and system administrators who aim to leverage AxonIQ Console to oversee their message-driven systems built with AxonIQ technologies. The Console is crafted to cater to users who seek a graphical interface for an intuitive and comprehensive overview of their systems.","title":"AxonIQ Console Getting Started Guide","component":"axoniq-console-getting-started","version":"main","name":"index","url":"/axoniq-console-getting-started/main/","titles":[{"text":"Introducing AxonIQ Console","hash":"_introducing_axoniq_console","id":1},{"text":"Purpose and intended audience","hash":"_purpose_and_intended_audience","id":2}]},"225":{"id":225,"text":"Administrators have the capability to add and remove access tokens used by the Console, as shown in the image below. The \"Access Token\" section provides a list of the current Access Tokens that have been created with the option to configure or remove them entirely. The tokens should be set in the properties of applications or Axon Server nodes that want to connect with your Environment. The tokens should be set in the properties of applications or Axon Server nodes that want to connect with your Environment. Hence, the Access Tokens page allows administrators to configure these.","title":"Access Tokens","component":"axoniq-console-getting-started","version":"main","name":"access-tokens","url":"/axoniq-console-getting-started/main/ac-as-superuser/access-tokens/","titles":[]},"226":{"id":226,"text":"The \"Applications\" section provides a list of the applications that have been discovered by the Console and provides administrators the ability to view the application name, the number of clients, as well as the option to remove it from the Console. Note: Removing an application from the Console only removes it from your Environment. Hence, the application itself will remain running.","title":"Applications","component":"axoniq-console-getting-started","version":"main","name":"applications","url":"/axoniq-console-getting-started/main/ac-as-superuser/applications/","titles":[]},"227":{"id":227,"text":"AxonIQ Console is a robust tool designed to aid in the management of message-driven systems. It stands as a testament to AxonIQ’s commitment to evolving its products to meet the needs of its users. Administrators have the ability to manage the applications, servers, and access tokens within the Console in order to have direct visibility of their applications and services using AxonIQ technologies.","title":"Conclusion","component":"axoniq-console-getting-started","version":"main","name":"conclusion","url":"/axoniq-console-getting-started/main/ac-as-superuser/conclusion/","titles":[]},"228":{"id":228,"text":"Owners and Administrators have special privileges in order to manage their Workspace. This includes the capability to add and delete users, servers, and applications, and to manage access tokens. To manage the Console as an administrator, click on the \"Settings\" tab.","title":"Using The \"Settings\" Tab To Manage The AxonIQ Console","component":"axoniq-console-getting-started","version":"main","name":"settings-tab","url":"/axoniq-console-getting-started/main/ac-as-superuser/settings-tab/","titles":[]},"229":{"id":229,"text":"After logging in to AxonIQ Console and selecting an Environment in one of your Workspaces, you will be presented with the AxonIQ Console dashboard, which contains a tab to show the information from your Axon Server Cluster. Click on that last tab to access the Axon Server panel. If you have never set up or run Axon Server before, then the panel will show you a summary of the various options you have for running Axon Server and connecting it to AxonIQ Console To set up a new instance node or cluster of Axon Server, click the blue button on the left side of the screen titled “How Can I Install Axon Server?”. The tab content will now display various options for running your Axon Server instance or cluster. Depending on your preferred method of running Axon Server, click on the blue button and the page will provide the information you need to quickly get a new instance of Axon Server up and running. Follow the steps and configure your Axon Server instance or cluster according to the instructions. When you are finshed, launch your local Axon Server instance or cluster. Once you have your local Axon Server starter you need to enable the plan to monitor Axon Server in AxonIQ Console. Select the plan that best meets your needs from the table. If you are evaluating AxonIQ Console, simply click the \"Choose Developer\" button, which is sufficient to connect a standalone Axon Server instance. After selecting your plan, you will see the panel content change to display information about the status of your various Axon Server nodes. Depending on your plan and the number of nodes in your Axon Server cluster, you will see the information provided by the connected nodes. More information on how to setup Axon Server clusters for Production use can be found below: Local installation of Axon Server, Non-Clustered and Clustered Setting Up and Managing Clusters of Axon Server","title":"Installing A New Instance Of Axon Server","component":"axoniq-console-getting-started","version":"main","name":"installing-instance-as","url":"/axoniq-console-getting-started/main/ac-gs-deploy-axonserver/installing-instance-as/","titles":[{"text":"Setting up your local Axon Server to connect to AxonIQ Console","hash":"_setting_up_your_local_axon_server_to_connect_to_axoniq_console","id":1},{"text":"Activating your Axon Server plan in AxonIQ Console","hash":"_activating_your_axon_server_plan_in_axoniq_console","id":2},{"text":"Additional information to setup Axon Server cluster","hash":"_additional_information_to_setup_axon_server_cluster","id":3}]},"230":{"id":230,"text":"In order to begin using AxonIQ Console, navigate to the following URL: https://console.axoniq.io You will be presented with the AxonIQ Console login screen. Authenticate with your preferred sign-in method and your valid credentials.","title":"Accessing AxonIQ Console","component":"axoniq-console-getting-started","version":"main","name":"access","url":"/axoniq-console-getting-started/main/ac-gs-setup/access/","titles":[]},"231":{"id":231,"text":"Environments play a crucial role for both Axon Server instances and Axon Framework applications. For apps that utilize Axon Framework, they report their metrics within the Environment itself. When using Axon Server, all server instances with the Environment can be discovered, viewed, and managed. Environments allow you to specify deployment scenarios such as: Development Testing Pre-production Production Therefore, Environments are extremely versatile logical groupings for your Axon Server instances. For example, if you want to separate your Axon Server instances by geographic regions, you can name them according to their location, such as: North America Europe Asia Rest of the World The best practice is to specify a name for the Environment with an idea of other Environments that you may want to create in the future.","title":"Environments in AxonIQ Console","component":"axoniq-console-getting-started","version":"main","name":"environments","url":"/axoniq-console-getting-started/main/ac-gs-setup/environments/","titles":[]},"232":{"id":232,"text":"On the right aisw of the 'Start' tab in the dasboard, you’ll see a panel that allows you to give us some feedback. Apart from rating your experience with AxonIQ Console, if you have questions, comments, or suggestions for improvement of the AxonIQ Console, we encourage you to go to our Discuss platform and join the conversations with us and the rest of AxonIQ Console users. To access our Discuss platform (the AxonIQ Console forums), you can click on the 'Disucss Platform' link in the feedback panel or you can click on the 'Discuss' button shown at the top header in any page of AxonIQ Console. We’ve made AxonIQ Console to be simple, straightforward, and easy to use. The Console is designed to consolidate a lot of information contained in your systems that use Axon Framework, Axon Server, or both. Therefore, be sure to mouse over the entries in the tables of AxonIQ Console for additional details and context.","title":"We Value Your Feedback!","component":"axoniq-console-getting-started","version":"main","name":"feedback","url":"/axoniq-console-getting-started/main/ac-gs-setup/feedback/","titles":[{"text":"Final note: Be sure to follow the tooltips!","hash":"_final_note_be_sure_to_follow_the_tooltips","id":1}]},"233":{"id":233,"text":"The AxonIQ Console is an advanced management platform designed to maximize the effectiveness of applications developed with Axon Framework and supported through Axon Server. It facilitates near-zero configuration and provides a single platform for insight, management, control, and reporting of your application infrastructure. This manual serves as a guide for engineers, developers, and system administrators who aim to leverage AxonIQ Console to oversee their message-driven systems built with AxonIQ technologies. The Console is crafted to cater to users who seek a graphical interface for an intuitive and comprehensive overview of their systems.","title":"Connect And Setup AxonIQ Console Access","component":"axoniq-console-getting-started","version":"main","name":"index","url":"/axoniq-console-getting-started/main/ac-gs-setup/","titles":[{"text":"Introducing AxonIQ Console","hash":"_introducing_axoniq_console","id":1},{"text":"Purpose and intended audience","hash":"_purpose_and_intended_audience","id":2}]},"234":{"id":234,"text":"As a first-time user, you will be presented with a 3-step process to set up your account. As shown below, the first step after successful authentication is to provide basic information about yourself and your company. Provide the necessary information, read and accept the \"AxonIQ Service Subscription Aggreement\" and click the \"Continue\" button. Once you have created your account, you will have the option to connect your own Axon application or, if you don’t have an Axon application ready to connect to AxonIQ Console, we also offer you the option to run our \"Bike Rental Demo\" application through a docker-compose file that is already configured to connect to and be monitored by AxonIQ Console. You can also learn a little bit more about the different tools that Axon provides and how they are related. Click on the \"Connect My Application\" button to continue setting up your account. One of the most important aspects of AxonIQ Console is your Workspace. Workspaces are collections of users and environments that allow teams and departments to define an instance (or group of instances) of AxonIQ technologies. You can start by creating a workspace using the name of your project. After setting up your Workspace or project, the next step is to connect your Axon Framework-based application, so that it can be monitored by AxonIQ Console. The process to connect your application built with Axon Framework and/or Axon Server depends a little bit on whether your application is built with Axon Framework using plain Java, or if you have an Axon Framework application built with Spring Boot. Click on the option that matches your case and follow the instructions to configure your application. At the end you will be see a screen waiting for you to run your application and connect to AxonIQ Console. After you run the application (or applications), you will see a page with the confirmation of the connected applications. Click on the 'Go to My Workspace' button to access the AxonIQ Console dashboard.","title":"First Time Setup","component":"axoniq-console-getting-started","version":"main","name":"setting-up-your-account","url":"/axoniq-console-getting-started/main/ac-gs-setup/setting-up-your-account/","titles":[{"text":"Part 1. Setting up your account","hash":"_part_1_setting_up_your_account","id":1},{"text":"Part 2. Setting up your workspace","hash":"_part_2_setting_up_your_workspace","id":2},{"text":"Part 3. Connect your application","hash":"_part_3_connect_your_application","id":3}]},"235":{"id":235,"text":"Now that you have successfully specified your workspace and environment, the home screen for the AxonIQ Console dashboard is shown below. The AxonIQ Console Dashboard arranges the information collected from your Axon applications in several different tabs. Each of those tabs is focused on showing a specific part of the behaviour of your application. The 'Start' Tab shows a summary of the Axon Framework applications connected and also information about any Axon Server instances connected. For now, we only have connected a couple of Axon Framework applications. We will see in a later section how to connect an Axon Server instance to our AxonIQ Console dashboard. In case you did not connect any applications, the 'Start' tab on the AxonIQ Console dashboard, will show a panel with instructions to connect your Axon Framework applications or run our \"Bike Rental Demo\" application, which is already prepared for you to run and connect with AxonIQ Console. The AxonIQ Console provides different capabilities depending upon if you are using Axon Framework or Axon Server. Choose the guide below depending on your needs: Using AxonIQ Console to Manage and Deploy Axon Server Using AxonIQ Console to Monitor Axon Framework Applications Managing AxonIQ Console Itself as the Super User","title":"Success! Your AxonIQ Console Dashboard","component":"axoniq-console-getting-started","version":"main","name":"success","url":"/axoniq-console-getting-started/main/ac-gs-setup/success/","titles":[]},"236":{"id":236,"text":"The Aggregates tab lists the Aggregates within your Workspace and Environment. So, what exactly is an Aggregate? In the context of the Axon Framework, an Aggregate is a logical group of domain objects that can be treated as a single unitin regards to data changes. In doing so, they reflect the class’ that are configured as aggregates (for example through the @Aggregate annotation) in your application. Using AxonIQ Console, developers can get the necessary insight into all the aggregates defined within their system, including their types and instances. As shown in the table above, developers can also see which aggregates are defined per application. Click on any row in the table to get more details on the statistics of the selected Aggregate, just as with Processors. The aggergate detail view has two main areas: At the top there is a table that allows you to choose to display a list of handlers defined for the aggregate, a list of message sources for the aggregate, or a list of message destinations for the aggregate. Clicking on any row in this table will take you to the Handler Details view in the AxoniQ Console 'Handler Insights' tab. At the bottom you will find some graphs showing statistics on the performance of the aggregate over the last few minutes or hours. In this area, you can find graphs showing the message rate, total processing time, or handler execution time, among others. Clicking on any of the graphs will bring it to the front in bigger size. In addition to the specific details for the aggregate, there is a panel on the right side of the tab that displays the alerts detected for this aggregate, if any. This section also includes a button to configure the conditions under which alerts are triggered for this particular aggregate. Without specifying a rule for a specific metric, the environment-wide default for aggregates applies, which can be configured in the Monitoring tab. If you create a specific condition for this aggregate in this configuration section, this aggregate will ignore the environment-wide conditions. The panel also displays, under the 'Environment conditions' section, the list of rules defined to trigger an alert for all the agregates found in any application connected to this environment. The conditions defined in this panel apply only to the specific aggregate selected in the Aggregates tab. If you want to configure alerts for all aggregates found in any application connected to this environment, you should use the Monitoring tab.","title":"The \"Aggregates\" Tab","component":"axoniq-console-getting-started","version":"main","name":"aggregates-tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/aggregates-tab/","titles":[{"text":"Aggregate details","hash":"_aggregate_details","id":1},{"text":"Aggregate alerts","hash":"_aggregate_alerts","id":2}]},"237":{"id":237,"text":"AxonIQ Console is a robust tool designed to aid in the management of message-driven systems. It stands as a testament to AxonIQ’s commitment to evolving its products to meet the needs of its users. By using the Console, teams can ensure efficient management of their applications, leading to improved performance and productivity.","title":"Conclusion","component":"axoniq-console-getting-started","version":"main","name":"conclusion","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/conclusion/","titles":[]},"238":{"id":238,"text":"The AxonIQ Console collects performance and behavior information from your Axon applications and server and organizes it into several different tabs, each of them focused on a specific type of information. The first time you access AxonIQ Console, if you don’t have any Axon applications connected, you will see a dashboard with only the 'Start' tab enabled. The 'Start' tab contains several panels with a summary of the Axon Framework applications and Axon Server cluster or instance that are connected to AxonIQ Console. It also shows some useful links to learn more about how to connect applications or to learn more about Axon Server. If you don’t have any applications connected, the 'Start' tan will include a panel to provide you with detailed instructions on how to connect your first Axon Framework based application. If you don’t have an application of your own ready to be connected to AxonIQ Console, don’t worry, there is also a \"Bike Rental Demo\" application that we have prepared and ready for you to run and connect with your AxonIQ Console workspace. If you don’t have any applications already connected, click on the installation method that applies to your case, and follow the instructions to connect your application. Once you have successfully connected your applications to the AxonIQ Console, you will see a panel listing them and their status. In the following sections, we will go through the different tabs to explore the insights that the AxonIQ Console provides into the performance of your applications.","title":"The AxonIQ Console Dashboard","component":"axoniq-console-getting-started","version":"main","name":"dashboard","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/dashboard/","titles":[{"text":"Connecting your Axon Framework applications.","hash":"_connecting_your_axon_framework_applications","id":1},{"text":"Dashboard with your applications connected","hash":"_dashboard_with_your_applications_connected","id":2}]},"239":{"id":239,"text":"The Handler Insights tab in AxonIQ Console provides detailed information about the message handlers in your system. Message handlers are components that handle commands, events, and queries in an Axon Framework application. In the Handler Insights tab, you can see various metrics related to each handler, such as: The application in which the handler is defined (refer to the Application column) The Component in which the handler is defined (refer to the Component column) The message that the handler processes (refer to the Message column) The number of messages processed by the handler per minute (refer to the “Troughput” column) The percentage of messages that produced an error while the handler was processing it (refer to the Error Rate column) The minimin processing time for a message (refer to the Min column) The median processing time per message (refer to the “Median” column) The time in which 90% of the fastests messages are processed by the handler (refer to the 90 th column) The max processing time for a message (refer to the “Max” column) This information can be extremely useful for understanding the performance of your handlers and identifying any potential issues. If you click on any of the handlers, you will see a graph with more detailed information about the specific handler performance over time. The detail view also allows you to see the message sources and message destinations of the message associated with this handler. In addition to the specific details for the message handler, there is a panel on the right side of the tab that displays the alerts detected for this handler, if any. This section also includes a button to configure the conditions under which alerts are triggered for this particular handler. Without specifying a rule for a specific metric, the environment-wide default for handlers applies, which can be configured in the Monitoring tab. If you create a specific condition for this handler in this configuration section, this handler will ignore the environment-wide conditions. The alert configuration panel also displays, under the 'Environment conditions' section, the list of rules defined to trigger an alert for all the message handlers found in any application connected to this environment. The conditions defined in this panel apply only to the specific message handler selected in the handler insights tab. If you want to configure alerts for all the message handlers found in any application connected to this environment, you should use the Monitoring tab.","title":"The \"Handler Insights\" Tab","component":"axoniq-console-getting-started","version":"main","name":"handler-insights-tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/handler-insights-tab/","titles":[{"text":"Handler details","hash":"_handler_details","id":1},{"text":"Handler alerts","hash":"_handler_alerts","id":2}]},"240":{"id":240,"text":"The Message Flow tab in AxonIQ Console provides a visual representation of the flow of messages between different components of your system. This includes commands, events, and queries that are being sent and received by your applications. The Message Flow tab can be particularly useful for understanding how data is moving through your system and for identifying any potential bottlenecks or issues. It provides a real-time view of the system’s activity, making it easier to monitor and troubleshoot. In addition to the visual representation, the Message Flow tab allows you to click through to the Handler Insights, detailing the statistics about each message, including its type, the components it has passed through, and any errors that have occurred. This can provide valuable insights into the performance and health of your system.","title":"The \"Message Flow\" Tab","component":"axoniq-console-getting-started","version":"main","name":"message-flow-tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/message-flow-tab/","titles":[]},"241":{"id":241,"text":"The Monitoring tab in AxonIQ Console contains information about alerts related to poor performance of your applications. This tab also allows you to configure the conditions that trigger these alerts. On the left side of the panel, you can select different sections to display in the Monitoring tab: Monitoring, Conditions, Overrides, and Integrations. The 'Overview' is the default option displayed when you access the Monitoring tab. The Overview displays a list of all performance alerts currently occurring in any of the applications connected to the AxonIQ Console. When a specified condition is matched AxonIQ Console will create an alert and display it on this panel. The alert is initially displayed as a warning with the status \"Pending Alert\". The alert will also indicate how much time it will take for the alert to become active if the performance does not return to within the limits defined by the alert Conditions. If the observed values for that metric do not return to the accepted range, the alert will become active after the specified time and the panel will show for how long the problem was detected. You can configure this time when creating the condition. A higher value means less chance of false positives, but you will be notified later after detecting a metric has shifted away from its expected range. These alerts are not only displayed in the 'Monitoring' tab. The 'Overview' section of this tab shows a summary of all detected alerts and also provides a link to view the details of these alerts. However, these alerts are also displayed in the form of warning or error icons on other tabs of the AxonIQ Console dashboard that display information corresponding to the components that are not performing well. Example of alerts for underperforming processors shown in the Processors tab This option allows you to view and configure the various alerts and thresholds that will be monitored in the applications connected to the AxonIQ Console. The alerts are grouped into four groups depending on the component for which the alert is defined: Processors, Aggregates, Handlers and Applications. When you click on one of the groups, the panel displays the list of conditions that trigger an alert, along with two buttons to edit or delete the condition, and another button that allows you to define new conditions to trigger alerts under different performance conditions. The conditions defined in this section apply to all components and applications connected to that environment in the AxonIQ Console. You can also define more fine-grained conditions associated with a specific component using the Alerts panel in the detailed view of an application, processor, aggregate, or handler. Each condition is defined based on three properties: The level, which represents the priority (or importance) of this alert. The level of the alert can be defined as Incident, Critical, Major or Minor. The threshold condition, which defines the metric to be monitored and the threshold above which the alert is triggered. The condition consists of: The metric to monitor. The list of possible metrics depends on the component for which the condition is defined. The logical comparator used to evaluate the condition. The threshold value beyond which the alert is triggered. The duration in minutes that the condition must continue to occur before the alert is moved from `Pending' to `Active' status. Consider the Pending status of an alert as a warning that something has started to deviate from the expected behavior. This panel displays the specific conditions defined to trigger alerts associated with a specific component (a specific processor, a specific aggregate, or a specific handler). The conditions defined to trigger an alert associated with a specific component override the default conditions defined in the Conditions section. The 'overrides' are grouped into four categories depending on the type of component they are associated with: applications, processors, aggregates or handlers: The definition of the overrides (specific conditions to trigger an alert associated with specific components) is done clicking on the \"Configure\" button on the alerts panel at the details page of the application, processor, aggregate, or handler tabs The Monitoring feature of AxonIQ Console allows you to configure several tools to send notifications when an alert becomes active. In this panel you can configure the integration with these tools.","title":"The Monitoring Tab","component":"axoniq-console-getting-started","version":"main","name":"monitoring-tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/monitoring-tab/","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Conditions","hash":"_conditions","id":2},{"text":"Overrides","hash":"_overrides","id":3},{"text":"Integrations","hash":"_integrations","id":4}]},"242":{"id":242,"text":"The applications tab provides an overall snapshot of your current environment. This includes detailed information about the AxonIQ applications running in your environment, as shown in the image below. The tab content for the Applications is split up into two sections. The \"Applications list\" section located on the left half (or top half in smaller screens) of the tab provides you with a list of all Axon Framework-based applications that the Console has detected. Here, you can see, for each application connected, if there is any alerts for them, the version of Axon Framework each application is using, the number of application instances connected, as well as the version number of the console-framework-client library the application is using to connect to AxonIQ Console. The \"Installation Instructions\" section located at the right half (or bottom half in smaller screens) of the page provides links to the installation instructions to connect more applications. Clicking on any of the applications shown in the Applications list will display all the known details for that particular application. The application details include three tables that display: The list of online clients (or instances) of this application, including the node name, the Axon Framework version, and the version of the console-client-library used by the application to connect to AxonIQ Console. the slowest 5 handlers detected in the application, including information about the component for which the handler is defined, the message that the handler is associated with, and the time that each handler takes to process the message, expressed as the mean value and the ninetieth percentile value. The configuration for the Axon Framework components used in the application: Message buses, such as CommandBus, QueryBus or EventStore. Processors Library versions used by the application. Apart from the specific details of the application, there is a panel on the right side of the tab containing the performance alerts detected for this application, if any. This section also includes a button to configure the conditions under which an alert is triggered for this specific application. The panel also displays, under the \"Environment Conditions\" section, the list of rules that are definned to trigger an alert for any application connected to this environment. The specific conditions defined in this panel only apply to the specific application selected in the Applications tab. If you want to configure alerts for all applications in this environment, you should use the Monitoring tab.","title":"The Applications Tab","component":"axoniq-console-getting-started","version":"main","name":"overview-tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/overview-tab/","titles":[{"text":"Application details","hash":"_application_details","id":1},{"text":"Application alerts","hash":"_application_alerts","id":2}]},"243":{"id":243,"text":"The Processor tab in AxonIQ Console provides a view of the Event Processors in your system. Event Processors are components that handle events and perform actions based on those events. They are a crucial part of any system built with Axon Framework. In the Processor tab, you can see the status of each Event Processor, including: Whether it’s running or not (refer to the “Status” column) The percentage of segments that are actively processed (refer to the “Claimed” column) A button to access, including things like split, merge, reset, and load balance These statistics can be used to understand the health of your system, gain deeper insights and diagnose any issues. Clicking on any row in the Processors list of the Processors tab will display more details about the statistics of the selected Event Processor, as shown in the image below. The Processor Details view displays three panels that provide insight into the processor’s behavior and configuration: At the top left of the panel is a table that provides a summary of processor status and general information, such as the processor name, processor mode, number of running instances, number and percentage of claimed segments, free segment capacity, updated information on current processor latency, and information on configured automation actions, if any. There are also some buttons for pausing, restarting the processor, and merging or splitting segments. At the top center of the tab is a table that allows the user to view the list of instances, list of segments, event handlers, and also allows to configure automation settings for the processor. At the bottom of the panel are some graphs that show segment utilization, processor latency, and the number of nodes online. You can click on any of the graphs to view them in more detail. In addition to the specific details for the processor, there is a panel on the right side of the tab that displays the performance alerts detected for this processor, if any. This section also includes a button to configure the conditions under which alerts are triggered. The panel also displays, under the 'Environment conditions' section, the list of rules defined to trigger an alert for all processors in any application connected to this environment. The conditions defined in this panel apply only to the specific application selected in the Applications tab. If you want to configure alerts for all processors in any application connected to this environment, you should use the Monitoring tab.","title":"The \"Processors\" Tab","component":"axoniq-console-getting-started","version":"main","name":"processors-tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/processors-tab/","titles":[{"text":"Processor details","hash":"_processor_details","id":1},{"text":"Processor alerts","hash":"_processor_alerts","id":2}]},"244":{"id":244,"text":"To access AxonIQ Console’s functionalities, you can register and log in using either an OAuth2 provider or a username and password. Registering using an OAuth2 provider is the recommended way to log into AxonIQ Console, as this automatically proves your e-mail is verified, and you don’t need to verify it manually. AxonIQ Console currently supports the following OAuth2 providers: GitHub Google You can click on the respective button to log in using the OAuth2 provider of your choice. If this is your first time, you will be asked to authorize AxonIQ Console to access your account information. We authenticate you to the OAuth provider with the three basic scopes of the OIDC protocol: openid, profile, and email. This means we receive your email, first name, last name, profile picture and other basic information. AxonIQ Console will never be able to access resources in the connected account. If you prefer not to use an OAuth2 provider, log in using your e-mail and a password. To register with an E-mail and password, click the \"Sign up\" button on the login screen. You will be asked to enter your e-mail address and password. After creating your account, you will be automatically logged in. However, you will need to verify your e-mail address before you can use AxonIQ Console. You will receive an e-mail with a verification link. Click on the link to verify your e-mail address. After verification, the onboarding will automatically continue. When successfully logged in, you will be taken to the onboarding process. This process will guide you through creating your first workspace and environment or running our Demo application.","title":"Authentication","component":"axoniq-console-reference","version":"main","name":"authentication","url":"/axoniq-console-reference/main/authentication/","titles":[{"text":"Registering using an OAuth2 Provider","hash":"_registering_using_an_oauth2_provider","id":1},{"text":"Data accessed","hash":"_data_accessed","id":2},{"text":"Registering using e-mail and Password","hash":"_registering_using_e_mail_and_password","id":3},{"text":"After registration: Onboarding","hash":"_after_registration_onboarding","id":4}]},"245":{"id":245,"text":"While the basic functionalities of AxonIQ Console are free, some features require a subscription. Each Workspace has a single subscription to which various products can be added. These products can be cancelled individually. If you are a first-time user, you will be able to start a free trial for all products. This trial lasts for a month and has no limits on usage. See the Trial section for more information. AxonIQ Console offers plans to enhance AxonIQ Console itself, as well as licenses for Axon Server. You can unlock more features and functionalities with AxonIQ Console Premium. This includes: Active monitoring and alerts Advanced user management Increased data retention Event processor autoscaling and load-balancing This product unlocks all these features for the entire workspace, regardless of the number of environments. For an extensive overview of the AxonIQ Console Premium features, refer to the \"Subscription\" section in the \"Settings\" tab. By clicking on the \"Subscribe\" button, you can start your AxonIQ Console Premium subscription. You can freely change the number of handlers you want to monitor at any time. These changes follow the rules outlined in the Changes to your subscription section. You can do this by clicking the \"Change Subscription\" button in the \"Subscription\" section of the \"Settings\" tab. Alternatively, you can downgrade to the free version by clicking the \"Downgrade to Free\" button. AxonIQ Console offers licenses for Axon Server. These licenses are available in three different tiers: Developer, Starter, and Pro. You can compare the features of these licenses in the \"Axon Server\" tab of your environments. The Developer edition is free and has no limitations, but it lacks some features, such as clustering and advanced security, that are required for production use. When you want a more reliable and secure environment, you can upgrade to the Starter or Pro edition. Pricing for the Starter and Pro editions is based on the number of applications you want to connect to Axon Server. The Starter edition supports a range of 5 to 40 connections, while the Pro Edition supports a range of 30 to 100 connections. You can change the number of connections at any time. These changes follow the rules outlined in the Changes to your subscription section. To connect more than 100 applications, or want 24/7 support, please use the \"Contact Sales\" button to get in touch with our sales team. You can add, change, and remove products from your subscription anytime. Upgrades to your subscription will be charged immediately prorated for the rest of your subscription period. Downgrading your subscription will go into effect at the start of the next billing period, and the features will remain accessible until the end of the current billing period. The subscription will be automatically canceled when the last product is removed and the billing period ends. AxonIQ Console offers a free trial for all products. This trial lasts for a month and has no limits on usage. You can start the trial by clicking on the \"Start your trial\" button in the banner at the top of the page, as shown below. To start the trial you will be required to enter your payment details. After the trial ends, your subscription will automatically be changed to a paid subscription. You can cancel your subscription at any time, including during the trial period.","title":"Billing","component":"axoniq-console-reference","version":"main","name":"billing","url":"/axoniq-console-reference/main/billing/","titles":[{"text":"Console premium","hash":"_console_premium","id":1},{"text":"Axon Server licenses","hash":"_axon_server_licenses","id":2},{"text":"Changes to your subscription","hash":"_changes_to_your_subscription","id":3},{"text":"Trial","hash":"_trial","id":4}]},"246":{"id":246,"text":"","title":"Data Processing","component":"axoniq-console-reference","version":"main","name":"data-processing","url":"/axoniq-console-reference/main/data-processing/","titles":[]},"247":{"id":247,"text":"AxonIQ Console is the SaaS tool that allows you to get insights on how your application built with AxonIQ technologies is working. AxonIQ Console is designed to get the most out of your Axon Framework application and Axon Server environment, no matter where it runs. Near-zero configuration is required. AxonIQ Console simplifies a complex enterprise application infrastructure by providing insight, management, control, and reporting; all in one platform. Want to get started from scratch? Check out the AxonIQ Console Getting Started Guide! AxonIQ Console provides a variety of features to help you manage your Axon Framework applications and Axon Server environments. Use the many insightful metrics that tell the health of any part of the application. Manage event processors of with ease. You can start, stop, and reset event processors, as well as scale them automatically. Retry or delete items in Dead-Letter Queues without any hassle. Visualize the message flow in your application. Set up alerts to get notified when something goes wrong. You can try out the Premium Plan for 30 days free of charge. You also have access to many of the Console’s features at no charge at all times. Check out the pricing page for more information.","title":"AxonIQ Console Reference Guide","component":"axoniq-console-reference","version":"main","name":"index","url":"/axoniq-console-reference/main/","titles":[{"text":"Getting started","hash":"_getting_started","id":1},{"text":"Features","hash":"_features","id":2}]},"248":{"id":248,"text":"","title":"Axon Framework","component":"axoniq-console-reference","version":"main","name":"axon-framework","url":"/axoniq-console-reference/main/connectors/axon-framework/","titles":[]},"249":{"id":249,"text":"","title":"Axon Server","component":"axoniq-console-reference","version":"main","name":"axon-server","url":"/axoniq-console-reference/main/connectors/axon-server/","titles":[]},"250":{"id":250,"text":"","title":"Connectors","component":"axoniq-console-reference","version":"main","name":"index","url":"/axoniq-console-reference/main/connectors/","titles":[]},"251":{"id":251,"text":"Version 4.6.0 of Axon Framework introduced the Dead-Letter Queue (DLQ) mechanism. This mechanism allows you to store messages that could not be processed by an Event Processor, for example due to an exception being thrown. The messages can then be inspected and possibly retried. Axon Framework only provides a programmatic interface to see and manage the DLQ, and any mechanism for retries needs to be implemented by the user. AxonIQ Console provides a graphical interface to inspect and manage the DLQ, and also provides a mechanism to delete and retry messages. You can only see the amount of messages in the DLQ by default, not its contents. This is to prevent unwanted access to the contents of the DLQ. If you want to see the contents of the DLQ, you can enable this in the properties of the Framework client. See Axon Framework Connector for more information. When a processor has one or more DLQs, you can see this in the Processor overview under the \"Dead Letters\" column, as shown below. Clicking on the queue will take you to the DLQ overview page, where you can see all sequences in the Dead-Letter Queue, along with the number of messages in the sequence, the cause of the failure, and the time the message was added to the DLQ. To retry processing of the sequence you can click \"Retry\" on the row of that sequence. You can also click the \"Delete\" button to delete the entire sequence from the DLQ. This will remove all messages in the sequence from the DLQ.","title":"Dead-Letter Queues","component":"axoniq-console-reference","version":"main","name":"dlq","url":"/axoniq-console-reference/main/features/dlq/","titles":[]},"252":{"id":252,"text":"","title":"Flow Diagram","component":"axoniq-console-reference","version":"main","name":"flow","url":"/axoniq-console-reference/main/features/flow/","titles":[]},"253":{"id":253,"text":"AxonIQ Console provides a variety of features to help you manage your Axon Framework applications and Axon Server environments. Use the many insightful metrics that tell the health of any part of the application. Manage event processors of with ease. You can start, stop, and reset event processors, as well as scale them automatically. Retry or delete items in Dead-Letter Queues without any hassle. Visualize the message flow in your application. Set up alerts to get notified when something goes wrong. You can try out the Premium Plan for 30 days free of charge. You also have access to many of the Console’s features at no charge at all times. Check out the pricing page for more information.","title":"Features","component":"axoniq-console-reference","version":"main","name":"index","url":"/axoniq-console-reference/main/features/","titles":[]},"254":{"id":254,"text":"Event processors are the components in your application that process events. They can be used to update a read model, send an email, or do any other action based on the events in your system. AxonIQ Console provides you with an overview of all your processors, their instances, and their segments. It also allows you to act on these processors, like starting, stopping, or pausing. You can also set up alerts for your processors, so you get notified when something goes wrong. This page describes the features individually. For an in-depth explanation of the screens, see the Onboarding Guide. For more information about the statistics available on the processor detail page, see the Metrics feature page. Streaming event processors are processors that process events asynchronously by streaming the event store. They claim segments of the event store and process the events that match that segment’s filter. This allows you to process events in parallel, which can greatly improve the performance of your application. When a segment is being processed, it is claimed by a single instance of the processor. This means that no other instance can claim that segment. However, if a segment is not being processed, that means that a part of your event stream is not being processed. This can lead to outdated read models, or other problems in your application. Or, if your event processor is too slow, it can lead to an increased latency (time until data is available) in your application. It’s thus crucial to ensure that all segments are being processed, and that the processors are not too slow. You will also want to be able to manage the processors by implementing controls that can pause and start them, increase or decrease the number of segments, and trigger a replay of the events. While you can build it yourself using the Axon Framework API This is where AxonIQ Console comes in. You can pause processors to stop them from processing events. This can be useful if you want to stop processing events for a while, for example, to do maintenance on your application. To pause all instances of a processor, click the \"Pause\" button in the left processor detail page. When you are done, you can click the \"Start\" button to start processing events on all instances again. The \"Start\" button is the first button and the \"Pause\" button is the second button in the image below. These actions are done on the currently online nodes. If a node comes online with the event processor started, it will start processing events anyway. If you want to stop an individual instance of a processor, you can do so by clicking the \"Pause\" button of that row in the instances table. This will stop processing events on that instance, but not on the other instances. When you are done, you can click the \"Start\" button to start processing events on that instance again. As mentioned in Streaming event processors, segments are parts of the event stream that are processed in parallel. By default, a Pooled Streaming Event Processor has 16 segments, and a Tracking Event Processor 1, depending on the configuration at the time the processor was created. You can increase or decrease the number of segments to increase or decrease the parallelism of your application. However, this can not be done using configuration because segments are only initialized when the processor is started for the first time. After that, you need to use the Split and Merge actions of Axon Framework programmatically, or you can use AxonIQ Console. It’s likely that your event processor interacts with the database, or you use a token store implementation that stores the tokens in the database. This means that more segments require a higher number of connections to the database. If you use a database, it’s important that your database pool can handle this increase in number of connections. Make sure your database and the connection pool of your application can handle this, or you might run into problems. You can use the \"Split\" and \"Merge\" buttons in the Processor detail page to split or merge segments. These buttons are shown in the image below. The \"Merge\" button is the third button in the left column, and the \"Split\" button is the fourth button in the image below. The \"Split\" button will only be enabled if the event processor has \"Free Segment Capacity\", which can be found in the left column. This is the number of segments that can be claimed by an instance of the processor. If this number is 0, you can not split the segments, as then the segment would not be able to be processed. We recommend using Pooled Streaming Event Processors for most applications. While every segment requires a thread when using Tracking Event Processors, Pooled Streaming Event Processors use one thread for reading events and handing packages to a pool of threads that process the events. Because of this design, Pooled Streaming Event Processors are more efficient in most cases. You can reset the position of the segments of a processor, causing what we call a replay. This can be useful if you want to consume the whole event stream, or part thereof, again, for example to fix a bug in your application. In order to execute a reset well, you need to ensure that the processor is paused on all nodes before the reset. Likewise, you need to ensure that the processor is started on all nodes after the reset. AxonIQ Console makes sure this is done in the right order, and that all instances of the processor are stopped before the reset is executed. To reset a processor, click the \"Reset\" button in the left column of the processors' detail page. This will open a dialog in which you can specify to which point you want to reset the processor. You can choose to reset to position 0 (tail), to the latest position (head), or to a specific time. As the dialog already mentions, this will invoke any @ResetHandler of the processor, which can be used to, for example, clear the read model before filling it again. This action can not be undone. Make sure you want to reset the processor before you do it. While replaying events can be useful, it can take some time, during which your application has an outdated read model. During the replay, the segments table will show the progress of the replay, like in the image below. Once the replay is done, the status will return to \"Running\". You can move a segment from one instance to another. This can be useful if you want to balance the load of your processors, or if you want to move a segment to another instance for maintenance. To move a segment, click the \"Move\" button in the row of the segment you want to move. This will open a dialog in which you can select the instance you want to move the segment to. After clicking \"Move Segment\", all processors except the one chosen will be asked to blacklist that segment for a short period of time. This is to ensure that the segment is not claimed by another instance while it is being moved. Then, the chosen instance will be asked to claim the specific segment. While you can load-balance a processor’s segment manually, like outlined in Moving a segment, AxonIQ Console can also do this for you automatically. This feature is only available in the Premium and Enterprise plans of AxonIQ Console. You can enable automatic load balancing by going to the \"Automation\" tab of the processor’s detail page. Here you can enable or disable the automatic load balancing. When automatic load balancing is enabled, AxonIQ Console will automatically balance the segments of the processor over the instances of the processor. This is done by moving segments from instances that have a lot of segments to instances that have fewer segments. Additionally, you can add automatic scaling, defining how many segments you want per instance. AxonIQ Console will then create or remove segments to ensure that the number of segments per instance is as close to the defined number as possible. AxonIQ Console will never exceed the \"Free Segment Capacity\" of the processor. If the processor has a \"Free Segment Capacity\" of 0, AxonIQ Console will not create any new segments for scaling. You can choose whether AxonIQ Console will execute your chosen strategy this upon node connection changes, periodically, or both.","title":"Processor Management","component":"axoniq-console-reference","version":"main","name":"management","url":"/axoniq-console-reference/main/features/management/","titles":[{"text":"Streaming event processors","hash":"streaming_event_processors","id":1},{"text":"Starting and pausing processors","hash":"_starting_and_pausing_processors","id":2},{"text":"Splitting and merge segments","hash":"_splitting_and_merge_segments","id":3},{"text":"Trigger a replay","hash":"_trigger_a_replay","id":4},{"text":"Moving a segment","hash":"moving_a_segment","id":5},{"text":"Automatic balancing and scaling","hash":"_automatic_balancing_and_scaling","id":6}]},"255":{"id":255,"text":"AxonIQ Console gathers metrics on your Axon Framework applications. These metrics provide information about the performance of your applications and potential problems. All metrics that gather times are measured in milliseconds. AxonIQ Console measures the minimum, median, ninetieth percentile, and maximum values for these metrics. When looking at these values, it’s important to look at the ninetieth percentile, as this value is the value that 90% of the measurements are below. This gives you a good indication of the performance of your application. You can see an example below. Individual measurements of timers count toward their percentiles for 5 minutes, after which they expire and no longer count toward the percentiles. This means that the percentiles are always based on the last 5 minutes of data. All metrics that gather rates are measured in counts per minute. Only the items counted in the last 10 seconds are counted toward the rate. This means that the rate is always based on the last 10 seconds of data, multiplied by 6 to get a rate per minute. You can see an example below. Event processors metrics provide information about the status of your event processors. You can see an example below. The Segment claim Percentage shows the percentage of segments claimed by the event processor. This should, under normal situations, always be 100%. If the segment claim percentage is lower than 100%, it means that some segments are not claimed by the event processor and a part of your event processing is not happening. However, if it’s higher than 100%, this means you either have an in-memory token store configured (which can be a valid use-case to process all events on all application instances), or your applications are stealing tokens from each other because the work in a batch takes longer than the configured claim timeout of the token store. The Ingest latency and Commit latency metrics indicate the amount of time that passes between the publishing of an event and the processing of that event by the event processor. The ingest latency is the time between the publication of the event and the moment it is available for processing. The commit latency is the time between the moment the event is processed and the moment the event processor commits the processing of the event. The Nodes graph shows the number of nodes currently online that are reporting to have this event processor in their configuration. Handler metrics provide information about the performance of your handlers. You can see an example below. The Overview graph shows a breakdown of the time spent on processing the messages by the handler. The time not accounted for is \"Overhead,\" which is time spent outside specific measurements. This can be due to Garbage Collection, I/O, or other system activities. The Message Rate shows the number of messages processed by the aggregate per second. It also shows the number of failed messages per second. The Total Time shows the total time spent processing the message by the handler. This metric can vary based on the type of handler. For example, for aggregates it includes the loading of the aggregate from the event store, the processing of the command, and the committing of the events to the event store. The Handler Time shows the time spent in your handler code. Aggregate metrics provide information about the performance of your aggregates. As aggregates handle messages, they have the same metrics as Handlers. In addition, they have several special metrics. You can see an example below. The Lock Time shows the time spent acquiring the lock on the aggregate. This is the time spent waiting for the lock to be available. As aggregates can only handle one command at a time, it is essential to keep this time as low as possible. High values here can indicate a slow event store, long-running actions in the aggregate, or a high contention on the aggregate. The Load Time shows the time spent loading the aggregate from the event store. This is the time spent reading the events from the event store and applying them to the aggregate. This time includes the time spent acquiring the lock on the aggregate as well. The Event Store Commit Time shows the time spent committing the events to the event store. This is the time spent writing the events to the event store. High values here can indicate a slow event store. The EventStream Size shows the number of events that need to be read from the event store to load the aggregate. As the stream can grow over time, it’s important to consider enabling snapshots to reduce the number of events that need to be read. Generally, we recommend keeping this number below 250 events. Application metrics provide information about the performance of your application. This includes information about the memory usage, garbage collection, and threads. The Process CPU Usage shows the percentage of CPU used by the JVM process. Regardless of the number of cores, this number will always be between 0 and 100%. The System CPU Usage shows the percentage of CPU used by the system. This includes all processes running on the system. The Heap Usage shows the memory usage of the JVM. The JVM has a heap where all objects are stored. This graph shows the usage of this heap. A rising percentage without a drop can indicate a memory leak. A high percentage can indicate that the JVM is running out of memory. JVMs commit memory as needed, allowing three 8 GB Java applications on an 8 GB system. As such, the reported free memory might not be available once needed. Make sure to monitor the memory usage of the system as well, or you might run into issues. The CommandBus Capacity shows the percentage of the current CommandBus-threads being used over time. This can be used to determine if the CommandBus is able to keep up with the incoming commands. If this number is consistently high, you may need to increase the number of threads in the CommandBus. Note that this only applies to the AxonServerCommandBus. The QueryBus Capacity shows the percentage of the current QueryBus-threads being used over time. This can be used to determine if the QueryBus is able to keep up with the incoming queries. If this number is consistently high, you may need to increase the number of threads in the QueryBus. Note that this only applies to the AxonServerQueryBus. The Live Thread Count shows the number of live threads in the JVM. This includes all threads: the main thread, the garbage collector threads, and the threads used by the application. A high number of threads can indicate a problem in the application. The System Load shows the system load of the system. This is the number of processes that are waiting for CPU time. This number is divided by the number of cores in the system. A system load of 1 means that there is one process waiting for CPU time. A system load of 2 means that there are two processes waiting for CPU time. A system load of 8 on an 8-core system means that all cores are busy. The Nodes graph shows the number of nodes currently online. AxonIQ Console always tries to show you the most relevant information. When you view the metrics of the handler of an event processor, we will also show the metrics of that event processor itself, and the application. This way you can easily correlate problems in your application. The AxonIQ Console will do this as well in the following situations: When viewing the metrics of an event processor, we will show the metrics of the application and the event processor. When viewing the metrics of an aggregate, we will show the metrics of the application and the aggregate. When viewing the metrics of a handler, we will show the metrics of the application and the handler, as well as aggregate metrics if the handler is part of an aggregate, or event processor metrics if the handler is part of an event processor.","title":"Framework Metrics","component":"axoniq-console-reference","version":"main","name":"metrics","url":"/axoniq-console-reference/main/features/metrics/","titles":[{"text":"Measurements: Timers","hash":"_measurements_timers","id":1},{"text":"Measurements: Rates","hash":"_measurements_rates","id":2},{"text":"Event processors metrics","hash":"event_processors_metrics","id":3},{"text":"Handler metrics","hash":"handler_metrics","id":4},{"text":"Aggregate metrics","hash":"aggregate_metrics","id":5},{"text":"Applications metrics","hash":"applications_metrics","id":6},{"text":"Correlation","hash":"_correlation","id":7}]},"256":{"id":256,"text":"AxonIQ Console provides a comprehensive monitoring solution for your Axon Framework applications. By defining conditions based on Framework Metrics, you can get notified when something goes wrong in your application. This way, you can take action before it becomes a problem. Currently, monitoring is only available for Axon Framework applications. Monitoring for Axon Server instances is planned for a future release. You can set up conditions for any metrics available in AxonIQ Console, which are collected by the Axon Framework Client for AxonIQ Console automatically. These conditions are checked once per minute by AxonIQ Console. If thresholds are exceeded, an alert is created. In the Monitoring tab, you can set up conditions for all instances of those resources at once. This way, you can for example set up a condition that triggers an alert when the ingest latency of any event processor in any application exceeds a certain threshold. You can add a condition to any resource type by clicking the \"Add new condition\" button. This adds a new condition to the list that you can configure and then save. The formula has the following parts: Field Description Possible values Level The level of the alerts, useful for filtering which integration receives which alerts Incident, Critical, Major, Minor Metric The metric to check Differs per resource, see available metrics. Operator The operator to use for the check =, !=, >, =, when for minutes\", or \"Create critical when segment claim percentage != 100% for 2 minutes\". You can see this in the screen below. You can always adjust the conditions by clicking the \"Edit\" button next to the condition. This makes the entire row editable. You can change any field, except the level and metric. If you want to change the level or metric, you need to delete the condition and add a new one. If you want to set up conditions for a specific instance of a resource, you can do so by navigating to the resource in the application and clicking \"Configure\" next to the Alerts header in the top right corner. This opens a dialog where you can add a new condition for that specific instance. Setting up conditions for a specific instance works similar to setting up conditions for all instances. You can find a list of all available metrics and their defaults below. After adding a specific condition, it can be found in the resource itself, and in the Overrides section of the Monitoring tab. This way you can easily see which resources have specific conditions set up. In addition, the Conditions section of the Monitoring tab will show \"x override(s)\" when a resource has specific conditions set up. When a condition is met, an alert is created. You can see all alerts in the Alerts section of the Monitoring tab. Each resource page also has an Alerts section where you can see all alerts for that specific resource. You can also see a badge in all tables where resources are listed with the number of alerts, like in the example below. When you click on a row with alerts, you are taken to the resource page where you can see all alerts for that resource. AxonIQ Console can send alerts to various integrations. Currently, only Slack is supported. More integrations are planned for a future release. There are three steps to set up Slack integration: Add our Slack app to your workspace Connect your Slack workspace to your AxonIQ Console workspace Set up the channels to send alerts to Due to the dynamic nature of Slack, we cannot provide a step-by-step guide here. However, we can provide you with the information you need to set up the integration. You can find this information in the Integrations section of the Monitoring tab. The IDs and codes in the above image are unique to your workspace, and the codes in the image are not valid. You can find the correct codes in your workspace. The following table contains all their available metrics and their defaults. The defaults have been found by our Solution Engineers to be a good start to set up monitoring. Some of these are automatically set up for you when you start using AxonIQ Console. Resource Metric Default threshold Set up by default Message Handler Error Rate > 1% Yes, Critical Message Handler Latency (P90) > 200 ms Yes, Critical Message Handler Throughput > 1000/minute No Aggregate Error Rate > 1% Yes, Critical Aggregate Latency (P90) > 200 ms Yes, Critical Aggregate Lock Time (P90) > 25 ms Yes, Major Aggregate Load Time (P90) > 100 ms Yes, Major Aggregate Event Commit Time (P90) > 300 ms Yes, Major Event Processor Segment Claim Percentage != 100% Yes Event Processor Ingest latency > 100 ms Yes, Major Event Processor Commit latency > 300 ms Yes, Major Event Processor DLQ Size > 0 Yes, Critical Application Replica Count 80% Yes, Major Application Host CPU Usage > 80% Yes, Major Application Heap Usage > 80% Yes, Major Application Thread Count > 200 No Application Query Bus Usage > 80% Yes, Major Application Command Bus Usage > 80% Yes, Major","title":"Monitoring","component":"axoniq-console-reference","version":"main","name":"monitoring","url":"/axoniq-console-reference/main/features/monitoring/","titles":[{"text":"Conditions","hash":"_conditions","id":1},{"text":"Specific instances","hash":"_specific_instances","id":2},{"text":"Alerts","hash":"_alerts","id":3},{"text":"Integrations","hash":"integrations","id":4},{"text":"Slack","hash":"_slack","id":5},{"text":"Available metrics","hash":"available_metrics","id":6}]},"257":{"id":257,"text":"Explanation about workspaces, environments and their usage.","title":"Workspaces","component":"axoniq-console-reference","version":"main","name":"index","url":"/axoniq-console-reference/main/workspaces/","titles":[]},"258":{"id":258,"text":"At AxonIQ Console you can set up four main roles, each with different responsibilities assigned to them, to manage and use the platform effectively. The roles and responsibilities are as follows: Owner role can do everything the Admin, Developer, and Viewer roles can, plus: create/remove a workspace name or change the name of a workspace create/remove environments within that workspace name or change the name of an environment manage subscription plans invite/remove team members assign/un-assign/change roles to all team members assign or un-assign an admin on the same workspace change the admin role to the developer/viewer role transfer the ownership of a workspace to another user Admin role can do everything the Developer and Viewer roles can, plus: create/remove new environments in the workspace name or change the name of an environment invite team members add and assign Developer and Viewer roles to users that are not Admin or Owner Developer role can do everything the Viewer role can, plus: start/stop/pause/reset event processors split/merge segments enable autoscaling retry/delete items in the Dead-Letter Queue (DLQ) adjust various monitoring views remove statistics has access to information in all environments within a workspace Viewer role can: only see the information displayed on various environments preview the subscription plan(s) Note: Each Workspace can only have one Owner role. Each Workspace can only have one Admin. Each Workspace can have multiple Developer or Viewer roles. Here’s the information about system roles organized in a matrix format with columns representing roles and their maximum possible responsibilities: Responsibilities Owner Admin Developer Viewer Create/Remove Workspace ✔️ ❌ ❌ ❌ Name/Change Workspace ✔️ ❌ ❌ ❌ Create/Remove Environments ✔️ ✔️ ❌ ❌ Name/Change Environment ✔️ ✔️ ❌ ❌ Manage Subscription Plans ✔️ ❌ ❌ ❌ Invite/Remove Team Members ✔️ ✔️ ❌ ❌ Assign/Un-assign/Change Roles ✔️ ❌ ❌ ❌ Assign/Un-assign Admin ✔️ ✔️ ❌ ❌ Change Admin Role ✔️ ✔️ ❌ ❌ Transfer Ownership ✔️ ❌ ❌ ❌ Create/Remove New Environments ❌ ✔️ ❌ ❌ Invite Team Members ❌ ✔️ ❌ ❌ Add/Assign Developer/Viewer Roles ❌ ✔️ ❌ ❌ Start/Stop/Pause/Reset Event Processors ❌ ❌ ✔️ ❌ Split/Merge Segments ❌ ❌ ✔️ ❌ Enable Autoscaling ❌ ❌ ✔️ ❌ Retry/Delete Items in DLQ ❌ ❌ ✔️ ❌ Adjust Monitoring Views ❌ ❌ ✔️ ❌ Remove Statistics ❌ ❌ ✔️ ❌ Access Information in all Environments ❌ ❌ ✔️ ❌ View Information ✔️ ✔️ ✔️ ✔️ Preview Subscription Plans ✔️ ✔️ ✔️ ✔️","title":"AxonIQ Console Roles","component":"axoniq-console-reference","version":"main","name":"roles","url":"/axoniq-console-reference/main/workspaces/roles/","titles":[{"text":"System roles and responsibilities matrix","hash":"_system_roles_and_responsibilities_matrix","id":1}]},"259":{"id":259,"text":"","title":"Team Management","component":"axoniq-console-reference","version":"main","name":"team-management","url":"/axoniq-console-reference/main/workspaces/team-management/","titles":[]},"260":{"id":260,"text":"AxonIQ Console is the tool we will use in this tutorial to show you how to monitor your distributed application built with Axon and identify any components that are not performing as expected or other bottlenecks and issues. We will use the free plan of AxonIQ Console in this tutorial, which is sufficient to connect a small application and experience its features and benefits firsthand. If you prefer to get a complete idea of what AxonIQ Console has to offer before creating your account, you can read about the different panels and dashboards in the \"Monitoring Axon Framework Applications\" section of the AxonIQ Console Getting Started Guide. If you prefer to explore and discover its features by directly connecting an application, keep reading: We will help you to either connect your own version of the \"Bike Rental\" application or use a docker-based \"Bike Rental\" demo application we have already prepared for you. The first step is to set up your free AxonIQ Console account. To do this, simply follow the steps described in the following sections of the AxonIQ Console Getting Started Guide: Register and create your free AxonIQ Console account Configure your account details and proceed to the next section in this guide when you are presented with a page that gives you the option to either connect your application or run the demo. AxonIQ Console provides detailed instructions con how to connect your own Java or Axon Framework based application, or alternatively, provides a docker-compose.yaml file that allows you to run a version of the bike-rental application that is already configured to connect to the AxonIQ Console environment you have just created. In the second dialog of the First time setup steps step, you can choose your preferred option. You can try to follow the detailed steps provided directly by AxonIQ Console UI to connect your application and skip this guide directly to Monitoring your Application with AxonIQ Console","title":"Introducing AxonIQ Console","component":"bikerental-console-demo","version":"main","name":"axoniq-console","url":"/bikerental-console-demo/main/axoniq-console/","titles":[{"text":"Set up your free AxonIQ Console account.","hash":"_set_up_your_free_axoniq_console_account","id":1}]},"261":{"id":261,"text":"There is a good number of reasons to create a modular distributed applications. These type of applications can scale better, support more workload, react in a elastic manner (scaling up or down) to suddent peaks in the workload, and many more. All of those benefits come from relying on designs and concepts like Event-Driven communication, Location Transparency and loose coupling. On the other side, these kind of distributed applications usually make a little bit harder for the DevOps teams to get a comprehensive view of how the whole system is behaving, and sometimes makes more difficult the task to debug and identify bottlenecks or components that have a poor performance. The usual way of complex systems to allow monitoring is by providing some kind of telemetry that it is usually collected and presented in Graphana Dashboards for example. But that information still requires someone who can understand and read where the performance problems could be. While Axon Framework and Axon Server provides that telemetry, we also provide a better tool to collect those metrics and present the information in a more \"opinionated\" way that gives a comprehensive and more clear view of all the components of your application and analize their performance in an easier way. In this guide, we will use the AxonIQ Console as our tool to gather that telemetry and observe the performance of our system. We will also create some performance problems on-purpose on our sample bike-rental demos application in order to see how AxonIQ Console helps us in detecting those problems. You can read more about AxonIQ Console in the AxonIQConsole Getting Started Guide. This tutorial will guide you through the process to connect the bike rental application to AxonIQ Console and see the how to monitor the behaviour of your distributed system built using Axon Technologies. During this process, we will also use some components to simulate activity for our Bike Rental application. Furthermore, to make things more interesting, we will also use the Axon Fire-Starter to cause some problems on purpose on the application and show how AxonIQ Console can help you detect them. Don’t worry if you don’t want to adapt your application. We will also show you how to use a working demo application and go directly to running it and monitoring its performance. Let’s get started.","title":"Introduction","component":"bikerental-console-demo","version":"main","name":"blogPost-draft","url":"/bikerental-console-demo/main/blogPost-draft/","titles":[]},"262":{"id":262,"text":"In this guide we have walked you trhough the process to register and connect your Axon Framework-based application to AxonIQ Console, and then thanks to the capabilities of the AxonFramework Firestarter library, we were able to introduce some \"problems\" in our aplication and experiment how AxonIQ Console helps to identify pottential problems in our applications. You can experiment with the AxonFramework Firestarter by introducing delays or errors at various points in your modules and applications. See how the AxonIQ Console reacts and identifies the bottlenecks you have created in your system. Through these experiments, you will see how connecting your production applications to the AxonIQ Console and adding the AxonIQ Console dashboard as another useful element to your DevOps toolbelt can benefit you. A little grame proposal to have some fun while exploring AxonIQ Console features You can play a little game with your colleagues to experiment with the power of AxonIQ Console. You can ask your colleague to configure some problems in the demo application using AxonFramework Firestarter, and then you can try to identify where the problem is using AxonIQ Console. Then you can take turns. In the second round, you will configure some problems in the application and ask them if they can figure out what problem you introduced. Take notes and explore all the possibilities offered by the AxonIQ Console. Were the problems easy to find? What problems are easier to identify with AxonIQ Console? What are the most valuable tabs to start searching for problems? What are the most challenging problems to find? Is there any other helpful information you would love to see in AxonIQ Console? Please don’t be shy and don’t hesitate to share your experiences with us and the rest of the community at the AxonIQ Console category of our Discuss forums.","title":"Conclusion","component":"bikerental-console-demo","version":"main","name":"conclusion","url":"/bikerental-console-demo/main/conclusion/","titles":[]},"263":{"id":263,"text":"Once we have our event-driven distributed application in production, there may be some cases where the behavior or performance of our application is not what we expected. This unexpected performance could be because our application has a higher load than expected, because some component is acting as a bottleneck and should be scaled or because a message is stuck or causing problems somewhere in our system architecture. Before randomly jumping into the various software components trying to locate the source of the problem, it would be helpful to have a bird’s-eye view of our system and see where the potential issues might be. In this guide, we will see how you can connect your Axon Framework-based application to the AxonIQ Console and get this comprehensive view of your system behavior. We will use the bike-rental demo application during the guide, but you can use the instructions provided in the guide to connect your own Axon Framework-based application. If you don’t have an Axon Framerwork-based application, the guide will also show you how to run and monitor an application using an already working example application packaged as a set of docker images (all you will need to do is run a docker-compose command).","title":"Introduction","component":"bikerental-console-demo","version":"main","name":"index","url":"/bikerental-console-demo/main/","titles":[]},"264":{"id":264,"text":"Once that you have signed up and created your free account in AxonIQ Console, we can connect our application bike-rental application (or any other Axon Framework based application you may have) and see how it is monitored by AxonIQ Console. In the second dialog after setting up your AxonIQ Console account you were presented with two options to get started using AxonIQ Console, this is where this guide will follow two alternative paths, depending on whether you already have a working application built with Axon Framework (such as the bike-rental application built during Building A Bike Rental Application]) or if you prefer to simply use the demo AxonIQ Console has already prepared for you. AxonIQ Console provides detailed instructions con how to connect your own Java or Axon Framework based application, or alternatively, provides a docker-compose.yaml file that allows you to run a version of the bike-rental application already configured to connect to the AxonIQ Console environment you have just created. In the second dialog of the First time setup steps step you will be able to choose your preferred option. You can try to follow the detailed steps provided directly by AxonIQ Console UI to connect your application and skip this guide directly to xref:monitoring/index.adoc If you want to follow detailed instructions to prepare and connect your own Axon Framework based application, go to Prepare your Application for AxonIQ Console If you want to read the detailed instructions in this guide to run the docker-based application that AxonIQ Console already has available, click on Using Docker-Based Bike-Rental Demo","title":"Connect your Application to AxonIQ Console","component":"bikerental-console-demo","version":"main","name":"index","url":"/bikerental-console-demo/main/connect-your-app/","titles":[]},"265":{"id":265,"text":"This guide offers several alternative paths for you to follow. Choose the one that works best for you. In all cases, the guide will begin by walking you through the process of creating your free account at AxonIQ Console, the online service we will use to connect our Axon Framework-based applications. After that, the guide will offer you several ways to prepare and connect an application to be monitored by AxonIQ Console: Using the bike-rental demo application you developed following the Building A Bike Rental Application tutorial (or any other AxonFramework-based application you already have ready to run). Using the Docker-based demo application available from the AxonIQ Console dashboard. Create some delays or cause errors in your application and see how AxonIQ Console monitors and detects performance issues in your application. For this step, we will use the AxonFramework Firestarter library, which allows us to easily configure and Change the behavior in different points of an Axon Framework-based application. If you are ready, let’s get to it.","title":"Structure Overview","component":"bikerental-console-demo","version":"main","name":"guide-structure","url":"/bikerental-console-demo/main/introduction/guide-structure/","titles":[]},"266":{"id":266,"text":"There are not too many prerequisites or knowledge you need to follow this guide, and we provide options for you to quickly have everything you need. These are the tools that we will use throughout this guide: The first steps of this guide will show you how to create your free AxonIQ Console account. The main tool we will use for this guide is AxonIQ Console, an online service that allows you to connect your application and provides a dashboard with a comprehensive view of your system behavior. It also allows you to drill down into more detailed information about each of your system’s modules/components. AxonIQ Console also allows you to configure alerts to notify you when certain performance thresholds are exceeded. This will be the application that we will be monitoring. During this guide, we will use the bike-rental demo application you built with the Building A Bike Rental Application, but you can also use your own Axon Framework-based application if you already have one. If you don’t have an application built using Axon Framework ready, we will also provide you with a working version of the bike-rental demo application that you can easily run with docker. To make things more interesting, we will deliberately cause performance problems in our running application. This will allow us see the real power of AxonIQ Console in detecting these problems. In order to intentionally change the expected behavior of the application and create these performance problems in our application in an easy way, we will add the Axon Framework Firestarter library to our application. If you plan to use the bike-rental-demo application that we provide via docker images, don’t worry, as this version already has this feature enabled.","title":"Components and Tools Used During This Guide.","component":"bikerental-console-demo","version":"main","name":"required-components-and-tools","url":"/bikerental-console-demo/main/introduction/required-components-and-tools/","titles":[{"text":"AxonIQ Console","hash":"_axoniq_console","id":1},{"text":"Axon Framework based application (optional).","hash":"_axon_framework_based_application_optional","id":2},{"text":"Axon Firestarter library (optional).","hash":"_axon_firestarter_library_optional","id":3}]},"267":{"id":267,"text":"The AxonFramework-Firestarter is a library that allows you to introduce some \"taints\" into your Axon Framework based application. This feature is helpful for exploratory scenarios where we want to create controlled chaos (or start fires) inside our applications to test how our system will react under stress or when problems arise. In this tutorial, we want to use AxonFramwork Firestarter to introduce delays or cause some message handlers to produce errors and see how AxonIQ Console detects and shows these situations. To add Axon Firestarter to your application, simply add the org.axonframework.firestarter:firestarter-spring-starter to your bike-rental application. If you are using the Docker-based bike-rental demo that comes with AxonIQ Console ready to run and connect to the dashboard, you don’t need to do anything because the bike-rental demo Docker images with the different modules have been created with Axon Firestarter. You can jump right to Detecting Issues in your Application to see it in action. The first thing we need to do is to declare the dependency management in the pom.xml of the root project: /pom.xml org.axonframework.firestarter firestarter-spring-starter 0.0.2 With this configuration, we can now add the dependency to any module in our project without specifying the version while keeping the versions in sync. So all you need to do is declare the dependency in your `payment' and `rental' modules: /payment/pom.xml org.axonframework.firestarter firestarter-spring-starter /rental/pom.xml org.axonframework.firestarter firestarter-spring-starter If you split your rental module into the various microservices defined in the /microservices folder, you must add the dependency mentioned above to all the /microservices/rental-* modules. Once you have added the dependency to your modules, update your Maven project and ensure AxonFramework Firestarter is listed among the libraries. Once you have added the AxonFramework Firestarter library to your project, you can start your modules. You will have a dashboard accessible under /fire-starter/ to \"start your little fires within the Axon Framework-based application.\" For example, start your rental module and point your browser to https://localhost:8080/fire-starter/, you will see the following page: If you are using the Docker-based bike rental demo application provided by the AxonIQ Console that is ready to run and connect to the Dashboard, you can access the Axon Firestarter page for each module at the following URLS: FireStarter Rental Command module: http://localhost:10100/fire-starter/ FireStarter Rental Payment module: http://localhost:10101/fire-starter/ FireStarter Rental Query module: http://localhost:10102/fire-starter/ FireStarter Rental UI module: http://localhost:10103/fire-starter/ FireStarter Payment Processor module: http://localhost:10106/fire-starter/ This page will show you all the points where you can configure different degrees of problems or change the application’s performance to introduce some delays. For example, if you click on the 'Event Handlers' button in the 'Events' section, you will see a panel that allows you to introduce fixed or random delays in the time that all the event handlers defined in this application take to process an event and configure them to produce an error in a certain percentage of the events that are processed. For each problem you can configure (fixed delays, random delays, or error rate), you have a checkbox to enable the 'problem' and a field to configure the time or percentage of requests that will cause that problem. Once you have configured your desired behavior, click the \"Save taints\" button and your application will start behaving the way you told Axon FireStarter to behave. Now that you have configured Axon Firestarter in your application, we can start introducing problems in our applications and see how the AxonIQ Console helps us detect these problems in our applications' behavior. We will guide you on how to do it in the Detecting Issues in your Application section.","title":"Introducing AxonFramework Firestarter","component":"bikerental-console-demo","version":"main","name":"add-axon-firestarter","url":"/bikerental-console-demo/main/monitoring/add-axon-firestarter/","titles":[{"text":"Adding Axon Firestarter to your application","hash":"_adding_axon_firestarter_to_your_application","id":1},{"text":"Accessing the Axon Firestarter console.","hash":"_accessing_the_axon_firestarter_console","id":2},{"text":"Conclusion","hash":"_conclusion","id":3}]},"268":{"id":268,"text":"Now we come to the exciting part of this guide, where we will see AxonIQ Console in action: We will be able to introduce problems in our application (or start some small fires) and use AxonIQ Console to detect these problems. The steps in this section are broken down into: First, we will look at overview of all the information AxonIQ Console displays about our application behavior. We will walk you through the AxonIQ Console dashboard to familiarize you with it. To see the real power of AxonIQ Console, we will introduce Axon FireStarter. A library that allows you to introduce some delays and errors at certain points of your Axon Framework-based application. With Axon Firestarter added, we can make our application misbehave and see how AxonIQ Console detects those problems. Proceed to the next section to continue.","title":"Monitoring your Application with AxonIQ Console","component":"bikerental-console-demo","version":"main","name":"index","url":"/bikerental-console-demo/main/monitoring/","titles":[]},"269":{"id":269,"text":"In this step of the tutorial, we will intentionally create some delays and errors in the `bike-rental' demo application that we have connected to our AxonIQ Console dashboard. After configuring the application to present some misbehavior or poor performance, we will see more clearly how AxonIQ Console helps us monitor and detect these issues in our application. We will use the AxonFramework Firestarter library, which we added in the Introducing AxonFramework Firestarter step of this tutorial, and the set of features it provides to introduce the behavior problems in our application. This library is not intended to be used in production environments but for scenarios where we want to do some stress or chaos testing of our system. If you are using the Docker-based bike rental application downloaded during the AxonIQ Console sign-up process, the Axon FireStarter library is already included in all the modules of your application. We will guide you through some scenarios in which we can show how to introduce specific problems and how AxonIQ Console helps you detect them. Detecting a Slow Event Handler We will add more scenarios to this list. If you are interested in how AxonIQ Console helps detect a specific type of problem, let us know your suggestions of content to be added here in the discuss forum category dedicated to AxonIQ Console","title":"Detecting Issues in your Application","component":"bikerental-console-demo","version":"main","name":"issues-w-firestarter","url":"/bikerental-console-demo/main/monitoring/issues-w-firestarter/","titles":[]},"270":{"id":270,"text":"Once you have started your application and all the modules have connected to AxonIQ Console, you should see how they behave in the AxonIQ Console dashboard. The AxonIQ Console dashboard groups all the information collected from your system into several tabs to give you a comprehensive view of your system and also allow to drill down into more detailed information for specific components. Now that our application is connected let’s take a quick tour of the AxonIQ Console Dashboard. The Start tab displays all of the components from our project that have been configured and connected to AxonIQ Console. Depending on the version of the application you have configured to connect to AxonIQ Console, you may see a different number of connected applications. The screenshot above corresponds to the docker-based bike rental application, which has the Axon Framework-based application divided into five microservices (if you are running the version of the bike rental application that you developed following the Building A Bike Rental Application tutorial, you may see only two modules connected). The docker-based bike rental demo also has Axon Server configured to connect to AxonIQ Console, so you may see a different thing in the bottom half of the screen reserved for the Axon Server instances. Don’t worry about this difference, as we will focus on the monitoring capabilities of the Axon Framework application for now. If you are running the bike-rental demo application you developed following the Building A Bike Rental Application tutorial, your Start tab will most likely look like this: When you click on one of the modules, the panel displays additional information about the number of instances of that module connected, the handlers defined in that module, and the number of event processors the application is running. The 'Applications' tab summarizes the different modules and their status. The information is divided into two sections. In the upper half of the panel, there is a list of the different modules with specific information, such as the number of online instances, the Axon Framework version they are using or the CPU and memory usage of each of them. Below this table are several graphs showing the evolution over the last ten minutes of various indicators of the modules' performance and behavior. You can customize the list of graphs you want to see in this section by clicking on the arrow next to the message that says five out of eight graphs are currently selected. Doing that will display a drop-down list to select the graphs you want from all available graphs. If you click on one of the modules from the table shown in the 'Applications' tab, the tab’s contents will change to display more information specific to that module. For example, if you click on the 'Payment Processor' module, you will have access to more insight into the performance of that module and its components: This table shows the number of instances of the module running and connected to AxonIQ Console. In this case, we will have only one instance in the table. But if, at some point, we need to scale out this module by deploying new instances because we notice that the Payment processor is taking more time to process the payments, we will see all these clients listed with different node identifiers: The panel also lists the five slowest handlers in the application. For each handler, the table shows the component name, the handler method, and the time it takes the handler to process a message, measured in milliseconds, along with its median and ninetieth percentile. If you see poor performance in your application, one of these slowest handlers might be a good place to look. Clicking on any handler will take you to that specific handler detail view in the 'Handlers Insights' tab. We can also check the configuration of the application’s different messaging components. You can change the view by clicking on the three tabs of the Configuration panel: The Components table displays information about the different messaging components used by the module, along with their implementation, whether the component is connected to an Axon Server instance, and any Dispatch or Handler Interceptors attached to the bus or serializers used. This information can be useful, for example, to check if an interceptor is attached to a Command or QueryBus that might affect the time it takes to process certain types of messages or if the serializer used to send or receive the messages is the expected one. The Processors table displays information about the event processors used in the application, along with more detailed information such as processor type, batch size, error handlers, or any interceptors or other components configured or attached to the processor. Clicking on a specific processor in this table will take you to the 'Details View' of that particular processor within the Processors tab. Clicking on the 'Versions' label lists all used Axon Framework module libraries and their versions. This view helps see the Axon Framework version used by the application and check that all libraries are using the latest released version. You can also check the 'Show Unused Libraries' checkbox to include the list of libraries defined but not used by the module. The last section of the Application Details tab consists of several graphs that show the evolution of various metrics of the application’s behavior over time. You can select the graphs you want to see by clicking the arrow next to the label that indicates four of eight graphs are selected. This will display a drop-down box with all available graphs. By default, the graphs in the Application Statistics section show the evolution of the module’s behavior over the last ten minutes. However, you can configure a different time window using the drop-down selector at the top right of the graphs. If you select a different value for the time window, your graphs will update to show the evolution of your application’s behavior over that period. The free plan level of the AxonIQ Console only retains information from your connected applications for the last 10 minutes. This time range should be sufficient for evaluation purposes, but if you see the benefits of using AxonIQ Console to monitor your system, you may want to use one of the AxonIQ Console paid tiers with your production applications, which retain information for longer. Click on any of the graphs to enlarge it in the center of the screen. The Processors tab collects information about the event processors defined in your system. The tab displays a table with the different processors, the application or module where they are defined, the processor name, and information about the status and performance of each event processor. Event Processors are the components in an Axon Framework application that perform the tasks necessary to handle an event (for example, launching a transaction if required) and call the event handler that defines the business logic associated with receiving the event. You can learn more about Event Processors in Axon Framework Applications in the dedicated section of the Axon Framework Reference Guide. In the case of our application, we can see the three event processors that we have defined in our bike-rental application: If you click on any processor in the table, the AxonIQ Console will display a page with detailed information gathered from its behavior. For example, if we click on the `io.axoniq.demo.bikerental.payment' processor from the `Payment Processor' application, we will see more details on how this event processor is performing: Let’s go through the different sections. The details page first displays the processor capacity summary table: In addition to basic information about the processor, such as its name, mode, number of running instances, or details about the segments claimed by the processor, this table also shows whether any automation rules are configured for the processor (in the case of the screenshot, there are none). Finally, the summary table offers several buttons to modify the behavior of the processor, which can be helpful in case of poor performance: The button with the play icon allows you to start the Event Processor on all nodes. The Pause button allows you to pause the Event Processor on all nodes. . The merge button merges the two largest segments into one. The merge can only happen if there is more than one segment. The split button splits the smallest segment into two. This action can only be done if there are free threads and all segments are in use. To learn more about how an Axon Framework-based application processes the events and how the segments are split or merged, you can read the xref:axon-framework-reference:tuning:event-processing.adoc#_increasing_and_decreasing_segment_counts section of the Event Processing Tuning article in the Axon Framework Reference Guide. A fifth option is to reset the processor. Resetting the processor means calling any @ResetHandler methods on that processor and resetting the tokens to a desired position. After clicking the 'Reset Processor' link, the AxonIQ Console displays a dialog box asking you to specify the preferred position to which you want to set the processor. A field to set the desired date and time will appear if you select the 'Index at a certain date and time' option. In addition to the summary information table, another table displays specific information for each of the instances. Along with the processor information for each instance, such as status, stream percentage, or latency, a column allows you to pause or start the processor in a specific instance. The buttons in this column allow more granular operation of the processors than those shown in the Processor summary. Clicking the Segments tab in the processor details view displays a list of all the segments into which the event stream is divided. The segment table provides a button in the Actions column to move any segment to another instance if multiple instances are running the event processor. When you click the Event Handlers tab, the processor details view displays a table of all defined event handlers associated with the event processor. The last tab of the central area in the processor detail view allows you to configure some automation rules for the event processor. This panel allows configuring some rules to balance the segments automatically or to scale and balance the segments in certain cases. This feature is only available in the paid plans of AxonIQ Console. You can check the different plans of AxonIQ Console to learn about these premium features. Right below the main area, the processor details view displays three graphs showing statistics on how the event processor’s various performance metrics have evolved over time. By default, this section contains graphs of the percentage of segments in use, latency, and number of nodes online. Clicking the blue down arrow that indicates the number of graphs selected will display a drop-down selector that allows you to select or deselect the graphs in this section. Finally, you can configure the time window displayed by the graphs using the 'Time Window' drop-down list at the top right of the section. You can view each graph in more detail by clicking on it. The last section of the processor details view contains additional graphs with statistics on various application performance metrics that might be useful for checking the processors' performance. In this case, by default, you will see graphs that show the evolution over the last ten minutes of the application’s CPU usage, the system CPU usage, the command bus and queuing bus capacity, the number of live threads in the different applications, or the system load, among other graphs…​ As in the processor statistics section, you can select or deselect the graphs displayed in this section by clicking on the blue down arrow that indicates the number of chosen graphs. You can also configure the time window displayed by the graphs using the 'Time Window' drop-down list at the top right side of the section. The Aggregates tab lists all aggregates defined as part of the command model. When you click one of the aggregates, the tab displays the details view for that aggregate. Clicking on the 'Payment' aggregate row in the Summary table on the Aggregates tab displays the following details about the behavior of the processing requests associated with this aggregate. The first table in the aggregate details view of the 'Aggregates' tab displays any message handlers (command handlers in this case) defined in the application associated with the aggregate. As we can see, there are three commands in our `bike-rental' demo application that affect the `Payment' aggregate: The `PreparePaymentCommand', the `ConfirmPaymentCommand', and the `RejectPaymentCommand'. In our application, the handlers for the first two are working with reasonable throughput, while the handler for the last one is idle because the application does not receive any commands of this type. In an event-based distributed system, losing track of where messages are coming from and where they are going can be easy. The AxonIQ Console provides convenient ways to see how the various messages (commands, queries, and events) travel between the different components of our system. The Message Sources (and Message Destinations) tables in the Aggregate Details view of the Aggregates tab in the AxonIQ Console dashboard are useful tools for identifying where the commands that affect the aggregate are coming from. In our example, we can see the different message handlers or components that trigger any commands that affect the Payment aggregate. The table shows that although several points in the source code could trigger commands for the aggregate, only the receipt of the BikeRequestedEvent triggers the commands that affect the aggregate. Clicking on any of the rows in the table will take you to the Handler Insights view, which shows the handler’s details for that message. Similar to the Message sources., the message destinations allow you to see which messages are triggered by the aggregate and any components defined in our system that handle those messages. In our example, we can see that the aggregate triggers three different messages: PaymentConfirmedEvent, PaymentPreparedEvent, and PaymentRejectedEvent. We can also see all the handlers defined for each of these events. For example, the PaymentConfirmedEvent has two components that define a handler: the PaymentSaga and the PaymentStatusProjection. Clicking on any of the rows in the table will take you to the Handler Insights view, which shows the handler’s details for that message. Below the general details of the aggregate, a section displays graphs showing how various metrics have evolved over time relative to their behavior. In this case, by default, you will see graphs that show the evolution of the distribution of the time it takes to process a (command) request, affecting an aggregate, the message rate, or the time spent in the handler method, among other graphs. As with any other section of the AxonIQ Console dashboard that displays these graphs, you can select or deselect the graphs shown in this section by clicking on the blue down arrow that indicates the number of chosen graphs. You can also configure the time window displayed by the graphs using the 'Time Window' drop-down list in the upper right corner of the section. Finally, if you need to see any of the graphs in more detail, you can click on them to enlarge them in the center of the page. The Handler Insights tab provides a view of all the message handlers defined in our system. The table shown in this view is a complete view of all points in our application that receive and process messages of any type. The main table lists all our applications' message handler methods to process commands, events, or queries. The table displays information for locating each handler, such as the application, the component, and the message it handles. Below this information, the table also shows some metrics to see how the handler is performing. Our example shows that the RequestBikeCommand handler in the RentalCommand application has an alert. This alert is expected because the bike-rental demo application implements a handler that causes up to 5% of errors in this handler. This alert is one of the benefits of using the AxonIQ Console to monitor and detect problems in our system. It is just a taste of the AxonIQ Console’s benefits and power. In a later section of this tutorial, we will deliberately create more problems in our application and see how they are detected. On the right side of the main table showing all message handlers, there are several categories that allow you to filter the list and narrow down the information you want to see. For example, if we only want to focus on the requests handled by a specific application, such as the payment processor, we could click on 'Payment Processor' under the 'All Applications' category and then select 'RequestMessage' under 'All Message Types', and we will see our table updated: If you want to reset the filter to show all handlers again, select All Applications and All Message Types in the side menu. If you know the name of a particular message handler, you can use the 'Filter Handlers' input file at the bottom of the filter side menu to enter the name - or part of it - of the message type or component type. When you start typing, the main table will update its contents with only those message handlers whose component name or message name contains the search text you introduced. If you click on any of the rows in the 'Handlers Insights' tab, the page will display detailed information about that specific handler. The first section of the Handler Insight details view displays graphs showing how various handler behavior metrics have changed over time. If you want to see any of these graphs in more detail, you can click on it and it will expand and move to the center of the screen. The first graph shows an overview of the time the handler spends in the different steps of preprocessing a message. This graph includes the handler execution time, the time spent committing the message to the buses, and the overhead. The message rate graph shows the history of the number of messages received and processed per minute over the last period. It also shows the number of messages that caused an error during processing. The Total Time graph shows the trend of various statistical measures of the time it took to process a message in the handler. The graph shows the time it took to process the fastest message (the minimum time), the time it took to process the slowest message (the maximum time), the average of the time it took to process messages (the median), and the maximum time it took to process ninety percent of the fastest messages. The 'Handler Time' graph shows the evolution of various statistical measures of the time taken by the handler to process messages. The graph shows the time it took to process the fastest message (the minimum time), the time it took to process the slowest message (the maximum time), the average of the time it took to process messages (the median), and the maximum time it took to process ninety percent of the fastest messages. By clicking on the 'Message Sources' label, the Handler Insights detail view displays all components that send the messages processed by this handler. In an event-based distributed system, this information is useful for tracking messages and connecting the message handler to other components in our system that produce the information our component consumes. This helps connect the various components of our distributed architecture and sometimes provides the context we need to debug and understand potential problems. Similar to the Message sources., it is sometimes helpful to see which components will receive and handle events or messages sent by the handler we are examining. This is the information we see when we click on the 'Message destinations' label in the 'Handler Insights' details view. In the details view of the Handler Insights tab and the Aggregates tab, we have already seen that AxonIQ Console provides a way to know the source of the messages (events, commands, or queries) processed by a particular handler and to see the components that receive other messages that a particular handler sends. This feature provides an excellent way to see a component’s \"neighbors,\" that is, the handlers related because they send or receive messages associated with the current component. It also allows us to get a small view of how certain messages flow through this particular component. Apart from that, it is useful to have a more comprehensive view of the messages flowing in our system. The Message Flow tab provides exactly this view. By default, this diagram shows the different elements of our system and how they are connected: The applications are represented by large circles The components (aggregates, projections, or sagas) that are the source or destination of messages (events, commands, or queries), represented by smaller dots. The messages that flow from message sources to message destinations. These are represented by animated dotted arcs. The stroke of these lines is thicker or thinner depending on the amount of messages flowing: the thicker the line, the more messages are sent in that particular connection. Optionally, you can also select the diagram to include the buses from which some messages originate. The diagram is configurable, so you can customize it to better represent your system according to your preferences. The first thing you can do is zoom in or zoom out of the diagram by scrolling your mouse over it. You can also rearrange any elements on the diagram (applications or components), and the rest of the connected components will follow your new arrangement. In addition to manually arranging the elements on the diagram, you can also adjust some properties of how the diagram is drawn. On the right side of the diagram, you have several sections that change the \"physics\" of the elements in the diagram. You can spend some time playing around with the different options and seeing how they render different versions of the diagram, which will show how the different components of your application are connected and how messages flow through them.","title":"Overview your Application in AxonIQ Console","component":"bikerental-console-demo","version":"main","name":"your-app-in-axoniq-console","url":"/bikerental-console-demo/main/monitoring/your-app-in-axoniq-console/","titles":[{"text":"Start tab","hash":"_start_tab","id":1},{"text":"Applications tab","hash":"_applications_tab","id":2},{"text":"Detailed application information.","hash":"_detailed_application_information","id":3},{"text":"Online clients","hash":"_online_clients","id":4},{"text":"Slowest handlers","hash":"_slowest_handlers","id":5},{"text":"Application configuration","hash":"_application_configuration","id":6},{"text":"Components","hash":"_components","id":7},{"text":"Processors","hash":"_processors","id":8},{"text":"Versions","hash":"_versions","id":9},{"text":"Application statistics","hash":"_application_statistics","id":10},{"text":"Select the graphs to display.","hash":"_select_the_graphs_to_display","id":11},{"text":"Configuring the time window for the graphs","hash":"_configuring_the_time_window_for_the_graphs","id":12},{"text":"Processors tab","hash":"_processors_tab","id":13},{"text":"Processor details","hash":"_processor_details","id":14},{"text":"Processor summary","hash":"_processor_summary","id":15},{"text":"Instances","hash":"_instances","id":16},{"text":"Segments","hash":"_segments","id":17},{"text":"Event handlers","hash":"_event_handlers","id":18},{"text":"Automation","hash":"_automation","id":19},{"text":"Processor statistics","hash":"_processor_statistics","id":20},{"text":"Application statistics","hash":"_application_statistics_2","id":21},{"text":"Aggregates tab","hash":"_aggregates_tab","id":22},{"text":"Aggregate details","hash":"_aggregate_details","id":23},{"text":"Aggregate handlers","hash":"_aggregate_handlers","id":24},{"text":"Message sources.","hash":"_message_sources","id":25},{"text":"Message destinations","hash":"_message_destinations","id":26},{"text":"Aggregate statistics","hash":"_aggregate_statistics","id":27},{"text":"Handler insights","hash":"_handler_insights","id":28},{"text":"Filtering handlers","hash":"_filtering_handlers","id":29},{"text":"Searching for a specific handler.","hash":"_searching_for_a_specific_handler","id":30},{"text":"Handler details","hash":"_handler_details","id":31},{"text":"Handler statistics","hash":"_handler_statistics","id":32},{"text":"Handler overview","hash":"_handler_overview","id":33},{"text":"Message rate","hash":"_message_rate","id":34},{"text":"Total time","hash":"_total_time","id":35},{"text":"Handler time","hash":"_handler_time","id":36},{"text":"Message sources","hash":"_message_sources_2","id":37},{"text":"Message destinations","hash":"_message_destinations_2","id":38},{"text":"Message flow","hash":"_message_flow","id":39},{"text":"Customize the message flow diagram.","hash":"_customize_the_message_flow_diagram","id":40}]},"271":{"id":271,"text":"This example shows how the AxonIQ Console can help us identify one or more event handlers performing poorly on our system. The first thing we need is a slow event handler. In this case, we will use the AxonFramework Firestarter to manually configure some delays in the payment module’s event handlers. Access to the /fire-starter/ endpoint of your 'Payment' module. Remember the last slash in the URL. Otherwise, you may get an error saying the page does not exist. Accessing the Firestarter Config page of your Payment module If you use the bike-rental application you created following the Building A Bike Rental Application tutorial, you simply need to access http://localhost:8081/fire-starter/ in your URL. If you are using the Docker-based bike-rental demo application available from AxonIQ Console, open the http://localhost:10106/fire-starter/ URL in your browser. Click the 'Event Handlers' button under the 'Events' category. Configure a fixed delay of 200 ms for all the Event Handlers in the Payment module and click the 'Save taints' button. Soon after applying your configuration to have a fixed delay in the event handlers AxonIQ Console will detect this delay and display indicators in various places. Let’s see the different places where this abnormal performance is displayed. We can start with the Applications tab, where, by default, we may not see any abnormal indicator. If we drill down a bit and click on the Payment Processor application to access the module’s details view, we will see the list of the top five slowest handlers, which also shows the two high-latency event handlers. When we click on either of these two slow event handlers, we are taken to the 'Handler Insights' tab with the details view for this processor loaded. In the Processors tab, we can also see that the Payment Processor application has a high latency. If you upgrade to one of the paid tiers of the AxonIQ Console, you will enable alerts and monitoring, and the main Processor tab will display an alert near the module that displays slow handlers: If you are looking for bottlenecks or slow handlers, click on the 'Latency' column to order the different processors, starting with the one with the highest latency. Clicking on the 'Payment Processor' row will load that processor’s detailed view, giving you access to more information that might explain, or at least give you more context, why this high latency is produced. In this detail view, the 'Processor Statistics' graphs show when the latency started to increase, showing its evolution over the last period of time. You can also check the rest of the Processor Statistics graphs to add more context to the problem. The high latency may correspond to fewer nodes available at any given time (which means you need to scale out your application again by adding more nodes). You can also review the Processor Statistics graph with some of the Application Statistics graphs showing system CPU usage or bus capacity. These additional graphs may explain other reasons for high latency. In our case, the high latency is due to our explicit delay configuration in AxoFramework Firestarter, so the other graphs will not show any variation. If none of the other graphs add any context to the high latency, the scenario corresponds to a slow algorithm that needs to be fixed in the event handlers (or, in our case, the manually added delay in AxonFramework Firestarter needs to be removed). If you click the Handler Insights tab, you will see these two event handlers with high latency. If you are looking for slow handlers, you can sort them by the time it takes to process the events by clicking one of the column headers that show the execution time (min, median, ninetieth percentile, or max). When you click on one of the slow handlers, the details view for that handler displays different graphs showing its evolution and total time. You can use the different graphs to add more context and see if there is another graph that also explains why the high latency is being produced (such as a sudden increase in the message rate, a change in the number of online nodes, or a sudden change in the system CPU usage). Remember that you can always click on any graphs to view them in more detail. In this graph, you can see how the different statistic values increase at different times. The maximum latency value is captured immediately after the delay is configured in AxonFramework Firestarter, while the average, ninetieth percentile, and minimum values take longer to rise. If you upgrade your AxonIQ Console subscription to one of the paid plans you will have access to the notification and alerting features. This feature means that issues will be more visible in the form of alerts right from the home page. The alerts will also be displayed in any tab that displays information relevant to the module or component that is not behaving correctly. Figure 1. Alerts shown in the processor tab Figure 2. Alerts shown in the handler insights tab The Monitoring tab gives you a single view of any alerts or warnings detected on your system. image::ac-alerts-monitoring-tab.png[alt=\"Screenshot of the Monitoring tab of the AxonIQ Console dashboard showing some of the alerts and warnings detected on your system\"]. You can also configure custom parameters to trigger these notifications or alerts using the Conditions section, which allows you to configure the thresholds in various metrics used to activate these alerts. This configuration applies to all components in your system. Still, AxonIQ Console also allows you to fine-tune these conditions for specific components, such as a particular event handler in a specific module. This configuration can be done through the details view of the component you want to customize, but the Monitoring tab allows you to see a list of all these specific configurations that override the global conditions through the Overrides section of the Monitoring tab. In addition, you can configure notifications or integrate with other tools you may already be using for this purpose, such as Slack, PagerDuty, or email. This configuration can be done from the Integrations section of the Monitoring tab.","title":"Detecting a Slow Event Handler","component":"bikerental-console-demo","version":"main","name":"slow-event-handlers","url":"/bikerental-console-demo/main/monitoring/slow-event-handlers/","titles":[{"text":"Generate a slow event handler","hash":"_generate_a_slow_event_handler","id":1},{"text":"The applications tab","hash":"_the_applications_tab","id":2},{"text":"The processors tab","hash":"_the_processors_tab","id":3},{"text":"The handler insights tab","hash":"_the_handler_insights_tab","id":4},{"text":"Alerts in the start tab","hash":"_alerts_in_the_start_tab","id":5},{"text":"Alerts in the Monitoring tab","hash":"_alerts_in_the_monitoring_tab","id":6}]},"272":{"id":272,"text":"After connecting our Axon Framework-based application to AxonIQ Console, and in order to see the benefits of AxonIQ Console while monitoring our system, we will need to send some requests to our application. We could simply start sending some requests manually to our the REST endpoints defined by our bike-rental application. But that will be soon a tedious task to repeat if we want to focus on monitoring our application. So, in this step, we are going to introduce some code to make our application active without the need of us having to manually send requests. To keep things easy and quick, we will do this in two steps: First we will define a new","title":"Add Activity Simulator to Your Application","component":"bikerental-console-demo","version":"main","name":"bike-rental-activity-simulator","url":"/bikerental-console-demo/main/connect-your-app/custom-app/bike-rental-activity-simulator/","titles":[]},"273":{"id":273,"text":"This section will prepare and connect our Axon Framework-based application to AxonIQ Console. We will follow the steps provided by the AxonIQ Console interface after signing up and setting up our free AxonIQ Console account. If you did not follow the Building A Bike Rental Application tutorial and you do not have an Axon Framework-based application ready to connect to AxonIQ Console, you can also use a docker-based bike-rental application that we have prepared for you to easily start and connect to AxonIQ Console. Just skip to Using Docker-Based Bike-Rental Demo section of this guide. During the process of creating your account, AxonIQ Console presented you with the following panel to choose whether to \"connect your application\" or \"start the demo\". The rest of this article corresponds to the instructions displayed when the \"Connect my application\" option is selected in this dialog. If you prefer to explore AxonIQ Console features using the demo application and you clicked on the 'Start Demo' button, you may want to refer to Using Docker-Based Bike-Rental Demo instead. After selecting the \"Connect my application\" option, the AxonIQ Console onboarding flow will ask you to name your \"Workspace\" and \"Environment\". Workspaces are the way that AxonIQ Console groups and separates different applications. A good name for the workspace is the name of the project or software system that groups all the applications/modules that will connect to that space in AxonIQ Console. In this case, we recommend that you use \"Bike Rental\" as the workspace’s name and click on the 'Continue' button. After creating the workspace, we must prepare our application to connect to AxonIQ Console. The process depends on whether our Axon Framework-based application is built using Spring Boot or plain Java. . In our case, we will use the Bike Rental application that we created during the Building A Bike Rental Application tutorial, built using Spring Boot, we should click the 'Spring Boot Starter' button. The following screen instructs us to add the io.axoniq.console:console-framework-client-spring-boot-starter library to your application. The Axon Framework will use this library to connect to AxonIQ Console and send the necessary telemetry data from our application to check its behavior. If you want to know what kind of data is collected and sent to AxonIQ Console by this library, you can check it in the Data sent to AxonIQ section of the AxonIQ Console Framework Client project repository in GitHub So, go to the root pom.xml file of your bike-rental project and add the following: /pom.xml 1.7.3 io.axoniq.console console-framework-client-spring-boot-starter ${console-framework-client.version} With this dependencyManagement, we will ensure that the version of the a console-framework-client-* library is the same in all the modules we connect. Next, add the library to the payment and rental modules. Go to their respective pom.xml files and add the following: /rental/pom.xml io.axoniq.console console-framework-client-spring-boot-starter /payment/pom.xml io.axoniq.console console-framework-client-spring-boot-starter If you are using the version of the bike-rental application that has split the rental module into multiple microservices/rental-* modules, you should add the console-framework-client-spring-boot-starter library to the pom.xml of each microservice. After adding the dependencies to your projects, update your Maven project and ensure that the console-framework-client-spring-boot-starter library is on the classpath of your modules. Once you have added the dependency, click the Next Step button. In this step, we will configure our rental and payment modules with the credentials to connect and send data to the workspace we created for our project. The dialog AxonIQ Console displays in this step allows you to give the module a name and configure the amount of data you want to send to AxonIQ Console from the dead-letter queues. Once you have provided this information, the panel below will update with the properties you need to configure in your applications' application.properties files. The axoniq.console.credentials token is specific to your workspace and should never be shared publicly. The token will be the same for all the applications/modules that connect to the same workspace (in this case, for both the rental and payment modules), but it will be different for other projects or workspaces. So, let’s add these properties to our rental' and `payment' modules. First, open the `application.properties file in your rental folder and add the following properties (copy and paste from the AxonIQ Console dialog above) /rental/src/main/java/resources/application.properties axoniq.console.application-name=Rental module axoniq.console.credentials= axoniq.console.dlq-mode=NONE Next, do the same with the application.properties file in the payment module: /payment/src/main/java/resources/application.properties axoniq.console.application-name=Payment module axoniq.console.credentials= axoniq.console.dlq-mode=NONE If you are using the version of the bike-rental application that has split the rental module into multiple microservices/rental-* modules, you will need to configure these properties in the src/main/resources/application.properties file for each microservice module. Click on the Next button to continue. We have everything configured in our Axon Framework-based application to connect to AxonIQ Console. AxonIQ Console will now display a panel indicating that it is waiting for our application to connect. Now, all you need to do is run your local application. Start both the payment and rental modules from your IDE as we did in the Running your application in your local environment with Docker Compose step of the tutorial. After launching the applications, you should see the connection in AxonIQ Console: Congratulations, you have connected your Axon Framework-based applications to AxonIQ Console. Click on the \"Go to my workspace\" button to access all the information provided by AxonIQ Console from your application. This will display the main AxonIQ Console dashboard for your application: The dashboard contains several tabs that group the information collected from the modules that are connected to AxonIQ Console. These tabs and the information they contain are briefly described in the AxonIQ Console Getting Started Guide You can explore a little bit the information provided in the different tabs, but since the application is idle, the information will not be much useful at this time. If you are using your own application it would be useful to have a script that invokes some of the endpoints of the application to keep it under certain workload. If you are using the bike-rental demo application you developed following the Building A Bike Rental Application tutorial, you can also check the Activity Simulator we have in the bike-rental GitHub repository (take a look at the Simulator and SimulatorConfigController classes and also the application-simulator.properties file) If you are using the docker-based bike-rental demo application provided by AxonIQ Console, you are lucky, as this version already has the activity simulator included.","title":"Prepare your Application for AxonIQ Console","component":"bikerental-console-demo","version":"main","name":"prepare-app-for-console","url":"/bikerental-console-demo/main/connect-your-app/custom-app/prepare-app-for-console/","titles":[{"text":"Create AxonIQ Console workspace and environment.","hash":"_create_axoniq_console_workspace_and_environment","id":1},{"text":"Add AxonIQ Console client library","hash":"_add_axoniq_console_client_library","id":2},{"text":"Configure AxonIQ Console credentials in your app","hash":"_configure_axoniq_console_credentials_in_your_app","id":3},{"text":"Connect your application to AxonIQ Console","hash":"_connect_your_application_to_axoniq_console","id":4},{"text":"You are ready to monitor your application with AxonIQ Console","hash":"_you_are_ready_to_monitor_your_application_with_axoniq_console","id":5}]},"274":{"id":274,"text":"AxonIQ Console provides a working Axon Framework-based application ready to run on your local machine and connect to your AxonIQ Console dashboard. If you already have your own Axon Framework-based application and have followed the steps described in the Prepare your Application for AxonIQ Console section of this tutorial, you can skip directly to the Monitoring your Application with AxonIQ Console section This demo application has a feature (thanks to the use of the AxonFramework-Firestarter library) that allows you to introduce some delays in specific components of your Axon-Framework application, or to configure the percentage of messages that will cause an error. This feature allows you to experiment by causing problems in your application and see how AxonIQ Console detects them. This exercise is an excellent way to see the real benefit of using AxonIQ Console. Running the Docker-based bike-rental demo on your local machine is easy. The bike-rental demo with all its modules is available through a docker-compose.yml descriptor, so you will only need the following elements: Docker Desktop and Docker compose installed on your local machine. A free AxonIQ Console account. If you don’t already have one, you can follow the instructions in the Setting up your free AxonIQ Console account section of this tutorial. During the sign-up process for your free AxonIQ Console account, you will see a dialog that allows you to choose whether you want to follow the instructions on how to connect your own application or start the demo. Suppose you already have an AxonIQ Console account and you don’t see the previous panel that is part of the sign-up process. In that case, you can access the instructions to download the Docker-based demo application by creating a new environment within a workspace. Then, in the 'Start' tab, below the \"Connect Axon Framework applications\" section, you will see the three options to connect your custom application or start the demo. When you click the \"Run Demo\" button, you will see another dialog that allows you to download the docker-compose descriptor file that will download and run the demo application locally. Click on the 'Download Compose file' button and save the docker-compose.yml file to a local folder on your machine. The docker-compose.yaml file configures multiple docker images with: The various microservices that compose the application: Payment Processor Service, Rental Command Service, Rental Payments Service, Rental Query Service and Rental UI. An Axon Server instance that the different microservices will use as the event store and message broker. These modules already have credentials configured to connect to your AxonIQ Console dashboard. The docker-compose.yaml file provided in this step is customized for your specific account and AxonIQ Console workspace. Please do not share this file with other colleagues; it will connect their applications to your workspace. If you want to share the power of AxonIQ Console with your colleagues, point them to follow this guide, and they will have their own version of the docker-compose file available when they sign up. When you download the docker-compose.yml file, AxonIQ Console displays a dialog box to indicate it is waiting for the application components to connect. All you need to do now is open a terminal, go to the folder where you downloaded the docker-compose.yml file and type the following command: ❯❯ docker compose up You will see Docker start downloading the various Docker images needed to run the demo application and immediately start the containers. Depending on your internet connection, this may take some time. ❯❯ docker compose up [+] Running 8/14 ⠏ service-rental-payment [⡀] 15.12MB / 79.56MB Pulling 268.9s ⠦ 1044f17e2323 Downloading [=========> ] 15.12MB/79.56MB 266.7s ✔ axon-server Pulled 1.6s ✔ service-payment Pulled 194.9s ✔ 7ae84cee97a8 Pull complete 113.5s ✔ 7ed31eaf5ef8 Pull complete 192.4s ✔ 9ee97334f60b Pull complete 192.4s ✔ 29e6b66d6884 Pull complete 192.8s ⠇ service-ui [⣤] 29.19MB / 55.7MB Pulling 268.9s ⠦ 2389b0240d5b Downloading [==========================> ] 29.19MB/55.7MB 266.7s ✔ service-command Pulled 218.0s ✔ 0397a9d5ba94 Pull complete 215.7s ⠇ service-query [⣷] 75.69MB / 79.56MB Pulling 268.9s ⠦ 70f9be2efb6e Downloading [===============================================> ] 75.69MB/79.56MB 266.7s After the download is complete and the containers are launched, you will see the demo application components connected to AxonIQ Console: Click on the \"Continue\" button. Congratulations, you have successfully connected your application to AxonIQ Console. Before showing you the AxonIQ Console dashboard and all the information about how your system behaves, you will see another dialog with some links that may be useful for learning more about \"AxonIQ Console Tools\". Click on the \"Go to my workspace\" to access your AxonIQ Console dashboard and see how AxonIQ Console monitors your application. In the next step we will look at how AxonIQ Console displays the information about your application’s behavior and performance.","title":"Using Docker-Based Bike-Rental Demo","component":"bikerental-console-demo","version":"main","name":"start-docker-based-demo","url":"/bikerental-console-demo/main/connect-your-app/docker-based-demo/start-docker-based-demo/","titles":[{"text":"Requisites.","hash":"_requisites","id":1},{"text":"Dowload the demo application.","hash":"_dowload_the_demo_application","id":2},{"text":"Running locally the demo application.","hash":"_running_locally_the_demo_application","id":3}]},"275":{"id":275,"text":"In this step we will configure the dependencies to use AxonFramework in our project. To enable the use of Axon Framework, we can configure the required Axon Framework dependencies in our project’s pom.xml file. Nevertheless, depending on the specific features we plan to use later, we may need to add additional dependencies for other libraries or tools later (for example, micrometer or reactor). The Bill of Materials (BOM) in Maven is a tool that specifies the list of components, libraries and versions proven to work well together, but without the need to import them until they are specifically referred to later in any of the modules. Axon provides an axon-bom artifact that defines the list of components, libraries, and specfic versions that have been tested and work well. So, we will start by adding the reference to the axon-bom in our root project’s pom.xml maven descriptor. We will start by defining a property to configure the axon.version: /pom.xml 4.9.4 org.axonframework axon-bom ${axon.version} pom import Now, we can declare the dependencies to use Axon Framework in any of the submodules of our project. Once the axon-bom is declared in the root project, we only need to specify the axon framework dependencies in the maven descriptor pom.xml file of the rental module. As we use SpringBoot, we have a convenient way of bootstrapping Axon Framework with the axon-spring-boot-starter. We will also add the axon-test dependency as we will be adding some tests to our project: /rental/pom.xml org.axonframework axon-spring-boot-starter org.axonframework axon-test test We are not specifying the version for any of the Axon Framework dependencies. The reason is that these dependencies are already defined with their specific versions in the axon-bom file that we declared in the root project. We will use the core-api module to define the messages used to communicate the different modules of our rental application. Some of those messages will require using some Java annotations provided by AxonFramework. Thus, we need to add some AxonFramework dependencies to the project. We only need to add the following dependency to the core-api maven descriptor file: /core-api/pom.xml org.axonframework axon-modelling Now, we are ready to start implementing the first functionality for our bike-rental application.","title":"Bootstraping AxonFramework","component":"bikerental-demo","version":"main","name":"bootstraping-axonframework","url":"/bikerental-demo/main/bootstraping-axonframework/","titles":[{"text":"Configuring Axon’s bill of materials (BOM)","hash":"_configuring_axons_bill_of_materials_bom","id":1},{"text":"Declaring Axon dependencies in the rental module","hash":"_declaring_axon_dependencies_in_the_rental_module","id":2},{"text":"Adding support to model messages with Axon in the core-api module.","hash":"_adding_support_to_model_messages_with_axon_in_the_core_api_module","id":3}]},"276":{"id":276,"text":"For our sample application, we will create a multi-module maven project containing only two modules: a core-api module containing the API definition and messages used within the application and a rental module containing the business logic for our bike rental application. We will design our rental module as a modular monolith, which means that we will keep a single project, but with the logic components decoupled so that it is easy to split the module into different pieces later. First, we need to create a new project and configure the AxonFramework dependencies that will help us focus on the business code. We will create a maven project with the following structure: Bike Rental demo application structure 📒 bike-rental (1) 📒 core-api (2) 📂 src 📂 main 📂 java 📦 io.axoniq.demo.bikerental.coreapi (3) 📄 pom.xml (4) 📒 rental (5) 📂 src 📂 main 📂 java 📦 io.axoniq.demo.bikerental.rental (6) 📄 pom.xml (7) 📄 pom.xml (8) 1 The bike-rental root project is the parent project that will contain all the modules from our application. This root project will define org.springframework.boot:spring-boot-starter-parent as its parent to configure SpringBoot support for all the modules. 2 The core-api project will contain the API and definition of the messages used to communicate the different modules. 3 The io.axoniq.demo.bikerental.coreapi is the package where we will place our classes with the definition of Commands, Events, and Queries exchanged between different modules. 4 The pom.xml maven descriptor contains the dependency declaration for the core-api project and links to bike-rental as its parent project. 5 The rental module will be our starting point to place the business logic of our application. 6 The io.axoniq.demo.bikerental.rental package is where we will add the code for our application. 7 The pom.xml maven descriptor will include the dependencies required for the rental module. It also declares bike-rental as its parent and inherits any dependency declaration from that project. 8 Finally, the pom.xml maven descriptor at the root bike-rental project keeps the common dependency definition inherited in all the submodules. It also keeps the list of that form part of the project. If you are already experienced with Maven and/or your IDE, you can just create a multi-maven project with the structure described here and move to the next step of this tutorial to configure Axon Framework in your project. If you prefer to follow step-by-step instructions to create the project, keep reading through the following sections in this step: We will use Maven as the build tool for this project. We aim to create a multi-module project that allows us to deploy each module independently later when -and if- our application reaches the point at which we need to split it and scale out. We will start by creating the root project containing the different modules or subprojects. This type corresponds to a maven project with the packaging property set to pom. You can create the project from your console terminal with the following maven command: mvn archetype:generate \\ -DarchetypeGroupId=org.codehaus.mojo.archetypes \\ -DarchetypeArtifactId=pom-root \\ -DarchetypeVersion=RELEASE \\ -DgroupId=io.axoniq.demo.bikerental \\ -DartifactId=bike-rental \\ -Dversion=0.0.1-SNAPSHOT \\ -DinteractiveMode=false Maven will create a bike-rental folder with a maven project descriptor file: pom.xml. You can import the project into your favorite IDE. Alternatively, you can use your preferred IDE to create the project, making sure to set the following project properties: archetypeGroupId org.codehaus.mojo.archetypes archetypeArtifactId pom-root archetypeVersion RELEASE groupId io.axoniq.demo.bikerental artifactId bike-rental version 0.0.1-SNAPSHOT To configure Java 21 for our project, add these properties to the pom.xml file: 21 21 21 Now that we have our root project, we need to configure it to use SpringBoot. We can configure the SpringBoot dependencies in our project in two ways: the first one is by adding them under the section of the root pom.xml file. Alternatively, we can make our root project depend on `org.springframework.boot:spring-boot-starter-parent', which already defines all the dependencies needed to use SpringBoot in our projects. We will use the second option. Open your pom.xml and add the following snippet right before the tag: org.springframework.boot spring-boot-starter-parent 3.3.0 We will start by creating a main module for our bike rental application. This module will contain the business logic. Our goal with AxonIQ technologies is to focus on a single application and avoid unnecessary complexity by dealing with multiple modules immediately. However, we aim to build our module in a way that allows for easy evolution into different modules. This design is what we call a modular monolith. Our main module will be the rental module. To create it, you can use your IDE to add a new module, or you can use the following maven command from the root bike-rental folder: mvn archetype:generate -DgroupId=io.axoniq.demo.bikerental -DartifactId=rental -Dpackage=io.axoniq.demo.bikerental.rental -DinteractiveMode=false After running the mvn command you will see a new rental directory with a rental/pom.xml file, which declares the project as a sub-module of the root project: rental/pom.xml io.axoniq.demo.bikerental bike-rental 0.0.1-SNAPSHOT rental At the same time, the execution of the mvn command also modified the maven project descriptor of the root project to include the new module: /pom.xml rental Your IDE should now show the new project as a submodule. If the IDE does not detect the new module, you may have to refresh the project structure and reload the Maven projects in your IDE. Although we are going to code our business logic in a single rental module, we also have already mentioned that we want to be able to split our project into different modules when we need to evolve into multiple modules (or microservices). So, we are going to have a module in which we will include the definitions of the messages and classes that are used to communicate the different modules. We will name this project as core-api. To create the core-api submodule, use your IDE to create a new Module (make sure you create it using the root project as the parent), or you can use the following maven command from the root project’s folder: mvn archetype:generate -DgroupId=io.axoniq.demo.bikerental -DartifactId=core-api -Dpackage=io.axoniq.demo.bikerental.coreapi -DinteractiveMode=false After executing the command, you should see a new core-api project with a pom.xml file declaring the root project as the parent: /core-api/pom.xml bike-rental io.axoniq.demo.bikerental 0.0.1-SNAPSHOT And the maven descriptor in the root project now should also include the core-api as a module: /pom.xml rental core-api Your IDE should recognize the two sub-projects as modules. If the IDE does not detect the new module, you may have to refresh the project structure and reload the Maven projects in your IDE. As the last step in creating the multi-module structure for our project, we will declare that the main rental module will use the core-api module. To do that, declare the following dependency in the maven descriptor file for the rental module: rental/pom.xml ${project.groupId} core-api ${project.version} After completing this last step your project should have the structure that we described in the Project Structure section at the begining of this step. Once that we have our project created, in the next step, we will learn how to bootstrap Axon Framework in our project.","title":"Create New Axon Framework Multi-Project","component":"bikerental-demo","version":"main","name":"create-axon-framework-project","url":"/bikerental-demo/main/create-axon-framework-project/","titles":[{"text":"Project structure","hash":"_project_structure","id":1},{"text":"Create the root project","hash":"_create_the_root_project","id":2},{"text":"Configuring SpringBoot","hash":"_configuring_springboot","id":3},{"text":"Create the project modules","hash":"_create_the_project_modules","id":4},{"text":"Creating the main rental module","hash":"_creating_the_main_rental_module","id":5},{"text":"Creating the core-api subproject","hash":"_creating_the_core_api_subproject","id":6},{"text":"Add dependencies for the main rental module","hash":"_add_dependencies_for_the_main_rental_module","id":7}]},"277":{"id":277,"text":"In this tutorial step, we will implement the Query Model, a component whose primary goal is to receive and handle any request for information about our system. These requests, which only expect some information in return and whose processing does not imply making any changes in our system, are known as Queries. In order to efficiently handle and process a query request, we will design our system to maintain a version (or a view) of the data that is updated and aligned with the format in which users can request information from the system. This component that aims to keep a copy of the data aligned with the structure of the expected query response is called the Projection. To keep the projection up to date with the changes made by other components (the command handlers) in the system, the Query Model component must receive the event messages that represent the notification of changes made by the command model and modify the projection accordingly. This way, our query model will be ready to handle any query request to return this updated information view. If we recall the main diagram of our application, it’s now time to focus on the bottom half of the diagram: implementing the components needed to handle and respond to queries. If, as we have just stated, our projection component will focus on handling queries to request information from our system, the first thing we need to consider when designing the query model is the exact request we will handle and how we will return the information. In this case, we will implement support in our application to return information about one or more bikes, including where the bike is, whether it is available or rented and who has rented it. So, we will model all the information expected from these queries in the BikeStatus class. We will define this class in the core-api: core-api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/BikeStatus.java public class BikeStatus { private String bikeId; private String bikeType; private String location; private String renter; private RentalStatus status; public BikeStatus() { } This class defines the fields with the information we need to present in the query response message. To model the status of the bike, we will define the following Java enum: core-api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/RentalStatus.java package io.axoniq.demo.bikerental.coreapi.rental; public enum RentalStatus { AVAILABLE, REQUESTED, RENTED } Finally, after we have all the fields for the BikeStatus response message, it’s convenient to add methods to retrieve the information from the class. So, we can add the accessor methods: core-api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/BikeStatus.java public class BikeStatus { // Accessor methods public String getBikeId() { return bikeId; } public String getBikeType() { return bikeType; } public String getLocation() { return location; } public String getRenter() { return renter; } public RentalStatus getStatus() { return status; } public String description() { switch (status) { case RENTED: return String.format(\"Bike %s was rented by %s in %s\", bikeId, renter, location); case AVAILABLE: return String.format(\"Bike %s is available for rental in %s.\", bikeId, location); case REQUESTED: return String.format(\"Bike %s is requested by %s in %s\", bikeId, renter, location); default: return \"Status unknown\"; } } Now that we have modeled the information we want to expose in response to requests to check the status of a bike. We can now create the component to keep this information updated and ready to be returned when a query request is processed. We need to create a BikeStatusProjection class in the …​rental.query package of our rental module: rental/src/main/java/io/axoniq/demo/bikerental/rental/query/BikeStatusProjection.java @Component public class BikeStatusProjection { private final BikeStatusRepository bikeStatusRepository; (1) public BikeStatusProjection(BikeStatusRepostory repository) { this.bikeStatusRepository = repository; } } 1 We will use a Spring repository to persist the BikeStatus model, which will be updated with the latest state based on the changes represented by the events received from the command model. We need to define the Spring JPA repository we will use in our projection: @Repository (1) public interface BikeStatusRepository extends JpaRepository { (2) } 1 The org.springframework.stereotype.Repository annotation instructs Spring to generate a Repository component from this interface. 2 The convention for Spring JPA repositories is to create an interface that extends from JpaRepository where T is the type of the persisted classes and ID is the type of the identifier field in T. In this case, T should be annotated with @Entity and the ID should be of the same type as the field annotated with @Id in T With Spring Data support, this is all we need to define to have a Repository implementation that supports the basic operations of storing, updating, altering, querying, and dropping BikeStatus instances in the DB. You can learn more about Spring Data Repositories in the section dedicated to \"Defining Repository Interfaces\" from the Spring Data JPA Reference Finally, to make the repository work, we must modify our BikeStatus class to add the persistence annotations. Open the BikeStatus class from the core-api module and introduce the following changes: core-api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/BikeStatus.java @Entity (1) public class BikeStatus { @Id (2) private String bikeId; private String bikeType; private String location; private String renter; private RentalStatus status; public BikeStatus() { } 1 The Entity annotation marks this class as a persistent entity. This is the T in the Spring’s JpaRepository 2 This annotation instruct the persistent layer to consider bikeId as the Id for the persistent record. The type of the field annotated with @Id (in this case String) is the ID in the Spring’s JpaRepository With these changes we are ready to define the methods in our BikeStatusProjection that should handle the events that notify changes made by the command model and update and persist the BikeStatus. To keep the list of our bikes in the query model up to date, we need to define a method that will be invoked whenever a new bike is registered in the system (the BikeRegisteredEvent represents that notification). We can do this by adding an @EventHandler method to our BikeStatusProjection: rental/src/main/java/io/axoniq/demo/bikerental/rental/query/BikeStatusProjection.java @Component public class BikeStatusProjection { @EventHandler (1) public void on(BikeRegisteredEvent event) { (2) var bikeStatus = new BikeStatus(event.bikeId(), event.bikeType(), event.location()); (3) bikeStatusRepository.save(bikeStatus); (4) } } 1 The @EventHandler annotation instructs Axon Framework to register this component as a subscriber to BikeRegisteredEvent and call this method for each one. 2 By default, Axon Framework uses the first argument in the method definition to match the type of events received and passes the event as an argument to the method. 3 Since BikeRegisteredEvent implies that a new bike has been created in the system, we need to create a new instance of BikeStatus to represent the state of this new bike. 4 Finally, we will persist the BikeStatus using the bikeStatusRepository Our next task in defining our projection is to implement the support for handling queries and returning the current information we have. We need to add a @QueryHandler method for each query we want to support. Since we already have the bike statuses persisted in the way we need to return the information, we only need to query the database and return that. Before jumping into creating the methds to handle the queries, we need to consider how we are going to identify the different queries. Axon Framework allows different ways to identify a query message and link that query to the right method for handling it. In this tutorial we are going to start using the most simple way to identify a query: by assigning each query a name. We are going to use String constants to make sure we always refer to the same query name, both in the modules that send the query messages and in the components that are handling them. So, as the first step we will create a class to define and share those query names in different components. Define the following class in the core-api module: /core-api/src/main/java/io/axoniq/demo/bikerental/coreapi/rental/BikeStatusNamedQueries.java package io.axoniq.demo.bikerental.coreapi.rental; public class BikeStatusNamedQueries { public static final String FIND_ALL = \"findAll\"; public static final String FIND_ONE = \"findOne\"; public static final String FIND_AVAILABLE = \"findAvailable\"; } Now that we have the names of the queries defined, let’s define the methods that will handle and respond them. Let’s start by implementing a method to return all the bikes (with their status) defined in our system. Add the following method to your BikeStatusProjection class: rental/src/main/java/io/axoniq/demo/bikerental/rental/query/BikeStatusProjection.java @Component public class BikeStatusProjection { @QueryHandler(queryName = BikeStatusNamedQueries.FIND_ALL) (1) public Iterable findAll() { (2) return bikeStatusRepository.findAll(); (3) } } 1 The org.axonframework.queryhandling.QueryHandler annotation instructs Axon Framework to register this method as a target to invoke for certain types of queries. In this case, we identify the queries by name (although the type of the query message could also identify them, but we will see an example of that later), and we declare the specific name of the query to be handled by this method with the queryName attribute. 2 Since our query has no parameters (we want to retrieve the information for all the bikes in our system), our query handler method does not receive any parameters. It only needs to return the list of items we find in our DB. 3 As we have the information already prepared and aligned with the response format (thanks to the `EventHandler`s), we only need to retrieve the information from the repository and return it. In short, we have defined a query handler method that Axon Framework will call upon the reception of a query message to FIND_ALL the bikes in our system. And the method will simply retrieve the up-to-date information from the DB and return the BikeStatus for all the bikes. We may need to support different query requests for information about the bikes in our system. The same projection can be used to satisfy different queries. For example, if we want to support queries to return all the available bikes, filtering by the type, or the BikeStatus for a specific bike by its bikeId, we can add the following two methods to our BikeStatusProjection: rental/src/main/java/io/axoniq/demo/bikerental/rental/query/BikeStatusProjection.java @Component public class BikeStatusProjection { @QueryHandler(queryName = BikeStatusNamedQueries.FIND_AVAILABLE) (1) public Iterable findAvailable(String bikeType) { (2) return bikeStatusRepository.findAllByBikeTypeAndStatus(bikeType, RentalStatus.AVAILABLE); } @QueryHandler(queryName = BikeStatusNamedQueries.FIND_ONE) (3) public BikeStatus findOne(String bikeId) { (4) return bikeStatusRepository.findById(bikeId).orElse(null); (5) } } 1 We define a new QueryHandler method for the findAvailable query. 2 The query will filter by the type of the bike, so we need to add the bikeType argument to the method. 3 We need to add a specific method to our BikeStatusRepository that implements the query to the DB. We will do that right after this. Since we are using Spring Data, the name of the method should follow a specific pattern. (More on this in a few lines) 4 We define another QueryHandler method for the FIND_ONE query. 5 In this query, we only need to return one bike, and we need the bikeId as an argument to the method. In this case, we will return a single BikeStatus because we are returning a single element and not a collection. 6 The default findById method provided by the Spring Data JpaRepository returns an Optional when we look up an item based on its id. This is because the id we are looking for may not exist in our DB. So we add a fallback to return null in case there is no bike with the given bikeId in the DB. One last thing we need to add is a method to our Spring Data BikeStatusRepository to support the specific method to filter all records from the DB all the records by bikeType and status. Fortunately, thanks to Spring Data we only need to define a method in the BikeStatusRepository interface following a specific naming pattern, and Spring Data will generate the implementation with the corresponding SQL query to the DB. So, go to the BikeStatusRepository and add the following method: @Repository (1) public interface BikeStatusRepository extends JpaRepository { (2) List findAllByBikeTypeAndStatus(String bikeType, RentalStatus status); long countBikeStatusesByBikeType(String bikeType); } When we define a Spring Data JPA repository that extends JpaRepository, Spring Data generates for us the implementation of a basic set of methods to query the database. These generated methods cover the operations of creating, updating, querying and deleting registers from the database. Sometimes we need to define additional queries to filter elements according to different criteria. For these types of queries, Spring Data allows us to simply define new methods in our interface and, if we follow a certain naming convention, Spring will be able to infer the query that needs to be executed against the database from the name of the method and its arguments. This is sometimes called Derived Queries and you can learn how to add specific methods for different queries in the section dedicated to Query Creation from the Spring Data Reference guide Now, our BikeStatusProjection fully supports answering to queries to findAll bikes, findAvailable bikes of a certain type, and findOne specific bike given its bikeId. In the next section we will extend our RestController to add endpoints for these queries and route the queries to the system using Query messages. Now that we have full support in our projection to handle queries, let’s implement and expose the endpoint in our controller that will receive HTTP requests for the query and route the corresponding query message internally. To do this, we will add a couple of @GetMapping annotated methods in the RentalController we created in Implementing the HTTP REST controller. Those methods will use the QueryGateway that we already added to the RentalController to route the queries through Axon Framework: /rental/src/main/java/io/axoniq/demo/bikerental/rental/iu/RentalController.java @RestController (1) @RequestMapping(\"/\") (2) public class RentalController { private final CommandGateway commandGateway; (3) private final QueryGateway queryGateway; (4) } 1 The RestController annotation by spring defines this as a component that will expose the REST endpoint URLs. 2 The @RequestMapping annotation establishes the root URL for all the endpoints exposed by this controller. 3 The CommandGateway is the Axon Framework component that we already used to route commands. 4 The QueryGateway is the Axon Framework component that we will use now to route the query messages. We already configured the query handler methods in the last section to use the queryName attribute and link the method to the query by query name. So, we will add these query names as constants to our RestController: /rental/src/main/java/io/axoniq/demo/bikerental/rental/iu/RentalController.java @RestController @RequestMapping(\"/\") public class RestController { } To implement the method that exposes the endpoint for returning all the bikes and their status, add the following method to our RestController: /rental/src/main/java/io/axoniq/demo/bikerental/rental/iu/RentalController.java @RestController @RequestMapping(\"/\") public class RestController { @GetMapping(\"/bikes\") (1) public CompletableFuture> findAll() { (2) return queryGateway.query( (3) BikeStatusNamedQueries.FIND_ALL, (4) null, (5) ResponseTypes.multipleInstancesOf(BikeStatus.class) (6) ); } } 1 The GetMapping Spring annotation specifies that this method will be invoked whenever a GET request to the URL /bikes is received by the application. 2 The method will return a list of BikeStatus responses. See the info block below for an explanation on returning the CompletableFuture or the List directly. 3 We will use the query mehtod on the queryGateway component provided by AxonFramework to route the query. This method receives three parameters: 4 The query. It could be an object or a String with the query name. In this case, as the queries are simple ones, we have choosen to use query names. 5 The query itself, with the parameters or criteria for filtering the results. In this case, the findAll query does not have any filter, so we specify null as the query. 6 The type of reponse we are expecting from this query. In this case, we expect one or more instances of BikeStatus. A performance consideration on returning CompletableFutures from your RestController method. The queryGateway returns a CompletableFuture which keeps a reference to the result of executing the query, and allows to get the results of type T when they are ready. This way, the call to the query method does not block and returns immediately after sending the query message to the query bus, even though the response message has not been calculated. This way, with Axon Framework, any code sending a query message does not need to wait until the query is fully executed and can do something else while the response is received. Only when we call the get() method on the CompletableFuture the executing thread will block until the response is ready. We could have implemented the method to return the result instead, by returning the result of callling the CompletableFuture::get method: public List findAll() { CompletableFuture> result = queryGateway.query(FIND_ALL_QUERY, null, ResponseTypes.multipleInstanceOf(BikeStatus.class)); return result.get(); (1) } 1 The get() call will block the thread until the result is received back. In this case, the thread calling the findAll method will be blocked until the response message is received, and thus, we are blocking one of the Tomcat’s worker threads. By returning the CompletableFuture> we are not blocking the Tomcat Worker Thread inside findAll. In a similar way, we can add another @GetMapping annotated method to expose the endpoint for receiving requests to get the BikeStatus for a specific bike given its bikeId: /rental/src/main/java/io/axoniq/demo/bikerental/rental/iu/RentalController.java @RestController @RequestMapping(\"/\") public class RestController { @GetMapping(\"/bikes/{bikeId}\") (1) public CompletableFuture findStatus(@PathVariable(\"bikeId\") String bikeId) { (2) return queryGateway.query(BikeStatusNamedQueries.FIND_ONE, bikeId, BikeStatus.class); (3) } } 1 The @GetMapping annotation configures the method to be invoked when a GET request to /bikes/{bikeId} is received, and defines the part of the URL that comes after /bikes/ to be assigned to the bikeId path variable. 2 The @PathVariable(\"bikeId\") annotation instruct Spring to provide to the method argument the value of the URL that matches the bikeId path variable. 3 We use the query method of the queryGateway to send the query message. This time, we specify the provide bikeId as the query criteria as the second argument, and the BikeStatus.class as the type of the response we are expecting from the query. Now we can run our application again as we described in Running your application in your local environment with Docker Compose and test that our queries work. When we invoked the endpoint to register new bikes after we implemented the command handler, the command handler triggered the corresponding BikeRegisteredEvent to notify all the components (like our projection) of the changes. Back then, we didn’t have our BikeStatusProjection implemented, which means we didn’t have the event handlers for those BikeRegisteredEvent. What happen to those changes? Have we lost those events? How are we going to keep our query model updated? Remember that Axon Server acts both as a Message Broker (optimized and configured for routing Events, Commands and Queries), but also as an Event Store. Which means not only that it keeps all those Events persisted, but also that its persistence is optimized for the storage and retrieval patterns needed in a Event-Sourcing architecture. When we start Axon Server (as configured in the docker-compose.yml file), Axon Server will start and all the previous events are still available. When our application connects and register the event handlers for the BikeRegisteredEvent, Axon Server will know that this is a new component that needs all the events from the start. Consequently, Axon Server will deliver to our BikeStatusProjection all the past events in the order that they happened. To test our findAll query we simply need to send a HTTP GET request to the following endpoint: http://localhost:8080/bikes To get the status of a specific bike, we need to send an HTTP GET request to the following URL: http://localhost:8080/bikes/{bikeId} We can invoke the endpoint from the command line using the curl command: % curl -X GET \"http://localhost:8080/bikes\" [ { \"bikeId\": \"8427681b-1ee6-4e0a-b5d8-c524b9ed553d\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" }, { \"bikeId\": \"9f4572c0-c09d-4452-bd31-e0464143baf7\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" }, { \"bikeId\": \"547a47fa-573b-4140-88af-0ea84862944b\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" } ] You can also invoke the findOne query: %% curl -X GET \"http://localhost:8080/bikes/8427681b-1ee6-4e0a-b5d8-c524b9ed553d\" { \"bikeId\": \"8427681b-1ee6-4e0a-b5d8-c524b9ed553d\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" } If you are using IntelliJ IDEA you can edit the requests.http file we created at Invoking the Create Bike EndPoint Using IntelliJ IDEA to add the following lines: /requests.http ### List all # Show available bikes GET {{rental}}/bikes Accept: application/json ### Bike status # Show bike status GET {{rental}}/bikes/8427681b-1ee6-4e0a-b5d8-c524b9ed553d Accept: application/json ### Now you can click on the green \"play\" icon that is shown right to the left of the requests to execute the request: GET http://localhost:8080/bikes HTTP/1.1 200 OK Vary: Origin Vary: Access-Control-Request-Method Vary: Access-Control-Request-Headers Content-Type: application/json Content-Length: 497 [ { \"bikeId\": \"4ee11ca7-3a38-4c37-9584-f016e450998e\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" }, { \"bikeId\": \"9f4572c0-c09d-4452-bd31-e0464143baf7\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" }, { \"bikeId\": \"547a47fa-573b-4140-88af-0ea84862944b\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" }, { \"bikeId\": \"d29775ea-2cd6-4102-b887-552d4cdb84db\", \"bikeType\": \"city\", \"location\": \"Utrecht\", \"renter\": null, \"status\": \"AVAILABLE\" } ] Response file saved. > 2024-04-22T173839.200.json Response code: 200 (OK); Time: 34ms (34 ms); Content length: 497 bytes (497 B) With this, we have implemented an example of the main message handler component that we will have on an application that is designed to be able to scale out easily: We have a command model with the implementation of the Bike aggregate, that defines the @CommandHandler s and sends the events that notifies the changes made in the system as a result of processing the command. The command model also subscribes to those events using some @EventSourcingHandler. This way we can guarantee that the set of events produced by the command handler are the real source of truth for any changes in our system. We also have defined the query model which consists of a Projection of the data kept in a structure that helps replying to any request for information as quick as posible. This queries are processed by the @QueryHandlers defined in the Projection. To keep the data in the Projection up-to-date, we have defined a set of @EventHandler that will be invoked upon reception of the events sent by the @CommandHandler. This event handlers will update the projection’s DB accordinglu. Finally, we have a @RestController that exposes the endpoints for invoking the request to register a new bike, or the queries to retrieve information about all or one specific bike. This controller methods, will send the corresponding Command or Query messages through the CommandGateway or QueryGateway provided by Axon Framework. These are the basic components that we will use to implement any further feature in our system. Sometimes, some of those features, can be a little bit more complex and the business logic may require additional things to consider. We will explore some more advanced topics of building applications with Axon Framework in upcoming sections.","title":"Creating the Query Model","component":"bikerental-demo","version":"main","name":"create-bike-status-projection","url":"/bikerental-demo/main/create-bike-status-projection/","titles":[{"text":"Creating the BikeStatus response message","hash":"_creating_the_bikestatus_response_message","id":1},{"text":"Creating the BikeStatus projection","hash":"_creating_the_bikestatus_projection","id":2},{"text":"Creating the BikeStatus class and the Spring JpaRepository","hash":"_creating_the_bikestatus_class_and_the_spring_jparepository","id":3},{"text":"Define the BikeRegisteredEvent handler.","hash":"_define_the_bikeregisteredevent_handler","id":4},{"text":"Handling the queries from the projection.","hash":"_handling_the_queries_from_the_projection","id":5},{"text":"Using named queries.","hash":"_using_named_queries","id":6},{"text":"Implement a query to return all the bikes.","hash":"_implement_a_query_to_return_all_the_bikes","id":7},{"text":"Implementing support for other queries in our projection.","hash":"_implementing_support_for_other_queries_in_our_projection","id":8},{"text":"Creating the Endpoint to accept query request.","hash":"_creating_the_endpoint_to_accept_query_request","id":9},{"text":"Implementing endpoint for findAll query","hash":"_implementing_endpoint_for_findall_query","id":10},{"text":"Implementing endpoint for findOne query","hash":"_implementing_endpoint_for_findone_query","id":11},{"text":"Running and invoking the queries","hash":"_running_and_invoking_the_queries","id":12},{"text":"Invoking the findAll and findOne queries","hash":"_invoking_the_findall_and_findone_queries","id":13},{"text":"From the command line","hash":"_from_the_command_line","id":14},{"text":"Using IntelliJ IDEA","hash":"_using_intellij_idea","id":15},{"text":"Conclusion.","hash":"_conclusion","id":16}]},"278":{"id":278,"text":"In this step of the tutorial, we will implement the support for our first feature: create (or register) a new bike in our system. Before jumping over the keyboard to start writing code, let’s first introduce the big picture of the design of our system so that we are prepared to split and scale it out later. Although we will work on our rental module, we want to build it as a modular monolith. To achieve that goal, we need to keep a few design goals in mind: Logical modules based on component’s responsibility: We will group them according to their responsibility in our system. We are going to identify the following logical modules: UI/API: Components that receive requests directly from the user or external applications. We will implement our application’s interface to users or other applications using a REST API. Command Model: These are the components that receive all the requests that, as a result of processing them, imply a change in the state of our system. Requests like \"Register a new bike\", \"Rent a bike\" or \"Return a bike\" are a few examples of Commands Query Model (also known as Projections): Composed of components that will handle the requests for information (or queries). In order to reply as fast as possible, these components will keep the data from our system structured as close as possible to how the user expects the information in the response. For example, imagine that our application needs to support requests to get a complete list of all the bikes and their availability status. In that case, a component (a Projection) will keep the list of all the bikes with their state up to date and ready to be sent back when requested. Components loosely coupled: we will use messages (like Commands, Events or Queries) to communicate the different logical modules. Location transparency: we want to rely on abstractions that allow our components not to have to deal with the specific details of how to reach other components to deliver a message. For example, the UI (whose responsibility is to receive HTTP requests and forward the right message to the appropriate handler, either in the Command Model or in the Query Model) should not have to know which is the specific component that will handle and process the request. These design goals may seem complicated to achieve. Still, if we rely on the correct type of messages and thanks to AxonIQ tools, you will see it is much easier to achieve. In summary, our rental application will have the following high-level architecture diagram for handling requests to register a new bike in our system (and, generally, to handle all types of requests.) These could be separate modules, but for now, we are going to consider these just as logical components within the same project: We will define different packages in the same project (in our case, the rental module) When the application receives a request to create a bike, that implies that the state of our application will change because, after successfully processing it, we will have a new bike in our system (so, the list of available bikes -our application’s state- will have changed). So, we will model our request as a Command; in our case, we will call it RegisterBikeCommand. So, the RegisterBikeCommand will be routed to the Command Model, where we will implement a handler method to process it. That method must create the new Bike in our system and notify that \"a new bike has been registered\" to other components interested in this change. The type of this message, a notification that something has happened, corresponds to what we define as an Event. Thus, the command handler will trigger a BikeRegisteredEvent. One last but important thing to remember in our design is the order in which we will implement the code that creates the new bike in our system and the code that fires the event that notifies the change. In our application, we want to follow the design goals of Event Sourcing, and that implies that the changes in our command model will be done as a result of processing the same BikeRegisteredEvent just as any other component in our application will do. That means that, among other good reasons, the list of Events will become our system’s single source of truth. The steps for implementing the command handling for the RegisterBikeCommand will be: Receive and validate the command in the @CommandHandler. If valid, send a BikeRegisteredEvent from the @CommandHandler. Register and receive the BikeRegisteredEvent using an @EventSourcingHandler in our Command model. Create the bike and assign the details for the bike created in the @EventSourcingHandler of our command model. In the following sections, let’s see how to implement each of these steps in detail. As we aim to keep the modules loosely coupled so that we can easily split the modular monolith into different projects if we reach in the future the point in which the application has grown too complex that it needs to scale to multiple simpler modules, it’s a good idea to keep the definition of the messages that we are going to use to communicate those logical modules in the core-api module we created earlier. So, we will create a new CreateBikeCommand in the core-api module. Create a new package io.axoniq.demo.bikerental.coreapi.rental and, inside that package, create the following RegisterBikeCommand: core-api/src/main/java/io/axoniq/demo/bikerental/coreapi/retnal/RegisterBikeCommand.java package io.axoniq.demo.bikerental.coreapi.rental; import org.axonframework.modelling.command.TargetAggregateIdentifier; public record RegisterBikeCommand(@TargetAggregateIdentifier String bikeId, (1) String bikeType, String location) { } 1 The @TargetAggregateIdentifier indicates to AxonFramework to use the bikeId attribute as the unique identifier to load the Bike with id {bikeId} before handling the command. We have defined the command as a Java record that contains the minimum amount of information necessary to process the command. Using a Java record structure also brings the benefit of immutability to our command. You can also use a data class in Kotlin to define the commands. The next step to process the RegisterBikeCommand is to define the component responsible for processing that request. In our example, we are following the DDD design model, which relies on the concept of the Aggregate to model the state of our system. And, with the Axon Framework, we will use the Aggregate to \"designate\" (via annotations) the methods the framework should invoke upon receiving a specific message. Thus, we will start by creating the Aggregate (or Entity) that will represent the state of our application related to the feature of processing requests to register, rent or return a bike. In more complex systems, there are some techniques to design your command and query models based on a previous analysis of the interactions and features that the system will support. Event Storming and Event Modeling are valuable techniques to analyze your system and extract the different Commands, Events, Queries and Aggregates. We can start by creating a Bike class to model our Aggregate. rental/src/main/java/io/axoniq/demo/bikerental/rental/command/Bike.java @Aggregate (1) public class Bike { @AggregateIdentifier (2) private String bikeId; private boolean isAvailable; private String reservedBy; private boolean reservationConfirmed; public Bike() { (3) } } 1 We will mark the class with org.axonframework.spring.stereotype.Aggregate annotation. This way Axon Framework will handle the lifecycle of the instances of our Bikes based on the Commands and Events received by our command model component. 2 We will design the attribute that will hold the unique identifier of our bike instance using the org.axonframework.modeling.command.AggregateIdentifier annotation. 3 We also need a default Java constructor that Axon Framework needs to create the new instance of a bike before populating its fields with the state and invoking the method to handle the Command or Event received. To process a RegisterBikeCommand in our application, we must define a method in our Bike class that receives the command as an argument. To indicate that the method should be invoked upon receiving a command, we will add the @CommandHandler annotation provided by AxonFramework. In this case, as the RegisterBikeCommand is the request to create a new instance of a Bike, we must define the command handler using a constructor. @Aggregate public class Bike { @CommandHandler (1) public Bike(RegisterBikeCommand command) { (2) var seconds = Instant.now().getEpochSecond(); if (seconds % 5 ==0) { throw new IllegalStateException(\"Can't accept new bikes right now\"); } apply(new BikeRegisteredEvent(command.bikeId(), command.bikeType(), command.location())); (3) } } 1 The org.axonframework.commandhandling.CommandHandler annotation instructs Axon Framework to call this method upon receiving commands. 2 The type of the argument indicates to Axon Framework which type of commands should be linked to the invocation of this method. 3 The static method AggregateLifecycle.apply() is invoked to send the Event that notifies the change in the state of our system. In this case, to notify that the bike has been registered. In the command handler, we have not changed the internal properties of the Bike instance. As a general rule and as we discussed in the Command Handler design considerations, we will simply: Validate, if necessary, that the command we received is valid and can be processed. Send a message notifying that, as the command is valid, the bike was registered. We will leave the task of setting the properties of our newly registered Bike instance for a later step, when the command model reacts to the reception of the BikeRegisteredEvent. We want to design our system following the principles of Event Sourcing, which implies we will use the set of Events as the single source of truth for building or refreshing the state of any component in our system. That means that we will also use the BikeRegisteredEvent as the source to trigger the state change in our command model, or, more specifically, in this case, in our Bike aggregate. To be able to react to the event in our Bike aggregate, we need to add a method that receives the BikeRegisteredEvent event as an argument and annotate that method with @EventSourcingHandler: rental/src/main/java/io/axoniq/demo/bikerental/rental/command/Bike.java @Aggregate public class Bike { @EventSourcingHandler (1) protected void handle(BikeRegisteredEvent event) { (2) this.bikeId = event.bikeId(); this.isAvailable = true; } } 1 The EventSourcingHandler annotation indicates to Axon Framework to link this method to the reception of an event. 2 Axon Framework will use the type of the argument to link this method to the specific type of event. In the implementation of the method, we will finally set the bike properties (the state of our model) with the information provided by the event. The EventSourcingHandler will be called right after the event publication by the CommandHandler. But it also will be invoked in the future, for the same event, when the system receives another command for the same bikeId (identified because the command has the same @AggregateIdentifier) and Axon Framework needs to regenerate the current state of the Bike instance, by replaying all previous events with the same bikeId. In the EventSourcingHandler method, we should never validate or ignore the changes represented by the event received. The reception of the event and the invocation of the method imply that the command has already been processed previously. So we can’t ignore or reject those changes because they already happened With this step, we have completed the code to process a Command that represents the request to register a new bike in our system. In this section, we will implement the UI layer for our system. The UI layer represents the interface our system offers to the outside world to interact with our application. In our example, we will start with a REST service interface that offers some endpoints so that a third-party application can invoke our system. This REST interface is convenient for our example because we can show you how to accept requests from the user or another system and create and send the corresponding Command internally. For the controller, we are going to create a simple Spring @RestController, and we will configure a couple of components provided by AxonFramework: CommandGateway: is the abstraction mechanism provided by AxonFramework to send commands to the handler and removes from the controller any need to know all the specifics about the number and location of command handlers registered in our system or how to reach them. QueryGateway: is a similar abstraction to the CommandGateway provided by Axon Framework, but in this case, it is intended to deliver query requests and wait for the query response. Although we will only use the CommandGateway for now, we are also going to add the QueryGateway to our @RestController as we will need it later to implement the handling of requests to gather information from our system. If you prefer to implement your code more progressively, just add the CommandGateway as this is the only component we will use now. You can add the QueryGateway field and its initialization later when implementing the code to handle the first query. The abstraction these two components provide helps keep our @RestController decoupled from the different query and command handlers in our system. Axon Framework will inject the proper implementation to handle the routing and communication patterns required both for queries and commands. Thus, our controller does not need to keep track of any detail about any of the handlers. This property is known as Location Transparency and it’s one of the features that enable our application to scale out later easily because we can move the command handler implementation to a different module and deploy it in a different machine without the need to touch the code that sends the commands. We will place our controller in the io.axoniq.demo.bikerental.rental.ui package. Create a RentalController java class with the following contents: rental/src/main/java/io/axoniq/demo/bikerental/rental/ui/RentalController.java @RestController (1) @RequestMapping(\"/\") (2) public class RentalController { private final CommandGateway commandGateway; (3) private final QueryGateway queryGateway; (4) private final BikeRentalDataGenerator bikeRentalDataGenerator; public RentalController(CommandGateway commandGateway, QueryGateway queryGateway, BikeRentalDataGenerator bikeRentalDataGenerator) { (5) this.commandGateway = commandGateway; this.queryGateway = queryGateway; this.bikeRentalDataGenerator = bikeRentalDataGenerator; } } 1 The @RestController SpringBoot annotation indicates that this component will define the REST endpoints. 2 The @RequestMapping SpringBoot annotation indicates the root path for all the endpoints that this controller handles. 3 The CommandGateway that we will use to send the commands. 4 The QueryGateway that we will use later to send query requests and wait for the response. 5 We will define a constructor that receives both the CommandGateway and QueryGateway as an argument. Spring will provide the right implementation based on the components defined by Axon Framework. We must add a method in our controller to handle the HTTP Request to register a new bike. In our system, to create a new bike, we require the request to provide the type of the bike and the location where the bike is registered. For this endpoint, we will consider the following request format: POST /bikes?bikeType={bikeType}&location={city} When designing a REST endpoint that registers a new element in our system, it is usual to model the API to use a POST request, which contains the information of the entity to create in the body. In this first example, for the sake of simplicity, we will receive the bike details as parameters on the request. To implement the endpoint that handles these requests, add the following method to the RentalController: rental/src/main/java/io/axoniq/demo/bikerental/rental/ui/RentalController.java @PostMapping(\"/bikes\") (1) public CompletableFuture registerBike( @RequestParam(\"bikeType\") String bikeType, (2) @RequestParam(\"location\") String location) { (3) RegisterBikeCommand registerBikeCommand = new RegisterBikeCommand( (4) UUID.randomUUID().toString(), (5) bikeType, location); CompletableFuture commandResult = commandGateway.send(registerBikeCommand); (6) return commandResult; (7) } 1 The @PostMapping links the execution of this method to the reception of POST /bike requests. 2 The bikeType argument is extracted from the parameter with the same name on the request. 3 The location argument is filled with the value of the parameter with the same name from the request’s URL. 4 We must create the RegisterBikeCommand that represents the command we will send to the command handler in the command model. 5 The command requires a unique ID for the bike. As this request represents the creation of the new bike, we have chosen to create a unique ID on the controller. 6 We send the command through the CommandGateway abstraction provided by Axon Framework. 7 The command will be dispatched to the command handler. It will return a CompletableFuture with the result of executing the command. By default, Axon Framework returns the ID of the bike that has been created. If there is any error in delivering the command to a command handler (for example, because there is no command handler registered for `RegisterBikeCommand`s), the CompletableFuture will contain the error. In this section, we have implemented the code necessary to handle requests to register a new bike in our system. The following image represents the design of what we have implemented. Figure 1. Diagram with the flow of messages to register a new bike We can execute our application and see it in action. In our next section, we will go through the steps to run our AxonFramework application together using docker from your development environment.","title":"Implement Create New Bike Feature","component":"bikerental-demo","version":"main","name":"implement-create-bike","url":"/bikerental-demo/main/implement-create-bike/","titles":[{"text":"Design considerations","hash":"_design_considerations","id":1},{"text":"Implementing the process to register a new bike in the system","hash":"_implementing_the_process_to_register_a_new_bike_in_the_system","id":2},{"text":"Defining the command","hash":"_defining_the_command","id":3},{"text":"Implementing the command model","hash":"_implementing_the_command_model","id":4},{"text":"Creating the aggregate class (the Bike)","hash":"_creating_the_aggregate_class_the_bike","id":5},{"text":"Defining the command handler method.","hash":"_defining_the_command_handler_method","id":6},{"text":"Handling the BikeRegisteredEvent in the aggregate","hash":"_handling_the_bikeregisteredevent_in_the_aggregate","id":7},{"text":"Implementing the HTTP REST controller","hash":"_implementing_the_http_rest_controller","id":8},{"text":"Create the SpringBoot controller.","hash":"_create_the_springboot_controller","id":9},{"text":"Implement the endpoint to register a bike","hash":"_implement_the_endpoint_to_register_a_bike","id":10},{"text":"Conclusion","hash":"_conclusion","id":11}]},"279":{"id":279,"text":"Building a new application from scratch can be daunting, especially when learning something new. This tutorial will guide you through the various stages of development, starting with creating your first project and explaining the capabilities of Axon Framework and Axon Server. The result is a simple application you can deploy in \"production\". The tutorial then shows you how to evolve the application, make changes, and deploy it in different scenarios. This tutorial will guide you through the creation of a \"Bike Rental Application\" using Axon Framework and Axon Server. You can follow the steps in the tutorial to complete the project from scratch or check out our Bike Rental Demo repository in GitHub.","title":"Introduction","component":"bikerental-demo","version":"main","name":"index","url":"/bikerental-demo/main/","titles":[]},"280":{"id":280,"text":"Now that we have our first feature implemented, and our application up and running, we can try to invoke the endpoint to register a bike, and check the exchange of commands and events. To test our feature, we need to send the following HTTP request: POST http://localhost:8080/bikes?bikeType={type}&location={city} You can do this directly from the command line, any other HTTP REST client you are used to, or if you are using IntelliJ IDEA as your IDE, we will show you how to prepare a file to quickly execute the HTTP Endpoints we are going to use in this project. You can easily invoke the endpoint from the command line by typing the following curl command in your terminal. > curl -X POST \"http://localhost:8080/bikes?bikeType=city&location=Utrecht\" The command will print out the response of the endpoint call, which, in our case, will be the UUID assigned to the new bike. Although we are sending a POST HTTP request, in this case we don’t need to specify any content in the body request, as all the information is specified in the URL parameters. This way may not be the most recommended design for POST requests in REST services as the required information usually f from the request body and it is specified using either -d, -F or --json options in your curl command). Anyway, for simplicity’s sake, we have designed our first POST endpoint to have all the required information in the URL parameters. If you are using IntelliJ IDEA as your IDE, you can benefit from its HTTP Client plugin to define and invoke all the endpoints of your application. You only need to create a file with .http or .rest extension. Then, you can add the URL of the different endpoints you want to invoke in your system. The various requests should be separated by a line with three hashtag marks (###). Start by creating a text file called requests.http in your root project, and add the following content to it: /requests.http ### Register a new bike POST http://localhost:8080/bikes?bikeType=city&location=Utrecht ### Save the file, and you will see that IntelliJ IDEA now decorates the line containing the POST URL with a green \"play\" button. If you click on it while the 'rental' application is running, you will see how the request is being sent and executed. POST http://localhost:8080/bikes?bikeType=city&location=Utrecht HTTP/1.1 200 OK Vary: Origin Vary: Access-Control-Request-Method Vary: Access-Control-Request-Headers Content-Type: text/plain;charset=UTF-8 Content-Length: 36 8427681b-1ee6-4e0a-b5d8-c524b9ed553d Response code: 200 (OK); Time: 591ms (591 ms); Content length: 36 bytes (36 B) After invoking the endpoint, we can check how our application processed the request and what messages were sent. To do this, we will use the Axon Server dashboard. First, open your browser and go to the following URL http://localhost:8024/ You will see the Axon Server dashboard, with the default instance and the Rental Monolith application connected. Click on the Commands button in the left panel. You will see all the command handlers registered by the application, which in this case is just one: our RegisterBikeCommand. The panel also shows that one RegisterBikeCommand was received and processed in the system by the Rental Monolith application, which corresponds to the command created by the RentalController and sent through the CommandGateway. When we implemented the command handler, we validated the command and sent a BikeRegisteredEvent to notify any other component in the system of the change. To see if this event was sent, click on the Search button on the left menu panel of the Axon Server Dashboard. This action will bring up a page allowing you to search for all events sent and stored in Axon Server. Click on the magnifier button on right side of the Query field without specifying anything in it (leave it empty). You will see in the table below the only event that was sent as a result of running the command handler: If you click on the eye icon in the of the Action column on the row of the event will bring up a popup panel showing all the event details. This means that our system received the request to register a new bike and handled it correctly by creating and sending the appropriate command, and as a result of handling the command, created, sent and stored the BikeRegisteredEvent. This last BikeRegisteredEvent will be reused for any component (such as any projection in the query model) that registers to receive this type of event. The command model will also use the' BikeRegisteredEvent' whenever the Bike entity needs to be rebuilt (or refreshed). Thanks to the information provided by Axon Server, it’s easy to check the commands, events (and queries) that have been sent and their contents. This is useful for checking the messages that our system exchanges to communicate the different modules. However, we may also want to have some automated tests in the form of unit tests so that we don’t have to do these manual checks every time. In the next section, we will learn how to write a test case with Axon to ensure the command handler processes the command correctly.","title":"Running the Register Bike Endpoint","component":"bikerental-demo","version":"main","name":"invoking-create-bike-endpoint","url":"/bikerental-demo/main/invoking-create-bike-endpoint/","titles":[{"text":"Invoking the endpoint","hash":"_invoking_the_endpoint","id":1},{"text":"From the command line","hash":"_from_the_command_line","id":2},{"text":"Using IntelliJ IDEA","hash":"_using_intellij_idea","id":3},{"text":"Following the execution of the register bike request in Axon Server","hash":"_following_the_execution_of_the_register_bike_request_in_axon_server","id":4},{"text":"Reviewing the commands","hash":"_reviewing_the_commands","id":5},{"text":"Reviewing the events","hash":"_reviewing_the_events","id":6},{"text":"Conclusion","hash":"_conclusion","id":7}]},"281":{"id":281,"text":"In this step, we will see how to run your application in your local environment with everything you need. If this were just a simple SpringBoot application we will simply have to run it from oir IDE. But our application needs to rely on some external messaging infrastructure to route, store and deliver the messages (commands, events and queries). In our case we will use Axon Server which acts both as a message broker to route the messages and as an event store optimized for storing and retrieving events in an Event Sourcing-based system. To avoid having to installing and starting the Axon Server manually, we rely on the Axon Server Docker images, and SpringBoot’s support to start docker containers. In this section you will learn how to configure it to run with a single click everything you need. To run everything we need easily and with just one click (or shortcut key combination) from your IDE we will use Docker Compose and docker images to start the Axon Server. Make sure you have installed the Docker Engine in your system, or Install Docker Engine otherwise. Docker Compose is a tool that allows you to define all the docker containers, networks, volumes and any other characteristics that we need from the infrastructure to run our application. Even if we are going to run only one docker image (Axon Server), Docker Compose is convenient because allows to start everything in one comand. We will start by creating the Docker Compose configuration file. Create a compose.yaml file in the root project with the following contents: compose.yaml services: axonserver: (1) image: 'axoniq/axonserver:latest' (2) environment: (3) - 'AXONIQ_AXONSERVER_STANDALONE=TRUE' ports: (4) - '8024:8024' (5) - '8124:8124' (6) 1 We define the name of the service for axonserver. This will be the name used for the service when started by Docker Desktop 2 The axoniq/axonserver:latest image refers to the docker image for the latest Axon Server published in the public dockerhub images repository. 3 We set the AXONIQ_AXONSERVER_STANDALONE environment property to TRUE so that Axon Server starts without the need to do the initial configuration. 4 We configure the ports that will be exported from the running docker container: 5 8024 is the default port to access the Axon Server console from your browser. 6 8124 is Axon Server’s gRPC port used by the applications. YAML files are sensible to tabs and spaces. Make sure you use the correct indentation using tabs. Once that we have this file you should be able to run the axon server image from the command line: bike-rental-quick-start % docker-compose up [+] Running 1/0 ✔ Container bike-rental-quick-start-axonserver-1 Created 0.0s Attaching to axonserver-1 ... We don’t want to start the server manually, we will configure SpringBoot’s support for Docker Compose so that the docker containers are started automatically when running the application from our IDE. Stop the container by typing ^C on the console and move to the next section. Since v3.1 Supports starting Docker Compose services linked to the start of our application. To enable that feature, we will need to add the following dependency to the maven descriptor pom.xml file in our root project: /pom.xml org.springframework.boot spring-boot-docker-compose runtime true Once that we have added this dependency, we can run our application right from our IDE. SpringBoot will detect the compose.yaml file and will start the docker containers described in that file. Run your application from your IDE. You should see in the logs how SpringBoot dowloads the AxonServer docker image, and starts running AxonServer automatically for you before starting your application: . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v3.2.1) INFO --- [Rental Monolith] i.a.d.b.rental.RentalApplication : Starting RentalApplication using Java 21 with PID 69132 (/Users/dgomezg/projects/axon/code-samples/bike-rental-quick-start/rental/target/classes started by dgomezg in /Users/dgomezg/projects/axon/code-samples/bike-rental-quick-start) INFO --- [Rental Monolith] i.a.d.b.rental.RentalApplication : No active profile set, falling back to 1 default profile: \"default\" INFO --- [Rental Monolith] .s.b.d.c.l.DockerComposeLifecycleManager : Using Docker Compose file '/Users/dgomezg/projects/axon/code-samples/bike-rental-quick-start/compose.yaml' INFO --- [Rental Monolith] o.s.boot.docker.compose.core.DockerCli : Container bike-rental-quick-start-axonserver-1 Created INFO --- [Rental Monolith] o.s.boot.docker.compose.core.DockerCli : Container bike-rental-quick-start-axonserver-1 Starting INFO --- [Rental Monolith] o.s.boot.docker.compose.core.DockerCli : Container bike-rental-quick-start-axonserver-1 Started INFO --- [Rental Monolith] o.s.boot.docker.compose.core.DockerCli : Container bike-rental-quick-start-axonserver-1 Waiting INFO --- [Rental Monolith] o.s.boot.docker.compose.core.DockerCli : Container bike-rental-quick-start-axonserver-1 Healthy INFO --- [Rental Monolith] verDockerComposeConnectionDetailsFactory : Detected Axon Server container. To access the dashboard, visit http://127.0.0.1:8024 After the application starts, you can open your browser and go to http://localhost:8024. You will access the Axon Server dashboard. If you click on the \"Overview\" button from the right panel, you will see the Axon Server instance and your Rental Monolith Application connected to it. In the next step we will implement the feature to retrieve a list of all the bikes in our system. So, we will look at how to implement the Query Model with some projections.","title":"Running the Application Locally With Docker Compose","component":"bikerental-demo","version":"main","name":"run-app-with-docker-compose","url":"/bikerental-demo/main/run-app-with-docker-compose/","titles":[{"text":"Requisites","hash":"_requisites","id":1},{"text":"Configuring Docker Compose","hash":"_configuring_docker_compose","id":2},{"text":"Docker Compose descriptor","hash":"_docker_compose_descriptor","id":3},{"text":"Configuring SpringBoot support to run Docker Compose","hash":"_configuring_springboot_support_to_run_docker_compose","id":4},{"text":"Running the application","hash":"_running_the_application","id":5}]},"282":{"id":282,"text":"As our application grows, we won’t be able to manually test that everything works correctly after a new feature. It is convenient to have a way to test automatically that our application works as expected. In your applications, you probably already have some unit tests to check the business logic of your application. Axon Framework provides you with a Test Module that will help you write unit tests designed to test the processing and handling of commands, events and queries in your application. In this tutorial step, you will implement a unit test to check if our system processes the RegisterBikeCommand as expected. Before writing our command handler test, we need to add the component Axon Framework provides to support unit testing. We need to add the org.axonframework:axon-test dependency to the Maven file descriptor in our rental module to do this. Fortunately, we already added this dependency when we configured the Axon Framework dependencies. Check that your rental/pom.xml file contains the reference to the axon-test module: rental/pom.xml org.axonframework axon-spring-boot-starter org.axonframework axon-test test The components provided by Axon Framework for unit testing are only needed during the test execution phase during the maven build process. Thus, we specify the test for the axon-test dependency. With the axon-test component added to our project’s dependency list we can create our command handler test. To start writing our command handler test, create a new Java class with the name BikeTest in /src/test/java/io/axoniq/demo/bikerental/rental/command of your rental module. You can also use your IDE to create the unit test class. Open the Bike class and ask your IDE to generate the corresponding unit test. Depending on your IDE, the shortcut or menu may vary, but it’s a shortcut worth knowing for your IDE. /rental/src/test/java/io/axoniq/demo/bikerental/rental/command/BikeTest.java class BikeTest { } Axon Framework provides a component that allows you to create unit tests specifically focused on testing the behavior of handling a command by an aggregate. This component is called AggregateTestFixture. You can read more details about how an AggregateTestFixture works at the Command Model Testing So, we need to add and initialize the AggregateTestFixture for the Bike class (the component that handles the command we want to test): /rental/src/test/java/io/axoniq/demo/bikerental/rental/command/BikeTest.java class BikeTest { private AggregateTestFixture fixture; (1) @BeforeEach (2) void setUp() { fixture = new AggregateTestFixture<>(Bike.class); (3) } } 1 Define an AggregateTestFixture for the Bike aggregate. This is the \"Subject Under Test\" (or SUT) for our test. 2 The @BeforeEach marks this method to be called before any test is executed in our test class. Adding the code to create the AggregateTestFixture here will ensure that we have a fresh fixture for each test case, and thus we make our different tests independent. 3 This line creates a new AggregateTestFixture for our Bike class. Thanks to the help of the AggregateTestFixture we can now create a test with the following structure: Given: Set the initial state for our test. Since we are designing our system to follow Event-Sourcing patterns, we need to set the list of events that have already happened for the same aggregate (the bike) before receiving the command. When: Specify the command whose execution we want to test. In this case, we will test the processing of a RegisterBikeCommand. Expect: We can instruct the fixture on the expectations we have from our system after processing the command. In an Event-Sourcing system, we will specify these expectations in the form of what events should have been produced by the command handler as a result of processing the command. So, let’s define a method in our unit test to check that our system can successfully process the request to create a bike: class BikeTest { @Test void canRegisterBike() { fixture.givenNoPriorActivity() (1) .when(new RegisterBikeCommand(\"bikeId-1234\", \"city-bike\", \"Amsterdam\")) (2) .expectEvents(new BikeRegisteredEvent(\"bikeId-1234\", \"city-bike\", \"Amsterdam\")); (3) } } 1 In our case, when we receive the RegisterBikeCommand, we expect that no previous events were received in the system for the same bikeId. 2 We provide the RegisterBikeCommand we want to send to the command handler. 3 After successfully processing the RegisterBikeCommand, we expect the command handler to produce a new BikeRegisteredEvent with the details of the new bike. The AggregateTestFixture will prepare the Bike aggregate to execute the command (in this case, this step is empty, as we specified that there had been no previous activity), execute the command handler for the RegisterBikeCommand and assert that the command handler has emitted the BikeRegisteredEvent with these specific values. You can learn more about the different things you can check from the fixture using Matchers in the section dedicated to Validation-phase of the test fixture in the Axon Framework reference guide You can run the test manually from your IDE, and you should see that the test passes, meaning that the fixture has checked that the expectations are met after processing the RegisterBikeCommand. In addition to running the test manually, we now have a test that is automatically run by Maven every time we build the application. If you run mvn package from your command line, you will see the execution of the test: % mvn package [...] [INFO] [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- [INFO] Running io.axoniq.demo.bikerental.rental.command.BikeTest [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.120 s -- in io.axoniq.demo.bikerental.rental.command.BikeTest [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [...] This automatic execution of the tests guarantees that if we break the expected behavior for this command handling while implementing a new feature in the future, we will know about it immediately. With that certainty, we can move on and implement the next feature for our system.","title":"Testing Command Handlers","component":"bikerental-demo","version":"main","name":"unit-testing-commands","url":"/bikerental-demo/main/unit-testing-commands/","titles":[{"text":"Configuring Axon Framework test support","hash":"_configuring_axon_framework_test_support","id":1},{"text":"Creating the command BikeTest","hash":"_creating_the_command_biketest","id":2},{"text":"Defining the AggregateTestFixture","hash":"_defining_the_aggregatetestfixture","id":3},{"text":"Testing the command handler","hash":"_testing_the_command_handler","id":4},{"text":"Executing the test","hash":"_executing_the_test","id":5}]}},"components":{},"componentVersions":{"axon-framework-extensions/":{"displayVersion":"default","title":"Axon Framework Extensions","version":"","name":"axon-framework-extensions","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Framework Extensions","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-framework-extensions/"},"as-faq/master":{"displayVersion":"master","title":"FAQ for Axon Server","version":"master","name":"as-faq","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Questions and Answers for Axon Server","type":"basics","group":"faq"},"sourcemap":false,"extensions":[{},{}]},"url":"/as-faq/as-faq/","navigation":[{"items":[{"content":"FAQ for Axon Server","url":"/as-faq/as-faq/","urlType":"internal"}],"root":true,"order":0}]},"axon-server-installation/master":{"displayVersion":"master","title":"Axon Server Installation Guides","version":"master","name":"axon-server-installation","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Server Installation guides","type":"guide","group":"axon-server"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-installation/installing_as_docker-k8s/","navigation":[{"items":[{"content":"Installing Axon Server for Docker and Kubernetes","url":"/axon-server-installation/installing_as_docker-k8s/","urlType":"internal"}],"root":true,"order":0}]},"axon-server-upgrade/master":{"displayVersion":"master","title":"Axon Server Upgrade Guides","version":"master","name":"axon-server-upgrade","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Server upgrade guides","type":"guide","group":"axon-server"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-upgrade/upgrading_as_2024/","navigation":[{"items":[{"content":"Upgrading to Axon Server 2024.0.0","url":"/axon-server-upgrade/upgrading_as_2024/","urlType":"internal"}],"root":true,"order":0}]},"axoniq-console-faq/master":{"displayVersion":"master","title":"FAQ for AxonIQ Console","version":"master","name":"axoniq-console-faq","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Questions and Answers for AxonIQ Console","type":"basics","group":"faq"},"sourcemap":false,"extensions":[{},{}]},"url":"/axoniq-console-faq/console_faq/","navigation":[{"items":[{"content":"FAQ for AxonIQ Console","url":"/axoniq-console-faq/console_faq/","urlType":"internal"}],"root":true,"order":0}]},"contibution-guide/master":{"displayVersion":"master","title":"Contribution Guide","version":"master","name":"contibution-guide","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{},{}]},"url":"/contibution-guide/","navigation":[{"content":"Design consideration","items":[{"content":"Diataxis System","url":"/contibution-guide/design/doc-system/","urlType":"internal"}],"root":true,"order":0},{"content":"Technical overview","items":[{"content":"Prerequisite Tools and Knowledge","url":"/contibution-guide/overview/platform/","urlType":"internal"},{"content":"Build AxonIQ Documentation","url":"/contibution-guide/overview/build/","urlType":"internal"},{"content":"Content Sources","url":"/contibution-guide/overview/content-sources/","urlType":"internal"}],"root":true,"order":0.3333},{"content":"Writing","items":[{"content":"Mark Content for Improvement","url":"/contibution-guide/writing/mark4improvement/","urlType":"internal"},{"content":"Using Tabs","url":"/contibution-guide/writing/tabs/","urlType":"internal"},{"content":"Navigation Menu","url":"/contibution-guide/writing/menu/","urlType":"internal"}],"root":true,"order":0.6667}]},"home/master":{"displayVersion":"master","title":"Docs","version":"master","name":"home","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"type":"home"},"sourcemap":false,"extensions":[{},{}]},"url":"/home/","navigation":[{"items":[{"content":"Basics","url":"/home/basics/","urlType":"internal"},{"content":"Guides","url":"/home/guides/","urlType":"internal","items":[{"content":"Axon Framework","url":"/home/guides/axon-framework/","urlType":"internal"},{"content":"Axon Server","url":"/home/guides/axon-server/","urlType":"internal"},{"content":"Migration","url":"/home/guides/migration/","urlType":"internal"}]},{"content":"Reference Guides","url":"/home/reference/","urlType":"internal","items":[{"content":"Axon Framework","url":"/axon-framework-reference/4.10/","urlType":"internal"},{"content":"Axon Server","url":"/axon-server-reference/v2024.1/","urlType":"internal"},{"content":"Axon Synapse","url":"/synapse-reference/v0.11/","urlType":"internal"},{"content":"AxonIQ Console","url":"/axoniq-console-reference/main/","urlType":"internal"}]},{"content":"Contribution guide","url":"/contibution-guide/","urlType":"internal"}],"root":true,"order":0}]},"axon-framework-reference/development":{"displayVersion":"development","title":"Axon Framework","version":"development","name":"axon-framework-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The Axon Framework former reference guide","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-framework-reference/development/","navigation":[{"items":[{"content":"Introduction","url":"/axon-framework-reference/development/","urlType":"internal"},{"content":"Upgrading to Axon Framework 4.7","url":"/axon-framework-reference/development/upgrading-to-4-7/","urlType":"internal"},{"content":"Messaging Concepts","url":"/axon-framework-reference/development/messaging-concepts/","urlType":"internal","items":[{"content":"Anatomy of a Message","url":"/axon-framework-reference/development/messaging-concepts/anatomy-message/","urlType":"internal"},{"content":"Message Correlation","url":"/axon-framework-reference/development/messaging-concepts/message-correlation/","urlType":"internal"},{"content":"Message Intercepting","url":"/axon-framework-reference/development/messaging-concepts/message-intercepting/","urlType":"internal"},{"content":"Supported Parameters for Annotated Handlers","url":"/axon-framework-reference/development/messaging-concepts/supported-parameters-annotated-handlers/","urlType":"internal"},{"content":"Exception Handling","url":"/axon-framework-reference/development/messaging-concepts/exception-handling/","urlType":"internal"},{"content":"Unit of Work","url":"/axon-framework-reference/development/messaging-concepts/unit-of-work/","urlType":"internal"}]},{"content":"Commands","url":"/axon-framework-reference/development/axon-framework-commands/","urlType":"internal","items":[{"content":"Modelling","items":[{"content":"Aggregate","url":"/axon-framework-reference/development/axon-framework-commands/modeling/aggregate/","urlType":"internal"},{"content":"Multi-Entity Aggregates","url":"/axon-framework-reference/development/axon-framework-commands/modeling/multi-entity-aggregates/","urlType":"internal"},{"content":"State Stored Aggregates","url":"/axon-framework-reference/development/axon-framework-commands/modeling/state-stored-aggregates/","urlType":"internal"},{"content":"Aggregate Creation from another Aggregate","url":"/axon-framework-reference/development/axon-framework-commands/modeling/aggregate-creation-from-another-aggregate/","urlType":"internal"},{"content":"Aggregate Polymorphism","url":"/axon-framework-reference/development/axon-framework-commands/modeling/aggregate-polymorphism/","urlType":"internal"},{"content":"Conflict Resolution","url":"/axon-framework-reference/development/axon-framework-commands/modeling/conflict-resolution/","urlType":"internal"}]},{"content":"Command Dispatchers","url":"/axon-framework-reference/development/axon-framework-commands/command-dispatchers/","urlType":"internal"},{"content":"Command Handlers","url":"/axon-framework-reference/development/axon-framework-commands/command-handlers/","urlType":"internal"},{"content":"Infrastructure","url":"/axon-framework-reference/development/axon-framework-commands/infrastructure/","urlType":"internal"},{"content":"Configuration","url":"/axon-framework-reference/development/axon-framework-commands/configuration/","urlType":"internal"}]},{"content":"Events","url":"/axon-framework-reference/development/events/","urlType":"internal","items":[{"content":"Event Dispatchers","url":"/axon-framework-reference/development/events/event-dispatchers/","urlType":"internal"},{"content":"Event Handlers","url":"/axon-framework-reference/development/events/event-handlers/","urlType":"internal"},{"content":"Event Processors","url":"/axon-framework-reference/development/events/event-processors/","urlType":"internal","items":[{"content":"Subscribing Event Processor","url":"/axon-framework-reference/development/events/event-processors/subscribing/","urlType":"internal"},{"content":"Streaming Event Processor","url":"/axon-framework-reference/development/events/event-processors/streaming/","urlType":"internal"}]},{"content":"Event Bus &amp; Event Store","url":"/axon-framework-reference/development/events/event-bus-and-event-store/","urlType":"internal"},{"content":"Event Versioning","url":"/axon-framework-reference/development/events/event-versioning/","urlType":"internal"}]},{"content":"Queries","url":"/axon-framework-reference/development/queries/","urlType":"internal","items":[{"content":"Query Processing","url":"/axon-framework-reference/development/queries/query-processing/","urlType":"internal"},{"content":"Query Dispatchers","url":"/axon-framework-reference/development/queries/query-dispatchers/","urlType":"internal"},{"content":"Query Handlers","url":"/axon-framework-reference/development/queries/query-handlers/","urlType":"internal"},{"content":"Implementations","url":"/axon-framework-reference/development/queries/implementations/","urlType":"internal"},{"content":"Configuration","url":"/axon-framework-reference/development/queries/configuration/","urlType":"internal"}]},{"content":"Sagas","url":"/axon-framework-reference/development/sagas/","urlType":"internal","items":[{"content":"Implementation","url":"/axon-framework-reference/development/sagas/implementation/","urlType":"internal"},{"content":"Associations","url":"/axon-framework-reference/development/sagas/associations/","urlType":"internal"},{"content":"Infrastructure","url":"/axon-framework-reference/development/sagas/infrastructure/","urlType":"internal"}]},{"content":"Deadlines","url":"/axon-framework-reference/development/deadlines/","urlType":"internal","items":[{"content":"Deadline Managers","url":"/axon-framework-reference/development/deadlines/deadline-managers/","urlType":"internal"},{"content":"Event Schedulers","url":"/axon-framework-reference/development/deadlines/event-schedulers/","urlType":"internal"}]},{"content":"Testing","url":"/axon-framework-reference/development/testing/","urlType":"internal","items":[{"content":"Commands / Events","url":"/axon-framework-reference/development/testing/commands-events/","urlType":"internal"},{"content":"Sagas","url":"/axon-framework-reference/development/testing/sagas-1/","urlType":"internal"}]},{"content":"Serialization","url":"/axon-framework-reference/development/serialization/","urlType":"internal"},{"content":"Tuning","url":"/axon-framework-reference/development/tuning/","urlType":"internal","items":[{"content":"Event Snapshots","url":"/axon-framework-reference/development/tuning/event-snapshots/","urlType":"internal"},{"content":"Event Processing","url":"/axon-framework-reference/development/tuning/event-processing/","urlType":"internal"},{"content":"Command Processing","url":"/axon-framework-reference/development/tuning/command-processing/","urlType":"internal"}]},{"content":"Monitoring","url":"/axon-framework-reference/development/monitoring/","urlType":"internal","items":[{"content":"Distributed Tracing","url":"/axon-framework-reference/development/monitoring/tracing/","urlType":"internal"},{"content":"Metrics","url":"/axon-framework-reference/development/monitoring/metrics/","urlType":"internal"},{"content":"Health Indicators","url":"/axon-framework-reference/development/monitoring/health/","urlType":"internal"},{"content":"Event Processor Monitoring","url":"/axon-framework-reference/development/monitoring/processors/","urlType":"internal"},{"content":"Message Tracking","url":"/axon-framework-reference/development/monitoring/message-tracking/","urlType":"internal"}]},{"content":"Spring Boot Integration","url":"/axon-framework-reference/development/spring-boot-integration/","urlType":"internal"},{"content":"Modules","url":"/axon-framework-reference/development/modules/","urlType":"internal"},{"content":"Release Notes","url":"/axon-framework-reference/development/release-notes/","urlType":"internal","items":[{"content":"Major Releases","url":"/axon-framework-reference/development/release-notes/major-releases/","urlType":"internal"},{"content":"Minor Releases","url":"/axon-framework-reference/development/release-notes/minor-releases/","urlType":"internal"}]}],"root":true,"order":0}]},"axon-framework-reference/4.10":{"displayVersion":"4.10","title":"Axon Framework","version":"4.10","name":"axon-framework-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The Axon Framework former reference guide","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-framework-reference/4.10/","navigation":[{"items":[{"content":"Introduction","url":"/axon-framework-reference/4.10/","urlType":"internal"},{"content":"Upgrading to Axon Framework 4.7","url":"/axon-framework-reference/4.10/upgrading-to-4-7/","urlType":"internal"},{"content":"Messaging Concepts","url":"/axon-framework-reference/4.10/messaging-concepts/","urlType":"internal","items":[{"content":"Anatomy of a Message","url":"/axon-framework-reference/4.10/messaging-concepts/anatomy-message/","urlType":"internal"},{"content":"Message Correlation","url":"/axon-framework-reference/4.10/messaging-concepts/message-correlation/","urlType":"internal"},{"content":"Message Intercepting","url":"/axon-framework-reference/4.10/messaging-concepts/message-intercepting/","urlType":"internal"},{"content":"Supported Parameters for Annotated Handlers","url":"/axon-framework-reference/4.10/messaging-concepts/supported-parameters-annotated-handlers/","urlType":"internal"},{"content":"Exception Handling","url":"/axon-framework-reference/4.10/messaging-concepts/exception-handling/","urlType":"internal"},{"content":"Unit of Work","url":"/axon-framework-reference/4.10/messaging-concepts/unit-of-work/","urlType":"internal"}]},{"content":"Commands","url":"/axon-framework-reference/4.10/axon-framework-commands/","urlType":"internal","items":[{"content":"Modelling","items":[{"content":"Aggregate","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/aggregate/","urlType":"internal"},{"content":"Multi-Entity Aggregates","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/multi-entity-aggregates/","urlType":"internal"},{"content":"State Stored Aggregates","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/state-stored-aggregates/","urlType":"internal"},{"content":"Aggregate Creation from another Aggregate","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/aggregate-creation-from-another-aggregate/","urlType":"internal"},{"content":"Aggregate Polymorphism","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/aggregate-polymorphism/","urlType":"internal"},{"content":"Conflict Resolution","url":"/axon-framework-reference/4.10/axon-framework-commands/modeling/conflict-resolution/","urlType":"internal"}]},{"content":"Command Dispatchers","url":"/axon-framework-reference/4.10/axon-framework-commands/command-dispatchers/","urlType":"internal"},{"content":"Command Handlers","url":"/axon-framework-reference/4.10/axon-framework-commands/command-handlers/","urlType":"internal"},{"content":"Infrastructure","url":"/axon-framework-reference/4.10/axon-framework-commands/infrastructure/","urlType":"internal"},{"content":"Configuration","url":"/axon-framework-reference/4.10/axon-framework-commands/configuration/","urlType":"internal"}]},{"content":"Events","url":"/axon-framework-reference/4.10/events/","urlType":"internal","items":[{"content":"Event Dispatchers","url":"/axon-framework-reference/4.10/events/event-dispatchers/","urlType":"internal"},{"content":"Event Handlers","url":"/axon-framework-reference/4.10/events/event-handlers/","urlType":"internal"},{"content":"Event Processors","url":"/axon-framework-reference/4.10/events/event-processors/","urlType":"internal","items":[{"content":"Subscribing Event Processor","url":"/axon-framework-reference/4.10/events/event-processors/subscribing/","urlType":"internal"},{"content":"Streaming Event Processor","url":"/axon-framework-reference/4.10/events/event-processors/streaming/","urlType":"internal"}]},{"content":"Event Bus &amp; Event Store","url":"/axon-framework-reference/4.10/events/event-bus-and-event-store/","urlType":"internal"},{"content":"Event Versioning","url":"/axon-framework-reference/4.10/events/event-versioning/","urlType":"internal"}]},{"content":"Queries","url":"/axon-framework-reference/4.10/queries/","urlType":"internal","items":[{"content":"Query Processing","url":"/axon-framework-reference/4.10/queries/query-processing/","urlType":"internal"},{"content":"Query Dispatchers","url":"/axon-framework-reference/4.10/queries/query-dispatchers/","urlType":"internal"},{"content":"Query Handlers","url":"/axon-framework-reference/4.10/queries/query-handlers/","urlType":"internal"},{"content":"Implementations","url":"/axon-framework-reference/4.10/queries/implementations/","urlType":"internal"},{"content":"Configuration","url":"/axon-framework-reference/4.10/queries/configuration/","urlType":"internal"}]},{"content":"Sagas","url":"/axon-framework-reference/4.10/sagas/","urlType":"internal","items":[{"content":"Implementation","url":"/axon-framework-reference/4.10/sagas/implementation/","urlType":"internal"},{"content":"Associations","url":"/axon-framework-reference/4.10/sagas/associations/","urlType":"internal"},{"content":"Infrastructure","url":"/axon-framework-reference/4.10/sagas/infrastructure/","urlType":"internal"}]},{"content":"Deadlines","url":"/axon-framework-reference/4.10/deadlines/","urlType":"internal","items":[{"content":"Deadline Managers","url":"/axon-framework-reference/4.10/deadlines/deadline-managers/","urlType":"internal"},{"content":"Event Schedulers","url":"/axon-framework-reference/4.10/deadlines/event-schedulers/","urlType":"internal"}]},{"content":"Testing","url":"/axon-framework-reference/4.10/testing/","urlType":"internal","items":[{"content":"Commands / Events","url":"/axon-framework-reference/4.10/testing/commands-events/","urlType":"internal"},{"content":"Sagas","url":"/axon-framework-reference/4.10/testing/sagas-1/","urlType":"internal"}]},{"content":"Serialization","url":"/axon-framework-reference/4.10/serialization/","urlType":"internal"},{"content":"Tuning","url":"/axon-framework-reference/4.10/tuning/","urlType":"internal","items":[{"content":"Event Snapshots","url":"/axon-framework-reference/4.10/tuning/event-snapshots/","urlType":"internal"},{"content":"Event Processing","url":"/axon-framework-reference/4.10/tuning/event-processing/","urlType":"internal"},{"content":"Command Processing","url":"/axon-framework-reference/4.10/tuning/command-processing/","urlType":"internal"}]},{"content":"Monitoring","url":"/axon-framework-reference/4.10/monitoring/","urlType":"internal","items":[{"content":"Distributed Tracing","url":"/axon-framework-reference/4.10/monitoring/tracing/","urlType":"internal"},{"content":"Metrics","url":"/axon-framework-reference/4.10/monitoring/metrics/","urlType":"internal"},{"content":"Health Indicators","url":"/axon-framework-reference/4.10/monitoring/health/","urlType":"internal"},{"content":"Event Processor Monitoring","url":"/axon-framework-reference/4.10/monitoring/processors/","urlType":"internal"},{"content":"Message Tracking","url":"/axon-framework-reference/4.10/monitoring/message-tracking/","urlType":"internal"}]},{"content":"Spring Boot Integration","url":"/axon-framework-reference/4.10/spring-boot-integration/","urlType":"internal"},{"content":"Modules","url":"/axon-framework-reference/4.10/modules/","urlType":"internal"},{"content":"Release Notes","url":"/axon-framework-reference/4.10/release-notes/","urlType":"internal","items":[{"content":"Major Releases","url":"/axon-framework-reference/4.10/release-notes/major-releases/","urlType":"internal"},{"content":"Minor Releases","url":"/axon-framework-reference/4.10/release-notes/minor-releases/","urlType":"internal"}]}],"root":true,"order":0}]},"axon-framework-reference/0":{"displayVersion":"older releases","title":"Legacy Axon Framework Reference Guides","version":"0","name":"axon-framework-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Legacy Axon Framework documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-framework-reference/0/","navigation":[{"content":"Axon Framework 4.x","items":[{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.9/axon-framework/introduction\" target=\"_blank\" rel=\"noopener\">Release 4.9</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.8/axon-framework/introduction\" target=\"_blank\" rel=\"noopener\">Release 4.8</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.7/axon-framework/introduction\" target=\"_blank\" rel=\"noopener\">Release 4.7</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.6/axon-framework/introduction\" target=\"_blank\" rel=\"noopener\">Release 4.6</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.5/axon-framework/introduction\" target=\"_blank\" rel=\"noopener\">Release 4.5</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.4/axon-framework/introduction\" target=\"_blank\" rel=\"noopener\">Release 4.4</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.3/\" target=\"_blank\" rel=\"noopener\">Release 4.3</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.2/\" target=\"_blank\" rel=\"noopener\">Release 4.2</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.1/\" target=\"_blank\" rel=\"noopener\">Release 4.1</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.0/\" target=\"_blank\" rel=\"noopener\">Release 4.0</a>"}],"root":true,"order":0},{"content":"Axon Framework 3.x","items":[{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/3.4/\" target=\"_blank\" rel=\"noopener\">Release 3.4</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/3.3/\" target=\"_blank\" rel=\"noopener\">Release 3.3</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/3.2/\" target=\"_blank\" rel=\"noopener\">Release 3.2</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/3.1/\" target=\"_blank\" rel=\"noopener\">Release 3.1</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/3.0/\" target=\"_blank\" rel=\"noopener\">Release 3.0</a>"}],"root":true,"order":0.25},{"content":"Axon Framework 2.x","items":[{"content":"<a href=\"https://legacy-docs.axoniq.io/v/2.4/\" target=\"_blank\" rel=\"noopener\">Release 2.4</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/2.3/\" target=\"_blank\" rel=\"noopener\">Release 2.3</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/2.2/\" target=\"_blank\" rel=\"noopener\">Release 2.2</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/2.1/\" target=\"_blank\" rel=\"noopener\">Release 2.1</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/2.0/\" target=\"_blank\" rel=\"noopener\">Release 2.0</a>"}],"root":true,"order":0.5},{"content":"Axon Framework 1.x","items":[{"content":"<a href=\"https://legacy-docs.axoniq.io/v/1.4/\" target=\"_blank\" rel=\"noopener\">Release 1.4</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/1.3/\" target=\"_blank\" rel=\"noopener\">Release 1.3</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/1.2/\" target=\"_blank\" rel=\"noopener\">Release 1.2</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/1.1/\" target=\"_blank\" rel=\"noopener\">Release 1.1</a>"},{"content":"<a href=\"https://legacy-docs.axoniq.io/v/1.0/\" target=\"_blank\" rel=\"noopener\">Release 1.0</a>"}],"root":true,"order":0.75}]},"axon-server-reference/development":{"displayVersion":"development","title":"Axon Server","version":"development","name":"axon-server-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Server reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-reference/development/","navigation":[{"items":[{"content":"Introduction","url":"/axon-server-reference/development/","urlType":"internal"},{"content":"Installation","url":"/axon-server-reference/development/axon-server/installation/","urlType":"internal","items":[{"content":"Local installation","url":"/axon-server-reference/development/axon-server/installation/local-installation/","urlType":"internal"},{"content":"Docker / K8s","url":"/axon-server-reference/development/axon-server/installation/docker-k8s/","urlType":"internal"}]},{"content":"Administration","url":"/axon-server-reference/development/axon-server/administration/","urlType":"internal","items":[{"content":"Configuration","url":"/axon-server-reference/development/axon-server/administration/admin-configuration/","urlType":"internal","items":[{"content":"System properties","url":"/axon-server-reference/development/axon-server/administration/admin-configuration/configuration/","urlType":"internal"},{"content":"Command Line Interface","url":"/axon-server-reference/development/axon-server/administration/admin-configuration/command-line-interface/","urlType":"internal"},{"content":"REST API","url":"/axon-server-reference/development/axon-server/administration/admin-configuration/rest-api/","urlType":"internal"},{"content":"gRPC API","url":"/axon-server-reference/development/axon-server/administration/admin-configuration/grpc-api/","urlType":"internal"}]},{"content":"Monitoring","url":"/axon-server-reference/development/axon-server/administration/monitoring/","urlType":"internal","items":[{"content":"Actuator Endpoints","url":"/axon-server-reference/development/axon-server/administration/monitoring/actuator-endpoints/","urlType":"internal"},{"content":"Axon Server Metrics","url":"/axon-server-reference/development/axon-server/administration/monitoring/axon-server-metrics/","urlType":"internal"},{"content":"gRPC Metrics","url":"/axon-server-reference/development/axon-server/administration/monitoring/grpc-metrics/","urlType":"internal"},{"content":"Heartbeat Monitoring","url":"/axon-server-reference/development/axon-server/administration/monitoring/heartbeat-monitoring/","urlType":"internal"},{"content":"Diagnostics","url":"/axon-server-reference/development/axon-server/administration/monitoring/diagnostics/","urlType":"internal"}]},{"content":"Clusters","url":"/axon-server-reference/development/axon-server/administration/clustering/","urlType":"internal"},{"content":"Replication Groups","url":"/axon-server-reference/development/axon-server/administration/replication-groups/","urlType":"internal"},{"content":"Multi-Context","url":"/axon-server-reference/development/axon-server/administration/multi-context/","urlType":"internal"},{"content":"Tiered Storage","url":"/axon-server-reference/development/axon-server/administration/tiered-storage/","urlType":"internal"},{"content":"Event Transformation","url":"/axon-server-reference/development/axon-server/administration/event-transformation/","urlType":"internal"},{"content":"Tagging","url":"/axon-server-reference/development/axon-server/administration/tagging/","urlType":"internal"},{"content":"Backup and Messaging-Only Nodes","url":"/axon-server-reference/development/axon-server/administration/backup-and-messaging-only-nodes/","urlType":"internal"},{"content":"Backups","url":"/axon-server-reference/development/axon-server/administration/backups/","urlType":"internal"},{"content":"Recovery","url":"/axon-server-reference/development/axon-server/administration/recovery/","urlType":"internal"},{"content":"Axon Server Plugins","url":"/axon-server-reference/development/axon-server/administration/plugins/","urlType":"internal"},{"content":"Logging","url":"/axon-server-reference/development/axon-server/administration/logging/","urlType":"internal","items":[{"content":"Logging Format","url":"/axon-server-reference/development/axon-server/administration/logging/logging-format/","urlType":"internal"}]},{"content":"Error Codes","url":"/axon-server-reference/development/axon-server/administration/error-codes/","urlType":"internal"}]},{"content":"Security","url":"/axon-server-reference/development/axon-server/security/","urlType":"internal","items":[{"content":"SSL","url":"/axon-server-reference/development/axon-server/security/ssl/","urlType":"internal"},{"content":"Access Control for Axon Server","url":"/axon-server-reference/development/axon-server/security/access-control-ee/","urlType":"internal"},{"content":"Security for Axon Framework Client Applications","url":"/axon-server-reference/development/axon-server/security/access-control-clients/","urlType":"internal"},{"content":"Access Control and the CLI","url":"/axon-server-reference/development/axon-server/security/access-control-cli/","urlType":"internal"},{"content":"Access Control on the REST and gRPC APIs","url":"/axon-server-reference/development/axon-server/security/access-control-api/","urlType":"internal"},{"content":"Axon Server EE - LDAP Extension","url":"/axon-server-reference/development/axon-server/security/access-control-ldap/","urlType":"internal"},{"content":"Axon Server EE - OAuth Extension","url":"/axon-server-reference/development/axon-server/security/access-control-oauth2/","urlType":"internal"}]},{"content":"Performance","url":"/axon-server-reference/development/axon-server/performance/","urlType":"internal","items":[{"content":"Event Segments","url":"/axon-server-reference/development/axon-server/performance/tuning-event-processing/","urlType":"internal"},{"content":"Flow Control","url":"/axon-server-reference/development/axon-server/performance/flow-control/","urlType":"internal"}]},{"content":"Migration","url":"/axon-server-reference/development/axon-server/migration/","urlType":"internal","items":[{"content":"Non-Axon Server to Axon Server","url":"/axon-server-reference/development/axon-server/migration/non-axon-server-to-axon-server/","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Release Notes","url":"/axon-server-reference/development/release-notes/","urlType":"internal","items":[{"content":"Major Releases","url":"/axon-server-reference/development/rn-as-major-releases/","urlType":"internal"},{"content":"Minor Releases","url":"/axon-server-reference/development/rn-as-minor-releases/","urlType":"internal"}]}],"root":true,"order":0.5}]},"axon-server-reference/v2024.1":{"displayVersion":"v2024.1","title":"Axon Server","version":"v2024.1","name":"axon-server-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Server reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-reference/v2024.1/","navigation":[{"items":[{"content":"Introduction","url":"/axon-server-reference/v2024.1/","urlType":"internal"},{"content":"Installation","url":"/axon-server-reference/v2024.1/axon-server/installation/","urlType":"internal","items":[{"content":"Local installation","url":"/axon-server-reference/v2024.1/axon-server/installation/local-installation/","urlType":"internal"},{"content":"Docker / K8s","url":"/axon-server-reference/v2024.1/axon-server/installation/docker-k8s/","urlType":"internal"}]},{"content":"Administration","url":"/axon-server-reference/v2024.1/axon-server/administration/","urlType":"internal","items":[{"content":"Configuration","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/","urlType":"internal","items":[{"content":"System properties","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/configuration/","urlType":"internal"},{"content":"Command Line Interface","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/command-line-interface/","urlType":"internal"},{"content":"REST API","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/rest-api/","urlType":"internal"},{"content":"gRPC API","url":"/axon-server-reference/v2024.1/axon-server/administration/admin-configuration/grpc-api/","urlType":"internal"}]},{"content":"Monitoring","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/","urlType":"internal","items":[{"content":"Actuator Endpoints","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/actuator-endpoints/","urlType":"internal"},{"content":"Axon Server Metrics","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/axon-server-metrics/","urlType":"internal"},{"content":"gRPC Metrics","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/grpc-metrics/","urlType":"internal"},{"content":"Heartbeat Monitoring","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/heartbeat-monitoring/","urlType":"internal"},{"content":"Diagnostics","url":"/axon-server-reference/v2024.1/axon-server/administration/monitoring/diagnostics/","urlType":"internal"}]},{"content":"Clusters","url":"/axon-server-reference/v2024.1/axon-server/administration/clustering/","urlType":"internal"},{"content":"Replication Groups","url":"/axon-server-reference/v2024.1/axon-server/administration/replication-groups/","urlType":"internal"},{"content":"Multi-Context","url":"/axon-server-reference/v2024.1/axon-server/administration/multi-context/","urlType":"internal"},{"content":"Tiered Storage","url":"/axon-server-reference/v2024.1/axon-server/administration/tiered-storage/","urlType":"internal"},{"content":"Event Transformation","url":"/axon-server-reference/v2024.1/axon-server/administration/event-transformation/","urlType":"internal"},{"content":"Tagging","url":"/axon-server-reference/v2024.1/axon-server/administration/tagging/","urlType":"internal"},{"content":"Backup and Messaging-Only Nodes","url":"/axon-server-reference/v2024.1/axon-server/administration/backup-and-messaging-only-nodes/","urlType":"internal"},{"content":"Backups","url":"/axon-server-reference/v2024.1/axon-server/administration/backups/","urlType":"internal"},{"content":"Recovery","url":"/axon-server-reference/v2024.1/axon-server/administration/recovery/","urlType":"internal"},{"content":"Axon Server Plugins","url":"/axon-server-reference/v2024.1/axon-server/administration/plugins/","urlType":"internal"},{"content":"Logging","url":"/axon-server-reference/v2024.1/axon-server/administration/logging/","urlType":"internal","items":[{"content":"Logging Format","url":"/axon-server-reference/v2024.1/axon-server/administration/logging/logging-format/","urlType":"internal"}]},{"content":"Error Codes","url":"/axon-server-reference/v2024.1/axon-server/administration/error-codes/","urlType":"internal"}]},{"content":"Security","url":"/axon-server-reference/v2024.1/axon-server/security/","urlType":"internal","items":[{"content":"SSL","url":"/axon-server-reference/v2024.1/axon-server/security/ssl/","urlType":"internal"},{"content":"Access Control for Axon Server","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-ee/","urlType":"internal"},{"content":"Security for Axon Framework Client Applications","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-clients/","urlType":"internal"},{"content":"Access Control and the CLI","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-cli/","urlType":"internal"},{"content":"Access Control on the REST and gRPC APIs","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-api/","urlType":"internal"},{"content":"Axon Server EE - LDAP Extension","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-ldap/","urlType":"internal"},{"content":"Axon Server EE - OAuth Extension","url":"/axon-server-reference/v2024.1/axon-server/security/access-control-oauth2/","urlType":"internal"}]},{"content":"Performance","url":"/axon-server-reference/v2024.1/axon-server/performance/","urlType":"internal","items":[{"content":"Event Segments","url":"/axon-server-reference/v2024.1/axon-server/performance/tuning-event-processing/","urlType":"internal"},{"content":"Flow Control","url":"/axon-server-reference/v2024.1/axon-server/performance/flow-control/","urlType":"internal"}]},{"content":"Migration","url":"/axon-server-reference/v2024.1/axon-server/migration/","urlType":"internal","items":[{"content":"Non-Axon Server to Axon Server","url":"/axon-server-reference/v2024.1/axon-server/migration/non-axon-server-to-axon-server/","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Release Notes","url":"/axon-server-reference/v2024.1/release-notes/","urlType":"internal","items":[{"content":"Major Releases","url":"/axon-server-reference/v2024.1/rn-as-major-releases/","urlType":"internal"},{"content":"Minor Releases","url":"/axon-server-reference/v2024.1/rn-as-minor-releases/","urlType":"internal"}]}],"root":true,"order":0.5}]},"axon-server-reference/0":{"displayVersion":"older releases","title":"Axon Server","version":"0","name":"axon-server-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Legacy Axon Server documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-reference/0/","navigation":[{"content":"Axon Server 4.x","items":[{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.7/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.7</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.6/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.6</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.5/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.5</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.4/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.4</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.3/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.3</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.2/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.2</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.1/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.1</a>"},{"content":"<a href=\"https://legacydocs.axoniq.io/reference-guide/v/4.0/axon-server/\" target=\"_blank\" rel=\"noopener\">Release 4.0</a>"}],"root":true,"order":0}]},"reference-guide/master":{"displayVersion":"master","title":"Reference Guide","version":"master","name":"reference-guide","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"type":"home"},"sourcemap":false,"extensions":[{},{}]},"url":"/reference-guide/"},"axon-framework-fundamentals/master":{"displayVersion":"master","title":"Axon Framework Fundamentals","version":"master","name":"axon-framework-fundamentals","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"A tutorial covering Axon Framework's fundamental components and features.","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-framework-fundamentals/","navigation":[{"items":[{"content":"Deadlines","url":"/axon-framework-fundamentals/deadlines/","urlType":"internal","items":[{"content":"Select a manager","url":"/axon-framework-fundamentals/deadlines/deciding/","urlType":"internal"},{"content":"Add a handler","url":"/axon-framework-fundamentals/deadlines/implementing/","urlType":"internal"},{"content":"Test the handler","url":"/axon-framework-fundamentals/deadlines/testing/","urlType":"internal"},{"content":"Advanced use cases","url":"/axon-framework-fundamentals/deadlines/advanced/","urlType":"internal"}]},{"content":"Dead Letter Queues","url":"/axon-framework-fundamentals/dlq/","urlType":"internal","items":[{"content":"Implementing dead letter queue","url":"/axon-framework-fundamentals/dlq/implementing/","urlType":"internal"},{"content":"Retrying failed sequences","url":"/axon-framework-fundamentals/dlq/retrying/","urlType":"internal"},{"content":"Advanced use cases","url":"/axon-framework-fundamentals/dlq/advanced/","urlType":"internal"}]}],"root":true,"order":0}]},"axon-framework-fundamentals/axon-4.10.x":{"displayVersion":"axon-4.10.x","title":"Axon Framework Fundamentals","version":"axon-4.10.x","name":"axon-framework-fundamentals","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"A tutorial covering Axon Framework's fundamental components and features.","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-framework-fundamentals/axon-4.10.x/","navigation":[{"items":[{"content":"Deadlines","url":"/axon-framework-fundamentals/axon-4.10.x/deadlines/","urlType":"internal","items":[{"content":"Select a manager","url":"/axon-framework-fundamentals/axon-4.10.x/deadlines/deciding/","urlType":"internal"},{"content":"Add a handler","url":"/axon-framework-fundamentals/axon-4.10.x/deadlines/implementing/","urlType":"internal"},{"content":"Test the handler","url":"/axon-framework-fundamentals/axon-4.10.x/deadlines/testing/","urlType":"internal"},{"content":"Advanced use cases","url":"/axon-framework-fundamentals/axon-4.10.x/deadlines/advanced/","urlType":"internal"}]},{"content":"Dead Letter Queues","url":"/axon-framework-fundamentals/axon-4.10.x/dlq/","urlType":"internal","items":[{"content":"Implementing dead letter queue","url":"/axon-framework-fundamentals/axon-4.10.x/dlq/implementing/","urlType":"internal"},{"content":"Retrying failed sequences","url":"/axon-framework-fundamentals/axon-4.10.x/dlq/retrying/","urlType":"internal"},{"content":"Advanced use cases","url":"/axon-framework-fundamentals/axon-4.10.x/dlq/advanced/","urlType":"internal"}]}],"root":true,"order":0}]},"identifier-generation-guide/master":{"displayVersion":"master","title":"Axon Framework Identifier Generation Guide","version":"master","name":"identifier-generation-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers several considerations in regards to identifier generation in Axon Framework-based applications.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/identifier-generation-guide/","navigation":[{"items":[{"content":"Identifier Generation","url":"/identifier-generation-guide/","urlType":"internal"}],"root":true,"order":0}]},"identifier-generation-guide/axon-4.10.x":{"displayVersion":"axon-4.10.x","title":"Axon Framework Identifier Generation Guide","version":"axon-4.10.x","name":"identifier-generation-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers several considerations in regards to identifier generation in Axon Framework-based applications.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/identifier-generation-guide/axon-4.10.x/","navigation":[{"items":[{"content":"Identifier Generation","url":"/identifier-generation-guide/axon-4.10.x/","urlType":"internal"}],"root":true,"order":0}]},"message-handler-tuning-guide/master":{"displayVersion":"master","title":"Axon Framework Message Handler Tuning Guide","version":"master","name":"message-handler-tuning-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers the message handler tuning in your Axon Framework applications.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/message-handler-tuning-guide/","navigation":[{"items":[{"content":"Introduction","url":"/message-handler-tuning-guide/","urlType":"internal","items":[{"content":"Parameter Resolvers","url":"/message-handler-tuning-guide/parameter-resolvers/","urlType":"internal"},{"content":"Handler Enhancers","url":"/message-handler-tuning-guide/handler-enhancers/","urlType":"internal"}]}],"root":true,"order":0}]},"message-handler-tuning-guide/axon-4.10.x":{"displayVersion":"axon-4.10.x","title":"Axon Framework Message Handler Tuning Guide","version":"axon-4.10.x","name":"message-handler-tuning-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers the message handler tuning in your Axon Framework applications.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/message-handler-tuning-guide/axon-4.10.x/","navigation":[{"items":[{"content":"Introduction","url":"/message-handler-tuning-guide/axon-4.10.x/","urlType":"internal","items":[{"content":"Parameter Resolvers","url":"/message-handler-tuning-guide/axon-4.10.x/parameter-resolvers/","urlType":"internal"},{"content":"Handler Enhancers","url":"/message-handler-tuning-guide/axon-4.10.x/handler-enhancers/","urlType":"internal"}]}],"root":true,"order":0}]},"meta-annotations-guide/master":{"displayVersion":"master","title":"Axon Framework Meta Annotations Guide","version":"master","name":"meta-annotations-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers several considerations in regards to creating Meta Annotations for Axon Framework-based applications.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/meta-annotations-guide/","navigation":[{"items":[{"content":"Meta Annotations","url":"/meta-annotations-guide/","urlType":"internal"}],"root":true,"order":0}]},"meta-annotations-guide/axon-4.10.x":{"displayVersion":"axon-4.10.x","title":"Axon Framework Meta Annotations Guide","version":"axon-4.10.x","name":"meta-annotations-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers several considerations in regards to creating Meta Annotations for Axon Framework-based applications.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/meta-annotations-guide/axon-4.10.x/","navigation":[{"items":[{"content":"Meta Annotations","url":"/meta-annotations-guide/axon-4.10.x/","urlType":"internal"}],"root":true,"order":0}]},"rdbms-tuning-guide/master":{"displayVersion":"master","title":"Axon Framework RDBMS tuning Guide","version":"master","name":"rdbms-tuning-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers several considerations in regards to tuning the database for events.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/rdbms-tuning-guide/","navigation":[{"items":[{"content":"RDBMS Tuning","url":"/rdbms-tuning-guide/","urlType":"internal"}],"root":true,"order":0}]},"rdbms-tuning-guide/axon-4.10.x":{"displayVersion":"axon-4.10.x","title":"Axon Framework RDBMS tuning Guide","version":"axon-4.10.x","name":"rdbms-tuning-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers several considerations in regards to tuning the database for events.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/rdbms-tuning-guide/axon-4.10.x/","navigation":[{"items":[{"content":"RDBMS Tuning","url":"/rdbms-tuning-guide/axon-4.10.x/","urlType":"internal"}],"root":true,"order":0}]},"amqp-extension-reference/master":{"displayVersion":"master","title":"Spring AMQP Reference","version":"master","name":"amqp-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding AMQP support for event streaming","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/amqp-extension-reference/","navigation":[{"items":[{"content":"Spring AMQP Extension","url":"/amqp-extension-reference/","urlType":"internal","items":[{"content":"Forwarding events to an AMQP exchange","url":"/amqp-extension-reference/forwarding/","urlType":"internal"},{"content":"Reading events from an AMQP Queue","url":"/amqp-extension-reference/reading/","urlType":"internal"}]}],"root":true,"order":0}]},"jgroups-extension-reference/master":{"displayVersion":"master","title":"JGroups Extension Reference","version":"master","name":"jgroups-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding JGroups integration for command routing","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/jgroups-extension-reference/","navigation":[{"items":[{"content":"JGroups Extension","url":"/jgroups-extension-reference/","urlType":"internal","items":[{"content":"Configuration in SpringBoot","url":"/jgroups-extension-reference/springboot-config/","urlType":"internal"}]}],"root":true,"order":0}]},"jobrunr-pro-extension-reference/main":{"displayVersion":"main","title":"JobRunr Pro Extension Reference","version":"main","name":"jobrunr-pro-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extensions adding JobRunr Pro integration for deadline management","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/jobrunr-pro-extension-reference/main/","navigation":[{"items":[{"content":"JobRunr Pro Extension","url":"/jobrunr-pro-extension-reference/main/","urlType":"internal"}],"root":true,"order":0}]},"kafka-extension-reference/master":{"displayVersion":"master","title":"Kafka Extension Reference","version":"master","name":"kafka-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding Kafka integration for event streaming","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/kafka-extension-reference/","navigation":[{"items":[{"content":"Kafka Extension Guide","url":"/kafka-extension-reference/","urlType":"internal","items":[{"content":"Publishing Events to Kafka","url":"/kafka-extension-reference/publishing/","urlType":"internal"},{"content":"Consuming Events From Kafka","url":"/kafka-extension-reference/consuming/","urlType":"internal"},{"content":"Customizing Event Message Format","url":"/kafka-extension-reference/message-format/","urlType":"internal"},{"content":"Configuration in SpringBoot","url":"/kafka-extension-reference/springboot-configuration/","urlType":"internal"}]}],"root":true,"order":0}]},"kotlin-extension-reference/master":{"displayVersion":"master","title":"Kotlin Extension Reference","version":"master","name":"kotlin-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension enhancing the development experience when using Kotlin","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/kotlin-extension-reference/","navigation":[{"items":[{"content":"Kotlin Extension","url":"/kotlin-extension-reference/","urlType":"internal","items":[{"content":"Commands","url":"/kotlin-extension-reference/commands/","urlType":"internal"},{"content":"Events","url":"/kotlin-extension-reference/events/","urlType":"internal"},{"content":"Queries","url":"/kotlin-extension-reference/queries/","urlType":"internal"}]}],"root":true,"order":0}]},"mongodb-extension-reference/master":{"displayVersion":"master","title":"MongoDB Extension Reference","version":"master","name":"mongodb-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding MongoDB integration for all Axon Framework components requiring storage","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/mongodb-extension-reference/","navigation":[{"items":[{"content":"MongoDB Extension","url":"/mongodb-extension-reference/","urlType":"internal","items":[{"content":"Configuration of the Event Store with Spring","url":"/mongodb-extension-reference/spring-config/","urlType":"internal"},{"content":"Configuration in SpringBoot","url":"/mongodb-extension-reference/springboot-config/","urlType":"internal"},{"content":"Configuration of the MongoDB Dead-Letter Queue with Spring","url":"/mongodb-extension-reference/dlq-spring-config/","urlType":"internal"}]}],"root":true,"order":0}]},"multitenancy-extension-reference/main":{"displayVersion":"main","title":"Multitenancy Extension Reference","version":"main","name":"multitenancy-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding building blocks to simplify multitenancy, particularly straightforward in combination with Axon Server","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/multitenancy-extension-reference/main/","navigation":[{"items":[{"content":"Introduction","url":"/multitenancy-extension-reference/main/","urlType":"internal"},{"content":"Configuration","url":"/multitenancy-extension-reference/main/configuration/","urlType":"internal"},{"content":"Supported Multi-Tenant Components","url":"/multitenancy-extension-reference/main/multi-tenant-components/","urlType":"internal"},{"content":"Disable Extension","url":"/multitenancy-extension-reference/main/disable/","urlType":"internal"}],"root":true,"order":0}]},"reactor-extension-reference/master":{"displayVersion":"master","title":"Reactor Extension Reference","version":"master","name":"reactor-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension providing Axon Framework-specific infrastructure components using the Project Reactor API","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/reactor-extension-reference/","navigation":[{"items":[{"content":"Reactor Extension","url":"/reactor-extension-reference/","urlType":"internal","items":[{"content":"Reactor Gateways","url":"/reactor-extension-reference/reactor-gateways/","urlType":"internal"}]}],"root":true,"order":0}]},"spring-aot-extension-reference/main":{"displayVersion":"main","title":"Spring AOT Extension Guide","version":"main","name":"spring-aot-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension providing native compilation for Axon and Spring-based applications","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/spring-aot-extension-reference/main/","navigation":[{"items":[{"content":"Spring Ahead of Time","url":"/spring-aot-extension-reference/main/","urlType":"internal","items":[{"content":"Compiling to Native","url":"/spring-aot-extension-reference/main/compile-to-native/","urlType":"internal"},{"content":"Performance Tips","url":"/spring-aot-extension-reference/main/performance/","urlType":"internal"}]}],"root":true,"order":0}]},"spring-cloud-extension-reference/master":{"displayVersion":"master","title":"Spring Cloud Extension Guide","version":"master","name":"spring-cloud-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding Spring Cloud integration for command routing","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/spring-cloud-extension-reference/","navigation":[{"items":[{"content":"Spring Cloud Extension","url":"/spring-cloud-extension-reference/","urlType":"internal","items":[{"content":"Discovering Command Routes","url":"/spring-cloud-extension-reference/command-routes/","urlType":"internal"},{"content":"Sending Commands between Nodes","url":"/spring-cloud-extension-reference/internode-commands/","urlType":"internal"},{"content":"Configuring This Extension","url":"/spring-cloud-extension-reference/config/","urlType":"internal"}]}],"root":true,"order":0}]},"tracing-extension-reference/master":{"displayVersion":"master","title":"Tracing Extension Guide","version":"master","name":"tracing-extension-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Extension adding OpenTracing integration to Axon's infrastructure components, superseded by integrated Open Telemetry support","type":"extension-reference","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/tracing-extension-reference/","navigation":[{"items":[{"content":"Tracing","url":"/tracing-extension-reference/","urlType":"internal","items":[{"content":"Configuring the Extension","url":"/tracing-extension-reference/config/","urlType":"internal"}]}],"root":true,"order":0}]},"axon-server-fundamentals/master":{"displayVersion":"master","title":"Axon Server Fundamentals","version":"master","name":"axon-server-fundamentals","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"A tutorial covering Axon Server's fundamental components and features.","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-fundamentals/","navigation":[{"items":[{"content":"Overview","url":"/axon-server-fundamentals/overview/","urlType":"internal"},{"content":"Installation","url":"/axon-server-fundamentals/installation/","urlType":"internal"},{"content":"Configuration","url":"/axon-server-fundamentals/configuration/","urlType":"internal"}],"root":true,"order":0}]},"axon-server-fundamentals/axonserver-ee-2024.1.x":{"displayVersion":"axonserver-ee-2024.1.x","title":"Axon Server Fundamentals","version":"axonserver-ee-2024.1.x","name":"axon-server-fundamentals","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"A tutorial covering Axon Server's fundamental components and features.","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-fundamentals/axonserver-ee-2024.1.x/","navigation":[{"items":[{"content":"Overview","url":"/axon-server-fundamentals/axonserver-ee-2024.1.x/overview/","urlType":"internal"},{"content":"Installation","url":"/axon-server-fundamentals/axonserver-ee-2024.1.x/installation/","urlType":"internal"},{"content":"Configuration","url":"/axon-server-fundamentals/axonserver-ee-2024.1.x/configuration/","urlType":"internal"}],"root":true,"order":0}]},"axon-server-query-language-guide/master":{"displayVersion":"master","title":"Axon Server Query Language Guide","version":"master","name":"axon-server-query-language-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers the axon server query language.","type":"guide","group":"axon-server"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-query-language-guide/","navigation":[{"items":[{"content":"Principles","url":"/axon-server-query-language-guide/","urlType":"internal","items":[{"content":"Filters","url":"/axon-server-query-language-guide/filters/","urlType":"internal"},{"content":"Projections","url":"/axon-server-query-language-guide/projections/","urlType":"internal"},{"content":"Other Functions","url":"/axon-server-query-language-guide/other-functions/","urlType":"internal"},{"content":"Pipelines","url":"/axon-server-query-language-guide/pipelines/","urlType":"internal"},{"content":"Time Constraints","url":"/axon-server-query-language-guide/time-constraints/","urlType":"internal"}]}],"root":true,"order":0}]},"axon-server-query-language-guide/axonserver-ee-2024.1.x":{"displayVersion":"axonserver-ee-2024.1.x","title":"Axon Server Query Language Guide","version":"axonserver-ee-2024.1.x","name":"axon-server-query-language-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Guide that covers the axon server query language.","type":"guide","group":"axon-server"},"sourcemap":false,"extensions":[{},{}]},"url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/","navigation":[{"items":[{"content":"Principles","url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/","urlType":"internal","items":[{"content":"Filters","url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/filters/","urlType":"internal"},{"content":"Projections","url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/projections/","urlType":"internal"},{"content":"Other Functions","url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/other-functions/","urlType":"internal"},{"content":"Pipelines","url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/pipelines/","urlType":"internal"},{"content":"Time Constraints","url":"/axon-server-query-language-guide/axonserver-ee-2024.1.x/time-constraints/","urlType":"internal"}]}],"root":true,"order":0}]},"as-marketplace-installation-guide/main":{"displayVersion":"main","title":"Axon Server Google Marketplace Installation Guide","version":"main","name":"as-marketplace-installation-guide","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"A tutorial to help you installing Axon Server Google via Marketplace.","type":"guide","group":"axon-server"},"sourcemap":false,"extensions":[{},{}]},"url":"/as-marketplace-installation-guide/main/","navigation":[{"items":[{"content":"Axon Server Google Marketplace Installation Guide","url":"/as-marketplace-installation-guide/main/","urlType":"internal"}],"root":true,"order":0}]},"synapse-quick-start/v0.11":{"displayVersion":"v0.11","title":"Axon Synapse Quick Start","version":"v0.11","name":"synapse-quick-start","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The quick start guide for using Axon Synapse as HTTP bridge to Axon Server","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-quick-start/v0.11/","navigation":[{"items":[{"content":"Installation","url":"/synapse-quick-start/v0.11/installation/","urlType":"internal"},{"content":"Send Messages with Postman","url":"/synapse-quick-start/v0.11/postman-send/","urlType":"internal"},{"content":"Receive Messages with Postman","url":"/synapse-quick-start/v0.11/postman-receive/","urlType":"internal"}],"root":true,"order":0}]},"synapse-quick-start/v0.10":{"displayVersion":"v0.10","title":"Axon Synapse Quick Start","version":"v0.10","name":"synapse-quick-start","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The quick start guide for using Axon Synapse as HTTP bridge to Axon Server","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-quick-start/v0.10/","navigation":[{"items":[{"content":"Installation","url":"/synapse-quick-start/v0.10/installation/","urlType":"internal"},{"content":"Send Messages with Postman","url":"/synapse-quick-start/v0.10/postman-send/","urlType":"internal"},{"content":"Receive Messages with Postman","url":"/synapse-quick-start/v0.10/postman-receive/","urlType":"internal"}],"root":true,"order":0}]},"synapse-quick-start/v0.9":{"displayVersion":"v0.9","title":"Axon Synapse Quick Start","version":"v0.9","name":"synapse-quick-start","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The quick start guide for using Axon Synapse as HTTP bridge to Axon Server","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-quick-start/v0.9/","navigation":[{"items":[{"content":"Installation","url":"/synapse-quick-start/v0.9/installation/","urlType":"internal"},{"content":"Send Messages with Postman","url":"/synapse-quick-start/v0.9/postman-send/","urlType":"internal"},{"content":"Receive Messages with Postman","url":"/synapse-quick-start/v0.9/postman-receive/","urlType":"internal"}],"root":true,"order":0}]},"synapse-quick-start/v0.8":{"displayVersion":"v0.8","title":"Axon Synapse Quick Start","version":"v0.8","name":"synapse-quick-start","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The quick start guide for using Axon Synapse as HTTP bridge to Axon Server","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-quick-start/v0.8/","navigation":[{"items":[{"content":"Installation","url":"/synapse-quick-start/v0.8/installation/","urlType":"internal"},{"content":"Send Messages with Postman","url":"/synapse-quick-start/v0.8/postman-send/","urlType":"internal"},{"content":"Receive Messages with Postman","url":"/synapse-quick-start/v0.8/postman-receive/","urlType":"internal"}],"root":true,"order":0}]},"synapse-quick-start/v0.7":{"displayVersion":"v0.7","title":"Axon Synapse Quick Start","version":"v0.7","name":"synapse-quick-start","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The quick start guide for using Axon Synapse as HTTP bridge to Axon Server","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-quick-start/v0.7/","navigation":[{"items":[{"content":"Installation","url":"/synapse-quick-start/v0.7/installation/","urlType":"internal"},{"content":"Send Messages with Postman","url":"/synapse-quick-start/v0.7/postman-send/","urlType":"internal"},{"content":"Receive Messages with Postman","url":"/synapse-quick-start/v0.7/postman-receive/","urlType":"internal"}],"root":true,"order":0}]},"synapse-quick-start/v0.6":{"displayVersion":"v0.6","title":"Axon Synapse Quick Start","version":"v0.6","name":"synapse-quick-start","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"The quick start guide for using Axon Synapse as HTTP bridge to Axon Server","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-quick-start/v0.6/","navigation":[{"items":[{"content":"Installation","url":"/synapse-quick-start/v0.6/installation/","urlType":"internal"},{"content":"Send Messages with Postman","url":"/synapse-quick-start/v0.6/postman-send/","urlType":"internal"},{"content":"Receive Messages with Postman","url":"/synapse-quick-start/v0.6/postman-receive/","urlType":"internal"}],"root":true,"order":0}]},"synapse-reference/v0.11":{"displayVersion":"v0.11","title":"Axon Synapse","version":"v0.11","name":"synapse-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Synapse reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-reference/v0.11/","navigation":[{"items":[{"content":"High-Level Overview","url":"/synapse-reference/v0.11/overview/","urlType":"internal"},{"content":"Installation","url":"/synapse-reference/v0.11/installation/","urlType":"internal"},{"content":"Configuration","url":"/synapse-reference/v0.11/configuration/","urlType":"internal"},{"content":"Access Control","url":"/synapse-reference/v0.11/access-control/","urlType":"internal"},{"content":"Sending Messages","url":"/synapse-reference/v0.11/sending-messages/","urlType":"internal","items":[{"content":"Sending Commands","url":"/synapse-reference/v0.11/sending-commands/","urlType":"internal"},{"content":"Sending Queries","url":"/synapse-reference/v0.11/sending-queries/","urlType":"internal"},{"content":"Sending Events","url":"/synapse-reference/v0.11/sending-events/","urlType":"internal"}]},{"content":"Receiving Messages","url":"/synapse-reference/v0.11/receiving-messages/","urlType":"internal","items":[{"content":"Receiving Commands","url":"/synapse-reference/v0.11/receiving-commands/","urlType":"internal"},{"content":"Receiving Queries","url":"/synapse-reference/v0.11/receiving-queries/","urlType":"internal"},{"content":"Receiving Events","url":"/synapse-reference/v0.11/receiving-events/","urlType":"internal"}]},{"content":"Aggregates","url":"/synapse-reference/v0.11/aggregates/","urlType":"internal"},{"content":"Multi-Context","url":"/synapse-reference/v0.11/multi-context/","urlType":"internal"},{"content":"Storage","url":"/synapse-reference/v0.11/storage/","urlType":"internal"},{"content":"High Availability","url":"/synapse-reference/v0.11/ha/","urlType":"internal","items":[{"content":"HA Configuration","url":"/synapse-reference/v0.11/ha/ha-config/","urlType":"internal"}]},{"content":"Release Notes","url":"/synapse-reference/v0.11/release-notes/","urlType":"internal"},{"content":"Open API Documentation","url":"/synapse-reference/v0.11/openapi/","urlType":"internal","items":[{"content":"Axon Synapse API","url":"/synapse-reference/v0.11/openapi/synapse/","urlType":"internal"},{"content":"Client Message API","url":"/synapse-reference/v0.11/openapi/client-message/","urlType":"internal"},{"content":"Client Raw API","url":"/synapse-reference/v0.11/openapi/client-raw/","urlType":"internal"}]}],"root":true,"order":0}]},"synapse-reference/v0.10":{"displayVersion":"v0.10","title":"Axon Synapse","version":"v0.10","name":"synapse-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Synapse reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-reference/v0.10/","navigation":[{"items":[{"content":"High-Level Overview","url":"/synapse-reference/v0.10/overview/","urlType":"internal"},{"content":"Installation","url":"/synapse-reference/v0.10/installation/","urlType":"internal"},{"content":"Configuration","url":"/synapse-reference/v0.10/configuration/","urlType":"internal"},{"content":"Access Control","url":"/synapse-reference/v0.10/access-control/","urlType":"internal"},{"content":"Sending Messages","url":"/synapse-reference/v0.10/sending-messages/","urlType":"internal","items":[{"content":"Sending Commands","url":"/synapse-reference/v0.10/sending-commands/","urlType":"internal"},{"content":"Sending Queries","url":"/synapse-reference/v0.10/sending-queries/","urlType":"internal"},{"content":"Sending Events","url":"/synapse-reference/v0.10/sending-events/","urlType":"internal"}]},{"content":"Receiving Messages","url":"/synapse-reference/v0.10/receiving-messages/","urlType":"internal","items":[{"content":"Receiving Commands","url":"/synapse-reference/v0.10/receiving-commands/","urlType":"internal"},{"content":"Receiving Queries","url":"/synapse-reference/v0.10/receiving-queries/","urlType":"internal"},{"content":"Receiving Events","url":"/synapse-reference/v0.10/receiving-events/","urlType":"internal"}]},{"content":"Aggregates","url":"/synapse-reference/v0.10/aggregates/","urlType":"internal"},{"content":"Multi-Context","url":"/synapse-reference/v0.10/multi-context/","urlType":"internal"},{"content":"Storage","url":"/synapse-reference/v0.10/storage/","urlType":"internal"},{"content":"High Availability","url":"/synapse-reference/v0.10/ha/","urlType":"internal","items":[{"content":"HA Configuration","url":"/synapse-reference/v0.10/ha/ha-config/","urlType":"internal"}]},{"content":"Release Notes","url":"/synapse-reference/v0.10/release-notes/","urlType":"internal"},{"content":"Open API Documentation","url":"/synapse-reference/v0.10/openapi/","urlType":"internal","items":[{"content":"Axon Synapse API","url":"/synapse-reference/v0.10/openapi/synapse/","urlType":"internal"},{"content":"Client Message API","url":"/synapse-reference/v0.10/openapi/client-message/","urlType":"internal"},{"content":"Client Raw API","url":"/synapse-reference/v0.10/openapi/client-raw/","urlType":"internal"}]}],"root":true,"order":0}]},"synapse-reference/v0.9":{"displayVersion":"v0.9","title":"Axon Synapse","version":"v0.9","name":"synapse-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Synapse reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-reference/v0.9/","navigation":[{"items":[{"content":"High-Level Overview","url":"/synapse-reference/v0.9/overview/","urlType":"internal"},{"content":"Installation","url":"/synapse-reference/v0.9/installation/","urlType":"internal"},{"content":"Configuration","url":"/synapse-reference/v0.9/configuration/","urlType":"internal"},{"content":"Access Control","url":"/synapse-reference/v0.9/access-control/","urlType":"internal"},{"content":"Sending Messages","url":"/synapse-reference/v0.9/sending-messages/","urlType":"internal","items":[{"content":"Sending Commands","url":"/synapse-reference/v0.9/sending-commands/","urlType":"internal"},{"content":"Sending Queries","url":"/synapse-reference/v0.9/sending-queries/","urlType":"internal"},{"content":"Sending Events","url":"/synapse-reference/v0.9/sending-events/","urlType":"internal"}]},{"content":"Receiving Messages","url":"/synapse-reference/v0.9/receiving-messages/","urlType":"internal","items":[{"content":"Receiving Commands","url":"/synapse-reference/v0.9/receiving-commands/","urlType":"internal"},{"content":"Receiving Queries","url":"/synapse-reference/v0.9/receiving-queries/","urlType":"internal"},{"content":"Receiving Events","url":"/synapse-reference/v0.9/receiving-events/","urlType":"internal"}]},{"content":"Aggregates","url":"/synapse-reference/v0.9/aggregates/","urlType":"internal"},{"content":"Multi-Context","url":"/synapse-reference/v0.9/multi-context/","urlType":"internal"},{"content":"Storage","url":"/synapse-reference/v0.9/storage/","urlType":"internal"},{"content":"High Availability","url":"/synapse-reference/v0.9/ha/","urlType":"internal","items":[{"content":"HA Configuration","url":"/synapse-reference/v0.9/ha/ha-config/","urlType":"internal"}]},{"content":"Release Notes","url":"/synapse-reference/v0.9/release-notes/","urlType":"internal"},{"content":"Open API Documentation","url":"/synapse-reference/v0.9/openapi/","urlType":"internal","items":[{"content":"Axon Synapse API","url":"/synapse-reference/v0.9/openapi/synapse/","urlType":"internal"},{"content":"Client Message API","url":"/synapse-reference/v0.9/openapi/client-message/","urlType":"internal"},{"content":"Client Raw API","url":"/synapse-reference/v0.9/openapi/client-raw/","urlType":"internal"}]}],"root":true,"order":0}]},"synapse-reference/v0.8":{"displayVersion":"v0.8","title":"Axon Synapse","version":"v0.8","name":"synapse-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Synapse reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-reference/v0.8/","navigation":[{"items":[{"content":"High-Level Overview","url":"/synapse-reference/v0.8/overview/","urlType":"internal"},{"content":"Installation","url":"/synapse-reference/v0.8/installation/","urlType":"internal"},{"content":"Configuration","url":"/synapse-reference/v0.8/configuration/","urlType":"internal"},{"content":"Access Control","url":"/synapse-reference/v0.8/access-control/","urlType":"internal"},{"content":"Sending Messages","url":"/synapse-reference/v0.8/sending-messages/","urlType":"internal","items":[{"content":"Sending Commands","url":"/synapse-reference/v0.8/sending-commands/","urlType":"internal"},{"content":"Sending Queries","url":"/synapse-reference/v0.8/sending-queries/","urlType":"internal"},{"content":"Sending Events","url":"/synapse-reference/v0.8/sending-events/","urlType":"internal"}]},{"content":"Receiving Messages","url":"/synapse-reference/v0.8/receiving-messages/","urlType":"internal","items":[{"content":"Receiving Commands","url":"/synapse-reference/v0.8/receiving-commands/","urlType":"internal"},{"content":"Receiving Queries","url":"/synapse-reference/v0.8/receiving-queries/","urlType":"internal"},{"content":"Receiving Events","url":"/synapse-reference/v0.8/receiving-events/","urlType":"internal"}]},{"content":"Aggregates","url":"/synapse-reference/v0.8/aggregates/","urlType":"internal"},{"content":"Multi-Context","url":"/synapse-reference/v0.8/multi-context/","urlType":"internal"},{"content":"Storage","url":"/synapse-reference/v0.8/storage/","urlType":"internal"},{"content":"High Availability","url":"/synapse-reference/v0.8/ha/","urlType":"internal","items":[{"content":"HA Configuration","url":"/synapse-reference/v0.8/ha/ha-config/","urlType":"internal"}]},{"content":"Release Notes","url":"/synapse-reference/v0.8/release-notes/","urlType":"internal"},{"content":"Open API Documentation","url":"/synapse-reference/v0.8/openapi/","urlType":"internal","items":[{"content":"Axon Synapse API","url":"/synapse-reference/v0.8/openapi/synapse/","urlType":"internal"},{"content":"Client Message API","url":"/synapse-reference/v0.8/openapi/client-message/","urlType":"internal"},{"content":"Client Raw API","url":"/synapse-reference/v0.8/openapi/client-raw/","urlType":"internal"}]}],"root":true,"order":0}]},"synapse-reference/v0.7":{"displayVersion":"v0.7","title":"Axon Synapse","version":"v0.7","name":"synapse-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Synapse reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-reference/v0.7/","navigation":[{"items":[{"content":"High-Level Overview","url":"/synapse-reference/v0.7/overview/","urlType":"internal"},{"content":"Installation","url":"/synapse-reference/v0.7/installation/","urlType":"internal"},{"content":"Configuration","url":"/synapse-reference/v0.7/configuration/","urlType":"internal"},{"content":"Access Control","url":"/synapse-reference/v0.7/access-control/","urlType":"internal"},{"content":"Sending Messages","url":"/synapse-reference/v0.7/sending-messages/","urlType":"internal","items":[{"content":"Sending Commands","url":"/synapse-reference/v0.7/sending-commands/","urlType":"internal"},{"content":"Sending Queries","url":"/synapse-reference/v0.7/sending-queries/","urlType":"internal"},{"content":"Sending Events","url":"/synapse-reference/v0.7/sending-events/","urlType":"internal"}]},{"content":"Receiving Messages","url":"/synapse-reference/v0.7/receiving-messages/","urlType":"internal","items":[{"content":"Receiving Commands","url":"/synapse-reference/v0.7/receiving-commands/","urlType":"internal"},{"content":"Receiving Queries","url":"/synapse-reference/v0.7/receiving-queries/","urlType":"internal"},{"content":"Receiving Events","url":"/synapse-reference/v0.7/receiving-events/","urlType":"internal"}]},{"content":"Aggregates","url":"/synapse-reference/v0.7/aggregates/","urlType":"internal"},{"content":"Multi-Context","url":"/synapse-reference/v0.7/multi-context/","urlType":"internal"},{"content":"Storage","url":"/synapse-reference/v0.7/storage/","urlType":"internal"},{"content":"High Availability","url":"/synapse-reference/v0.7/ha/","urlType":"internal","items":[{"content":"HA Configuration","url":"/synapse-reference/v0.7/ha/ha-config/","urlType":"internal"}]},{"content":"Release Notes","url":"/synapse-reference/v0.7/release-notes/","urlType":"internal"},{"content":"Open API Documentation","url":"/synapse-reference/v0.7/openapi/","urlType":"internal","items":[{"content":"Axon Synapse API","url":"/synapse-reference/v0.7/openapi/synapse/","urlType":"internal"},{"content":"Client Message API","url":"/synapse-reference/v0.7/openapi/client-message/","urlType":"internal"},{"content":"Client Raw API","url":"/synapse-reference/v0.7/openapi/client-raw/","urlType":"internal"}]}],"root":true,"order":0}]},"synapse-reference/v0.6":{"displayVersion":"v0.6","title":"Axon Synapse","version":"v0.6","name":"synapse-reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Axon Synapse reference documentation","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/synapse-reference/v0.6/","navigation":[{"items":[{"content":"High-Level Overview","url":"/synapse-reference/v0.6/overview/","urlType":"internal"},{"content":"Installation","url":"/synapse-reference/v0.6/installation/","urlType":"internal"},{"content":"Configuration","url":"/synapse-reference/v0.6/configuration/","urlType":"internal"},{"content":"Access Control","url":"/synapse-reference/v0.6/access-control/","urlType":"internal"},{"content":"Sending Messages","url":"/synapse-reference/v0.6/sending-messages/","urlType":"internal","items":[{"content":"Sending Commands","url":"/synapse-reference/v0.6/sending-commands/","urlType":"internal"},{"content":"Sending Queries","url":"/synapse-reference/v0.6/sending-queries/","urlType":"internal"},{"content":"Sending Events","url":"/synapse-reference/v0.6/sending-events/","urlType":"internal"}]},{"content":"Receiving Messages","url":"/synapse-reference/v0.6/receiving-messages/","urlType":"internal","items":[{"content":"Receiving Commands","url":"/synapse-reference/v0.6/receiving-commands/","urlType":"internal"},{"content":"Receiving Queries","url":"/synapse-reference/v0.6/receiving-queries/","urlType":"internal"},{"content":"Receiving Events","url":"/synapse-reference/v0.6/receiving-events/","urlType":"internal"}]},{"content":"Aggregates","url":"/synapse-reference/v0.6/aggregates/","urlType":"internal"},{"content":"Multi-Context","url":"/synapse-reference/v0.6/multi-context/","urlType":"internal"},{"content":"Open API Documentation","url":"/synapse-reference/v0.6/openapi/","urlType":"internal","items":[{"content":"Axon Synapse API","url":"/synapse-reference/v0.6/openapi/synapse/","urlType":"internal"},{"content":"Client Message API","url":"/synapse-reference/v0.6/openapi/client-message/","urlType":"internal"},{"content":"Client Raw API","url":"/synapse-reference/v0.6/openapi/client-raw/","urlType":"internal"}]}],"root":true,"order":0}]},"axoniq-console-getting-started/main":{"displayVersion":"main","title":"AxonIQ Console Getting Started","version":"main","name":"axoniq-console-getting-started","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"A tutorial to help you getting started with AxonIQ Console.","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/axoniq-console-getting-started/main/","navigation":[{"items":[{"content":"Connect and setup AxonIQ Console","items":[{"content":"Accessing the console","url":"/axoniq-console-getting-started/main/ac-gs-setup/access/","urlType":"internal"},{"content":"First Time Setup","url":"/axoniq-console-getting-started/main/ac-gs-setup/setting-up-your-account/","urlType":"internal"},{"content":"Success! Access your AxonIQ Console dashboard","url":"/axoniq-console-getting-started/main/ac-gs-setup/success/","urlType":"internal"},{"content":"We Value Your Feedback!","url":"/axoniq-console-getting-started/main/ac-gs-setup/feedback/","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Monitor Axon Framework Applications","items":[{"content":"The AxonIQ Console Dashboard","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/dashboard/","urlType":"internal","items":[{"content":"The Applications Tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/overview-tab/","urlType":"internal"},{"content":"The Processors Tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/processors-tab/","urlType":"internal"},{"content":"The Aggregates Tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/aggregates-tab/","urlType":"internal"},{"content":"The Handler Insights Tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/handler-insights-tab/","urlType":"internal"},{"content":"The Monitoring Tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/monitoring-tab/","urlType":"internal"},{"content":"The \"Message Flow\" Tab","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/message-flow-tab/","urlType":"internal"}]},{"content":"Conclusion","url":"/axoniq-console-getting-started/main/ac-monitor-axon-framework-applications/conclusion/","urlType":"internal"}]}],"root":true,"order":0.3333},{"items":[{"content":"Installing a new instance of Axon Server","url":"/axoniq-console-getting-started/main/ac-gs-deploy-axonserver/installing-instance-as/","urlType":"internal"},{"content":"Managing AxonIQ Console Itself As The Super User","items":[{"content":"The \"Settings\" Tab","url":"/axoniq-console-getting-started/main/ac-as-superuser/settings-tab/","urlType":"internal","items":[{"content":"Applications","url":"/axoniq-console-getting-started/main/ac-as-superuser/applications/","urlType":"internal"},{"content":"Access Tokens","url":"/axoniq-console-getting-started/main/ac-as-superuser/access-tokens/","urlType":"internal"}]},{"content":"Conclusion","url":"/axoniq-console-getting-started/main/ac-as-superuser/conclusion/","urlType":"internal"}]}],"root":true,"order":0.6667}]},"axoniq-console-reference/main":{"displayVersion":"main","title":"AxonIQ Console","version":"main","name":"axoniq-console-reference","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"This documentation helps users understand various parts of the AxonIQ Console in more depth to best utilize this powerful platform.","type":"reference","group":"product"},"sourcemap":false,"extensions":[{},{}]},"url":"/axoniq-console-reference/main/","navigation":[{"items":[{"content":"Features","url":"/axoniq-console-reference/main/features/","urlType":"internal","items":[{"content":"Framework Metrics","url":"/axoniq-console-reference/main/features/metrics/","urlType":"internal"},{"content":"Monitoring","url":"/axoniq-console-reference/main/features/monitoring/","urlType":"internal"},{"content":"Processor Management","url":"/axoniq-console-reference/main/features/management/","urlType":"internal"},{"content":"Dead-Letter Queues","url":"/axoniq-console-reference/main/features/dlq/","urlType":"internal"}]},{"content":"Workspaces","url":"/axoniq-console-reference/main/workspaces/","urlType":"internal","items":[{"content":"Team Management","url":"/axoniq-console-reference/main/workspaces/team-management/","urlType":"internal"},{"content":"AxonIQ Console Roles","url":"/axoniq-console-reference/main/workspaces/roles/","urlType":"internal"}]},{"content":"Billing","url":"/axoniq-console-reference/main/billing/","urlType":"internal"}],"root":true,"order":0}]},"bikerental-console-demo/main":{"displayVersion":"main","title":"Monitoring your AxonFramework Application with AxonIQ Console","version":"main","name":"bikerental-console-demo","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Monitor your Axon application with AxonIQ Console, helping you to detect wich parts of your system have a poor performance and get some hints on what can be improved.","type":"guide","group":"axon-framework"},"sourcemap":false,"extensions":[{},{}]},"url":"/bikerental-console-demo/main/","navigation":[{"items":[{"content":"Introduction","url":"/bikerental-console-demo/main/","urlType":"internal","items":[{"content":"Components and Tools Used During this Guide.","url":"/bikerental-console-demo/main/introduction/required-components-and-tools/","urlType":"internal"},{"content":"Structure Overview","url":"/bikerental-console-demo/main/introduction/guide-structure/","urlType":"internal"}]},{"content":"Setting up AxonIQ Console","url":"/bikerental-console-demo/main/axoniq-console/","urlType":"internal"},{"content":"Connect your Application","url":"/bikerental-console-demo/main/connect-your-app/","urlType":"internal","items":[{"content":"Prepare your App for AxonIQ Console","url":"/bikerental-console-demo/main/connect-your-app/custom-app/prepare-app-for-console/","urlType":"internal"},{"content":"Run Docker-Based Demo","url":"/bikerental-console-demo/main/connect-your-app/docker-based-demo/start-docker-based-demo/","urlType":"internal"}]},{"content":"Monitoring your Application with AxonIQ Console","url":"/bikerental-console-demo/main/monitoring/","urlType":"internal","items":[{"content":"Overview your Application in AxonIQ Console","url":"/bikerental-console-demo/main/monitoring/your-app-in-axoniq-console/","urlType":"internal"},{"content":"Add Axon Firestarter","url":"/bikerental-console-demo/main/monitoring/add-axon-firestarter/","urlType":"internal"},{"content":"Creating and Detecting Issues in your Application","url":"/bikerental-console-demo/main/monitoring/issues-w-firestarter/","urlType":"internal","items":[{"content":"Detecting a Slow Event Handler","url":"/bikerental-console-demo/main/monitoring/slow-event-handlers/","urlType":"internal"}]}]},{"content":"Conclusion","url":"/bikerental-console-demo/main/conclusion/","urlType":"internal"}],"root":true,"order":0}]},"bikerental-demo/main":{"displayVersion":"main","title":"Building An Axon Framework Application From Scratch","version":"main","name":"bikerental-demo","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Docs","site-url":"https://docs.axoniq.io","experimental":true,"page-pagination":true,"kroki-fetch-diagram":true,"component_description":"Getting started with designing, building, and deploying Axon Technology based applications.","type":"tutorial","group":"beginner"},"sourcemap":false,"extensions":[{},{}]},"url":"/bikerental-demo/main/","navigation":[{"items":[{"content":"Introduction","url":"/bikerental-demo/main/","urlType":"internal"},{"content":"Create New Project","url":"/bikerental-demo/main/create-axon-framework-project/","urlType":"internal"},{"content":"Bootstrap AxonFramework","url":"/bikerental-demo/main/bootstraping-axonframework/","urlType":"internal"},{"content":"Create New Bike Feature","url":"/bikerental-demo/main/implement-create-bike/","urlType":"internal"},{"content":"Running Your Application Locally With Docker Compose","url":"/bikerental-demo/main/run-app-with-docker-compose/","urlType":"internal"},{"content":"Invoking the Register Bike Endpoint","url":"/bikerental-demo/main/invoking-create-bike-endpoint/","urlType":"internal"},{"content":"Add Unit Tests For Command Handlers","url":"/bikerental-demo/main/unit-testing-commands/","urlType":"internal"},{"content":"Creating the Query Model","url":"/bikerental-demo/main/create-bike-status-projection/","urlType":"internal"}],"root":true,"order":0}]}}}})